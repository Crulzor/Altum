
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014aa8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000984  08014c88  08014c88  00024c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801560c  0801560c  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  0801560c  0801560c  0002560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015614  08015614  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015614  08015614  00025614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015618  08015618  00025618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0801561c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020dc  20000354  08015970  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002430  08015970  00032430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c0a7  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064fb  00000000  00000000  0006c42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  00072928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e60  00000000  00000000  000749c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af6f  00000000  00000000  00076820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003587a  00000000  00000000  000b178f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179d7d  00000000  00000000  000e7009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00260d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b20  00000000  00000000  00260dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014c70 	.word	0x08014c70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08014c70 	.word	0x08014c70

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components){
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3304      	adds	r3, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3314      	adds	r3, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	851a      	strh	r2, [r3, #40]	; 0x28
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	861a      	strh	r2, [r3, #48]	; 0x30

	this->_sbus = sbus;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_Selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 2);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fcfb 	bl	8003974 <_ZN10Components9get_ADC_1Ev>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2202      	movs	r2, #2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f004 fa43 	bl	8005410 <HAL_ADC_Start_DMA>



}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 8000f92:	b590      	push	{r4, r7, lr}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fdac 	bl	8002afc <_ZN4SBUS8B_buttonEv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <_ZN9Convertor9updateLEDEv+0x26>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb2:	d201      	bcs.n	8000fb8 <_ZN9Convertor9updateLEDEv+0x26>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <_ZN9Convertor9updateLEDEv+0x28>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d011      	beq.n	8000fe2 <_ZN9Convertor9updateLEDEv+0x50>
		_ledPWM += 250;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc2:	33fa      	adds	r3, #250	; 0xfa
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 f9d8 	bl	8002388 <_ZN11Initializer13get_LED_TimerEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4622      	mov	r2, r4
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 8000fe0:	e021      	b.n	8001026 <_ZN9Convertor9updateLEDEv+0x94>
	}else if(_sbus->A_button() && _ledPWM > 0){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fd2e 	bl	8002a48 <_ZN4SBUS8A_buttonEv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <_ZN9Convertor9updateLEDEv+0x6c>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <_ZN9Convertor9updateLEDEv+0x6c>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <_ZN9Convertor9updateLEDEv+0x6e>
 8000ffe:	2300      	movs	r3, #0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d010      	beq.n	8001026 <_ZN9Convertor9updateLEDEv+0x94>
		_ledPWM -= 250;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001008:	3bfa      	subs	r3, #250	; 0xfa
 800100a:	b29a      	uxth	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4618      	mov	r0, r3
 800101a:	f001 f9b5 	bl	8002388 <_ZN11Initializer13get_LED_TimerEv>
 800101e:	4603      	mov	r3, r0
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4622      	mov	r2, r4
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}

0800102e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	460b      	mov	r3, r1
 800103c:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 800103e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db76      	blt.n	8001134 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d109      	bne.n	8001060 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 800104c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001050:	2b00      	cmp	r3, #0
 8001052:	bfb8      	it	lt
 8001054:	425b      	neglt	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
 800105e:	e03c      	b.n	80010da <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b04      	cmp	r3, #4
 8001064:	d109      	bne.n	800107a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 8001066:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bfb8      	it	lt
 800106e:	425b      	neglt	r3, r3
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
 8001078:	e02f      	b.n	80010da <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b08      	cmp	r3, #8
 800107e:	d109      	bne.n	8001094 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 8001080:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001084:	2b00      	cmp	r3, #0
 8001086:	bfb8      	it	lt
 8001088:	425b      	neglt	r3, r3
 800108a:	b29a      	uxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c
 8001092:	e022      	b.n	80010da <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d109      	bne.n	80010ae <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 800109a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bfb8      	it	lt
 80010a2:	425b      	neglt	r3, r3
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
 80010ac:	e015      	b.n	80010da <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b10      	cmp	r3, #16
 80010b2:	d109      	bne.n	80010c8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 80010b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bfb8      	it	lt
 80010bc:	425b      	neglt	r3, r3
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	649a      	str	r2, [r3, #72]	; 0x48
 80010c6:	e008      	b.n	80010da <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bfb8      	it	lt
 80010d0:	425b      	neglt	r3, r3
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d104      	bne.n	80010ea <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 80010e8:	e09e      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d104      	bne.n	80010fa <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010f8:	e096      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d104      	bne.n	800110a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2200      	movs	r2, #0
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001108:	e08e      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2b0c      	cmp	r3, #12
 800110e:	d104      	bne.n	800111a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001118:	e086      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b10      	cmp	r3, #16
 800111e:	d104      	bne.n	800112a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001128:	e07e      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001132:	e079      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 8001134:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001138:	2b00      	cmp	r3, #0
 800113a:	da75      	bge.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d104      	bne.n	800114c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
 800114a:	e023      	b.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d104      	bne.n	800115c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	639a      	str	r2, [r3, #56]	; 0x38
 800115a:	e01b      	b.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d104      	bne.n	800116c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
 800116a:	e013      	b.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b0c      	cmp	r3, #12
 8001170:	d104      	bne.n	800117c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
 800117a:	e00b      	b.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d104      	bne.n	800118c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	649a      	str	r2, [r3, #72]	; 0x48
 800118a:	e003      	b.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 800119a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bfb8      	it	lt
 80011a2:	425b      	neglt	r3, r3
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011ac:	e03c      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d109      	bne.n	80011c8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 80011b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bfb8      	it	lt
 80011bc:	425b      	neglt	r3, r3
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011c6:	e02f      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d109      	bne.n	80011e2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 80011ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bfb8      	it	lt
 80011d6:	425b      	neglt	r3, r3
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011e0:	e022      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d109      	bne.n	80011fc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 80011e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bfb8      	it	lt
 80011f0:	425b      	neglt	r3, r3
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80011fa:	e015      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d109      	bne.n	8001216 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 8001202:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bfb8      	it	lt
 800120a:	425b      	neglt	r3, r3
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001214:	e008      	b.n	8001228 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001216:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bfb8      	it	lt
 800121e:	425b      	neglt	r3, r3
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_ZN9Convertor14updateSelectorEv>:




void Convertor::updateSelector(void){
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b087      	sub	sp, #28
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fb99 	bl	8002978 <_ZN4SBUS9getRightXEv>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	ee17 3a90 	vmov	r3, s15
 8001252:	b21a      	sxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	859a      	strh	r2, [r3, #44]	; 0x2c

	float cleanerPos = 110;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <_ZN9Convertor14updateSelectorEv+0x8c>)
 800125a:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <_ZN9Convertor14updateSelectorEv+0x90>)
 800125e:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001266:	2b00      	cmp	r3, #0
 8001268:	dd10      	ble.n	800128c <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_Selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4618      	mov	r0, r3
 8001276:	f001 f893 	bl	80023a0 <_ZN11Initializer18get_Selector_TimerEv>
 800127a:	4602      	mov	r2, r0
 800127c:	2308      	movs	r3, #8
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	230c      	movs	r3, #12
 8001282:	4621      	mov	r1, r4
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fed2 	bl	800102e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_Selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 800128a:	e014      	b.n	80012b6 <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001292:	2b00      	cmp	r3, #0
 8001294:	da0f      	bge.n	80012b6 <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_Selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 f87d 	bl	80023a0 <_ZN11Initializer18get_Selector_TimerEv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	2308      	movs	r3, #8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	230c      	movs	r3, #12
 80012ae:	4621      	mov	r1, r4
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff febc 	bl	800102e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	42dc0000 	.word	0x42dc0000
 80012c4:	44700000 	.word	0x44700000

080012c8 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]

	this->_pushMotorPWM = this->_sbus->getLeftY();
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fa2d 	bl	8002734 <_ZN4SBUS8getLeftYEv>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_pushMotorPWM > 0){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dd10      	ble.n	8001318 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_PushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4618      	mov	r0, r3
 8001302:	f001 f859 	bl	80023b8 <_ZN11Initializer19get_PushMotor_TimerEv>
 8001306:	4602      	mov	r2, r0
 8001308:	2308      	movs	r3, #8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2304      	movs	r3, #4
 800130e:	4621      	mov	r1, r4
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fe8c 	bl	800102e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_PushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 8001316:	e014      	b.n	8001342 <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800131e:	2b00      	cmp	r3, #0
 8001320:	da0f      	bge.n	8001342 <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_PushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f843 	bl	80023b8 <_ZN11Initializer19get_PushMotor_TimerEv>
 8001332:	4602      	mov	r2, r0
 8001334:	2308      	movs	r3, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2304      	movs	r3, #4
 800133a:	4621      	mov	r1, r4
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe76 	bl	800102e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}

0800134a <_ZN9Convertor15get_selectorPWMEv>:


}


int16_t Convertor::get_selectorPWM(){
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]

	return this->_selectorPWM;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_ZN9Convertor7processEv>:




void Convertor::process(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]


	this->updateLED();
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fe10 	bl	8000f92 <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff5e 	bl	8001234 <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffa5 	bl	80012c8 <_ZN9Convertor15updatePushMotorEv>
	this->getADC();
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fdf4 	bl	8000f6c <_ZN9Convertor6getADCEv>

}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZN9Convertor10get_LEDPWMEv>:

uint16_t Convertor::get_LEDPWM(){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

	return _ledPWM;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	0000      	movs	r0, r0
	...

080013a8 <_ZN9Convertor21get_selector_positionEv>:

int16_t Convertor::get_selector_position(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]


	return ADC_1_Buffer[0] / 4.095;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8cd 	bl	8000554 <__aeabi_ui2d>
 80013ba:	a309      	add	r3, pc, #36	; (adr r3, 80013e0 <_ZN9Convertor21get_selector_positionEv+0x38>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff fa6c 	bl	800089c <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fbec 	bl	8000ba8 <__aeabi_d2iz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b21b      	sxth	r3, r3
	//return _ADC_1_value /4.095;

}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	f3af 8000 	nop.w
 80013e0:	ae147ae1 	.word	0xae147ae1
 80013e4:	40106147 	.word	0x40106147

080013e8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]

	this->_huart1 = huart1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	605a      	str	r2, [r3, #4]
	this->initClock();
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 ff5b 	bl	80022bc <_ZN11Initializer9initClockEv>
	this->initGPIO();
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 feb2 	bl	8002170 <_ZN11Initializer8initGPIOEv>
}
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]


	this->initDMA();
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fe50 	bl	80020c4 <_ZN11Initializer7initDMAEv>


	this->initUSART_1();
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fd35 	bl	8001e94 <_ZN11Initializer11initUSART_1Ev>

	this->initTIM_1();
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f81c 	bl	8001468 <_ZN11Initializer9initTIM_1Ev>
	this->initUSART_2();
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fdb7 	bl	8001fa4 <_ZN11Initializer11initUSART_2Ev>

	this->initTIM_2();
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f904 	bl	8001644 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f96d 	bl	800171c <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f9fa 	bl	800183c <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fad9 	bl	8001a00 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fbec 	bl	8001c2c <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fcad 	bl	8001db4 <_ZN11Initializer10initTIM_20Ev>


    MX_USB_Device_Init();
 800145a:	f010 f8ad 	bl	80115b8 <MX_USB_Device_Init>





}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <_ZN11Initializer9initTIM_1Ev>:

void Initializer::initTIM_1(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	b0b0      	sub	sp, #192	; 0xc0
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim1;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001470:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	2234      	movs	r2, #52	; 0x34
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f010 fe46 	bl	8012138 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 80014ac:	4b63      	ldr	r3, [pc, #396]	; (800163c <_ZN11Initializer9initTIM_1Ev+0x1d4>)
 80014ae:	677b      	str	r3, [r7, #116]	; 0x74
	  htim1.Init.Prescaler = 8;
 80014b0:	2308      	movs	r3, #8
 80014b2:	67bb      	str	r3, [r7, #120]	; 0x78
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	2300      	movs	r3, #0
 80014b6:	67fb      	str	r3, [r7, #124]	; 0x7c
	  htim1.Init.Period = 1080;
 80014b8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80014bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  htim1.Init.RepetitionCounter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014d6:	4618      	mov	r0, r3
 80014d8:	f009 fa08 	bl	800a8ec <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf14      	ite	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2300      	moveq	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <_ZN11Initializer9initTIM_1Ev+0x90>
	  {
	    this->Error_Handler();
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 ff6f 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80014f2:	4853      	ldr	r0, [pc, #332]	; (8001640 <_ZN11Initializer9initTIM_1Ev+0x1d8>)
 80014f4:	f011 fa92 	bl	8012a1c <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001502:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f009 fcc3 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <_ZN11Initializer9initTIM_1Ev+0xbc>
	  {
	    Error_Handler();
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 ff56 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001524:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001528:	4618      	mov	r0, r3
 800152a:	f009 fa36 	bl	800a99a <HAL_TIM_PWM_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <_ZN11Initializer9initTIM_1Ev+0xe2>
	  {
	    this->Error_Handler();
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 ff46 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001544:	483e      	ldr	r0, [pc, #248]	; (8001640 <_ZN11Initializer9initTIM_1Ev+0x1d8>)
 8001546:	f011 fa69 	bl	8012a1c <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	65bb      	str	r3, [r7, #88]	; 0x58
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	663b      	str	r3, [r7, #96]	; 0x60
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001556:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800155a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f00a fb03 	bl	800bb6c <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf14      	ite	ne
 800156c:	2301      	movne	r3, #1
 800156e:	2300      	moveq	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <_ZN11Initializer9initTIM_1Ev+0x114>
	  {
	    this->Error_Handler();
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 ff2a 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157c:	2360      	movs	r3, #96	; 0x60
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.Pulse = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001598:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800159c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a0:	2208      	movs	r2, #8
 80015a2:	4618      	mov	r0, r3
 80015a4:	f009 fb62 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	2300      	moveq	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <_ZN11Initializer9initTIM_1Ev+0x15c>
	  {
	    this->Error_Handler();
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 ff09 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80015be:	4820      	ldr	r0, [pc, #128]	; (8001640 <_ZN11Initializer9initTIM_1Ev+0x1d8>)
 80015c0:	f011 fa2c 	bl	8012a1c <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fc:	f107 0208 	add.w	r2, r7, #8
 8001600:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f00a fb46 	bl	800bc98 <HAL_TIMEx_ConfigBreakDeadTime>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <_ZN11Initializer9initTIM_1Ev+0x1c0>
	  {
	    this->Error_Handler();
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fed7 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <_ZN11Initializer9initTIM_1Ev+0x1d8>)
 8001624:	f011 f9fa 	bl	8012a1c <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 8001628:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fec5 	bl	80043bc <HAL_TIM_MspPostInit>


}
 8001632:	bf00      	nop
 8001634:	37c0      	adds	r7, #192	; 0xc0
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40012c00 	.word	0x40012c00
 8001640:	08014c88 	.word	0x08014c88

08001644 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	b09c      	sub	sp, #112	; 0x70
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim2;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8001666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
	  htim2.Init.Prescaler = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim2.Init.Period = 4.294967295E9;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4618      	mov	r0, r3
 8001688:	f009 f930 	bl	800a8ec <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <_ZN11Initializer9initTIM_2Ev+0x64>
	  {
	    this->Error_Handler();
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fe97 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80016a2:	481d      	ldr	r0, [pc, #116]	; (8001718 <_ZN11Initializer9initTIM_2Ev+0xd4>)
 80016a4:	f011 f9ba 	bl	8012a1c <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ae:	f107 0214 	add.w	r2, r7, #20
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f009 fbeb 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <_ZN11Initializer9initTIM_2Ev+0x96>
	  {
	    this->Error_Handler();
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fe7e 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80016d4:	4810      	ldr	r0, [pc, #64]	; (8001718 <_ZN11Initializer9initTIM_2Ev+0xd4>)
 80016d6:	f011 f9a1 	bl	8012a1c <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e2:	f107 0208 	add.w	r2, r7, #8
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00a fa3d 	bl	800bb6c <HAL_TIMEx_MasterConfigSynchronization>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <_ZN11Initializer9initTIM_2Ev+0xca>
	  {
	    this->Error_Handler();
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fe64 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <_ZN11Initializer9initTIM_2Ev+0xd4>)
 800170a:	f011 f987 	bl	8012a1c <iprintf>

	  }


}
 800170e:	bf00      	nop
 8001710:	3770      	adds	r7, #112	; 0x70
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	08014ca0 	.word	0x08014ca0

0800171c <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 800171c:	b580      	push	{r7, lr}
 800171e:	b0a0      	sub	sp, #128	; 0x80
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim3;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <_ZN11Initializer9initTIM_3Ev+0x118>)
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
	  htim3.Init.Prescaler = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  htim3.Init.Period = 1000;
 8001750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001754:	643b      	str	r3, [r7, #64]	; 0x40
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	647b      	str	r3, [r7, #68]	; 0x44
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800175e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001762:	4618      	mov	r0, r3
 8001764:	f009 f919 	bl	800a99a <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <_ZN11Initializer9initTIM_3Ev+0x68>
	  {
	    this->Error_Handler();
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fe29 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800177e:	482e      	ldr	r0, [pc, #184]	; (8001838 <_ZN11Initializer9initTIM_3Ev+0x11c>)
 8001780:	f011 f94c 	bl	8012a1c <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800178c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f00a f9e8 	bl	800bb6c <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <_ZN11Initializer9initTIM_3Ev+0x9c>
	  {
	    this->Error_Handler();
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fe0f 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 80017b2:	4821      	ldr	r0, [pc, #132]	; (8001838 <_ZN11Initializer9initTIM_3Ev+0x11c>)
 80017b4:	f011 f932 	bl	8012a1c <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b8:	2360      	movs	r3, #96	; 0x60
 80017ba:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	f107 010c 	add.w	r1, r7, #12
 80017cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d0:	2200      	movs	r2, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f009 fa4a 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <_ZN11Initializer9initTIM_3Ev+0xd8>
	  {
	    this->Error_Handler();
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fdf1 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 80017ee:	4812      	ldr	r0, [pc, #72]	; (8001838 <_ZN11Initializer9initTIM_3Ev+0x11c>)
 80017f0:	f011 f914 	bl	8012a1c <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f4:	f107 010c 	add.w	r1, r7, #12
 80017f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017fc:	2204      	movs	r2, #4
 80017fe:	4618      	mov	r0, r3
 8001800:	f009 fa34 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <_ZN11Initializer9initTIM_3Ev+0x104>
	  {
	    this->Error_Handler();
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fddb 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <_ZN11Initializer9initTIM_3Ev+0x11c>)
 800181c:	f011 f8fe 	bl	8012a1c <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001820:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fdc9 	bl	80043bc <HAL_TIM_MspPostInit>


}
 800182a:	bf00      	nop
 800182c:	3780      	adds	r7, #128	; 0x80
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40000400 	.word	0x40000400
 8001838:	08014cb8 	.word	0x08014cb8

0800183c <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	b092      	sub	sp, #72	; 0x48
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6593      	str	r3, [r2, #88]	; 0x58
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <_ZN11Initializer9initTIM_4Ev+0x1bc>)
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
	  htim4.Init.Prescaler = 2;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	659a      	str	r2, [r3, #88]	; 0x58
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim4.Init.Period = 1000;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018a2:	661a      	str	r2, [r3, #96]	; 0x60
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	665a      	str	r2, [r3, #100]	; 0x64
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	66da      	str	r2, [r3, #108]	; 0x6c
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3354      	adds	r3, #84	; 0x54
 80018b4:	4618      	mov	r0, r3
 80018b6:	f009 f819 	bl	800a8ec <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <_ZN11Initializer9initTIM_4Ev+0x9a>
	  {
	    this->Error_Handler();
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fd80 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 80018d0:	484a      	ldr	r0, [pc, #296]	; (80019fc <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 80018d2:	f011 f8a3 	bl	8012a1c <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3354      	adds	r3, #84	; 0x54
 80018e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f009 fad4 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <_ZN11Initializer9initTIM_4Ev+0xcc>
	  {
	    this->Error_Handler();
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fd67 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001902:	483e      	ldr	r0, [pc, #248]	; (80019fc <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001904:	f011 f88a 	bl	8012a1c <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3354      	adds	r3, #84	; 0x54
 800190c:	4618      	mov	r0, r3
 800190e:	f009 f844 	bl	800a99a <HAL_TIM_PWM_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <_ZN11Initializer9initTIM_4Ev+0xf2>
	  {
	    this->Error_Handler();
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fd54 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001928:	4834      	ldr	r0, [pc, #208]	; (80019fc <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 800192a:	f011 f877 	bl	8012a1c <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3354      	adds	r3, #84	; 0x54
 800193a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f00a f913 	bl	800bb6c <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <_ZN11Initializer9initTIM_4Ev+0x126>
	  {
	    this->Error_Handler();
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fd3a 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 800195c:	4827      	ldr	r0, [pc, #156]	; (80019fc <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 800195e:	f011 f85d 	bl	8012a1c <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001962:	2360      	movs	r3, #96	; 0x60
 8001964:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3354      	adds	r3, #84	; 0x54
 8001976:	f107 0110 	add.w	r1, r7, #16
 800197a:	2204      	movs	r2, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f009 f975 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <_ZN11Initializer9initTIM_4Ev+0x162>
	  {
	    this->Error_Handler();
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fd1c 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001998:	4818      	ldr	r0, [pc, #96]	; (80019fc <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 800199a:	f011 f83f 	bl	8012a1c <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3354      	adds	r3, #84	; 0x54
 80019a2:	f107 0110 	add.w	r1, r7, #16
 80019a6:	2208      	movs	r2, #8
 80019a8:	4618      	mov	r0, r3
 80019aa:	f009 f95f 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <_ZN11Initializer9initTIM_4Ev+0x18e>
	  {
	    this->Error_Handler();
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fd06 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 80019c6:	f011 f829 	bl	8012a1c <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3354      	adds	r3, #84	; 0x54
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fcf4 	bl	80043bc <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3354      	adds	r3, #84	; 0x54
 80019d8:	2108      	movs	r1, #8
 80019da:	4618      	mov	r0, r3
 80019dc:	f009 f834 	bl	800aa48 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3354      	adds	r3, #84	; 0x54
 80019e4:	2104      	movs	r1, #4
 80019e6:	4618      	mov	r0, r3
 80019e8:	f009 f82e 	bl	800aa48 <HAL_TIM_PWM_Start>


}
 80019ec:	bf00      	nop
 80019ee:	3748      	adds	r7, #72	; 0x48
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40000800 	.word	0x40000800
 80019fc:	08014cd0 	.word	0x08014cd0

08001a00 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b09e      	sub	sp, #120	; 0x78
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001a08:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	4a85      	ldr	r2, [pc, #532]	; (8001c24 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a12:	6613      	str	r3, [r2, #96]	; 0x60
 8001a14:	4b83      	ldr	r3, [pc, #524]	; (8001c24 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	2234      	movs	r2, #52	; 0x34
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f010 fb6e 	bl	8012138 <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a72      	ldr	r2, [pc, #456]	; (8001c28 <_ZN11Initializer9initTIM_8Ev+0x228>)
 8001a60:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	  htim8.Init.Prescaler = 2;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim8.Init.Period = 1000;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim8.Init.RepetitionCounter = 0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	33ec      	adds	r3, #236	; 0xec
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 ff26 	bl	800a8ec <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <_ZN11Initializer9initTIM_8Ev+0xb6>
	  {
	    Error_Handler();
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fc8d 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aba:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	33ec      	adds	r3, #236	; 0xec
 8001ac0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f009 f9e4 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <_ZN11Initializer9initTIM_8Ev+0xe2>
	  {
	    Error_Handler();
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fc77 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	33ec      	adds	r3, #236	; 0xec
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f008 ff57 	bl	800a99a <HAL_TIM_PWM_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <_ZN11Initializer9initTIM_8Ev+0x102>
	  {
	    Error_Handler();
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fc67 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	33ec      	adds	r3, #236	; 0xec
 8001b12:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00a f827 	bl	800bb6c <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <_ZN11Initializer9initTIM_8Ev+0x134>
	  {
	    Error_Handler();
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fc4e 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b34:	2360      	movs	r3, #96	; 0x60
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	33ec      	adds	r3, #236	; 0xec
 8001b54:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f009 f886 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	2300      	moveq	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <_ZN11Initializer9initTIM_8Ev+0x176>
	  {
	    Error_Handler();
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fc2d 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	33ec      	adds	r3, #236	; 0xec
 8001b7a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4618      	mov	r0, r3
 8001b82:	f009 f873 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	2301      	movne	r3, #1
 8001b8e:	2300      	moveq	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <_ZN11Initializer9initTIM_8Ev+0x19c>
	  {
	    Error_Handler();
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fc1a 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb4:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	33ec      	adds	r3, #236	; 0xec
 8001bd8:	f107 020c 	add.w	r2, r7, #12
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00a f85a 	bl	800bc98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <_ZN11Initializer9initTIM_8Ev+0x1fa>
	  {
	    Error_Handler();
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fbeb 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	33ec      	adds	r3, #236	; 0xec
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fbdc 	bl	80043bc <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	33ec      	adds	r3, #236	; 0xec
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f008 ff1c 	bl	800aa48 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	33ec      	adds	r3, #236	; 0xec
 8001c14:	210c      	movs	r1, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f009 fee6 	bl	800b9e8 <HAL_TIMEx_PWMN_Start>




}
 8001c1c:	bf00      	nop
 8001c1e:	3778      	adds	r7, #120	; 0x78
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40013400 	.word	0x40013400

08001c2c <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b098      	sub	sp, #96	; 0x60
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8001c34:	4b5c      	ldr	r3, [pc, #368]	; (8001da8 <_ZN11Initializer10initTIM_16Ev+0x17c>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <_ZN11Initializer10initTIM_16Ev+0x17c>)
 8001c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <_ZN11Initializer10initTIM_16Ev+0x17c>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
 8001c5c:	615a      	str	r2, [r3, #20]
 8001c5e:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	2234      	movs	r2, #52	; 0x34
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f010 fa65 	bl	8012138 <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	; (8001dac <_ZN11Initializer10initTIM_16Ev+0x180>)
 8001c72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	  htim16.Init.Prescaler = 128;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim16.Init.Period = 1000;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim16.Init.RepetitionCounter = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	33a0      	adds	r3, #160	; 0xa0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f008 fe1d 	bl	800a8ec <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fb84 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001cc8:	4839      	ldr	r0, [pc, #228]	; (8001db0 <_ZN11Initializer10initTIM_16Ev+0x184>)
 8001cca:	f010 fea7 	bl	8012a1c <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	33a0      	adds	r3, #160	; 0xa0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f008 fe61 	bl	800a99a <HAL_TIM_PWM_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fb71 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001cee:	4830      	ldr	r0, [pc, #192]	; (8001db0 <_ZN11Initializer10initTIM_16Ev+0x184>)
 8001cf0:	f010 fe94 	bl	8012a1c <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf4:	2360      	movs	r3, #96	; 0x60
 8001cf6:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d00:	2300      	movs	r3, #0
 8001d02:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	33a0      	adds	r3, #160	; 0xa0
 8001d14:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f008 ffa6 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fb4d 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001d36:	481e      	ldr	r0, [pc, #120]	; (8001db0 <_ZN11Initializer10initTIM_16Ev+0x184>)
 8001d38:	f010 fe70 	bl	8012a1c <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	33a0      	adds	r3, #160	; 0xa0
 8001d62:	f107 0210 	add.w	r2, r7, #16
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f009 ff95 	bl	800bc98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fb26 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001d84:	480a      	ldr	r0, [pc, #40]	; (8001db0 <_ZN11Initializer10initTIM_16Ev+0x184>)
 8001d86:	f010 fe49 	bl	8012a1c <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	33a0      	adds	r3, #160	; 0xa0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fb14 	bl	80043bc <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	33a0      	adds	r3, #160	; 0xa0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 fe54 	bl	800aa48 <HAL_TIM_PWM_Start>




}
 8001da0:	bf00      	nop
 8001da2:	3760      	adds	r7, #96	; 0x60
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40014400 	.word	0x40014400
 8001db0:	08014ce8 	.word	0x08014ce8

08001db4 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09c      	sub	sp, #112	; 0x70
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <_ZN11Initializer10initTIM_20Ev+0xd8>)
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 8001de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f008 fd77 	bl	800a8ec <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fade 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e14:	481e      	ldr	r0, [pc, #120]	; (8001e90 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001e16:	f010 fe01 	bl	8012a1c <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1e:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001e20:	f107 0214 	add.w	r2, r7, #20
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f009 f832 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fac5 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e46:	4812      	ldr	r0, [pc, #72]	; (8001e90 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001e48:	f010 fde8 	bl	8012a1c <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001e58:	f107 0208 	add.w	r2, r7, #8
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f009 fe82 	bl	800bb6c <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 faa9 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001e80:	f010 fdcc 	bl	8012a1c <iprintf>

	  }



}
 8001e84:	bf00      	nop
 8001e86:	3770      	adds	r7, #112	; 0x70
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40015000 	.word	0x40015000
 8001e90:	08014ce8 	.word	0x08014ce8

08001e94 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a3e      	ldr	r2, [pc, #248]	; (8001f9c <_ZN11Initializer11initUSART_1Ev+0x108>)
 8001ea2:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001eac:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f009 ffa3 	bl	800be46 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fa5d 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8001f16:	4822      	ldr	r0, [pc, #136]	; (8001fa0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8001f18:	f010 fd80 	bl	8012a1c <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00b fb0a 	bl	800d53c <HAL_UARTEx_SetTxFifoThreshold>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fa49 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8001f3e:	4818      	ldr	r0, [pc, #96]	; (8001fa0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8001f40:	f010 fd6c 	bl	8012a1c <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00b fb34 	bl	800d5b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fa35 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8001f66:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8001f68:	f010 fd58 	bl	8012a1c <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f00b faaa 	bl	800d4ca <HAL_UARTEx_DisableFifoMode>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa22 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8001f8e:	f010 fd45 	bl	8012a1c <iprintf>

	  }



}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	08014d00 	.word	0x08014d00

08001fa4 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <_ZN11Initializer11initUSART_2Ev+0x114>)
 8001fb2:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a40      	ldr	r2, [pc, #256]	; (80020bc <_ZN11Initializer11initUSART_2Ev+0x118>)
 8001fba:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc4:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd6:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	220c      	movs	r2, #12
 8001fde:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f009 ff15 	bl	800be46 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9cf 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002032:	4823      	ldr	r0, [pc, #140]	; (80020c0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002034:	f010 fcf2 	bl	8012a1c <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f00b fa7c 	bl	800d53c <HAL_UARTEx_SetTxFifoThreshold>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f9bb 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 800205a:	4819      	ldr	r0, [pc, #100]	; (80020c0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 800205c:	f010 fcde 	bl	8012a1c <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f00b faa6 	bl	800d5b8 <HAL_UARTEx_SetRxFifoThreshold>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f9a7 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002082:	480f      	ldr	r0, [pc, #60]	; (80020c0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002084:	f010 fcca 	bl	8012a1c <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	f00b fa1c 	bl	800d4ca <HAL_UARTEx_DisableFifoMode>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f994 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80020aa:	f010 fcb7 	bl	8012a1c <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40004400 	.word	0x40004400
 80020bc:	000186a0 	.word	0x000186a0
 80020c0:	08014d14 	.word	0x08014d14

080020c4 <_ZN11Initializer7initDMAEv>:
}




void Initializer::initDMA(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 80020ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6493      	str	r3, [r2, #72]	; 0x48
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 80020da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	4a20      	ldr	r2, [pc, #128]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6493      	str	r3, [r2, #72]	; 0x48
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 80020f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 80020fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002100:	4a1a      	ldr	r2, [pc, #104]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	6493      	str	r3, [r2, #72]	; 0x48
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <_ZN11Initializer7initDMAEv+0xa8>)
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	200b      	movs	r0, #11
 800211a:	f004 fd82 	bl	8006c22 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800211e:	200b      	movs	r0, #11
 8002120:	f004 fd99 	bl	8006c56 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	200c      	movs	r0, #12
 800212a:	f004 fd7a 	bl	8006c22 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800212e:	200c      	movs	r0, #12
 8002130:	f004 fd91 	bl	8006c56 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	200d      	movs	r0, #13
 800213a:	f004 fd72 	bl	8006c22 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800213e:	200d      	movs	r0, #13
 8002140:	f004 fd89 	bl	8006c56 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	200e      	movs	r0, #14
 800214a:	f004 fd6a 	bl	8006c22 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800214e:	200e      	movs	r0, #14
 8002150:	f004 fd81 	bl	8006c56 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2038      	movs	r0, #56	; 0x38
 800215a:	f004 fd62 	bl	8006c22 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800215e:	2038      	movs	r0, #56	; 0x38
 8002160:	f004 fd79 	bl	8006c56 <HAL_NVIC_EnableIRQ>

}
 8002164:	bf00      	nop
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000

08002170 <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002188:	4b48      	ldr	r3, [pc, #288]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218c:	4a47      	ldr	r2, [pc, #284]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002194:	4b45      	ldr	r3, [pc, #276]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a0:	4b42      	ldr	r3, [pc, #264]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	4a41      	ldr	r2, [pc, #260]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021a6:	f043 0320 	orr.w	r3, r3, #32
 80021aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021b8:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c4:	4b39      	ldr	r3, [pc, #228]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	4a35      	ldr	r2, [pc, #212]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	4b30      	ldr	r3, [pc, #192]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <_ZN11Initializer8initGPIOEv+0x13c>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002206:	482a      	ldr	r0, [pc, #168]	; (80022b0 <_ZN11Initializer8initGPIOEv+0x140>)
 8002208:	f005 fbbe 	bl	8007988 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2102      	movs	r1, #2
 8002210:	4828      	ldr	r0, [pc, #160]	; (80022b4 <_ZN11Initializer8initGPIOEv+0x144>)
 8002212:	f005 fbb9 	bl	8007988 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221c:	4826      	ldr	r0, [pc, #152]	; (80022b8 <_ZN11Initializer8initGPIOEv+0x148>)
 800221e:	f005 fbb3 	bl	8007988 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	2110      	movs	r1, #16
 8002226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222a:	f005 fbad 	bl	8007988 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 800222e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002232:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	481a      	ldr	r0, [pc, #104]	; (80022b0 <_ZN11Initializer8initGPIOEv+0x140>)
 8002248:	f005 fa1c 	bl	8007684 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 800224c:	2302      	movs	r3, #2
 800224e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <_ZN11Initializer8initGPIOEv+0x144>)
 8002264:	f005 fa0e 	bl	8007684 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 8002268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226c:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	480d      	ldr	r0, [pc, #52]	; (80022b8 <_ZN11Initializer8initGPIOEv+0x148>)
 8002282:	f005 f9ff 	bl	8007684 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002286:	2310      	movs	r3, #16
 8002288:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a0:	f005 f9f0 	bl	8007684 <HAL_GPIO_Init>

}
 80022a4:	bf00      	nop
 80022a6:	3730      	adds	r7, #48	; 0x30
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	48000800 	.word	0x48000800
 80022b4:	48001400 	.word	0x48001400
 80022b8:	48001800 	.word	0x48001800

080022bc <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b096      	sub	sp, #88	; 0x58
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	2238      	movs	r2, #56	; 0x38
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00f ff33 	bl	8012138 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022e6:	f007 fadb 	bl	80098a0 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80022ea:	2322      	movs	r3, #34	; 0x22
 80022ec:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022f4:	2340      	movs	r3, #64	; 0x40
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80022f8:	2301      	movs	r3, #1
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fc:	2302      	movs	r3, #2
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002300:	2302      	movs	r3, #2
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002304:	2301      	movs	r3, #1
 8002306:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 8002308:	2310      	movs	r3, #16
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800230c:	2302      	movs	r3, #2
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002310:	2302      	movs	r3, #2
 8002312:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002314:	2302      	movs	r3, #2
 8002316:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002318:	f107 0320 	add.w	r3, r7, #32
 800231c:	4618      	mov	r0, r3
 800231e:	f007 fb63 	bl	80099e8 <HAL_RCC_OscConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f84c 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 8002338:	4812      	ldr	r0, [pc, #72]	; (8002384 <_ZN11Initializer9initClockEv+0xc8>)
 800233a:	f010 fb6f 	bl	8012a1c <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800233e:	230f      	movs	r3, #15
 8002340:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002342:	2303      	movs	r3, #3
 8002344:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	2103      	movs	r1, #3
 8002358:	4618      	mov	r0, r3
 800235a:	f007 fe5d 	bl	800a018 <HAL_RCC_ClockConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f82e 	bl	80023d0 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <_ZN11Initializer9initClockEv+0xc8>)
 8002376:	f010 fb51 	bl	8012a1c <iprintf>

	  }


}
 800237a:	bf00      	nop
 800237c:	3758      	adds	r7, #88	; 0x58
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08014d3c 	.word	0x08014d3c

08002388 <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

	return &htim16;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	33a0      	adds	r3, #160	; 0xa0


}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_ZN11Initializer18get_Selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_Selector_Timer(void){
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

	return &htim8;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	33ec      	adds	r3, #236	; 0xec
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_ZN11Initializer19get_PushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_PushMotor_Timer(void){
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

	return &htim4;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3354      	adds	r3, #84	; 0x54
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZN11Initializer13Error_HandlerEv>:



void Initializer::Error_Handler(void){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b1d      	cmp	r3, #29
 80023e0:	d80e      	bhi.n	8002400 <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80023e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e6:	4808      	ldr	r0, [pc, #32]	; (8002408 <_ZN11Initializer13Error_HandlerEv+0x38>)
 80023e8:	f005 fae6 	bl	80079b8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f002 fbe3 	bl	8004bb8 <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <_ZN11Initializer13Error_HandlerEv+0x3c>)
 80023f4:	f010 fb98 	bl	8012b28 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	3301      	adds	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e7ed      	b.n	80023dc <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	48000800 	.word	0x48000800
 800240c:	08014d5c 	.word	0x08014d5c

08002410 <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	331e      	adds	r3, #30
 800241e:	2220      	movs	r2, #32
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f00f fe88 	bl	8012138 <memset>

	this->_huart_sbus = huart_sbus;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA (this->_huart_sbus, _sbus_buffer, SBUS_PACKET_SIZE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2219      	movs	r2, #25
 8002438:	4619      	mov	r1, r3
 800243a:	f009 fd55 	bl	800bee8 <HAL_UART_Receive_DMA>




}
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	2219      	movs	r2, #25
 800245a:	4619      	mov	r1, r3
 800245c:	f00b f8ea 	bl	800d634 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f804 	bl	800246e <_ZN4SBUS8readSBUSEv>



}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
		//als iemand er ooit in slaagt om dit in een mooie for-loop te gieten, chapeau, ik vind hem niet :') (maar het moet mogelijk zijn).


		//RIGHT JOYSTICK X

		uint16_t MSB =_sbus_buffer[1];
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	795b      	ldrb	r3, [r3, #5]
 800247a:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	799b      	ldrb	r3, [r3, #6]
 8002480:	b29b      	uxth	r3, r3
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8002486:	89fa      	ldrh	r2, [r7, #14]
 8002488:	89bb      	ldrh	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	799b      	ldrb	r3, [r3, #6]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	79db      	ldrb	r3, [r3, #7]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	015b      	lsls	r3, r3, #5
 80024aa:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 80024ac:	89fa      	ldrh	r2, [r7, #14]
 80024ae:	89bb      	ldrh	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	79db      	ldrb	r3, [r3, #7]
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7a1b      	ldrb	r3, [r3, #8]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7a5b      	ldrb	r3, [r3, #9]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 80024dc:	89fa      	ldrh	r2, [r7, #14]
 80024de:	89bb      	ldrh	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	897b      	ldrh	r3, [r7, #10]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7a5b      	ldrb	r3, [r3, #9]
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7a9b      	ldrb	r3, [r3, #10]
 8002502:	b29b      	uxth	r3, r3
 8002504:	01db      	lsls	r3, r3, #7
 8002506:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8002508:	89fa      	ldrh	r2, [r7, #14]
 800250a:	89bb      	ldrh	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002514:	b29a      	uxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7a9b      	ldrb	r3, [r3, #10]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	b2db      	uxtb	r3, r3
 8002522:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7adb      	ldrb	r3, [r3, #11]
 8002528:	b29b      	uxth	r3, r3
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 800252e:	89fa      	ldrh	r2, [r7, #14]
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	84da      	strh	r2, [r3, #38]	; 0x26


		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7adb      	ldrb	r3, [r3, #11]
 8002544:	09db      	lsrs	r3, r3, #7
 8002546:	b2db      	uxtb	r3, r3
 8002548:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7b1b      	ldrb	r3, [r3, #12]
 800254e:	b29b      	uxth	r3, r3
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7b5b      	ldrb	r3, [r3, #13]
 8002558:	b29b      	uxth	r3, r3
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	89bb      	ldrh	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	b29a      	uxth	r2, r3
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	4313      	orrs	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7b5b      	ldrb	r3, [r3, #13]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7b9b      	ldrb	r3, [r3, #14]
 8002584:	b29b      	uxth	r3, r3
 8002586:	019b      	lsls	r3, r3, #6
 8002588:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 800258a:	89fa      	ldrh	r2, [r7, #14]
 800258c:	89bb      	ldrh	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7b9b      	ldrb	r3, [r3, #14]
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7bdb      	ldrb	r3, [r3, #15]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 80025b0:	89fa      	ldrh	r2, [r7, #14]
 80025b2:	89bb      	ldrh	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7c1b      	ldrb	r3, [r3, #16]
 80025c6:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7c5b      	ldrb	r3, [r3, #17]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 80025d2:	89fa      	ldrh	r2, [r7, #14]
 80025d4:	89bb      	ldrh	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7c5b      	ldrb	r3, [r3, #17]
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7c9b      	ldrb	r3, [r3, #18]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	015b      	lsls	r3, r3, #5
 80025f6:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 80025f8:	89fa      	ldrh	r2, [r7, #14]
 80025fa:	89bb      	ldrh	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7c9b      	ldrb	r3, [r3, #18]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	b2db      	uxtb	r3, r3
 8002612:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7cdb      	ldrb	r3, [r3, #19]
 8002618:	b29b      	uxth	r3, r3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7d1b      	ldrb	r3, [r3, #20]
 8002622:	b29b      	uxth	r3, r3
 8002624:	029b      	lsls	r3, r3, #10
 8002626:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8002628:	89fa      	ldrh	r2, [r7, #14]
 800262a:	89bb      	ldrh	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	b29a      	uxth	r2, r3
 8002630:	897b      	ldrh	r3, [r7, #10]
 8002632:	4313      	orrs	r3, r2
 8002634:	b29b      	uxth	r3, r3
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7d1b      	ldrb	r3, [r3, #20]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7d5b      	ldrb	r3, [r3, #21]
 800264e:	b29b      	uxth	r3, r3
 8002650:	01db      	lsls	r3, r3, #7
 8002652:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8002654:	89fa      	ldrh	r2, [r7, #14]
 8002656:	89bb      	ldrh	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002660:	b29a      	uxth	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7d5b      	ldrb	r3, [r3, #21]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	b2db      	uxtb	r3, r3
 800266e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7d9b      	ldrb	r3, [r3, #22]
 8002674:	b29b      	uxth	r3, r3
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 800267a:	89fa      	ldrh	r2, [r7, #14]
 800267c:	89bb      	ldrh	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	b29b      	uxth	r3, r3
 8002682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002686:	b29a      	uxth	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7d9b      	ldrb	r3, [r3, #22]
 8002690:	09db      	lsrs	r3, r3, #7
 8002692:	b2db      	uxtb	r3, r3
 8002694:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7ddb      	ldrb	r3, [r3, #23]
 800269a:	b29b      	uxth	r3, r3
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7e1b      	ldrb	r3, [r3, #24]
 80026a4:	125b      	asrs	r3, r3, #9
 80026a6:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 80026a8:	89fa      	ldrh	r2, [r7, #14]
 80026aa:	89bb      	ldrh	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	897b      	ldrh	r3, [r7, #10]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7e5b      	ldrb	r3, [r3, #25]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 80026d4:	89fa      	ldrh	r2, [r7, #14]
 80026d6:	89bb      	ldrh	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7e5b      	ldrb	r3, [r3, #25]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7e9b      	ldrb	r3, [r3, #26]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 80026fa:	89fa      	ldrh	r2, [r7, #14]
 80026fc:	89bb      	ldrh	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7edb      	ldrb	r3, [r3, #27]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <_ZN4SBUS8readSBUSEv+0x2b0>
 8002718:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800271c:	e000      	b.n	8002720 <_ZN4SBUS8readSBUSEv+0x2b2>
 800271e:	2200      	movs	r2, #0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 8002724:	2301      	movs	r3, #1


}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002740:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 8002742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002746:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8002748:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800274c:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 800274e:	f240 6394 	movw	r3, #1684	; 0x694
 8002752:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 8002754:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002758:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	da14      	bge.n	800278a <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8002760:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002764:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800276e:	fb03 f202 	mul.w	r2, r3, r2
 8002772:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002776:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800277a:	1acb      	subs	r3, r1, r3
 800277c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002788:	e01b      	b.n	80027c2 <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 800278a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800278e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002792:	429a      	cmp	r2, r3
 8002794:	dd13      	ble.n	80027be <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8002796:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800279a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <_ZN4SBUS8getLeftYEv+0x9c>)
 80027a2:	fb03 f202 	mul.w	r2, r3, r2
 80027a6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80027aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027ae:	1acb      	subs	r3, r1, r3
 80027b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027bc:	e001      	b.n	80027c2 <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 80027be:	eddf 7a05 	vldr	s15, [pc, #20]	; 80027d4 <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 80027c2:	eeb0 0a67 	vmov.f32	s0, s15
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	fffffc18 	.word	0xfffffc18
 80027d4:	00000000 	.word	0x00000000

080027d8 <_ZN4SBUS8getLeftXEv>:

float SBUS::getLeftX(void){
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  int16_t raw_value = _channels[3];
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027e4:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 80027e6:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80027ea:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <_ZN4SBUS8getLeftXEv+0xc0>)
 80027ee:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 80027f0:	4b2a      	ldr	r3, [pc, #168]	; (800289c <_ZN4SBUS8getLeftXEv+0xc4>)
 80027f2:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 80027f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002800:	ed97 7a04 	vldr	s14, [r7, #16]
 8002804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	dd16      	ble.n	800283c <_ZN4SBUS8getLeftXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 800280e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281a:	edd7 7a04 	vldr	s15, [r7, #16]
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80028a0 <_ZN4SBUS8getLeftXEv+0xc8>
 8002826:	ee67 6a87 	vmul.f32	s13, s15, s14
 800282a:	ed97 7a04 	vldr	s14, [r7, #16]
 800282e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283a:	e025      	b.n	8002888 <_ZN4SBUS8getLeftXEv+0xb0>

  } else if (raw_value > center_value) {
 800283c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002848:	ed97 7a04 	vldr	s14, [r7, #16]
 800284c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d516      	bpl.n	8002884 <_ZN4SBUS8getLeftXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8002856:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002862:	edd7 7a04 	vldr	s15, [r7, #16]
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80028a0 <_ZN4SBUS8getLeftXEv+0xc8>
 800286e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002872:	ed97 7a02 	vldr	s14, [r7, #8]
 8002876:	edd7 7a04 	vldr	s15, [r7, #16]
 800287a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800287e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002882:	e001      	b.n	8002888 <_ZN4SBUS8getLeftXEv+0xb0>

  } else {

    return 0.0f;
 8002884:	eddf 7a07 	vldr	s15, [pc, #28]	; 80028a4 <_ZN4SBUS8getLeftXEv+0xcc>

  }
}
 8002888:	eeb0 0a67 	vmov.f32	s0, s15
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	43b60000 	.word	0x43b60000
 800289c:	44d28000 	.word	0x44d28000
 80028a0:	447a0000 	.word	0x447a0000
 80028a4:	00000000 	.word	0x00000000

080028a8 <_ZN4SBUS9getRightYEv>:


float SBUS::getRightY(void){
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8c1b      	ldrh	r3, [r3, #32]
 80028b4:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 80028b6:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80028ba:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <_ZN4SBUS9getRightYEv+0xc0>)
 80028be:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <_ZN4SBUS9getRightYEv+0xc4>)
 80028c2:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 80028c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80028d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	dd16      	ble.n	800290c <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 80028de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002970 <_ZN4SBUS9getRightYEv+0xc8>
 80028f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80028fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80028fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	e025      	b.n	8002958 <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 800290c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002918:	ed97 7a04 	vldr	s14, [r7, #16]
 800291c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	d516      	bpl.n	8002954 <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 8002926:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002932:	edd7 7a04 	vldr	s15, [r7, #16]
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002970 <_ZN4SBUS9getRightYEv+0xc8>
 800293e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002942:	ed97 7a03 	vldr	s14, [r7, #12]
 8002946:	edd7 7a04 	vldr	s15, [r7, #16]
 800294a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800294e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002952:	e001      	b.n	8002958 <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8002954:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002974 <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 8002958:	eeb0 0a67 	vmov.f32	s0, s15
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	43b60000 	.word	0x43b60000
 800296c:	44d28000 	.word	0x44d28000
 8002970:	447a0000 	.word	0x447a0000
 8002974:	00000000 	.word	0x00000000

08002978 <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8bdb      	ldrh	r3, [r3, #30]
 8002984:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8002986:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800298a:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 800298c:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <_ZN4SBUS9getRightXEv+0xc0>)
 800298e:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <_ZN4SBUS9getRightXEv+0xc4>)
 8002992:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8002994:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80029a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ac:	dd16      	ble.n	80029dc <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 80029ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80029be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002a40 <_ZN4SBUS9getRightXEv+0xc8>
 80029c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80029ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80029ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029da:	e025      	b.n	8002a28 <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 80029dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80029ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	d516      	bpl.n	8002a24 <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 80029f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a02:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002a40 <_ZN4SBUS9getRightXEv+0xc8>
 8002a0e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a12:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a16:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a22:	e001      	b.n	8002a28 <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8002a24:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002a44 <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 8002a28:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	43b60000 	.word	0x43b60000
 8002a3c:	44d28000 	.word	0x44d28000
 8002a40:	447a0000 	.word	0x447a0000
 8002a44:	00000000 	.word	0x00000000

08002a48 <_ZN4SBUS8A_buttonEv>:
bool SBUS::A_button(void){
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	//whole bunch of code to make sure the button presses debounce correctly.

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a58:	bf8c      	ite	hi
 8002a5a:	2301      	movhi	r3, #1
 8002a5c:	2300      	movls	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <_ZN4SBUS8A_buttonEv+0xac>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d02d      	beq.n	8002ac4 <_ZN4SBUS8A_buttonEv+0x7c>
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	dc3b      	bgt.n	8002ae4 <_ZN4SBUS8A_buttonEv+0x9c>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <_ZN4SBUS8A_buttonEv+0x2e>
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d00a      	beq.n	8002a8a <_ZN4SBUS8A_buttonEv+0x42>
 8002a74:	e036      	b.n	8002ae4 <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d02e      	beq.n	8002ada <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <_ZN4SBUS8A_buttonEv+0xac>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <_ZN4SBUS8A_buttonEv+0xb0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8002a88:	e027      	b.n	8002ada <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	f083 0301 	eor.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <_ZN4SBUS8A_buttonEv+0xac>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8002a9c:	e01f      	b.n	8002ade <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <_ZN4SBUS8A_buttonEv+0xb0>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <_ZN4SBUS8A_buttonEv+0xb0>)
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <_ZN4SBUS8A_buttonEv+0xb0>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b31      	cmp	r3, #49	; 0x31
 8002ab0:	bf8c      	ite	hi
 8002ab2:	2301      	movhi	r3, #1
 8002ab4:	2300      	movls	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <_ZN4SBUS8A_buttonEv+0xac>)
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]
	      break;
 8002ac2:	e00c      	b.n	8002ade <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	f083 0301 	eor.w	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <_ZN4SBUS8A_buttonEv+0xac>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
	        return true;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e005      	b.n	8002ae6 <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 8002ae2:	bf00      	nop
	  }

	  return false;
 8002ae4:	2300      	movs	r3, #0

}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000370 	.word	0x20000370
 8002af8:	20000371 	.word	0x20000371

08002afc <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 500);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b0c:	bf8c      	ite	hi
 8002b0e:	2301      	movhi	r3, #1
 8002b10:	2300      	movls	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <_ZN4SBUS8B_buttonEv+0xac>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d02d      	beq.n	8002b78 <_ZN4SBUS8B_buttonEv+0x7c>
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	dc3b      	bgt.n	8002b98 <_ZN4SBUS8B_buttonEv+0x9c>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <_ZN4SBUS8B_buttonEv+0x2e>
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d00a      	beq.n	8002b3e <_ZN4SBUS8B_buttonEv+0x42>
 8002b28:	e036      	b.n	8002b98 <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02e      	beq.n	8002b8e <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <_ZN4SBUS8B_buttonEv+0xac>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <_ZN4SBUS8B_buttonEv+0xb0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8002b3c:	e027      	b.n	8002b8e <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <_ZN4SBUS8B_buttonEv+0xac>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8002b50:	e01f      	b.n	8002b92 <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <_ZN4SBUS8B_buttonEv+0xb0>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <_ZN4SBUS8B_buttonEv+0xb0>)
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <_ZN4SBUS8B_buttonEv+0xb0>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b31      	cmp	r3, #49	; 0x31
 8002b64:	bf8c      	ite	hi
 8002b66:	2301      	movhi	r3, #1
 8002b68:	2300      	movls	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <_ZN4SBUS8B_buttonEv+0xac>)
 8002b72:	2202      	movs	r2, #2
 8002b74:	701a      	strb	r2, [r3, #0]
	      break;
 8002b76:	e00c      	b.n	8002b92 <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	f083 0301 	eor.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <_ZN4SBUS8B_buttonEv+0xac>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
	        return true;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e005      	b.n	8002b9a <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 8002b8e:	bf00      	nop
 8002b90:	e002      	b.n	8002b98 <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 8002b96:	bf00      	nop
	  }

	  return false;
 8002b98:	2300      	movs	r3, #0


}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000372 	.word	0x20000372
 8002bac:	20000373 	.word	0x20000373

08002bb0 <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b1d      	cmp	r3, #29
 8002bc0:	d80e      	bhi.n	8002be0 <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002bc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bc6:	4808      	ldr	r0, [pc, #32]	; (8002be8 <_ZN10Components13Error_HandlerEv+0x38>)
 8002bc8:	f004 fef6 	bl	80079b8 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002bcc:	20c8      	movs	r0, #200	; 0xc8
 8002bce:	f001 fff3 	bl	8004bb8 <HAL_Delay>
		printf("Components error handler !! \r\n");
 8002bd2:	4806      	ldr	r0, [pc, #24]	; (8002bec <_ZN10Components13Error_HandlerEv+0x3c>)
 8002bd4:	f00f ffa8 	bl	8012b28 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e7ed      	b.n	8002bbc <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	48000800 	.word	0x48000800
 8002bec:	08014d80 	.word	0x08014d80

08002bf0 <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fae5 	bl	80031c8 <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fb1e 	bl	8003240 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fb57 	bl	80032b8 <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fb8c 	bl	8003328 <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fbc5 	bl	80033a0 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f86a 	bl	8002cf0 <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fbf5 	bl	800340c <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fc5a 	bl	80034dc <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fcab 	bl	8003584 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fcfa 	bl	8003628 <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fd49 	bl	80036cc <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fd8a 	bl	8003754 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f93b 	bl	8002ebc <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fdc8 	bl	80037dc <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fe09 	bl	8003864 <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f9f6 	bl	8003044 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fe47 	bl	80038ec <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 ff92 	bl	8007b8c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 ff8d 	bl	8007b8c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 ff88 	bl	8007b8c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 ff83 	bl	8007b8c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 ff7e 	bl	8007b8c <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 ffaa 	bl	8007bee <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 ffa5 	bl	8007bee <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f004 ffa0 	bl	8007bee <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f004 ff9b 	bl	8007bee <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f004 ff96 	bl	8007bee <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	217f      	movs	r1, #127	; 0x7f
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fa7b 	bl	80061c4 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	217f      	movs	r1, #127	; 0x7f
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fa75 	bl	80061c4 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	217f      	movs	r1, #127	; 0x7f
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 fa6f 	bl	80061c4 <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 8002cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	2220      	movs	r2, #32
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f00f fa13 	bl	8012138 <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002d1a:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d24:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	2201      	movs	r2, #1
 8002d44:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	2200      	movs	r2, #0
 8002d54:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	2202      	movs	r2, #2
 8002d64:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	2200      	movs	r2, #0
 8002d90:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	221c      	movs	r2, #28
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dac:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	2200      	movs	r2, #0
 8002db4:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	2201      	movs	r2, #1
 8002dbc:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f002 f962 	bl	800508c <HAL_ADC_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fee9 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 8002dde:	4831      	ldr	r0, [pc, #196]	; (8002ea4 <_ZN10Components10init_ADC_1Ev+0x1b4>)
 8002de0:	f00f fe1c 	bl	8012a1c <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fa48 	bl	8006288 <HAL_ADCEx_MultiModeConfigChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fed1 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 8002e0e:	4826      	ldr	r0, [pc, #152]	; (8002ea8 <_ZN10Components10init_ADC_1Ev+0x1b8>)
 8002e10:	f00f fe04 	bl	8012a1c <iprintf>

		  /** Configure Regular Channel
		  */

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN
		  sConfig.Channel = ADC_CHANNEL_11;
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <_ZN10Components10init_ADC_1Ev+0x1bc>)
 8002e16:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e18:	2306      	movs	r3, #6
 8002e1a:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e20:	237f      	movs	r3, #127	; 0x7f
 8002e22:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e24:	2304      	movs	r3, #4
 8002e26:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	f107 020c 	add.w	r2, r7, #12
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 fbdc 	bl	80055f4 <HAL_ADC_ConfigChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf14      	ite	ne
 8002e42:	2301      	movne	r3, #1
 8002e44:	2300      	moveq	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff feaf 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 8002e52:	4817      	ldr	r0, [pc, #92]	; (8002eb0 <_ZN10Components10init_ADC_1Ev+0x1c0>)
 8002e54:	f00f fde2 	bl	8012a1c <iprintf>
		  }
		  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8002e58:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <_ZN10Components10init_ADC_1Ev+0x1c4>)
 8002e5a:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002e60:	2304      	movs	r3, #4
 8002e62:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e64:	237f      	movs	r3, #127	; 0x7f
 8002e66:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e68:	2304      	movs	r3, #4
 8002e6a:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	f107 020c 	add.w	r2, r7, #12
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f002 fbba 	bl	80055f4 <HAL_ADC_ConfigChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf14      	ite	ne
 8002e86:	2301      	movne	r3, #1
 8002e88:	2300      	moveq	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff fe8d 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8002e96:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <_ZN10Components10init_ADC_1Ev+0x1c8>)
 8002e98:	f00f fdc0 	bl	8012a1c <iprintf>
		  }


}
 8002e9c:	bf00      	nop
 8002e9e:	3738      	adds	r7, #56	; 0x38
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	08014da0 	.word	0x08014da0
 8002ea8:	08014db4 	.word	0x08014db4
 8002eac:	2e300800 	.word	0x2e300800
 8002eb0:	08014de4 	.word	0x08014de4
 8002eb4:	b6902000 	.word	0xb6902000
 8002eb8:	08014e08 	.word	0x08014e08

08002ebc <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	2220      	movs	r2, #32
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f00f f933 	bl	8012138 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	4a55      	ldr	r2, [pc, #340]	; (800302c <_ZN10Components10init_ADC_2Ev+0x170>)
 8002ed8:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ee2:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	2201      	movs	r2, #1
 8002f02:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2208      	movs	r2, #8
 8002f0a:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	2200      	movs	r2, #0
 8002f1a:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	2202      	movs	r2, #2
 8002f22:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2200      	movs	r2, #0
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	2218      	movs	r2, #24
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	22e0      	movs	r2, #224	; 0xe0
 8002f68:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2200      	movs	r2, #0
 8002f70:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	2201      	movs	r2, #1
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 f884 	bl	800508c <HAL_ADC_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fe0b 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 8002f9a:	4825      	ldr	r0, [pc, #148]	; (8003030 <_ZN10Components10init_ADC_2Ev+0x174>)
 8002f9c:	f00f fdc4 	bl	8012b28 <puts>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <_ZN10Components10init_ADC_2Ev+0x178>)
 8002fa2:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fa4:	2306      	movs	r3, #6
 8002fa6:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002fac:	237f      	movs	r3, #127	; 0x7f
 8002fae:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	f107 0208 	add.w	r2, r7, #8
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 fb16 	bl	80055f4 <HAL_ADC_ConfigChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fde9 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 8002fde:	4816      	ldr	r0, [pc, #88]	; (8003038 <_ZN10Components10init_ADC_2Ev+0x17c>)
 8002fe0:	f00f fda2 	bl	8012b28 <puts>

	  }
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <_ZN10Components10init_ADC_2Ev+0x180>)
 8002fe6:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fe8:	2306      	movs	r3, #6
 8002fea:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002fec:	2304      	movs	r3, #4
 8002fee:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ff0:	237f      	movs	r3, #127	; 0x7f
 8002ff2:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	f107 0208 	add.w	r2, r7, #8
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f002 faf6 	bl	80055f4 <HAL_ADC_ConfigChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff fdc9 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 800301e:	4808      	ldr	r0, [pc, #32]	; (8003040 <_ZN10Components10init_ADC_2Ev+0x184>)
 8003020:	f00f fd82 	bl	8012b28 <puts>

	  }


}
 8003024:	bf00      	nop
 8003026:	3728      	adds	r7, #40	; 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	50000100 	.word	0x50000100
 8003030:	08014e34 	.word	0x08014e34
 8003034:	c3290000 	.word	0xc3290000
 8003038:	08014e50 	.word	0x08014e50
 800303c:	cb8c0000 	.word	0xcb8c0000
 8003040:	08014e78 	.word	0x08014e78

08003044 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 800304c:	f107 0308 	add.w	r3, r7, #8
 8003050:	2220      	movs	r2, #32
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f00f f86f 	bl	8012138 <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a55      	ldr	r2, [pc, #340]	; (80031b4 <_ZN10Components10init_ADC_5Ev+0x170>)
 8003060:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800306a:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2200      	movs	r2, #0
 800307a:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2201      	movs	r2, #1
 800308a:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2208      	movs	r2, #8
 8003092:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	2200      	movs	r2, #0
 80030a2:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	2202      	movs	r2, #2
 80030aa:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2200      	movs	r2, #0
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	2200      	movs	r2, #0
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2218      	movs	r2, #24
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	22e0      	movs	r2, #224	; 0xe0
 80030f0:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2200      	movs	r2, #0
 80030f8:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2201      	movs	r2, #1
 8003100:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4618      	mov	r0, r3
 8003108:	f001 ffc0 	bl	800508c <HAL_ADC_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fd47 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 8003122:	4825      	ldr	r0, [pc, #148]	; (80031b8 <_ZN10Components10init_ADC_5Ev+0x174>)
 8003124:	f00f fc7a 	bl	8012a1c <iprintf>

	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <_ZN10Components10init_ADC_5Ev+0x178>)
 800312a:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800312c:	2306      	movs	r3, #6
 800312e:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003134:	237f      	movs	r3, #127	; 0x7f
 8003136:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003138:	2304      	movs	r3, #4
 800313a:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f107 0208 	add.w	r2, r7, #8
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f002 fa52 	bl	80055f4 <HAL_ADC_ConfigChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fd25 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 8003166:	4816      	ldr	r0, [pc, #88]	; (80031c0 <_ZN10Components10init_ADC_5Ev+0x17c>)
 8003168:	f00f fc58 	bl	8012a1c <iprintf>

	  }

	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <_ZN10Components10init_ADC_5Ev+0x180>)
 800316e:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003170:	2306      	movs	r3, #6
 8003172:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8003174:	2304      	movs	r3, #4
 8003176:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003178:	237f      	movs	r3, #127	; 0x7f
 800317a:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800317c:	2304      	movs	r3, #4
 800317e:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f107 0208 	add.w	r2, r7, #8
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fa32 	bl	80055f4 <HAL_ADC_ConfigChannel>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fd05 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 80031a6:	4806      	ldr	r0, [pc, #24]	; (80031c0 <_ZN10Components10init_ADC_5Ev+0x17c>)
 80031a8:	f00f fc38 	bl	8012a1c <iprintf>
	  }




}
 80031ac:	bf00      	nop
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	50000600 	.word	0x50000600
 80031b8:	08014ea0 	.word	0x08014ea0
 80031bc:	94f00020 	.word	0x94f00020
 80031c0:	08014eb8 	.word	0x08014eb8
 80031c4:	8c900008 	.word	0x8c900008

080031c8 <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <_ZN10Components11init_COMP_1Ev+0x70>)
 80031d6:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2200      	movs	r2, #0
 80031de:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2250      	movs	r2, #80	; 0x50
 80031e6:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fa93 	bl	8006738 <HAL_COMP_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fcc4 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <_ZN10Components11init_COMP_1Ev+0x74>)
 800322a:	f00f fbf7 	bl	8012a1c <iprintf>

	  }
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40010200 	.word	0x40010200
 800323c:	08014edc 	.word	0x08014edc

08003240 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <_ZN10Components11init_COMP_2Ev+0x70>)
 800324e:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2250      	movs	r2, #80	; 0x50
 800325e:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4618      	mov	r0, r3
 8003286:	f003 fa57 	bl	8006738 <HAL_COMP_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fc88 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 80032a0:	4804      	ldr	r0, [pc, #16]	; (80032b4 <_ZN10Components11init_COMP_2Ev+0x74>)
 80032a2:	f00f fbbb 	bl	8012a1c <iprintf>
	    }




}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40010204 	.word	0x40010204
 80032b4:	08014ef4 	.word	0x08014ef4

080032b8 <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a16      	ldr	r2, [pc, #88]	; (8003320 <_ZN10Components11init_COMP_4Ev+0x68>)
 80032c6:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2200      	movs	r2, #0
 80032ce:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 fa1f 	bl	8006738 <HAL_COMP_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fc50 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8003310:	4804      	ldr	r0, [pc, #16]	; (8003324 <_ZN10Components11init_COMP_4Ev+0x6c>)
 8003312:	f00f fb83 	bl	8012a1c <iprintf>
    }
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	4001020c 	.word	0x4001020c
 8003324:	08014f0c 	.word	0x08014f0c

08003328 <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <_ZN10Components11init_COMP_5Ev+0x70>)
 8003336:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2240      	movs	r2, #64	; 0x40
 8003346:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4618      	mov	r0, r3
 800336e:	f003 f9e3 	bl	8006738 <HAL_COMP_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fc14 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <_ZN10Components11init_COMP_5Ev+0x74>)
 800338a:	f00f fb47 	bl	8012a1c <iprintf>

	  }

}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40010210 	.word	0x40010210
 800339c:	08014f24 	.word	0x08014f24

080033a0 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <_ZN10Components11init_COMP_7Ev+0x68>)
 80033ae:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2250      	movs	r2, #80	; 0x50
 80033be:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 f9a7 	bl	8006738 <HAL_COMP_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fbd8 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	   }



}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40010218 	.word	0x40010218

0800340c <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8003414:	f107 0308 	add.w	r3, r7, #8
 8003418:	2230      	movs	r2, #48	; 0x30
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f00e fe8b 	bl	8012138 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	4a2b      	ldr	r2, [pc, #172]	; (80034d4 <_ZN10Components10init_DAC_1Ev+0xc8>)
 8003428:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4618      	mov	r0, r3
 8003430:	f003 fc2b 	bl	8006c8a <HAL_DAC_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fbb3 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 800344a:	4823      	ldr	r0, [pc, #140]	; (80034d8 <_ZN10Components10init_DAC_1Ev+0xcc>)
 800344c:	f00f fae6 	bl	8012a1c <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003450:	2302      	movs	r3, #2
 8003452:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003468:	2302      	movs	r3, #2
 800346a:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800346c:	2302      	movs	r3, #2
 800346e:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f107 0108 	add.w	r1, r7, #8
 800347c:	2200      	movs	r2, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f003 fc26 	bl	8006cd0 <HAL_DAC_ConfigChannel>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fb8b 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 800349a:	480f      	ldr	r0, [pc, #60]	; (80034d8 <_ZN10Components10init_DAC_1Ev+0xcc>)
 800349c:	f00f fabe 	bl	8012a1c <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f107 0108 	add.w	r1, r7, #8
 80034a8:	2210      	movs	r2, #16
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 fc10 	bl	8006cd0 <HAL_DAC_ConfigChannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff fb75 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 80034c6:	4804      	ldr	r0, [pc, #16]	; (80034d8 <_ZN10Components10init_DAC_1Ev+0xcc>)
 80034c8:	f00f faa8 	bl	8012a1c <iprintf>

    }

}
 80034cc:	bf00      	nop
 80034ce:	3738      	adds	r7, #56	; 0x38
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	50000800 	.word	0x50000800
 80034d8:	08014f3c 	.word	0x08014f3c

080034dc <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	; 0x38
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	2230      	movs	r2, #48	; 0x30
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f00e fe23 	bl	8012138 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	4a20      	ldr	r2, [pc, #128]	; (8003578 <_ZN10Components10init_DAC_2Ev+0x9c>)
 80034f8:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fbc3 	bl	8006c8a <HAL_DAC_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff fb4b 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 800351a:	4818      	ldr	r0, [pc, #96]	; (800357c <_ZN10Components10init_DAC_2Ev+0xa0>)
 800351c:	f00f fa7e 	bl	8012a1c <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003520:	2302      	movs	r3, #2
 8003522:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8003528:	2300      	movs	r3, #0
 800352a:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003538:	2302      	movs	r3, #2
 800353a:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800353c:	2302      	movs	r3, #2
 800353e:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003544:	f107 0308 	add.w	r3, r7, #8
 8003548:	2200      	movs	r2, #0
 800354a:	4619      	mov	r1, r3
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <_ZN10Components10init_DAC_2Ev+0xa4>)
 800354e:	f003 fbbf 	bl	8006cd0 <HAL_DAC_ConfigChannel>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fb24 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <_ZN10Components10init_DAC_2Ev+0xa0>)
 800356a:	f00f fa57 	bl	8012a1c <iprintf>

	  }


}
 800356e:	bf00      	nop
 8003570:	3738      	adds	r7, #56	; 0x38
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	50000c00 	.word	0x50000c00
 800357c:	08014f54 	.word	0x08014f54
 8003580:	2000043c 	.word	0x2000043c

08003584 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 8003584:	b580      	push	{r7, lr}
 8003586:	b08e      	sub	sp, #56	; 0x38
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 800358c:	f107 0308 	add.w	r3, r7, #8
 8003590:	2230      	movs	r2, #48	; 0x30
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f00e fdcf 	bl	8012138 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4a20      	ldr	r2, [pc, #128]	; (8003620 <_ZN10Components10init_DAC_3Ev+0x9c>)
 80035a0:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 fb6f 	bl	8006c8a <HAL_DAC_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff faf7 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 80035c2:	4818      	ldr	r0, [pc, #96]	; (8003624 <_ZN10Components10init_DAC_3Ev+0xa0>)
 80035c4:	f00f fa2a 	bl	8012a1c <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80035c8:	2302      	movs	r3, #2
 80035ca:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80035e0:	2302      	movs	r3, #2
 80035e2:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80035e4:	2302      	movs	r3, #2
 80035e6:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f107 0108 	add.w	r1, r7, #8
 80035f4:	2210      	movs	r2, #16
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 fb6a 	bl	8006cd0 <HAL_DAC_ConfigChannel>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff facf 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8003612:	4804      	ldr	r0, [pc, #16]	; (8003624 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8003614:	f00f fa02 	bl	8012a1c <iprintf>

	  }



}
 8003618:	bf00      	nop
 800361a:	3738      	adds	r7, #56	; 0x38
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	50001000 	.word	0x50001000
 8003624:	08014f6c 	.word	0x08014f6c

08003628 <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	; 0x38
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 8003630:	f107 0308 	add.w	r3, r7, #8
 8003634:	2230      	movs	r2, #48	; 0x30
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f00e fd7d 	bl	8012138 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a20      	ldr	r2, [pc, #128]	; (80036c4 <_ZN10Components10init_DAC_4Ev+0x9c>)
 8003644:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4618      	mov	r0, r3
 800364c:	f003 fb1d 	bl	8006c8a <HAL_DAC_Init>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff faa5 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8003666:	4818      	ldr	r0, [pc, #96]	; (80036c8 <_ZN10Components10init_DAC_4Ev+0xa0>)
 8003668:	f00f f9d8 	bl	8012a1c <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800366c:	2302      	movs	r3, #2
 800366e:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8003674:	2300      	movs	r3, #0
 8003676:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003684:	2302      	movs	r3, #2
 8003686:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8003688:	2302      	movs	r3, #2
 800368a:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f107 0108 	add.w	r1, r7, #8
 8003698:	2200      	movs	r2, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fb18 	bl	8006cd0 <HAL_DAC_ConfigChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bf14      	ite	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	2300      	moveq	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff fa7d 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 80036b6:	4804      	ldr	r0, [pc, #16]	; (80036c8 <_ZN10Components10init_DAC_4Ev+0xa0>)
 80036b8:	f00f f9b0 	bl	8012a1c <iprintf>

	  }


}
 80036bc:	bf00      	nop
 80036be:	3738      	adds	r7, #56	; 0x38
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	50001400 	.word	0x50001400
 80036c8:	08014f84 	.word	0x08014f84

080036cc <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <_ZN10Components9init_OA_1Ev+0x80>)
 80036da:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	2200      	movs	r2, #0
 80036e2:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2201      	movs	r2, #1
 80036fa:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2200      	movs	r2, #0
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2200      	movs	r2, #0
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2200      	movs	r2, #0
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	4618      	mov	r0, r3
 8003722:	f004 f963 	bl	80079ec <HAL_OPAMP_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fa3a 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 800373c:	4804      	ldr	r0, [pc, #16]	; (8003750 <_ZN10Components9init_OA_1Ev+0x84>)
 800373e:	f00f f96d 	bl	8012a1c <iprintf>
	  }


}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40010300 	.word	0x40010300
 8003750:	08014f9c 	.word	0x08014f9c

08003754 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <_ZN10Components9init_OA_2Ev+0x80>)
 8003762:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	2200      	movs	r2, #0
 800376a:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2200      	movs	r2, #0
 800377a:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	2201      	movs	r2, #1
 8003782:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	2200      	movs	r2, #0
 80037a4:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 f91e 	bl	80079ec <HAL_OPAMP_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff f9f5 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 80037c6:	4804      	ldr	r0, [pc, #16]	; (80037d8 <_ZN10Components9init_OA_2Ev+0x84>)
 80037c8:	f00f f928 	bl	8012a1c <iprintf>

	    }


}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40010304 	.word	0x40010304
 80037d8:	08014fb4 	.word	0x08014fb4

080037dc <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <_ZN10Components9init_OA_3Ev+0x80>)
 80037ea:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	2240      	movs	r2, #64	; 0x40
 80037fa:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2200      	movs	r2, #0
 800381a:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	2200      	movs	r2, #0
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2200      	movs	r2, #0
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4618      	mov	r0, r3
 8003832:	f004 f8db 	bl	80079ec <HAL_OPAMP_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff f9b2 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 800384c:	4804      	ldr	r0, [pc, #16]	; (8003860 <_ZN10Components9init_OA_3Ev+0x84>)
 800384e:	f00f f8e5 	bl	8012a1c <iprintf>

	   }

}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40010308 	.word	0x40010308
 8003860:	08014fcc 	.word	0x08014fcc

08003864 <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <_ZN10Components9init_OA_4Ev+0x80>)
 8003872:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2240      	movs	r2, #64	; 0x40
 8003882:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2201      	movs	r2, #1
 8003892:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	2200      	movs	r2, #0
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 f896 	bl	80079ec <HAL_OPAMP_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff f96d 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 80038d6:	4804      	ldr	r0, [pc, #16]	; (80038e8 <_ZN10Components9init_OA_4Ev+0x84>)
 80038d8:	f00f f8a0 	bl	8012a1c <iprintf>

	  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	4001030c 	.word	0x4001030c
 80038e8:	08014fe4 	.word	0x08014fe4

080038ec <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	4a1c      	ldr	r2, [pc, #112]	; (800396c <_ZN10Components9init_OA_5Ev+0x80>)
 80038fa:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	2200      	movs	r2, #0
 8003902:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	2240      	movs	r2, #64	; 0x40
 800390a:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	2201      	movs	r2, #1
 800391a:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	2200      	movs	r2, #0
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003934:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	2200      	movs	r2, #0
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	4618      	mov	r0, r3
 8003944:	f004 f852 	bl	80079ec <HAL_OPAMP_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf14      	ite	ne
 800394e:	2301      	movne	r3, #1
 8003950:	2300      	moveq	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff f929 	bl	8002bb0 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 800395e:	4804      	ldr	r0, [pc, #16]	; (8003970 <_ZN10Components9init_OA_5Ev+0x84>)
 8003960:	f00f f85c 	bl	8012a1c <iprintf>

	  }

}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40010310 	.word	0x40010310
 8003970:	08014ffc 	.word	0x08014ffc

08003974 <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_ZN8DebuggerC1EP4SBUSP9Convertor>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, Convertor *convertor){
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]

	this->_sbus = sbus;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]

}
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <_ZN8Debugger16displayDebugInfoEv>:


void Debugger::displayDebugInfo(void){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]


	if(HAL_GetTick() % 100 == 0){
 80039bc:	f001 f8f0 	bl	8004ba0 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b3f      	ldr	r3, [pc, #252]	; (8003ac0 <_ZN8Debugger16displayDebugInfoEv+0x10c>)
 80039c4:	fba3 1302 	umull	r1, r3, r3, r2
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	2164      	movs	r1, #100	; 0x64
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d06b      	beq.n	8003ab8 <_ZN8Debugger16displayDebugInfoEv+0x104>


		printf("Left joystick Y: %f \r\n", this->_sbus->getLeftY());
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fea5 	bl	8002734 <_ZN4SBUS8getLeftYEv>
 80039ea:	ee10 3a10 	vmov	r3, s0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fc fdd2 	bl	8000598 <__aeabi_f2d>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4832      	ldr	r0, [pc, #200]	; (8003ac4 <_ZN8Debugger16displayDebugInfoEv+0x110>)
 80039fa:	f00f f80f 	bl	8012a1c <iprintf>
		printf("\r\n");
 80039fe:	4832      	ldr	r0, [pc, #200]	; (8003ac8 <_ZN8Debugger16displayDebugInfoEv+0x114>)
 8003a00:	f00f f892 	bl	8012b28 <puts>

		printf("Left joystick X: %f \r\n", this->_sbus->getLeftX());
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fee5 	bl	80027d8 <_ZN4SBUS8getLeftXEv>
 8003a0e:	ee10 3a10 	vmov	r3, s0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fdc0 	bl	8000598 <__aeabi_f2d>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	482b      	ldr	r0, [pc, #172]	; (8003acc <_ZN8Debugger16displayDebugInfoEv+0x118>)
 8003a1e:	f00e fffd 	bl	8012a1c <iprintf>
		printf("\r\n");
 8003a22:	4829      	ldr	r0, [pc, #164]	; (8003ac8 <_ZN8Debugger16displayDebugInfoEv+0x114>)
 8003a24:	f00f f880 	bl	8012b28 <puts>

		printf("Right joystick Y:%f \r\n", this->_sbus->getRightY());
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe ff3b 	bl	80028a8 <_ZN4SBUS9getRightYEv>
 8003a32:	ee10 3a10 	vmov	r3, s0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fdae 	bl	8000598 <__aeabi_f2d>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4823      	ldr	r0, [pc, #140]	; (8003ad0 <_ZN8Debugger16displayDebugInfoEv+0x11c>)
 8003a42:	f00e ffeb 	bl	8012a1c <iprintf>
		printf("\r\n");
 8003a46:	4820      	ldr	r0, [pc, #128]	; (8003ac8 <_ZN8Debugger16displayDebugInfoEv+0x114>)
 8003a48:	f00f f86e 	bl	8012b28 <puts>

		printf("Right joystick X: %f \r\n", this->_sbus->getRightX());
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe ff91 	bl	8002978 <_ZN4SBUS9getRightXEv>
 8003a56:	ee10 3a10 	vmov	r3, s0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fd9c 	bl	8000598 <__aeabi_f2d>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	481b      	ldr	r0, [pc, #108]	; (8003ad4 <_ZN8Debugger16displayDebugInfoEv+0x120>)
 8003a66:	f00e ffd9 	bl	8012a1c <iprintf>

		printf("LedPWM: %d\r\n", this->_convertor->get_LEDPWM());
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fc8c 	bl	800138c <_ZN9Convertor10get_LEDPWMEv>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4619      	mov	r1, r3
 8003a78:	4817      	ldr	r0, [pc, #92]	; (8003ad8 <_ZN8Debugger16displayDebugInfoEv+0x124>)
 8003a7a:	f00e ffcf 	bl	8012a1c <iprintf>

		printf("selectorPWM: %d\r\n", this->_convertor->get_selectorPWM());
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fc61 	bl	800134a <_ZN9Convertor15get_selectorPWMEv>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4813      	ldr	r0, [pc, #76]	; (8003adc <_ZN8Debugger16displayDebugInfoEv+0x128>)
 8003a8e:	f00e ffc5 	bl	8012a1c <iprintf>
		printf("\r\n");
 8003a92:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <_ZN8Debugger16displayDebugInfoEv+0x114>)
 8003a94:	f00f f848 	bl	8012b28 <puts>

		printf("Selector position %d \r\n", this->_convertor->get_selector_position());
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd fc83 	bl	80013a8 <_ZN9Convertor21get_selector_positionEv>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <_ZN8Debugger16displayDebugInfoEv+0x12c>)
 8003aa8:	f00e ffb8 	bl	8012a1c <iprintf>





		printf("\r\n");
 8003aac:	4806      	ldr	r0, [pc, #24]	; (8003ac8 <_ZN8Debugger16displayDebugInfoEv+0x114>)
 8003aae:	f00f f83b 	bl	8012b28 <puts>
		printf("\r\n");
 8003ab2:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <_ZN8Debugger16displayDebugInfoEv+0x114>)
 8003ab4:	f00f f838 	bl	8012b28 <puts>


	}


}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	51eb851f 	.word	0x51eb851f
 8003ac4:	08015014 	.word	0x08015014
 8003ac8:	0801502c 	.word	0x0801502c
 8003acc:	08015030 	.word	0x08015030
 8003ad0:	08015048 	.word	0x08015048
 8003ad4:	08015060 	.word	0x08015060
 8003ad8:	08015078 	.word	0x08015078
 8003adc:	08015088 	.word	0x08015088
 8003ae0:	0801509c 	.word	0x0801509c

08003ae4 <main>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;



int main(void){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8003aea:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003aec:	f000 fff3 	bl	8004ad6 <HAL_Init>
	//Initialize clock/DMA/... configurations and components.

	Initializer init(&huart1, &huart2);
 8003af0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003af4:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <main+0xd8>)
 8003af6:	4932      	ldr	r1, [pc, #200]	; (8003bc0 <main+0xdc>)
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd fc75 	bl	80013e8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8003afe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fc87 	bl	8001416 <_ZN11Initializer12init_ConfigsEv>
	HAL_Delay(500);
 8003b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b0c:	f001 f854 	bl	8004bb8 <HAL_Delay>

	Components components;
 8003b10:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003b14:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003b18:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <main+0xe0>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	2344      	movs	r3, #68	; 0x44
 8003b20:	461a      	mov	r2, r3
 8003b22:	f00e fafb 	bl	801211c <memcpy>
	components.init_Components();
 8003b26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff f860 	bl	8002bf0 <_ZN10Components15init_ComponentsEv>
	HAL_Delay(500);
 8003b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b34:	f001 f840 	bl	8004bb8 <HAL_Delay>


	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8003b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b3c:	491f      	ldr	r1, [pc, #124]	; (8003bbc <main+0xd8>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fc66 	bl	8002410 <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	Convertor convertor(&sbus, &init, &components);
 8003b44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b48:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003b4c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003b50:	f107 000c 	add.w	r0, r7, #12
 8003b54:	f7fd f9d2 	bl	8000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>
	Debugger debugger(&sbus, &convertor);
 8003b58:	f107 020c 	add.w	r2, r7, #12
 8003b5c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff ff12 	bl	800398c <_ZN8DebuggerC1EP4SBUSP9Convertor>


	printf("sanity check \r \n");
 8003b68:	4817      	ldr	r0, [pc, #92]	; (8003bc8 <main+0xe4>)
 8003b6a:	f00e ffdd 	bl	8012b28 <puts>

	/* Main loop */
	while (1){

		//signal led
		if(HAL_GetTick() % 1000 == 0){
 8003b6e:	f001 f817 	bl	8004ba0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <main+0xe8>)
 8003b76:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7a:	099b      	lsrs	r3, r3, #6
 8003b7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <main+0xba>

			HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 8003b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b98:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <main+0xec>)
 8003b9a:	f003 ff0d 	bl	80079b8 <HAL_GPIO_TogglePin>
		}

		  sbus.update();
 8003b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fc50 	bl	8002448 <_ZN4SBUS6updateEv>
		  convertor.process();
 8003ba8:	f107 030c 	add.w	r3, r7, #12
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd fbd9 	bl	8001364 <_ZN9Convertor7processEv>
		  debugger.displayDebugInfo();
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fefd 	bl	80039b4 <_ZN8Debugger16displayDebugInfoEv>
		if(HAL_GetTick() % 1000 == 0){
 8003bba:	e7d8      	b.n	8003b6e <main+0x8a>
 8003bbc:	20000778 	.word	0x20000778
 8003bc0:	200006e8 	.word	0x200006e8
 8003bc4:	080150e8 	.word	0x080150e8
 8003bc8:	080150d8 	.word	0x080150d8
 8003bcc:	10624dd3 	.word	0x10624dd3
 8003bd0:	48000800 	.word	0x48000800

08003bd4 <Error_Handler>:
}



void Error_Handler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8003bda:	2300      	movs	r3, #0
 8003bdc:	71fb      	strb	r3, [r7, #7]
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	2b1d      	cmp	r3, #29
 8003be2:	d80e      	bhi.n	8003c02 <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8003be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003be8:	4808      	ldr	r0, [pc, #32]	; (8003c0c <Error_Handler+0x38>)
 8003bea:	f003 fee5 	bl	80079b8 <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8003bee:	4808      	ldr	r0, [pc, #32]	; (8003c10 <Error_Handler+0x3c>)
 8003bf0:	f00e ff9a 	bl	8012b28 <puts>
		HAL_Delay(100);
 8003bf4:	2064      	movs	r0, #100	; 0x64
 8003bf6:	f000 ffdf 	bl	8004bb8 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	71fb      	strb	r3, [r7, #7]
 8003c00:	e7ed      	b.n	8003bde <Error_Handler+0xa>
	}

}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	48000800 	.word	0x48000800
 8003c10:	0801512c 	.word	0x0801512c

08003c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <HAL_MspInit+0x44>)
 8003c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <HAL_MspInit+0x44>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6613      	str	r3, [r2, #96]	; 0x60
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <HAL_MspInit+0x44>)
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_MspInit+0x44>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <HAL_MspInit+0x44>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_MspInit+0x44>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b0a2      	sub	sp, #136	; 0x88
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c74:	f107 0320 	add.w	r3, r7, #32
 8003c78:	2254      	movs	r2, #84	; 0x54
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00e fa5b 	bl	8012138 <memset>


  if(hadc->Instance==ADC1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8a:	f040 808a 	bne.w	8003da2 <HAL_ADC_MspInit+0x146>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003c94:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003c98:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c9a:	f107 0320 	add.w	r3, r7, #32
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f006 fbd6 	bl	800a450 <HAL_RCCEx_PeriphCLKConfig>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003caa:	f7ff ff93 	bl	8003bd4 <Error_Handler>

    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003cae:	4b90      	ldr	r3, [pc, #576]	; (8003ef0 <HAL_ADC_MspInit+0x294>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	; (8003ef0 <HAL_ADC_MspInit+0x294>)
 8003cb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003cb8:	4b8d      	ldr	r3, [pc, #564]	; (8003ef0 <HAL_ADC_MspInit+0x294>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003cc0:	4b8c      	ldr	r3, [pc, #560]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc4:	4a8b      	ldr	r2, [pc, #556]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ccc:	4b89      	ldr	r3, [pc, #548]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd8:	4b86      	ldr	r3, [pc, #536]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cdc:	4a85      	ldr	r2, [pc, #532]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ce4:	4b83      	ldr	r3, [pc, #524]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf0:	4b80      	ldr	r3, [pc, #512]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf4:	4a7f      	ldr	r2, [pc, #508]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfc:	4b7d      	ldr	r3, [pc, #500]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8003d14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d1e:	f003 fcb1 	bl	8007684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8003d22:	f641 0302 	movw	r3, #6146	; 0x1802
 8003d26:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d34:	4619      	mov	r1, r3
 8003d36:	4870      	ldr	r0, [pc, #448]	; (8003ef8 <HAL_ADC_MspInit+0x29c>)
 8003d38:	f003 fca4 	bl	8007684 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */

    hdma_adc1.Instance = DMA1_Channel2;
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d3e:	4a70      	ldr	r2, [pc, #448]	; (8003f00 <HAL_ADC_MspInit+0x2a4>)
 8003d40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003d42:	4b6e      	ldr	r3, [pc, #440]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d44:	2205      	movs	r2, #5
 8003d46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d48:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d4e:	4b6b      	ldr	r3, [pc, #428]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d54:	4b69      	ldr	r3, [pc, #420]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d5a:	4b68      	ldr	r3, [pc, #416]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d62:	4b66      	ldr	r3, [pc, #408]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d6a:	4b64      	ldr	r3, [pc, #400]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003d70:	4b62      	ldr	r3, [pc, #392]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d78:	4860      	ldr	r0, [pc, #384]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d7a:	f003 f951 	bl	8007020 <HAL_DMA_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_ADC_MspInit+0x132>
    {

      Error_Handler();
 8003d84:	f7ff ff26 	bl	8003bd4 <Error_Handler>
      printf("DMA ADC1 NOT INIALIIIIIIIZZZZZZZEEEEEEEDDDDD CHECK MSP FILE \r\n");
 8003d88:	485e      	ldr	r0, [pc, #376]	; (8003f04 <HAL_ADC_MspInit+0x2a8>)
 8003d8a:	f00e fecd 	bl	8012b28 <puts>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a5a      	ldr	r2, [pc, #360]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
 8003d94:	4a59      	ldr	r2, [pc, #356]	; (8003efc <HAL_ADC_MspInit+0x2a0>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 8003d9a:	485b      	ldr	r0, [pc, #364]	; (8003f08 <HAL_ADC_MspInit+0x2ac>)
 8003d9c:	f00e fec4 	bl	8012b28 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003da0:	e0a1      	b.n	8003ee6 <HAL_ADC_MspInit+0x28a>
  else if(hadc->Instance==ADC2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a59      	ldr	r2, [pc, #356]	; (8003f0c <HAL_ADC_MspInit+0x2b0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d150      	bne.n	8003e4e <HAL_ADC_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003db2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003db6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003db8:	f107 0320 	add.w	r3, r7, #32
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f006 fb47 	bl	800a450 <HAL_RCCEx_PeriphCLKConfig>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_ADC_MspInit+0x170>
      Error_Handler();
 8003dc8:	f7ff ff04 	bl	8003bd4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003dcc:	4b48      	ldr	r3, [pc, #288]	; (8003ef0 <HAL_ADC_MspInit+0x294>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	4a47      	ldr	r2, [pc, #284]	; (8003ef0 <HAL_ADC_MspInit+0x294>)
 8003dd4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003dd6:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <HAL_ADC_MspInit+0x294>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10b      	bne.n	8003df6 <HAL_ADC_MspInit+0x19a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003dde:	4b45      	ldr	r3, [pc, #276]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	4a44      	ldr	r2, [pc, #272]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003de4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dea:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003df8:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <HAL_ADC_MspInit+0x2b8>)
 8003dfa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003dfc:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e08:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e14:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e1c:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e22:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003e24:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e26:	2220      	movs	r2, #32
 8003e28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003e2a:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003e30:	4837      	ldr	r0, [pc, #220]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e32:	f003 f8f5 	bl	8007020 <HAL_DMA_Init>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8003e3c:	f7ff feca 	bl	8003bd4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a33      	ldr	r2, [pc, #204]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <HAL_ADC_MspInit+0x2b4>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003e4c:	e04b      	b.n	8003ee6 <HAL_ADC_MspInit+0x28a>
  else if(hadc->Instance==ADC5)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a31      	ldr	r2, [pc, #196]	; (8003f18 <HAL_ADC_MspInit+0x2bc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d146      	bne.n	8003ee6 <HAL_ADC_MspInit+0x28a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e5c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003e5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e62:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e64:	f107 0320 	add.w	r3, r7, #32
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f006 faf1 	bl	800a450 <HAL_RCCEx_PeriphCLKConfig>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_ADC_MspInit+0x21c>
      Error_Handler();
 8003e74:	f7ff feae 	bl	8003bd4 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_ADC_MspInit+0x298>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003e92:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <HAL_ADC_MspInit+0x2c4>)
 8003e94:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003e96:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003e98:	2227      	movs	r2, #39	; 0x27
 8003e9a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e9c:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb4:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003eb6:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ebc:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003eca:	4814      	ldr	r0, [pc, #80]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003ecc:	f003 f8a8 	bl	8007020 <HAL_DMA_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_ADC_MspInit+0x27e>
      Error_Handler();
 8003ed6:	f7ff fe7d 	bl	8003bd4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <HAL_ADC_MspInit+0x2c0>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003ee6:	bf00      	nop
 8003ee8:	3788      	adds	r7, #136	; 0x88
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000928 	.word	0x20000928
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	48000400 	.word	0x48000400
 8003efc:	20000808 	.word	0x20000808
 8003f00:	4002001c 	.word	0x4002001c
 8003f04:	08015150 	.word	0x08015150
 8003f08:	08015190 	.word	0x08015190
 8003f0c:	50000100 	.word	0x50000100
 8003f10:	20000868 	.word	0x20000868
 8003f14:	40020030 	.word	0x40020030
 8003f18:	50000600 	.word	0x50000600
 8003f1c:	200008c8 	.word	0x200008c8
 8003f20:	40020044 	.word	0x40020044

08003f24 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3d      	ldr	r2, [pc, #244]	; (8004038 <HAL_COMP_MspInit+0x114>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d119      	bne.n	8003f7a <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	4a3c      	ldr	r2, [pc, #240]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f52:	4b3a      	ldr	r3, [pc, #232]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f62:	2303      	movs	r3, #3
 8003f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6a:	f107 031c 	add.w	r3, r7, #28
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f74:	f003 fb86 	bl	8007684 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8003f78:	e05a      	b.n	8004030 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a30      	ldr	r2, [pc, #192]	; (8004040 <HAL_COMP_MspInit+0x11c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d118      	bne.n	8003fb6 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f84:	4b2d      	ldr	r3, [pc, #180]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f88:	4a2c      	ldr	r2, [pc, #176]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f90:	4b2a      	ldr	r3, [pc, #168]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	4619      	mov	r1, r3
 8003fae:	4825      	ldr	r0, [pc, #148]	; (8004044 <HAL_COMP_MspInit+0x120>)
 8003fb0:	f003 fb68 	bl	8007684 <HAL_GPIO_Init>
}
 8003fb4:	e03c      	b.n	8004030 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_COMP_MspInit+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d119      	bne.n	8003ff4 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003fc6:	f043 0302 	orr.w	r3, r3, #2
 8003fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_COMP_MspInit+0x118>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8003fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 8003fe6:	f107 031c 	add.w	r3, r7, #28
 8003fea:	4619      	mov	r1, r3
 8003fec:	4815      	ldr	r0, [pc, #84]	; (8004044 <HAL_COMP_MspInit+0x120>)
 8003fee:	f003 fb49 	bl	8007684 <HAL_GPIO_Init>
}
 8003ff2:	e01d      	b.n	8004030 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_COMP_MspInit+0x128>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d118      	bne.n	8004030 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <HAL_COMP_MspInit+0x118>)
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004002:	4a0e      	ldr	r2, [pc, #56]	; (800403c <HAL_COMP_MspInit+0x118>)
 8004004:	f043 0302 	orr.w	r3, r3, #2
 8004008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_COMP_MspInit+0x118>)
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8004016:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800401a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800401c:	2303      	movs	r3, #3
 800401e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8004024:	f107 031c 	add.w	r3, r7, #28
 8004028:	4619      	mov	r1, r3
 800402a:	4806      	ldr	r0, [pc, #24]	; (8004044 <HAL_COMP_MspInit+0x120>)
 800402c:	f003 fb2a 	bl	8007684 <HAL_GPIO_Init>
}
 8004030:	bf00      	nop
 8004032:	3730      	adds	r7, #48	; 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40010204 	.word	0x40010204
 800403c:	40021000 	.word	0x40021000
 8004040:	4001020c 	.word	0x4001020c
 8004044:	48000400 	.word	0x48000400
 8004048:	40010210 	.word	0x40010210
 800404c:	40010218 	.word	0x40010218

08004050 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <HAL_DAC_MspInit+0xa4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10c      	bne.n	800407c <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004062:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 800407a:	e034      	b.n	80040e6 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <HAL_DAC_MspInit+0xac>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d10c      	bne.n	80040a0 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 800408c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004092:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
}
 800409e:	e022      	b.n	80040e6 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_DAC_MspInit+0xb0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10c      	bne.n	80040c4 <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
}
 80040c2:	e010      	b.n	80040e6 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <HAL_DAC_MspInit+0xb4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10b      	bne.n	80040e6 <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 80040d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <HAL_DAC_MspInit+0xa8>)
 80040dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	50000800 	.word	0x50000800
 80040f8:	40021000 	.word	0x40021000
 80040fc:	50000c00 	.word	0x50000c00
 8004100:	50001000 	.word	0x50001000
 8004104:	50001400 	.word	0x50001400

08004108 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	; 0x30
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004110:	f107 031c 	add.w	r3, r7, #28
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a4d      	ldr	r2, [pc, #308]	; (800425c <HAL_OPAMP_MspInit+0x154>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d119      	bne.n	800415e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	4a4c      	ldr	r2, [pc, #304]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004136:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 8004142:	230a      	movs	r3, #10
 8004144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004146:	2303      	movs	r3, #3
 8004148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414e:	f107 031c 	add.w	r3, r7, #28
 8004152:	4619      	mov	r1, r3
 8004154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004158:	f003 fa94 	bl	8007684 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 800415c:	e079      	b.n	8004252 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a40      	ldr	r2, [pc, #256]	; (8004264 <HAL_OPAMP_MspInit+0x15c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d119      	bne.n	800419c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004168:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004174:	4b3a      	ldr	r3, [pc, #232]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004180:	23a0      	movs	r3, #160	; 0xa0
 8004182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004184:	2303      	movs	r3, #3
 8004186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004196:	f003 fa75 	bl	8007684 <HAL_GPIO_Init>
}
 800419a:	e05a      	b.n	8004252 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a31      	ldr	r2, [pc, #196]	; (8004268 <HAL_OPAMP_MspInit+0x160>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d118      	bne.n	80041d8 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	4b2e      	ldr	r3, [pc, #184]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	4a2d      	ldr	r2, [pc, #180]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041b2:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 80041be:	2305      	movs	r3, #5
 80041c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041c2:	2303      	movs	r3, #3
 80041c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ca:	f107 031c 	add.w	r3, r7, #28
 80041ce:	4619      	mov	r1, r3
 80041d0:	4826      	ldr	r0, [pc, #152]	; (800426c <HAL_OPAMP_MspInit+0x164>)
 80041d2:	f003 fa57 	bl	8007684 <HAL_GPIO_Init>
}
 80041d6:	e03c      	b.n	8004252 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a24      	ldr	r2, [pc, #144]	; (8004270 <HAL_OPAMP_MspInit+0x168>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d119      	bne.n	8004216 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e2:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 80041fa:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80041fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004200:	2303      	movs	r3, #3
 8004202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004208:	f107 031c 	add.w	r3, r7, #28
 800420c:	4619      	mov	r1, r3
 800420e:	4817      	ldr	r0, [pc, #92]	; (800426c <HAL_OPAMP_MspInit+0x164>)
 8004210:	f003 fa38 	bl	8007684 <HAL_GPIO_Init>
}
 8004214:	e01d      	b.n	8004252 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <HAL_OPAMP_MspInit+0x16c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d118      	bne.n	8004252 <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 8004226:	f043 0302 	orr.w	r3, r3, #2
 800422a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_OPAMP_MspInit+0x158>)
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8004238:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800423c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800423e:	2303      	movs	r3, #3
 8004240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004246:	f107 031c 	add.w	r3, r7, #28
 800424a:	4619      	mov	r1, r3
 800424c:	4807      	ldr	r0, [pc, #28]	; (800426c <HAL_OPAMP_MspInit+0x164>)
 800424e:	f003 fa19 	bl	8007684 <HAL_GPIO_Init>
}
 8004252:	bf00      	nop
 8004254:	3730      	adds	r7, #48	; 0x30
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40010300 	.word	0x40010300
 8004260:	40021000 	.word	0x40021000
 8004264:	40010304 	.word	0x40010304
 8004268:	40010308 	.word	0x40010308
 800426c:	48000400 	.word	0x48000400
 8004270:	4001030c 	.word	0x4001030c
 8004274:	40010310 	.word	0x40010310

08004278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a37      	ldr	r2, [pc, #220]	; (8004364 <HAL_TIM_Base_MspInit+0xec>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10c      	bne.n	80042a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800428a:	4b37      	ldr	r3, [pc, #220]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	4a36      	ldr	r2, [pc, #216]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 8004290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004294:	6613      	str	r3, [r2, #96]	; 0x60
 8004296:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80042a2:	e058      	b.n	8004356 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d10c      	bne.n	80042c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	4a2d      	ldr	r2, [pc, #180]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6593      	str	r3, [r2, #88]	; 0x58
 80042ba:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	69bb      	ldr	r3, [r7, #24]
}
 80042c6:	e046      	b.n	8004356 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a27      	ldr	r2, [pc, #156]	; (800436c <HAL_TIM_Base_MspInit+0xf4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10c      	bne.n	80042ec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042d2:	4b25      	ldr	r3, [pc, #148]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	4a24      	ldr	r2, [pc, #144]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
 80042de:	4b22      	ldr	r3, [pc, #136]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697b      	ldr	r3, [r7, #20]
}
 80042ea:	e034      	b.n	8004356 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <HAL_TIM_Base_MspInit+0xf8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10c      	bne.n	8004310 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fa:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 80042fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004300:	6613      	str	r3, [r2, #96]	; 0x60
 8004302:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	693b      	ldr	r3, [r7, #16]
}
 800430e:	e022      	b.n	8004356 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a17      	ldr	r2, [pc, #92]	; (8004374 <HAL_TIM_Base_MspInit+0xfc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 800431c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431e:	4a12      	ldr	r2, [pc, #72]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 8004320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004324:	6613      	str	r3, [r2, #96]	; 0x60
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
}
 8004332:	e010      	b.n	8004356 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0f      	ldr	r2, [pc, #60]	; (8004378 <HAL_TIM_Base_MspInit+0x100>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10b      	bne.n	8004356 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 8004340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 8004344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004348:	6613      	str	r3, [r2, #96]	; 0x60
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_TIM_Base_MspInit+0xf0>)
 800434c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
}
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40021000 	.word	0x40021000
 800436c:	40000800 	.word	0x40000800
 8004370:	40013400 	.word	0x40013400
 8004374:	40014400 	.word	0x40014400
 8004378:	40015000 	.word	0x40015000

0800437c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_TIM_PWM_MspInit+0x38>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10b      	bne.n	80043a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004394:	f043 0302 	orr.w	r3, r3, #2
 8004398:	6593      	str	r3, [r2, #88]	; 0x58
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	; 0x38
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a65      	ldr	r2, [pc, #404]	; (8004570 <HAL_TIM_MspPostInit+0x1b4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d11c      	bne.n	8004418 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043de:	4b65      	ldr	r3, [pc, #404]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	4a64      	ldr	r2, [pc, #400]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80043e4:	f043 0320 	orr.w	r3, r3, #32
 80043e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043ea:	4b62      	ldr	r3, [pc, #392]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 80043f6:	2301      	movs	r3, #1
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fa:	2302      	movs	r3, #2
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004402:	2300      	movs	r3, #0
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004406:	2306      	movs	r3, #6
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 800440a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440e:	4619      	mov	r1, r3
 8004410:	4859      	ldr	r0, [pc, #356]	; (8004578 <HAL_TIM_MspPostInit+0x1bc>)
 8004412:	f003 f937 	bl	8007684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8004416:	e0a6      	b.n	8004566 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a57      	ldr	r2, [pc, #348]	; (800457c <HAL_TIM_MspPostInit+0x1c0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d11c      	bne.n	800445c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	4a53      	ldr	r2, [pc, #332]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800442e:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 800443a:	2330      	movs	r3, #48	; 0x30
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443e:	2302      	movs	r3, #2
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004442:	2300      	movs	r3, #0
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004446:	2300      	movs	r3, #0
 8004448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800444a:	2302      	movs	r3, #2
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004452:	4619      	mov	r1, r3
 8004454:	484a      	ldr	r0, [pc, #296]	; (8004580 <HAL_TIM_MspPostInit+0x1c4>)
 8004456:	f003 f915 	bl	8007684 <HAL_GPIO_Init>
}
 800445a:	e084      	b.n	8004566 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a48      	ldr	r2, [pc, #288]	; (8004584 <HAL_TIM_MspPostInit+0x1c8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d11d      	bne.n	80044a2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	4a42      	ldr	r2, [pc, #264]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004472:	4b40      	ldr	r3, [pc, #256]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 800447e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004484:	2302      	movs	r3, #2
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	2300      	movs	r3, #0
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448c:	2300      	movs	r3, #0
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004490:	2302      	movs	r3, #2
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004498:	4619      	mov	r1, r3
 800449a:	4839      	ldr	r0, [pc, #228]	; (8004580 <HAL_TIM_MspPostInit+0x1c4>)
 800449c:	f003 f8f2 	bl	8007684 <HAL_GPIO_Init>
}
 80044a0:	e061      	b.n	8004566 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a38      	ldr	r2, [pc, #224]	; (8004588 <HAL_TIM_MspPostInit+0x1cc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d13a      	bne.n	8004522 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ac:	4b31      	ldr	r3, [pc, #196]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80044ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b0:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80044b2:	f043 0304 	orr.w	r3, r3, #4
 80044b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044b8:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80044ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80044c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c8:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80044ca:	f043 0302 	orr.w	r3, r3, #2
 80044ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044d0:	4b28      	ldr	r3, [pc, #160]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 80044dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	2302      	movs	r3, #2
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	2300      	movs	r3, #0
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 80044ee:	2306      	movs	r3, #6
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 80044f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f6:	4619      	mov	r1, r3
 80044f8:	4824      	ldr	r0, [pc, #144]	; (800458c <HAL_TIM_MspPostInit+0x1d0>)
 80044fa:	f003 f8c3 	bl	8007684 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 80044fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450c:	2300      	movs	r3, #0
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004510:	230a      	movs	r3, #10
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 8004514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004518:	4619      	mov	r1, r3
 800451a:	4819      	ldr	r0, [pc, #100]	; (8004580 <HAL_TIM_MspPostInit+0x1c4>)
 800451c:	f003 f8b2 	bl	8007684 <HAL_GPIO_Init>
}
 8004520:	e021      	b.n	8004566 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1a      	ldr	r2, [pc, #104]	; (8004590 <HAL_TIM_MspPostInit+0x1d4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d11c      	bne.n	8004566 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	4a10      	ldr	r2, [pc, #64]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <HAL_TIM_MspPostInit+0x1b8>)
 800453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004554:	2301      	movs	r3, #1
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8004558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455c:	4619      	mov	r1, r3
 800455e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004562:	f003 f88f 	bl	8007684 <HAL_GPIO_Init>
}
 8004566:	bf00      	nop
 8004568:	3738      	adds	r7, #56	; 0x38
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40021000 	.word	0x40021000
 8004578:	48001400 	.word	0x48001400
 800457c:	40000400 	.word	0x40000400
 8004580:	48000400 	.word	0x48000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40013400 	.word	0x40013400
 800458c:	48000800 	.word	0x48000800
 8004590:	40014400 	.word	0x40014400

08004594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b0a2      	sub	sp, #136	; 0x88
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045ac:	f107 0320 	add.w	r3, r7, #32
 80045b0:	2254      	movs	r2, #84	; 0x54
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f00d fdbf 	bl	8012138 <memset>
  if(huart->Instance==USART1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7d      	ldr	r2, [pc, #500]	; (80047b4 <HAL_UART_MspInit+0x220>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	f040 8082 	bne.w	80046ca <HAL_UART_MspInit+0x136>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045ce:	f107 0320 	add.w	r3, r7, #32
 80045d2:	4618      	mov	r0, r3
 80045d4:	f005 ff3c 	bl	800a450 <HAL_RCCEx_PeriphCLKConfig>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80045de:	f7ff faf9 	bl	8003bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045e2:	4b75      	ldr	r3, [pc, #468]	; (80047b8 <HAL_UART_MspInit+0x224>)
 80045e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e6:	4a74      	ldr	r2, [pc, #464]	; (80047b8 <HAL_UART_MspInit+0x224>)
 80045e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ec:	6613      	str	r3, [r2, #96]	; 0x60
 80045ee:	4b72      	ldr	r3, [pc, #456]	; (80047b8 <HAL_UART_MspInit+0x224>)
 80045f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	4b6f      	ldr	r3, [pc, #444]	; (80047b8 <HAL_UART_MspInit+0x224>)
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	4a6e      	ldr	r2, [pc, #440]	; (80047b8 <HAL_UART_MspInit+0x224>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004606:	4b6c      	ldr	r3, [pc, #432]	; (80047b8 <HAL_UART_MspInit+0x224>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004612:	4b69      	ldr	r3, [pc, #420]	; (80047b8 <HAL_UART_MspInit+0x224>)
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	4a68      	ldr	r2, [pc, #416]	; (80047b8 <HAL_UART_MspInit+0x224>)
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800461e:	4b66      	ldr	r3, [pc, #408]	; (80047b8 <HAL_UART_MspInit+0x224>)
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800462a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004630:	2302      	movs	r3, #2
 8004632:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800463e:	2307      	movs	r3, #7
 8004640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004644:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004648:	4619      	mov	r1, r3
 800464a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800464e:	f003 f819 	bl	8007684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004656:	2302      	movs	r3, #2
 8004658:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004664:	2307      	movs	r3, #7
 8004666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800466a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800466e:	4619      	mov	r1, r3
 8004670:	4852      	ldr	r0, [pc, #328]	; (80047bc <HAL_UART_MspInit+0x228>)
 8004672:	f003 f807 	bl	8007684 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8004676:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 8004678:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_UART_MspInit+0x230>)
 800467a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 800467e:	2218      	movs	r2, #24
 8004680:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004682:	4b4f      	ldr	r3, [pc, #316]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004688:	4b4d      	ldr	r3, [pc, #308]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 800468a:	2200      	movs	r2, #0
 800468c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800468e:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 8004690:	2280      	movs	r2, #128	; 0x80
 8004692:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004694:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 8004696:	2200      	movs	r2, #0
 8004698:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800469a:	4b49      	ldr	r3, [pc, #292]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 800469c:	2200      	movs	r2, #0
 800469e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80046a0:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046a6:	4b46      	ldr	r3, [pc, #280]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046ac:	4844      	ldr	r0, [pc, #272]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 80046ae:	f002 fcb7 	bl	8007020 <HAL_DMA_Init>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80046b8:	f7ff fa8c 	bl	8003bd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a40      	ldr	r2, [pc, #256]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c
 80046c2:	4a3f      	ldr	r2, [pc, #252]	; (80047c0 <HAL_UART_MspInit+0x22c>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046c8:	e06f      	b.n	80047aa <HAL_UART_MspInit+0x216>
  else if(huart->Instance==USART2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3e      	ldr	r2, [pc, #248]	; (80047c8 <HAL_UART_MspInit+0x234>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d16a      	bne.n	80047aa <HAL_UART_MspInit+0x216>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80046d4:	2302      	movs	r3, #2
 80046d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80046d8:	2300      	movs	r3, #0
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046dc:	f107 0320 	add.w	r3, r7, #32
 80046e0:	4618      	mov	r0, r3
 80046e2:	f005 feb5 	bl	800a450 <HAL_RCCEx_PeriphCLKConfig>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80046ec:	f7ff fa72 	bl	8003bd4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046f0:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_UART_MspInit+0x224>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	4a30      	ldr	r2, [pc, #192]	; (80047b8 <HAL_UART_MspInit+0x224>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fa:	6593      	str	r3, [r2, #88]	; 0x58
 80046fc:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <HAL_UART_MspInit+0x224>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004708:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <HAL_UART_MspInit+0x224>)
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <HAL_UART_MspInit+0x224>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004714:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_UART_MspInit+0x224>)
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8004720:	f248 0304 	movw	r3, #32772	; 0x8004
 8004724:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004726:	2302      	movs	r3, #2
 8004728:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	2300      	movs	r3, #0
 800472c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004734:	2307      	movs	r3, #7
 8004736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800473e:	4619      	mov	r1, r3
 8004740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004744:	f002 ff9e 	bl	8007684 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <HAL_UART_MspInit+0x238>)
 800474a:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <HAL_UART_MspInit+0x23c>)
 800474c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800474e:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004750:	221a      	movs	r2, #26
 8004752:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <HAL_UART_MspInit+0x238>)
 800475c:	2200      	movs	r2, #0
 800475e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004760:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004762:	2280      	movs	r2, #128	; 0x80
 8004764:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004768:	2200      	movs	r2, #0
 800476a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <HAL_UART_MspInit+0x238>)
 800476e:	2200      	movs	r2, #0
 8004770:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004774:	2200      	movs	r2, #0
 8004776:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004778:	4b14      	ldr	r3, [pc, #80]	; (80047cc <HAL_UART_MspInit+0x238>)
 800477a:	2200      	movs	r2, #0
 800477c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800477e:	4813      	ldr	r0, [pc, #76]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004780:	f002 fc4e 	bl	8007020 <HAL_DMA_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800478a:	f7ff fa23 	bl	8003bd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004792:	67da      	str	r2, [r3, #124]	; 0x7c
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <HAL_UART_MspInit+0x238>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	2026      	movs	r0, #38	; 0x26
 80047a0:	f002 fa3f 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047a4:	2026      	movs	r0, #38	; 0x26
 80047a6:	f002 fa56 	bl	8006c56 <HAL_NVIC_EnableIRQ>
}
 80047aa:	bf00      	nop
 80047ac:	3788      	adds	r7, #136	; 0x88
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40013800 	.word	0x40013800
 80047b8:	40021000 	.word	0x40021000
 80047bc:	48000400 	.word	0x48000400
 80047c0:	2000092c 	.word	0x2000092c
 80047c4:	40020008 	.word	0x40020008
 80047c8:	40004400 	.word	0x40004400
 80047cc:	2000098c 	.word	0x2000098c
 80047d0:	40020408 	.word	0x40020408

080047d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047d8:	e7fe      	b.n	80047d8 <NMI_Handler+0x4>

080047da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047de:	e7fe      	b.n	80047de <HardFault_Handler+0x4>

080047e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047e4:	e7fe      	b.n	80047e4 <MemManage_Handler+0x4>

080047e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047ea:	e7fe      	b.n	80047ea <BusFault_Handler+0x4>

080047ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047f0:	e7fe      	b.n	80047f0 <UsageFault_Handler+0x4>

080047f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004820:	f000 f9ac 	bl	8004b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	bd80      	pop	{r7, pc}

08004828 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800482c:	4802      	ldr	r0, [pc, #8]	; (8004838 <DMA1_Channel1_IRQHandler+0x10>)
 800482e:	f002 fdda 	bl	80073e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000092c 	.word	0x2000092c

0800483c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <DMA1_Channel2_IRQHandler+0x10>)
 8004842:	f002 fdd0 	bl	80073e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000808 	.word	0x20000808

08004850 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <DMA1_Channel3_IRQHandler+0x10>)
 8004856:	f002 fdc6 	bl	80073e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000868 	.word	0x20000868

08004864 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <DMA1_Channel4_IRQHandler+0x10>)
 800486a:	f002 fdbc 	bl	80073e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	200008c8 	.word	0x200008c8

08004878 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800487c:	4802      	ldr	r0, [pc, #8]	; (8004888 <USB_LP_IRQHandler+0x10>)
 800487e:	f003 fbe2 	bl	8008046 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20001f0c 	.word	0x20001f0c

0800488c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004890:	4802      	ldr	r0, [pc, #8]	; (800489c <USART2_IRQHandler+0x10>)
 8004892:	f007 fb7f 	bl	800bf94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000778 	.word	0x20000778

080048a0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <DMA2_Channel1_IRQHandler+0x10>)
 80048a6:	f002 fd9e 	bl	80073e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2000098c 	.word	0x2000098c

080048b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return 1;
 80048b8:	2301      	movs	r3, #1
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_kill>:

int _kill(int pid, int sig)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048ce:	f00d fbfb 	bl	80120c8 <__errno>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2216      	movs	r2, #22
 80048d6:	601a      	str	r2, [r3, #0]
  return -1;
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_exit>:

void _exit (int status)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048ec:	f04f 31ff 	mov.w	r1, #4294967295
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffe7 	bl	80048c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80048f6:	e7fe      	b.n	80048f6 <_exit+0x12>

080048f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e00a      	b.n	8004920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800490a:	f3af 8000 	nop.w
 800490e:	4601      	mov	r1, r0
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	60ba      	str	r2, [r7, #8]
 8004916:	b2ca      	uxtb	r2, r1
 8004918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3301      	adds	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	dbf0      	blt.n	800490a <_read+0x12>
  }

  return len;
 8004928:	687b      	ldr	r3, [r7, #4]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d002      	beq.n	800494a <_write+0x18>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d115      	bne.n	8004976 <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	68b8      	ldr	r0, [r7, #8]
 800494e:	f00c ff19 	bl	8011784 <CDC_Transmit_FS>
 8004952:	4603      	mov	r3, r0
 8004954:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d0f6      	beq.n	800494a <_write+0x18>
		        if (result != USBD_OK)
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <_write+0x40>
		        {
		            errno = EIO;
 8004962:	f00d fbb1 	bl	80120c8 <__errno>
 8004966:	4603      	mov	r3, r0
 8004968:	2205      	movs	r2, #5
 800496a:	601a      	str	r2, [r3, #0]
		            return -1;
 800496c:	f04f 33ff 	mov.w	r3, #4294967295
 8004970:	e008      	b.n	8004984 <_write+0x52>
		        }
		        return len;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	e006      	b.n	8004984 <_write+0x52>
		    }
		    errno = EBADF;
 8004976:	f00d fba7 	bl	80120c8 <__errno>
 800497a:	4603      	mov	r3, r0
 800497c:	2209      	movs	r2, #9
 800497e:	601a      	str	r2, [r3, #0]
		    return -1;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <_close>:

int _close(int file)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049b4:	605a      	str	r2, [r3, #4]
  return 0;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <_isatty>:

int _isatty(int file)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80049cc:	2301      	movs	r3, #1
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <_sbrk+0x5c>)
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <_sbrk+0x60>)
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a08:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <_sbrk+0x64>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <_sbrk+0x64>)
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <_sbrk+0x68>)
 8004a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <_sbrk+0x64>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d207      	bcs.n	8004a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a24:	f00d fb50 	bl	80120c8 <__errno>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a32:	e009      	b.n	8004a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <_sbrk+0x64>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a3a:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <_sbrk+0x64>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	4a05      	ldr	r2, [pc, #20]	; (8004a58 <_sbrk+0x64>)
 8004a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20020000 	.word	0x20020000
 8004a54:	00000400 	.word	0x00000400
 8004a58:	200009ec 	.word	0x200009ec
 8004a5c:	20002430 	.word	0x20002430

08004a60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <SystemInit+0x20>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <SystemInit+0x20>)
 8004a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a84:	480d      	ldr	r0, [pc, #52]	; (8004abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a88:	480d      	ldr	r0, [pc, #52]	; (8004ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a8a:	490e      	ldr	r1, [pc, #56]	; (8004ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <LoopForever+0xe>)
  movs r3, #0
 8004a8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004a90:	e002      	b.n	8004a98 <LoopCopyDataInit>

08004a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a96:	3304      	adds	r3, #4

08004a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a9c:	d3f9      	bcc.n	8004a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004aa0:	4c0b      	ldr	r4, [pc, #44]	; (8004ad0 <LoopForever+0x16>)
  movs r3, #0
 8004aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aa4:	e001      	b.n	8004aaa <LoopFillZerobss>

08004aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aa8:	3204      	adds	r2, #4

08004aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aac:	d3fb      	bcc.n	8004aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004aae:	f7ff ffd7 	bl	8004a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ab2:	f00d fb0f 	bl	80120d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ab6:	f7ff f815 	bl	8003ae4 <main>

08004aba <LoopForever>:

LoopForever:
    b LoopForever
 8004aba:	e7fe      	b.n	8004aba <LoopForever>
  ldr   r0, =_estack
 8004abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac4:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004ac8:	0801561c 	.word	0x0801561c
  ldr r2, =_sbss
 8004acc:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8004ad0:	20002430 	.word	0x20002430

08004ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ad4:	e7fe      	b.n	8004ad4 <ADC1_2_IRQHandler>

08004ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ae0:	2003      	movs	r0, #3
 8004ae2:	f002 f893 	bl	8006c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ae6:	200f      	movs	r0, #15
 8004ae8:	f000 f80e 	bl	8004b08 <HAL_InitTick>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	71fb      	strb	r3, [r7, #7]
 8004af6:	e001      	b.n	8004afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004af8:	f7ff f88c 	bl	8003c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004afc:	79fb      	ldrb	r3, [r7, #7]

}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <HAL_InitTick+0x68>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d022      	beq.n	8004b62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004b1c:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_InitTick+0x6c>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <HAL_InitTick+0x68>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	4618      	mov	r0, r3
 8004b32:	f002 f89e 	bl	8006c72 <HAL_SYSTICK_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10f      	bne.n	8004b5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b0f      	cmp	r3, #15
 8004b40:	d809      	bhi.n	8004b56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b42:	2200      	movs	r2, #0
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4a:	f002 f86a 	bl	8006c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <HAL_InitTick+0x70>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e007      	b.n	8004b66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
 8004b5a:	e004      	b.n	8004b66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
 8004b60:	e001      	b.n	8004b66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000008 	.word	0x20000008
 8004b74:	20000000 	.word	0x20000000
 8004b78:	20000004 	.word	0x20000004

08004b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_IncTick+0x1c>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_IncTick+0x20>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	4a03      	ldr	r2, [pc, #12]	; (8004b98 <HAL_IncTick+0x1c>)
 8004b8c:	6013      	str	r3, [r2, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	200009f0 	.word	0x200009f0
 8004b9c:	20000008 	.word	0x20000008

08004ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_GetTick+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	200009f0 	.word	0x200009f0

08004bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	f7ff ffee 	bl	8004ba0 <HAL_GetTick>
 8004bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d004      	beq.n	8004bdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_Delay+0x40>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bdc:	bf00      	nop
 8004bde:	f7ff ffdf 	bl	8004ba0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d8f7      	bhi.n	8004bde <HAL_Delay+0x26>
  {
  }
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000008 	.word	0x20000008

08004bfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	609a      	str	r2, [r3, #8]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3360      	adds	r3, #96	; 0x60
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <LL_ADC_SetOffset+0x44>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	03fff000 	.word	0x03fff000

08004cac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3360      	adds	r3, #96	; 0x60
 8004cba:	461a      	mov	r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3360      	adds	r3, #96	; 0x60
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3360      	adds	r3, #96	; 0x60
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3360      	adds	r3, #96	; 0x60
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	615a      	str	r2, [r3, #20]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b087      	sub	sp, #28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3330      	adds	r3, #48	; 0x30
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	4413      	add	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	211f      	movs	r1, #31
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	401a      	ands	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0e9b      	lsrs	r3, r3, #26
 8004dfe:	f003 011f 	and.w	r1, r3, #31
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b087      	sub	sp, #28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	0e5b      	lsrs	r3, r3, #25
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	0d1b      	lsrs	r3, r3, #20
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2107      	movs	r1, #7
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	0d1b      	lsrs	r3, r3, #20
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	431a      	orrs	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10a      	bne.n	8004e9e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e94:	431a      	orrs	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004e9c:	e00a      	b.n	8004eb4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	401a      	ands	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	407f0000 	.word	0x407f0000

08004ec4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004ef0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6093      	str	r3, [r2, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f18:	d101      	bne.n	8004f1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f68:	d101      	bne.n	8004f6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f90:	f043 0201 	orr.w	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fb8:	f043 0202 	orr.w	r2, r3, #2
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <LL_ADC_IsEnabled+0x18>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <LL_ADC_IsEnabled+0x1a>
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d101      	bne.n	800500a <LL_ADC_IsDisableOngoing+0x18>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <LL_ADC_IsDisableOngoing+0x1a>
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800502c:	f043 0204 	orr.w	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d101      	bne.n	8005058 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d101      	bne.n	800507e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b089      	sub	sp, #36	; 0x24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1af      	b.n	8005406 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fe fdd1 	bl	8003c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff ff19 	bl	8004f04 <LL_ADC_IsDeepPowerDownEnabled>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff feff 	bl	8004ee0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff ff34 	bl	8004f54 <LL_ADC_IsInternalRegulatorEnabled>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d115      	bne.n	800511e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff ff18 	bl	8004f2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050fc:	4b9f      	ldr	r3, [pc, #636]	; (800537c <HAL_ADC_Init+0x2f0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	099b      	lsrs	r3, r3, #6
 8005102:	4a9f      	ldr	r2, [pc, #636]	; (8005380 <HAL_ADC_Init+0x2f4>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	099b      	lsrs	r3, r3, #6
 800510a:	3301      	adds	r3, #1
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005110:	e002      	b.n	8005118 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3b01      	subs	r3, #1
 8005116:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f9      	bne.n	8005112 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff ff16 	bl	8004f54 <LL_ADC_IsInternalRegulatorEnabled>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10d      	bne.n	800514a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005132:	f043 0210 	orr.w	r2, r3, #16
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513e:	f043 0201 	orr.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ff76 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 8005154:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 8148 	bne.w	80053f4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 8144 	bne.w	80053f4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005170:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005174:	f043 0202 	orr.w	r2, r3, #2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ff23 	bl	8004fcc <LL_ADC_IsEnabled>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d141      	bne.n	8005210 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005194:	d004      	beq.n	80051a0 <HAL_ADC_Init+0x114>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7a      	ldr	r2, [pc, #488]	; (8005384 <HAL_ADC_Init+0x2f8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10f      	bne.n	80051c0 <HAL_ADC_Init+0x134>
 80051a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80051a4:	f7ff ff12 	bl	8004fcc <LL_ADC_IsEnabled>
 80051a8:	4604      	mov	r4, r0
 80051aa:	4876      	ldr	r0, [pc, #472]	; (8005384 <HAL_ADC_Init+0x2f8>)
 80051ac:	f7ff ff0e 	bl	8004fcc <LL_ADC_IsEnabled>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4323      	orrs	r3, r4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e012      	b.n	80051e6 <HAL_ADC_Init+0x15a>
 80051c0:	4871      	ldr	r0, [pc, #452]	; (8005388 <HAL_ADC_Init+0x2fc>)
 80051c2:	f7ff ff03 	bl	8004fcc <LL_ADC_IsEnabled>
 80051c6:	4604      	mov	r4, r0
 80051c8:	4870      	ldr	r0, [pc, #448]	; (800538c <HAL_ADC_Init+0x300>)
 80051ca:	f7ff feff 	bl	8004fcc <LL_ADC_IsEnabled>
 80051ce:	4603      	mov	r3, r0
 80051d0:	431c      	orrs	r4, r3
 80051d2:	486f      	ldr	r0, [pc, #444]	; (8005390 <HAL_ADC_Init+0x304>)
 80051d4:	f7ff fefa 	bl	8004fcc <LL_ADC_IsEnabled>
 80051d8:	4603      	mov	r3, r0
 80051da:	4323      	orrs	r3, r4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d012      	beq.n	8005210 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051f2:	d004      	beq.n	80051fe <HAL_ADC_Init+0x172>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a62      	ldr	r2, [pc, #392]	; (8005384 <HAL_ADC_Init+0x2f8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_ADC_Init+0x176>
 80051fe:	4a65      	ldr	r2, [pc, #404]	; (8005394 <HAL_ADC_Init+0x308>)
 8005200:	e000      	b.n	8005204 <HAL_ADC_Init+0x178>
 8005202:	4a65      	ldr	r2, [pc, #404]	; (8005398 <HAL_ADC_Init+0x30c>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7ff fcf6 	bl	8004bfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	7f5b      	ldrb	r3, [r3, #29]
 8005214:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800521a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005220:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005226:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800522e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800523a:	2b01      	cmp	r3, #1
 800523c:	d106      	bne.n	800524c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	3b01      	subs	r3, #1
 8005244:	045b      	lsls	r3, r3, #17
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4313      	orrs	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	4b4b      	ldr	r3, [pc, #300]	; (800539c <HAL_ADC_Init+0x310>)
 8005270:	4013      	ands	r3, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	69b9      	ldr	r1, [r7, #24]
 8005278:	430b      	orrs	r3, r1
 800527a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fed2 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 800529c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fedf 	bl	8005066 <LL_ADC_INJ_IsConversionOngoing>
 80052a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d17f      	bne.n	80053b0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d17c      	bne.n	80053b0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80052ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d2:	f023 0302 	bic.w	r3, r3, #2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	69b9      	ldr	r1, [r7, #24]
 80052dc:	430b      	orrs	r3, r1
 80052de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d017      	beq.n	8005318 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005300:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6911      	ldr	r1, [r2, #16]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	430b      	orrs	r3, r1
 8005312:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005316:	e013      	b.n	8005340 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005326:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800533c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005346:	2b01      	cmp	r3, #1
 8005348:	d12a      	bne.n	80053a0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005360:	4311      	orrs	r1, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005366:	4311      	orrs	r1, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800536c:	430a      	orrs	r2, r1
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	611a      	str	r2, [r3, #16]
 800537a:	e019      	b.n	80053b0 <HAL_ADC_Init+0x324>
 800537c:	20000000 	.word	0x20000000
 8005380:	053e2d63 	.word	0x053e2d63
 8005384:	50000100 	.word	0x50000100
 8005388:	50000400 	.word	0x50000400
 800538c:	50000500 	.word	0x50000500
 8005390:	50000600 	.word	0x50000600
 8005394:	50000300 	.word	0x50000300
 8005398:	50000700 	.word	0x50000700
 800539c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d10c      	bne.n	80053d2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	f023 010f 	bic.w	r1, r3, #15
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
 80053d0:	e007      	b.n	80053e2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 020f 	bic.w	r2, r2, #15
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	f043 0201 	orr.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80053f2:	e007      	b.n	8005404 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	f043 0210 	orr.w	r2, r3, #16
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005404:	7ffb      	ldrb	r3, [r7, #31]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd90      	pop	{r4, r7, pc}
 800540e:	bf00      	nop

08005410 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005424:	d004      	beq.n	8005430 <HAL_ADC_Start_DMA+0x20>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a5a      	ldr	r2, [pc, #360]	; (8005594 <HAL_ADC_Start_DMA+0x184>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d101      	bne.n	8005434 <HAL_ADC_Start_DMA+0x24>
 8005430:	4b59      	ldr	r3, [pc, #356]	; (8005598 <HAL_ADC_Start_DMA+0x188>)
 8005432:	e000      	b.n	8005436 <HAL_ADC_Start_DMA+0x26>
 8005434:	4b59      	ldr	r3, [pc, #356]	; (800559c <HAL_ADC_Start_DMA+0x18c>)
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fd44 	bl	8004ec4 <LL_ADC_GetMultimode>
 800543c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fdfc 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	f040 809b 	bne.w	8005586 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_ADC_Start_DMA+0x4e>
 800545a:	2302      	movs	r3, #2
 800545c:	e096      	b.n	800558c <HAL_ADC_Start_DMA+0x17c>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4d      	ldr	r2, [pc, #308]	; (80055a0 <HAL_ADC_Start_DMA+0x190>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d008      	beq.n	8005482 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b05      	cmp	r3, #5
 800547a:	d002      	beq.n	8005482 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b09      	cmp	r3, #9
 8005480:	d17a      	bne.n	8005578 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fcf6 	bl	8005e74 <ADC_Enable>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d16d      	bne.n	800556e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3a      	ldr	r2, [pc, #232]	; (8005594 <HAL_ADC_Start_DMA+0x184>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_ADC_Start_DMA+0xb4>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3b      	ldr	r2, [pc, #236]	; (80055a4 <HAL_ADC_Start_DMA+0x194>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d002      	beq.n	80054c0 <HAL_ADC_Start_DMA+0xb0>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	e003      	b.n	80054c8 <HAL_ADC_Start_DMA+0xb8>
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <HAL_ADC_Start_DMA+0x198>)
 80054c2:	e001      	b.n	80054c8 <HAL_ADC_Start_DMA+0xb8>
 80054c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d002      	beq.n	80054d6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d006      	beq.n	80054fc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f2:	f023 0206 	bic.w	r2, r3, #6
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60
 80054fa:	e002      	b.n	8005502 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	4a29      	ldr	r2, [pc, #164]	; (80055ac <HAL_ADC_Start_DMA+0x19c>)
 8005508:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	4a28      	ldr	r2, [pc, #160]	; (80055b0 <HAL_ADC_Start_DMA+0x1a0>)
 8005510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <HAL_ADC_Start_DMA+0x1a4>)
 8005518:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	221c      	movs	r2, #28
 8005520:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0210 	orr.w	r2, r2, #16
 8005538:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3340      	adds	r3, #64	; 0x40
 8005554:	4619      	mov	r1, r3
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f001 fe09 	bl	8007170 <HAL_DMA_Start_IT>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fd56 	bl	8005018 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800556c:	e00d      	b.n	800558a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005576:	e008      	b.n	800558a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005584:	e001      	b.n	800558a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005586:	2302      	movs	r3, #2
 8005588:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	50000100 	.word	0x50000100
 8005598:	50000300 	.word	0x50000300
 800559c:	50000700 	.word	0x50000700
 80055a0:	50000600 	.word	0x50000600
 80055a4:	50000500 	.word	0x50000500
 80055a8:	50000400 	.word	0x50000400
 80055ac:	08005ff7 	.word	0x08005ff7
 80055b0:	080060cf 	.word	0x080060cf
 80055b4:	080060eb 	.word	0x080060eb

080055b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b0b6      	sub	sp, #216	; 0xd8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x24>
 8005612:	2302      	movs	r3, #2
 8005614:	f000 bc13 	b.w	8005e3e <HAL_ADC_ConfigChannel+0x84a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fd0b 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	f040 83f3 	bne.w	8005e18 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f7ff fbc1 	bl	8004dc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fcf9 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 800564e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fd05 	bl	8005066 <LL_ADC_INJ_IsConversionOngoing>
 800565c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005660:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 81d9 	bne.w	8005a1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800566a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 81d4 	bne.w	8005a1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567c:	d10f      	bne.n	800569e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	4619      	mov	r1, r3
 800568a:	f7ff fbc8 	bl	8004e1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fb6f 	bl	8004d7a <LL_ADC_SetSamplingTimeCommonConfig>
 800569c:	e00e      	b.n	80056bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f7ff fbb7 	bl	8004e1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fb5f 	bl	8004d7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d022      	beq.n	8005724 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6919      	ldr	r1, [r3, #16]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056ee:	f7ff fab9 	bl	8004c64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6919      	ldr	r1, [r3, #16]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7ff fb05 	bl	8004d0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6919      	ldr	r1, [r3, #16]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	7f1b      	ldrb	r3, [r3, #28]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d102      	bne.n	800571a <HAL_ADC_ConfigChannel+0x126>
 8005714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005718:	e000      	b.n	800571c <HAL_ADC_ConfigChannel+0x128>
 800571a:	2300      	movs	r3, #0
 800571c:	461a      	mov	r2, r3
 800571e:	f7ff fb11 	bl	8004d44 <LL_ADC_SetOffsetSaturation>
 8005722:	e17b      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fabe 	bl	8004cac <LL_ADC_GetOffsetChannel>
 8005730:	4603      	mov	r3, r0
 8005732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x15c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fab3 	bl	8004cac <LL_ADC_GetOffsetChannel>
 8005746:	4603      	mov	r3, r0
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	f003 021f 	and.w	r2, r3, #31
 800574e:	e01e      	b.n	800578e <HAL_ADC_ConfigChannel+0x19a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff faa8 	bl	8004cac <LL_ADC_GetOffsetChannel>
 800575c:	4603      	mov	r3, r0
 800575e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800576e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800577e:	2320      	movs	r3, #32
 8005780:	e004      	b.n	800578c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005786:	fab3 f383 	clz	r3, r3
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x1b2>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	0e9b      	lsrs	r3, r3, #26
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	e018      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x1e4>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80057ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80057c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80057ca:	2320      	movs	r3, #32
 80057cc:	e004      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80057ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057d2:	fab3 f383 	clz	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057d8:	429a      	cmp	r2, r3
 80057da:	d106      	bne.n	80057ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fa77 	bl	8004cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fa5b 	bl	8004cac <LL_ADC_GetOffsetChannel>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x222>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2101      	movs	r1, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fa50 	bl	8004cac <LL_ADC_GetOffsetChannel>
 800580c:	4603      	mov	r3, r0
 800580e:	0e9b      	lsrs	r3, r3, #26
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	e01e      	b.n	8005854 <HAL_ADC_ConfigChannel+0x260>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2101      	movs	r1, #1
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fa45 	bl	8004cac <LL_ADC_GetOffsetChannel>
 8005822:	4603      	mov	r3, r0
 8005824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800582c:	fa93 f3a3 	rbit	r3, r3
 8005830:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800583c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005844:	2320      	movs	r3, #32
 8005846:	e004      	b.n	8005852 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_ADC_ConfigChannel+0x278>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0e9b      	lsrs	r3, r3, #26
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	e018      	b.n	800589e <HAL_ADC_ConfigChannel+0x2aa>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005880:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005890:	2320      	movs	r3, #32
 8005892:	e004      	b.n	800589e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005898:	fab3 f383 	clz	r3, r3
 800589c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800589e:	429a      	cmp	r2, r3
 80058a0:	d106      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2101      	movs	r1, #1
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fa14 	bl	8004cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2102      	movs	r1, #2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f9f8 	bl	8004cac <LL_ADC_GetOffsetChannel>
 80058bc:	4603      	mov	r3, r0
 80058be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x2e8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2102      	movs	r1, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff f9ed 	bl	8004cac <LL_ADC_GetOffsetChannel>
 80058d2:	4603      	mov	r3, r0
 80058d4:	0e9b      	lsrs	r3, r3, #26
 80058d6:	f003 021f 	and.w	r2, r3, #31
 80058da:	e01e      	b.n	800591a <HAL_ADC_ConfigChannel+0x326>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff f9e2 	bl	8004cac <LL_ADC_GetOffsetChannel>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058f2:	fa93 f3a3 	rbit	r3, r3
 80058f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80058fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800590a:	2320      	movs	r3, #32
 800590c:	e004      	b.n	8005918 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800590e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005912:	fab3 f383 	clz	r3, r3
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005922:	2b00      	cmp	r3, #0
 8005924:	d105      	bne.n	8005932 <HAL_ADC_ConfigChannel+0x33e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	0e9b      	lsrs	r3, r3, #26
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	e016      	b.n	8005960 <HAL_ADC_ConfigChannel+0x36c>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800594a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005952:	2320      	movs	r3, #32
 8005954:	e004      	b.n	8005960 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800595a:	fab3 f383 	clz	r3, r3
 800595e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005960:	429a      	cmp	r2, r3
 8005962:	d106      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2200      	movs	r2, #0
 800596a:	2102      	movs	r1, #2
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f9b3 	bl	8004cd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2103      	movs	r1, #3
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff f997 	bl	8004cac <LL_ADC_GetOffsetChannel>
 800597e:	4603      	mov	r3, r0
 8005980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_ADC_ConfigChannel+0x3aa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2103      	movs	r1, #3
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff f98c 	bl	8004cac <LL_ADC_GetOffsetChannel>
 8005994:	4603      	mov	r3, r0
 8005996:	0e9b      	lsrs	r3, r3, #26
 8005998:	f003 021f 	and.w	r2, r3, #31
 800599c:	e017      	b.n	80059ce <HAL_ADC_ConfigChannel+0x3da>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2103      	movs	r1, #3
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff f981 	bl	8004cac <LL_ADC_GetOffsetChannel>
 80059aa:	4603      	mov	r3, r0
 80059ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b0:	fa93 f3a3 	rbit	r3, r3
 80059b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80059b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80059ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80059c0:	2320      	movs	r3, #32
 80059c2:	e003      	b.n	80059cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80059c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c6:	fab3 f383 	clz	r3, r3
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d105      	bne.n	80059e6 <HAL_ADC_ConfigChannel+0x3f2>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	0e9b      	lsrs	r3, r3, #26
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	e011      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x416>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80059f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80059f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80059fe:	2320      	movs	r3, #32
 8005a00:	e003      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a04:	fab3 f383 	clz	r3, r3
 8005a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d106      	bne.n	8005a1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	2103      	movs	r1, #3
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff f95e 	bl	8004cd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fad3 	bl	8004fcc <LL_ADC_IsEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 813d 	bne.w	8005ca8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7ff fa1a 	bl	8004e74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4aa2      	ldr	r2, [pc, #648]	; (8005cd0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f040 812e 	bne.w	8005ca8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x480>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	0e9b      	lsrs	r3, r3, #26
 8005a62:	3301      	adds	r3, #1
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	bf94      	ite	ls
 8005a6c:	2301      	movls	r3, #1
 8005a6e:	2300      	movhi	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	e019      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x4b4>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	e003      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a92:	fab3 f383 	clz	r3, r3
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	3301      	adds	r3, #1
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2b09      	cmp	r3, #9
 8005aa0:	bf94      	ite	ls
 8005aa2:	2301      	movls	r3, #1
 8005aa4:	2300      	movhi	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d079      	beq.n	8005ba0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <HAL_ADC_ConfigChannel+0x4d4>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0e9b      	lsrs	r3, r3, #26
 8005abe:	3301      	adds	r3, #1
 8005ac0:	069b      	lsls	r3, r3, #26
 8005ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ac6:	e015      	b.n	8005af4 <HAL_ADC_ConfigChannel+0x500>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad0:	fa93 f3a3 	rbit	r3, r3
 8005ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	e003      	b.n	8005aec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae6:	fab3 f383 	clz	r3, r3
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3301      	adds	r3, #1
 8005aee:	069b      	lsls	r3, r3, #26
 8005af0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x520>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	0e9b      	lsrs	r3, r3, #26
 8005b06:	3301      	adds	r3, #1
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	e017      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x550>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1c:	fa93 f3a3 	rbit	r3, r3
 8005b20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	e003      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2101      	movs	r1, #1
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	ea42 0103 	orr.w	r1, r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <HAL_ADC_ConfigChannel+0x576>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	0e9b      	lsrs	r3, r3, #26
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f003 021f 	and.w	r2, r3, #31
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	051b      	lsls	r3, r3, #20
 8005b68:	e018      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x5a8>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	fa93 f3a3 	rbit	r3, r3
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005b82:	2320      	movs	r3, #32
 8005b84:	e003      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b88:	fab3 f383 	clz	r3, r3
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f003 021f 	and.w	r2, r3, #31
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	e07e      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <HAL_ADC_ConfigChannel+0x5c8>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	0e9b      	lsrs	r3, r3, #26
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	069b      	lsls	r3, r3, #26
 8005bb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bba:	e015      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x5f4>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	fa93 f3a3 	rbit	r3, r3
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	e003      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	fab3 f383 	clz	r3, r3
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	3301      	adds	r3, #1
 8005be2:	069b      	lsls	r3, r3, #26
 8005be4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x614>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	0e9b      	lsrs	r3, r3, #26
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f303 	lsl.w	r3, r1, r3
 8005c06:	e017      	b.n	8005c38 <HAL_ADC_ConfigChannel+0x644>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	fa93 f3a3 	rbit	r3, r3
 8005c14:	61fb      	str	r3, [r7, #28]
  return result;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005c20:	2320      	movs	r3, #32
 8005c22:	e003      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	fab3 f383 	clz	r3, r3
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	2101      	movs	r1, #1
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	ea42 0103 	orr.w	r1, r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x670>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	0e9b      	lsrs	r3, r3, #26
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f003 021f 	and.w	r2, r3, #31
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	3b1e      	subs	r3, #30
 8005c5c:	051b      	lsls	r3, r3, #20
 8005c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c62:	e01b      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x6a8>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	fa93 f3a3 	rbit	r3, r3
 8005c70:	613b      	str	r3, [r7, #16]
  return result;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	e003      	b.n	8005c88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	fab3 f383 	clz	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f003 021f 	and.w	r2, r3, #31
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	3b1e      	subs	r3, #30
 8005c96:	051b      	lsls	r3, r3, #20
 8005c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	6892      	ldr	r2, [r2, #8]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f7ff f8bb 	bl	8004e1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <HAL_ADC_ConfigChannel+0x6e0>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80be 	beq.w	8005e32 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cbe:	d004      	beq.n	8005cca <HAL_ADC_ConfigChannel+0x6d6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <HAL_ADC_ConfigChannel+0x6e4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x6ec>
 8005cca:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <HAL_ADC_ConfigChannel+0x6e8>)
 8005ccc:	e009      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x6ee>
 8005cce:	bf00      	nop
 8005cd0:	407f0000 	.word	0x407f0000
 8005cd4:	80080000 	.word	0x80080000
 8005cd8:	50000100 	.word	0x50000100
 8005cdc:	50000300 	.word	0x50000300
 8005ce0:	4b59      	ldr	r3, [pc, #356]	; (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe ffb0 	bl	8004c48 <LL_ADC_GetCommonPathInternalCh>
 8005ce8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a56      	ldr	r2, [pc, #344]	; (8005e4c <HAL_ADC_ConfigChannel+0x858>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x70c>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a55      	ldr	r2, [pc, #340]	; (8005e50 <HAL_ADC_ConfigChannel+0x85c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d13a      	bne.n	8005d76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d134      	bne.n	8005d76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d14:	d005      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0x72e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4e      	ldr	r2, [pc, #312]	; (8005e54 <HAL_ADC_ConfigChannel+0x860>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	f040 8085 	bne.w	8005e2c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d2a:	d004      	beq.n	8005d36 <HAL_ADC_ConfigChannel+0x742>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a49      	ldr	r2, [pc, #292]	; (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_ADC_ConfigChannel+0x746>
 8005d36:	4a49      	ldr	r2, [pc, #292]	; (8005e5c <HAL_ADC_ConfigChannel+0x868>)
 8005d38:	e000      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x748>
 8005d3a:	4a43      	ldr	r2, [pc, #268]	; (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f7fe ff6b 	bl	8004c22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d4c:	4b44      	ldr	r3, [pc, #272]	; (8005e60 <HAL_ADC_ConfigChannel+0x86c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	099b      	lsrs	r3, r3, #6
 8005d52:	4a44      	ldr	r2, [pc, #272]	; (8005e64 <HAL_ADC_ConfigChannel+0x870>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	099b      	lsrs	r3, r3, #6
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d66:	e002      	b.n	8005d6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f9      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d74:	e05a      	b.n	8005e2c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3b      	ldr	r2, [pc, #236]	; (8005e68 <HAL_ADC_ConfigChannel+0x874>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d125      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x7d8>
 8005d80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11f      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a31      	ldr	r2, [pc, #196]	; (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d104      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x7ac>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a34      	ldr	r2, [pc, #208]	; (8005e6c <HAL_ADC_ConfigChannel+0x878>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d047      	beq.n	8005e30 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da8:	d004      	beq.n	8005db4 <HAL_ADC_ConfigChannel+0x7c0>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d101      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x7c4>
 8005db4:	4a29      	ldr	r2, [pc, #164]	; (8005e5c <HAL_ADC_ConfigChannel+0x868>)
 8005db6:	e000      	b.n	8005dba <HAL_ADC_ConfigChannel+0x7c6>
 8005db8:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7fe ff2c 	bl	8004c22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dca:	e031      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <HAL_ADC_ConfigChannel+0x87c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d12d      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d127      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d022      	beq.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df4:	d004      	beq.n	8005e00 <HAL_ADC_ConfigChannel+0x80c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d101      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0x810>
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <HAL_ADC_ConfigChannel+0x868>)
 8005e02:	e000      	b.n	8005e06 <HAL_ADC_ConfigChannel+0x812>
 8005e04:	4a10      	ldr	r2, [pc, #64]	; (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f7fe ff06 	bl	8004c22 <LL_ADC_SetCommonPathInternalCh>
 8005e16:	e00c      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005e2a:	e002      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e2c:	bf00      	nop
 8005e2e:	e000      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	37d8      	adds	r7, #216	; 0xd8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	50000700 	.word	0x50000700
 8005e4c:	c3210000 	.word	0xc3210000
 8005e50:	90c00010 	.word	0x90c00010
 8005e54:	50000600 	.word	0x50000600
 8005e58:	50000100 	.word	0x50000100
 8005e5c:	50000300 	.word	0x50000300
 8005e60:	20000000 	.word	0x20000000
 8005e64:	053e2d63 	.word	0x053e2d63
 8005e68:	c7520000 	.word	0xc7520000
 8005e6c:	50000500 	.word	0x50000500
 8005e70:	cb840000 	.word	0xcb840000

08005e74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff f8a3 	bl	8004fcc <LL_ADC_IsEnabled>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d14d      	bne.n	8005f28 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <ADC_Enable+0xc0>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	f043 0210 	orr.w	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e039      	b.n	8005f2a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff f85e 	bl	8004f7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ec0:	f7fe fe6e 	bl	8004ba0 <HAL_GetTick>
 8005ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ec6:	e028      	b.n	8005f1a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff f87d 	bl	8004fcc <LL_ADC_IsEnabled>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff f84d 	bl	8004f7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ee2:	f7fe fe5d 	bl	8004ba0 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d914      	bls.n	8005f1a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d00d      	beq.n	8005f1a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	f043 0210 	orr.w	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e007      	b.n	8005f2a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d1cf      	bne.n	8005ec8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	8000003f 	.word	0x8000003f

08005f38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff f854 	bl	8004ff2 <LL_ADC_IsDisableOngoing>
 8005f4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f83b 	bl	8004fcc <LL_ADC_IsEnabled>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d047      	beq.n	8005fec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d144      	bne.n	8005fec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 030d 	and.w	r3, r3, #13
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d10c      	bne.n	8005f8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff f815 	bl	8004fa4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f82:	f7fe fe0d 	bl	8004ba0 <HAL_GetTick>
 8005f86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f88:	e029      	b.n	8005fde <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8e:	f043 0210 	orr.w	r2, r3, #16
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e023      	b.n	8005fee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005fa6:	f7fe fdfb 	bl	8004ba0 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d914      	bls.n	8005fde <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc6:	f043 0210 	orr.w	r2, r3, #16
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd2:	f043 0201 	orr.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e007      	b.n	8005fee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1dc      	bne.n	8005fa6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006008:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800600c:	2b00      	cmp	r3, #0
 800600e:	d14b      	bne.n	80060a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006014:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d021      	beq.n	800606e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe feb6 	bl	8004da0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d032      	beq.n	80060a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d12b      	bne.n	80060a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11f      	bne.n	80060a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	65da      	str	r2, [r3, #92]	; 0x5c
 800606c:	e018      	b.n	80060a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d111      	bne.n	80060a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006098:	f043 0201 	orr.w	r2, r3, #1
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff fa89 	bl	80055b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80060a6:	e00e      	b.n	80060c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff fa93 	bl	80055e0 <HAL_ADC_ErrorCallback>
}
 80060ba:	e004      	b.n	80060c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff fa75 	bl	80055cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006108:	f043 0204 	orr.w	r2, r3, #4
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fa65 	bl	80055e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <LL_ADC_IsEnabled>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <LL_ADC_IsEnabled+0x18>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <LL_ADC_IsEnabled+0x1a>
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_ADC_StartCalibration>:
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006156:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006160:	4313      	orrs	r3, r2
 8006162:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	609a      	str	r2, [r3, #8]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_ADC_IsCalibrationOnGoing>:
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800618a:	d101      	bne.n	8006190 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <LL_ADC_REG_IsConversionOngoing>:
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d101      	bne.n	80061b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80061dc:	2302      	movs	r3, #2
 80061de:	e04d      	b.n	800627c <HAL_ADCEx_Calibration_Start+0xb8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fea5 	bl	8005f38 <ADC_Disable>
 80061ee:	4603      	mov	r3, r0
 80061f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d136      	bne.n	8006266 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006200:	f023 0302 	bic.w	r3, r3, #2
 8006204:	f043 0202 	orr.w	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff96 	bl	8006144 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006218:	e014      	b.n	8006244 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	3301      	adds	r3, #1
 800621e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d90d      	bls.n	8006244 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622c:	f023 0312 	bic.w	r3, r3, #18
 8006230:	f043 0210 	orr.w	r2, r3, #16
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e01b      	b.n	800627c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff ff94 	bl	8006176 <LL_ADC_IsCalibrationOnGoing>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e2      	bne.n	800621a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	f043 0201 	orr.w	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	65da      	str	r2, [r3, #92]	; 0x5c
 8006264:	e005      	b.n	8006272 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626a:	f043 0210 	orr.w	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	0004de01 	.word	0x0004de01

08006288 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b0a1      	sub	sp, #132	; 0x84
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e0e7      	b.n	8006476 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80062ae:	2300      	movs	r3, #0
 80062b0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80062b2:	2300      	movs	r3, #0
 80062b4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062be:	d102      	bne.n	80062c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80062c0:	4b6f      	ldr	r3, [pc, #444]	; (8006480 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062c2:	60bb      	str	r3, [r7, #8]
 80062c4:	e009      	b.n	80062da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a6e      	ldr	r2, [pc, #440]	; (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d102      	bne.n	80062d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80062d0:	4b6d      	ldr	r3, [pc, #436]	; (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80062d2:	60bb      	str	r3, [r7, #8]
 80062d4:	e001      	b.n	80062da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0be      	b.n	8006476 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff ff4f 	bl	800619e <LL_ADC_REG_IsConversionOngoing>
 8006300:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff ff49 	bl	800619e <LL_ADC_REG_IsConversionOngoing>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	f040 80a0 	bne.w	8006454 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 809c 	bne.w	8006454 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006324:	d004      	beq.n	8006330 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a55      	ldr	r2, [pc, #340]	; (8006480 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d101      	bne.n	8006334 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006330:	4b56      	ldr	r3, [pc, #344]	; (800648c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006332:	e000      	b.n	8006336 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006334:	4b56      	ldr	r3, [pc, #344]	; (8006490 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006336:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d04b      	beq.n	80063d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6859      	ldr	r1, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006352:	035b      	lsls	r3, r3, #13
 8006354:	430b      	orrs	r3, r1
 8006356:	431a      	orrs	r2, r3
 8006358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800635a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006364:	d004      	beq.n	8006370 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a45      	ldr	r2, [pc, #276]	; (8006480 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10f      	bne.n	8006390 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006370:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006374:	f7ff fed3 	bl	800611e <LL_ADC_IsEnabled>
 8006378:	4604      	mov	r4, r0
 800637a:	4841      	ldr	r0, [pc, #260]	; (8006480 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800637c:	f7ff fecf 	bl	800611e <LL_ADC_IsEnabled>
 8006380:	4603      	mov	r3, r0
 8006382:	4323      	orrs	r3, r4
 8006384:	2b00      	cmp	r3, #0
 8006386:	bf0c      	ite	eq
 8006388:	2301      	moveq	r3, #1
 800638a:	2300      	movne	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e012      	b.n	80063b6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006390:	483c      	ldr	r0, [pc, #240]	; (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006392:	f7ff fec4 	bl	800611e <LL_ADC_IsEnabled>
 8006396:	4604      	mov	r4, r0
 8006398:	483b      	ldr	r0, [pc, #236]	; (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800639a:	f7ff fec0 	bl	800611e <LL_ADC_IsEnabled>
 800639e:	4603      	mov	r3, r0
 80063a0:	431c      	orrs	r4, r3
 80063a2:	483c      	ldr	r0, [pc, #240]	; (8006494 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80063a4:	f7ff febb 	bl	800611e <LL_ADC_IsEnabled>
 80063a8:	4603      	mov	r3, r0
 80063aa:	4323      	orrs	r3, r4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d056      	beq.n	8006468 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80063ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80063c2:	f023 030f 	bic.w	r3, r3, #15
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	6811      	ldr	r1, [r2, #0]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	6892      	ldr	r2, [r2, #8]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	431a      	orrs	r2, r3
 80063d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80063d6:	e047      	b.n	8006468 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80063d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ec:	d004      	beq.n	80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a23      	ldr	r2, [pc, #140]	; (8006480 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d10f      	bne.n	8006418 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80063f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80063fc:	f7ff fe8f 	bl	800611e <LL_ADC_IsEnabled>
 8006400:	4604      	mov	r4, r0
 8006402:	481f      	ldr	r0, [pc, #124]	; (8006480 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006404:	f7ff fe8b 	bl	800611e <LL_ADC_IsEnabled>
 8006408:	4603      	mov	r3, r0
 800640a:	4323      	orrs	r3, r4
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	e012      	b.n	800643e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006418:	481a      	ldr	r0, [pc, #104]	; (8006484 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800641a:	f7ff fe80 	bl	800611e <LL_ADC_IsEnabled>
 800641e:	4604      	mov	r4, r0
 8006420:	4819      	ldr	r0, [pc, #100]	; (8006488 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006422:	f7ff fe7c 	bl	800611e <LL_ADC_IsEnabled>
 8006426:	4603      	mov	r3, r0
 8006428:	431c      	orrs	r4, r3
 800642a:	481a      	ldr	r0, [pc, #104]	; (8006494 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800642c:	f7ff fe77 	bl	800611e <LL_ADC_IsEnabled>
 8006430:	4603      	mov	r3, r0
 8006432:	4323      	orrs	r3, r4
 8006434:	2b00      	cmp	r3, #0
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d012      	beq.n	8006468 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800644a:	f023 030f 	bic.w	r3, r3, #15
 800644e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006450:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006452:	e009      	b.n	8006468 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006466:	e000      	b.n	800646a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006468:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006472:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006476:	4618      	mov	r0, r3
 8006478:	3784      	adds	r7, #132	; 0x84
 800647a:	46bd      	mov	sp, r7
 800647c:	bd90      	pop	{r4, r7, pc}
 800647e:	bf00      	nop
 8006480:	50000100 	.word	0x50000100
 8006484:	50000400 	.word	0x50000400
 8006488:	50000500 	.word	0x50000500
 800648c:	50000300 	.word	0x50000300
 8006490:	50000700 	.word	0x50000700
 8006494:	50000600 	.word	0x50000600

08006498 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4904      	ldr	r1, [pc, #16]	; (80064b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40010400 	.word	0x40010400

080064bc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80064c4:	4b05      	ldr	r3, [pc, #20]	; (80064dc <LL_EXTI_EnableIT_32_63+0x20>)
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	4904      	ldr	r1, [pc, #16]	; (80064dc <LL_EXTI_EnableIT_32_63+0x20>)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	620b      	str	r3, [r1, #32]
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	40010400 	.word	0x40010400

080064e0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <LL_EXTI_DisableIT_0_31+0x24>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	43db      	mvns	r3, r3
 80064f0:	4904      	ldr	r1, [pc, #16]	; (8006504 <LL_EXTI_DisableIT_0_31+0x24>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	600b      	str	r3, [r1, #0]
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40010400 	.word	0x40010400

08006508 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <LL_EXTI_DisableIT_32_63+0x24>)
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	43db      	mvns	r3, r3
 8006518:	4904      	ldr	r1, [pc, #16]	; (800652c <LL_EXTI_DisableIT_32_63+0x24>)
 800651a:	4013      	ands	r3, r2
 800651c:	620b      	str	r3, [r1, #32]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40010400 	.word	0x40010400

08006530 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <LL_EXTI_EnableEvent_0_31+0x20>)
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4904      	ldr	r1, [pc, #16]	; (8006550 <LL_EXTI_EnableEvent_0_31+0x20>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4313      	orrs	r3, r2
 8006542:	604b      	str	r3, [r1, #4]

}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40010400 	.word	0x40010400

08006554 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <LL_EXTI_EnableEvent_32_63+0x20>)
 800655e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006560:	4904      	ldr	r1, [pc, #16]	; (8006574 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4313      	orrs	r3, r2
 8006566:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40010400 	.word	0x40010400

08006578 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <LL_EXTI_DisableEvent_0_31+0x24>)
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	43db      	mvns	r3, r3
 8006588:	4904      	ldr	r1, [pc, #16]	; (800659c <LL_EXTI_DisableEvent_0_31+0x24>)
 800658a:	4013      	ands	r3, r2
 800658c:	604b      	str	r3, [r1, #4]
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010400 	.word	0x40010400

080065a0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80065aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	43db      	mvns	r3, r3
 80065b0:	4904      	ldr	r1, [pc, #16]	; (80065c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40010400 	.word	0x40010400

080065c8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	4904      	ldr	r1, [pc, #16]	; (80065e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4313      	orrs	r3, r2
 80065da:	608b      	str	r3, [r1, #8]

}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40010400 	.word	0x40010400

080065ec <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80065f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f8:	4904      	ldr	r1, [pc, #16]	; (800660c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40010400 	.word	0x40010400

08006610 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	43db      	mvns	r3, r3
 8006620:	4904      	ldr	r1, [pc, #16]	; (8006634 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006622:	4013      	ands	r3, r2
 8006624:	608b      	str	r3, [r1, #8]

}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40010400 	.word	0x40010400

08006638 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	43db      	mvns	r3, r3
 8006648:	4904      	ldr	r1, [pc, #16]	; (800665c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800664a:	4013      	ands	r3, r2
 800664c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40010400 	.word	0x40010400

08006660 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	4904      	ldr	r1, [pc, #16]	; (8006680 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4313      	orrs	r3, r2
 8006672:	60cb      	str	r3, [r1, #12]
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40010400 	.word	0x40010400

08006684 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800668e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006690:	4904      	ldr	r1, [pc, #16]	; (80066a4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4313      	orrs	r3, r2
 8006696:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	40010400 	.word	0x40010400

080066a8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	4904      	ldr	r1, [pc, #16]	; (80066cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	60cb      	str	r3, [r1, #12]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010400 	.word	0x40010400

080066d0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	43db      	mvns	r3, r3
 80066e0:	4904      	ldr	r1, [pc, #16]	; (80066f4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010400 	.word	0x40010400

080066f8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006700:	4a04      	ldr	r2, [pc, #16]	; (8006714 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6153      	str	r3, [r2, #20]
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40010400 	.word	0x40010400

08006718 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006720:	4a04      	ldr	r2, [pc, #16]	; (8006734 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40010400 	.word	0x40010400

08006738 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	77fb      	strb	r3, [r7, #31]
 8006752:	e181      	b.n	8006a58 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006762:	d102      	bne.n	800676a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e176      	b.n	8006a58 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7f5b      	ldrb	r3, [r3, #29]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d108      	bne.n	8006786 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fd fbcf 	bl	8003f24 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006790:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b90      	ldr	r3, [pc, #576]	; (80069f8 <HAL_COMP_Init+0x2c0>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	6979      	ldr	r1, [r7, #20]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <HAL_COMP_Init+0xc8>
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d113      	bne.n	8006800 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067d8:	4b88      	ldr	r3, [pc, #544]	; (80069fc <HAL_COMP_Init+0x2c4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	099b      	lsrs	r3, r3, #6
 80067de:	4a88      	ldr	r2, [pc, #544]	; (8006a00 <HAL_COMP_Init+0x2c8>)
 80067e0:	fba2 2303 	umull	r2, r3, r2, r3
 80067e4:	099b      	lsrs	r3, r3, #6
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80067f2:	e002      	b.n	80067fa <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f9      	bne.n	80067f4 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a7f      	ldr	r2, [pc, #508]	; (8006a04 <HAL_COMP_Init+0x2cc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d028      	beq.n	800685c <HAL_COMP_Init+0x124>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a7e      	ldr	r2, [pc, #504]	; (8006a08 <HAL_COMP_Init+0x2d0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d020      	beq.n	8006856 <HAL_COMP_Init+0x11e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a7c      	ldr	r2, [pc, #496]	; (8006a0c <HAL_COMP_Init+0x2d4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_COMP_Init+0x118>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a7b      	ldr	r2, [pc, #492]	; (8006a10 <HAL_COMP_Init+0x2d8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d010      	beq.n	800684a <HAL_COMP_Init+0x112>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a79      	ldr	r2, [pc, #484]	; (8006a14 <HAL_COMP_Init+0x2dc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d008      	beq.n	8006844 <HAL_COMP_Init+0x10c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a78      	ldr	r2, [pc, #480]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d101      	bne.n	8006840 <HAL_COMP_Init+0x108>
 800683c:	2301      	movs	r3, #1
 800683e:	e00f      	b.n	8006860 <HAL_COMP_Init+0x128>
 8006840:	2302      	movs	r3, #2
 8006842:	e00d      	b.n	8006860 <HAL_COMP_Init+0x128>
 8006844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006848:	e00a      	b.n	8006860 <HAL_COMP_Init+0x128>
 800684a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800684e:	e007      	b.n	8006860 <HAL_COMP_Init+0x128>
 8006850:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006854:	e004      	b.n	8006860 <HAL_COMP_Init+0x128>
 8006856:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800685a:	e001      	b.n	8006860 <HAL_COMP_Init+0x128>
 800685c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006860:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80b6 	beq.w	80069dc <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d011      	beq.n	80068a0 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a65      	ldr	r2, [pc, #404]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_COMP_Init+0x158>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a64      	ldr	r2, [pc, #400]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d103      	bne.n	8006898 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006890:	6938      	ldr	r0, [r7, #16]
 8006892:	f7ff feab 	bl	80065ec <LL_EXTI_EnableRisingTrig_32_63>
 8006896:	e014      	b.n	80068c2 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006898:	6938      	ldr	r0, [r7, #16]
 800689a:	f7ff fe95 	bl	80065c8 <LL_EXTI_EnableRisingTrig_0_31>
 800689e:	e010      	b.n	80068c2 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a5c      	ldr	r2, [pc, #368]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_COMP_Init+0x17c>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a5b      	ldr	r2, [pc, #364]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d103      	bne.n	80068bc <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80068b4:	6938      	ldr	r0, [r7, #16]
 80068b6:	f7ff febf 	bl	8006638 <LL_EXTI_DisableRisingTrig_32_63>
 80068ba:	e002      	b.n	80068c2 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80068bc:	6938      	ldr	r0, [r7, #16]
 80068be:	f7ff fea7 	bl	8006610 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a51      	ldr	r2, [pc, #324]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_COMP_Init+0x1aa>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a4f      	ldr	r2, [pc, #316]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d103      	bne.n	80068ea <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80068e2:	6938      	ldr	r0, [r7, #16]
 80068e4:	f7ff fece 	bl	8006684 <LL_EXTI_EnableFallingTrig_32_63>
 80068e8:	e014      	b.n	8006914 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80068ea:	6938      	ldr	r0, [r7, #16]
 80068ec:	f7ff feb8 	bl	8006660 <LL_EXTI_EnableFallingTrig_0_31>
 80068f0:	e010      	b.n	8006914 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a48      	ldr	r2, [pc, #288]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_COMP_Init+0x1ce>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a46      	ldr	r2, [pc, #280]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d103      	bne.n	800690e <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7ff fee2 	bl	80066d0 <LL_EXTI_DisableFallingTrig_32_63>
 800690c:	e002      	b.n	8006914 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800690e:	6938      	ldr	r0, [r7, #16]
 8006910:	f7ff feca 	bl	80066a8 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a3f      	ldr	r2, [pc, #252]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_COMP_Init+0x1f0>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a3e      	ldr	r2, [pc, #248]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d103      	bne.n	8006930 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006928:	6938      	ldr	r0, [r7, #16]
 800692a:	f7ff fef5 	bl	8006718 <LL_EXTI_ClearFlag_32_63>
 800692e:	e002      	b.n	8006936 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006930:	6938      	ldr	r0, [r7, #16]
 8006932:	f7ff fee1 	bl	80066f8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d011      	beq.n	8006966 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a34      	ldr	r2, [pc, #208]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_COMP_Init+0x21e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a32      	ldr	r2, [pc, #200]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d103      	bne.n	800695e <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006956:	6938      	ldr	r0, [r7, #16]
 8006958:	f7ff fdfc 	bl	8006554 <LL_EXTI_EnableEvent_32_63>
 800695c:	e014      	b.n	8006988 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800695e:	6938      	ldr	r0, [r7, #16]
 8006960:	f7ff fde6 	bl	8006530 <LL_EXTI_EnableEvent_0_31>
 8006964:	e010      	b.n	8006988 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2b      	ldr	r2, [pc, #172]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_COMP_Init+0x242>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a29      	ldr	r2, [pc, #164]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d103      	bne.n	8006982 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f7ff fe10 	bl	80065a0 <LL_EXTI_DisableEvent_32_63>
 8006980:	e002      	b.n	8006988 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006982:	6938      	ldr	r0, [r7, #16]
 8006984:	f7ff fdf8 	bl	8006578 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d011      	beq.n	80069b8 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <HAL_COMP_Init+0x270>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80069a8:	6938      	ldr	r0, [r7, #16]
 80069aa:	f7ff fd87 	bl	80064bc <LL_EXTI_EnableIT_32_63>
 80069ae:	e04b      	b.n	8006a48 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80069b0:	6938      	ldr	r0, [r7, #16]
 80069b2:	f7ff fd71 	bl	8006498 <LL_EXTI_EnableIT_0_31>
 80069b6:	e047      	b.n	8006a48 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_COMP_Init+0x294>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d103      	bne.n	80069d4 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80069cc:	6938      	ldr	r0, [r7, #16]
 80069ce:	f7ff fd9b 	bl	8006508 <LL_EXTI_DisableIT_32_63>
 80069d2:	e039      	b.n	8006a48 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80069d4:	6938      	ldr	r0, [r7, #16]
 80069d6:	f7ff fd83 	bl	80064e0 <LL_EXTI_DisableIT_0_31>
 80069da:	e035      	b.n	8006a48 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0d      	ldr	r2, [pc, #52]	; (8006a18 <HAL_COMP_Init+0x2e0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <HAL_COMP_Init+0x2b8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <HAL_COMP_Init+0x2e4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d117      	bne.n	8006a20 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80069f0:	6938      	ldr	r0, [r7, #16]
 80069f2:	f7ff fdd5 	bl	80065a0 <LL_EXTI_DisableEvent_32_63>
 80069f6:	e016      	b.n	8006a26 <HAL_COMP_Init+0x2ee>
 80069f8:	ff007e0f 	.word	0xff007e0f
 80069fc:	20000000 	.word	0x20000000
 8006a00:	053e2d63 	.word	0x053e2d63
 8006a04:	40010200 	.word	0x40010200
 8006a08:	40010204 	.word	0x40010204
 8006a0c:	40010208 	.word	0x40010208
 8006a10:	4001020c 	.word	0x4001020c
 8006a14:	40010210 	.word	0x40010210
 8006a18:	40010214 	.word	0x40010214
 8006a1c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006a20:	6938      	ldr	r0, [r7, #16]
 8006a22:	f7ff fda9 	bl	8006578 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a0e      	ldr	r2, [pc, #56]	; (8006a64 <HAL_COMP_Init+0x32c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_COMP_Init+0x302>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a0c      	ldr	r2, [pc, #48]	; (8006a68 <HAL_COMP_Init+0x330>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d103      	bne.n	8006a42 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006a3a:	6938      	ldr	r0, [r7, #16]
 8006a3c:	f7ff fd64 	bl	8006508 <LL_EXTI_DisableIT_32_63>
 8006a40:	e002      	b.n	8006a48 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006a42:	6938      	ldr	r0, [r7, #16]
 8006a44:	f7ff fd4c 	bl	80064e0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7f5b      	ldrb	r3, [r3, #29]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40010214 	.word	0x40010214
 8006a68:	40010218 	.word	0x40010218

08006a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a7c:	4b0c      	ldr	r3, [pc, #48]	; (8006ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a9e:	4a04      	ldr	r2, [pc, #16]	; (8006ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	60d3      	str	r3, [r2, #12]
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	e000ed00 	.word	0xe000ed00

08006ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ab8:	4b04      	ldr	r3, [pc, #16]	; (8006acc <__NVIC_GetPriorityGrouping+0x18>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	f003 0307 	and.w	r3, r3, #7
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	e000ed00 	.word	0xe000ed00

08006ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	db0b      	blt.n	8006afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	f003 021f 	and.w	r2, r3, #31
 8006ae8:	4907      	ldr	r1, [pc, #28]	; (8006b08 <__NVIC_EnableIRQ+0x38>)
 8006aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2001      	movs	r0, #1
 8006af2:	fa00 f202 	lsl.w	r2, r0, r2
 8006af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	e000e100 	.word	0xe000e100

08006b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db0a      	blt.n	8006b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	490c      	ldr	r1, [pc, #48]	; (8006b58 <__NVIC_SetPriority+0x4c>)
 8006b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	440b      	add	r3, r1
 8006b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b34:	e00a      	b.n	8006b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	4908      	ldr	r1, [pc, #32]	; (8006b5c <__NVIC_SetPriority+0x50>)
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	3b04      	subs	r3, #4
 8006b44:	0112      	lsls	r2, r2, #4
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	440b      	add	r3, r1
 8006b4a:	761a      	strb	r2, [r3, #24]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	e000e100 	.word	0xe000e100
 8006b5c:	e000ed00 	.word	0xe000ed00

08006b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b089      	sub	sp, #36	; 0x24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f1c3 0307 	rsb	r3, r3, #7
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	bf28      	it	cs
 8006b7e:	2304      	movcs	r3, #4
 8006b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d902      	bls.n	8006b90 <NVIC_EncodePriority+0x30>
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	3b03      	subs	r3, #3
 8006b8e:	e000      	b.n	8006b92 <NVIC_EncodePriority+0x32>
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	43da      	mvns	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb2:	43d9      	mvns	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb8:	4313      	orrs	r3, r2
         );
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3724      	adds	r7, #36	; 0x24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bd8:	d301      	bcc.n	8006bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00f      	b.n	8006bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bde:	4a0a      	ldr	r2, [pc, #40]	; (8006c08 <SysTick_Config+0x40>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006be6:	210f      	movs	r1, #15
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	f7ff ff8e 	bl	8006b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <SysTick_Config+0x40>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bf6:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <SysTick_Config+0x40>)
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	e000e010 	.word	0xe000e010

08006c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff29 	bl	8006a6c <__NVIC_SetPriorityGrouping>
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	4603      	mov	r3, r0
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c30:	f7ff ff40 	bl	8006ab4 <__NVIC_GetPriorityGrouping>
 8006c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	6978      	ldr	r0, [r7, #20]
 8006c3c:	f7ff ff90 	bl	8006b60 <NVIC_EncodePriority>
 8006c40:	4602      	mov	r2, r0
 8006c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff ff5f 	bl	8006b0c <__NVIC_SetPriority>
}
 8006c4e:	bf00      	nop
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff ff33 	bl	8006ad0 <__NVIC_EnableIRQ>
}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff ffa4 	bl	8006bc8 <SysTick_Config>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e014      	b.n	8006cc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	791b      	ldrb	r3, [r3, #4]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d105      	bne.n	8006cb2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fd f9cf 	bl	8004050 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	795b      	ldrb	r3, [r3, #5]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_DAC_ConfigChannel+0x18>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e192      	b.n	800700e <HAL_DAC_ConfigChannel+0x33e>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d174      	bne.n	8006de6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006cfc:	f7fd ff50 	bl	8004ba0 <HAL_GetTick>
 8006d00:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d134      	bne.n	8006d72 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006d08:	e011      	b.n	8006d2e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006d0a:	f7fd ff49 	bl	8004ba0 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d90a      	bls.n	8006d2e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f043 0208 	orr.w	r2, r3, #8
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2203      	movs	r2, #3
 8006d28:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e16f      	b.n	800700e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e6      	bne.n	8006d0a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f7fd ff3b 	bl	8004bb8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8006d4c:	e01e      	b.n	8006d8c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006d4e:	f7fd ff27 	bl	8004ba0 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d90a      	bls.n	8006d72 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f043 0208 	orr.w	r2, r3, #8
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e14d      	b.n	800700e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dbe8      	blt.n	8006d4e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f7fd ff1b 	bl	8004bb8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d8a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006da0:	43db      	mvns	r3, r3
 8006da2:	ea02 0103 	and.w	r1, r2, r3
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	409a      	lsls	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f003 0310 	and.w	r3, r3, #16
 8006dc6:	21ff      	movs	r1, #255	; 0xff
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	ea02 0103 	and.w	r1, r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d11d      	bne.n	8006e2a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	221f      	movs	r2, #31
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e06:	4013      	ands	r3, r2
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2207      	movs	r2, #7
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e42:	4013      	ands	r3, r2
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d102      	bne.n	8006e54 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	623b      	str	r3, [r7, #32]
 8006e52:	e00f      	b.n	8006e74 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d102      	bne.n	8006e62 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	623b      	str	r3, [r7, #32]
 8006e60:	e008      	b.n	8006e74 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	623b      	str	r3, [r7, #32]
 8006e6e:	e001      	b.n	8006e74 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	6a3a      	ldr	r2, [r7, #32]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43db      	mvns	r3, r3
 8006e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e96:	4013      	ands	r3, r2
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d102      	bne.n	8006ea8 <HAL_DAC_ConfigChannel+0x1d8>
 8006ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ea6:	e000      	b.n	8006eaa <HAL_DAC_ConfigChannel+0x1da>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	795b      	ldrb	r3, [r3, #5]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d102      	bne.n	8006ed4 <HAL_DAC_ConfigChannel+0x204>
 8006ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ed2:	e000      	b.n	8006ed6 <HAL_DAC_ConfigChannel+0x206>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d114      	bne.n	8006f16 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006eec:	f003 fa32 	bl	800a354 <HAL_RCC_GetHCLKFreq>
 8006ef0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4a48      	ldr	r2, [pc, #288]	; (8007018 <HAL_DAC_ConfigChannel+0x348>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d904      	bls.n	8006f04 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	e00f      	b.n	8006f24 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4a45      	ldr	r2, [pc, #276]	; (800701c <HAL_DAC_ConfigChannel+0x34c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d90a      	bls.n	8006f22 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
 8006f14:	e006      	b.n	8006f24 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f20:	e000      	b.n	8006f24 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006f22:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f32:	4313      	orrs	r3, r2
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43da      	mvns	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	400a      	ands	r2, r1
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f003 0310 	and.w	r3, r3, #16
 8006f6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	43db      	mvns	r3, r3
 8006f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f76:	4013      	ands	r3, r2
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f98:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	22c0      	movs	r2, #192	; 0xc0
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	43da      	mvns	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	400a      	ands	r2, r1
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	089b      	lsrs	r3, r3, #2
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	ea02 0103 	and.w	r1, r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3728      	adds	r7, #40	; 0x28
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	09896800 	.word	0x09896800
 800701c:	04c4b400 	.word	0x04c4b400

08007020 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e08d      	b.n	800714e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	4b47      	ldr	r3, [pc, #284]	; (8007158 <HAL_DMA_Init+0x138>)
 800703a:	429a      	cmp	r2, r3
 800703c:	d80f      	bhi.n	800705e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	4b45      	ldr	r3, [pc, #276]	; (800715c <HAL_DMA_Init+0x13c>)
 8007046:	4413      	add	r3, r2
 8007048:	4a45      	ldr	r2, [pc, #276]	; (8007160 <HAL_DMA_Init+0x140>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	091b      	lsrs	r3, r3, #4
 8007050:	009a      	lsls	r2, r3, #2
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a42      	ldr	r2, [pc, #264]	; (8007164 <HAL_DMA_Init+0x144>)
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
 800705c:	e00e      	b.n	800707c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	4b40      	ldr	r3, [pc, #256]	; (8007168 <HAL_DMA_Init+0x148>)
 8007066:	4413      	add	r3, r2
 8007068:	4a3d      	ldr	r2, [pc, #244]	; (8007160 <HAL_DMA_Init+0x140>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	091b      	lsrs	r3, r3, #4
 8007070:	009a      	lsls	r2, r3, #2
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a3c      	ldr	r2, [pc, #240]	; (800716c <HAL_DMA_Init+0x14c>)
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80070a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa76 	bl	80075c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070dc:	d102      	bne.n	80070e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80070f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d010      	beq.n	8007124 <HAL_DMA_Init+0x104>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d80c      	bhi.n	8007124 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa96 	bl	800763c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007120:	605a      	str	r2, [r3, #4]
 8007122:	e008      	b.n	8007136 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40020407 	.word	0x40020407
 800715c:	bffdfff8 	.word	0xbffdfff8
 8007160:	cccccccd 	.word	0xcccccccd
 8007164:	40020000 	.word	0x40020000
 8007168:	bffdfbf8 	.word	0xbffdfbf8
 800716c:	40020400 	.word	0x40020400

08007170 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_DMA_Start_IT+0x20>
 800718c:	2302      	movs	r3, #2
 800718e:	e066      	b.n	800725e <HAL_DMA_Start_IT+0xee>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d155      	bne.n	8007250 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f9bb 	bl	8007544 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 020e 	orr.w	r2, r2, #14
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e00f      	b.n	8007208 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0204 	bic.w	r2, r2, #4
 80071f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 020a 	orr.w	r2, r2, #10
 8007206:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007224:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800723c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0201 	orr.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	e005      	b.n	800725c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007258:	2302      	movs	r3, #2
 800725a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d005      	beq.n	800728a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2204      	movs	r2, #4
 8007282:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
 8007288:	e037      	b.n	80072fa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 020e 	bic.w	r2, r2, #14
 8007298:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0201 	bic.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	f003 021f 	and.w	r2, r3, #31
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	2101      	movs	r1, #1
 80072c8:	fa01 f202 	lsl.w	r2, r1, r2
 80072cc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072d6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80072f8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d00d      	beq.n	800734c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2204      	movs	r2, #4
 8007334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
 800734a:	e047      	b.n	80073dc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 020e 	bic.w	r2, r2, #14
 800735a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0201 	bic.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800737a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	f003 021f 	and.w	r2, r3, #31
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2101      	movs	r1, #1
 800738a:	fa01 f202 	lsl.w	r2, r1, r2
 800738e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007398:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00c      	beq.n	80073bc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80073ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
    }
  }
  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2204      	movs	r2, #4
 8007408:	409a      	lsls	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4013      	ands	r3, r2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d026      	beq.n	8007460 <HAL_DMA_IRQHandler+0x7a>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d021      	beq.n	8007460 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0204 	bic.w	r2, r2, #4
 8007438:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	f003 021f 	and.w	r2, r3, #31
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	2104      	movs	r1, #4
 8007448:	fa01 f202 	lsl.w	r2, r1, r2
 800744c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	2b00      	cmp	r3, #0
 8007454:	d071      	beq.n	800753a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800745e:	e06c      	b.n	800753a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2202      	movs	r2, #2
 800746a:	409a      	lsls	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d02e      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d029      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10b      	bne.n	80074a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 020a 	bic.w	r2, r2, #10
 800749a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a8:	f003 021f 	and.w	r2, r3, #31
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	2102      	movs	r1, #2
 80074b2:	fa01 f202 	lsl.w	r2, r1, r2
 80074b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d038      	beq.n	800753a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80074d0:	e033      	b.n	800753a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	2208      	movs	r2, #8
 80074dc:	409a      	lsls	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d02a      	beq.n	800753c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d025      	beq.n	800753c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 020e 	bic.w	r2, r2, #14
 80074fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007504:	f003 021f 	and.w	r2, r3, #31
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	2101      	movs	r1, #1
 800750e:	fa01 f202 	lsl.w	r2, r1, r2
 8007512:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800753a:	bf00      	nop
 800753c:	bf00      	nop
}
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800755a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800756c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f003 021f 	and.w	r2, r3, #31
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2101      	movs	r1, #1
 800757c:	fa01 f202 	lsl.w	r2, r1, r2
 8007580:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b10      	cmp	r3, #16
 8007590:	d108      	bne.n	80075a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80075a2:	e007      	b.n	80075b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	60da      	str	r2, [r3, #12]
}
 80075b4:	bf00      	nop
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	4b16      	ldr	r3, [pc, #88]	; (8007628 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d802      	bhi.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80075d4:	4b15      	ldr	r3, [pc, #84]	; (800762c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e001      	b.n	80075de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80075da:	4b15      	ldr	r3, [pc, #84]	; (8007630 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80075dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	3b08      	subs	r3, #8
 80075ea:	4a12      	ldr	r2, [pc, #72]	; (8007634 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80075ec:	fba2 2303 	umull	r2, r3, r2, r3
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	089b      	lsrs	r3, r3, #2
 80075fa:	009a      	lsls	r2, r3, #2
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	4413      	add	r3, r2
 8007600:	461a      	mov	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a0b      	ldr	r2, [pc, #44]	; (8007638 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800760a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	2201      	movs	r2, #1
 8007614:	409a      	lsls	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	651a      	str	r2, [r3, #80]	; 0x50
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	40020407 	.word	0x40020407
 800762c:	40020800 	.word	0x40020800
 8007630:	40020820 	.word	0x40020820
 8007634:	cccccccd 	.word	0xcccccccd
 8007638:	40020880 	.word	0x40020880

0800763c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4b0b      	ldr	r3, [pc, #44]	; (800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a08      	ldr	r2, [pc, #32]	; (8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800765e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3b01      	subs	r3, #1
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2201      	movs	r2, #1
 800766a:	409a      	lsls	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	1000823f 	.word	0x1000823f
 8007680:	40020940 	.word	0x40020940

08007684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007692:	e15a      	b.n	800794a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	2101      	movs	r1, #1
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	fa01 f303 	lsl.w	r3, r1, r3
 80076a0:	4013      	ands	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 814c 	beq.w	8007944 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d005      	beq.n	80076c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d130      	bne.n	8007726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	2203      	movs	r2, #3
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4013      	ands	r3, r2
 80076da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	fa02 f303 	lsl.w	r3, r2, r3
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076fa:	2201      	movs	r2, #1
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	43db      	mvns	r3, r3
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4013      	ands	r3, r2
 8007708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	091b      	lsrs	r3, r3, #4
 8007710:	f003 0201 	and.w	r2, r3, #1
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	fa02 f303 	lsl.w	r3, r2, r3
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b03      	cmp	r3, #3
 8007730:	d017      	beq.n	8007762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	2203      	movs	r2, #3
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	4013      	ands	r3, r2
 8007748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d123      	bne.n	80077b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	08da      	lsrs	r2, r3, #3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3208      	adds	r2, #8
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	220f      	movs	r2, #15
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	43db      	mvns	r3, r3
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4013      	ands	r3, r2
 8007790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	fa02 f303 	lsl.w	r3, r2, r3
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	08da      	lsrs	r2, r3, #3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3208      	adds	r2, #8
 80077b0:	6939      	ldr	r1, [r7, #16]
 80077b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	2203      	movs	r2, #3
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	43db      	mvns	r3, r3
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4013      	ands	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f003 0203 	and.w	r2, r3, #3
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80a6 	beq.w	8007944 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f8:	4b5b      	ldr	r3, [pc, #364]	; (8007968 <HAL_GPIO_Init+0x2e4>)
 80077fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fc:	4a5a      	ldr	r2, [pc, #360]	; (8007968 <HAL_GPIO_Init+0x2e4>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6613      	str	r3, [r2, #96]	; 0x60
 8007804:	4b58      	ldr	r3, [pc, #352]	; (8007968 <HAL_GPIO_Init+0x2e4>)
 8007806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007810:	4a56      	ldr	r2, [pc, #344]	; (800796c <HAL_GPIO_Init+0x2e8>)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	089b      	lsrs	r3, r3, #2
 8007816:	3302      	adds	r3, #2
 8007818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800781c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	220f      	movs	r2, #15
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	43db      	mvns	r3, r3
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4013      	ands	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800783a:	d01f      	beq.n	800787c <HAL_GPIO_Init+0x1f8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a4c      	ldr	r2, [pc, #304]	; (8007970 <HAL_GPIO_Init+0x2ec>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d019      	beq.n	8007878 <HAL_GPIO_Init+0x1f4>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a4b      	ldr	r2, [pc, #300]	; (8007974 <HAL_GPIO_Init+0x2f0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d013      	beq.n	8007874 <HAL_GPIO_Init+0x1f0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a4a      	ldr	r2, [pc, #296]	; (8007978 <HAL_GPIO_Init+0x2f4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00d      	beq.n	8007870 <HAL_GPIO_Init+0x1ec>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a49      	ldr	r2, [pc, #292]	; (800797c <HAL_GPIO_Init+0x2f8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d007      	beq.n	800786c <HAL_GPIO_Init+0x1e8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a48      	ldr	r2, [pc, #288]	; (8007980 <HAL_GPIO_Init+0x2fc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d101      	bne.n	8007868 <HAL_GPIO_Init+0x1e4>
 8007864:	2305      	movs	r3, #5
 8007866:	e00a      	b.n	800787e <HAL_GPIO_Init+0x1fa>
 8007868:	2306      	movs	r3, #6
 800786a:	e008      	b.n	800787e <HAL_GPIO_Init+0x1fa>
 800786c:	2304      	movs	r3, #4
 800786e:	e006      	b.n	800787e <HAL_GPIO_Init+0x1fa>
 8007870:	2303      	movs	r3, #3
 8007872:	e004      	b.n	800787e <HAL_GPIO_Init+0x1fa>
 8007874:	2302      	movs	r3, #2
 8007876:	e002      	b.n	800787e <HAL_GPIO_Init+0x1fa>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <HAL_GPIO_Init+0x1fa>
 800787c:	2300      	movs	r3, #0
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	f002 0203 	and.w	r2, r2, #3
 8007884:	0092      	lsls	r2, r2, #2
 8007886:	4093      	lsls	r3, r2
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800788e:	4937      	ldr	r1, [pc, #220]	; (800796c <HAL_GPIO_Init+0x2e8>)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	089b      	lsrs	r3, r3, #2
 8007894:	3302      	adds	r3, #2
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800789c:	4b39      	ldr	r3, [pc, #228]	; (8007984 <HAL_GPIO_Init+0x300>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	43db      	mvns	r3, r3
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4013      	ands	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078c0:	4a30      	ldr	r2, [pc, #192]	; (8007984 <HAL_GPIO_Init+0x300>)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80078c6:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <HAL_GPIO_Init+0x300>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	43db      	mvns	r3, r3
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4013      	ands	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078ea:	4a26      	ldr	r2, [pc, #152]	; (8007984 <HAL_GPIO_Init+0x300>)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80078f0:	4b24      	ldr	r3, [pc, #144]	; (8007984 <HAL_GPIO_Init+0x300>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	43db      	mvns	r3, r3
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4013      	ands	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007914:	4a1b      	ldr	r2, [pc, #108]	; (8007984 <HAL_GPIO_Init+0x300>)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800791a:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <HAL_GPIO_Init+0x300>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	43db      	mvns	r3, r3
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4013      	ands	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800793e:	4a11      	ldr	r2, [pc, #68]	; (8007984 <HAL_GPIO_Init+0x300>)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	3301      	adds	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f ae9d 	bne.w	8007694 <HAL_GPIO_Init+0x10>
  }
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	40021000 	.word	0x40021000
 800796c:	40010000 	.word	0x40010000
 8007970:	48000400 	.word	0x48000400
 8007974:	48000800 	.word	0x48000800
 8007978:	48000c00 	.word	0x48000c00
 800797c:	48001000 	.word	0x48001000
 8007980:	48001400 	.word	0x48001400
 8007984:	40010400 	.word	0x40010400

08007988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	807b      	strh	r3, [r7, #2]
 8007994:	4613      	mov	r3, r2
 8007996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007998:	787b      	ldrb	r3, [r7, #1]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800799e:	887a      	ldrh	r2, [r7, #2]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079a4:	e002      	b.n	80079ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079a6:	887a      	ldrh	r2, [r7, #2]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4013      	ands	r3, r2
 80079d0:	041a      	lsls	r2, r3, #16
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	43d9      	mvns	r1, r3
 80079d6:	887b      	ldrh	r3, [r7, #2]
 80079d8:	400b      	ands	r3, r1
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	619a      	str	r2, [r3, #24]
}
 80079e0:	bf00      	nop
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e0bb      	b.n	8007b7a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	d101      	bne.n	8007a12 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e0b3      	b.n	8007b7a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d101      	bne.n	8007a22 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e0ab      	b.n	8007b7a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a22:	4b58      	ldr	r3, [pc, #352]	; (8007b84 <HAL_OPAMP_Init+0x198>)
 8007a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a26:	4a57      	ldr	r2, [pc, #348]	; (8007b84 <HAL_OPAMP_Init+0x198>)
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8007a2e:	4b55      	ldr	r3, [pc, #340]	; (8007b84 <HAL_OPAMP_Init+0x198>)
 8007a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	60bb      	str	r3, [r7, #8]
 8007a38:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d103      	bne.n	8007a4e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fc fb5a 	bl	8004108 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d003      	beq.n	8007a64 <HAL_OPAMP_Init+0x78>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	2b60      	cmp	r3, #96	; 0x60
 8007a62:	d133      	bne.n	8007acc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f023 0110 	bic.w	r1, r3, #16
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4b41      	ldr	r3, [pc, #260]	; (8007b88 <HAL_OPAMP_Init+0x19c>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6851      	ldr	r1, [r2, #4]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6892      	ldr	r2, [r2, #8]
 8007a8c:	4311      	orrs	r1, r2
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6912      	ldr	r2, [r2, #16]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	7d09      	ldrb	r1, [r1, #20]
 8007a98:	2901      	cmp	r1, #1
 8007a9a:	d102      	bne.n	8007aa2 <HAL_OPAMP_Init+0xb6>
 8007a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aa0:	e000      	b.n	8007aa4 <HAL_OPAMP_Init+0xb8>
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4311      	orrs	r1, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007aaa:	4311      	orrs	r1, r2
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007ab0:	4311      	orrs	r1, r2
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ab6:	04d2      	lsls	r2, r2, #19
 8007ab8:	4311      	orrs	r1, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007abe:	0612      	lsls	r2, r2, #24
 8007ac0:	4311      	orrs	r1, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e035      	b.n	8007b38 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f023 0110 	bic.w	r1, r3, #16
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	4b27      	ldr	r3, [pc, #156]	; (8007b88 <HAL_OPAMP_Init+0x19c>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6851      	ldr	r1, [r2, #4]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6892      	ldr	r2, [r2, #8]
 8007af4:	4311      	orrs	r1, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68d2      	ldr	r2, [r2, #12]
 8007afa:	4311      	orrs	r1, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6912      	ldr	r2, [r2, #16]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	7d09      	ldrb	r1, [r1, #20]
 8007b06:	2901      	cmp	r1, #1
 8007b08:	d102      	bne.n	8007b10 <HAL_OPAMP_Init+0x124>
 8007b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b0e:	e000      	b.n	8007b12 <HAL_OPAMP_Init+0x126>
 8007b10:	2100      	movs	r1, #0
 8007b12:	4311      	orrs	r1, r2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b18:	4311      	orrs	r1, r2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007b1e:	4311      	orrs	r1, r2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b24:	04d2      	lsls	r2, r2, #19
 8007b26:	4311      	orrs	r1, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b2c:	0612      	lsls	r2, r2, #24
 8007b2e:	4311      	orrs	r1, r2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	430b      	orrs	r3, r1
 8007b36:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	db10      	blt.n	8007b64 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699a      	ldr	r2, [r3, #24]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40021000 	.word	0x40021000
 8007b88:	e0003e11 	.word	0xe0003e11

08007b8c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	e01d      	b.n	8007be0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b05      	cmp	r3, #5
 8007bae:	d102      	bne.n	8007bb6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
 8007bb4:	e014      	b.n	8007be0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d10c      	bne.n	8007bdc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0201 	orr.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007bda:	e001      	b.n	8007be0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
 8007c04:	e113      	b.n	8007e2e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d102      	bne.n	8007c18 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	75fb      	strb	r3, [r7, #23]
 8007c16:	e10a      	b.n	8007e2e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	f040 8102 	bne.w	8007e2a <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0202 	orr.w	r2, r2, #2
 8007c34:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0210 	orr.w	r2, r2, #16
 8007c44:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c54:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8007c64:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0201 	orr.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 8007c76:	2310      	movs	r3, #16
 8007c78:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 8007c7e:	e020      	b.n	8007cc2 <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	061a      	lsls	r2, r3, #24
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8007c96:	2002      	movs	r0, #2
 8007c98:	f7fc ff8e 	bl	8004bb8 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d004      	beq.n	8007cb4 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4413      	add	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	e003      	b.n	8007cbc <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	085b      	lsrs	r3, r3, #1
 8007cc0:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1db      	bne.n	8007c80 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	061a      	lsls	r2, r3, #24
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8007cde:	2002      	movs	r0, #2
 8007ce0:	f7fc ff6a 	bl	8004bb8 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00d      	beq.n	8007d0e <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	061a      	lsls	r2, r3, #24
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d20:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 8007d22:	2310      	movs	r3, #16
 8007d24:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 8007d26:	2308      	movs	r3, #8
 8007d28:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 8007d2a:	e020      	b.n	8007d6e <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	04da      	lsls	r2, r3, #19
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8007d42:	2002      	movs	r0, #2
 8007d44:	f7fc ff38 	bl	8004bb8 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d004      	beq.n	8007d60 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e003      	b.n	8007d68 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	085b      	lsrs	r3, r3, #1
 8007d6c:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1db      	bne.n	8007d2c <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	04da      	lsls	r2, r3, #19
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8007d8a:	2002      	movs	r0, #2
 8007d8c:	f7fc ff14 	bl	8004bb8 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00d      	beq.n	8007dba <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	04da      	lsls	r2, r3, #19
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dc8:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0202 	bic.w	r2, r2, #2
 8007de8:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2210      	movs	r2, #16
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	04da      	lsls	r2, r3, #19
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	061a      	lsls	r2, r3, #24
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	e001      	b.n	8007e2e <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3a:	b08b      	sub	sp, #44	; 0x2c
 8007e3c:	af06      	add	r7, sp, #24
 8007e3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e0d7      	b.n	8007ffa <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f009 fde4 	bl	8011a2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2203      	movs	r2, #3
 8007e68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f005 fca0 	bl	800d7b6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	e04c      	b.n	8007f16 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	440b      	add	r3, r1
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	2201      	movs	r2, #1
 8007e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	440b      	add	r3, r1
 8007ea2:	7bfa      	ldrb	r2, [r7, #15]
 8007ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007ea6:	7bfa      	ldrb	r2, [r7, #15]
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	b298      	uxth	r0, r3
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3336      	adds	r3, #54	; 0x36
 8007eba:	4602      	mov	r2, r0
 8007ebc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	440b      	add	r3, r1
 8007ece:	3303      	adds	r3, #3
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ed4:	7bfa      	ldrb	r2, [r7, #15]
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	440b      	add	r3, r1
 8007ee2:	3338      	adds	r3, #56	; 0x38
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007ee8:	7bfa      	ldrb	r2, [r7, #15]
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	440b      	add	r3, r1
 8007ef6:	333c      	adds	r3, #60	; 0x3c
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007efc:	7bfa      	ldrb	r2, [r7, #15]
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	440b      	add	r3, r1
 8007f0a:	3340      	adds	r3, #64	; 0x40
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	3301      	adds	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
 8007f16:	7bfa      	ldrb	r2, [r7, #15]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3ad      	bcc.n	8007e7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
 8007f24:	e044      	b.n	8007fb0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007f26:	7bfa      	ldrb	r2, [r7, #15]
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	440b      	add	r3, r1
 8007f34:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f3c:	7bfa      	ldrb	r2, [r7, #15]
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	4613      	mov	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	440b      	add	r3, r1
 8007f4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007f4e:	7bfa      	ldrb	r2, [r7, #15]
 8007f50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f52:	7bfa      	ldrb	r2, [r7, #15]
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	440b      	add	r3, r1
 8007f60:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007f68:	7bfa      	ldrb	r2, [r7, #15]
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	440b      	add	r3, r1
 8007f76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f7e:	7bfa      	ldrb	r2, [r7, #15]
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	440b      	add	r3, r1
 8007f8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007f94:	7bfa      	ldrb	r2, [r7, #15]
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	440b      	add	r3, r1
 8007fa2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	3301      	adds	r3, #1
 8007fae:	73fb      	strb	r3, [r7, #15]
 8007fb0:	7bfa      	ldrb	r2, [r7, #15]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d3b5      	bcc.n	8007f26 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	687e      	ldr	r6, [r7, #4]
 8007fc2:	466d      	mov	r5, sp
 8007fc4:	f106 0410 	add.w	r4, r6, #16
 8007fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	1d33      	adds	r3, r6, #4
 8007fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fd4:	6838      	ldr	r0, [r7, #0]
 8007fd6:	f005 fc09 	bl	800d7ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d102      	bne.n	8007ff8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 fc29 	bl	800984a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008002 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_PCD_Start+0x16>
 8008014:	2302      	movs	r3, #2
 8008016:	e012      	b.n	800803e <HAL_PCD_Start+0x3c>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f005 fbaf 	bl	800d788 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f007 fdc8 	bl	800fbc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f007 fdcd 	bl	800fbf2 <USB_ReadInterrupts>
 8008058:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fb26 	bl	80086b6 <PCD_EP_ISR_Handler>

    return;
 800806a:	e110      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008072:	2b00      	cmp	r3, #0
 8008074:	d013      	beq.n	800809e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008088:	b292      	uxth	r2, r2
 800808a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f009 fd5d 	bl	8011b4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8fc 	bl	8008294 <HAL_PCD_SetAddress>

    return;
 800809c:	e0f7      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00c      	beq.n	80080c2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080ba:	b292      	uxth	r2, r2
 80080bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80080c0:	e0e5      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00c      	beq.n	80080e6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080de:	b292      	uxth	r2, r2
 80080e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80080e4:	e0d3      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d034      	beq.n	800815a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0204 	bic.w	r2, r2, #4
 8008102:	b292      	uxth	r2, r2
 8008104:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008110:	b29a      	uxth	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0208 	bic.w	r2, r2, #8
 800811a:	b292      	uxth	r2, r2
 800811c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008126:	2b01      	cmp	r3, #1
 8008128:	d107      	bne.n	800813a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008132:	2100      	movs	r1, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f009 feff 	bl	8011f38 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f009 fd40 	bl	8011bc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008152:	b292      	uxth	r2, r2
 8008154:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008158:	e099      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008160:	2b00      	cmp	r3, #0
 8008162:	d027      	beq.n	80081b4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800816c:	b29a      	uxth	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0208 	orr.w	r2, r2, #8
 8008176:	b292      	uxth	r2, r2
 8008178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008184:	b29a      	uxth	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800818e:	b292      	uxth	r2, r2
 8008190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800819c:	b29a      	uxth	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0204 	orr.w	r2, r2, #4
 80081a6:	b292      	uxth	r2, r2
 80081a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f009 fced 	bl	8011b8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80081b2:	e06c      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d040      	beq.n	8008240 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081d0:	b292      	uxth	r2, r2
 80081d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d12b      	bne.n	8008238 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0204 	orr.w	r2, r2, #4
 80081f2:	b292      	uxth	r2, r2
 80081f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0208 	orr.w	r2, r2, #8
 800820a:	b292      	uxth	r2, r2
 800820c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008220:	b29b      	uxth	r3, r3
 8008222:	089b      	lsrs	r3, r3, #2
 8008224:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800822e:	2101      	movs	r1, #1
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f009 fe81 	bl	8011f38 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008236:	e02a      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f009 fca7 	bl	8011b8c <HAL_PCD_SuspendCallback>
    return;
 800823e:	e026      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00f      	beq.n	800826a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800825c:	b292      	uxth	r2, r2
 800825e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f009 fc65 	bl	8011b32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008268:	e011      	b.n	800828e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00c      	beq.n	800828e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008286:	b292      	uxth	r2, r2
 8008288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800828c:	bf00      	nop
  }
}
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_PCD_SetAddress+0x1a>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e013      	b.n	80082d6 <HAL_PCD_SetAddress+0x42>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	78fa      	ldrb	r2, [r7, #3]
 80082ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f007 fc68 	bl	800fb9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	461a      	mov	r2, r3
 80082ec:	4603      	mov	r3, r0
 80082ee:	70fb      	strb	r3, [r7, #3]
 80082f0:	460b      	mov	r3, r1
 80082f2:	803b      	strh	r3, [r7, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008300:	2b00      	cmp	r3, #0
 8008302:	da0e      	bge.n	8008322 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	4413      	add	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2201      	movs	r2, #1
 800831e:	705a      	strb	r2, [r3, #1]
 8008320:	e00e      	b.n	8008340 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	f003 0207 	and.w	r2, r3, #7
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	b2da      	uxtb	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800834c:	883a      	ldrh	r2, [r7, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	78ba      	ldrb	r2, [r7, #2]
 8008356:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800836a:	78bb      	ldrb	r3, [r7, #2]
 800836c:	2b02      	cmp	r3, #2
 800836e:	d102      	bne.n	8008376 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_PCD_EP_Open+0xa6>
 8008380:	2302      	movs	r3, #2
 8008382:	e00e      	b.n	80083a2 <HAL_PCD_EP_Open+0xc4>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68f9      	ldr	r1, [r7, #12]
 8008392:	4618      	mov	r0, r3
 8008394:	f005 fa4c 	bl	800d830 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da0e      	bge.n	80083dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	f003 0307 	and.w	r3, r3, #7
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2201      	movs	r2, #1
 80083d8:	705a      	strb	r2, [r3, #1]
 80083da:	e00e      	b.n	80083fa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	f003 0207 	and.w	r2, r3, #7
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	4413      	add	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	f003 0307 	and.w	r3, r3, #7
 8008400:	b2da      	uxtb	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800840c:	2b01      	cmp	r3, #1
 800840e:	d101      	bne.n	8008414 <HAL_PCD_EP_Close+0x6a>
 8008410:	2302      	movs	r3, #2
 8008412:	e00e      	b.n	8008432 <HAL_PCD_EP_Close+0x88>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68f9      	ldr	r1, [r7, #12]
 8008422:	4618      	mov	r0, r3
 8008424:	f005 fd98 	bl	800df58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	460b      	mov	r3, r1
 8008448:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800844a:	7afb      	ldrb	r3, [r7, #11]
 800844c:	f003 0207 	and.w	r2, r3, #7
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2200      	movs	r2, #0
 8008472:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2200      	movs	r2, #0
 8008478:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	b2da      	uxtb	r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6979      	ldr	r1, [r7, #20]
 8008496:	4618      	mov	r0, r3
 8008498:	f005 ff4b 	bl	800e332 <USB_EPStartXfer>
 800849c:	e005      	b.n	80084aa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6979      	ldr	r1, [r7, #20]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f005 ff44 	bl	800e332 <USB_EPStartXfer>
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	f003 0207 	and.w	r2, r3, #7
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	440b      	add	r3, r1
 80084d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80084d6:	681b      	ldr	r3, [r3, #0]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	607a      	str	r2, [r7, #4]
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	460b      	mov	r3, r1
 80084f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2201      	movs	r2, #1
 800852e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008530:	7afb      	ldrb	r3, [r7, #11]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	b2da      	uxtb	r2, r3
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800853c:	7afb      	ldrb	r3, [r7, #11]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	2b00      	cmp	r3, #0
 8008544:	d106      	bne.n	8008554 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6979      	ldr	r1, [r7, #20]
 800854c:	4618      	mov	r0, r3
 800854e:	f005 fef0 	bl	800e332 <USB_EPStartXfer>
 8008552:	e005      	b.n	8008560 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6979      	ldr	r1, [r7, #20]
 800855a:	4618      	mov	r0, r3
 800855c:	f005 fee9 	bl	800e332 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	f003 0207 	and.w	r2, r3, #7
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d901      	bls.n	8008588 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e03e      	b.n	8008606 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800858c:	2b00      	cmp	r3, #0
 800858e:	da0e      	bge.n	80085ae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4413      	add	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	705a      	strb	r2, [r3, #1]
 80085ac:	e00c      	b.n	80085c8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	4413      	add	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <HAL_PCD_EP_SetStall+0x7e>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e00e      	b.n	8008606 <HAL_PCD_EP_SetStall+0x9c>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f007 f9d1 	bl	800f99e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	f003 020f 	and.w	r2, r3, #15
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d901      	bls.n	800862c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e040      	b.n	80086ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800862c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da0e      	bge.n	8008652 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	705a      	strb	r2, [r3, #1]
 8008650:	e00e      	b.n	8008670 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 0207 	and.w	r2, r3, #7
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	4413      	add	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	b2da      	uxtb	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_PCD_EP_ClrStall+0x82>
 800868c:	2302      	movs	r3, #2
 800868e:	e00e      	b.n	80086ae <HAL_PCD_EP_ClrStall+0xa0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68f9      	ldr	r1, [r7, #12]
 800869e:	4618      	mov	r0, r3
 80086a0:	f007 f9ce 	bl	800fa40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b096      	sub	sp, #88	; 0x58
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80086be:	e39c      	b.n	8008dfa <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80086cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80086da:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 815e 	bne.w	80089a0 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80086e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d150      	bne.n	8008792 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80086fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008700:	81fb      	strh	r3, [r7, #14]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	89fb      	ldrh	r3, [r7, #14]
 8008708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800870c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008710:	b29b      	uxth	r3, r3
 8008712:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3328      	adds	r3, #40	; 0x28
 8008718:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008722:	b29b      	uxth	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	4413      	add	r3, r2
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	4413      	add	r3, r2
 8008734:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800873e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008740:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	441a      	add	r2, r3
 800874c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008750:	2100      	movs	r1, #0
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f009 f9d3 	bl	8011afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 834a 	beq.w	8008dfa <PCD_EP_ISR_Handler+0x744>
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f040 8345 	bne.w	8008dfa <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800877c:	b2da      	uxtb	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	b292      	uxth	r2, r2
 8008784:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008790:	e333      	b.n	8008dfa <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008798:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80087a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80087a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d032      	beq.n	8008816 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	4413      	add	r3, r2
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	4413      	add	r3, r2
 80087ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80087d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80087e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80087e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f007 fa53 	bl	800fc96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80087fc:	4013      	ands	r3, r2
 80087fe:	823b      	strh	r3, [r7, #16]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	8a3a      	ldrh	r2, [r7, #16]
 8008806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800880a:	b292      	uxth	r2, r2
 800880c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f009 f948 	bl	8011aa4 <HAL_PCD_SetupStageCallback>
 8008814:	e2f1      	b.n	8008dfa <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008816:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800881a:	2b00      	cmp	r3, #0
 800881c:	f280 82ed 	bge.w	8008dfa <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	b29a      	uxth	r2, r3
 8008828:	f640 738f 	movw	r3, #3983	; 0xf8f
 800882c:	4013      	ands	r3, r2
 800882e:	83fb      	strh	r3, [r7, #30]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	8bfa      	ldrh	r2, [r7, #30]
 8008836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800883a:	b292      	uxth	r2, r2
 800883c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008846:	b29b      	uxth	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	4413      	add	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	4413      	add	r3, r2
 8008858:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d019      	beq.n	80088a2 <PCD_EP_ISR_Handler+0x1ec>
 800886e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d015      	beq.n	80088a2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887c:	6959      	ldr	r1, [r3, #20]
 800887e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008880:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008884:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008886:	b29b      	uxth	r3, r3
 8008888:	f007 fa05 	bl	800fc96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800888c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	441a      	add	r2, r3
 8008896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008898:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800889a:	2100      	movs	r1, #0
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f009 f913 	bl	8011ac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f040 82a3 	bne.w	8008dfa <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	61bb      	str	r3, [r7, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	4413      	add	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b3e      	cmp	r3, #62	; 0x3e
 80088da:	d918      	bls.n	800890e <PCD_EP_ISR_Handler+0x258>
 80088dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	647b      	str	r3, [r7, #68]	; 0x44
 80088e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <PCD_EP_ISR_Handler+0x240>
 80088f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f2:	3b01      	subs	r3, #1
 80088f4:	647b      	str	r3, [r7, #68]	; 0x44
 80088f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	029b      	lsls	r3, r3, #10
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008906:	b29a      	uxth	r2, r3
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	801a      	strh	r2, [r3, #0]
 800890c:	e029      	b.n	8008962 <PCD_EP_ISR_Handler+0x2ac>
 800890e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d112      	bne.n	800893c <PCD_EP_ISR_Handler+0x286>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008920:	b29a      	uxth	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008934:	b29a      	uxth	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e012      	b.n	8008962 <PCD_EP_ISR_Handler+0x2ac>
 800893c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	647b      	str	r3, [r7, #68]	; 0x44
 8008944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <PCD_EP_ISR_Handler+0x2a0>
 8008950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008952:	3301      	adds	r3, #1
 8008954:	647b      	str	r3, [r7, #68]	; 0x44
 8008956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008958:	b29b      	uxth	r3, r3
 800895a:	029b      	lsls	r3, r3, #10
 800895c:	b29a      	uxth	r2, r3
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800896e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008972:	827b      	strh	r3, [r7, #18]
 8008974:	8a7b      	ldrh	r3, [r7, #18]
 8008976:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800897a:	827b      	strh	r3, [r7, #18]
 800897c:	8a7b      	ldrh	r3, [r7, #18]
 800897e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008982:	827b      	strh	r3, [r7, #18]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	8a7b      	ldrh	r3, [r7, #18]
 800898a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800898e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899a:	b29b      	uxth	r3, r3
 800899c:	8013      	strh	r3, [r2, #0]
 800899e:	e22c      	b.n	8008dfa <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80089b4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f280 80f6 	bge.w	8008baa <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80089d4:	4013      	ands	r3, r2
 80089d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80089ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089f0:	b292      	uxth	r2, r2
 80089f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80089f4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4413      	add	r3, r2
 8008a08:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0c:	7b1b      	ldrb	r3, [r3, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d123      	bne.n	8008a5a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4413      	add	r3, r2
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6812      	ldr	r2, [r2, #0]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8008a3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 808e 	beq.w	8008b60 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4a:	6959      	ldr	r1, [r3, #20]
 8008a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4e:	88da      	ldrh	r2, [r3, #6]
 8008a50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a54:	f007 f91f 	bl	800fc96 <USB_ReadPMA>
 8008a58:	e082      	b.n	8008b60 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a5c:	78db      	ldrb	r3, [r3, #3]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d10a      	bne.n	8008a78 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008a62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008a66:	461a      	mov	r2, r3
 8008a68:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9d3 	bl	8008e16 <HAL_PCD_EP_DB_Receive>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008a76:	e073      	b.n	8008b60 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	441a      	add	r2, r3
 8008aa4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d022      	beq.n	8008b1c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4413      	add	r3, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6812      	ldr	r2, [r2, #0]
 8008aee:	4413      	add	r3, r2
 8008af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008afa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8008afe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d02c      	beq.n	8008b60 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0c:	6959      	ldr	r1, [r3, #20]
 8008b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b10:	891a      	ldrh	r2, [r3, #8]
 8008b12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b16:	f007 f8be 	bl	800fc96 <USB_ReadPMA>
 8008b1a:	e021      	b.n	8008b60 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	4413      	add	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b40:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8008b44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b52:	6959      	ldr	r1, [r3, #20]
 8008b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b56:	895a      	ldrh	r2, [r3, #10]
 8008b58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b5c:	f007 f89b 	bl	800fc96 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b62:	69da      	ldr	r2, [r3, #28]
 8008b64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b68:	441a      	add	r2, r3
 8008b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b70:	695a      	ldr	r2, [r3, #20]
 8008b72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b76:	441a      	add	r2, r3
 8008b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <PCD_EP_ISR_Handler+0x4da>
 8008b84:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d206      	bcs.n	8008b9e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f008 ff96 	bl	8011ac8 <HAL_PCD_DataOutStageCallback>
 8008b9c:	e005      	b.n	8008baa <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f005 fbc4 	bl	800e332 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008baa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 8121 	beq.w	8008dfa <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8008bb8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	441a      	add	r2, r3
 8008bf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8008c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0a:	78db      	ldrb	r3, [r3, #3]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	f000 80a2 	beq.w	8008d56 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8008c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c14:	2200      	movs	r2, #0
 8008c16:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1a:	7b1b      	ldrb	r3, [r3, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8093 	beq.w	8008d48 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008c22:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d046      	beq.n	8008cbc <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d126      	bne.n	8008c84 <PCD_EP_ISR_Handler+0x5ce>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	4413      	add	r3, r2
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	00da      	lsls	r2, r3, #3
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	4413      	add	r3, r2
 8008c58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c5c:	623b      	str	r3, [r7, #32]
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	801a      	strh	r2, [r3, #0]
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	e061      	b.n	8008d48 <PCD_EP_ISR_Handler+0x692>
 8008c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c86:	785b      	ldrb	r3, [r3, #1]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d15d      	bne.n	8008d48 <PCD_EP_ISR_Handler+0x692>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	4413      	add	r3, r2
 8008ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	00da      	lsls	r2, r3, #3
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	4413      	add	r3, r2
 8008cae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	801a      	strh	r2, [r3, #0]
 8008cba:	e045      	b.n	8008d48 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d126      	bne.n	8008d18 <PCD_EP_ISR_Handler+0x662>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	4413      	add	r3, r2
 8008ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	00da      	lsls	r2, r3, #3
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	4413      	add	r3, r2
 8008cec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	801a      	strh	r2, [r3, #0]
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	801a      	strh	r2, [r3, #0]
 8008d16:	e017      	b.n	8008d48 <PCD_EP_ISR_Handler+0x692>
 8008d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1a:	785b      	ldrb	r3, [r3, #1]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d113      	bne.n	8008d48 <PCD_EP_ISR_Handler+0x692>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2e:	4413      	add	r3, r2
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	00da      	lsls	r2, r3, #3
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2200      	movs	r2, #0
 8008d46:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f008 fed5 	bl	8011afe <HAL_PCD_DataInStageCallback>
 8008d54:	e051      	b.n	8008dfa <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008d56:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d144      	bne.n	8008dec <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	4413      	add	r3, r2
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d907      	bls.n	8008da6 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8008d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d98:	699a      	ldr	r2, [r3, #24]
 8008d9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da2:	619a      	str	r2, [r3, #24]
 8008da4:	e002      	b.n	8008dac <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8008da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da8:	2200      	movs	r2, #0
 8008daa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f008 fe9f 	bl	8011afe <HAL_PCD_DataInStageCallback>
 8008dc0:	e01b      	b.n	8008dfa <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc4:	695a      	ldr	r2, [r3, #20]
 8008dc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008dca:	441a      	add	r2, r3
 8008dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dce:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008dd8:	441a      	add	r2, r3
 8008dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ddc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008de4:	4618      	mov	r0, r3
 8008de6:	f005 faa4 	bl	800e332 <USB_EPStartXfer>
 8008dea:	e006      	b.n	8008dfa <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008dec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008df0:	461a      	mov	r2, r3
 8008df2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f917 	bl	8009028 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	b21b      	sxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f6ff ac5a 	blt.w	80086c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3758      	adds	r7, #88	; 0x58
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b088      	sub	sp, #32
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	4613      	mov	r3, r2
 8008e22:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008e24:	88fb      	ldrh	r3, [r7, #6]
 8008e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d07c      	beq.n	8008f28 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4413      	add	r3, r2
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	4413      	add	r3, r2
 8008e48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	699a      	ldr	r2, [r3, #24]
 8008e58:	8b7b      	ldrh	r3, [r7, #26]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d306      	bcc.n	8008e6c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	8b7b      	ldrh	r3, [r7, #26]
 8008e64:	1ad2      	subs	r2, r2, r3
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	619a      	str	r2, [r3, #24]
 8008e6a:	e002      	b.n	8008e72 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d123      	bne.n	8008ec2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e94:	833b      	strh	r3, [r7, #24]
 8008e96:	8b3b      	ldrh	r3, [r7, #24]
 8008e98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e9c:	833b      	strh	r3, [r7, #24]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	441a      	add	r2, r3
 8008eac:	8b3b      	ldrh	r3, [r7, #24]
 8008eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01f      	beq.n	8008f0c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee6:	82fb      	strh	r3, [r7, #22]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	441a      	add	r2, r3
 8008ef6:	8afb      	ldrh	r3, [r7, #22]
 8008ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008f0c:	8b7b      	ldrh	r3, [r7, #26]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8085 	beq.w	800901e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	6959      	ldr	r1, [r3, #20]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	891a      	ldrh	r2, [r3, #8]
 8008f20:	8b7b      	ldrh	r3, [r7, #26]
 8008f22:	f006 feb8 	bl	800fc96 <USB_ReadPMA>
 8008f26:	e07a      	b.n	800901e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	4413      	add	r3, r2
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	6812      	ldr	r2, [r2, #0]
 8008f40:	4413      	add	r3, r2
 8008f42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	8b7b      	ldrh	r3, [r7, #26]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d306      	bcc.n	8008f66 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	699a      	ldr	r2, [r3, #24]
 8008f5c:	8b7b      	ldrh	r3, [r7, #26]
 8008f5e:	1ad2      	subs	r2, r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	619a      	str	r2, [r3, #24]
 8008f64:	e002      	b.n	8008f6c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d123      	bne.n	8008fbc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8e:	83fb      	strh	r3, [r7, #30]
 8008f90:	8bfb      	ldrh	r3, [r7, #30]
 8008f92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f96:	83fb      	strh	r3, [r7, #30]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	441a      	add	r2, r3
 8008fa6:	8bfb      	ldrh	r3, [r7, #30]
 8008fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d11f      	bne.n	8009006 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe0:	83bb      	strh	r3, [r7, #28]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	441a      	add	r2, r3
 8008ff0:	8bbb      	ldrh	r3, [r7, #28]
 8008ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009002:	b29b      	uxth	r3, r3
 8009004:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009006:	8b7b      	ldrh	r3, [r7, #26]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d008      	beq.n	800901e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	6959      	ldr	r1, [r3, #20]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	895a      	ldrh	r2, [r3, #10]
 8009018:	8b7b      	ldrh	r3, [r7, #26]
 800901a:	f006 fe3c 	bl	800fc96 <USB_ReadPMA>
    }
  }

  return count;
 800901e:	8b7b      	ldrh	r3, [r7, #26]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b0a2      	sub	sp, #136	; 0x88
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 81c5 	beq.w	80093cc <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800904a:	b29b      	uxth	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	4413      	add	r3, r2
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	4413      	add	r3, r2
 800905c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009066:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009072:	429a      	cmp	r2, r3
 8009074:	d907      	bls.n	8009086 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	619a      	str	r2, [r3, #24]
 8009084:	e002      	b.n	800908c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2200      	movs	r2, #0
 800908a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f040 80b9 	bne.w	8009208 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	785b      	ldrb	r3, [r3, #1]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d126      	bne.n	80090ec <HAL_PCD_EP_DB_Transmit+0xc4>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	4413      	add	r3, r2
 80090b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	00da      	lsls	r2, r3, #3
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	4413      	add	r3, r2
 80090c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	e01a      	b.n	8009122 <HAL_PCD_EP_DB_Transmit+0xfa>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d116      	bne.n	8009122 <HAL_PCD_EP_DB_Transmit+0xfa>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	633b      	str	r3, [r7, #48]	; 0x30
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009102:	b29b      	uxth	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	4413      	add	r3, r2
 800910a:	633b      	str	r3, [r7, #48]	; 0x30
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	00da      	lsls	r2, r3, #3
 8009112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009114:	4413      	add	r3, r2
 8009116:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800911a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	2200      	movs	r2, #0
 8009120:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	623b      	str	r3, [r7, #32]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	785b      	ldrb	r3, [r3, #1]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d126      	bne.n	800917e <HAL_PCD_EP_DB_Transmit+0x156>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	61bb      	str	r3, [r7, #24]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800913e:	b29b      	uxth	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	4413      	add	r3, r2
 8009146:	61bb      	str	r3, [r7, #24]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	00da      	lsls	r2, r3, #3
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	4413      	add	r3, r2
 8009152:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009162:	b29a      	uxth	r2, r3
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	801a      	strh	r2, [r3, #0]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	b29b      	uxth	r3, r3
 800916e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009176:	b29a      	uxth	r2, r3
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e017      	b.n	80091ae <HAL_PCD_EP_DB_Transmit+0x186>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d113      	bne.n	80091ae <HAL_PCD_EP_DB_Transmit+0x186>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800918e:	b29b      	uxth	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	4413      	add	r3, r2
 8009196:	623b      	str	r3, [r7, #32]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	00da      	lsls	r2, r3, #3
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	4413      	add	r3, r2
 80091a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2200      	movs	r2, #0
 80091ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f008 fca2 	bl	8011afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 82d2 	beq.w	800976a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e0:	827b      	strh	r3, [r7, #18]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	441a      	add	r2, r3
 80091f0:	8a7b      	ldrh	r3, [r7, #18]
 80091f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009202:	b29b      	uxth	r3, r3
 8009204:	8013      	strh	r3, [r2, #0]
 8009206:	e2b0      	b.n	800976a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d021      	beq.n	8009256 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	b29b      	uxth	r3, r3
 8009224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	441a      	add	r2, r3
 800923e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800924a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800924e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009252:	b29b      	uxth	r3, r3
 8009254:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800925c:	2b01      	cmp	r3, #1
 800925e:	f040 8284 	bne.w	800976a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	695a      	ldr	r2, [r3, #20]
 8009266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800926a:	441a      	add	r2, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	69da      	ldr	r2, [r3, #28]
 8009274:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009278:	441a      	add	r2, r3
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6a1a      	ldr	r2, [r3, #32]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	429a      	cmp	r2, r3
 8009288:	d309      	bcc.n	800929e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6a1a      	ldr	r2, [r3, #32]
 8009294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009296:	1ad2      	subs	r2, r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	621a      	str	r2, [r3, #32]
 800929c:	e015      	b.n	80092ca <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d107      	bne.n	80092b6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80092a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80092aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80092b4:	e009      	b.n	80092ca <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2200      	movs	r2, #0
 80092c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	785b      	ldrb	r3, [r3, #1]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d155      	bne.n	800937e <HAL_PCD_EP_DB_Transmit+0x356>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	461a      	mov	r2, r3
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	4413      	add	r3, r2
 80092e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	00da      	lsls	r2, r3, #3
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	4413      	add	r3, r2
 80092f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092f8:	637b      	str	r3, [r7, #52]	; 0x34
 80092fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fc:	2b3e      	cmp	r3, #62	; 0x3e
 80092fe:	d916      	bls.n	800932e <HAL_PCD_EP_DB_Transmit+0x306>
 8009300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	64bb      	str	r3, [r7, #72]	; 0x48
 8009306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009308:	f003 031f 	and.w	r3, r3, #31
 800930c:	2b00      	cmp	r3, #0
 800930e:	d102      	bne.n	8009316 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8009310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009312:	3b01      	subs	r3, #1
 8009314:	64bb      	str	r3, [r7, #72]	; 0x48
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009318:	b29b      	uxth	r3, r3
 800931a:	029b      	lsls	r3, r3, #10
 800931c:	b29b      	uxth	r3, r3
 800931e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009326:	b29a      	uxth	r2, r3
 8009328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e043      	b.n	80093b6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800932e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009330:	2b00      	cmp	r3, #0
 8009332:	d112      	bne.n	800935a <HAL_PCD_EP_DB_Transmit+0x332>
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800933e:	b29a      	uxth	r2, r3
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	b29b      	uxth	r3, r3
 800934a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009352:	b29a      	uxth	r2, r3
 8009354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009356:	801a      	strh	r2, [r3, #0]
 8009358:	e02d      	b.n	80093b6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800935a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800935c:	085b      	lsrs	r3, r3, #1
 800935e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <HAL_PCD_EP_DB_Transmit+0x348>
 800936a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936c:	3301      	adds	r3, #1
 800936e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009372:	b29b      	uxth	r3, r3
 8009374:	029b      	lsls	r3, r3, #10
 8009376:	b29a      	uxth	r2, r3
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	e01b      	b.n	80093b6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	785b      	ldrb	r3, [r3, #1]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d117      	bne.n	80093b6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	643b      	str	r3, [r7, #64]	; 0x40
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009394:	b29b      	uxth	r3, r3
 8009396:	461a      	mov	r2, r3
 8009398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939a:	4413      	add	r3, r2
 800939c:	643b      	str	r3, [r7, #64]	; 0x40
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	00da      	lsls	r2, r3, #3
 80093a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093a6:	4413      	add	r3, r2
 80093a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	6959      	ldr	r1, [r3, #20]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	891a      	ldrh	r2, [r3, #8]
 80093c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f006 fc24 	bl	800fc12 <USB_WritePMA>
 80093ca:	e1ce      	b.n	800976a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4413      	add	r3, r2
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	4413      	add	r3, r2
 80093e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	699a      	ldr	r2, [r3, #24]
 80093f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d307      	bcc.n	8009410 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	699a      	ldr	r2, [r3, #24]
 8009404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009408:	1ad2      	subs	r2, r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	619a      	str	r2, [r3, #24]
 800940e:	e002      	b.n	8009416 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 80c4 	bne.w	80095a8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	785b      	ldrb	r3, [r3, #1]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d126      	bne.n	8009476 <HAL_PCD_EP_DB_Transmit+0x44e>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	66bb      	str	r3, [r7, #104]	; 0x68
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009436:	b29b      	uxth	r3, r3
 8009438:	461a      	mov	r2, r3
 800943a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800943c:	4413      	add	r3, r2
 800943e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	00da      	lsls	r2, r3, #3
 8009446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009448:	4413      	add	r3, r2
 800944a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800944e:	667b      	str	r3, [r7, #100]	; 0x64
 8009450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800945a:	b29a      	uxth	r2, r3
 800945c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800945e:	801a      	strh	r2, [r3, #0]
 8009460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800946a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946e:	b29a      	uxth	r2, r3
 8009470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009472:	801a      	strh	r2, [r3, #0]
 8009474:	e01a      	b.n	80094ac <HAL_PCD_EP_DB_Transmit+0x484>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d116      	bne.n	80094ac <HAL_PCD_EP_DB_Transmit+0x484>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	673b      	str	r3, [r7, #112]	; 0x70
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800948c:	b29b      	uxth	r3, r3
 800948e:	461a      	mov	r2, r3
 8009490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009492:	4413      	add	r3, r2
 8009494:	673b      	str	r3, [r7, #112]	; 0x70
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	00da      	lsls	r2, r3, #3
 800949c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800949e:	4413      	add	r3, r2
 80094a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a8:	2200      	movs	r2, #0
 80094aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d12f      	bne.n	800951a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	461a      	mov	r2, r3
 80094ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094d2:	4413      	add	r3, r2
 80094d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	00da      	lsls	r2, r3, #3
 80094de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e2:	4413      	add	r3, r2
 80094e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094fe:	801a      	strh	r2, [r3, #0]
 8009500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800950c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009510:	b29a      	uxth	r2, r3
 8009512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009516:	801a      	strh	r2, [r3, #0]
 8009518:	e017      	b.n	800954a <HAL_PCD_EP_DB_Transmit+0x522>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d113      	bne.n	800954a <HAL_PCD_EP_DB_Transmit+0x522>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800952a:	b29b      	uxth	r3, r3
 800952c:	461a      	mov	r2, r3
 800952e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009530:	4413      	add	r3, r2
 8009532:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	00da      	lsls	r2, r3, #3
 800953a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800953c:	4413      	add	r3, r2
 800953e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009542:	67bb      	str	r3, [r7, #120]	; 0x78
 8009544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009546:	2200      	movs	r2, #0
 8009548:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	4619      	mov	r1, r3
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f008 fad4 	bl	8011afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009556:	88fb      	ldrh	r3, [r7, #6]
 8009558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800955c:	2b00      	cmp	r3, #0
 800955e:	f040 8104 	bne.w	800976a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	441a      	add	r2, r3
 800958e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800959a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800959e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	8013      	strh	r3, [r2, #0]
 80095a6:	e0e0      	b.n	800976a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80095a8:	88fb      	ldrh	r3, [r7, #6]
 80095aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d121      	bne.n	80095f6 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	441a      	add	r2, r3
 80095de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80095e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	f040 80b4 	bne.w	800976a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	695a      	ldr	r2, [r3, #20]
 8009606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800960a:	441a      	add	r2, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	69da      	ldr	r2, [r3, #28]
 8009614:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009618:	441a      	add	r2, r3
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6a1a      	ldr	r2, [r3, #32]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	429a      	cmp	r2, r3
 8009628:	d309      	bcc.n	800963e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6a1a      	ldr	r2, [r3, #32]
 8009634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	621a      	str	r2, [r3, #32]
 800963c:	e015      	b.n	800966a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d107      	bne.n	8009656 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8009646:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800964a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009654:	e009      	b.n	800966a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2200      	movs	r2, #0
 8009660:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	663b      	str	r3, [r7, #96]	; 0x60
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	785b      	ldrb	r3, [r3, #1]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d155      	bne.n	8009724 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	65bb      	str	r3, [r7, #88]	; 0x58
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009686:	b29b      	uxth	r3, r3
 8009688:	461a      	mov	r2, r3
 800968a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800968c:	4413      	add	r3, r2
 800968e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	00da      	lsls	r2, r3, #3
 8009696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009698:	4413      	add	r3, r2
 800969a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800969e:	657b      	str	r3, [r7, #84]	; 0x54
 80096a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a2:	2b3e      	cmp	r3, #62	; 0x3e
 80096a4:	d916      	bls.n	80096d4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80096a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	677b      	str	r3, [r7, #116]	; 0x74
 80096ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ae:	f003 031f 	and.w	r3, r3, #31
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <HAL_PCD_EP_DB_Transmit+0x694>
 80096b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096b8:	3b01      	subs	r3, #1
 80096ba:	677b      	str	r3, [r7, #116]	; 0x74
 80096bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096be:	b29b      	uxth	r3, r3
 80096c0:	029b      	lsls	r3, r3, #10
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	e040      	b.n	8009756 <HAL_PCD_EP_DB_Transmit+0x72e>
 80096d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d112      	bne.n	8009700 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80096da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e8:	801a      	strh	r2, [r3, #0]
 80096ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fc:	801a      	strh	r2, [r3, #0]
 80096fe:	e02a      	b.n	8009756 <HAL_PCD_EP_DB_Transmit+0x72e>
 8009700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009702:	085b      	lsrs	r3, r3, #1
 8009704:	677b      	str	r3, [r7, #116]	; 0x74
 8009706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8009710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009712:	3301      	adds	r3, #1
 8009714:	677b      	str	r3, [r7, #116]	; 0x74
 8009716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009718:	b29b      	uxth	r3, r3
 800971a:	029b      	lsls	r3, r3, #10
 800971c:	b29a      	uxth	r2, r3
 800971e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009720:	801a      	strh	r2, [r3, #0]
 8009722:	e018      	b.n	8009756 <HAL_PCD_EP_DB_Transmit+0x72e>
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d114      	bne.n	8009756 <HAL_PCD_EP_DB_Transmit+0x72e>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009734:	b29b      	uxth	r3, r3
 8009736:	461a      	mov	r2, r3
 8009738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800973a:	4413      	add	r3, r2
 800973c:	663b      	str	r3, [r7, #96]	; 0x60
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	00da      	lsls	r2, r3, #3
 8009744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009746:	4413      	add	r3, r2
 8009748:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800974c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800974e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009750:	b29a      	uxth	r2, r3
 8009752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009754:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	6959      	ldr	r1, [r3, #20]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	895a      	ldrh	r2, [r3, #10]
 8009762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009764:	b29b      	uxth	r3, r3
 8009766:	f006 fa54 	bl	800fc12 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009784:	823b      	strh	r3, [r7, #16]
 8009786:	8a3b      	ldrh	r3, [r7, #16]
 8009788:	f083 0310 	eor.w	r3, r3, #16
 800978c:	823b      	strh	r3, [r7, #16]
 800978e:	8a3b      	ldrh	r3, [r7, #16]
 8009790:	f083 0320 	eor.w	r3, r3, #32
 8009794:	823b      	strh	r3, [r7, #16]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	441a      	add	r2, r3
 80097a4:	8a3b      	ldrh	r3, [r7, #16]
 80097a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3788      	adds	r7, #136	; 0x88
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	817b      	strh	r3, [r7, #10]
 80097d2:	4613      	mov	r3, r2
 80097d4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80097d6:	897b      	ldrh	r3, [r7, #10]
 80097d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097dc:	b29b      	uxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097e2:	897b      	ldrh	r3, [r7, #10]
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	4413      	add	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e009      	b.n	800980e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80097fa:	897a      	ldrh	r2, [r7, #10]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800980e:	893b      	ldrh	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d107      	bne.n	8009824 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2200      	movs	r2, #0
 8009818:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	b29a      	uxth	r2, r3
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	80da      	strh	r2, [r3, #6]
 8009822:	e00b      	b.n	800983c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2201      	movs	r2, #1
 8009828:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	b29a      	uxth	r2, r3
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	0c1b      	lsrs	r3, r3, #16
 8009836:	b29a      	uxth	r2, r3
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	371c      	adds	r7, #28
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800984a:	b480      	push	{r7}
 800984c:	b085      	sub	sp, #20
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800986e:	b29b      	uxth	r3, r3
 8009870:	f043 0301 	orr.w	r3, r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009882:	b29b      	uxth	r3, r3
 8009884:	f043 0302 	orr.w	r3, r3, #2
 8009888:	b29a      	uxth	r2, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
	...

080098a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d141      	bne.n	8009932 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80098ae:	4b4b      	ldr	r3, [pc, #300]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ba:	d131      	bne.n	8009920 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098bc:	4b47      	ldr	r3, [pc, #284]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098c2:	4a46      	ldr	r2, [pc, #280]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80098cc:	4b43      	ldr	r3, [pc, #268]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80098d4:	4a41      	ldr	r2, [pc, #260]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80098dc:	4b40      	ldr	r3, [pc, #256]	; (80099e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2232      	movs	r2, #50	; 0x32
 80098e2:	fb02 f303 	mul.w	r3, r2, r3
 80098e6:	4a3f      	ldr	r2, [pc, #252]	; (80099e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80098e8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ec:	0c9b      	lsrs	r3, r3, #18
 80098ee:	3301      	adds	r3, #1
 80098f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80098f2:	e002      	b.n	80098fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80098fa:	4b38      	ldr	r3, [pc, #224]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009906:	d102      	bne.n	800990e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f2      	bne.n	80098f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800990e:	4b33      	ldr	r3, [pc, #204]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800991a:	d158      	bne.n	80099ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e057      	b.n	80099d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009920:	4b2e      	ldr	r3, [pc, #184]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009926:	4a2d      	ldr	r2, [pc, #180]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800992c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009930:	e04d      	b.n	80099ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009938:	d141      	bne.n	80099be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800993a:	4b28      	ldr	r3, [pc, #160]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009946:	d131      	bne.n	80099ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009948:	4b24      	ldr	r3, [pc, #144]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800994a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800994e:	4a23      	ldr	r2, [pc, #140]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009958:	4b20      	ldr	r3, [pc, #128]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009960:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009968:	4b1d      	ldr	r3, [pc, #116]	; (80099e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2232      	movs	r2, #50	; 0x32
 800996e:	fb02 f303 	mul.w	r3, r2, r3
 8009972:	4a1c      	ldr	r2, [pc, #112]	; (80099e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009974:	fba2 2303 	umull	r2, r3, r2, r3
 8009978:	0c9b      	lsrs	r3, r3, #18
 800997a:	3301      	adds	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800997e:	e002      	b.n	8009986 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3b01      	subs	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009986:	4b15      	ldr	r3, [pc, #84]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800998e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009992:	d102      	bne.n	800999a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f2      	bne.n	8009980 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800999a:	4b10      	ldr	r3, [pc, #64]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a6:	d112      	bne.n	80099ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e011      	b.n	80099d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099ac:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099b2:	4a0a      	ldr	r2, [pc, #40]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80099bc:	e007      	b.n	80099ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099c6:	4a05      	ldr	r2, [pc, #20]	; (80099dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	40007000 	.word	0x40007000
 80099e0:	20000000 	.word	0x20000000
 80099e4:	431bde83 	.word	0x431bde83

080099e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e306      	b.n	800a008 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d075      	beq.n	8009af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a06:	4b97      	ldr	r3, [pc, #604]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f003 030c 	and.w	r3, r3, #12
 8009a0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a10:	4b94      	ldr	r3, [pc, #592]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b0c      	cmp	r3, #12
 8009a1e:	d102      	bne.n	8009a26 <HAL_RCC_OscConfig+0x3e>
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d002      	beq.n	8009a2c <HAL_RCC_OscConfig+0x44>
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d10b      	bne.n	8009a44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a2c:	4b8d      	ldr	r3, [pc, #564]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d05b      	beq.n	8009af0 <HAL_RCC_OscConfig+0x108>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d157      	bne.n	8009af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e2e1      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4c:	d106      	bne.n	8009a5c <HAL_RCC_OscConfig+0x74>
 8009a4e:	4b85      	ldr	r3, [pc, #532]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a84      	ldr	r2, [pc, #528]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	e01d      	b.n	8009a98 <HAL_RCC_OscConfig+0xb0>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a64:	d10c      	bne.n	8009a80 <HAL_RCC_OscConfig+0x98>
 8009a66:	4b7f      	ldr	r3, [pc, #508]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a7e      	ldr	r2, [pc, #504]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	4b7c      	ldr	r3, [pc, #496]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a7b      	ldr	r2, [pc, #492]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	e00b      	b.n	8009a98 <HAL_RCC_OscConfig+0xb0>
 8009a80:	4b78      	ldr	r3, [pc, #480]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a77      	ldr	r2, [pc, #476]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	4b75      	ldr	r3, [pc, #468]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a74      	ldr	r2, [pc, #464]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d013      	beq.n	8009ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa0:	f7fb f87e 	bl	8004ba0 <HAL_GetTick>
 8009aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009aa6:	e008      	b.n	8009aba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009aa8:	f7fb f87a 	bl	8004ba0 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	2b64      	cmp	r3, #100	; 0x64
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e2a6      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009aba:	4b6a      	ldr	r3, [pc, #424]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0f0      	beq.n	8009aa8 <HAL_RCC_OscConfig+0xc0>
 8009ac6:	e014      	b.n	8009af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac8:	f7fb f86a 	bl	8004ba0 <HAL_GetTick>
 8009acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ace:	e008      	b.n	8009ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ad0:	f7fb f866 	bl	8004ba0 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b64      	cmp	r3, #100	; 0x64
 8009adc:	d901      	bls.n	8009ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e292      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ae2:	4b60      	ldr	r3, [pc, #384]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1f0      	bne.n	8009ad0 <HAL_RCC_OscConfig+0xe8>
 8009aee:	e000      	b.n	8009af2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d075      	beq.n	8009bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009afe:	4b59      	ldr	r3, [pc, #356]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f003 030c 	and.w	r3, r3, #12
 8009b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b08:	4b56      	ldr	r3, [pc, #344]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f003 0303 	and.w	r3, r3, #3
 8009b10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	2b0c      	cmp	r3, #12
 8009b16:	d102      	bne.n	8009b1e <HAL_RCC_OscConfig+0x136>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d002      	beq.n	8009b24 <HAL_RCC_OscConfig+0x13c>
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d11f      	bne.n	8009b64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b24:	4b4f      	ldr	r3, [pc, #316]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <HAL_RCC_OscConfig+0x154>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e265      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b3c:	4b49      	ldr	r3, [pc, #292]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	061b      	lsls	r3, r3, #24
 8009b4a:	4946      	ldr	r1, [pc, #280]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009b50:	4b45      	ldr	r3, [pc, #276]	; (8009c68 <HAL_RCC_OscConfig+0x280>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fa ffd7 	bl	8004b08 <HAL_InitTick>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d043      	beq.n	8009be8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e251      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d023      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b6c:	4b3d      	ldr	r3, [pc, #244]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a3c      	ldr	r2, [pc, #240]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7fb f812 	bl	8004ba0 <HAL_GetTick>
 8009b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b80:	f7fb f80e 	bl	8004ba0 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e23a      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b92:	4b34      	ldr	r3, [pc, #208]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b9e:	4b31      	ldr	r3, [pc, #196]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	061b      	lsls	r3, r3, #24
 8009bac:	492d      	ldr	r1, [pc, #180]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	604b      	str	r3, [r1, #4]
 8009bb2:	e01a      	b.n	8009bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bb4:	4b2b      	ldr	r3, [pc, #172]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a2a      	ldr	r2, [pc, #168]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc0:	f7fa ffee 	bl	8004ba0 <HAL_GetTick>
 8009bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bc8:	f7fa ffea 	bl	8004ba0 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e216      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009bda:	4b22      	ldr	r3, [pc, #136]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x1e0>
 8009be6:	e000      	b.n	8009bea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009be8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d041      	beq.n	8009c7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01c      	beq.n	8009c38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bfe:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c04:	4a17      	ldr	r2, [pc, #92]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009c06:	f043 0301 	orr.w	r3, r3, #1
 8009c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c0e:	f7fa ffc7 	bl	8004ba0 <HAL_GetTick>
 8009c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c14:	e008      	b.n	8009c28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c16:	f7fa ffc3 	bl	8004ba0 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e1ef      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c28:	4b0e      	ldr	r3, [pc, #56]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0ef      	beq.n	8009c16 <HAL_RCC_OscConfig+0x22e>
 8009c36:	e020      	b.n	8009c7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c38:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c3e:	4a09      	ldr	r2, [pc, #36]	; (8009c64 <HAL_RCC_OscConfig+0x27c>)
 8009c40:	f023 0301 	bic.w	r3, r3, #1
 8009c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c48:	f7fa ffaa 	bl	8004ba0 <HAL_GetTick>
 8009c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c4e:	e00d      	b.n	8009c6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c50:	f7fa ffa6 	bl	8004ba0 <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d906      	bls.n	8009c6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e1d2      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
 8009c62:	bf00      	nop
 8009c64:	40021000 	.word	0x40021000
 8009c68:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c6c:	4b8c      	ldr	r3, [pc, #560]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1ea      	bne.n	8009c50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 80a6 	beq.w	8009dd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009c8c:	4b84      	ldr	r3, [pc, #528]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <HAL_RCC_OscConfig+0x2b4>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e000      	b.n	8009c9e <HAL_RCC_OscConfig+0x2b6>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00d      	beq.n	8009cbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ca2:	4b7f      	ldr	r3, [pc, #508]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca6:	4a7e      	ldr	r2, [pc, #504]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cac:	6593      	str	r3, [r2, #88]	; 0x58
 8009cae:	4b7c      	ldr	r3, [pc, #496]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cbe:	4b79      	ldr	r3, [pc, #484]	; (8009ea4 <HAL_RCC_OscConfig+0x4bc>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d118      	bne.n	8009cfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cca:	4b76      	ldr	r3, [pc, #472]	; (8009ea4 <HAL_RCC_OscConfig+0x4bc>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a75      	ldr	r2, [pc, #468]	; (8009ea4 <HAL_RCC_OscConfig+0x4bc>)
 8009cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cd6:	f7fa ff63 	bl	8004ba0 <HAL_GetTick>
 8009cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cdc:	e008      	b.n	8009cf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cde:	f7fa ff5f 	bl	8004ba0 <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d901      	bls.n	8009cf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e18b      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cf0:	4b6c      	ldr	r3, [pc, #432]	; (8009ea4 <HAL_RCC_OscConfig+0x4bc>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0f0      	beq.n	8009cde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d108      	bne.n	8009d16 <HAL_RCC_OscConfig+0x32e>
 8009d04:	4b66      	ldr	r3, [pc, #408]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d0a:	4a65      	ldr	r2, [pc, #404]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d0c:	f043 0301 	orr.w	r3, r3, #1
 8009d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009d14:	e024      	b.n	8009d60 <HAL_RCC_OscConfig+0x378>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	d110      	bne.n	8009d40 <HAL_RCC_OscConfig+0x358>
 8009d1e:	4b60      	ldr	r3, [pc, #384]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d24:	4a5e      	ldr	r2, [pc, #376]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d26:	f043 0304 	orr.w	r3, r3, #4
 8009d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009d2e:	4b5c      	ldr	r3, [pc, #368]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d34:	4a5a      	ldr	r2, [pc, #360]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d36:	f043 0301 	orr.w	r3, r3, #1
 8009d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009d3e:	e00f      	b.n	8009d60 <HAL_RCC_OscConfig+0x378>
 8009d40:	4b57      	ldr	r3, [pc, #348]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d46:	4a56      	ldr	r2, [pc, #344]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009d50:	4b53      	ldr	r3, [pc, #332]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d56:	4a52      	ldr	r2, [pc, #328]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d58:	f023 0304 	bic.w	r3, r3, #4
 8009d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d016      	beq.n	8009d96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d68:	f7fa ff1a 	bl	8004ba0 <HAL_GetTick>
 8009d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d6e:	e00a      	b.n	8009d86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d70:	f7fa ff16 	bl	8004ba0 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d901      	bls.n	8009d86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e140      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d86:	4b46      	ldr	r3, [pc, #280]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d0ed      	beq.n	8009d70 <HAL_RCC_OscConfig+0x388>
 8009d94:	e015      	b.n	8009dc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d96:	f7fa ff03 	bl	8004ba0 <HAL_GetTick>
 8009d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d9c:	e00a      	b.n	8009db4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d9e:	f7fa feff 	bl	8004ba0 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d901      	bls.n	8009db4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e129      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009db4:	4b3a      	ldr	r3, [pc, #232]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dba:	f003 0302 	and.w	r3, r3, #2
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1ed      	bne.n	8009d9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009dc2:	7ffb      	ldrb	r3, [r7, #31]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d105      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dc8:	4b35      	ldr	r3, [pc, #212]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dcc:	4a34      	ldr	r2, [pc, #208]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d03c      	beq.n	8009e5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01c      	beq.n	8009e22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009de8:	4b2d      	ldr	r3, [pc, #180]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009dee:	4a2c      	ldr	r2, [pc, #176]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009df0:	f043 0301 	orr.w	r3, r3, #1
 8009df4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df8:	f7fa fed2 	bl	8004ba0 <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e00:	f7fa fece 	bl	8004ba0 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e0fa      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e12:	4b23      	ldr	r3, [pc, #140]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e18:	f003 0302 	and.w	r3, r3, #2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0ef      	beq.n	8009e00 <HAL_RCC_OscConfig+0x418>
 8009e20:	e01b      	b.n	8009e5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e22:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e28:	4a1d      	ldr	r2, [pc, #116]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009e2a:	f023 0301 	bic.w	r3, r3, #1
 8009e2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e32:	f7fa feb5 	bl	8004ba0 <HAL_GetTick>
 8009e36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009e38:	e008      	b.n	8009e4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e3a:	f7fa feb1 	bl	8004ba0 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e0dd      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009e4c:	4b14      	ldr	r3, [pc, #80]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1ef      	bne.n	8009e3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80d1 	beq.w	800a006 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e64:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f003 030c 	and.w	r3, r3, #12
 8009e6c:	2b0c      	cmp	r3, #12
 8009e6e:	f000 808b 	beq.w	8009f88 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d15e      	bne.n	8009f38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e7a:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a08      	ldr	r2, [pc, #32]	; (8009ea0 <HAL_RCC_OscConfig+0x4b8>)
 8009e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e86:	f7fa fe8b 	bl	8004ba0 <HAL_GetTick>
 8009e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e8c:	e00c      	b.n	8009ea8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e8e:	f7fa fe87 	bl	8004ba0 <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d905      	bls.n	8009ea8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e0b3      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
 8009ea0:	40021000 	.word	0x40021000
 8009ea4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ea8:	4b59      	ldr	r3, [pc, #356]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1ec      	bne.n	8009e8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009eb4:	4b56      	ldr	r3, [pc, #344]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009eb6:	68da      	ldr	r2, [r3, #12]
 8009eb8:	4b56      	ldr	r3, [pc, #344]	; (800a014 <HAL_RCC_OscConfig+0x62c>)
 8009eba:	4013      	ands	r3, r2
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	6a11      	ldr	r1, [r2, #32]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ec4:	3a01      	subs	r2, #1
 8009ec6:	0112      	lsls	r2, r2, #4
 8009ec8:	4311      	orrs	r1, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009ece:	0212      	lsls	r2, r2, #8
 8009ed0:	4311      	orrs	r1, r2
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ed6:	0852      	lsrs	r2, r2, #1
 8009ed8:	3a01      	subs	r2, #1
 8009eda:	0552      	lsls	r2, r2, #21
 8009edc:	4311      	orrs	r1, r2
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ee2:	0852      	lsrs	r2, r2, #1
 8009ee4:	3a01      	subs	r2, #1
 8009ee6:	0652      	lsls	r2, r2, #25
 8009ee8:	4311      	orrs	r1, r2
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009eee:	06d2      	lsls	r2, r2, #27
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	4947      	ldr	r1, [pc, #284]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ef8:	4b45      	ldr	r3, [pc, #276]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a44      	ldr	r2, [pc, #272]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f04:	4b42      	ldr	r3, [pc, #264]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	4a41      	ldr	r2, [pc, #260]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f10:	f7fa fe46 	bl	8004ba0 <HAL_GetTick>
 8009f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f16:	e008      	b.n	8009f2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f18:	f7fa fe42 	bl	8004ba0 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d901      	bls.n	8009f2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e06e      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f2a:	4b39      	ldr	r3, [pc, #228]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0f0      	beq.n	8009f18 <HAL_RCC_OscConfig+0x530>
 8009f36:	e066      	b.n	800a006 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f38:	4b35      	ldr	r3, [pc, #212]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a34      	ldr	r2, [pc, #208]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009f44:	4b32      	ldr	r3, [pc, #200]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	4a31      	ldr	r2, [pc, #196]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f4a:	f023 0303 	bic.w	r3, r3, #3
 8009f4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009f50:	4b2f      	ldr	r3, [pc, #188]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	4a2e      	ldr	r2, [pc, #184]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f60:	f7fa fe1e 	bl	8004ba0 <HAL_GetTick>
 8009f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f66:	e008      	b.n	8009f7a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f68:	f7fa fe1a 	bl	8004ba0 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d901      	bls.n	8009f7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e046      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f7a:	4b25      	ldr	r3, [pc, #148]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f0      	bne.n	8009f68 <HAL_RCC_OscConfig+0x580>
 8009f86:	e03e      	b.n	800a006 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e039      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009f94:	4b1e      	ldr	r3, [pc, #120]	; (800a010 <HAL_RCC_OscConfig+0x628>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f003 0203 	and.w	r2, r3, #3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d12c      	bne.n	800a002 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d123      	bne.n	800a002 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d11b      	bne.n	800a002 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d113      	bne.n	800a002 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe4:	085b      	lsrs	r3, r3, #1
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d109      	bne.n	800a002 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff8:	085b      	lsrs	r3, r3, #1
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d001      	beq.n	800a006 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3720      	adds	r7, #32
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	40021000 	.word	0x40021000
 800a014:	019f800c 	.word	0x019f800c

0800a018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e11e      	b.n	800a26e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a030:	4b91      	ldr	r3, [pc, #580]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d910      	bls.n	800a060 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03e:	4b8e      	ldr	r3, [pc, #568]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f023 020f 	bic.w	r2, r3, #15
 800a046:	498c      	ldr	r1, [pc, #560]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a04e:	4b8a      	ldr	r3, [pc, #552]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 030f 	and.w	r3, r3, #15
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d001      	beq.n	800a060 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e106      	b.n	800a26e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d073      	beq.n	800a154 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b03      	cmp	r3, #3
 800a072:	d129      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a074:	4b81      	ldr	r3, [pc, #516]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e0f4      	b.n	800a26e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a084:	f000 f99e 	bl	800a3c4 <RCC_GetSysClockFreqFromPLLSource>
 800a088:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	4a7c      	ldr	r2, [pc, #496]	; (800a280 <HAL_RCC_ClockConfig+0x268>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d93f      	bls.n	800a112 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a092:	4b7a      	ldr	r3, [pc, #488]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d009      	beq.n	800a0b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d033      	beq.n	800a112 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d12f      	bne.n	800a112 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a0b2:	4b72      	ldr	r3, [pc, #456]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ba:	4a70      	ldr	r2, [pc, #448]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a0c2:	2380      	movs	r3, #128	; 0x80
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	e024      	b.n	800a112 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d107      	bne.n	800a0e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a0d0:	4b6a      	ldr	r3, [pc, #424]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0c6      	b.n	800a26e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0e0:	4b66      	ldr	r3, [pc, #408]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e0be      	b.n	800a26e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a0f0:	f000 f8ce 	bl	800a290 <HAL_RCC_GetSysClockFreq>
 800a0f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	4a61      	ldr	r2, [pc, #388]	; (800a280 <HAL_RCC_ClockConfig+0x268>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d909      	bls.n	800a112 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a0fe:	4b5f      	ldr	r3, [pc, #380]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a106:	4a5d      	ldr	r2, [pc, #372]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a10e:	2380      	movs	r3, #128	; 0x80
 800a110:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a112:	4b5a      	ldr	r3, [pc, #360]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f023 0203 	bic.w	r2, r3, #3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	4957      	ldr	r1, [pc, #348]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a120:	4313      	orrs	r3, r2
 800a122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a124:	f7fa fd3c 	bl	8004ba0 <HAL_GetTick>
 800a128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a12a:	e00a      	b.n	800a142 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a12c:	f7fa fd38 	bl	8004ba0 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	f241 3288 	movw	r2, #5000	; 0x1388
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d901      	bls.n	800a142 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e095      	b.n	800a26e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a142:	4b4e      	ldr	r3, [pc, #312]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 020c 	and.w	r2, r3, #12
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	429a      	cmp	r2, r3
 800a152:	d1eb      	bne.n	800a12c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d023      	beq.n	800a1a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d005      	beq.n	800a178 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a16c:	4b43      	ldr	r3, [pc, #268]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	4a42      	ldr	r2, [pc, #264]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a176:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0308 	and.w	r3, r3, #8
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a184:	4b3d      	ldr	r3, [pc, #244]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a18c:	4a3b      	ldr	r2, [pc, #236]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a18e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a192:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a194:	4b39      	ldr	r3, [pc, #228]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	4936      	ldr	r1, [pc, #216]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	608b      	str	r3, [r1, #8]
 800a1a6:	e008      	b.n	800a1ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b80      	cmp	r3, #128	; 0x80
 800a1ac:	d105      	bne.n	800a1ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a1ae:	4b33      	ldr	r3, [pc, #204]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	4a32      	ldr	r2, [pc, #200]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a1b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1ba:	4b2f      	ldr	r3, [pc, #188]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d21d      	bcs.n	800a204 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1c8:	4b2b      	ldr	r3, [pc, #172]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f023 020f 	bic.w	r2, r3, #15
 800a1d0:	4929      	ldr	r1, [pc, #164]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a1d8:	f7fa fce2 	bl	8004ba0 <HAL_GetTick>
 800a1dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1de:	e00a      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1e0:	f7fa fcde 	bl	8004ba0 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d901      	bls.n	800a1f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e03b      	b.n	800a26e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f6:	4b20      	ldr	r3, [pc, #128]	; (800a278 <HAL_RCC_ClockConfig+0x260>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 030f 	and.w	r3, r3, #15
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d1ed      	bne.n	800a1e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0304 	and.w	r3, r3, #4
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d008      	beq.n	800a222 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a210:	4b1a      	ldr	r3, [pc, #104]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	4917      	ldr	r1, [pc, #92]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0308 	and.w	r3, r3, #8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a22e:	4b13      	ldr	r3, [pc, #76]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	490f      	ldr	r1, [pc, #60]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a242:	f000 f825 	bl	800a290 <HAL_RCC_GetSysClockFreq>
 800a246:	4602      	mov	r2, r0
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <HAL_RCC_ClockConfig+0x264>)
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	091b      	lsrs	r3, r3, #4
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	490c      	ldr	r1, [pc, #48]	; (800a284 <HAL_RCC_ClockConfig+0x26c>)
 800a254:	5ccb      	ldrb	r3, [r1, r3]
 800a256:	f003 031f 	and.w	r3, r3, #31
 800a25a:	fa22 f303 	lsr.w	r3, r2, r3
 800a25e:	4a0a      	ldr	r2, [pc, #40]	; (800a288 <HAL_RCC_ClockConfig+0x270>)
 800a260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a262:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <HAL_RCC_ClockConfig+0x274>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f7fa fc4e 	bl	8004b08 <HAL_InitTick>
 800a26c:	4603      	mov	r3, r0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	40022000 	.word	0x40022000
 800a27c:	40021000 	.word	0x40021000
 800a280:	04c4b400 	.word	0x04c4b400
 800a284:	080151f4 	.word	0x080151f4
 800a288:	20000000 	.word	0x20000000
 800a28c:	20000004 	.word	0x20000004

0800a290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a296:	4b2c      	ldr	r3, [pc, #176]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f003 030c 	and.w	r3, r3, #12
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d102      	bne.n	800a2a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a2a2:	4b2a      	ldr	r3, [pc, #168]	; (800a34c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a2a4:	613b      	str	r3, [r7, #16]
 800a2a6:	e047      	b.n	800a338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a2a8:	4b27      	ldr	r3, [pc, #156]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f003 030c 	and.w	r3, r3, #12
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d102      	bne.n	800a2ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a2b4:	4b26      	ldr	r3, [pc, #152]	; (800a350 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	e03e      	b.n	800a338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a2ba:	4b23      	ldr	r3, [pc, #140]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f003 030c 	and.w	r3, r3, #12
 800a2c2:	2b0c      	cmp	r3, #12
 800a2c4:	d136      	bne.n	800a334 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a2c6:	4b20      	ldr	r3, [pc, #128]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a2d0:	4b1d      	ldr	r3, [pc, #116]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	091b      	lsrs	r3, r3, #4
 800a2d6:	f003 030f 	and.w	r3, r3, #15
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d10c      	bne.n	800a2fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2e4:	4a1a      	ldr	r2, [pc, #104]	; (800a350 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ec:	4a16      	ldr	r2, [pc, #88]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2ee:	68d2      	ldr	r2, [r2, #12]
 800a2f0:	0a12      	lsrs	r2, r2, #8
 800a2f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
 800a2fa:	617b      	str	r3, [r7, #20]
      break;
 800a2fc:	e00c      	b.n	800a318 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2fe:	4a13      	ldr	r2, [pc, #76]	; (800a34c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	fbb2 f3f3 	udiv	r3, r2, r3
 800a306:	4a10      	ldr	r2, [pc, #64]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a308:	68d2      	ldr	r2, [r2, #12]
 800a30a:	0a12      	lsrs	r2, r2, #8
 800a30c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a310:	fb02 f303 	mul.w	r3, r2, r3
 800a314:	617b      	str	r3, [r7, #20]
      break;
 800a316:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a318:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	0e5b      	lsrs	r3, r3, #25
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	3301      	adds	r3, #1
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a330:	613b      	str	r3, [r7, #16]
 800a332:	e001      	b.n	800a338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a334:	2300      	movs	r3, #0
 800a336:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a338:	693b      	ldr	r3, [r7, #16]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	40021000 	.word	0x40021000
 800a34c:	00f42400 	.word	0x00f42400
 800a350:	007a1200 	.word	0x007a1200

0800a354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a358:	4b03      	ldr	r3, [pc, #12]	; (800a368 <HAL_RCC_GetHCLKFreq+0x14>)
 800a35a:	681b      	ldr	r3, [r3, #0]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	20000000 	.word	0x20000000

0800a36c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a370:	f7ff fff0 	bl	800a354 <HAL_RCC_GetHCLKFreq>
 800a374:	4602      	mov	r2, r0
 800a376:	4b06      	ldr	r3, [pc, #24]	; (800a390 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f003 0307 	and.w	r3, r3, #7
 800a380:	4904      	ldr	r1, [pc, #16]	; (800a394 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a382:	5ccb      	ldrb	r3, [r1, r3]
 800a384:	f003 031f 	and.w	r3, r3, #31
 800a388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	40021000 	.word	0x40021000
 800a394:	08015204 	.word	0x08015204

0800a398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a39c:	f7ff ffda 	bl	800a354 <HAL_RCC_GetHCLKFreq>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	0adb      	lsrs	r3, r3, #11
 800a3a8:	f003 0307 	and.w	r3, r3, #7
 800a3ac:	4904      	ldr	r1, [pc, #16]	; (800a3c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a3ae:	5ccb      	ldrb	r3, [r1, r3]
 800a3b0:	f003 031f 	and.w	r3, r3, #31
 800a3b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	40021000 	.word	0x40021000
 800a3c0:	08015204 	.word	0x08015204

0800a3c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a3ca:	4b1e      	ldr	r3, [pc, #120]	; (800a444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a3d4:	4b1b      	ldr	r3, [pc, #108]	; (800a444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	091b      	lsrs	r3, r3, #4
 800a3da:	f003 030f 	and.w	r3, r3, #15
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d10c      	bne.n	800a402 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3e8:	4a17      	ldr	r2, [pc, #92]	; (800a448 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f0:	4a14      	ldr	r2, [pc, #80]	; (800a444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3f2:	68d2      	ldr	r2, [r2, #12]
 800a3f4:	0a12      	lsrs	r2, r2, #8
 800a3f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a3fa:	fb02 f303 	mul.w	r3, r2, r3
 800a3fe:	617b      	str	r3, [r7, #20]
    break;
 800a400:	e00c      	b.n	800a41c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a402:	4a12      	ldr	r2, [pc, #72]	; (800a44c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	fbb2 f3f3 	udiv	r3, r2, r3
 800a40a:	4a0e      	ldr	r2, [pc, #56]	; (800a444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a40c:	68d2      	ldr	r2, [r2, #12]
 800a40e:	0a12      	lsrs	r2, r2, #8
 800a410:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a414:	fb02 f303 	mul.w	r3, r2, r3
 800a418:	617b      	str	r3, [r7, #20]
    break;
 800a41a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	0e5b      	lsrs	r3, r3, #25
 800a422:	f003 0303 	and.w	r3, r3, #3
 800a426:	3301      	adds	r3, #1
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	fbb2 f3f3 	udiv	r3, r2, r3
 800a434:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a436:	687b      	ldr	r3, [r7, #4]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	40021000 	.word	0x40021000
 800a448:	007a1200 	.word	0x007a1200
 800a44c:	00f42400 	.word	0x00f42400

0800a450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a458:	2300      	movs	r3, #0
 800a45a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a45c:	2300      	movs	r3, #0
 800a45e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 8098 	beq.w	800a59e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a46e:	2300      	movs	r3, #0
 800a470:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a472:	4b43      	ldr	r3, [pc, #268]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10d      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a47e:	4b40      	ldr	r3, [pc, #256]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a482:	4a3f      	ldr	r2, [pc, #252]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a488:	6593      	str	r3, [r2, #88]	; 0x58
 800a48a:	4b3d      	ldr	r3, [pc, #244]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a492:	60bb      	str	r3, [r7, #8]
 800a494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a496:	2301      	movs	r3, #1
 800a498:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a49a:	4b3a      	ldr	r3, [pc, #232]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a39      	ldr	r2, [pc, #228]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4a6:	f7fa fb7b 	bl	8004ba0 <HAL_GetTick>
 800a4aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4ac:	e009      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4ae:	f7fa fb77 	bl	8004ba0 <HAL_GetTick>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d902      	bls.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	74fb      	strb	r3, [r7, #19]
        break;
 800a4c0:	e005      	b.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4c2:	4b30      	ldr	r3, [pc, #192]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0ef      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a4ce:	7cfb      	ldrb	r3, [r7, #19]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d159      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a4d4:	4b2a      	ldr	r3, [pc, #168]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01e      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d019      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a4f0:	4b23      	ldr	r3, [pc, #140]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4fc:	4b20      	ldr	r3, [pc, #128]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a502:	4a1f      	ldr	r2, [pc, #124]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a50c:	4b1c      	ldr	r3, [pc, #112]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a512:	4a1b      	ldr	r2, [pc, #108]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a51c:	4a18      	ldr	r2, [pc, #96]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d016      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52e:	f7fa fb37 	bl	8004ba0 <HAL_GetTick>
 800a532:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a534:	e00b      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a536:	f7fa fb33 	bl	8004ba0 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	f241 3288 	movw	r2, #5000	; 0x1388
 800a544:	4293      	cmp	r3, r2
 800a546:	d902      	bls.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	74fb      	strb	r3, [r7, #19]
            break;
 800a54c:	e006      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a54e:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a554:	f003 0302 	and.w	r3, r3, #2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0ec      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a55c:	7cfb      	ldrb	r3, [r7, #19]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a562:	4b07      	ldr	r3, [pc, #28]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a570:	4903      	ldr	r1, [pc, #12]	; (800a580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a572:	4313      	orrs	r3, r2
 800a574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a578:	e008      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a57a:	7cfb      	ldrb	r3, [r7, #19]
 800a57c:	74bb      	strb	r3, [r7, #18]
 800a57e:	e005      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a580:	40021000 	.word	0x40021000
 800a584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a588:	7cfb      	ldrb	r3, [r7, #19]
 800a58a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a58c:	7c7b      	ldrb	r3, [r7, #17]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d105      	bne.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a592:	4ba7      	ldr	r3, [pc, #668]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a596:	4aa6      	ldr	r2, [pc, #664]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a59c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a5aa:	4ba1      	ldr	r3, [pc, #644]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b0:	f023 0203 	bic.w	r2, r3, #3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	499d      	ldr	r1, [pc, #628]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5cc:	4b98      	ldr	r3, [pc, #608]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d2:	f023 020c 	bic.w	r2, r3, #12
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	4995      	ldr	r1, [pc, #596]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0304 	and.w	r3, r3, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5ee:	4b90      	ldr	r3, [pc, #576]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	498c      	ldr	r1, [pc, #560]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00a      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a610:	4b87      	ldr	r3, [pc, #540]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	4984      	ldr	r1, [pc, #528]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a620:	4313      	orrs	r3, r2
 800a622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0310 	and.w	r3, r3, #16
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a632:	4b7f      	ldr	r3, [pc, #508]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	497b      	ldr	r1, [pc, #492]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a642:	4313      	orrs	r3, r2
 800a644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00a      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a654:	4b76      	ldr	r3, [pc, #472]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	4973      	ldr	r1, [pc, #460]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a664:	4313      	orrs	r3, r2
 800a666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a676:	4b6e      	ldr	r3, [pc, #440]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	496a      	ldr	r1, [pc, #424]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a686:	4313      	orrs	r3, r2
 800a688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00a      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a698:	4b65      	ldr	r3, [pc, #404]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	4962      	ldr	r1, [pc, #392]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a6ba:	4b5d      	ldr	r3, [pc, #372]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	4959      	ldr	r1, [pc, #356]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00a      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6dc:	4b54      	ldr	r3, [pc, #336]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6e2:	f023 0203 	bic.w	r2, r3, #3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ea:	4951      	ldr	r1, [pc, #324]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6fe:	4b4c      	ldr	r3, [pc, #304]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a704:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4948      	ldr	r1, [pc, #288]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d015      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a720:	4b43      	ldr	r3, [pc, #268]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72e:	4940      	ldr	r1, [pc, #256]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a730:	4313      	orrs	r3, r2
 800a732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73e:	d105      	bne.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a740:	4b3b      	ldr	r3, [pc, #236]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4a3a      	ldr	r2, [pc, #232]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a74a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a754:	2b00      	cmp	r3, #0
 800a756:	d015      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a758:	4b35      	ldr	r3, [pc, #212]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	4932      	ldr	r1, [pc, #200]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a776:	d105      	bne.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a778:	4b2d      	ldr	r3, [pc, #180]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	4a2c      	ldr	r2, [pc, #176]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a77e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a782:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d015      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a790:	4b27      	ldr	r3, [pc, #156]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a796:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79e:	4924      	ldr	r1, [pc, #144]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7ae:	d105      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7b0:	4b1f      	ldr	r3, [pc, #124]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d015      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a7c8:	4b19      	ldr	r3, [pc, #100]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d6:	4916      	ldr	r1, [pc, #88]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7e6:	d105      	bne.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7e8:	4b11      	ldr	r3, [pc, #68]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	4a10      	ldr	r2, [pc, #64]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d019      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a800:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	4908      	ldr	r1, [pc, #32]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a810:	4313      	orrs	r3, r2
 800a812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a81e:	d109      	bne.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a820:	4b03      	ldr	r3, [pc, #12]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	4a02      	ldr	r2, [pc, #8]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a82a:	60d3      	str	r3, [r2, #12]
 800a82c:	e002      	b.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a82e:	bf00      	nop
 800a830:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d015      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a840:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84e:	4926      	ldr	r1, [pc, #152]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a850:	4313      	orrs	r3, r2
 800a852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a85e:	d105      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a860:	4b21      	ldr	r3, [pc, #132]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	4a20      	ldr	r2, [pc, #128]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a86a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d015      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a878:	4b1b      	ldr	r3, [pc, #108]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a886:	4918      	ldr	r1, [pc, #96]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a896:	d105      	bne.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a898:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	4a12      	ldr	r2, [pc, #72]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a89e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d015      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a8b0:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8be:	490a      	ldr	r1, [pc, #40]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ce:	d105      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	4a04      	ldr	r2, [pc, #16]	; (800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a8dc:	7cbb      	ldrb	r3, [r7, #18]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	40021000 	.word	0x40021000

0800a8ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e049      	b.n	800a992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7f9 fcb0 	bl	8004278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3304      	adds	r3, #4
 800a928:	4619      	mov	r1, r3
 800a92a:	4610      	mov	r0, r2
 800a92c:	f000 fbc8 	bl	800b0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b082      	sub	sp, #8
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e049      	b.n	800aa40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7f9 fcdb 	bl	800437c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4610      	mov	r0, r2
 800a9da:	f000 fb71 	bl	800b0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d109      	bne.n	800aa6c <HAL_TIM_PWM_Start+0x24>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	bf14      	ite	ne
 800aa64:	2301      	movne	r3, #1
 800aa66:	2300      	moveq	r3, #0
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	e03c      	b.n	800aae6 <HAL_TIM_PWM_Start+0x9e>
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d109      	bne.n	800aa86 <HAL_TIM_PWM_Start+0x3e>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	bf14      	ite	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	2300      	moveq	r3, #0
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	e02f      	b.n	800aae6 <HAL_TIM_PWM_Start+0x9e>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b08      	cmp	r3, #8
 800aa8a:	d109      	bne.n	800aaa0 <HAL_TIM_PWM_Start+0x58>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	bf14      	ite	ne
 800aa98:	2301      	movne	r3, #1
 800aa9a:	2300      	moveq	r3, #0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	e022      	b.n	800aae6 <HAL_TIM_PWM_Start+0x9e>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b0c      	cmp	r3, #12
 800aaa4:	d109      	bne.n	800aaba <HAL_TIM_PWM_Start+0x72>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	bf14      	ite	ne
 800aab2:	2301      	movne	r3, #1
 800aab4:	2300      	moveq	r3, #0
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	e015      	b.n	800aae6 <HAL_TIM_PWM_Start+0x9e>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d109      	bne.n	800aad4 <HAL_TIM_PWM_Start+0x8c>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	bf14      	ite	ne
 800aacc:	2301      	movne	r3, #1
 800aace:	2300      	moveq	r3, #0
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	e008      	b.n	800aae6 <HAL_TIM_PWM_Start+0x9e>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b01      	cmp	r3, #1
 800aade:	bf14      	ite	ne
 800aae0:	2301      	movne	r3, #1
 800aae2:	2300      	moveq	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e0a6      	b.n	800ac3c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d104      	bne.n	800aafe <HAL_TIM_PWM_Start+0xb6>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aafc:	e023      	b.n	800ab46 <HAL_TIM_PWM_Start+0xfe>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	d104      	bne.n	800ab0e <HAL_TIM_PWM_Start+0xc6>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2202      	movs	r2, #2
 800ab08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab0c:	e01b      	b.n	800ab46 <HAL_TIM_PWM_Start+0xfe>
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d104      	bne.n	800ab1e <HAL_TIM_PWM_Start+0xd6>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab1c:	e013      	b.n	800ab46 <HAL_TIM_PWM_Start+0xfe>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b0c      	cmp	r3, #12
 800ab22:	d104      	bne.n	800ab2e <HAL_TIM_PWM_Start+0xe6>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab2c:	e00b      	b.n	800ab46 <HAL_TIM_PWM_Start+0xfe>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b10      	cmp	r3, #16
 800ab32:	d104      	bne.n	800ab3e <HAL_TIM_PWM_Start+0xf6>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab3c:	e003      	b.n	800ab46 <HAL_TIM_PWM_Start+0xfe>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2202      	movs	r2, #2
 800ab42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 ff24 	bl	800b99c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a3a      	ldr	r2, [pc, #232]	; (800ac44 <HAL_TIM_PWM_Start+0x1fc>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d018      	beq.n	800ab90 <HAL_TIM_PWM_Start+0x148>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a39      	ldr	r2, [pc, #228]	; (800ac48 <HAL_TIM_PWM_Start+0x200>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d013      	beq.n	800ab90 <HAL_TIM_PWM_Start+0x148>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a37      	ldr	r2, [pc, #220]	; (800ac4c <HAL_TIM_PWM_Start+0x204>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d00e      	beq.n	800ab90 <HAL_TIM_PWM_Start+0x148>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a36      	ldr	r2, [pc, #216]	; (800ac50 <HAL_TIM_PWM_Start+0x208>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d009      	beq.n	800ab90 <HAL_TIM_PWM_Start+0x148>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a34      	ldr	r2, [pc, #208]	; (800ac54 <HAL_TIM_PWM_Start+0x20c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d004      	beq.n	800ab90 <HAL_TIM_PWM_Start+0x148>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a33      	ldr	r2, [pc, #204]	; (800ac58 <HAL_TIM_PWM_Start+0x210>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d101      	bne.n	800ab94 <HAL_TIM_PWM_Start+0x14c>
 800ab90:	2301      	movs	r3, #1
 800ab92:	e000      	b.n	800ab96 <HAL_TIM_PWM_Start+0x14e>
 800ab94:	2300      	movs	r3, #0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d007      	beq.n	800abaa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aba8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a25      	ldr	r2, [pc, #148]	; (800ac44 <HAL_TIM_PWM_Start+0x1fc>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d022      	beq.n	800abfa <HAL_TIM_PWM_Start+0x1b2>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abbc:	d01d      	beq.n	800abfa <HAL_TIM_PWM_Start+0x1b2>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a26      	ldr	r2, [pc, #152]	; (800ac5c <HAL_TIM_PWM_Start+0x214>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d018      	beq.n	800abfa <HAL_TIM_PWM_Start+0x1b2>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a24      	ldr	r2, [pc, #144]	; (800ac60 <HAL_TIM_PWM_Start+0x218>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d013      	beq.n	800abfa <HAL_TIM_PWM_Start+0x1b2>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a23      	ldr	r2, [pc, #140]	; (800ac64 <HAL_TIM_PWM_Start+0x21c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00e      	beq.n	800abfa <HAL_TIM_PWM_Start+0x1b2>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a19      	ldr	r2, [pc, #100]	; (800ac48 <HAL_TIM_PWM_Start+0x200>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d009      	beq.n	800abfa <HAL_TIM_PWM_Start+0x1b2>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a18      	ldr	r2, [pc, #96]	; (800ac4c <HAL_TIM_PWM_Start+0x204>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d004      	beq.n	800abfa <HAL_TIM_PWM_Start+0x1b2>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a18      	ldr	r2, [pc, #96]	; (800ac58 <HAL_TIM_PWM_Start+0x210>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d115      	bne.n	800ac26 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	4b19      	ldr	r3, [pc, #100]	; (800ac68 <HAL_TIM_PWM_Start+0x220>)
 800ac02:	4013      	ands	r3, r2
 800ac04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2b06      	cmp	r3, #6
 800ac0a:	d015      	beq.n	800ac38 <HAL_TIM_PWM_Start+0x1f0>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac12:	d011      	beq.n	800ac38 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f042 0201 	orr.w	r2, r2, #1
 800ac22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac24:	e008      	b.n	800ac38 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f042 0201 	orr.w	r2, r2, #1
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	e000      	b.n	800ac3a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	40012c00 	.word	0x40012c00
 800ac48:	40013400 	.word	0x40013400
 800ac4c:	40014000 	.word	0x40014000
 800ac50:	40014400 	.word	0x40014400
 800ac54:	40014800 	.word	0x40014800
 800ac58:	40015000 	.word	0x40015000
 800ac5c:	40000400 	.word	0x40000400
 800ac60:	40000800 	.word	0x40000800
 800ac64:	40000c00 	.word	0x40000c00
 800ac68:	00010007 	.word	0x00010007

0800ac6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e0ff      	b.n	800ae8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b14      	cmp	r3, #20
 800ac96:	f200 80f0 	bhi.w	800ae7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac9a:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca0:	0800acf5 	.word	0x0800acf5
 800aca4:	0800ae7b 	.word	0x0800ae7b
 800aca8:	0800ae7b 	.word	0x0800ae7b
 800acac:	0800ae7b 	.word	0x0800ae7b
 800acb0:	0800ad35 	.word	0x0800ad35
 800acb4:	0800ae7b 	.word	0x0800ae7b
 800acb8:	0800ae7b 	.word	0x0800ae7b
 800acbc:	0800ae7b 	.word	0x0800ae7b
 800acc0:	0800ad77 	.word	0x0800ad77
 800acc4:	0800ae7b 	.word	0x0800ae7b
 800acc8:	0800ae7b 	.word	0x0800ae7b
 800accc:	0800ae7b 	.word	0x0800ae7b
 800acd0:	0800adb7 	.word	0x0800adb7
 800acd4:	0800ae7b 	.word	0x0800ae7b
 800acd8:	0800ae7b 	.word	0x0800ae7b
 800acdc:	0800ae7b 	.word	0x0800ae7b
 800ace0:	0800adf9 	.word	0x0800adf9
 800ace4:	0800ae7b 	.word	0x0800ae7b
 800ace8:	0800ae7b 	.word	0x0800ae7b
 800acec:	0800ae7b 	.word	0x0800ae7b
 800acf0:	0800ae39 	.word	0x0800ae39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 fa88 	bl	800b210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f042 0208 	orr.w	r2, r2, #8
 800ad0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	699a      	ldr	r2, [r3, #24]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0204 	bic.w	r2, r2, #4
 800ad1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	6999      	ldr	r1, [r3, #24]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	691a      	ldr	r2, [r3, #16]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	619a      	str	r2, [r3, #24]
      break;
 800ad32:	e0a5      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 fb02 	bl	800b344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6999      	ldr	r1, [r3, #24]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	021a      	lsls	r2, r3, #8
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	619a      	str	r2, [r3, #24]
      break;
 800ad74:	e084      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fb75 	bl	800b46c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69da      	ldr	r2, [r3, #28]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f042 0208 	orr.w	r2, r2, #8
 800ad90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f022 0204 	bic.w	r2, r2, #4
 800ada0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	69d9      	ldr	r1, [r3, #28]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	61da      	str	r2, [r3, #28]
      break;
 800adb4:	e064      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fbe7 	bl	800b590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800add0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ade0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69d9      	ldr	r1, [r3, #28]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	021a      	lsls	r2, r3, #8
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	61da      	str	r2, [r3, #28]
      break;
 800adf6:	e043      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fc5a 	bl	800b6b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0208 	orr.w	r2, r2, #8
 800ae12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0204 	bic.w	r2, r2, #4
 800ae22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	691a      	ldr	r2, [r3, #16]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ae36:	e023      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fca4 	bl	800b78c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	021a      	lsls	r2, r3, #8
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ae78:	e002      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop

0800ae94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_TIM_ConfigClockSource+0x1c>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e0f6      	b.n	800b09e <HAL_TIM_ConfigClockSource+0x20a>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800aece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a6f      	ldr	r2, [pc, #444]	; (800b0a8 <HAL_TIM_ConfigClockSource+0x214>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	f000 80c1 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800aef0:	4a6d      	ldr	r2, [pc, #436]	; (800b0a8 <HAL_TIM_ConfigClockSource+0x214>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	f200 80c6 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800aef8:	4a6c      	ldr	r2, [pc, #432]	; (800b0ac <HAL_TIM_ConfigClockSource+0x218>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	f000 80b9 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800af00:	4a6a      	ldr	r2, [pc, #424]	; (800b0ac <HAL_TIM_ConfigClockSource+0x218>)
 800af02:	4293      	cmp	r3, r2
 800af04:	f200 80be 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af08:	4a69      	ldr	r2, [pc, #420]	; (800b0b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	f000 80b1 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800af10:	4a67      	ldr	r2, [pc, #412]	; (800b0b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	f200 80b6 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af18:	4a66      	ldr	r2, [pc, #408]	; (800b0b4 <HAL_TIM_ConfigClockSource+0x220>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	f000 80a9 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800af20:	4a64      	ldr	r2, [pc, #400]	; (800b0b4 <HAL_TIM_ConfigClockSource+0x220>)
 800af22:	4293      	cmp	r3, r2
 800af24:	f200 80ae 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af28:	4a63      	ldr	r2, [pc, #396]	; (800b0b8 <HAL_TIM_ConfigClockSource+0x224>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	f000 80a1 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800af30:	4a61      	ldr	r2, [pc, #388]	; (800b0b8 <HAL_TIM_ConfigClockSource+0x224>)
 800af32:	4293      	cmp	r3, r2
 800af34:	f200 80a6 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af38:	4a60      	ldr	r2, [pc, #384]	; (800b0bc <HAL_TIM_ConfigClockSource+0x228>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	f000 8099 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800af40:	4a5e      	ldr	r2, [pc, #376]	; (800b0bc <HAL_TIM_ConfigClockSource+0x228>)
 800af42:	4293      	cmp	r3, r2
 800af44:	f200 809e 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af4c:	f000 8091 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800af50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af54:	f200 8096 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af5c:	f000 8089 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800af60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af64:	f200 808e 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af6c:	d03e      	beq.n	800afec <HAL_TIM_ConfigClockSource+0x158>
 800af6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af72:	f200 8087 	bhi.w	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af7a:	f000 8086 	beq.w	800b08a <HAL_TIM_ConfigClockSource+0x1f6>
 800af7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af82:	d87f      	bhi.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af84:	2b70      	cmp	r3, #112	; 0x70
 800af86:	d01a      	beq.n	800afbe <HAL_TIM_ConfigClockSource+0x12a>
 800af88:	2b70      	cmp	r3, #112	; 0x70
 800af8a:	d87b      	bhi.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af8c:	2b60      	cmp	r3, #96	; 0x60
 800af8e:	d050      	beq.n	800b032 <HAL_TIM_ConfigClockSource+0x19e>
 800af90:	2b60      	cmp	r3, #96	; 0x60
 800af92:	d877      	bhi.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af94:	2b50      	cmp	r3, #80	; 0x50
 800af96:	d03c      	beq.n	800b012 <HAL_TIM_ConfigClockSource+0x17e>
 800af98:	2b50      	cmp	r3, #80	; 0x50
 800af9a:	d873      	bhi.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800af9c:	2b40      	cmp	r3, #64	; 0x40
 800af9e:	d058      	beq.n	800b052 <HAL_TIM_ConfigClockSource+0x1be>
 800afa0:	2b40      	cmp	r3, #64	; 0x40
 800afa2:	d86f      	bhi.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800afa4:	2b30      	cmp	r3, #48	; 0x30
 800afa6:	d064      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800afa8:	2b30      	cmp	r3, #48	; 0x30
 800afaa:	d86b      	bhi.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800afac:	2b20      	cmp	r3, #32
 800afae:	d060      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d867      	bhi.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d05c      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800afb8:	2b10      	cmp	r3, #16
 800afba:	d05a      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x1de>
 800afbc:	e062      	b.n	800b084 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	6899      	ldr	r1, [r3, #8]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f000 fcc5 	bl	800b95c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	609a      	str	r2, [r3, #8]
      break;
 800afea:	e04f      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6818      	ldr	r0, [r3, #0]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	6899      	ldr	r1, [r3, #8]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f000 fcae 	bl	800b95c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b00e:	609a      	str	r2, [r3, #8]
      break;
 800b010:	e03c      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6818      	ldr	r0, [r3, #0]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	6859      	ldr	r1, [r3, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	461a      	mov	r2, r3
 800b020:	f000 fc20 	bl	800b864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2150      	movs	r1, #80	; 0x50
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fc79 	bl	800b922 <TIM_ITRx_SetConfig>
      break;
 800b030:	e02c      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6818      	ldr	r0, [r3, #0]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	6859      	ldr	r1, [r3, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	461a      	mov	r2, r3
 800b040:	f000 fc3f 	bl	800b8c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2160      	movs	r1, #96	; 0x60
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 fc69 	bl	800b922 <TIM_ITRx_SetConfig>
      break;
 800b050:	e01c      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	6859      	ldr	r1, [r3, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	461a      	mov	r2, r3
 800b060:	f000 fc00 	bl	800b864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2140      	movs	r1, #64	; 0x40
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fc59 	bl	800b922 <TIM_ITRx_SetConfig>
      break;
 800b070:	e00c      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4619      	mov	r1, r3
 800b07c:	4610      	mov	r0, r2
 800b07e:	f000 fc50 	bl	800b922 <TIM_ITRx_SetConfig>
      break;
 800b082:	e003      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	73fb      	strb	r3, [r7, #15]
      break;
 800b088:	e000      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b08a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	00100070 	.word	0x00100070
 800b0ac:	00100060 	.word	0x00100060
 800b0b0:	00100050 	.word	0x00100050
 800b0b4:	00100040 	.word	0x00100040
 800b0b8:	00100030 	.word	0x00100030
 800b0bc:	00100020 	.word	0x00100020

0800b0c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a46      	ldr	r2, [pc, #280]	; (800b1ec <TIM_Base_SetConfig+0x12c>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d017      	beq.n	800b108 <TIM_Base_SetConfig+0x48>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0de:	d013      	beq.n	800b108 <TIM_Base_SetConfig+0x48>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a43      	ldr	r2, [pc, #268]	; (800b1f0 <TIM_Base_SetConfig+0x130>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d00f      	beq.n	800b108 <TIM_Base_SetConfig+0x48>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a42      	ldr	r2, [pc, #264]	; (800b1f4 <TIM_Base_SetConfig+0x134>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00b      	beq.n	800b108 <TIM_Base_SetConfig+0x48>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a41      	ldr	r2, [pc, #260]	; (800b1f8 <TIM_Base_SetConfig+0x138>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d007      	beq.n	800b108 <TIM_Base_SetConfig+0x48>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a40      	ldr	r2, [pc, #256]	; (800b1fc <TIM_Base_SetConfig+0x13c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d003      	beq.n	800b108 <TIM_Base_SetConfig+0x48>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a3f      	ldr	r2, [pc, #252]	; (800b200 <TIM_Base_SetConfig+0x140>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d108      	bne.n	800b11a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b10e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	4313      	orrs	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a33      	ldr	r2, [pc, #204]	; (800b1ec <TIM_Base_SetConfig+0x12c>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d023      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b128:	d01f      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a30      	ldr	r2, [pc, #192]	; (800b1f0 <TIM_Base_SetConfig+0x130>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d01b      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a2f      	ldr	r2, [pc, #188]	; (800b1f4 <TIM_Base_SetConfig+0x134>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d017      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a2e      	ldr	r2, [pc, #184]	; (800b1f8 <TIM_Base_SetConfig+0x138>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d013      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a2d      	ldr	r2, [pc, #180]	; (800b1fc <TIM_Base_SetConfig+0x13c>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d00f      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a2d      	ldr	r2, [pc, #180]	; (800b204 <TIM_Base_SetConfig+0x144>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00b      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a2c      	ldr	r2, [pc, #176]	; (800b208 <TIM_Base_SetConfig+0x148>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d007      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a2b      	ldr	r2, [pc, #172]	; (800b20c <TIM_Base_SetConfig+0x14c>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d003      	beq.n	800b16a <TIM_Base_SetConfig+0xaa>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a26      	ldr	r2, [pc, #152]	; (800b200 <TIM_Base_SetConfig+0x140>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d108      	bne.n	800b17c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	4313      	orrs	r3, r2
 800b17a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	4313      	orrs	r3, r2
 800b188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	689a      	ldr	r2, [r3, #8]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a12      	ldr	r2, [pc, #72]	; (800b1ec <TIM_Base_SetConfig+0x12c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d013      	beq.n	800b1d0 <TIM_Base_SetConfig+0x110>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a14      	ldr	r2, [pc, #80]	; (800b1fc <TIM_Base_SetConfig+0x13c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d00f      	beq.n	800b1d0 <TIM_Base_SetConfig+0x110>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a14      	ldr	r2, [pc, #80]	; (800b204 <TIM_Base_SetConfig+0x144>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00b      	beq.n	800b1d0 <TIM_Base_SetConfig+0x110>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a13      	ldr	r2, [pc, #76]	; (800b208 <TIM_Base_SetConfig+0x148>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d007      	beq.n	800b1d0 <TIM_Base_SetConfig+0x110>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a12      	ldr	r2, [pc, #72]	; (800b20c <TIM_Base_SetConfig+0x14c>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d003      	beq.n	800b1d0 <TIM_Base_SetConfig+0x110>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a0d      	ldr	r2, [pc, #52]	; (800b200 <TIM_Base_SetConfig+0x140>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d103      	bne.n	800b1d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	615a      	str	r2, [r3, #20]
}
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	40012c00 	.word	0x40012c00
 800b1f0:	40000400 	.word	0x40000400
 800b1f4:	40000800 	.word	0x40000800
 800b1f8:	40000c00 	.word	0x40000c00
 800b1fc:	40013400 	.word	0x40013400
 800b200:	40015000 	.word	0x40015000
 800b204:	40014000 	.word	0x40014000
 800b208:	40014400 	.word	0x40014400
 800b20c:	40014800 	.word	0x40014800

0800b210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	f023 0201 	bic.w	r2, r3, #1
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0303 	bic.w	r3, r3, #3
 800b24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f023 0302 	bic.w	r3, r3, #2
 800b25c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	697a      	ldr	r2, [r7, #20]
 800b264:	4313      	orrs	r3, r2
 800b266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a30      	ldr	r2, [pc, #192]	; (800b32c <TIM_OC1_SetConfig+0x11c>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d013      	beq.n	800b298 <TIM_OC1_SetConfig+0x88>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a2f      	ldr	r2, [pc, #188]	; (800b330 <TIM_OC1_SetConfig+0x120>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d00f      	beq.n	800b298 <TIM_OC1_SetConfig+0x88>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a2e      	ldr	r2, [pc, #184]	; (800b334 <TIM_OC1_SetConfig+0x124>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d00b      	beq.n	800b298 <TIM_OC1_SetConfig+0x88>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a2d      	ldr	r2, [pc, #180]	; (800b338 <TIM_OC1_SetConfig+0x128>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d007      	beq.n	800b298 <TIM_OC1_SetConfig+0x88>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a2c      	ldr	r2, [pc, #176]	; (800b33c <TIM_OC1_SetConfig+0x12c>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d003      	beq.n	800b298 <TIM_OC1_SetConfig+0x88>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a2b      	ldr	r2, [pc, #172]	; (800b340 <TIM_OC1_SetConfig+0x130>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d10c      	bne.n	800b2b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f023 0308 	bic.w	r3, r3, #8
 800b29e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f023 0304 	bic.w	r3, r3, #4
 800b2b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a1d      	ldr	r2, [pc, #116]	; (800b32c <TIM_OC1_SetConfig+0x11c>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d013      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xd2>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a1c      	ldr	r2, [pc, #112]	; (800b330 <TIM_OC1_SetConfig+0x120>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00f      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xd2>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	; (800b334 <TIM_OC1_SetConfig+0x124>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d00b      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xd2>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1a      	ldr	r2, [pc, #104]	; (800b338 <TIM_OC1_SetConfig+0x128>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d007      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xd2>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a19      	ldr	r2, [pc, #100]	; (800b33c <TIM_OC1_SetConfig+0x12c>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d003      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xd2>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a18      	ldr	r2, [pc, #96]	; (800b340 <TIM_OC1_SetConfig+0x130>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d111      	bne.n	800b306 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4313      	orrs	r3, r2
 800b304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	621a      	str	r2, [r3, #32]
}
 800b320:	bf00      	nop
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	40012c00 	.word	0x40012c00
 800b330:	40013400 	.word	0x40013400
 800b334:	40014000 	.word	0x40014000
 800b338:	40014400 	.word	0x40014400
 800b33c:	40014800 	.word	0x40014800
 800b340:	40015000 	.word	0x40015000

0800b344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	f023 0210 	bic.w	r2, r3, #16
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	021b      	lsls	r3, r3, #8
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	4313      	orrs	r3, r2
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f023 0320 	bic.w	r3, r3, #32
 800b392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	011b      	lsls	r3, r3, #4
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a2c      	ldr	r2, [pc, #176]	; (800b454 <TIM_OC2_SetConfig+0x110>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d007      	beq.n	800b3b8 <TIM_OC2_SetConfig+0x74>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a2b      	ldr	r2, [pc, #172]	; (800b458 <TIM_OC2_SetConfig+0x114>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d003      	beq.n	800b3b8 <TIM_OC2_SetConfig+0x74>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a2a      	ldr	r2, [pc, #168]	; (800b45c <TIM_OC2_SetConfig+0x118>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d10d      	bne.n	800b3d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	011b      	lsls	r3, r3, #4
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a1f      	ldr	r2, [pc, #124]	; (800b454 <TIM_OC2_SetConfig+0x110>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d013      	beq.n	800b404 <TIM_OC2_SetConfig+0xc0>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a1e      	ldr	r2, [pc, #120]	; (800b458 <TIM_OC2_SetConfig+0x114>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d00f      	beq.n	800b404 <TIM_OC2_SetConfig+0xc0>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a1e      	ldr	r2, [pc, #120]	; (800b460 <TIM_OC2_SetConfig+0x11c>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d00b      	beq.n	800b404 <TIM_OC2_SetConfig+0xc0>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a1d      	ldr	r2, [pc, #116]	; (800b464 <TIM_OC2_SetConfig+0x120>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d007      	beq.n	800b404 <TIM_OC2_SetConfig+0xc0>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a1c      	ldr	r2, [pc, #112]	; (800b468 <TIM_OC2_SetConfig+0x124>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d003      	beq.n	800b404 <TIM_OC2_SetConfig+0xc0>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a17      	ldr	r2, [pc, #92]	; (800b45c <TIM_OC2_SetConfig+0x118>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d113      	bne.n	800b42c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b40a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	621a      	str	r2, [r3, #32]
}
 800b446:	bf00      	nop
 800b448:	371c      	adds	r7, #28
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	40012c00 	.word	0x40012c00
 800b458:	40013400 	.word	0x40013400
 800b45c:	40015000 	.word	0x40015000
 800b460:	40014000 	.word	0x40014000
 800b464:	40014400 	.word	0x40014400
 800b468:	40014800 	.word	0x40014800

0800b46c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f023 0303 	bic.w	r3, r3, #3
 800b4a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	021b      	lsls	r3, r3, #8
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a2b      	ldr	r2, [pc, #172]	; (800b578 <TIM_OC3_SetConfig+0x10c>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d007      	beq.n	800b4de <TIM_OC3_SetConfig+0x72>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a2a      	ldr	r2, [pc, #168]	; (800b57c <TIM_OC3_SetConfig+0x110>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d003      	beq.n	800b4de <TIM_OC3_SetConfig+0x72>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a29      	ldr	r2, [pc, #164]	; (800b580 <TIM_OC3_SetConfig+0x114>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d10d      	bne.n	800b4fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <TIM_OC3_SetConfig+0x10c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d013      	beq.n	800b52a <TIM_OC3_SetConfig+0xbe>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a1d      	ldr	r2, [pc, #116]	; (800b57c <TIM_OC3_SetConfig+0x110>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d00f      	beq.n	800b52a <TIM_OC3_SetConfig+0xbe>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a1d      	ldr	r2, [pc, #116]	; (800b584 <TIM_OC3_SetConfig+0x118>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d00b      	beq.n	800b52a <TIM_OC3_SetConfig+0xbe>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a1c      	ldr	r2, [pc, #112]	; (800b588 <TIM_OC3_SetConfig+0x11c>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d007      	beq.n	800b52a <TIM_OC3_SetConfig+0xbe>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a1b      	ldr	r2, [pc, #108]	; (800b58c <TIM_OC3_SetConfig+0x120>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d003      	beq.n	800b52a <TIM_OC3_SetConfig+0xbe>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a16      	ldr	r2, [pc, #88]	; (800b580 <TIM_OC3_SetConfig+0x114>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d113      	bne.n	800b552 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	4313      	orrs	r3, r2
 800b544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	011b      	lsls	r3, r3, #4
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	621a      	str	r2, [r3, #32]
}
 800b56c:	bf00      	nop
 800b56e:	371c      	adds	r7, #28
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr
 800b578:	40012c00 	.word	0x40012c00
 800b57c:	40013400 	.word	0x40013400
 800b580:	40015000 	.word	0x40015000
 800b584:	40014000 	.word	0x40014000
 800b588:	40014400 	.word	0x40014400
 800b58c:	40014800 	.word	0x40014800

0800b590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b590:	b480      	push	{r7}
 800b592:	b087      	sub	sp, #28
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	021b      	lsls	r3, r3, #8
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	031b      	lsls	r3, r3, #12
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a2c      	ldr	r2, [pc, #176]	; (800b6a0 <TIM_OC4_SetConfig+0x110>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d007      	beq.n	800b604 <TIM_OC4_SetConfig+0x74>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a2b      	ldr	r2, [pc, #172]	; (800b6a4 <TIM_OC4_SetConfig+0x114>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d003      	beq.n	800b604 <TIM_OC4_SetConfig+0x74>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a2a      	ldr	r2, [pc, #168]	; (800b6a8 <TIM_OC4_SetConfig+0x118>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d10d      	bne.n	800b620 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b60a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	031b      	lsls	r3, r3, #12
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	4313      	orrs	r3, r2
 800b616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b61e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <TIM_OC4_SetConfig+0x110>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d013      	beq.n	800b650 <TIM_OC4_SetConfig+0xc0>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a1e      	ldr	r2, [pc, #120]	; (800b6a4 <TIM_OC4_SetConfig+0x114>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d00f      	beq.n	800b650 <TIM_OC4_SetConfig+0xc0>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a1e      	ldr	r2, [pc, #120]	; (800b6ac <TIM_OC4_SetConfig+0x11c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00b      	beq.n	800b650 <TIM_OC4_SetConfig+0xc0>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a1d      	ldr	r2, [pc, #116]	; (800b6b0 <TIM_OC4_SetConfig+0x120>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d007      	beq.n	800b650 <TIM_OC4_SetConfig+0xc0>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a1c      	ldr	r2, [pc, #112]	; (800b6b4 <TIM_OC4_SetConfig+0x124>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d003      	beq.n	800b650 <TIM_OC4_SetConfig+0xc0>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a17      	ldr	r2, [pc, #92]	; (800b6a8 <TIM_OC4_SetConfig+0x118>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d113      	bne.n	800b678 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b656:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b65e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	019b      	lsls	r3, r3, #6
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	4313      	orrs	r3, r2
 800b66a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	019b      	lsls	r3, r3, #6
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	4313      	orrs	r3, r2
 800b676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	621a      	str	r2, [r3, #32]
}
 800b692:	bf00      	nop
 800b694:	371c      	adds	r7, #28
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	40012c00 	.word	0x40012c00
 800b6a4:	40013400 	.word	0x40013400
 800b6a8:	40015000 	.word	0x40015000
 800b6ac:	40014000 	.word	0x40014000
 800b6b0:	40014400 	.word	0x40014400
 800b6b4:	40014800 	.word	0x40014800

0800b6b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	041b      	lsls	r3, r3, #16
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	4313      	orrs	r3, r2
 800b708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a19      	ldr	r2, [pc, #100]	; (800b774 <TIM_OC5_SetConfig+0xbc>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d013      	beq.n	800b73a <TIM_OC5_SetConfig+0x82>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a18      	ldr	r2, [pc, #96]	; (800b778 <TIM_OC5_SetConfig+0xc0>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00f      	beq.n	800b73a <TIM_OC5_SetConfig+0x82>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a17      	ldr	r2, [pc, #92]	; (800b77c <TIM_OC5_SetConfig+0xc4>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d00b      	beq.n	800b73a <TIM_OC5_SetConfig+0x82>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a16      	ldr	r2, [pc, #88]	; (800b780 <TIM_OC5_SetConfig+0xc8>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d007      	beq.n	800b73a <TIM_OC5_SetConfig+0x82>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a15      	ldr	r2, [pc, #84]	; (800b784 <TIM_OC5_SetConfig+0xcc>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d003      	beq.n	800b73a <TIM_OC5_SetConfig+0x82>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a14      	ldr	r2, [pc, #80]	; (800b788 <TIM_OC5_SetConfig+0xd0>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d109      	bne.n	800b74e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	021b      	lsls	r3, r3, #8
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	621a      	str	r2, [r3, #32]
}
 800b768:	bf00      	nop
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	40012c00 	.word	0x40012c00
 800b778:	40013400 	.word	0x40013400
 800b77c:	40014000 	.word	0x40014000
 800b780:	40014400 	.word	0x40014400
 800b784:	40014800 	.word	0x40014800
 800b788:	40015000 	.word	0x40015000

0800b78c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	021b      	lsls	r3, r3, #8
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	051b      	lsls	r3, r3, #20
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a1a      	ldr	r2, [pc, #104]	; (800b84c <TIM_OC6_SetConfig+0xc0>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d013      	beq.n	800b810 <TIM_OC6_SetConfig+0x84>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a19      	ldr	r2, [pc, #100]	; (800b850 <TIM_OC6_SetConfig+0xc4>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d00f      	beq.n	800b810 <TIM_OC6_SetConfig+0x84>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a18      	ldr	r2, [pc, #96]	; (800b854 <TIM_OC6_SetConfig+0xc8>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d00b      	beq.n	800b810 <TIM_OC6_SetConfig+0x84>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a17      	ldr	r2, [pc, #92]	; (800b858 <TIM_OC6_SetConfig+0xcc>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d007      	beq.n	800b810 <TIM_OC6_SetConfig+0x84>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a16      	ldr	r2, [pc, #88]	; (800b85c <TIM_OC6_SetConfig+0xd0>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d003      	beq.n	800b810 <TIM_OC6_SetConfig+0x84>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a15      	ldr	r2, [pc, #84]	; (800b860 <TIM_OC6_SetConfig+0xd4>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d109      	bne.n	800b824 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	029b      	lsls	r3, r3, #10
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	4313      	orrs	r3, r2
 800b822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	621a      	str	r2, [r3, #32]
}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	40012c00 	.word	0x40012c00
 800b850:	40013400 	.word	0x40013400
 800b854:	40014000 	.word	0x40014000
 800b858:	40014400 	.word	0x40014400
 800b85c:	40014800 	.word	0x40014800
 800b860:	40015000 	.word	0x40015000

0800b864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	f023 0201 	bic.w	r2, r3, #1
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	699b      	ldr	r3, [r3, #24]
 800b886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b88e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	4313      	orrs	r3, r2
 800b898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f023 030a 	bic.w	r3, r3, #10
 800b8a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	621a      	str	r2, [r3, #32]
}
 800b8b6:	bf00      	nop
 800b8b8:	371c      	adds	r7, #28
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b087      	sub	sp, #28
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	f023 0210 	bic.w	r2, r3, #16
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	031b      	lsls	r3, r3, #12
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	4313      	orrs	r3, r2
 800b908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	621a      	str	r2, [r3, #32]
}
 800b916:	bf00      	nop
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4313      	orrs	r3, r2
 800b944:	f043 0307 	orr.w	r3, r3, #7
 800b948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	609a      	str	r2, [r3, #8]
}
 800b950:	bf00      	nop
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	021a      	lsls	r2, r3, #8
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	431a      	orrs	r2, r3
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4313      	orrs	r3, r2
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	4313      	orrs	r3, r2
 800b988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	609a      	str	r2, [r3, #8]
}
 800b990:	bf00      	nop
 800b992:	371c      	adds	r7, #28
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f003 031f 	and.w	r3, r3, #31
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6a1a      	ldr	r2, [r3, #32]
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	43db      	mvns	r3, r3
 800b9be:	401a      	ands	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a1a      	ldr	r2, [r3, #32]
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f003 031f 	and.w	r3, r3, #31
 800b9ce:	6879      	ldr	r1, [r7, #4]
 800b9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d4:	431a      	orrs	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	621a      	str	r2, [r3, #32]
}
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d109      	bne.n	800ba0c <HAL_TIMEx_PWMN_Start+0x24>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	bf14      	ite	ne
 800ba04:	2301      	movne	r3, #1
 800ba06:	2300      	moveq	r3, #0
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	e022      	b.n	800ba52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b04      	cmp	r3, #4
 800ba10:	d109      	bne.n	800ba26 <HAL_TIMEx_PWMN_Start+0x3e>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	bf14      	ite	ne
 800ba1e:	2301      	movne	r3, #1
 800ba20:	2300      	moveq	r3, #0
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	e015      	b.n	800ba52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b08      	cmp	r3, #8
 800ba2a:	d109      	bne.n	800ba40 <HAL_TIMEx_PWMN_Start+0x58>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	bf14      	ite	ne
 800ba38:	2301      	movne	r3, #1
 800ba3a:	2300      	moveq	r3, #0
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	e008      	b.n	800ba52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	bf14      	ite	ne
 800ba4c:	2301      	movne	r3, #1
 800ba4e:	2300      	moveq	r3, #0
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e073      	b.n	800bb42 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d104      	bne.n	800ba6a <HAL_TIMEx_PWMN_Start+0x82>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2202      	movs	r2, #2
 800ba64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba68:	e013      	b.n	800ba92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d104      	bne.n	800ba7a <HAL_TIMEx_PWMN_Start+0x92>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2202      	movs	r2, #2
 800ba74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba78:	e00b      	b.n	800ba92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	d104      	bne.n	800ba8a <HAL_TIMEx_PWMN_Start+0xa2>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2202      	movs	r2, #2
 800ba84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba88:	e003      	b.n	800ba92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2204      	movs	r2, #4
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 f9ae 	bl	800bdfc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800baae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a25      	ldr	r2, [pc, #148]	; (800bb4c <HAL_TIMEx_PWMN_Start+0x164>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d022      	beq.n	800bb00 <HAL_TIMEx_PWMN_Start+0x118>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bac2:	d01d      	beq.n	800bb00 <HAL_TIMEx_PWMN_Start+0x118>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a21      	ldr	r2, [pc, #132]	; (800bb50 <HAL_TIMEx_PWMN_Start+0x168>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d018      	beq.n	800bb00 <HAL_TIMEx_PWMN_Start+0x118>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a20      	ldr	r2, [pc, #128]	; (800bb54 <HAL_TIMEx_PWMN_Start+0x16c>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d013      	beq.n	800bb00 <HAL_TIMEx_PWMN_Start+0x118>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a1e      	ldr	r2, [pc, #120]	; (800bb58 <HAL_TIMEx_PWMN_Start+0x170>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d00e      	beq.n	800bb00 <HAL_TIMEx_PWMN_Start+0x118>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a1d      	ldr	r2, [pc, #116]	; (800bb5c <HAL_TIMEx_PWMN_Start+0x174>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d009      	beq.n	800bb00 <HAL_TIMEx_PWMN_Start+0x118>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a1b      	ldr	r2, [pc, #108]	; (800bb60 <HAL_TIMEx_PWMN_Start+0x178>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d004      	beq.n	800bb00 <HAL_TIMEx_PWMN_Start+0x118>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a1a      	ldr	r2, [pc, #104]	; (800bb64 <HAL_TIMEx_PWMN_Start+0x17c>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d115      	bne.n	800bb2c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689a      	ldr	r2, [r3, #8]
 800bb06:	4b18      	ldr	r3, [pc, #96]	; (800bb68 <HAL_TIMEx_PWMN_Start+0x180>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b06      	cmp	r3, #6
 800bb10:	d015      	beq.n	800bb3e <HAL_TIMEx_PWMN_Start+0x156>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb18:	d011      	beq.n	800bb3e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f042 0201 	orr.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb2a:	e008      	b.n	800bb3e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f042 0201 	orr.w	r2, r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	e000      	b.n	800bb40 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	40012c00 	.word	0x40012c00
 800bb50:	40000400 	.word	0x40000400
 800bb54:	40000800 	.word	0x40000800
 800bb58:	40000c00 	.word	0x40000c00
 800bb5c:	40013400 	.word	0x40013400
 800bb60:	40014000 	.word	0x40014000
 800bb64:	40015000 	.word	0x40015000
 800bb68:	00010007 	.word	0x00010007

0800bb6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e074      	b.n	800bc6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a34      	ldr	r2, [pc, #208]	; (800bc7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d009      	beq.n	800bbc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a33      	ldr	r2, [pc, #204]	; (800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d004      	beq.n	800bbc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a31      	ldr	r2, [pc, #196]	; (800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d108      	bne.n	800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bbc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bbda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a21      	ldr	r2, [pc, #132]	; (800bc7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d022      	beq.n	800bc42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc04:	d01d      	beq.n	800bc42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a1f      	ldr	r2, [pc, #124]	; (800bc88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d018      	beq.n	800bc42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a1d      	ldr	r2, [pc, #116]	; (800bc8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d013      	beq.n	800bc42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a1c      	ldr	r2, [pc, #112]	; (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d00e      	beq.n	800bc42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a15      	ldr	r2, [pc, #84]	; (800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d009      	beq.n	800bc42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a18      	ldr	r2, [pc, #96]	; (800bc94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d004      	beq.n	800bc42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a11      	ldr	r2, [pc, #68]	; (800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d10c      	bne.n	800bc5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	40012c00 	.word	0x40012c00
 800bc80:	40013400 	.word	0x40013400
 800bc84:	40015000 	.word	0x40015000
 800bc88:	40000400 	.word	0x40000400
 800bc8c:	40000800 	.word	0x40000800
 800bc90:	40000c00 	.word	0x40000c00
 800bc94:	40014000 	.word	0x40014000

0800bc98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bca2:	2300      	movs	r3, #0
 800bca4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d101      	bne.n	800bcb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	e096      	b.n	800bde2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	041b      	lsls	r3, r3, #16
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a2f      	ldr	r2, [pc, #188]	; (800bdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d009      	beq.n	800bd4c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a2d      	ldr	r2, [pc, #180]	; (800bdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d004      	beq.n	800bd4c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a2c      	ldr	r2, [pc, #176]	; (800bdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d106      	bne.n	800bd5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a24      	ldr	r2, [pc, #144]	; (800bdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d009      	beq.n	800bd78 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a22      	ldr	r2, [pc, #136]	; (800bdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d004      	beq.n	800bd78 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a21      	ldr	r2, [pc, #132]	; (800bdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d12b      	bne.n	800bdd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	051b      	lsls	r3, r3, #20
 800bd84:	4313      	orrs	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	4313      	orrs	r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a11      	ldr	r2, [pc, #68]	; (800bdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d009      	beq.n	800bdc2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a10      	ldr	r2, [pc, #64]	; (800bdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d004      	beq.n	800bdc2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a0e      	ldr	r2, [pc, #56]	; (800bdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d106      	bne.n	800bdd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	40012c00 	.word	0x40012c00
 800bdf4:	40013400 	.word	0x40013400
 800bdf8:	40015000 	.word	0x40015000

0800bdfc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	f003 031f 	and.w	r3, r3, #31
 800be0e:	2204      	movs	r2, #4
 800be10:	fa02 f303 	lsl.w	r3, r2, r3
 800be14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a1a      	ldr	r2, [r3, #32]
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	43db      	mvns	r3, r3
 800be1e:	401a      	ands	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a1a      	ldr	r2, [r3, #32]
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	f003 031f 	and.w	r3, r3, #31
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	fa01 f303 	lsl.w	r3, r1, r3
 800be34:	431a      	orrs	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	621a      	str	r2, [r3, #32]
}
 800be3a:	bf00      	nop
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b082      	sub	sp, #8
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d101      	bne.n	800be58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	e042      	b.n	800bede <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7f8 fb92 	bl	8004594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2224      	movs	r2, #36	; 0x24
 800be74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f022 0201 	bic.w	r2, r2, #1
 800be86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fbcf 	bl	800c62c <UART_SetConfig>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b01      	cmp	r3, #1
 800be92:	d101      	bne.n	800be98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e022      	b.n	800bede <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 febf 	bl	800cc24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800beb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bec4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f042 0201 	orr.w	r2, r2, #1
 800bed4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 ff46 	bl	800cd68 <UART_CheckIdleState>
 800bedc:	4603      	mov	r3, r0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08a      	sub	sp, #40	; 0x28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800befc:	2b20      	cmp	r3, #32
 800befe:	d142      	bne.n	800bf86 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <HAL_UART_Receive_DMA+0x24>
 800bf06:	88fb      	ldrh	r3, [r7, #6]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e03b      	b.n	800bf88 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d101      	bne.n	800bf1e <HAL_UART_Receive_DMA+0x36>
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	e034      	b.n	800bf88 <HAL_UART_Receive_DMA+0xa0>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a17      	ldr	r2, [pc, #92]	; (800bf90 <HAL_UART_Receive_DMA+0xa8>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d01f      	beq.n	800bf76 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d018      	beq.n	800bf76 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	e853 3f00 	ldrex	r3, [r3]
 800bf50:	613b      	str	r3, [r7, #16]
   return(result);
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	623b      	str	r3, [r7, #32]
 800bf64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf66:	69f9      	ldr	r1, [r7, #28]
 800bf68:	6a3a      	ldr	r2, [r7, #32]
 800bf6a:	e841 2300 	strex	r3, r2, [r1]
 800bf6e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1e6      	bne.n	800bf44 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bf76:	88fb      	ldrh	r3, [r7, #6]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f001 f807 	bl	800cf90 <UART_Start_Receive_DMA>
 800bf82:	4603      	mov	r3, r0
 800bf84:	e000      	b.n	800bf88 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bf86:	2302      	movs	r3, #2
  }
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3728      	adds	r7, #40	; 0x28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	40008000 	.word	0x40008000

0800bf94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b0ba      	sub	sp, #232	; 0xe8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bfba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bfbe:	f640 030f 	movw	r3, #2063	; 0x80f
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bfc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d11b      	bne.n	800c008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bfd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd4:	f003 0320 	and.w	r3, r3, #32
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d015      	beq.n	800c008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bfdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfe0:	f003 0320 	and.w	r3, r3, #32
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d105      	bne.n	800bff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d009      	beq.n	800c008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 82d6 	beq.w	800c5aa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	4798      	blx	r3
      }
      return;
 800c006:	e2d0      	b.n	800c5aa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 811f 	beq.w	800c250 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c016:	4b8b      	ldr	r3, [pc, #556]	; (800c244 <HAL_UART_IRQHandler+0x2b0>)
 800c018:	4013      	ands	r3, r2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c01e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c022:	4b89      	ldr	r3, [pc, #548]	; (800c248 <HAL_UART_IRQHandler+0x2b4>)
 800c024:	4013      	ands	r3, r2
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 8112 	beq.w	800c250 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d011      	beq.n	800c05c <HAL_UART_IRQHandler+0xc8>
 800c038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2201      	movs	r2, #1
 800c04a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c052:	f043 0201 	orr.w	r2, r3, #1
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c060:	f003 0302 	and.w	r3, r3, #2
 800c064:	2b00      	cmp	r3, #0
 800c066:	d011      	beq.n	800c08c <HAL_UART_IRQHandler+0xf8>
 800c068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00b      	beq.n	800c08c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2202      	movs	r2, #2
 800c07a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c082:	f043 0204 	orr.w	r2, r3, #4
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d011      	beq.n	800c0bc <HAL_UART_IRQHandler+0x128>
 800c098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00b      	beq.n	800c0bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2204      	movs	r2, #4
 800c0aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0b2:	f043 0202 	orr.w	r2, r3, #2
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c0:	f003 0308 	and.w	r3, r3, #8
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d017      	beq.n	800c0f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0cc:	f003 0320 	and.w	r3, r3, #32
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d105      	bne.n	800c0e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c0d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0d8:	4b5a      	ldr	r3, [pc, #360]	; (800c244 <HAL_UART_IRQHandler+0x2b0>)
 800c0da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00b      	beq.n	800c0f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2208      	movs	r2, #8
 800c0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ee:	f043 0208 	orr.w	r2, r3, #8
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c100:	2b00      	cmp	r3, #0
 800c102:	d012      	beq.n	800c12a <HAL_UART_IRQHandler+0x196>
 800c104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00c      	beq.n	800c12a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c120:	f043 0220 	orr.w	r2, r3, #32
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 823c 	beq.w	800c5ae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c13a:	f003 0320 	and.w	r3, r3, #32
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d013      	beq.n	800c16a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d105      	bne.n	800c15a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c14e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d007      	beq.n	800c16a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17e:	2b40      	cmp	r3, #64	; 0x40
 800c180:	d005      	beq.n	800c18e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c186:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d04f      	beq.n	800c22e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 ffe7 	bl	800d162 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c19e:	2b40      	cmp	r3, #64	; 0x40
 800c1a0:	d141      	bne.n	800c226 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1b0:	e853 3f00 	ldrex	r3, [r3]
 800c1b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c1b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c1ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c1d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c1de:	e841 2300 	strex	r3, r2, [r1]
 800c1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1d9      	bne.n	800c1a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d013      	beq.n	800c21e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1fa:	4a14      	ldr	r2, [pc, #80]	; (800c24c <HAL_UART_IRQHandler+0x2b8>)
 800c1fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c202:	4618      	mov	r0, r3
 800c204:	f7fb f888 	bl	8007318 <HAL_DMA_Abort_IT>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d017      	beq.n	800c23e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c218:	4610      	mov	r0, r2
 800c21a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c21c:	e00f      	b.n	800c23e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f9ee 	bl	800c600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c224:	e00b      	b.n	800c23e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f9ea 	bl	800c600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22c:	e007      	b.n	800c23e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f9e6 	bl	800c600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c23c:	e1b7      	b.n	800c5ae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c23e:	bf00      	nop
    return;
 800c240:	e1b5      	b.n	800c5ae <HAL_UART_IRQHandler+0x61a>
 800c242:	bf00      	nop
 800c244:	10000001 	.word	0x10000001
 800c248:	04000120 	.word	0x04000120
 800c24c:	0800d40d 	.word	0x0800d40d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c254:	2b01      	cmp	r3, #1
 800c256:	f040 814a 	bne.w	800c4ee <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25e:	f003 0310 	and.w	r3, r3, #16
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 8143 	beq.w	800c4ee <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c26c:	f003 0310 	and.w	r3, r3, #16
 800c270:	2b00      	cmp	r3, #0
 800c272:	f000 813c 	beq.w	800c4ee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2210      	movs	r2, #16
 800c27c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c288:	2b40      	cmp	r3, #64	; 0x40
 800c28a:	f040 80b5 	bne.w	800c3f8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c29a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 8187 	beq.w	800c5b2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	f080 817f 	bcs.w	800c5b2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 0320 	and.w	r3, r3, #32
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f040 8086 	bne.w	800c3dc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2dc:	e853 3f00 	ldrex	r3, [r3]
 800c2e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c2e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c302:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c306:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c30a:	e841 2300 	strex	r3, r2, [r1]
 800c30e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1da      	bne.n	800c2d0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	3308      	adds	r3, #8
 800c320:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c324:	e853 3f00 	ldrex	r3, [r3]
 800c328:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c32a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c32c:	f023 0301 	bic.w	r3, r3, #1
 800c330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3308      	adds	r3, #8
 800c33a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c33e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c342:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c344:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c346:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e1      	bne.n	800c31a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3308      	adds	r3, #8
 800c35c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c360:	e853 3f00 	ldrex	r3, [r3]
 800c364:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c36c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3308      	adds	r3, #8
 800c376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c37a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c37c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c382:	e841 2300 	strex	r3, r2, [r1]
 800c386:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1e3      	bne.n	800c356 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2220      	movs	r2, #32
 800c392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a4:	e853 3f00 	ldrex	r3, [r3]
 800c3a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ac:	f023 0310 	bic.w	r3, r3, #16
 800c3b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3be:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3c6:	e841 2300 	strex	r3, r2, [r1]
 800c3ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c3cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e4      	bne.n	800c39c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fa ff45 	bl	8007266 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f90f 	bl	800c614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3f6:	e0dc      	b.n	800c5b2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c404:	b29b      	uxth	r3, r3
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c412:	b29b      	uxth	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	f000 80ce 	beq.w	800c5b6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c41a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 80c9 	beq.w	800c5b6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42c:	e853 3f00 	ldrex	r3, [r3]
 800c430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	461a      	mov	r2, r3
 800c442:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c446:	647b      	str	r3, [r7, #68]	; 0x44
 800c448:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c44c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e4      	bne.n	800c424 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3308      	adds	r3, #8
 800c460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	e853 3f00 	ldrex	r3, [r3]
 800c468:	623b      	str	r3, [r7, #32]
   return(result);
 800c46a:	6a3b      	ldr	r3, [r7, #32]
 800c46c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c470:	f023 0301 	bic.w	r3, r3, #1
 800c474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3308      	adds	r3, #8
 800c47e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c482:	633a      	str	r2, [r7, #48]	; 0x30
 800c484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c48a:	e841 2300 	strex	r3, r2, [r1]
 800c48e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1e1      	bne.n	800c45a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2220      	movs	r2, #32
 800c49a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	e853 3f00 	ldrex	r3, [r3]
 800c4b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f023 0310 	bic.w	r3, r3, #16
 800c4be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c4cc:	61fb      	str	r3, [r7, #28]
 800c4ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d0:	69b9      	ldr	r1, [r7, #24]
 800c4d2:	69fa      	ldr	r2, [r7, #28]
 800c4d4:	e841 2300 	strex	r3, r2, [r1]
 800c4d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1e4      	bne.n	800c4aa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c4e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f894 	bl	800c614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c4ec:	e063      	b.n	800c5b6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00e      	beq.n	800c518 <HAL_UART_IRQHandler+0x584>
 800c4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d008      	beq.n	800c518 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c50e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 ffbc 	bl	800d48e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c516:	e051      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c51c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c520:	2b00      	cmp	r3, #0
 800c522:	d014      	beq.n	800c54e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d105      	bne.n	800c53c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d008      	beq.n	800c54e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c540:	2b00      	cmp	r3, #0
 800c542:	d03a      	beq.n	800c5ba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	4798      	blx	r3
    }
    return;
 800c54c:	e035      	b.n	800c5ba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	d009      	beq.n	800c56e <HAL_UART_IRQHandler+0x5da>
 800c55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 ff66 	bl	800d438 <UART_EndTransmit_IT>
    return;
 800c56c:	e026      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c576:	2b00      	cmp	r3, #0
 800c578:	d009      	beq.n	800c58e <HAL_UART_IRQHandler+0x5fa>
 800c57a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c57e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 ff95 	bl	800d4b6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c58c:	e016      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d010      	beq.n	800c5bc <HAL_UART_IRQHandler+0x628>
 800c59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	da0c      	bge.n	800c5bc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 ff7d 	bl	800d4a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5a8:	e008      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
      return;
 800c5aa:	bf00      	nop
 800c5ac:	e006      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
    return;
 800c5ae:	bf00      	nop
 800c5b0:	e004      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
      return;
 800c5b2:	bf00      	nop
 800c5b4:	e002      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
      return;
 800c5b6:	bf00      	nop
 800c5b8:	e000      	b.n	800c5bc <HAL_UART_IRQHandler+0x628>
    return;
 800c5ba:	bf00      	nop
  }
}
 800c5bc:	37e8      	adds	r7, #232	; 0xe8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop

0800c5c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c608:	bf00      	nop
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	460b      	mov	r3, r1
 800c61e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c62c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c630:	b08c      	sub	sp, #48	; 0x30
 800c632:	af00      	add	r7, sp, #0
 800c634:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	431a      	orrs	r2, r3
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	431a      	orrs	r2, r3
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	4313      	orrs	r3, r2
 800c652:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4baa      	ldr	r3, [pc, #680]	; (800c904 <UART_SetConfig+0x2d8>)
 800c65c:	4013      	ands	r3, r2
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c664:	430b      	orrs	r3, r1
 800c666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	68da      	ldr	r2, [r3, #12]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	430a      	orrs	r2, r1
 800c67c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a9f      	ldr	r2, [pc, #636]	; (800c908 <UART_SetConfig+0x2dc>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d004      	beq.n	800c698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c694:	4313      	orrs	r3, r2
 800c696:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c6a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	6812      	ldr	r2, [r2, #0]
 800c6aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6ac:	430b      	orrs	r3, r1
 800c6ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b6:	f023 010f 	bic.w	r1, r3, #15
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a90      	ldr	r2, [pc, #576]	; (800c90c <UART_SetConfig+0x2e0>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d125      	bne.n	800c71c <UART_SetConfig+0xf0>
 800c6d0:	4b8f      	ldr	r3, [pc, #572]	; (800c910 <UART_SetConfig+0x2e4>)
 800c6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6d6:	f003 0303 	and.w	r3, r3, #3
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d81a      	bhi.n	800c714 <UART_SetConfig+0xe8>
 800c6de:	a201      	add	r2, pc, #4	; (adr r2, 800c6e4 <UART_SetConfig+0xb8>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c705 	.word	0x0800c705
 800c6ec:	0800c6fd 	.word	0x0800c6fd
 800c6f0:	0800c70d 	.word	0x0800c70d
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6fa:	e116      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c702:	e112      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c704:	2304      	movs	r3, #4
 800c706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c70a:	e10e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c70c:	2308      	movs	r3, #8
 800c70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c712:	e10a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c714:	2310      	movs	r3, #16
 800c716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c71a:	e106      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a7c      	ldr	r2, [pc, #496]	; (800c914 <UART_SetConfig+0x2e8>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d138      	bne.n	800c798 <UART_SetConfig+0x16c>
 800c726:	4b7a      	ldr	r3, [pc, #488]	; (800c910 <UART_SetConfig+0x2e4>)
 800c728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c72c:	f003 030c 	and.w	r3, r3, #12
 800c730:	2b0c      	cmp	r3, #12
 800c732:	d82d      	bhi.n	800c790 <UART_SetConfig+0x164>
 800c734:	a201      	add	r2, pc, #4	; (adr r2, 800c73c <UART_SetConfig+0x110>)
 800c736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73a:	bf00      	nop
 800c73c:	0800c771 	.word	0x0800c771
 800c740:	0800c791 	.word	0x0800c791
 800c744:	0800c791 	.word	0x0800c791
 800c748:	0800c791 	.word	0x0800c791
 800c74c:	0800c781 	.word	0x0800c781
 800c750:	0800c791 	.word	0x0800c791
 800c754:	0800c791 	.word	0x0800c791
 800c758:	0800c791 	.word	0x0800c791
 800c75c:	0800c779 	.word	0x0800c779
 800c760:	0800c791 	.word	0x0800c791
 800c764:	0800c791 	.word	0x0800c791
 800c768:	0800c791 	.word	0x0800c791
 800c76c:	0800c789 	.word	0x0800c789
 800c770:	2300      	movs	r3, #0
 800c772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c776:	e0d8      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c778:	2302      	movs	r3, #2
 800c77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c77e:	e0d4      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c780:	2304      	movs	r3, #4
 800c782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c786:	e0d0      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c788:	2308      	movs	r3, #8
 800c78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c78e:	e0cc      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c790:	2310      	movs	r3, #16
 800c792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c796:	e0c8      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a5e      	ldr	r2, [pc, #376]	; (800c918 <UART_SetConfig+0x2ec>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d125      	bne.n	800c7ee <UART_SetConfig+0x1c2>
 800c7a2:	4b5b      	ldr	r3, [pc, #364]	; (800c910 <UART_SetConfig+0x2e4>)
 800c7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c7ac:	2b30      	cmp	r3, #48	; 0x30
 800c7ae:	d016      	beq.n	800c7de <UART_SetConfig+0x1b2>
 800c7b0:	2b30      	cmp	r3, #48	; 0x30
 800c7b2:	d818      	bhi.n	800c7e6 <UART_SetConfig+0x1ba>
 800c7b4:	2b20      	cmp	r3, #32
 800c7b6:	d00a      	beq.n	800c7ce <UART_SetConfig+0x1a2>
 800c7b8:	2b20      	cmp	r3, #32
 800c7ba:	d814      	bhi.n	800c7e6 <UART_SetConfig+0x1ba>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <UART_SetConfig+0x19a>
 800c7c0:	2b10      	cmp	r3, #16
 800c7c2:	d008      	beq.n	800c7d6 <UART_SetConfig+0x1aa>
 800c7c4:	e00f      	b.n	800c7e6 <UART_SetConfig+0x1ba>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7cc:	e0ad      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7d4:	e0a9      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7d6:	2304      	movs	r3, #4
 800c7d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7dc:	e0a5      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7de:	2308      	movs	r3, #8
 800c7e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7e4:	e0a1      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7e6:	2310      	movs	r3, #16
 800c7e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ec:	e09d      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a4a      	ldr	r2, [pc, #296]	; (800c91c <UART_SetConfig+0x2f0>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d125      	bne.n	800c844 <UART_SetConfig+0x218>
 800c7f8:	4b45      	ldr	r3, [pc, #276]	; (800c910 <UART_SetConfig+0x2e4>)
 800c7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c802:	2bc0      	cmp	r3, #192	; 0xc0
 800c804:	d016      	beq.n	800c834 <UART_SetConfig+0x208>
 800c806:	2bc0      	cmp	r3, #192	; 0xc0
 800c808:	d818      	bhi.n	800c83c <UART_SetConfig+0x210>
 800c80a:	2b80      	cmp	r3, #128	; 0x80
 800c80c:	d00a      	beq.n	800c824 <UART_SetConfig+0x1f8>
 800c80e:	2b80      	cmp	r3, #128	; 0x80
 800c810:	d814      	bhi.n	800c83c <UART_SetConfig+0x210>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d002      	beq.n	800c81c <UART_SetConfig+0x1f0>
 800c816:	2b40      	cmp	r3, #64	; 0x40
 800c818:	d008      	beq.n	800c82c <UART_SetConfig+0x200>
 800c81a:	e00f      	b.n	800c83c <UART_SetConfig+0x210>
 800c81c:	2300      	movs	r3, #0
 800c81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c822:	e082      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c824:	2302      	movs	r3, #2
 800c826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c82a:	e07e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c82c:	2304      	movs	r3, #4
 800c82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c832:	e07a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c834:	2308      	movs	r3, #8
 800c836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c83a:	e076      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c83c:	2310      	movs	r3, #16
 800c83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c842:	e072      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a35      	ldr	r2, [pc, #212]	; (800c920 <UART_SetConfig+0x2f4>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d12a      	bne.n	800c8a4 <UART_SetConfig+0x278>
 800c84e:	4b30      	ldr	r3, [pc, #192]	; (800c910 <UART_SetConfig+0x2e4>)
 800c850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c85c:	d01a      	beq.n	800c894 <UART_SetConfig+0x268>
 800c85e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c862:	d81b      	bhi.n	800c89c <UART_SetConfig+0x270>
 800c864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c868:	d00c      	beq.n	800c884 <UART_SetConfig+0x258>
 800c86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c86e:	d815      	bhi.n	800c89c <UART_SetConfig+0x270>
 800c870:	2b00      	cmp	r3, #0
 800c872:	d003      	beq.n	800c87c <UART_SetConfig+0x250>
 800c874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c878:	d008      	beq.n	800c88c <UART_SetConfig+0x260>
 800c87a:	e00f      	b.n	800c89c <UART_SetConfig+0x270>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c882:	e052      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c884:	2302      	movs	r3, #2
 800c886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c88a:	e04e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c88c:	2304      	movs	r3, #4
 800c88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c892:	e04a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c894:	2308      	movs	r3, #8
 800c896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c89a:	e046      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c89c:	2310      	movs	r3, #16
 800c89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8a2:	e042      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a17      	ldr	r2, [pc, #92]	; (800c908 <UART_SetConfig+0x2dc>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d13a      	bne.n	800c924 <UART_SetConfig+0x2f8>
 800c8ae:	4b18      	ldr	r3, [pc, #96]	; (800c910 <UART_SetConfig+0x2e4>)
 800c8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c8b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8bc:	d01a      	beq.n	800c8f4 <UART_SetConfig+0x2c8>
 800c8be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8c2:	d81b      	bhi.n	800c8fc <UART_SetConfig+0x2d0>
 800c8c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8c8:	d00c      	beq.n	800c8e4 <UART_SetConfig+0x2b8>
 800c8ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8ce:	d815      	bhi.n	800c8fc <UART_SetConfig+0x2d0>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d003      	beq.n	800c8dc <UART_SetConfig+0x2b0>
 800c8d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8d8:	d008      	beq.n	800c8ec <UART_SetConfig+0x2c0>
 800c8da:	e00f      	b.n	800c8fc <UART_SetConfig+0x2d0>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8e2:	e022      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ea:	e01e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8f2:	e01a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8f4:	2308      	movs	r3, #8
 800c8f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8fa:	e016      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c902:	e012      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c904:	cfff69f3 	.word	0xcfff69f3
 800c908:	40008000 	.word	0x40008000
 800c90c:	40013800 	.word	0x40013800
 800c910:	40021000 	.word	0x40021000
 800c914:	40004400 	.word	0x40004400
 800c918:	40004800 	.word	0x40004800
 800c91c:	40004c00 	.word	0x40004c00
 800c920:	40005000 	.word	0x40005000
 800c924:	2310      	movs	r3, #16
 800c926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4aae      	ldr	r2, [pc, #696]	; (800cbe8 <UART_SetConfig+0x5bc>)
 800c930:	4293      	cmp	r3, r2
 800c932:	f040 8097 	bne.w	800ca64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c93a:	2b08      	cmp	r3, #8
 800c93c:	d823      	bhi.n	800c986 <UART_SetConfig+0x35a>
 800c93e:	a201      	add	r2, pc, #4	; (adr r2, 800c944 <UART_SetConfig+0x318>)
 800c940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c944:	0800c969 	.word	0x0800c969
 800c948:	0800c987 	.word	0x0800c987
 800c94c:	0800c971 	.word	0x0800c971
 800c950:	0800c987 	.word	0x0800c987
 800c954:	0800c977 	.word	0x0800c977
 800c958:	0800c987 	.word	0x0800c987
 800c95c:	0800c987 	.word	0x0800c987
 800c960:	0800c987 	.word	0x0800c987
 800c964:	0800c97f 	.word	0x0800c97f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c968:	f7fd fd00 	bl	800a36c <HAL_RCC_GetPCLK1Freq>
 800c96c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c96e:	e010      	b.n	800c992 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c970:	4b9e      	ldr	r3, [pc, #632]	; (800cbec <UART_SetConfig+0x5c0>)
 800c972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c974:	e00d      	b.n	800c992 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c976:	f7fd fc8b 	bl	800a290 <HAL_RCC_GetSysClockFreq>
 800c97a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c97c:	e009      	b.n	800c992 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c97e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c984:	e005      	b.n	800c992 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 8130 	beq.w	800cbfa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99e:	4a94      	ldr	r2, [pc, #592]	; (800cbf0 <UART_SetConfig+0x5c4>)
 800c9a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	69ba      	ldr	r2, [r7, #24]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d305      	bcc.n	800c9ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9c4:	69ba      	ldr	r2, [r7, #24]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d903      	bls.n	800c9d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c9d0:	e113      	b.n	800cbfa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	60bb      	str	r3, [r7, #8]
 800c9d8:	60fa      	str	r2, [r7, #12]
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9de:	4a84      	ldr	r2, [pc, #528]	; (800cbf0 <UART_SetConfig+0x5c4>)
 800c9e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	603b      	str	r3, [r7, #0]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9f4:	f7f4 f900 	bl	8000bf8 <__aeabi_uldivmod>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	4619      	mov	r1, r3
 800ca00:	f04f 0200 	mov.w	r2, #0
 800ca04:	f04f 0300 	mov.w	r3, #0
 800ca08:	020b      	lsls	r3, r1, #8
 800ca0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca0e:	0202      	lsls	r2, r0, #8
 800ca10:	6979      	ldr	r1, [r7, #20]
 800ca12:	6849      	ldr	r1, [r1, #4]
 800ca14:	0849      	lsrs	r1, r1, #1
 800ca16:	2000      	movs	r0, #0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	eb12 0804 	adds.w	r8, r2, r4
 800ca20:	eb43 0905 	adc.w	r9, r3, r5
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	469a      	mov	sl, r3
 800ca2c:	4693      	mov	fp, r2
 800ca2e:	4652      	mov	r2, sl
 800ca30:	465b      	mov	r3, fp
 800ca32:	4640      	mov	r0, r8
 800ca34:	4649      	mov	r1, r9
 800ca36:	f7f4 f8df 	bl	8000bf8 <__aeabi_uldivmod>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4613      	mov	r3, r2
 800ca40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca48:	d308      	bcc.n	800ca5c <UART_SetConfig+0x430>
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca50:	d204      	bcs.n	800ca5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6a3a      	ldr	r2, [r7, #32]
 800ca58:	60da      	str	r2, [r3, #12]
 800ca5a:	e0ce      	b.n	800cbfa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ca62:	e0ca      	b.n	800cbfa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	69db      	ldr	r3, [r3, #28]
 800ca68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca6c:	d166      	bne.n	800cb3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ca6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca72:	2b08      	cmp	r3, #8
 800ca74:	d827      	bhi.n	800cac6 <UART_SetConfig+0x49a>
 800ca76:	a201      	add	r2, pc, #4	; (adr r2, 800ca7c <UART_SetConfig+0x450>)
 800ca78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7c:	0800caa1 	.word	0x0800caa1
 800ca80:	0800caa9 	.word	0x0800caa9
 800ca84:	0800cab1 	.word	0x0800cab1
 800ca88:	0800cac7 	.word	0x0800cac7
 800ca8c:	0800cab7 	.word	0x0800cab7
 800ca90:	0800cac7 	.word	0x0800cac7
 800ca94:	0800cac7 	.word	0x0800cac7
 800ca98:	0800cac7 	.word	0x0800cac7
 800ca9c:	0800cabf 	.word	0x0800cabf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caa0:	f7fd fc64 	bl	800a36c <HAL_RCC_GetPCLK1Freq>
 800caa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800caa6:	e014      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800caa8:	f7fd fc76 	bl	800a398 <HAL_RCC_GetPCLK2Freq>
 800caac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800caae:	e010      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cab0:	4b4e      	ldr	r3, [pc, #312]	; (800cbec <UART_SetConfig+0x5c0>)
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cab4:	e00d      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cab6:	f7fd fbeb 	bl	800a290 <HAL_RCC_GetSysClockFreq>
 800caba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cabc:	e009      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cabe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cac4:	e005      	b.n	800cad2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cac6:	2300      	movs	r3, #0
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8090 	beq.w	800cbfa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cade:	4a44      	ldr	r2, [pc, #272]	; (800cbf0 <UART_SetConfig+0x5c4>)
 800cae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae4:	461a      	mov	r2, r3
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	fbb3 f3f2 	udiv	r3, r3, r2
 800caec:	005a      	lsls	r2, r3, #1
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	085b      	lsrs	r3, r3, #1
 800caf4:	441a      	add	r2, r3
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cafe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	2b0f      	cmp	r3, #15
 800cb04:	d916      	bls.n	800cb34 <UART_SetConfig+0x508>
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb0c:	d212      	bcs.n	800cb34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	f023 030f 	bic.w	r3, r3, #15
 800cb16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	085b      	lsrs	r3, r3, #1
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	8bfb      	ldrh	r3, [r7, #30]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	8bfa      	ldrh	r2, [r7, #30]
 800cb30:	60da      	str	r2, [r3, #12]
 800cb32:	e062      	b.n	800cbfa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cb3a:	e05e      	b.n	800cbfa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb40:	2b08      	cmp	r3, #8
 800cb42:	d828      	bhi.n	800cb96 <UART_SetConfig+0x56a>
 800cb44:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <UART_SetConfig+0x520>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cb71 	.word	0x0800cb71
 800cb50:	0800cb79 	.word	0x0800cb79
 800cb54:	0800cb81 	.word	0x0800cb81
 800cb58:	0800cb97 	.word	0x0800cb97
 800cb5c:	0800cb87 	.word	0x0800cb87
 800cb60:	0800cb97 	.word	0x0800cb97
 800cb64:	0800cb97 	.word	0x0800cb97
 800cb68:	0800cb97 	.word	0x0800cb97
 800cb6c:	0800cb8f 	.word	0x0800cb8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb70:	f7fd fbfc 	bl	800a36c <HAL_RCC_GetPCLK1Freq>
 800cb74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb76:	e014      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb78:	f7fd fc0e 	bl	800a398 <HAL_RCC_GetPCLK2Freq>
 800cb7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb7e:	e010      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb80:	4b1a      	ldr	r3, [pc, #104]	; (800cbec <UART_SetConfig+0x5c0>)
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb84:	e00d      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb86:	f7fd fb83 	bl	800a290 <HAL_RCC_GetSysClockFreq>
 800cb8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb8c:	e009      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb94:	e005      	b.n	800cba2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cba0:	bf00      	nop
    }

    if (pclk != 0U)
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d028      	beq.n	800cbfa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbac:	4a10      	ldr	r2, [pc, #64]	; (800cbf0 <UART_SetConfig+0x5c4>)
 800cbae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	085b      	lsrs	r3, r3, #1
 800cbc0:	441a      	add	r2, r3
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	2b0f      	cmp	r3, #15
 800cbd0:	d910      	bls.n	800cbf4 <UART_SetConfig+0x5c8>
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd8:	d20c      	bcs.n	800cbf4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbda:	6a3b      	ldr	r3, [r7, #32]
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	60da      	str	r2, [r3, #12]
 800cbe4:	e009      	b.n	800cbfa <UART_SetConfig+0x5ce>
 800cbe6:	bf00      	nop
 800cbe8:	40008000 	.word	0x40008000
 800cbec:	00f42400 	.word	0x00f42400
 800cbf0:	0801520c 	.word	0x0801520c
      }
      else
      {
        ret = HAL_ERROR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2201      	movs	r2, #1
 800cc06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2200      	movs	r2, #0
 800cc14:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cc16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3730      	adds	r7, #48	; 0x30
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cc24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc30:	f003 0301 	and.w	r3, r3, #1
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00a      	beq.n	800cc4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc52:	f003 0302 	and.w	r3, r3, #2
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00a      	beq.n	800cc70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00a      	beq.n	800cc92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	430a      	orrs	r2, r1
 800cc90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc96:	f003 0308 	and.w	r3, r3, #8
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00a      	beq.n	800ccb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb8:	f003 0310 	and.w	r3, r3, #16
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00a      	beq.n	800ccd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	430a      	orrs	r2, r1
 800ccd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00a      	beq.n	800ccf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	430a      	orrs	r2, r1
 800ccf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d01a      	beq.n	800cd3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	430a      	orrs	r2, r1
 800cd18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd22:	d10a      	bne.n	800cd3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	605a      	str	r2, [r3, #4]
  }
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af02      	add	r7, sp, #8
 800cd6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd78:	f7f7 ff12 	bl	8004ba0 <HAL_GetTick>
 800cd7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 0308 	and.w	r3, r3, #8
 800cd88:	2b08      	cmp	r3, #8
 800cd8a:	d10e      	bne.n	800cdaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f82f 	bl	800cdfe <UART_WaitOnFlagUntilTimeout>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d001      	beq.n	800cdaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cda6:	2303      	movs	r3, #3
 800cda8:	e025      	b.n	800cdf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 0304 	and.w	r3, r3, #4
 800cdb4:	2b04      	cmp	r3, #4
 800cdb6:	d10e      	bne.n	800cdd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 f819 	bl	800cdfe <UART_WaitOnFlagUntilTimeout>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	e00f      	b.n	800cdf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2220      	movs	r2, #32
 800cdda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2220      	movs	r2, #32
 800cde2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b09c      	sub	sp, #112	; 0x70
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	60f8      	str	r0, [r7, #12]
 800ce06:	60b9      	str	r1, [r7, #8]
 800ce08:	603b      	str	r3, [r7, #0]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce0e:	e0a9      	b.n	800cf64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	f000 80a5 	beq.w	800cf64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce1a:	f7f7 fec1 	bl	8004ba0 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d302      	bcc.n	800ce30 <UART_WaitOnFlagUntilTimeout+0x32>
 800ce2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d140      	bne.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce38:	e853 3f00 	ldrex	r3, [r3]
 800ce3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce44:	667b      	str	r3, [r7, #100]	; 0x64
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce56:	e841 2300 	strex	r3, r2, [r1]
 800ce5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ce5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1e6      	bne.n	800ce30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3308      	adds	r3, #8
 800ce68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce6c:	e853 3f00 	ldrex	r3, [r3]
 800ce70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	f023 0301 	bic.w	r3, r3, #1
 800ce78:	663b      	str	r3, [r7, #96]	; 0x60
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3308      	adds	r3, #8
 800ce80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce82:	64ba      	str	r2, [r7, #72]	; 0x48
 800ce84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce8a:	e841 2300 	strex	r3, r2, [r1]
 800ce8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ce90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1e5      	bne.n	800ce62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e069      	b.n	800cf86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 0304 	and.w	r3, r3, #4
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d051      	beq.n	800cf64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	69db      	ldr	r3, [r3, #28]
 800cec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cece:	d149      	bne.n	800cf64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ced8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ceee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cef8:	637b      	str	r3, [r7, #52]	; 0x34
 800cefa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cefe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf00:	e841 2300 	strex	r3, r2, [r1]
 800cf04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1e6      	bne.n	800ceda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3308      	adds	r3, #8
 800cf12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	e853 3f00 	ldrex	r3, [r3]
 800cf1a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3308      	adds	r3, #8
 800cf2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf2c:	623a      	str	r2, [r7, #32]
 800cf2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf30:	69f9      	ldr	r1, [r7, #28]
 800cf32:	6a3a      	ldr	r2, [r7, #32]
 800cf34:	e841 2300 	strex	r3, r2, [r1]
 800cf38:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1e5      	bne.n	800cf0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2220      	movs	r2, #32
 800cf44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2220      	movs	r2, #32
 800cf4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2220      	movs	r2, #32
 800cf54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e010      	b.n	800cf86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	69da      	ldr	r2, [r3, #28]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	bf0c      	ite	eq
 800cf74:	2301      	moveq	r3, #1
 800cf76:	2300      	movne	r3, #0
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	f43f af46 	beq.w	800ce10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3770      	adds	r7, #112	; 0x70
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
	...

0800cf90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b096      	sub	sp, #88	; 0x58
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	88fa      	ldrh	r2, [r7, #6]
 800cfa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2222      	movs	r2, #34	; 0x22
 800cfb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d02c      	beq.n	800d01e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfc8:	4a42      	ldr	r2, [pc, #264]	; (800d0d4 <UART_Start_Receive_DMA+0x144>)
 800cfca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfd0:	4a41      	ldr	r2, [pc, #260]	; (800d0d8 <UART_Start_Receive_DMA+0x148>)
 800cfd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfd8:	4a40      	ldr	r2, [pc, #256]	; (800d0dc <UART_Start_Receive_DMA+0x14c>)
 800cfda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3324      	adds	r3, #36	; 0x24
 800cfee:	4619      	mov	r1, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff4:	461a      	mov	r2, r3
 800cff6:	88fb      	ldrh	r3, [r7, #6]
 800cff8:	f7fa f8ba 	bl	8007170 <HAL_DMA_Start_IT>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00d      	beq.n	800d01e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2210      	movs	r2, #16
 800d006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2220      	movs	r2, #32
 800d016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	e055      	b.n	800d0ca <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d018      	beq.n	800d060 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d036:	e853 3f00 	ldrex	r3, [r3]
 800d03a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d042:	657b      	str	r3, [r7, #84]	; 0x54
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	461a      	mov	r2, r3
 800d04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d04c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d04e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d050:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d054:	e841 2300 	strex	r3, r2, [r1]
 800d058:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1e6      	bne.n	800d02e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3308      	adds	r3, #8
 800d066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	e853 3f00 	ldrex	r3, [r3]
 800d06e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	f043 0301 	orr.w	r3, r3, #1
 800d076:	653b      	str	r3, [r7, #80]	; 0x50
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3308      	adds	r3, #8
 800d07e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d080:	637a      	str	r2, [r7, #52]	; 0x34
 800d082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d088:	e841 2300 	strex	r3, r2, [r1]
 800d08c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1e5      	bne.n	800d060 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	3308      	adds	r3, #8
 800d09a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	e853 3f00 	ldrex	r3, [r3]
 800d0a2:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0b4:	623a      	str	r2, [r7, #32]
 800d0b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b8:	69f9      	ldr	r1, [r7, #28]
 800d0ba:	6a3a      	ldr	r2, [r7, #32]
 800d0bc:	e841 2300 	strex	r3, r2, [r1]
 800d0c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1e5      	bne.n	800d094 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3758      	adds	r7, #88	; 0x58
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0800d22f 	.word	0x0800d22f
 800d0d8:	0800d355 	.word	0x0800d355
 800d0dc:	0800d38d 	.word	0x0800d38d

0800d0e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b08f      	sub	sp, #60	; 0x3c
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	e853 3f00 	ldrex	r3, [r3]
 800d0f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d0fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	461a      	mov	r2, r3
 800d104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d106:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d108:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d10c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10e:	e841 2300 	strex	r3, r2, [r1]
 800d112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1e6      	bne.n	800d0e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	3308      	adds	r3, #8
 800d120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	e853 3f00 	ldrex	r3, [r3]
 800d128:	60bb      	str	r3, [r7, #8]
   return(result);
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d130:	633b      	str	r3, [r7, #48]	; 0x30
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3308      	adds	r3, #8
 800d138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d13a:	61ba      	str	r2, [r7, #24]
 800d13c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d13e:	6979      	ldr	r1, [r7, #20]
 800d140:	69ba      	ldr	r2, [r7, #24]
 800d142:	e841 2300 	strex	r3, r2, [r1]
 800d146:	613b      	str	r3, [r7, #16]
   return(result);
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d1e5      	bne.n	800d11a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2220      	movs	r2, #32
 800d152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d156:	bf00      	nop
 800d158:	373c      	adds	r7, #60	; 0x3c
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr

0800d162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d162:	b480      	push	{r7}
 800d164:	b095      	sub	sp, #84	; 0x54
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d172:	e853 3f00 	ldrex	r3, [r3]
 800d176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d17e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	461a      	mov	r2, r3
 800d186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d188:	643b      	str	r3, [r7, #64]	; 0x40
 800d18a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d18c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d18e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d190:	e841 2300 	strex	r3, r2, [r1]
 800d194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1e6      	bne.n	800d16a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a4:	6a3b      	ldr	r3, [r7, #32]
 800d1a6:	e853 3f00 	ldrex	r3, [r3]
 800d1aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1b2:	f023 0301 	bic.w	r3, r3, #1
 800d1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3308      	adds	r3, #8
 800d1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1c8:	e841 2300 	strex	r3, r2, [r1]
 800d1cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1e3      	bne.n	800d19c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d118      	bne.n	800d20e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	e853 3f00 	ldrex	r3, [r3]
 800d1e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	f023 0310 	bic.w	r3, r3, #16
 800d1f0:	647b      	str	r3, [r7, #68]	; 0x44
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1fa:	61bb      	str	r3, [r7, #24]
 800d1fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fe:	6979      	ldr	r1, [r7, #20]
 800d200:	69ba      	ldr	r2, [r7, #24]
 800d202:	e841 2300 	strex	r3, r2, [r1]
 800d206:	613b      	str	r3, [r7, #16]
   return(result);
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1e6      	bne.n	800d1dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2220      	movs	r2, #32
 800d212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d222:	bf00      	nop
 800d224:	3754      	adds	r7, #84	; 0x54
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b09c      	sub	sp, #112	; 0x70
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 0320 	and.w	r3, r3, #32
 800d246:	2b00      	cmp	r3, #0
 800d248:	d171      	bne.n	800d32e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d24a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d24c:	2200      	movs	r2, #0
 800d24e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d25a:	e853 3f00 	ldrex	r3, [r3]
 800d25e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d266:	66bb      	str	r3, [r7, #104]	; 0x68
 800d268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	461a      	mov	r2, r3
 800d26e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d270:	65bb      	str	r3, [r7, #88]	; 0x58
 800d272:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d278:	e841 2300 	strex	r3, r2, [r1]
 800d27c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e6      	bne.n	800d252 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3308      	adds	r3, #8
 800d28a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28e:	e853 3f00 	ldrex	r3, [r3]
 800d292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d296:	f023 0301 	bic.w	r3, r3, #1
 800d29a:	667b      	str	r3, [r7, #100]	; 0x64
 800d29c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3308      	adds	r3, #8
 800d2a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d2a4:	647a      	str	r2, [r7, #68]	; 0x44
 800d2a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2ac:	e841 2300 	strex	r3, r2, [r1]
 800d2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1e5      	bne.n	800d284 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3308      	adds	r3, #8
 800d2be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c2:	e853 3f00 	ldrex	r3, [r3]
 800d2c6:	623b      	str	r3, [r7, #32]
   return(result);
 800d2c8:	6a3b      	ldr	r3, [r7, #32]
 800d2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ce:	663b      	str	r3, [r7, #96]	; 0x60
 800d2d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3308      	adds	r3, #8
 800d2d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2d8:	633a      	str	r2, [r7, #48]	; 0x30
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e0:	e841 2300 	strex	r3, r2, [r1]
 800d2e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1e5      	bne.n	800d2b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d2ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d118      	bne.n	800d32e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	e853 3f00 	ldrex	r3, [r3]
 800d308:	60fb      	str	r3, [r7, #12]
   return(result);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f023 0310 	bic.w	r3, r3, #16
 800d310:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	461a      	mov	r2, r3
 800d318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d31a:	61fb      	str	r3, [r7, #28]
 800d31c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31e:	69b9      	ldr	r1, [r7, #24]
 800d320:	69fa      	ldr	r2, [r7, #28]
 800d322:	e841 2300 	strex	r3, r2, [r1]
 800d326:	617b      	str	r3, [r7, #20]
   return(result);
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1e6      	bne.n	800d2fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d332:	2b01      	cmp	r3, #1
 800d334:	d107      	bne.n	800d346 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d33c:	4619      	mov	r1, r3
 800d33e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d340:	f7ff f968 	bl	800c614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d344:	e002      	b.n	800d34c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d346:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d348:	f7ff f946 	bl	800c5d8 <HAL_UART_RxCpltCallback>
}
 800d34c:	bf00      	nop
 800d34e:	3770      	adds	r7, #112	; 0x70
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d360:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d366:	2b01      	cmp	r3, #1
 800d368:	d109      	bne.n	800d37e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d370:	085b      	lsrs	r3, r3, #1
 800d372:	b29b      	uxth	r3, r3
 800d374:	4619      	mov	r1, r3
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7ff f94c 	bl	800c614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d37c:	e002      	b.n	800d384 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff f934 	bl	800c5ec <HAL_UART_RxHalfCpltCallback>
}
 800d384:	bf00      	nop
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d398:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b4:	2b80      	cmp	r3, #128	; 0x80
 800d3b6:	d109      	bne.n	800d3cc <UART_DMAError+0x40>
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	2b21      	cmp	r3, #33	; 0x21
 800d3bc:	d106      	bne.n	800d3cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d3c6:	6978      	ldr	r0, [r7, #20]
 800d3c8:	f7ff fe8a 	bl	800d0e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d6:	2b40      	cmp	r3, #64	; 0x40
 800d3d8:	d109      	bne.n	800d3ee <UART_DMAError+0x62>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b22      	cmp	r3, #34	; 0x22
 800d3de:	d106      	bne.n	800d3ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d3e8:	6978      	ldr	r0, [r7, #20]
 800d3ea:	f7ff feba 	bl	800d162 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f4:	f043 0210 	orr.w	r2, r3, #16
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3fe:	6978      	ldr	r0, [r7, #20]
 800d400:	f7ff f8fe 	bl	800c600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d404:	bf00      	nop
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7ff f8e8 	bl	800c600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d430:	bf00      	nop
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b088      	sub	sp, #32
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	e853 3f00 	ldrex	r3, [r3]
 800d44c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d454:	61fb      	str	r3, [r7, #28]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	61bb      	str	r3, [r7, #24]
 800d460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d462:	6979      	ldr	r1, [r7, #20]
 800d464:	69ba      	ldr	r2, [r7, #24]
 800d466:	e841 2300 	strex	r3, r2, [r1]
 800d46a:	613b      	str	r3, [r7, #16]
   return(result);
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e6      	bne.n	800d440 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2220      	movs	r2, #32
 800d476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff f89f 	bl	800c5c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d486:	bf00      	nop
 800d488:	3720      	adds	r7, #32
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d496:	bf00      	nop
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d4a2:	b480      	push	{r7}
 800d4a4:	b083      	sub	sp, #12
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d4aa:	bf00      	nop
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d4be:	bf00      	nop
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b085      	sub	sp, #20
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d101      	bne.n	800d4e0 <HAL_UARTEx_DisableFifoMode+0x16>
 800d4dc:	2302      	movs	r3, #2
 800d4de:	e027      	b.n	800d530 <HAL_UARTEx_DisableFifoMode+0x66>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2224      	movs	r2, #36	; 0x24
 800d4ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f022 0201 	bic.w	r2, r2, #1
 800d506:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d50e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2220      	movs	r2, #32
 800d522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d101      	bne.n	800d554 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d550:	2302      	movs	r3, #2
 800d552:	e02d      	b.n	800d5b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2224      	movs	r2, #36	; 0x24
 800d560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f022 0201 	bic.w	r2, r2, #1
 800d57a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	430a      	orrs	r2, r1
 800d58e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f8ab 	bl	800d6ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2220      	movs	r2, #32
 800d5a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d101      	bne.n	800d5d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	e02d      	b.n	800d62c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2224      	movs	r2, #36	; 0x24
 800d5dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f022 0201 	bic.w	r2, r2, #1
 800d5f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	430a      	orrs	r2, r1
 800d60a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f86d 	bl	800d6ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2220      	movs	r2, #32
 800d61e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08c      	sub	sp, #48	; 0x30
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	4613      	mov	r3, r2
 800d640:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d648:	2b20      	cmp	r3, #32
 800d64a:	d14a      	bne.n	800d6e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800d652:	88fb      	ldrh	r3, [r7, #6]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d101      	bne.n	800d65c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	e043      	b.n	800d6e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d662:	2b01      	cmp	r3, #1
 800d664:	d101      	bne.n	800d66a <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800d666:	2302      	movs	r3, #2
 800d668:	e03c      	b.n	800d6e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2201      	movs	r2, #1
 800d676:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800d678:	88fb      	ldrh	r3, [r7, #6]
 800d67a:	461a      	mov	r2, r3
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f7ff fc86 	bl	800cf90 <UART_Start_Receive_DMA>
 800d684:	4603      	mov	r3, r0
 800d686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800d68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d124      	bne.n	800d6dc <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d696:	2b01      	cmp	r3, #1
 800d698:	d11d      	bne.n	800d6d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2210      	movs	r2, #16
 800d6a0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	e853 3f00 	ldrex	r3, [r3]
 800d6ae:	617b      	str	r3, [r7, #20]
   return(result);
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	f043 0310 	orr.w	r3, r3, #16
 800d6b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d6c2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c4:	6a39      	ldr	r1, [r7, #32]
 800d6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6c8:	e841 2300 	strex	r3, r2, [r1]
 800d6cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1e6      	bne.n	800d6a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800d6d4:	e002      	b.n	800d6dc <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800d6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6e0:	e000      	b.n	800d6e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800d6e2:	2302      	movs	r3, #2
  }
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3730      	adds	r7, #48	; 0x30
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d108      	bne.n	800d70e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d70c:	e031      	b.n	800d772 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d70e:	2308      	movs	r3, #8
 800d710:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d712:	2308      	movs	r3, #8
 800d714:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	0e5b      	lsrs	r3, r3, #25
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	f003 0307 	and.w	r3, r3, #7
 800d724:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	0f5b      	lsrs	r3, r3, #29
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	f003 0307 	and.w	r3, r3, #7
 800d734:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d736:	7bbb      	ldrb	r3, [r7, #14]
 800d738:	7b3a      	ldrb	r2, [r7, #12]
 800d73a:	4911      	ldr	r1, [pc, #68]	; (800d780 <UARTEx_SetNbDataToProcess+0x94>)
 800d73c:	5c8a      	ldrb	r2, [r1, r2]
 800d73e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d742:	7b3a      	ldrb	r2, [r7, #12]
 800d744:	490f      	ldr	r1, [pc, #60]	; (800d784 <UARTEx_SetNbDataToProcess+0x98>)
 800d746:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d748:	fb93 f3f2 	sdiv	r3, r3, r2
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	7b7a      	ldrb	r2, [r7, #13]
 800d758:	4909      	ldr	r1, [pc, #36]	; (800d780 <UARTEx_SetNbDataToProcess+0x94>)
 800d75a:	5c8a      	ldrb	r2, [r1, r2]
 800d75c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d760:	7b7a      	ldrb	r2, [r7, #13]
 800d762:	4908      	ldr	r1, [pc, #32]	; (800d784 <UARTEx_SetNbDataToProcess+0x98>)
 800d764:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d766:	fb93 f3f2 	sdiv	r3, r3, r2
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d772:	bf00      	nop
 800d774:	3714      	adds	r7, #20
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop
 800d780:	08015224 	.word	0x08015224
 800d784:	0801522c 	.word	0x0801522c

0800d788 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d798:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d79c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3714      	adds	r7, #20
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b085      	sub	sp, #20
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d7be:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d7c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	43db      	mvns	r3, r3
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3714      	adds	r7, #20
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	b480      	push	{r7}
 800d7f0:	b083      	sub	sp, #12
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	f107 0014 	add.w	r0, r7, #20
 800d7fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2201      	movs	r2, #1
 800d802:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	b004      	add	sp, #16
 800d82c:	4770      	bx	lr
	...

0800d830 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d830:	b480      	push	{r7}
 800d832:	b09d      	sub	sp, #116	; 0x74
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d856:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	78db      	ldrb	r3, [r3, #3]
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d81f      	bhi.n	800d8a2 <USB_ActivateEndpoint+0x72>
 800d862:	a201      	add	r2, pc, #4	; (adr r2, 800d868 <USB_ActivateEndpoint+0x38>)
 800d864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d868:	0800d879 	.word	0x0800d879
 800d86c:	0800d895 	.word	0x0800d895
 800d870:	0800d8ab 	.word	0x0800d8ab
 800d874:	0800d887 	.word	0x0800d887
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d87c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d884:	e012      	b.n	800d8ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d886:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d88a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d88e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d892:	e00b      	b.n	800d8ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d894:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d89c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d8a0:	e004      	b.n	800d8ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d8a8:	e000      	b.n	800d8ac <USB_ActivateEndpoint+0x7c>
      break;
 800d8aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	441a      	add	r2, r3
 800d8b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d8ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	b21b      	sxth	r3, r3
 800d8de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8e6:	b21a      	sxth	r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	b21b      	sxth	r3, r3
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	b21b      	sxth	r3, r3
 800d8f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	441a      	add	r2, r3
 800d900:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d90c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d914:	b29b      	uxth	r3, r3
 800d916:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	7b1b      	ldrb	r3, [r3, #12]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f040 8149 	bne.w	800dbb4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	785b      	ldrb	r3, [r3, #1]
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 8084 	beq.w	800da34 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	61bb      	str	r3, [r7, #24]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d936:	b29b      	uxth	r3, r3
 800d938:	461a      	mov	r2, r3
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	4413      	add	r3, r2
 800d93e:	61bb      	str	r3, [r7, #24]
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	00da      	lsls	r2, r3, #3
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	4413      	add	r3, r2
 800d94a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d94e:	617b      	str	r3, [r7, #20]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	88db      	ldrh	r3, [r3, #6]
 800d954:	085b      	lsrs	r3, r3, #1
 800d956:	b29b      	uxth	r3, r3
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	827b      	strh	r3, [r7, #18]
 800d96e:	8a7b      	ldrh	r3, [r7, #18]
 800d970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d974:	2b00      	cmp	r3, #0
 800d976:	d01b      	beq.n	800d9b0 <USB_ActivateEndpoint+0x180>
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	4413      	add	r3, r2
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	b29b      	uxth	r3, r3
 800d986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d98a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d98e:	823b      	strh	r3, [r7, #16]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	441a      	add	r2, r3
 800d99a:	8a3b      	ldrh	r3, [r7, #16]
 800d99c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	78db      	ldrb	r3, [r3, #3]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d020      	beq.n	800d9fa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4413      	add	r3, r2
 800d9c2:	881b      	ldrh	r3, [r3, #0]
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ce:	81bb      	strh	r3, [r7, #12]
 800d9d0:	89bb      	ldrh	r3, [r7, #12]
 800d9d2:	f083 0320 	eor.w	r3, r3, #32
 800d9d6:	81bb      	strh	r3, [r7, #12]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	441a      	add	r2, r3
 800d9e2:	89bb      	ldrh	r3, [r7, #12]
 800d9e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	8013      	strh	r3, [r2, #0]
 800d9f8:	e2a6      	b.n	800df48 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29b      	uxth	r3, r3
 800da08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da10:	81fb      	strh	r3, [r7, #14]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	441a      	add	r2, r3
 800da1c:	89fb      	ldrh	r3, [r7, #14]
 800da1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da2e:	b29b      	uxth	r3, r3
 800da30:	8013      	strh	r3, [r2, #0]
 800da32:	e289      	b.n	800df48 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	633b      	str	r3, [r7, #48]	; 0x30
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da3e:	b29b      	uxth	r3, r3
 800da40:	461a      	mov	r2, r3
 800da42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da44:	4413      	add	r3, r2
 800da46:	633b      	str	r3, [r7, #48]	; 0x30
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	00da      	lsls	r2, r3, #3
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	4413      	add	r3, r2
 800da52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800da56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	88db      	ldrh	r3, [r3, #6]
 800da5c:	085b      	lsrs	r3, r3, #1
 800da5e:	b29b      	uxth	r3, r3
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	b29a      	uxth	r2, r3
 800da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da66:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da72:	b29b      	uxth	r3, r3
 800da74:	461a      	mov	r2, r3
 800da76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da78:	4413      	add	r3, r2
 800da7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	00da      	lsls	r2, r3, #3
 800da82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da84:	4413      	add	r3, r2
 800da86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800da8a:	627b      	str	r3, [r7, #36]	; 0x24
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	2b3e      	cmp	r3, #62	; 0x3e
 800da92:	d918      	bls.n	800dac6 <USB_ActivateEndpoint+0x296>
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	095b      	lsrs	r3, r3, #5
 800da9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	f003 031f 	and.w	r3, r3, #31
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <USB_ActivateEndpoint+0x27e>
 800daa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daaa:	3b01      	subs	r3, #1
 800daac:	66bb      	str	r3, [r7, #104]	; 0x68
 800daae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	029b      	lsls	r3, r3, #10
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	801a      	strh	r2, [r3, #0]
 800dac4:	e029      	b.n	800db1a <USB_ActivateEndpoint+0x2ea>
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d112      	bne.n	800daf4 <USB_ActivateEndpoint+0x2c4>
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dad8:	b29a      	uxth	r2, r3
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	801a      	strh	r2, [r3, #0]
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daec:	b29a      	uxth	r2, r3
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	801a      	strh	r2, [r3, #0]
 800daf2:	e012      	b.n	800db1a <USB_ActivateEndpoint+0x2ea>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	085b      	lsrs	r3, r3, #1
 800dafa:	66bb      	str	r3, [r7, #104]	; 0x68
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <USB_ActivateEndpoint+0x2de>
 800db08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db0a:	3301      	adds	r3, #1
 800db0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800db0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db10:	b29b      	uxth	r3, r3
 800db12:	029b      	lsls	r3, r3, #10
 800db14:	b29a      	uxth	r2, r3
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4413      	add	r3, r2
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	847b      	strh	r3, [r7, #34]	; 0x22
 800db28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d01b      	beq.n	800db6a <USB_ActivateEndpoint+0x33a>
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4413      	add	r3, r2
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db48:	843b      	strh	r3, [r7, #32]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	441a      	add	r2, r3
 800db54:	8c3b      	ldrh	r3, [r7, #32]
 800db56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800db62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db66:	b29b      	uxth	r3, r3
 800db68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	4413      	add	r3, r2
 800db74:	881b      	ldrh	r3, [r3, #0]
 800db76:	b29b      	uxth	r3, r3
 800db78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db80:	83fb      	strh	r3, [r7, #30]
 800db82:	8bfb      	ldrh	r3, [r7, #30]
 800db84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800db88:	83fb      	strh	r3, [r7, #30]
 800db8a:	8bfb      	ldrh	r3, [r7, #30]
 800db8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800db90:	83fb      	strh	r3, [r7, #30]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	441a      	add	r2, r3
 800db9c:	8bfb      	ldrh	r3, [r7, #30]
 800db9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	8013      	strh	r3, [r2, #0]
 800dbb2:	e1c9      	b.n	800df48 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	78db      	ldrb	r3, [r3, #3]
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	d11e      	bne.n	800dbfa <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	4413      	add	r3, r2
 800dbc6:	881b      	ldrh	r3, [r3, #0]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbd2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	441a      	add	r2, r3
 800dbe0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800dbe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800dbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	8013      	strh	r3, [r2, #0]
 800dbf8:	e01d      	b.n	800dc36 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	4413      	add	r3, r2
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800dc0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc10:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	441a      	add	r2, r3
 800dc1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800dc22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	461a      	mov	r2, r3
 800dc44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc46:	4413      	add	r3, r2
 800dc48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	00da      	lsls	r2, r3, #3
 800dc50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc52:	4413      	add	r3, r2
 800dc54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc58:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	891b      	ldrh	r3, [r3, #8]
 800dc5e:	085b      	lsrs	r3, r3, #1
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	005b      	lsls	r3, r3, #1
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc68:	801a      	strh	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	657b      	str	r3, [r7, #84]	; 0x54
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	461a      	mov	r2, r3
 800dc78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc7a:	4413      	add	r3, r2
 800dc7c:	657b      	str	r3, [r7, #84]	; 0x54
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	00da      	lsls	r2, r3, #3
 800dc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc86:	4413      	add	r3, r2
 800dc88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dc8c:	653b      	str	r3, [r7, #80]	; 0x50
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	895b      	ldrh	r3, [r3, #10]
 800dc92:	085b      	lsrs	r3, r3, #1
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc9c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	785b      	ldrb	r3, [r3, #1]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f040 8093 	bne.w	800ddce <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	4413      	add	r3, r2
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800dcb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dcbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d01b      	beq.n	800dcfc <USB_ActivateEndpoint+0x4cc>
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4413      	add	r3, r2
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcda:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	441a      	add	r2, r3
 800dce6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dcf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	881b      	ldrh	r3, [r3, #0]
 800dd08:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800dd0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dd0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d01b      	beq.n	800dd4c <USB_ActivateEndpoint+0x51c>
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	441a      	add	r2, r3
 800dd36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dd38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd62:	873b      	strh	r3, [r7, #56]	; 0x38
 800dd64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dd66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dd6a:	873b      	strh	r3, [r7, #56]	; 0x38
 800dd6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dd6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dd72:	873b      	strh	r3, [r7, #56]	; 0x38
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	441a      	add	r2, r3
 800dd7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dd80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4413      	add	r3, r2
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dda6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddaa:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	441a      	add	r2, r3
 800ddb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ddb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	8013      	strh	r3, [r2, #0]
 800ddcc:	e0bc      	b.n	800df48 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	881b      	ldrh	r3, [r3, #0]
 800ddda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ddde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dde2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d01d      	beq.n	800de26 <USB_ActivateEndpoint+0x5f6>
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	4413      	add	r3, r2
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	441a      	add	r2, r3
 800de0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800de12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de22:	b29b      	uxth	r3, r3
 800de24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	4413      	add	r3, r2
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800de36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800de3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d01d      	beq.n	800de7e <USB_ActivateEndpoint+0x64e>
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	881b      	ldrh	r3, [r3, #0]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de58:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	441a      	add	r2, r3
 800de66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800de6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	78db      	ldrb	r3, [r3, #3]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d024      	beq.n	800ded0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	881b      	ldrh	r3, [r3, #0]
 800de92:	b29b      	uxth	r3, r3
 800de94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800dea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dea4:	f083 0320 	eor.w	r3, r3, #32
 800dea8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	441a      	add	r2, r3
 800deb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800deba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800debe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deca:	b29b      	uxth	r3, r3
 800decc:	8013      	strh	r3, [r2, #0]
 800dece:	e01d      	b.n	800df0c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dee6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	441a      	add	r2, r3
 800def4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800def8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800defc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df08:	b29b      	uxth	r3, r3
 800df0a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4413      	add	r3, r2
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	b29b      	uxth	r3, r3
 800df1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	441a      	add	r2, r3
 800df30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df44:	b29b      	uxth	r3, r3
 800df46:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800df48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3774      	adds	r7, #116	; 0x74
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800df58:	b480      	push	{r7}
 800df5a:	b08d      	sub	sp, #52	; 0x34
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	7b1b      	ldrb	r3, [r3, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	f040 808e 	bne.w	800e088 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	785b      	ldrb	r3, [r3, #1]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d044      	beq.n	800dffe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	81bb      	strh	r3, [r7, #12]
 800df82:	89bb      	ldrh	r3, [r7, #12]
 800df84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d01b      	beq.n	800dfc4 <USB_DeactivateEndpoint+0x6c>
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4413      	add	r3, r2
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfa2:	817b      	strh	r3, [r7, #10]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	441a      	add	r2, r3
 800dfae:	897b      	ldrh	r3, [r7, #10]
 800dfb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfda:	813b      	strh	r3, [r7, #8]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	441a      	add	r2, r3
 800dfe6:	893b      	ldrh	r3, [r7, #8]
 800dfe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	8013      	strh	r3, [r2, #0]
 800dffc:	e192      	b.n	800e324 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4413      	add	r3, r2
 800e008:	881b      	ldrh	r3, [r3, #0]
 800e00a:	827b      	strh	r3, [r7, #18]
 800e00c:	8a7b      	ldrh	r3, [r7, #18]
 800e00e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e012:	2b00      	cmp	r3, #0
 800e014:	d01b      	beq.n	800e04e <USB_DeactivateEndpoint+0xf6>
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	4413      	add	r3, r2
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	b29b      	uxth	r3, r3
 800e024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e02c:	823b      	strh	r3, [r7, #16]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	441a      	add	r2, r3
 800e038:	8a3b      	ldrh	r3, [r7, #16]
 800e03a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e03e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4413      	add	r3, r2
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e064:	81fb      	strh	r3, [r7, #14]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	441a      	add	r2, r3
 800e070:	89fb      	ldrh	r3, [r7, #14]
 800e072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e07a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e082:	b29b      	uxth	r3, r3
 800e084:	8013      	strh	r3, [r2, #0]
 800e086:	e14d      	b.n	800e324 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	785b      	ldrb	r3, [r3, #1]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f040 80a5 	bne.w	800e1dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	881b      	ldrh	r3, [r3, #0]
 800e09e:	843b      	strh	r3, [r7, #32]
 800e0a0:	8c3b      	ldrh	r3, [r7, #32]
 800e0a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d01b      	beq.n	800e0e2 <USB_DeactivateEndpoint+0x18a>
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	881b      	ldrh	r3, [r3, #0]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0c0:	83fb      	strh	r3, [r7, #30]
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	441a      	add	r2, r3
 800e0cc:	8bfb      	ldrh	r3, [r7, #30]
 800e0ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	83bb      	strh	r3, [r7, #28]
 800e0f0:	8bbb      	ldrh	r3, [r7, #28]
 800e0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d01b      	beq.n	800e132 <USB_DeactivateEndpoint+0x1da>
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	b29b      	uxth	r3, r3
 800e108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e110:	837b      	strh	r3, [r7, #26]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	441a      	add	r2, r3
 800e11c:	8b7b      	ldrh	r3, [r7, #26]
 800e11e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e12a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e12e:	b29b      	uxth	r3, r3
 800e130:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e148:	833b      	strh	r3, [r7, #24]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	441a      	add	r2, r3
 800e154:	8b3b      	ldrh	r3, [r7, #24]
 800e156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e15a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e15e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e166:	b29b      	uxth	r3, r3
 800e168:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	881b      	ldrh	r3, [r3, #0]
 800e176:	b29b      	uxth	r3, r3
 800e178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e17c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e180:	82fb      	strh	r3, [r7, #22]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	441a      	add	r2, r3
 800e18c:	8afb      	ldrh	r3, [r7, #22]
 800e18e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e19a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1b8:	82bb      	strh	r3, [r7, #20]
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	441a      	add	r2, r3
 800e1c4:	8abb      	ldrh	r3, [r7, #20]
 800e1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	8013      	strh	r3, [r2, #0]
 800e1da:	e0a3      	b.n	800e324 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	881b      	ldrh	r3, [r3, #0]
 800e1e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e1ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d01b      	beq.n	800e22c <USB_DeactivateEndpoint+0x2d4>
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	b29b      	uxth	r3, r3
 800e202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e20a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	441a      	add	r2, r3
 800e216:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e21c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e228:	b29b      	uxth	r3, r3
 800e22a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4413      	add	r3, r2
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e23a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e240:	2b00      	cmp	r3, #0
 800e242:	d01b      	beq.n	800e27c <USB_DeactivateEndpoint+0x324>
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	4413      	add	r3, r2
 800e24e:	881b      	ldrh	r3, [r3, #0]
 800e250:	b29b      	uxth	r3, r3
 800e252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e25a:	853b      	strh	r3, [r7, #40]	; 0x28
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	441a      	add	r2, r3
 800e266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e26c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e278:	b29b      	uxth	r3, r3
 800e27a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e292:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	441a      	add	r2, r3
 800e29e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e2a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	441a      	add	r2, r3
 800e2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4413      	add	r3, r2
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e2fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e302:	847b      	strh	r3, [r7, #34]	; 0x22
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	441a      	add	r2, r3
 800e30e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e320:	b29b      	uxth	r3, r3
 800e322:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3734      	adds	r7, #52	; 0x34
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b0c2      	sub	sp, #264	; 0x108
 800e336:	af00      	add	r7, sp, #0
 800e338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e33c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e340:	6018      	str	r0, [r3, #0]
 800e342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e34a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	785b      	ldrb	r3, [r3, #1]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	f040 867b 	bne.w	800f054 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	699a      	ldr	r2, [r3, #24]
 800e36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e36e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	429a      	cmp	r2, r3
 800e378:	d908      	bls.n	800e38c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e38a:	e007      	b.n	800e39c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	699b      	ldr	r3, [r3, #24]
 800e398:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	7b1b      	ldrb	r3, [r3, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d13a      	bne.n	800e422 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6959      	ldr	r1, [r3, #20]
 800e3b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	88da      	ldrh	r2, [r3, #6]
 800e3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e3ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e3d2:	6800      	ldr	r0, [r0, #0]
 800e3d4:	f001 fc1d 	bl	800fc12 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e3d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	613b      	str	r3, [r7, #16]
 800e3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	613b      	str	r3, [r7, #16]
 800e3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	00da      	lsls	r2, r3, #3
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	4413      	add	r3, r2
 800e40e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e418:	b29a      	uxth	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	801a      	strh	r2, [r3, #0]
 800e41e:	f000 bde3 	b.w	800efe8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	78db      	ldrb	r3, [r3, #3]
 800e42e:	2b02      	cmp	r3, #2
 800e430:	f040 843a 	bne.w	800eca8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	6a1a      	ldr	r2, [r3, #32]
 800e440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	f240 83b7 	bls.w	800ebc0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	881b      	ldrh	r3, [r3, #0]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e478:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	441a      	add	r2, r3
 800e496:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e49a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e49e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	6a1a      	ldr	r2, [r3, #32]
 800e4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4be:	1ad2      	subs	r2, r2, r3
 800e4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 81b3 	beq.w	800e85a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	633b      	str	r3, [r7, #48]	; 0x30
 800e500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	785b      	ldrb	r3, [r3, #1]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d16d      	bne.n	800e5ec <USB_EPStartXfer+0x2ba>
 800e510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	461a      	mov	r2, r3
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	4413      	add	r3, r2
 800e532:	62bb      	str	r3, [r7, #40]	; 0x28
 800e534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	00da      	lsls	r2, r3, #3
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	4413      	add	r3, r2
 800e546:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e54a:	627b      	str	r3, [r7, #36]	; 0x24
 800e54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e550:	2b3e      	cmp	r3, #62	; 0x3e
 800e552:	d91c      	bls.n	800e58e <USB_EPStartXfer+0x25c>
 800e554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e558:	095b      	lsrs	r3, r3, #5
 800e55a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e562:	f003 031f 	and.w	r3, r3, #31
 800e566:	2b00      	cmp	r3, #0
 800e568:	d104      	bne.n	800e574 <USB_EPStartXfer+0x242>
 800e56a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e56e:	3b01      	subs	r3, #1
 800e570:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e574:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e578:	b29b      	uxth	r3, r3
 800e57a:	029b      	lsls	r3, r3, #10
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e586:	b29a      	uxth	r2, r3
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	801a      	strh	r2, [r3, #0]
 800e58c:	e053      	b.n	800e636 <USB_EPStartXfer+0x304>
 800e58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e592:	2b00      	cmp	r3, #0
 800e594:	d112      	bne.n	800e5bc <USB_EPStartXfer+0x28a>
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a4:	801a      	strh	r2, [r3, #0]
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5b4:	b29a      	uxth	r2, r3
 800e5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b8:	801a      	strh	r2, [r3, #0]
 800e5ba:	e03c      	b.n	800e636 <USB_EPStartXfer+0x304>
 800e5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5c0:	085b      	lsrs	r3, r3, #1
 800e5c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d004      	beq.n	800e5dc <USB_EPStartXfer+0x2aa>
 800e5d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e5dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	029b      	lsls	r3, r3, #10
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	801a      	strh	r2, [r3, #0]
 800e5ea:	e024      	b.n	800e636 <USB_EPStartXfer+0x304>
 800e5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	785b      	ldrb	r3, [r3, #1]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d11c      	bne.n	800e636 <USB_EPStartXfer+0x304>
 800e5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	461a      	mov	r2, r3
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	4413      	add	r3, r2
 800e612:	633b      	str	r3, [r7, #48]	; 0x30
 800e614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	00da      	lsls	r2, r3, #3
 800e622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e624:	4413      	add	r3, r2
 800e626:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e62a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e630:	b29a      	uxth	r2, r3
 800e632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e634:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	895b      	ldrh	r3, [r3, #10]
 800e642:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6959      	ldr	r1, [r3, #20]
 800e652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e656:	b29b      	uxth	r3, r3
 800e658:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e65c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e660:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e664:	6800      	ldr	r0, [r0, #0]
 800e666:	f001 fad4 	bl	800fc12 <USB_WritePMA>
            ep->xfer_buff += len;
 800e66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e66e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	695a      	ldr	r2, [r3, #20]
 800e676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e67a:	441a      	add	r2, r3
 800e67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e68c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	6a1a      	ldr	r2, [r3, #32]
 800e694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	691b      	ldr	r3, [r3, #16]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d90f      	bls.n	800e6c4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800e6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	6a1a      	ldr	r2, [r3, #32]
 800e6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6b4:	1ad2      	subs	r2, r2, r3
 800e6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	621a      	str	r2, [r3, #32]
 800e6c2:	e00e      	b.n	800e6e2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800e6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	785b      	ldrb	r3, [r3, #1]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d16d      	bne.n	800e7ce <USB_EPStartXfer+0x49c>
 800e6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	61bb      	str	r3, [r7, #24]
 800e6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	461a      	mov	r2, r3
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	4413      	add	r3, r2
 800e714:	61bb      	str	r3, [r7, #24]
 800e716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	00da      	lsls	r2, r3, #3
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	4413      	add	r3, r2
 800e728:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e72c:	617b      	str	r3, [r7, #20]
 800e72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e732:	2b3e      	cmp	r3, #62	; 0x3e
 800e734:	d91c      	bls.n	800e770 <USB_EPStartXfer+0x43e>
 800e736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e73a:	095b      	lsrs	r3, r3, #5
 800e73c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e744:	f003 031f 	and.w	r3, r3, #31
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d104      	bne.n	800e756 <USB_EPStartXfer+0x424>
 800e74c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e750:	3b01      	subs	r3, #1
 800e752:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	029b      	lsls	r3, r3, #10
 800e75e:	b29b      	uxth	r3, r3
 800e760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e768:	b29a      	uxth	r2, r3
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	801a      	strh	r2, [r3, #0]
 800e76e:	e059      	b.n	800e824 <USB_EPStartXfer+0x4f2>
 800e770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e774:	2b00      	cmp	r3, #0
 800e776:	d112      	bne.n	800e79e <USB_EPStartXfer+0x46c>
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	881b      	ldrh	r3, [r3, #0]
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e782:	b29a      	uxth	r2, r3
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	801a      	strh	r2, [r3, #0]
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	881b      	ldrh	r3, [r3, #0]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e796:	b29a      	uxth	r2, r3
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	801a      	strh	r2, [r3, #0]
 800e79c:	e042      	b.n	800e824 <USB_EPStartXfer+0x4f2>
 800e79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7a2:	085b      	lsrs	r3, r3, #1
 800e7a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7ac:	f003 0301 	and.w	r3, r3, #1
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d004      	beq.n	800e7be <USB_EPStartXfer+0x48c>
 800e7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e7be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	029b      	lsls	r3, r3, #10
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	801a      	strh	r2, [r3, #0]
 800e7cc:	e02a      	b.n	800e824 <USB_EPStartXfer+0x4f2>
 800e7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	785b      	ldrb	r3, [r3, #1]
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d122      	bne.n	800e824 <USB_EPStartXfer+0x4f2>
 800e7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	623b      	str	r3, [r7, #32]
 800e7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	4413      	add	r3, r2
 800e800:	623b      	str	r3, [r7, #32]
 800e802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	00da      	lsls	r2, r3, #3
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	4413      	add	r3, r2
 800e814:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e818:	61fb      	str	r3, [r7, #28]
 800e81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e81e:	b29a      	uxth	r2, r3
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	891b      	ldrh	r3, [r3, #8]
 800e830:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	6959      	ldr	r1, [r3, #20]
 800e840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e844:	b29b      	uxth	r3, r3
 800e846:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e84a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e84e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e852:	6800      	ldr	r0, [r0, #0]
 800e854:	f001 f9dd 	bl	800fc12 <USB_WritePMA>
 800e858:	e3c6      	b.n	800efe8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	785b      	ldrb	r3, [r3, #1]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d16d      	bne.n	800e946 <USB_EPStartXfer+0x614>
 800e86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e86e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	64bb      	str	r3, [r7, #72]	; 0x48
 800e876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e87a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e884:	b29b      	uxth	r3, r3
 800e886:	461a      	mov	r2, r3
 800e888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e88a:	4413      	add	r3, r2
 800e88c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	00da      	lsls	r2, r3, #3
 800e89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e89e:	4413      	add	r3, r2
 800e8a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e8a4:	647b      	str	r3, [r7, #68]	; 0x44
 800e8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8aa:	2b3e      	cmp	r3, #62	; 0x3e
 800e8ac:	d91c      	bls.n	800e8e8 <USB_EPStartXfer+0x5b6>
 800e8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8b2:	095b      	lsrs	r3, r3, #5
 800e8b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8bc:	f003 031f 	and.w	r3, r3, #31
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d104      	bne.n	800e8ce <USB_EPStartXfer+0x59c>
 800e8c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e8ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	029b      	lsls	r3, r3, #10
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8e0:	b29a      	uxth	r2, r3
 800e8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e4:	801a      	strh	r2, [r3, #0]
 800e8e6:	e059      	b.n	800e99c <USB_EPStartXfer+0x66a>
 800e8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d112      	bne.n	800e916 <USB_EPStartXfer+0x5e4>
 800e8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8fe:	801a      	strh	r2, [r3, #0]
 800e900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	b29b      	uxth	r3, r3
 800e906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e90a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e90e:	b29a      	uxth	r2, r3
 800e910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e912:	801a      	strh	r2, [r3, #0]
 800e914:	e042      	b.n	800e99c <USB_EPStartXfer+0x66a>
 800e916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e91a:	085b      	lsrs	r3, r3, #1
 800e91c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <USB_EPStartXfer+0x604>
 800e92c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e930:	3301      	adds	r3, #1
 800e932:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	029b      	lsls	r3, r3, #10
 800e93e:	b29a      	uxth	r2, r3
 800e940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e942:	801a      	strh	r2, [r3, #0]
 800e944:	e02a      	b.n	800e99c <USB_EPStartXfer+0x66a>
 800e946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	785b      	ldrb	r3, [r3, #1]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d122      	bne.n	800e99c <USB_EPStartXfer+0x66a>
 800e956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e95a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	653b      	str	r3, [r7, #80]	; 0x50
 800e962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e970:	b29b      	uxth	r3, r3
 800e972:	461a      	mov	r2, r3
 800e974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e976:	4413      	add	r3, r2
 800e978:	653b      	str	r3, [r7, #80]	; 0x50
 800e97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	00da      	lsls	r2, r3, #3
 800e988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e98a:	4413      	add	r3, r2
 800e98c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e990:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e996:	b29a      	uxth	r2, r3
 800e998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e99a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	891b      	ldrh	r3, [r3, #8]
 800e9a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	6959      	ldr	r1, [r3, #20]
 800e9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e9c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e9c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e9ca:	6800      	ldr	r0, [r0, #0]
 800e9cc:	f001 f921 	bl	800fc12 <USB_WritePMA>
            ep->xfer_buff += len;
 800e9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	695a      	ldr	r2, [r3, #20]
 800e9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9e0:	441a      	add	r2, r3
 800e9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6a1a      	ldr	r2, [r3, #32]
 800e9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d90f      	bls.n	800ea2a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800ea0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	6a1a      	ldr	r2, [r3, #32]
 800ea16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea1a:	1ad2      	subs	r2, r2, r3
 800ea1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	621a      	str	r2, [r3, #32]
 800ea28:	e00e      	b.n	800ea48 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800ea2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ea3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2200      	movs	r2, #0
 800ea46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ea48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	643b      	str	r3, [r7, #64]	; 0x40
 800ea54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	785b      	ldrb	r3, [r3, #1]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d16d      	bne.n	800eb40 <USB_EPStartXfer+0x80e>
 800ea64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	461a      	mov	r2, r3
 800ea82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea84:	4413      	add	r3, r2
 800ea86:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	00da      	lsls	r2, r3, #3
 800ea96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea98:	4413      	add	r3, r2
 800ea9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea9e:	637b      	str	r3, [r7, #52]	; 0x34
 800eaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaa4:	2b3e      	cmp	r3, #62	; 0x3e
 800eaa6:	d91c      	bls.n	800eae2 <USB_EPStartXfer+0x7b0>
 800eaa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaac:	095b      	lsrs	r3, r3, #5
 800eaae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800eab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eab6:	f003 031f 	and.w	r3, r3, #31
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d104      	bne.n	800eac8 <USB_EPStartXfer+0x796>
 800eabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eac2:	3b01      	subs	r3, #1
 800eac4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800eac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eacc:	b29b      	uxth	r3, r3
 800eace:	029b      	lsls	r3, r3, #10
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ead6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eada:	b29a      	uxth	r2, r3
 800eadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eade:	801a      	strh	r2, [r3, #0]
 800eae0:	e053      	b.n	800eb8a <USB_EPStartXfer+0x858>
 800eae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d112      	bne.n	800eb10 <USB_EPStartXfer+0x7de>
 800eaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf8:	801a      	strh	r2, [r3, #0]
 800eafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0c:	801a      	strh	r2, [r3, #0]
 800eb0e:	e03c      	b.n	800eb8a <USB_EPStartXfer+0x858>
 800eb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb14:	085b      	lsrs	r3, r3, #1
 800eb16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800eb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb1e:	f003 0301 	and.w	r3, r3, #1
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d004      	beq.n	800eb30 <USB_EPStartXfer+0x7fe>
 800eb26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800eb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	029b      	lsls	r3, r3, #10
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3c:	801a      	strh	r2, [r3, #0]
 800eb3e:	e024      	b.n	800eb8a <USB_EPStartXfer+0x858>
 800eb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	785b      	ldrb	r3, [r3, #1]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d11c      	bne.n	800eb8a <USB_EPStartXfer+0x858>
 800eb50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	461a      	mov	r2, r3
 800eb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb64:	4413      	add	r3, r2
 800eb66:	643b      	str	r3, [r7, #64]	; 0x40
 800eb68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	00da      	lsls	r2, r3, #3
 800eb76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb78:	4413      	add	r3, r2
 800eb7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800eb8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	895b      	ldrh	r3, [r3, #10]
 800eb96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	6959      	ldr	r1, [r3, #20]
 800eba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ebb0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ebb4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ebb8:	6800      	ldr	r0, [r0, #0]
 800ebba:	f001 f82a 	bl	800fc12 <USB_WritePMA>
 800ebbe:	e213      	b.n	800efe8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ebc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	6a1b      	ldr	r3, [r3, #32]
 800ebcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ebd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	4413      	add	r3, r2
 800ebea:	881b      	ldrh	r3, [r3, #0]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ebf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebf6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ebfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	441a      	add	r2, r3
 800ec14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ec18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ec2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	461a      	mov	r2, r3
 800ec4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec4c:	4413      	add	r3, r2
 800ec4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	00da      	lsls	r2, r3, #3
 800ec5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec60:	4413      	add	r3, r2
 800ec62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ec66:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ec72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	891b      	ldrh	r3, [r3, #8]
 800ec7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6959      	ldr	r1, [r3, #20]
 800ec8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ec98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ec9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eca0:	6800      	ldr	r0, [r0, #0]
 800eca2:	f000 ffb6 	bl	800fc12 <USB_WritePMA>
 800eca6:	e19f      	b.n	800efe8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800eca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	6a1a      	ldr	r2, [r3, #32]
 800ecb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecb8:	1ad2      	subs	r2, r2, r3
 800ecba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ecc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4413      	add	r3, r2
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 80bc 	beq.w	800ee66 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ecee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	673b      	str	r3, [r7, #112]	; 0x70
 800ecfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	785b      	ldrb	r3, [r3, #1]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d16d      	bne.n	800ede6 <USB_EPStartXfer+0xab4>
 800ed0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	461a      	mov	r2, r3
 800ed28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed2a:	4413      	add	r3, r2
 800ed2c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	00da      	lsls	r2, r3, #3
 800ed3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed3e:	4413      	add	r3, r2
 800ed40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ed44:	667b      	str	r3, [r7, #100]	; 0x64
 800ed46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed4a:	2b3e      	cmp	r3, #62	; 0x3e
 800ed4c:	d91c      	bls.n	800ed88 <USB_EPStartXfer+0xa56>
 800ed4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed52:	095b      	lsrs	r3, r3, #5
 800ed54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed5c:	f003 031f 	and.w	r3, r3, #31
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d104      	bne.n	800ed6e <USB_EPStartXfer+0xa3c>
 800ed64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	029b      	lsls	r3, r3, #10
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed84:	801a      	strh	r2, [r3, #0]
 800ed86:	e053      	b.n	800ee30 <USB_EPStartXfer+0xafe>
 800ed88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d112      	bne.n	800edb6 <USB_EPStartXfer+0xa84>
 800ed90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed92:	881b      	ldrh	r3, [r3, #0]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed9e:	801a      	strh	r2, [r3, #0]
 800eda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eda2:	881b      	ldrh	r3, [r3, #0]
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edae:	b29a      	uxth	r2, r3
 800edb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edb2:	801a      	strh	r2, [r3, #0]
 800edb4:	e03c      	b.n	800ee30 <USB_EPStartXfer+0xafe>
 800edb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edba:	085b      	lsrs	r3, r3, #1
 800edbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800edc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edc4:	f003 0301 	and.w	r3, r3, #1
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <USB_EPStartXfer+0xaa4>
 800edcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800edd0:	3301      	adds	r3, #1
 800edd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800edd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800edda:	b29b      	uxth	r3, r3
 800eddc:	029b      	lsls	r3, r3, #10
 800edde:	b29a      	uxth	r2, r3
 800ede0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ede2:	801a      	strh	r2, [r3, #0]
 800ede4:	e024      	b.n	800ee30 <USB_EPStartXfer+0xafe>
 800ede6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	785b      	ldrb	r3, [r3, #1]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d11c      	bne.n	800ee30 <USB_EPStartXfer+0xafe>
 800edf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	461a      	mov	r2, r3
 800ee08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee0a:	4413      	add	r3, r2
 800ee0c:	673b      	str	r3, [r7, #112]	; 0x70
 800ee0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	00da      	lsls	r2, r3, #3
 800ee1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee1e:	4413      	add	r3, r2
 800ee20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ee24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ee30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	895b      	ldrh	r3, [r3, #10]
 800ee3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6959      	ldr	r1, [r3, #20]
 800ee4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ee56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ee5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ee5e:	6800      	ldr	r0, [r0, #0]
 800ee60:	f000 fed7 	bl	800fc12 <USB_WritePMA>
 800ee64:	e0c0      	b.n	800efe8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ee66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	785b      	ldrb	r3, [r3, #1]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d16d      	bne.n	800ef52 <USB_EPStartXfer+0xc20>
 800ee76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	461a      	mov	r2, r3
 800ee94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee96:	4413      	add	r3, r2
 800ee98:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	00da      	lsls	r2, r3, #3
 800eea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eeaa:	4413      	add	r3, r2
 800eeac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eeb0:	67bb      	str	r3, [r7, #120]	; 0x78
 800eeb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eeb6:	2b3e      	cmp	r3, #62	; 0x3e
 800eeb8:	d91c      	bls.n	800eef4 <USB_EPStartXfer+0xbc2>
 800eeba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eebe:	095b      	lsrs	r3, r3, #5
 800eec0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eec8:	f003 031f 	and.w	r3, r3, #31
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d104      	bne.n	800eeda <USB_EPStartXfer+0xba8>
 800eed0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eed4:	3b01      	subs	r3, #1
 800eed6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eeda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eede:	b29b      	uxth	r3, r3
 800eee0:	029b      	lsls	r3, r3, #10
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eef0:	801a      	strh	r2, [r3, #0]
 800eef2:	e05f      	b.n	800efb4 <USB_EPStartXfer+0xc82>
 800eef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d112      	bne.n	800ef22 <USB_EPStartXfer+0xbf0>
 800eefc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eefe:	881b      	ldrh	r3, [r3, #0]
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0a:	801a      	strh	r2, [r3, #0]
 800ef0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef1e:	801a      	strh	r2, [r3, #0]
 800ef20:	e048      	b.n	800efb4 <USB_EPStartXfer+0xc82>
 800ef22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef26:	085b      	lsrs	r3, r3, #1
 800ef28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ef2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef30:	f003 0301 	and.w	r3, r3, #1
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d004      	beq.n	800ef42 <USB_EPStartXfer+0xc10>
 800ef38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ef42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	029b      	lsls	r3, r3, #10
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef4e:	801a      	strh	r2, [r3, #0]
 800ef50:	e030      	b.n	800efb4 <USB_EPStartXfer+0xc82>
 800ef52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	785b      	ldrb	r3, [r3, #1]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d128      	bne.n	800efb4 <USB_EPStartXfer+0xc82>
 800ef62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ef70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	461a      	mov	r2, r3
 800ef82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef86:	4413      	add	r3, r2
 800ef88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ef8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	00da      	lsls	r2, r3, #3
 800ef9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef9e:	4413      	add	r3, r2
 800efa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800efa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800efa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efac:	b29a      	uxth	r2, r3
 800efae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800efb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800efb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	891b      	ldrh	r3, [r3, #8]
 800efc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800efc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	6959      	ldr	r1, [r3, #20]
 800efd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800efda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800efde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800efe2:	6800      	ldr	r0, [r0, #0]
 800efe4:	f000 fe15 	bl	800fc12 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800efe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	b29b      	uxth	r3, r3
 800f006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f00a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f00e:	817b      	strh	r3, [r7, #10]
 800f010:	897b      	ldrh	r3, [r7, #10]
 800f012:	f083 0310 	eor.w	r3, r3, #16
 800f016:	817b      	strh	r3, [r7, #10]
 800f018:	897b      	ldrh	r3, [r7, #10]
 800f01a:	f083 0320 	eor.w	r3, r3, #32
 800f01e:	817b      	strh	r3, [r7, #10]
 800f020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	441a      	add	r2, r3
 800f03a:	897b      	ldrh	r3, [r7, #10]
 800f03c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	8013      	strh	r3, [r2, #0]
 800f050:	f000 bc9f 	b.w	800f992 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	7b1b      	ldrb	r3, [r3, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	f040 80ae 	bne.w	800f1c2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	699a      	ldr	r2, [r3, #24]
 800f072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d917      	bls.n	800f0b2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800f082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800f092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	699a      	ldr	r2, [r3, #24]
 800f09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0a2:	1ad2      	subs	r2, r2, r3
 800f0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	619a      	str	r2, [r3, #24]
 800f0b0:	e00e      	b.n	800f0d0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800f0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800f0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0f4:	4413      	add	r3, r2
 800f0f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	00da      	lsls	r2, r3, #3
 800f108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f10c:	4413      	add	r3, r2
 800f10e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f11a:	2b3e      	cmp	r3, #62	; 0x3e
 800f11c:	d91d      	bls.n	800f15a <USB_EPStartXfer+0xe28>
 800f11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f122:	095b      	lsrs	r3, r3, #5
 800f124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f12c:	f003 031f 	and.w	r3, r3, #31
 800f130:	2b00      	cmp	r3, #0
 800f132:	d104      	bne.n	800f13e <USB_EPStartXfer+0xe0c>
 800f134:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f138:	3b01      	subs	r3, #1
 800f13a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f13e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f142:	b29b      	uxth	r3, r3
 800f144:	029b      	lsls	r3, r3, #10
 800f146:	b29b      	uxth	r3, r3
 800f148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f150:	b29a      	uxth	r2, r3
 800f152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f156:	801a      	strh	r2, [r3, #0]
 800f158:	e3e1      	b.n	800f91e <USB_EPStartXfer+0x15ec>
 800f15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d116      	bne.n	800f190 <USB_EPStartXfer+0xe5e>
 800f162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f166:	881b      	ldrh	r3, [r3, #0]
 800f168:	b29b      	uxth	r3, r3
 800f16a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f16e:	b29a      	uxth	r2, r3
 800f170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f174:	801a      	strh	r2, [r3, #0]
 800f176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f17a:	881b      	ldrh	r3, [r3, #0]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f186:	b29a      	uxth	r2, r3
 800f188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f18c:	801a      	strh	r2, [r3, #0]
 800f18e:	e3c6      	b.n	800f91e <USB_EPStartXfer+0x15ec>
 800f190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f194:	085b      	lsrs	r3, r3, #1
 800f196:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f19e:	f003 0301 	and.w	r3, r3, #1
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d004      	beq.n	800f1b0 <USB_EPStartXfer+0xe7e>
 800f1a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f1b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	029b      	lsls	r3, r3, #10
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1be:	801a      	strh	r2, [r3, #0]
 800f1c0:	e3ad      	b.n	800f91e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	78db      	ldrb	r3, [r3, #3]
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	f040 8200 	bne.w	800f5d4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	785b      	ldrb	r3, [r3, #1]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f040 8091 	bne.w	800f308 <USB_EPStartXfer+0xfd6>
 800f1e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f202:	b29b      	uxth	r3, r3
 800f204:	461a      	mov	r2, r3
 800f206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f20a:	4413      	add	r3, r2
 800f20c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	00da      	lsls	r2, r3, #3
 800f21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f222:	4413      	add	r3, r2
 800f224:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	2b3e      	cmp	r3, #62	; 0x3e
 800f23a:	d925      	bls.n	800f288 <USB_EPStartXfer+0xf56>
 800f23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	691b      	ldr	r3, [r3, #16]
 800f248:	095b      	lsrs	r3, r3, #5
 800f24a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	f003 031f 	and.w	r3, r3, #31
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d104      	bne.n	800f26c <USB_EPStartXfer+0xf3a>
 800f262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f266:	3b01      	subs	r3, #1
 800f268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f270:	b29b      	uxth	r3, r3
 800f272:	029b      	lsls	r3, r3, #10
 800f274:	b29b      	uxth	r3, r3
 800f276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f27a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f27e:	b29a      	uxth	r2, r3
 800f280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f284:	801a      	strh	r2, [r3, #0]
 800f286:	e074      	b.n	800f372 <USB_EPStartXfer+0x1040>
 800f288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d116      	bne.n	800f2c6 <USB_EPStartXfer+0xf94>
 800f298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2aa:	801a      	strh	r2, [r3, #0]
 800f2ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f2c2:	801a      	strh	r2, [r3, #0]
 800f2c4:	e055      	b.n	800f372 <USB_EPStartXfer+0x1040>
 800f2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	085b      	lsrs	r3, r3, #1
 800f2d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	f003 0301 	and.w	r3, r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d004      	beq.n	800f2f6 <USB_EPStartXfer+0xfc4>
 800f2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	029b      	lsls	r3, r3, #10
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f304:	801a      	strh	r2, [r3, #0]
 800f306:	e034      	b.n	800f372 <USB_EPStartXfer+0x1040>
 800f308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	785b      	ldrb	r3, [r3, #1]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d12c      	bne.n	800f372 <USB_EPStartXfer+0x1040>
 800f318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f31c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f32a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f334:	b29b      	uxth	r3, r3
 800f336:	461a      	mov	r2, r3
 800f338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f33c:	4413      	add	r3, r2
 800f33e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	00da      	lsls	r2, r3, #3
 800f350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f354:	4413      	add	r3, r2
 800f356:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f35a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	691b      	ldr	r3, [r3, #16]
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f370:	801a      	strh	r2, [r3, #0]
 800f372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	785b      	ldrb	r3, [r3, #1]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f040 8091 	bne.w	800f4b4 <USB_EPStartXfer+0x1182>
 800f392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	00da      	lsls	r2, r3, #3
 800f3ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3ce:	4413      	add	r3, r2
 800f3d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f3d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f3d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	2b3e      	cmp	r3, #62	; 0x3e
 800f3e6:	d925      	bls.n	800f434 <USB_EPStartXfer+0x1102>
 800f3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	095b      	lsrs	r3, r3, #5
 800f3f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	691b      	ldr	r3, [r3, #16]
 800f406:	f003 031f 	and.w	r3, r3, #31
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d104      	bne.n	800f418 <USB_EPStartXfer+0x10e6>
 800f40e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f412:	3b01      	subs	r3, #1
 800f414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	029b      	lsls	r3, r3, #10
 800f420:	b29b      	uxth	r3, r3
 800f422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f430:	801a      	strh	r2, [r3, #0]
 800f432:	e06d      	b.n	800f510 <USB_EPStartXfer+0x11de>
 800f434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	691b      	ldr	r3, [r3, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d116      	bne.n	800f472 <USB_EPStartXfer+0x1140>
 800f444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f448:	881b      	ldrh	r3, [r3, #0]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f450:	b29a      	uxth	r2, r3
 800f452:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f456:	801a      	strh	r2, [r3, #0]
 800f458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f468:	b29a      	uxth	r2, r3
 800f46a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f46e:	801a      	strh	r2, [r3, #0]
 800f470:	e04e      	b.n	800f510 <USB_EPStartXfer+0x11de>
 800f472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	691b      	ldr	r3, [r3, #16]
 800f47e:	085b      	lsrs	r3, r3, #1
 800f480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	f003 0301 	and.w	r3, r3, #1
 800f494:	2b00      	cmp	r3, #0
 800f496:	d004      	beq.n	800f4a2 <USB_EPStartXfer+0x1170>
 800f498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f49c:	3301      	adds	r3, #1
 800f49e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	029b      	lsls	r3, r3, #10
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4b0:	801a      	strh	r2, [r3, #0]
 800f4b2:	e02d      	b.n	800f510 <USB_EPStartXfer+0x11de>
 800f4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	785b      	ldrb	r3, [r3, #1]
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d125      	bne.n	800f510 <USB_EPStartXfer+0x11de>
 800f4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f4da:	4413      	add	r3, r2
 800f4dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	00da      	lsls	r2, r3, #3
 800f4ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f4f2:	4413      	add	r3, r2
 800f4f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f4f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	691b      	ldr	r3, [r3, #16]
 800f508:	b29a      	uxth	r2, r3
 800f50a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f50e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	69db      	ldr	r3, [r3, #28]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f000 81fe 	beq.w	800f91e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	4413      	add	r3, r2
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f542:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d005      	beq.n	800f55a <USB_EPStartXfer+0x1228>
 800f54e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10d      	bne.n	800f576 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f55a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f55e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f562:	2b00      	cmp	r3, #0
 800f564:	f040 81db 	bne.w	800f91e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f568:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f570:	2b00      	cmp	r3, #0
 800f572:	f040 81d4 	bne.w	800f91e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f57a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	b29b      	uxth	r3, r3
 800f594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f59c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	441a      	add	r2, r3
 800f5ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f5be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	8013      	strh	r3, [r2, #0]
 800f5d2:	e1a4      	b.n	800f91e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	78db      	ldrb	r3, [r3, #3]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	f040 819a 	bne.w	800f91a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	699a      	ldr	r2, [r3, #24]
 800f5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d917      	bls.n	800f632 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800f602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	699a      	ldr	r2, [r3, #24]
 800f61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f622:	1ad2      	subs	r2, r2, r3
 800f624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	619a      	str	r2, [r3, #24]
 800f630:	e00e      	b.n	800f650 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800f632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	699b      	ldr	r3, [r3, #24]
 800f63e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2200      	movs	r2, #0
 800f64e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	785b      	ldrb	r3, [r3, #1]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d178      	bne.n	800f752 <USB_EPStartXfer+0x1420>
 800f660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	461a      	mov	r2, r3
 800f680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f684:	4413      	add	r3, r2
 800f686:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	00da      	lsls	r2, r3, #3
 800f698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f69c:	4413      	add	r3, r2
 800f69e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f6a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6aa:	2b3e      	cmp	r3, #62	; 0x3e
 800f6ac:	d91d      	bls.n	800f6ea <USB_EPStartXfer+0x13b8>
 800f6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6b2:	095b      	lsrs	r3, r3, #5
 800f6b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6bc:	f003 031f 	and.w	r3, r3, #31
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d104      	bne.n	800f6ce <USB_EPStartXfer+0x139c>
 800f6c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	029b      	lsls	r3, r3, #10
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6e0:	b29a      	uxth	r2, r3
 800f6e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f6e6:	801a      	strh	r2, [r3, #0]
 800f6e8:	e064      	b.n	800f7b4 <USB_EPStartXfer+0x1482>
 800f6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d116      	bne.n	800f720 <USB_EPStartXfer+0x13ee>
 800f6f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f704:	801a      	strh	r2, [r3, #0]
 800f706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f716:	b29a      	uxth	r2, r3
 800f718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f71c:	801a      	strh	r2, [r3, #0]
 800f71e:	e049      	b.n	800f7b4 <USB_EPStartXfer+0x1482>
 800f720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f724:	085b      	lsrs	r3, r3, #1
 800f726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f72e:	f003 0301 	and.w	r3, r3, #1
 800f732:	2b00      	cmp	r3, #0
 800f734:	d004      	beq.n	800f740 <USB_EPStartXfer+0x140e>
 800f736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f73a:	3301      	adds	r3, #1
 800f73c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f744:	b29b      	uxth	r3, r3
 800f746:	029b      	lsls	r3, r3, #10
 800f748:	b29a      	uxth	r2, r3
 800f74a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f74e:	801a      	strh	r2, [r3, #0]
 800f750:	e030      	b.n	800f7b4 <USB_EPStartXfer+0x1482>
 800f752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	785b      	ldrb	r3, [r3, #1]
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d128      	bne.n	800f7b4 <USB_EPStartXfer+0x1482>
 800f762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f77e:	b29b      	uxth	r3, r3
 800f780:	461a      	mov	r2, r3
 800f782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f786:	4413      	add	r3, r2
 800f788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	00da      	lsls	r2, r3, #3
 800f79a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f79e:	4413      	add	r3, r2
 800f7a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f7a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f7b2:	801a      	strh	r2, [r3, #0]
 800f7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	785b      	ldrb	r3, [r3, #1]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d178      	bne.n	800f8c4 <USB_EPStartXfer+0x1592>
 800f7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f7f6:	4413      	add	r3, r2
 800f7f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	00da      	lsls	r2, r3, #3
 800f80a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f80e:	4413      	add	r3, r2
 800f810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f81c:	2b3e      	cmp	r3, #62	; 0x3e
 800f81e:	d91d      	bls.n	800f85c <USB_EPStartXfer+0x152a>
 800f820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f824:	095b      	lsrs	r3, r3, #5
 800f826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f82e:	f003 031f 	and.w	r3, r3, #31
 800f832:	2b00      	cmp	r3, #0
 800f834:	d104      	bne.n	800f840 <USB_EPStartXfer+0x150e>
 800f836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f83a:	3b01      	subs	r3, #1
 800f83c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f844:	b29b      	uxth	r3, r3
 800f846:	029b      	lsls	r3, r3, #10
 800f848:	b29b      	uxth	r3, r3
 800f84a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f84e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f852:	b29a      	uxth	r2, r3
 800f854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f858:	801a      	strh	r2, [r3, #0]
 800f85a:	e060      	b.n	800f91e <USB_EPStartXfer+0x15ec>
 800f85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f860:	2b00      	cmp	r3, #0
 800f862:	d116      	bne.n	800f892 <USB_EPStartXfer+0x1560>
 800f864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f870:	b29a      	uxth	r2, r3
 800f872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f876:	801a      	strh	r2, [r3, #0]
 800f878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f87c:	881b      	ldrh	r3, [r3, #0]
 800f87e:	b29b      	uxth	r3, r3
 800f880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f888:	b29a      	uxth	r2, r3
 800f88a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f88e:	801a      	strh	r2, [r3, #0]
 800f890:	e045      	b.n	800f91e <USB_EPStartXfer+0x15ec>
 800f892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f896:	085b      	lsrs	r3, r3, #1
 800f898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8a0:	f003 0301 	and.w	r3, r3, #1
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d004      	beq.n	800f8b2 <USB_EPStartXfer+0x1580>
 800f8a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f8b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	029b      	lsls	r3, r3, #10
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f8c0:	801a      	strh	r2, [r3, #0]
 800f8c2:	e02c      	b.n	800f91e <USB_EPStartXfer+0x15ec>
 800f8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	785b      	ldrb	r3, [r3, #1]
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d124      	bne.n	800f91e <USB_EPStartXfer+0x15ec>
 800f8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f8ea:	4413      	add	r3, r2
 800f8ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	00da      	lsls	r2, r3, #3
 800f8fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f902:	4413      	add	r3, r2
 800f904:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f910:	b29a      	uxth	r2, r3
 800f912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f916:	801a      	strh	r2, [r3, #0]
 800f918:	e001      	b.n	800f91e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800f91a:	2301      	movs	r3, #1
 800f91c:	e03a      	b.n	800f994 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f91e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	881b      	ldrh	r3, [r3, #0]
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f944:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f948:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f94c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f950:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f954:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f95c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f96e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	441a      	add	r2, r3
 800f97a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f97e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f98e:	b29b      	uxth	r3, r3
 800f990:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b085      	sub	sp, #20
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	785b      	ldrb	r3, [r3, #1]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d020      	beq.n	800f9f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	009b      	lsls	r3, r3, #2
 800f9b8:	4413      	add	r3, r2
 800f9ba:	881b      	ldrh	r3, [r3, #0]
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9c6:	81bb      	strh	r3, [r7, #12]
 800f9c8:	89bb      	ldrh	r3, [r7, #12]
 800f9ca:	f083 0310 	eor.w	r3, r3, #16
 800f9ce:	81bb      	strh	r3, [r7, #12]
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	441a      	add	r2, r3
 800f9da:	89bb      	ldrh	r3, [r7, #12]
 800f9dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	8013      	strh	r3, [r2, #0]
 800f9f0:	e01f      	b.n	800fa32 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4413      	add	r3, r2
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa08:	81fb      	strh	r3, [r7, #14]
 800fa0a:	89fb      	ldrh	r3, [r7, #14]
 800fa0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fa10:	81fb      	strh	r3, [r7, #14]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	441a      	add	r2, r3
 800fa1c:	89fb      	ldrh	r3, [r7, #14]
 800fa1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b087      	sub	sp, #28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	7b1b      	ldrb	r3, [r3, #12]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f040 809d 	bne.w	800fb8e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	785b      	ldrb	r3, [r3, #1]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d04c      	beq.n	800faf6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	881b      	ldrh	r3, [r3, #0]
 800fa68:	823b      	strh	r3, [r7, #16]
 800fa6a:	8a3b      	ldrh	r3, [r7, #16]
 800fa6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d01b      	beq.n	800faac <USB_EPClearStall+0x6c>
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	4413      	add	r3, r2
 800fa7e:	881b      	ldrh	r3, [r3, #0]
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa8a:	81fb      	strh	r3, [r7, #14]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	441a      	add	r2, r3
 800fa96:	89fb      	ldrh	r3, [r7, #14]
 800fa98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800faa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faa4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	78db      	ldrb	r3, [r3, #3]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d06c      	beq.n	800fb8e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	009b      	lsls	r3, r3, #2
 800fabc:	4413      	add	r3, r2
 800fabe:	881b      	ldrh	r3, [r3, #0]
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faca:	81bb      	strh	r3, [r7, #12]
 800facc:	89bb      	ldrh	r3, [r7, #12]
 800face:	f083 0320 	eor.w	r3, r3, #32
 800fad2:	81bb      	strh	r3, [r7, #12]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	441a      	add	r2, r3
 800fade:	89bb      	ldrh	r3, [r7, #12]
 800fae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	8013      	strh	r3, [r2, #0]
 800faf4:	e04b      	b.n	800fb8e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800faf6:	687a      	ldr	r2, [r7, #4]
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	4413      	add	r3, r2
 800fb00:	881b      	ldrh	r3, [r3, #0]
 800fb02:	82fb      	strh	r3, [r7, #22]
 800fb04:	8afb      	ldrh	r3, [r7, #22]
 800fb06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d01b      	beq.n	800fb46 <USB_EPClearStall+0x106>
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4413      	add	r3, r2
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb24:	82bb      	strh	r3, [r7, #20]
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	441a      	add	r2, r3
 800fb30:	8abb      	ldrh	r3, [r7, #20]
 800fb32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fb3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	4413      	add	r3, r2
 800fb50:	881b      	ldrh	r3, [r3, #0]
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb5c:	827b      	strh	r3, [r7, #18]
 800fb5e:	8a7b      	ldrh	r3, [r7, #18]
 800fb60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fb64:	827b      	strh	r3, [r7, #18]
 800fb66:	8a7b      	ldrh	r3, [r7, #18]
 800fb68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fb6c:	827b      	strh	r3, [r7, #18]
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	441a      	add	r2, r3
 800fb78:	8a7b      	ldrh	r3, [r7, #18]
 800fb7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	371c      	adds	r7, #28
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	460b      	mov	r3, r1
 800fba6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fba8:	78fb      	ldrb	r3, [r7, #3]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d103      	bne.n	800fbb6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2280      	movs	r2, #128	; 0x80
 800fbb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	370c      	adds	r7, #12
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b085      	sub	sp, #20
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fc04:	68fb      	ldr	r3, [r7, #12]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b08d      	sub	sp, #52	; 0x34
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	60f8      	str	r0, [r7, #12]
 800fc1a:	60b9      	str	r1, [r7, #8]
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	461a      	mov	r2, r3
 800fc20:	460b      	mov	r3, r1
 800fc22:	80fb      	strh	r3, [r7, #6]
 800fc24:	4613      	mov	r3, r2
 800fc26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fc28:	88bb      	ldrh	r3, [r7, #4]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	085b      	lsrs	r3, r3, #1
 800fc2e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fc38:	88fa      	ldrh	r2, [r7, #6]
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc42:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc48:	e01b      	b.n	800fc82 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800fc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800fc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc52:	3301      	adds	r3, #1
 800fc54:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800fc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	021b      	lsls	r3, r3, #8
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	461a      	mov	r2, r3
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	3302      	adds	r3, #2
 800fc74:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800fc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc78:	3301      	adds	r3, #1
 800fc7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800fc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1e0      	bne.n	800fc4a <USB_WritePMA+0x38>
  }
}
 800fc88:	bf00      	nop
 800fc8a:	bf00      	nop
 800fc8c:	3734      	adds	r7, #52	; 0x34
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr

0800fc96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fc96:	b480      	push	{r7}
 800fc98:	b08b      	sub	sp, #44	; 0x2c
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	60f8      	str	r0, [r7, #12]
 800fc9e:	60b9      	str	r1, [r7, #8]
 800fca0:	4611      	mov	r1, r2
 800fca2:	461a      	mov	r2, r3
 800fca4:	460b      	mov	r3, r1
 800fca6:	80fb      	strh	r3, [r7, #6]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fcac:	88bb      	ldrh	r3, [r7, #4]
 800fcae:	085b      	lsrs	r3, r3, #1
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fcbc:	88fa      	ldrh	r2, [r7, #6]
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fcc6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	627b      	str	r3, [r7, #36]	; 0x24
 800fccc:	e018      	b.n	800fd00 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800fcce:	6a3b      	ldr	r3, [r7, #32]
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fcd6:	6a3b      	ldr	r3, [r7, #32]
 800fcd8:	3302      	adds	r3, #2
 800fcda:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	3301      	adds	r3, #1
 800fce8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	0a1b      	lsrs	r3, r3, #8
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	627b      	str	r3, [r7, #36]	; 0x24
 800fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d1e3      	bne.n	800fcce <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800fd06:	88bb      	ldrh	r3, [r7, #4]
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d007      	beq.n	800fd22 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800fd12:	6a3b      	ldr	r3, [r7, #32]
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	701a      	strb	r2, [r3, #0]
  }
}
 800fd22:	bf00      	nop
 800fd24:	372c      	adds	r7, #44	; 0x2c
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr

0800fd2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
 800fd36:	460b      	mov	r3, r1
 800fd38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fd3a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fd3e:	f002 f931 	bl	8011fa4 <USBD_static_malloc>
 800fd42:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d105      	bne.n	800fd56 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fd52:	2302      	movs	r3, #2
 800fd54:	e066      	b.n	800fe24 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	7c1b      	ldrb	r3, [r3, #16]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d119      	bne.n	800fd9a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fd66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd6a:	2202      	movs	r2, #2
 800fd6c:	2181      	movs	r1, #129	; 0x81
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f001 ffbd 	bl	8011cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fd7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd7e:	2202      	movs	r2, #2
 800fd80:	2101      	movs	r1, #1
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f001 ffb3 	bl	8011cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2210      	movs	r2, #16
 800fd94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fd98:	e016      	b.n	800fdc8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fd9a:	2340      	movs	r3, #64	; 0x40
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	2181      	movs	r1, #129	; 0x81
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f001 ffa4 	bl	8011cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fdac:	2340      	movs	r3, #64	; 0x40
 800fdae:	2202      	movs	r2, #2
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f001 ff9b 	bl	8011cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2210      	movs	r2, #16
 800fdc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fdc8:	2308      	movs	r3, #8
 800fdca:	2203      	movs	r2, #3
 800fdcc:	2182      	movs	r1, #130	; 0x82
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f001 ff8d 	bl	8011cee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	7c1b      	ldrb	r3, [r3, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d109      	bne.n	800fe12 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe08:	2101      	movs	r1, #1
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f002 f85f 	bl	8011ece <USBD_LL_PrepareReceive>
 800fe10:	e007      	b.n	800fe22 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe18:	2340      	movs	r3, #64	; 0x40
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f002 f856 	bl	8011ece <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fe38:	2181      	movs	r1, #129	; 0x81
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f001 ff7d 	bl	8011d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fe46:	2101      	movs	r1, #1
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f001 ff76 	bl	8011d3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fe56:	2182      	movs	r1, #130	; 0x82
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f001 ff6e 	bl	8011d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00e      	beq.n	800fe96 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f002 f899 	bl	8011fc0 <USBD_static_free>
    pdev->pClassData = NULL;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2200      	movs	r2, #0
 800fe92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fe96:	2300      	movs	r3, #0
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3708      	adds	r7, #8
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800feb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800feb2:	2300      	movs	r3, #0
 800feb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800feb6:	2300      	movs	r3, #0
 800feb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800feba:	2300      	movs	r3, #0
 800febc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d101      	bne.n	800fec8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800fec4:	2303      	movs	r3, #3
 800fec6:	e0af      	b.n	8010028 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d03f      	beq.n	800ff54 <USBD_CDC_Setup+0xb4>
 800fed4:	2b20      	cmp	r3, #32
 800fed6:	f040 809f 	bne.w	8010018 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	88db      	ldrh	r3, [r3, #6]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d02e      	beq.n	800ff40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	b25b      	sxtb	r3, r3
 800fee8:	2b00      	cmp	r3, #0
 800feea:	da16      	bge.n	800ff1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	683a      	ldr	r2, [r7, #0]
 800fef6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800fef8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	88d2      	ldrh	r2, [r2, #6]
 800fefe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	88db      	ldrh	r3, [r3, #6]
 800ff04:	2b07      	cmp	r3, #7
 800ff06:	bf28      	it	cs
 800ff08:	2307      	movcs	r3, #7
 800ff0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	89fa      	ldrh	r2, [r7, #14]
 800ff10:	4619      	mov	r1, r3
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f001 facf 	bl	80114b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ff18:	e085      	b.n	8010026 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	785a      	ldrb	r2, [r3, #1]
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	88db      	ldrh	r3, [r3, #6]
 800ff28:	b2da      	uxtb	r2, r3
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ff30:	6939      	ldr	r1, [r7, #16]
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	88db      	ldrh	r3, [r3, #6]
 800ff36:	461a      	mov	r2, r3
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f001 fae8 	bl	801150e <USBD_CtlPrepareRx>
      break;
 800ff3e:	e072      	b.n	8010026 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	683a      	ldr	r2, [r7, #0]
 800ff4a:	7850      	ldrb	r0, [r2, #1]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	6839      	ldr	r1, [r7, #0]
 800ff50:	4798      	blx	r3
      break;
 800ff52:	e068      	b.n	8010026 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	785b      	ldrb	r3, [r3, #1]
 800ff58:	2b0b      	cmp	r3, #11
 800ff5a:	d852      	bhi.n	8010002 <USBD_CDC_Setup+0x162>
 800ff5c:	a201      	add	r2, pc, #4	; (adr r2, 800ff64 <USBD_CDC_Setup+0xc4>)
 800ff5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff62:	bf00      	nop
 800ff64:	0800ff95 	.word	0x0800ff95
 800ff68:	08010011 	.word	0x08010011
 800ff6c:	08010003 	.word	0x08010003
 800ff70:	08010003 	.word	0x08010003
 800ff74:	08010003 	.word	0x08010003
 800ff78:	08010003 	.word	0x08010003
 800ff7c:	08010003 	.word	0x08010003
 800ff80:	08010003 	.word	0x08010003
 800ff84:	08010003 	.word	0x08010003
 800ff88:	08010003 	.word	0x08010003
 800ff8c:	0800ffbf 	.word	0x0800ffbf
 800ff90:	0800ffe9 	.word	0x0800ffe9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	2b03      	cmp	r3, #3
 800ff9e:	d107      	bne.n	800ffb0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ffa0:	f107 030a 	add.w	r3, r7, #10
 800ffa4:	2202      	movs	r2, #2
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f001 fa84 	bl	80114b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ffae:	e032      	b.n	8010016 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ffb0:	6839      	ldr	r1, [r7, #0]
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f001 fa0e 	bl	80113d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ffb8:	2303      	movs	r3, #3
 800ffba:	75fb      	strb	r3, [r7, #23]
          break;
 800ffbc:	e02b      	b.n	8010016 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b03      	cmp	r3, #3
 800ffc8:	d107      	bne.n	800ffda <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ffca:	f107 030d 	add.w	r3, r7, #13
 800ffce:	2201      	movs	r2, #1
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f001 fa6f 	bl	80114b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ffd8:	e01d      	b.n	8010016 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ffda:	6839      	ldr	r1, [r7, #0]
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f001 f9f9 	bl	80113d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	75fb      	strb	r3, [r7, #23]
          break;
 800ffe6:	e016      	b.n	8010016 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	2b03      	cmp	r3, #3
 800fff2:	d00f      	beq.n	8010014 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f001 f9ec 	bl	80113d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800fffc:	2303      	movs	r3, #3
 800fffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010000:	e008      	b.n	8010014 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010002:	6839      	ldr	r1, [r7, #0]
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f001 f9e5 	bl	80113d4 <USBD_CtlError>
          ret = USBD_FAIL;
 801000a:	2303      	movs	r3, #3
 801000c:	75fb      	strb	r3, [r7, #23]
          break;
 801000e:	e002      	b.n	8010016 <USBD_CDC_Setup+0x176>
          break;
 8010010:	bf00      	nop
 8010012:	e008      	b.n	8010026 <USBD_CDC_Setup+0x186>
          break;
 8010014:	bf00      	nop
      }
      break;
 8010016:	e006      	b.n	8010026 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010018:	6839      	ldr	r1, [r7, #0]
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f001 f9da 	bl	80113d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8010020:	2303      	movs	r3, #3
 8010022:	75fb      	strb	r3, [r7, #23]
      break;
 8010024:	bf00      	nop
  }

  return (uint8_t)ret;
 8010026:	7dfb      	ldrb	r3, [r7, #23]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3718      	adds	r7, #24
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	460b      	mov	r3, r1
 801003a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801004e:	2303      	movs	r3, #3
 8010050:	e04f      	b.n	80100f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010058:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801005a:	78fa      	ldrb	r2, [r7, #3]
 801005c:	6879      	ldr	r1, [r7, #4]
 801005e:	4613      	mov	r3, r2
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4413      	add	r3, r2
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	440b      	add	r3, r1
 8010068:	3318      	adds	r3, #24
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d029      	beq.n	80100c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010070:	78fa      	ldrb	r2, [r7, #3]
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	4613      	mov	r3, r2
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	4413      	add	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	440b      	add	r3, r1
 801007e:	3318      	adds	r3, #24
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	78f9      	ldrb	r1, [r7, #3]
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	460b      	mov	r3, r1
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	440b      	add	r3, r1
 801008c:	00db      	lsls	r3, r3, #3
 801008e:	4403      	add	r3, r0
 8010090:	3338      	adds	r3, #56	; 0x38
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	fbb2 f1f3 	udiv	r1, r2, r3
 8010098:	fb01 f303 	mul.w	r3, r1, r3
 801009c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d110      	bne.n	80100c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80100a2:	78fa      	ldrb	r2, [r7, #3]
 80100a4:	6879      	ldr	r1, [r7, #4]
 80100a6:	4613      	mov	r3, r2
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	4413      	add	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	440b      	add	r3, r1
 80100b0:	3318      	adds	r3, #24
 80100b2:	2200      	movs	r2, #0
 80100b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80100b6:	78f9      	ldrb	r1, [r7, #3]
 80100b8:	2300      	movs	r3, #0
 80100ba:	2200      	movs	r2, #0
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f001 fee5 	bl	8011e8c <USBD_LL_Transmit>
 80100c2:	e015      	b.n	80100f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100d2:	691b      	ldr	r3, [r3, #16]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00b      	beq.n	80100f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100de:	691b      	ldr	r3, [r3, #16]
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80100ec:	78fa      	ldrb	r2, [r7, #3]
 80100ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}

080100fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100fa:	b580      	push	{r7, lr}
 80100fc:	b084      	sub	sp, #16
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
 8010102:	460b      	mov	r3, r1
 8010104:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801010c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010114:	2b00      	cmp	r3, #0
 8010116:	d101      	bne.n	801011c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010118:	2303      	movs	r3, #3
 801011a:	e015      	b.n	8010148 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801011c:	78fb      	ldrb	r3, [r7, #3]
 801011e:	4619      	mov	r1, r3
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f001 fef5 	bl	8011f10 <USBD_LL_GetRxDataSize>
 8010126:	4602      	mov	r2, r0
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	68fa      	ldr	r2, [r7, #12]
 8010138:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801013c:	68fa      	ldr	r2, [r7, #12]
 801013e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010142:	4611      	mov	r1, r2
 8010144:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801015e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d101      	bne.n	801016a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010166:	2303      	movs	r3, #3
 8010168:	e01b      	b.n	80101a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d015      	beq.n	80101a0 <USBD_CDC_EP0_RxReady+0x50>
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801017a:	2bff      	cmp	r3, #255	; 0xff
 801017c:	d010      	beq.n	80101a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801018c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010194:	b292      	uxth	r2, r2
 8010196:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	22ff      	movs	r2, #255	; 0xff
 801019c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
	...

080101ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2243      	movs	r2, #67	; 0x43
 80101b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80101ba:	4b03      	ldr	r3, [pc, #12]	; (80101c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80101bc:	4618      	mov	r0, r3
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr
 80101c8:	20000094 	.word	0x20000094

080101cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2243      	movs	r2, #67	; 0x43
 80101d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80101da:	4b03      	ldr	r3, [pc, #12]	; (80101e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80101dc:	4618      	mov	r0, r3
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr
 80101e8:	20000050 	.word	0x20000050

080101ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2243      	movs	r2, #67	; 0x43
 80101f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80101fa:	4b03      	ldr	r3, [pc, #12]	; (8010208 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr
 8010208:	200000d8 	.word	0x200000d8

0801020c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	220a      	movs	r2, #10
 8010218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801021a:	4b03      	ldr	r3, [pc, #12]	; (8010228 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801021c:	4618      	mov	r0, r3
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr
 8010228:	2000000c 	.word	0x2000000c

0801022c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d101      	bne.n	8010240 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801023c:	2303      	movs	r3, #3
 801023e:	e004      	b.n	801024a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	683a      	ldr	r2, [r7, #0]
 8010244:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	370c      	adds	r7, #12
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr

08010256 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010256:	b480      	push	{r7}
 8010258:	b087      	sub	sp, #28
 801025a:	af00      	add	r7, sp, #0
 801025c:	60f8      	str	r0, [r7, #12]
 801025e:	60b9      	str	r1, [r7, #8]
 8010260:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010268:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010270:	2303      	movs	r3, #3
 8010272:	e008      	b.n	8010286 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	68ba      	ldr	r2, [r7, #8]
 8010278:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010284:	2300      	movs	r3, #0
}
 8010286:	4618      	mov	r0, r3
 8010288:	371c      	adds	r7, #28
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr

08010292 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010292:	b480      	push	{r7}
 8010294:	b085      	sub	sp, #20
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
 801029a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80102aa:	2303      	movs	r3, #3
 80102ac:	e004      	b.n	80102b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	683a      	ldr	r2, [r7, #0]
 80102b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3714      	adds	r7, #20
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80102d4:	2301      	movs	r3, #1
 80102d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d101      	bne.n	80102e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80102e2:	2303      	movs	r3, #3
 80102e4:	e01a      	b.n	801031c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d114      	bne.n	801031a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2201      	movs	r2, #1
 80102f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801030e:	2181      	movs	r1, #129	; 0x81
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f001 fdbb 	bl	8011e8c <USBD_LL_Transmit>

    ret = USBD_OK;
 8010316:	2300      	movs	r3, #0
 8010318:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801031a:	7bfb      	ldrb	r3, [r7, #15]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3710      	adds	r7, #16
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801033a:	2b00      	cmp	r3, #0
 801033c:	d101      	bne.n	8010342 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801033e:	2303      	movs	r3, #3
 8010340:	e016      	b.n	8010370 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	7c1b      	ldrb	r3, [r3, #16]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d109      	bne.n	801035e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010354:	2101      	movs	r1, #1
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f001 fdb9 	bl	8011ece <USBD_LL_PrepareReceive>
 801035c:	e007      	b.n	801036e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010364:	2340      	movs	r3, #64	; 0x40
 8010366:	2101      	movs	r1, #1
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f001 fdb0 	bl	8011ece <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801036e:	2300      	movs	r3, #0
}
 8010370:	4618      	mov	r0, r3
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b086      	sub	sp, #24
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	4613      	mov	r3, r2
 8010384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d101      	bne.n	8010390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801038c:	2303      	movs	r3, #3
 801038e:	e01f      	b.n	80103d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2200      	movs	r2, #0
 8010394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2201      	movs	r2, #1
 80103ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	79fa      	ldrb	r2, [r7, #7]
 80103c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f001 fc17 	bl	8011bf8 <USBD_LL_Init>
 80103ca:	4603      	mov	r3, r0
 80103cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80103ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3718      	adds	r7, #24
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80103e2:	2300      	movs	r3, #0
 80103e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d101      	bne.n	80103f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80103ec:	2303      	movs	r3, #3
 80103ee:	e016      	b.n	801041e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	683a      	ldr	r2, [r7, #0]
 80103f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00b      	beq.n	801041c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801040c:	f107 020e 	add.w	r2, r7, #14
 8010410:	4610      	mov	r0, r2
 8010412:	4798      	blx	r3
 8010414:	4602      	mov	r2, r0
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b082      	sub	sp, #8
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f001 fc42 	bl	8011cb8 <USBD_LL_Start>
 8010434:	4603      	mov	r3, r0
}
 8010436:	4618      	mov	r0, r3
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801043e:	b480      	push	{r7}
 8010440:	b083      	sub	sp, #12
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010446:	2300      	movs	r3, #0
}
 8010448:	4618      	mov	r0, r3
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	460b      	mov	r3, r1
 801045e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010460:	2303      	movs	r3, #3
 8010462:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801046a:	2b00      	cmp	r3, #0
 801046c:	d009      	beq.n	8010482 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	78fa      	ldrb	r2, [r7, #3]
 8010478:	4611      	mov	r1, r2
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	4798      	blx	r3
 801047e:	4603      	mov	r3, r0
 8010480:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010482:	7bfb      	ldrb	r3, [r7, #15]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d007      	beq.n	80104b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	78fa      	ldrb	r2, [r7, #3]
 80104ac:	4611      	mov	r1, r2
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	4798      	blx	r3
  }

  return USBD_OK;
 80104b2:	2300      	movs	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80104cc:	6839      	ldr	r1, [r7, #0]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f000 ff46 	bl	8011360 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2201      	movs	r2, #1
 80104d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80104e2:	461a      	mov	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80104f0:	f003 031f 	and.w	r3, r3, #31
 80104f4:	2b02      	cmp	r3, #2
 80104f6:	d01a      	beq.n	801052e <USBD_LL_SetupStage+0x72>
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d822      	bhi.n	8010542 <USBD_LL_SetupStage+0x86>
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <USBD_LL_SetupStage+0x4a>
 8010500:	2b01      	cmp	r3, #1
 8010502:	d00a      	beq.n	801051a <USBD_LL_SetupStage+0x5e>
 8010504:	e01d      	b.n	8010542 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801050c:	4619      	mov	r1, r3
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 f9ee 	bl	80108f0 <USBD_StdDevReq>
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]
      break;
 8010518:	e020      	b.n	801055c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010520:	4619      	mov	r1, r3
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fa52 	bl	80109cc <USBD_StdItfReq>
 8010528:	4603      	mov	r3, r0
 801052a:	73fb      	strb	r3, [r7, #15]
      break;
 801052c:	e016      	b.n	801055c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010534:	4619      	mov	r1, r3
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 fa91 	bl	8010a5e <USBD_StdEPReq>
 801053c:	4603      	mov	r3, r0
 801053e:	73fb      	strb	r3, [r7, #15]
      break;
 8010540:	e00c      	b.n	801055c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801054c:	b2db      	uxtb	r3, r3
 801054e:	4619      	mov	r1, r3
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f001 fc11 	bl	8011d78 <USBD_LL_StallEP>
 8010556:	4603      	mov	r3, r0
 8010558:	73fb      	strb	r3, [r7, #15]
      break;
 801055a:	bf00      	nop
  }

  return ret;
 801055c:	7bfb      	ldrb	r3, [r7, #15]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b086      	sub	sp, #24
 801056a:	af00      	add	r7, sp, #0
 801056c:	60f8      	str	r0, [r7, #12]
 801056e:	460b      	mov	r3, r1
 8010570:	607a      	str	r2, [r7, #4]
 8010572:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010574:	7afb      	ldrb	r3, [r7, #11]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d138      	bne.n	80105ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010580:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010588:	2b03      	cmp	r3, #3
 801058a:	d14a      	bne.n	8010622 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	689a      	ldr	r2, [r3, #8]
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	429a      	cmp	r2, r3
 8010596:	d913      	bls.n	80105c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	689a      	ldr	r2, [r3, #8]
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	1ad2      	subs	r2, r2, r3
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	68da      	ldr	r2, [r3, #12]
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	4293      	cmp	r3, r2
 80105b0:	bf28      	it	cs
 80105b2:	4613      	movcs	r3, r2
 80105b4:	461a      	mov	r2, r3
 80105b6:	6879      	ldr	r1, [r7, #4]
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f000 ffc5 	bl	8011548 <USBD_CtlContinueRx>
 80105be:	e030      	b.n	8010622 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	2b03      	cmp	r3, #3
 80105ca:	d10b      	bne.n	80105e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105d2:	691b      	ldr	r3, [r3, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d005      	beq.n	80105e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105de:	691b      	ldr	r3, [r3, #16]
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f000 ffc0 	bl	801156a <USBD_CtlSendStatus>
 80105ea:	e01a      	b.n	8010622 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b03      	cmp	r3, #3
 80105f6:	d114      	bne.n	8010622 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00e      	beq.n	8010622 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	7afa      	ldrb	r2, [r7, #11]
 801060e:	4611      	mov	r1, r2
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	4798      	blx	r3
 8010614:	4603      	mov	r3, r0
 8010616:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010618:	7dfb      	ldrb	r3, [r7, #23]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	e000      	b.n	8010624 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010622:	2300      	movs	r3, #0
}
 8010624:	4618      	mov	r0, r3
 8010626:	3718      	adds	r7, #24
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b086      	sub	sp, #24
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	460b      	mov	r3, r1
 8010636:	607a      	str	r2, [r7, #4]
 8010638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801063a:	7afb      	ldrb	r3, [r7, #11]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d16b      	bne.n	8010718 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	3314      	adds	r3, #20
 8010644:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801064c:	2b02      	cmp	r3, #2
 801064e:	d156      	bne.n	80106fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	689a      	ldr	r2, [r3, #8]
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	429a      	cmp	r2, r3
 801065a:	d914      	bls.n	8010686 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	689a      	ldr	r2, [r3, #8]
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	1ad2      	subs	r2, r2, r3
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	689b      	ldr	r3, [r3, #8]
 801066e:	461a      	mov	r2, r3
 8010670:	6879      	ldr	r1, [r7, #4]
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f000 ff3a 	bl	80114ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010678:	2300      	movs	r3, #0
 801067a:	2200      	movs	r2, #0
 801067c:	2100      	movs	r1, #0
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f001 fc25 	bl	8011ece <USBD_LL_PrepareReceive>
 8010684:	e03b      	b.n	80106fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	68da      	ldr	r2, [r3, #12]
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	429a      	cmp	r2, r3
 8010690:	d11c      	bne.n	80106cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	685a      	ldr	r2, [r3, #4]
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801069a:	429a      	cmp	r2, r3
 801069c:	d316      	bcc.n	80106cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	685a      	ldr	r2, [r3, #4]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d20f      	bcs.n	80106cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80106ac:	2200      	movs	r2, #0
 80106ae:	2100      	movs	r1, #0
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f000 ff1b 	bl	80114ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2200      	movs	r2, #0
 80106ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106be:	2300      	movs	r3, #0
 80106c0:	2200      	movs	r2, #0
 80106c2:	2100      	movs	r1, #0
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	f001 fc02 	bl	8011ece <USBD_LL_PrepareReceive>
 80106ca:	e018      	b.n	80106fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	2b03      	cmp	r3, #3
 80106d6:	d10b      	bne.n	80106f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106de:	68db      	ldr	r3, [r3, #12]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d005      	beq.n	80106f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80106f0:	2180      	movs	r1, #128	; 0x80
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f001 fb40 	bl	8011d78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 ff49 	bl	8011590 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010704:	2b01      	cmp	r3, #1
 8010706:	d122      	bne.n	801074e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f7ff fe98 	bl	801043e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010716:	e01a      	b.n	801074e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b03      	cmp	r3, #3
 8010722:	d114      	bne.n	801074e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801072a:	695b      	ldr	r3, [r3, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00e      	beq.n	801074e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010736:	695b      	ldr	r3, [r3, #20]
 8010738:	7afa      	ldrb	r2, [r7, #11]
 801073a:	4611      	mov	r1, r2
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	4798      	blx	r3
 8010740:	4603      	mov	r3, r0
 8010742:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010744:	7dfb      	ldrb	r3, [r7, #23]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801074a:	7dfb      	ldrb	r3, [r7, #23]
 801074c:	e000      	b.n	8010750 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3718      	adds	r7, #24
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2201      	movs	r2, #1
 8010764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010784:	2b00      	cmp	r3, #0
 8010786:	d101      	bne.n	801078c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010788:	2303      	movs	r3, #3
 801078a:	e02f      	b.n	80107ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00f      	beq.n	80107b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d009      	beq.n	80107b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	6852      	ldr	r2, [r2, #4]
 80107ae:	b2d2      	uxtb	r2, r2
 80107b0:	4611      	mov	r1, r2
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107b6:	2340      	movs	r3, #64	; 0x40
 80107b8:	2200      	movs	r2, #0
 80107ba:	2100      	movs	r1, #0
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f001 fa96 	bl	8011cee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2201      	movs	r2, #1
 80107c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2240      	movs	r2, #64	; 0x40
 80107ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107d2:	2340      	movs	r3, #64	; 0x40
 80107d4:	2200      	movs	r2, #0
 80107d6:	2180      	movs	r1, #128	; 0x80
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f001 fa88 	bl	8011cee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2201      	movs	r2, #1
 80107e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2240      	movs	r2, #64	; 0x40
 80107e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	460b      	mov	r3, r1
 80107fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	78fa      	ldrb	r2, [r7, #3]
 8010804:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	370c      	adds	r7, #12
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010822:	b2da      	uxtb	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2204      	movs	r2, #4
 801082e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801084e:	b2db      	uxtb	r3, r3
 8010850:	2b04      	cmp	r3, #4
 8010852:	d106      	bne.n	8010862 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801085a:	b2da      	uxtb	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801087e:	2b00      	cmp	r3, #0
 8010880:	d101      	bne.n	8010886 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010882:	2303      	movs	r3, #3
 8010884:	e012      	b.n	80108ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b03      	cmp	r3, #3
 8010890:	d10b      	bne.n	80108aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010898:	69db      	ldr	r3, [r3, #28]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d005      	beq.n	80108aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b087      	sub	sp, #28
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	3301      	adds	r3, #1
 80108ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80108d2:	8a3b      	ldrh	r3, [r7, #16]
 80108d4:	021b      	lsls	r3, r3, #8
 80108d6:	b21a      	sxth	r2, r3
 80108d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108dc:	4313      	orrs	r3, r2
 80108de:	b21b      	sxth	r3, r3
 80108e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80108e2:	89fb      	ldrh	r3, [r7, #14]
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	371c      	adds	r7, #28
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr

080108f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108fa:	2300      	movs	r3, #0
 80108fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010906:	2b40      	cmp	r3, #64	; 0x40
 8010908:	d005      	beq.n	8010916 <USBD_StdDevReq+0x26>
 801090a:	2b40      	cmp	r3, #64	; 0x40
 801090c:	d853      	bhi.n	80109b6 <USBD_StdDevReq+0xc6>
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00b      	beq.n	801092a <USBD_StdDevReq+0x3a>
 8010912:	2b20      	cmp	r3, #32
 8010914:	d14f      	bne.n	80109b6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	4798      	blx	r3
 8010924:	4603      	mov	r3, r0
 8010926:	73fb      	strb	r3, [r7, #15]
      break;
 8010928:	e04a      	b.n	80109c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	785b      	ldrb	r3, [r3, #1]
 801092e:	2b09      	cmp	r3, #9
 8010930:	d83b      	bhi.n	80109aa <USBD_StdDevReq+0xba>
 8010932:	a201      	add	r2, pc, #4	; (adr r2, 8010938 <USBD_StdDevReq+0x48>)
 8010934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010938:	0801098d 	.word	0x0801098d
 801093c:	080109a1 	.word	0x080109a1
 8010940:	080109ab 	.word	0x080109ab
 8010944:	08010997 	.word	0x08010997
 8010948:	080109ab 	.word	0x080109ab
 801094c:	0801096b 	.word	0x0801096b
 8010950:	08010961 	.word	0x08010961
 8010954:	080109ab 	.word	0x080109ab
 8010958:	08010983 	.word	0x08010983
 801095c:	08010975 	.word	0x08010975
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010960:	6839      	ldr	r1, [r7, #0]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 f9de 	bl	8010d24 <USBD_GetDescriptor>
          break;
 8010968:	e024      	b.n	80109b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801096a:	6839      	ldr	r1, [r7, #0]
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 fb6d 	bl	801104c <USBD_SetAddress>
          break;
 8010972:	e01f      	b.n	80109b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010974:	6839      	ldr	r1, [r7, #0]
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 fbac 	bl	80110d4 <USBD_SetConfig>
 801097c:	4603      	mov	r3, r0
 801097e:	73fb      	strb	r3, [r7, #15]
          break;
 8010980:	e018      	b.n	80109b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010982:	6839      	ldr	r1, [r7, #0]
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 fc4b 	bl	8011220 <USBD_GetConfig>
          break;
 801098a:	e013      	b.n	80109b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801098c:	6839      	ldr	r1, [r7, #0]
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 fc7c 	bl	801128c <USBD_GetStatus>
          break;
 8010994:	e00e      	b.n	80109b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 fcab 	bl	80112f4 <USBD_SetFeature>
          break;
 801099e:	e009      	b.n	80109b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80109a0:	6839      	ldr	r1, [r7, #0]
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fcba 	bl	801131c <USBD_ClrFeature>
          break;
 80109a8:	e004      	b.n	80109b4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80109aa:	6839      	ldr	r1, [r7, #0]
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 fd11 	bl	80113d4 <USBD_CtlError>
          break;
 80109b2:	bf00      	nop
      }
      break;
 80109b4:	e004      	b.n	80109c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 fd0b 	bl	80113d4 <USBD_CtlError>
      break;
 80109be:	bf00      	nop
  }

  return ret;
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop

080109cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80109d6:	2300      	movs	r3, #0
 80109d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80109e2:	2b40      	cmp	r3, #64	; 0x40
 80109e4:	d005      	beq.n	80109f2 <USBD_StdItfReq+0x26>
 80109e6:	2b40      	cmp	r3, #64	; 0x40
 80109e8:	d82f      	bhi.n	8010a4a <USBD_StdItfReq+0x7e>
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <USBD_StdItfReq+0x26>
 80109ee:	2b20      	cmp	r3, #32
 80109f0:	d12b      	bne.n	8010a4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	3b01      	subs	r3, #1
 80109fc:	2b02      	cmp	r3, #2
 80109fe:	d81d      	bhi.n	8010a3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	889b      	ldrh	r3, [r3, #4]
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d813      	bhi.n	8010a32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	4798      	blx	r3
 8010a18:	4603      	mov	r3, r0
 8010a1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	88db      	ldrh	r3, [r3, #6]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d110      	bne.n	8010a46 <USBD_StdItfReq+0x7a>
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10d      	bne.n	8010a46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 fd9d 	bl	801156a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010a30:	e009      	b.n	8010a46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010a32:	6839      	ldr	r1, [r7, #0]
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 fccd 	bl	80113d4 <USBD_CtlError>
          break;
 8010a3a:	e004      	b.n	8010a46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010a3c:	6839      	ldr	r1, [r7, #0]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f000 fcc8 	bl	80113d4 <USBD_CtlError>
          break;
 8010a44:	e000      	b.n	8010a48 <USBD_StdItfReq+0x7c>
          break;
 8010a46:	bf00      	nop
      }
      break;
 8010a48:	e004      	b.n	8010a54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 fcc1 	bl	80113d4 <USBD_CtlError>
      break;
 8010a52:	bf00      	nop
  }

  return ret;
 8010a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b084      	sub	sp, #16
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
 8010a66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	889b      	ldrh	r3, [r3, #4]
 8010a70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a7a:	2b40      	cmp	r3, #64	; 0x40
 8010a7c:	d007      	beq.n	8010a8e <USBD_StdEPReq+0x30>
 8010a7e:	2b40      	cmp	r3, #64	; 0x40
 8010a80:	f200 8145 	bhi.w	8010d0e <USBD_StdEPReq+0x2b0>
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00c      	beq.n	8010aa2 <USBD_StdEPReq+0x44>
 8010a88:	2b20      	cmp	r3, #32
 8010a8a:	f040 8140 	bne.w	8010d0e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	6839      	ldr	r1, [r7, #0]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	4798      	blx	r3
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8010aa0:	e13a      	b.n	8010d18 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	785b      	ldrb	r3, [r3, #1]
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d007      	beq.n	8010aba <USBD_StdEPReq+0x5c>
 8010aaa:	2b03      	cmp	r3, #3
 8010aac:	f300 8129 	bgt.w	8010d02 <USBD_StdEPReq+0x2a4>
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d07f      	beq.n	8010bb4 <USBD_StdEPReq+0x156>
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d03c      	beq.n	8010b32 <USBD_StdEPReq+0xd4>
 8010ab8:	e123      	b.n	8010d02 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ac0:	b2db      	uxtb	r3, r3
 8010ac2:	2b02      	cmp	r3, #2
 8010ac4:	d002      	beq.n	8010acc <USBD_StdEPReq+0x6e>
 8010ac6:	2b03      	cmp	r3, #3
 8010ac8:	d016      	beq.n	8010af8 <USBD_StdEPReq+0x9a>
 8010aca:	e02c      	b.n	8010b26 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010acc:	7bbb      	ldrb	r3, [r7, #14]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d00d      	beq.n	8010aee <USBD_StdEPReq+0x90>
 8010ad2:	7bbb      	ldrb	r3, [r7, #14]
 8010ad4:	2b80      	cmp	r3, #128	; 0x80
 8010ad6:	d00a      	beq.n	8010aee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ad8:	7bbb      	ldrb	r3, [r7, #14]
 8010ada:	4619      	mov	r1, r3
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f001 f94b 	bl	8011d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ae2:	2180      	movs	r1, #128	; 0x80
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f001 f947 	bl	8011d78 <USBD_LL_StallEP>
 8010aea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010aec:	e020      	b.n	8010b30 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010aee:	6839      	ldr	r1, [r7, #0]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 fc6f 	bl	80113d4 <USBD_CtlError>
              break;
 8010af6:	e01b      	b.n	8010b30 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	885b      	ldrh	r3, [r3, #2]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d10e      	bne.n	8010b1e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010b00:	7bbb      	ldrb	r3, [r7, #14]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d00b      	beq.n	8010b1e <USBD_StdEPReq+0xc0>
 8010b06:	7bbb      	ldrb	r3, [r7, #14]
 8010b08:	2b80      	cmp	r3, #128	; 0x80
 8010b0a:	d008      	beq.n	8010b1e <USBD_StdEPReq+0xc0>
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	88db      	ldrh	r3, [r3, #6]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d104      	bne.n	8010b1e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b14:	7bbb      	ldrb	r3, [r7, #14]
 8010b16:	4619      	mov	r1, r3
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f001 f92d 	bl	8011d78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f000 fd23 	bl	801156a <USBD_CtlSendStatus>

              break;
 8010b24:	e004      	b.n	8010b30 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010b26:	6839      	ldr	r1, [r7, #0]
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 fc53 	bl	80113d4 <USBD_CtlError>
              break;
 8010b2e:	bf00      	nop
          }
          break;
 8010b30:	e0ec      	b.n	8010d0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	d002      	beq.n	8010b44 <USBD_StdEPReq+0xe6>
 8010b3e:	2b03      	cmp	r3, #3
 8010b40:	d016      	beq.n	8010b70 <USBD_StdEPReq+0x112>
 8010b42:	e030      	b.n	8010ba6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b44:	7bbb      	ldrb	r3, [r7, #14]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00d      	beq.n	8010b66 <USBD_StdEPReq+0x108>
 8010b4a:	7bbb      	ldrb	r3, [r7, #14]
 8010b4c:	2b80      	cmp	r3, #128	; 0x80
 8010b4e:	d00a      	beq.n	8010b66 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b50:	7bbb      	ldrb	r3, [r7, #14]
 8010b52:	4619      	mov	r1, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f001 f90f 	bl	8011d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b5a:	2180      	movs	r1, #128	; 0x80
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f001 f90b 	bl	8011d78 <USBD_LL_StallEP>
 8010b62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010b64:	e025      	b.n	8010bb2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010b66:	6839      	ldr	r1, [r7, #0]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fc33 	bl	80113d4 <USBD_CtlError>
              break;
 8010b6e:	e020      	b.n	8010bb2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	885b      	ldrh	r3, [r3, #2]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d11b      	bne.n	8010bb0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010b78:	7bbb      	ldrb	r3, [r7, #14]
 8010b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d004      	beq.n	8010b8c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010b82:	7bbb      	ldrb	r3, [r7, #14]
 8010b84:	4619      	mov	r1, r3
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f001 f915 	bl	8011db6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fcec 	bl	801156a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	6839      	ldr	r1, [r7, #0]
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	4798      	blx	r3
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010ba4:	e004      	b.n	8010bb0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010ba6:	6839      	ldr	r1, [r7, #0]
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 fc13 	bl	80113d4 <USBD_CtlError>
              break;
 8010bae:	e000      	b.n	8010bb2 <USBD_StdEPReq+0x154>
              break;
 8010bb0:	bf00      	nop
          }
          break;
 8010bb2:	e0ab      	b.n	8010d0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d002      	beq.n	8010bc6 <USBD_StdEPReq+0x168>
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d032      	beq.n	8010c2a <USBD_StdEPReq+0x1cc>
 8010bc4:	e097      	b.n	8010cf6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010bc6:	7bbb      	ldrb	r3, [r7, #14]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d007      	beq.n	8010bdc <USBD_StdEPReq+0x17e>
 8010bcc:	7bbb      	ldrb	r3, [r7, #14]
 8010bce:	2b80      	cmp	r3, #128	; 0x80
 8010bd0:	d004      	beq.n	8010bdc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010bd2:	6839      	ldr	r1, [r7, #0]
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 fbfd 	bl	80113d4 <USBD_CtlError>
                break;
 8010bda:	e091      	b.n	8010d00 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	da0b      	bge.n	8010bfc <USBD_StdEPReq+0x19e>
 8010be4:	7bbb      	ldrb	r3, [r7, #14]
 8010be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010bea:	4613      	mov	r3, r2
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	4413      	add	r3, r2
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	3310      	adds	r3, #16
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	e00b      	b.n	8010c14 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010bfc:	7bbb      	ldrb	r3, [r7, #14]
 8010bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c02:	4613      	mov	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4413      	add	r3, r2
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	4413      	add	r3, r2
 8010c12:	3304      	adds	r3, #4
 8010c14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2202      	movs	r2, #2
 8010c20:	4619      	mov	r1, r3
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 fc47 	bl	80114b6 <USBD_CtlSendData>
              break;
 8010c28:	e06a      	b.n	8010d00 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	da11      	bge.n	8010c56 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010c32:	7bbb      	ldrb	r3, [r7, #14]
 8010c34:	f003 020f 	and.w	r2, r3, #15
 8010c38:	6879      	ldr	r1, [r7, #4]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	4413      	add	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	440b      	add	r3, r1
 8010c44:	3324      	adds	r3, #36	; 0x24
 8010c46:	881b      	ldrh	r3, [r3, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d117      	bne.n	8010c7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010c4c:	6839      	ldr	r1, [r7, #0]
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 fbc0 	bl	80113d4 <USBD_CtlError>
                  break;
 8010c54:	e054      	b.n	8010d00 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010c56:	7bbb      	ldrb	r3, [r7, #14]
 8010c58:	f003 020f 	and.w	r2, r3, #15
 8010c5c:	6879      	ldr	r1, [r7, #4]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4413      	add	r3, r2
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	440b      	add	r3, r1
 8010c68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010c6c:	881b      	ldrh	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d104      	bne.n	8010c7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010c72:	6839      	ldr	r1, [r7, #0]
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 fbad 	bl	80113d4 <USBD_CtlError>
                  break;
 8010c7a:	e041      	b.n	8010d00 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	da0b      	bge.n	8010c9c <USBD_StdEPReq+0x23e>
 8010c84:	7bbb      	ldrb	r3, [r7, #14]
 8010c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	4413      	add	r3, r2
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	3310      	adds	r3, #16
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	4413      	add	r3, r2
 8010c98:	3304      	adds	r3, #4
 8010c9a:	e00b      	b.n	8010cb4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010c9c:	7bbb      	ldrb	r3, [r7, #14]
 8010c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	009b      	lsls	r3, r3, #2
 8010ca6:	4413      	add	r3, r2
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010cb6:	7bbb      	ldrb	r3, [r7, #14]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d002      	beq.n	8010cc2 <USBD_StdEPReq+0x264>
 8010cbc:	7bbb      	ldrb	r3, [r7, #14]
 8010cbe:	2b80      	cmp	r3, #128	; 0x80
 8010cc0:	d103      	bne.n	8010cca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	601a      	str	r2, [r3, #0]
 8010cc8:	e00e      	b.n	8010ce8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010cca:	7bbb      	ldrb	r3, [r7, #14]
 8010ccc:	4619      	mov	r1, r3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f001 f890 	bl	8011df4 <USBD_LL_IsStallEP>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d003      	beq.n	8010ce2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	2201      	movs	r2, #1
 8010cde:	601a      	str	r2, [r3, #0]
 8010ce0:	e002      	b.n	8010ce8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	2202      	movs	r2, #2
 8010cec:	4619      	mov	r1, r3
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 fbe1 	bl	80114b6 <USBD_CtlSendData>
              break;
 8010cf4:	e004      	b.n	8010d00 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010cf6:	6839      	ldr	r1, [r7, #0]
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 fb6b 	bl	80113d4 <USBD_CtlError>
              break;
 8010cfe:	bf00      	nop
          }
          break;
 8010d00:	e004      	b.n	8010d0c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010d02:	6839      	ldr	r1, [r7, #0]
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f000 fb65 	bl	80113d4 <USBD_CtlError>
          break;
 8010d0a:	bf00      	nop
      }
      break;
 8010d0c:	e004      	b.n	8010d18 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010d0e:	6839      	ldr	r1, [r7, #0]
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 fb5f 	bl	80113d4 <USBD_CtlError>
      break;
 8010d16:	bf00      	nop
  }

  return ret;
 8010d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
	...

08010d24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010d32:	2300      	movs	r3, #0
 8010d34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010d36:	2300      	movs	r3, #0
 8010d38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	885b      	ldrh	r3, [r3, #2]
 8010d3e:	0a1b      	lsrs	r3, r3, #8
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	3b01      	subs	r3, #1
 8010d44:	2b0e      	cmp	r3, #14
 8010d46:	f200 8152 	bhi.w	8010fee <USBD_GetDescriptor+0x2ca>
 8010d4a:	a201      	add	r2, pc, #4	; (adr r2, 8010d50 <USBD_GetDescriptor+0x2c>)
 8010d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d50:	08010dc1 	.word	0x08010dc1
 8010d54:	08010dd9 	.word	0x08010dd9
 8010d58:	08010e19 	.word	0x08010e19
 8010d5c:	08010fef 	.word	0x08010fef
 8010d60:	08010fef 	.word	0x08010fef
 8010d64:	08010f8f 	.word	0x08010f8f
 8010d68:	08010fbb 	.word	0x08010fbb
 8010d6c:	08010fef 	.word	0x08010fef
 8010d70:	08010fef 	.word	0x08010fef
 8010d74:	08010fef 	.word	0x08010fef
 8010d78:	08010fef 	.word	0x08010fef
 8010d7c:	08010fef 	.word	0x08010fef
 8010d80:	08010fef 	.word	0x08010fef
 8010d84:	08010fef 	.word	0x08010fef
 8010d88:	08010d8d 	.word	0x08010d8d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00b      	beq.n	8010db0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d9e:	69db      	ldr	r3, [r3, #28]
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	7c12      	ldrb	r2, [r2, #16]
 8010da4:	f107 0108 	add.w	r1, r7, #8
 8010da8:	4610      	mov	r0, r2
 8010daa:	4798      	blx	r3
 8010dac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010dae:	e126      	b.n	8010ffe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010db0:	6839      	ldr	r1, [r7, #0]
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 fb0e 	bl	80113d4 <USBD_CtlError>
        err++;
 8010db8:	7afb      	ldrb	r3, [r7, #11]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	72fb      	strb	r3, [r7, #11]
      break;
 8010dbe:	e11e      	b.n	8010ffe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	7c12      	ldrb	r2, [r2, #16]
 8010dcc:	f107 0108 	add.w	r1, r7, #8
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	4798      	blx	r3
 8010dd4:	60f8      	str	r0, [r7, #12]
      break;
 8010dd6:	e112      	b.n	8010ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	7c1b      	ldrb	r3, [r3, #16]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d10d      	bne.n	8010dfc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de8:	f107 0208 	add.w	r2, r7, #8
 8010dec:	4610      	mov	r0, r2
 8010dee:	4798      	blx	r3
 8010df0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3301      	adds	r3, #1
 8010df6:	2202      	movs	r2, #2
 8010df8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010dfa:	e100      	b.n	8010ffe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e04:	f107 0208 	add.w	r2, r7, #8
 8010e08:	4610      	mov	r0, r2
 8010e0a:	4798      	blx	r3
 8010e0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	3301      	adds	r3, #1
 8010e12:	2202      	movs	r2, #2
 8010e14:	701a      	strb	r2, [r3, #0]
      break;
 8010e16:	e0f2      	b.n	8010ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	885b      	ldrh	r3, [r3, #2]
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	2b05      	cmp	r3, #5
 8010e20:	f200 80ac 	bhi.w	8010f7c <USBD_GetDescriptor+0x258>
 8010e24:	a201      	add	r2, pc, #4	; (adr r2, 8010e2c <USBD_GetDescriptor+0x108>)
 8010e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2a:	bf00      	nop
 8010e2c:	08010e45 	.word	0x08010e45
 8010e30:	08010e79 	.word	0x08010e79
 8010e34:	08010ead 	.word	0x08010ead
 8010e38:	08010ee1 	.word	0x08010ee1
 8010e3c:	08010f15 	.word	0x08010f15
 8010e40:	08010f49 	.word	0x08010f49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00b      	beq.n	8010e68 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	7c12      	ldrb	r2, [r2, #16]
 8010e5c:	f107 0108 	add.w	r1, r7, #8
 8010e60:	4610      	mov	r0, r2
 8010e62:	4798      	blx	r3
 8010e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e66:	e091      	b.n	8010f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e68:	6839      	ldr	r1, [r7, #0]
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 fab2 	bl	80113d4 <USBD_CtlError>
            err++;
 8010e70:	7afb      	ldrb	r3, [r7, #11]
 8010e72:	3301      	adds	r3, #1
 8010e74:	72fb      	strb	r3, [r7, #11]
          break;
 8010e76:	e089      	b.n	8010f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00b      	beq.n	8010e9c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	7c12      	ldrb	r2, [r2, #16]
 8010e90:	f107 0108 	add.w	r1, r7, #8
 8010e94:	4610      	mov	r0, r2
 8010e96:	4798      	blx	r3
 8010e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e9a:	e077      	b.n	8010f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e9c:	6839      	ldr	r1, [r7, #0]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 fa98 	bl	80113d4 <USBD_CtlError>
            err++;
 8010ea4:	7afb      	ldrb	r3, [r7, #11]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8010eaa:	e06f      	b.n	8010f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00b      	beq.n	8010ed0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	7c12      	ldrb	r2, [r2, #16]
 8010ec4:	f107 0108 	add.w	r1, r7, #8
 8010ec8:	4610      	mov	r0, r2
 8010eca:	4798      	blx	r3
 8010ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ece:	e05d      	b.n	8010f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ed0:	6839      	ldr	r1, [r7, #0]
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f000 fa7e 	bl	80113d4 <USBD_CtlError>
            err++;
 8010ed8:	7afb      	ldrb	r3, [r7, #11]
 8010eda:	3301      	adds	r3, #1
 8010edc:	72fb      	strb	r3, [r7, #11]
          break;
 8010ede:	e055      	b.n	8010f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ee6:	691b      	ldr	r3, [r3, #16]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d00b      	beq.n	8010f04 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ef2:	691b      	ldr	r3, [r3, #16]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	7c12      	ldrb	r2, [r2, #16]
 8010ef8:	f107 0108 	add.w	r1, r7, #8
 8010efc:	4610      	mov	r0, r2
 8010efe:	4798      	blx	r3
 8010f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f02:	e043      	b.n	8010f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010f04:	6839      	ldr	r1, [r7, #0]
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 fa64 	bl	80113d4 <USBD_CtlError>
            err++;
 8010f0c:	7afb      	ldrb	r3, [r7, #11]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	72fb      	strb	r3, [r7, #11]
          break;
 8010f12:	e03b      	b.n	8010f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f1a:	695b      	ldr	r3, [r3, #20]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00b      	beq.n	8010f38 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f26:	695b      	ldr	r3, [r3, #20]
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	7c12      	ldrb	r2, [r2, #16]
 8010f2c:	f107 0108 	add.w	r1, r7, #8
 8010f30:	4610      	mov	r0, r2
 8010f32:	4798      	blx	r3
 8010f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f36:	e029      	b.n	8010f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010f38:	6839      	ldr	r1, [r7, #0]
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 fa4a 	bl	80113d4 <USBD_CtlError>
            err++;
 8010f40:	7afb      	ldrb	r3, [r7, #11]
 8010f42:	3301      	adds	r3, #1
 8010f44:	72fb      	strb	r3, [r7, #11]
          break;
 8010f46:	e021      	b.n	8010f8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f4e:	699b      	ldr	r3, [r3, #24]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00b      	beq.n	8010f6c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f5a:	699b      	ldr	r3, [r3, #24]
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	7c12      	ldrb	r2, [r2, #16]
 8010f60:	f107 0108 	add.w	r1, r7, #8
 8010f64:	4610      	mov	r0, r2
 8010f66:	4798      	blx	r3
 8010f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f6a:	e00f      	b.n	8010f8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010f6c:	6839      	ldr	r1, [r7, #0]
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 fa30 	bl	80113d4 <USBD_CtlError>
            err++;
 8010f74:	7afb      	ldrb	r3, [r7, #11]
 8010f76:	3301      	adds	r3, #1
 8010f78:	72fb      	strb	r3, [r7, #11]
          break;
 8010f7a:	e007      	b.n	8010f8c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010f7c:	6839      	ldr	r1, [r7, #0]
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 fa28 	bl	80113d4 <USBD_CtlError>
          err++;
 8010f84:	7afb      	ldrb	r3, [r7, #11]
 8010f86:	3301      	adds	r3, #1
 8010f88:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010f8a:	bf00      	nop
      }
      break;
 8010f8c:	e037      	b.n	8010ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	7c1b      	ldrb	r3, [r3, #16]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d109      	bne.n	8010faa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f9e:	f107 0208 	add.w	r2, r7, #8
 8010fa2:	4610      	mov	r0, r2
 8010fa4:	4798      	blx	r3
 8010fa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010fa8:	e029      	b.n	8010ffe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 fa11 	bl	80113d4 <USBD_CtlError>
        err++;
 8010fb2:	7afb      	ldrb	r3, [r7, #11]
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8010fb8:	e021      	b.n	8010ffe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	7c1b      	ldrb	r3, [r3, #16]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10d      	bne.n	8010fde <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fca:	f107 0208 	add.w	r2, r7, #8
 8010fce:	4610      	mov	r0, r2
 8010fd0:	4798      	blx	r3
 8010fd2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	2207      	movs	r2, #7
 8010fda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010fdc:	e00f      	b.n	8010ffe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010fde:	6839      	ldr	r1, [r7, #0]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 f9f7 	bl	80113d4 <USBD_CtlError>
        err++;
 8010fe6:	7afb      	ldrb	r3, [r7, #11]
 8010fe8:	3301      	adds	r3, #1
 8010fea:	72fb      	strb	r3, [r7, #11]
      break;
 8010fec:	e007      	b.n	8010ffe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010fee:	6839      	ldr	r1, [r7, #0]
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 f9ef 	bl	80113d4 <USBD_CtlError>
      err++;
 8010ff6:	7afb      	ldrb	r3, [r7, #11]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8010ffc:	bf00      	nop
  }

  if (err != 0U)
 8010ffe:	7afb      	ldrb	r3, [r7, #11]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d11e      	bne.n	8011042 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	88db      	ldrh	r3, [r3, #6]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d016      	beq.n	801103a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801100c:	893b      	ldrh	r3, [r7, #8]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00e      	beq.n	8011030 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	88da      	ldrh	r2, [r3, #6]
 8011016:	893b      	ldrh	r3, [r7, #8]
 8011018:	4293      	cmp	r3, r2
 801101a:	bf28      	it	cs
 801101c:	4613      	movcs	r3, r2
 801101e:	b29b      	uxth	r3, r3
 8011020:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011022:	893b      	ldrh	r3, [r7, #8]
 8011024:	461a      	mov	r2, r3
 8011026:	68f9      	ldr	r1, [r7, #12]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f000 fa44 	bl	80114b6 <USBD_CtlSendData>
 801102e:	e009      	b.n	8011044 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 f9ce 	bl	80113d4 <USBD_CtlError>
 8011038:	e004      	b.n	8011044 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f000 fa95 	bl	801156a <USBD_CtlSendStatus>
 8011040:	e000      	b.n	8011044 <USBD_GetDescriptor+0x320>
    return;
 8011042:	bf00      	nop
  }
}
 8011044:	3710      	adds	r7, #16
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop

0801104c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	889b      	ldrh	r3, [r3, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d131      	bne.n	80110c2 <USBD_SetAddress+0x76>
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	88db      	ldrh	r3, [r3, #6]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d12d      	bne.n	80110c2 <USBD_SetAddress+0x76>
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	885b      	ldrh	r3, [r3, #2]
 801106a:	2b7f      	cmp	r3, #127	; 0x7f
 801106c:	d829      	bhi.n	80110c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	885b      	ldrh	r3, [r3, #2]
 8011072:	b2db      	uxtb	r3, r3
 8011074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011080:	b2db      	uxtb	r3, r3
 8011082:	2b03      	cmp	r3, #3
 8011084:	d104      	bne.n	8011090 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011086:	6839      	ldr	r1, [r7, #0]
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f000 f9a3 	bl	80113d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801108e:	e01d      	b.n	80110cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	7bfa      	ldrb	r2, [r7, #15]
 8011094:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011098:	7bfb      	ldrb	r3, [r7, #15]
 801109a:	4619      	mov	r1, r3
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fed6 	bl	8011e4e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f000 fa61 	bl	801156a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80110a8:	7bfb      	ldrb	r3, [r7, #15]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d004      	beq.n	80110b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2202      	movs	r2, #2
 80110b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110b6:	e009      	b.n	80110cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2201      	movs	r2, #1
 80110bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110c0:	e004      	b.n	80110cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80110c2:	6839      	ldr	r1, [r7, #0]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 f985 	bl	80113d4 <USBD_CtlError>
  }
}
 80110ca:	bf00      	nop
 80110cc:	bf00      	nop
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	885b      	ldrh	r3, [r3, #2]
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	4b4c      	ldr	r3, [pc, #304]	; (801121c <USBD_SetConfig+0x148>)
 80110ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80110ec:	4b4b      	ldr	r3, [pc, #300]	; (801121c <USBD_SetConfig+0x148>)
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d905      	bls.n	8011100 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f96c 	bl	80113d4 <USBD_CtlError>
    return USBD_FAIL;
 80110fc:	2303      	movs	r3, #3
 80110fe:	e088      	b.n	8011212 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011106:	b2db      	uxtb	r3, r3
 8011108:	2b02      	cmp	r3, #2
 801110a:	d002      	beq.n	8011112 <USBD_SetConfig+0x3e>
 801110c:	2b03      	cmp	r3, #3
 801110e:	d025      	beq.n	801115c <USBD_SetConfig+0x88>
 8011110:	e071      	b.n	80111f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011112:	4b42      	ldr	r3, [pc, #264]	; (801121c <USBD_SetConfig+0x148>)
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d01c      	beq.n	8011154 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801111a:	4b40      	ldr	r3, [pc, #256]	; (801121c <USBD_SetConfig+0x148>)
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	461a      	mov	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011124:	4b3d      	ldr	r3, [pc, #244]	; (801121c <USBD_SetConfig+0x148>)
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	4619      	mov	r1, r3
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f7ff f992 	bl	8010454 <USBD_SetClassConfig>
 8011130:	4603      	mov	r3, r0
 8011132:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011134:	7bfb      	ldrb	r3, [r7, #15]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d004      	beq.n	8011144 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801113a:	6839      	ldr	r1, [r7, #0]
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 f949 	bl	80113d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011142:	e065      	b.n	8011210 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fa10 	bl	801156a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2203      	movs	r2, #3
 801114e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011152:	e05d      	b.n	8011210 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 fa08 	bl	801156a <USBD_CtlSendStatus>
      break;
 801115a:	e059      	b.n	8011210 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801115c:	4b2f      	ldr	r3, [pc, #188]	; (801121c <USBD_SetConfig+0x148>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d112      	bne.n	801118a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2202      	movs	r2, #2
 8011168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801116c:	4b2b      	ldr	r3, [pc, #172]	; (801121c <USBD_SetConfig+0x148>)
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	461a      	mov	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011176:	4b29      	ldr	r3, [pc, #164]	; (801121c <USBD_SetConfig+0x148>)
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	4619      	mov	r1, r3
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff f985 	bl	801048c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 f9f1 	bl	801156a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011188:	e042      	b.n	8011210 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801118a:	4b24      	ldr	r3, [pc, #144]	; (801121c <USBD_SetConfig+0x148>)
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	429a      	cmp	r2, r3
 8011196:	d02a      	beq.n	80111ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	b2db      	uxtb	r3, r3
 801119e:	4619      	mov	r1, r3
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f7ff f973 	bl	801048c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80111a6:	4b1d      	ldr	r3, [pc, #116]	; (801121c <USBD_SetConfig+0x148>)
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	461a      	mov	r2, r3
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80111b0:	4b1a      	ldr	r3, [pc, #104]	; (801121c <USBD_SetConfig+0x148>)
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	4619      	mov	r1, r3
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7ff f94c 	bl	8010454 <USBD_SetClassConfig>
 80111bc:	4603      	mov	r3, r0
 80111be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80111c0:	7bfb      	ldrb	r3, [r7, #15]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d00f      	beq.n	80111e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80111c6:	6839      	ldr	r1, [r7, #0]
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f000 f903 	bl	80113d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	4619      	mov	r1, r3
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff f958 	bl	801048c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2202      	movs	r2, #2
 80111e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80111e4:	e014      	b.n	8011210 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f9bf 	bl	801156a <USBD_CtlSendStatus>
      break;
 80111ec:	e010      	b.n	8011210 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f000 f9bb 	bl	801156a <USBD_CtlSendStatus>
      break;
 80111f4:	e00c      	b.n	8011210 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80111f6:	6839      	ldr	r1, [r7, #0]
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f000 f8eb 	bl	80113d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80111fe:	4b07      	ldr	r3, [pc, #28]	; (801121c <USBD_SetConfig+0x148>)
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	4619      	mov	r1, r3
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7ff f941 	bl	801048c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801120a:	2303      	movs	r3, #3
 801120c:	73fb      	strb	r3, [r7, #15]
      break;
 801120e:	bf00      	nop
  }

  return ret;
 8011210:	7bfb      	ldrb	r3, [r7, #15]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3710      	adds	r7, #16
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	200009f4 	.word	0x200009f4

08011220 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	88db      	ldrh	r3, [r3, #6]
 801122e:	2b01      	cmp	r3, #1
 8011230:	d004      	beq.n	801123c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011232:	6839      	ldr	r1, [r7, #0]
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f000 f8cd 	bl	80113d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801123a:	e023      	b.n	8011284 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011242:	b2db      	uxtb	r3, r3
 8011244:	2b02      	cmp	r3, #2
 8011246:	dc02      	bgt.n	801124e <USBD_GetConfig+0x2e>
 8011248:	2b00      	cmp	r3, #0
 801124a:	dc03      	bgt.n	8011254 <USBD_GetConfig+0x34>
 801124c:	e015      	b.n	801127a <USBD_GetConfig+0x5a>
 801124e:	2b03      	cmp	r3, #3
 8011250:	d00b      	beq.n	801126a <USBD_GetConfig+0x4a>
 8011252:	e012      	b.n	801127a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	3308      	adds	r3, #8
 801125e:	2201      	movs	r2, #1
 8011260:	4619      	mov	r1, r3
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 f927 	bl	80114b6 <USBD_CtlSendData>
        break;
 8011268:	e00c      	b.n	8011284 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	3304      	adds	r3, #4
 801126e:	2201      	movs	r2, #1
 8011270:	4619      	mov	r1, r3
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f91f 	bl	80114b6 <USBD_CtlSendData>
        break;
 8011278:	e004      	b.n	8011284 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 f8a9 	bl	80113d4 <USBD_CtlError>
        break;
 8011282:	bf00      	nop
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801129c:	b2db      	uxtb	r3, r3
 801129e:	3b01      	subs	r3, #1
 80112a0:	2b02      	cmp	r3, #2
 80112a2:	d81e      	bhi.n	80112e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	88db      	ldrh	r3, [r3, #6]
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d004      	beq.n	80112b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80112ac:	6839      	ldr	r1, [r7, #0]
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 f890 	bl	80113d4 <USBD_CtlError>
        break;
 80112b4:	e01a      	b.n	80112ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2201      	movs	r2, #1
 80112ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d005      	beq.n	80112d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	f043 0202 	orr.w	r2, r3, #2
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	330c      	adds	r3, #12
 80112d6:	2202      	movs	r2, #2
 80112d8:	4619      	mov	r1, r3
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f000 f8eb 	bl	80114b6 <USBD_CtlSendData>
      break;
 80112e0:	e004      	b.n	80112ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80112e2:	6839      	ldr	r1, [r7, #0]
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f000 f875 	bl	80113d4 <USBD_CtlError>
      break;
 80112ea:	bf00      	nop
  }
}
 80112ec:	bf00      	nop
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	885b      	ldrh	r3, [r3, #2]
 8011302:	2b01      	cmp	r3, #1
 8011304:	d106      	bne.n	8011314 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2201      	movs	r2, #1
 801130a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f000 f92b 	bl	801156a <USBD_CtlSendStatus>
  }
}
 8011314:	bf00      	nop
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801132c:	b2db      	uxtb	r3, r3
 801132e:	3b01      	subs	r3, #1
 8011330:	2b02      	cmp	r3, #2
 8011332:	d80b      	bhi.n	801134c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	885b      	ldrh	r3, [r3, #2]
 8011338:	2b01      	cmp	r3, #1
 801133a:	d10c      	bne.n	8011356 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 f910 	bl	801156a <USBD_CtlSendStatus>
      }
      break;
 801134a:	e004      	b.n	8011356 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801134c:	6839      	ldr	r1, [r7, #0]
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 f840 	bl	80113d4 <USBD_CtlError>
      break;
 8011354:	e000      	b.n	8011358 <USBD_ClrFeature+0x3c>
      break;
 8011356:	bf00      	nop
  }
}
 8011358:	bf00      	nop
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	781a      	ldrb	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	3301      	adds	r3, #1
 801137a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	781a      	ldrb	r2, [r3, #0]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	3301      	adds	r3, #1
 8011388:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7ff fa92 	bl	80108b4 <SWAPBYTE>
 8011390:	4603      	mov	r3, r0
 8011392:	461a      	mov	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	3301      	adds	r3, #1
 801139c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	3301      	adds	r3, #1
 80113a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80113a4:	68f8      	ldr	r0, [r7, #12]
 80113a6:	f7ff fa85 	bl	80108b4 <SWAPBYTE>
 80113aa:	4603      	mov	r3, r0
 80113ac:	461a      	mov	r2, r3
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3301      	adds	r3, #1
 80113b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	3301      	adds	r3, #1
 80113bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80113be:	68f8      	ldr	r0, [r7, #12]
 80113c0:	f7ff fa78 	bl	80108b4 <SWAPBYTE>
 80113c4:	4603      	mov	r3, r0
 80113c6:	461a      	mov	r2, r3
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	80da      	strh	r2, [r3, #6]
}
 80113cc:	bf00      	nop
 80113ce:	3710      	adds	r7, #16
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80113de:	2180      	movs	r1, #128	; 0x80
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f000 fcc9 	bl	8011d78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80113e6:	2100      	movs	r1, #0
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f000 fcc5 	bl	8011d78 <USBD_LL_StallEP>
}
 80113ee:	bf00      	nop
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b086      	sub	sp, #24
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	60f8      	str	r0, [r7, #12]
 80113fe:	60b9      	str	r1, [r7, #8]
 8011400:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011402:	2300      	movs	r3, #0
 8011404:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d036      	beq.n	801147a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011410:	6938      	ldr	r0, [r7, #16]
 8011412:	f000 f836 	bl	8011482 <USBD_GetLen>
 8011416:	4603      	mov	r3, r0
 8011418:	3301      	adds	r3, #1
 801141a:	b29b      	uxth	r3, r3
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	b29a      	uxth	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011424:	7dfb      	ldrb	r3, [r7, #23]
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	4413      	add	r3, r2
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	7812      	ldrb	r2, [r2, #0]
 801142e:	701a      	strb	r2, [r3, #0]
  idx++;
 8011430:	7dfb      	ldrb	r3, [r7, #23]
 8011432:	3301      	adds	r3, #1
 8011434:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011436:	7dfb      	ldrb	r3, [r7, #23]
 8011438:	68ba      	ldr	r2, [r7, #8]
 801143a:	4413      	add	r3, r2
 801143c:	2203      	movs	r2, #3
 801143e:	701a      	strb	r2, [r3, #0]
  idx++;
 8011440:	7dfb      	ldrb	r3, [r7, #23]
 8011442:	3301      	adds	r3, #1
 8011444:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011446:	e013      	b.n	8011470 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011448:	7dfb      	ldrb	r3, [r7, #23]
 801144a:	68ba      	ldr	r2, [r7, #8]
 801144c:	4413      	add	r3, r2
 801144e:	693a      	ldr	r2, [r7, #16]
 8011450:	7812      	ldrb	r2, [r2, #0]
 8011452:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	3301      	adds	r3, #1
 8011458:	613b      	str	r3, [r7, #16]
    idx++;
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	3301      	adds	r3, #1
 801145e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011460:	7dfb      	ldrb	r3, [r7, #23]
 8011462:	68ba      	ldr	r2, [r7, #8]
 8011464:	4413      	add	r3, r2
 8011466:	2200      	movs	r2, #0
 8011468:	701a      	strb	r2, [r3, #0]
    idx++;
 801146a:	7dfb      	ldrb	r3, [r7, #23]
 801146c:	3301      	adds	r3, #1
 801146e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d1e7      	bne.n	8011448 <USBD_GetString+0x52>
 8011478:	e000      	b.n	801147c <USBD_GetString+0x86>
    return;
 801147a:	bf00      	nop
  }
}
 801147c:	3718      	adds	r7, #24
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011482:	b480      	push	{r7}
 8011484:	b085      	sub	sp, #20
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801148a:	2300      	movs	r3, #0
 801148c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011492:	e005      	b.n	80114a0 <USBD_GetLen+0x1e>
  {
    len++;
 8011494:	7bfb      	ldrb	r3, [r7, #15]
 8011496:	3301      	adds	r3, #1
 8011498:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	3301      	adds	r3, #1
 801149e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d1f5      	bne.n	8011494 <USBD_GetLen+0x12>
  }

  return len;
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3714      	adds	r7, #20
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr

080114b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b084      	sub	sp, #16
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	60f8      	str	r0, [r7, #12]
 80114be:	60b9      	str	r1, [r7, #8]
 80114c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2202      	movs	r2, #2
 80114c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	68ba      	ldr	r2, [r7, #8]
 80114da:	2100      	movs	r1, #0
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f000 fcd5 	bl	8011e8c <USBD_LL_Transmit>

  return USBD_OK;
 80114e2:	2300      	movs	r3, #0
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	60f8      	str	r0, [r7, #12]
 80114f4:	60b9      	str	r1, [r7, #8]
 80114f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	2100      	movs	r1, #0
 80114fe:	68f8      	ldr	r0, [r7, #12]
 8011500:	f000 fcc4 	bl	8011e8c <USBD_LL_Transmit>

  return USBD_OK;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b084      	sub	sp, #16
 8011512:	af00      	add	r7, sp, #0
 8011514:	60f8      	str	r0, [r7, #12]
 8011516:	60b9      	str	r1, [r7, #8]
 8011518:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2203      	movs	r2, #3
 801151e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	68ba      	ldr	r2, [r7, #8]
 8011536:	2100      	movs	r1, #0
 8011538:	68f8      	ldr	r0, [r7, #12]
 801153a:	f000 fcc8 	bl	8011ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 801153e:	2300      	movs	r3, #0
}
 8011540:	4618      	mov	r0, r3
 8011542:	3710      	adds	r7, #16
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b084      	sub	sp, #16
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	68ba      	ldr	r2, [r7, #8]
 8011558:	2100      	movs	r1, #0
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f000 fcb7 	bl	8011ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b082      	sub	sp, #8
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2204      	movs	r2, #4
 8011576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801157a:	2300      	movs	r3, #0
 801157c:	2200      	movs	r2, #0
 801157e:	2100      	movs	r1, #0
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f000 fc83 	bl	8011e8c <USBD_LL_Transmit>

  return USBD_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2205      	movs	r2, #5
 801159c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115a0:	2300      	movs	r3, #0
 80115a2:	2200      	movs	r2, #0
 80115a4:	2100      	movs	r1, #0
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f000 fc91 	bl	8011ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
	...

080115b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80115bc:	2200      	movs	r2, #0
 80115be:	4912      	ldr	r1, [pc, #72]	; (8011608 <MX_USB_Device_Init+0x50>)
 80115c0:	4812      	ldr	r0, [pc, #72]	; (801160c <MX_USB_Device_Init+0x54>)
 80115c2:	f7fe fed9 	bl	8010378 <USBD_Init>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80115cc:	f7f2 fb02 	bl	8003bd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80115d0:	490f      	ldr	r1, [pc, #60]	; (8011610 <MX_USB_Device_Init+0x58>)
 80115d2:	480e      	ldr	r0, [pc, #56]	; (801160c <MX_USB_Device_Init+0x54>)
 80115d4:	f7fe ff00 	bl	80103d8 <USBD_RegisterClass>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d001      	beq.n	80115e2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80115de:	f7f2 faf9 	bl	8003bd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80115e2:	490c      	ldr	r1, [pc, #48]	; (8011614 <MX_USB_Device_Init+0x5c>)
 80115e4:	4809      	ldr	r0, [pc, #36]	; (801160c <MX_USB_Device_Init+0x54>)
 80115e6:	f7fe fe21 	bl	801022c <USBD_CDC_RegisterInterface>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80115f0:	f7f2 faf0 	bl	8003bd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80115f4:	4805      	ldr	r0, [pc, #20]	; (801160c <MX_USB_Device_Init+0x54>)
 80115f6:	f7fe ff16 	bl	8010426 <USBD_Start>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d001      	beq.n	8011604 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011600:	f7f2 fae8 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011604:	bf00      	nop
 8011606:	bd80      	pop	{r7, pc}
 8011608:	20000130 	.word	0x20000130
 801160c:	200009f8 	.word	0x200009f8
 8011610:	20000018 	.word	0x20000018
 8011614:	2000011c 	.word	0x2000011c

08011618 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801161c:	2200      	movs	r2, #0
 801161e:	4905      	ldr	r1, [pc, #20]	; (8011634 <CDC_Init_FS+0x1c>)
 8011620:	4805      	ldr	r0, [pc, #20]	; (8011638 <CDC_Init_FS+0x20>)
 8011622:	f7fe fe18 	bl	8010256 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011626:	4905      	ldr	r1, [pc, #20]	; (801163c <CDC_Init_FS+0x24>)
 8011628:	4803      	ldr	r0, [pc, #12]	; (8011638 <CDC_Init_FS+0x20>)
 801162a:	f7fe fe32 	bl	8010292 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 801162e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011630:	4618      	mov	r0, r3
 8011632:	bd80      	pop	{r7, pc}
 8011634:	20001508 	.word	0x20001508
 8011638:	200009f8 	.word	0x200009f8
 801163c:	20000d08 	.word	0x20000d08

08011640 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011640:	b480      	push	{r7}
 8011642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8011644:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011646:	4618      	mov	r0, r3
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	6039      	str	r1, [r7, #0]
 801165a:	71fb      	strb	r3, [r7, #7]
 801165c:	4613      	mov	r3, r2
 801165e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8011660:	79fb      	ldrb	r3, [r7, #7]
 8011662:	2b23      	cmp	r3, #35	; 0x23
 8011664:	d85a      	bhi.n	801171c <CDC_Control_FS+0xcc>
 8011666:	a201      	add	r2, pc, #4	; (adr r2, 801166c <CDC_Control_FS+0x1c>)
 8011668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801166c:	0801171d 	.word	0x0801171d
 8011670:	0801171d 	.word	0x0801171d
 8011674:	0801171d 	.word	0x0801171d
 8011678:	0801171d 	.word	0x0801171d
 801167c:	0801171d 	.word	0x0801171d
 8011680:	0801171d 	.word	0x0801171d
 8011684:	0801171d 	.word	0x0801171d
 8011688:	0801171d 	.word	0x0801171d
 801168c:	0801171d 	.word	0x0801171d
 8011690:	0801171d 	.word	0x0801171d
 8011694:	0801171d 	.word	0x0801171d
 8011698:	0801171d 	.word	0x0801171d
 801169c:	0801171d 	.word	0x0801171d
 80116a0:	0801171d 	.word	0x0801171d
 80116a4:	0801171d 	.word	0x0801171d
 80116a8:	0801171d 	.word	0x0801171d
 80116ac:	0801171d 	.word	0x0801171d
 80116b0:	0801171d 	.word	0x0801171d
 80116b4:	0801171d 	.word	0x0801171d
 80116b8:	0801171d 	.word	0x0801171d
 80116bc:	0801171d 	.word	0x0801171d
 80116c0:	0801171d 	.word	0x0801171d
 80116c4:	0801171d 	.word	0x0801171d
 80116c8:	0801171d 	.word	0x0801171d
 80116cc:	0801171d 	.word	0x0801171d
 80116d0:	0801171d 	.word	0x0801171d
 80116d4:	0801171d 	.word	0x0801171d
 80116d8:	0801171d 	.word	0x0801171d
 80116dc:	0801171d 	.word	0x0801171d
 80116e0:	0801171d 	.word	0x0801171d
 80116e4:	0801171d 	.word	0x0801171d
 80116e8:	0801171d 	.word	0x0801171d
 80116ec:	0801171d 	.word	0x0801171d
 80116f0:	0801171d 	.word	0x0801171d
 80116f4:	080116fd 	.word	0x080116fd
 80116f8:	0801171d 	.word	0x0801171d

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	885b      	ldrh	r3, [r3, #2]
 8011704:	f003 0301 	and.w	r3, r3, #1
 8011708:	2b00      	cmp	r3, #0
 801170a:	d003      	beq.n	8011714 <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 801170c:	4b07      	ldr	r3, [pc, #28]	; (801172c <CDC_Control_FS+0xdc>)
 801170e:	2201      	movs	r2, #1
 8011710:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 8011712:	e004      	b.n	801171e <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 8011714:	4b05      	ldr	r3, [pc, #20]	; (801172c <CDC_Control_FS+0xdc>)
 8011716:	2200      	movs	r2, #0
 8011718:	701a      	strb	r2, [r3, #0]
		break;
 801171a:	e000      	b.n	801171e <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 801171c:	bf00      	nop
	}

	return (USBD_OK);
 801171e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011720:	4618      	mov	r0, r3
 8011722:	3714      	adds	r7, #20
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	20001d08 	.word	0x20001d08

08011730 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801173a:	6879      	ldr	r1, [r7, #4]
 801173c:	480f      	ldr	r0, [pc, #60]	; (801177c <CDC_Receive_FS+0x4c>)
 801173e:	f7fe fda8 	bl	8010292 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011742:	480e      	ldr	r0, [pc, #56]	; (801177c <CDC_Receive_FS+0x4c>)
 8011744:	f7fe fdee 	bl	8010324 <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 8011748:	2240      	movs	r2, #64	; 0x40
 801174a:	2100      	movs	r1, #0
 801174c:	480c      	ldr	r0, [pc, #48]	; (8011780 <CDC_Receive_FS+0x50>)
 801174e:	f000 fcf3 	bl	8012138 <memset>
	uint8_t len = (uint8_t) *Len;
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 8011758:	7bfb      	ldrb	r3, [r7, #15]
 801175a:	461a      	mov	r2, r3
 801175c:	6879      	ldr	r1, [r7, #4]
 801175e:	4808      	ldr	r0, [pc, #32]	; (8011780 <CDC_Receive_FS+0x50>)
 8011760:	f000 fcdc 	bl	801211c <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8011764:	7bfb      	ldrb	r3, [r7, #15]
 8011766:	461a      	mov	r2, r3
 8011768:	2100      	movs	r1, #0
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 fce4 	bl	8012138 <memset>

	return (USBD_OK);
 8011770:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011772:	4618      	mov	r0, r3
 8011774:	3710      	adds	r7, #16
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	200009f8 	.word	0x200009f8
 8011780:	20000cc8 	.word	0x20000cc8

08011784 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8011794:	4b12      	ldr	r3, [pc, #72]	; (80117e0 <CDC_Transmit_FS+0x5c>)
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d01b      	beq.n	80117d4 <CDC_Transmit_FS+0x50>
 801179c:	4b11      	ldr	r3, [pc, #68]	; (80117e4 <CDC_Transmit_FS+0x60>)
 801179e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	2b03      	cmp	r3, #3
 80117a6:	d115      	bne.n	80117d4 <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 80117a8:	4b0e      	ldr	r3, [pc, #56]	; (80117e4 <CDC_Transmit_FS+0x60>)
 80117aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ae:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 80117ba:	2301      	movs	r3, #1
 80117bc:	e00b      	b.n	80117d6 <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80117be:	887b      	ldrh	r3, [r7, #2]
 80117c0:	461a      	mov	r2, r3
 80117c2:	6879      	ldr	r1, [r7, #4]
 80117c4:	4807      	ldr	r0, [pc, #28]	; (80117e4 <CDC_Transmit_FS+0x60>)
 80117c6:	f7fe fd46 	bl	8010256 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80117ca:	4806      	ldr	r0, [pc, #24]	; (80117e4 <CDC_Transmit_FS+0x60>)
 80117cc:	f7fe fd7a 	bl	80102c4 <USBD_CDC_TransmitPacket>
 80117d0:	4603      	mov	r3, r0
 80117d2:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 80117d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	20001d08 	.word	0x20001d08
 80117e4:	200009f8 	.word	0x200009f8

080117e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b087      	sub	sp, #28
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	4613      	mov	r3, r2
 80117f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80117f6:	2300      	movs	r3, #0
 80117f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80117fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117fe:	4618      	mov	r0, r3
 8011800:	371c      	adds	r7, #28
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
	...

0801180c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
 8011812:	4603      	mov	r3, r0
 8011814:	6039      	str	r1, [r7, #0]
 8011816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	2212      	movs	r2, #18
 801181c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801181e:	4b03      	ldr	r3, [pc, #12]	; (801182c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011820:	4618      	mov	r0, r3
 8011822:	370c      	adds	r7, #12
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr
 801182c:	20000150 	.word	0x20000150

08011830 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	4603      	mov	r3, r0
 8011838:	6039      	str	r1, [r7, #0]
 801183a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	2204      	movs	r2, #4
 8011840:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011842:	4b03      	ldr	r3, [pc, #12]	; (8011850 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011844:	4618      	mov	r0, r3
 8011846:	370c      	adds	r7, #12
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr
 8011850:	20000164 	.word	0x20000164

08011854 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	4603      	mov	r3, r0
 801185c:	6039      	str	r1, [r7, #0]
 801185e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011860:	79fb      	ldrb	r3, [r7, #7]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d105      	bne.n	8011872 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	4907      	ldr	r1, [pc, #28]	; (8011888 <USBD_CDC_ProductStrDescriptor+0x34>)
 801186a:	4808      	ldr	r0, [pc, #32]	; (801188c <USBD_CDC_ProductStrDescriptor+0x38>)
 801186c:	f7ff fdc3 	bl	80113f6 <USBD_GetString>
 8011870:	e004      	b.n	801187c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	4904      	ldr	r1, [pc, #16]	; (8011888 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011876:	4805      	ldr	r0, [pc, #20]	; (801188c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011878:	f7ff fdbd 	bl	80113f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801187c:	4b02      	ldr	r3, [pc, #8]	; (8011888 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801187e:	4618      	mov	r0, r3
 8011880:	3708      	adds	r7, #8
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	20001d0c 	.word	0x20001d0c
 801188c:	080151ac 	.word	0x080151ac

08011890 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	4603      	mov	r3, r0
 8011898:	6039      	str	r1, [r7, #0]
 801189a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801189c:	683a      	ldr	r2, [r7, #0]
 801189e:	4904      	ldr	r1, [pc, #16]	; (80118b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80118a0:	4804      	ldr	r0, [pc, #16]	; (80118b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80118a2:	f7ff fda8 	bl	80113f6 <USBD_GetString>
  return USBD_StrDesc;
 80118a6:	4b02      	ldr	r3, [pc, #8]	; (80118b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	20001d0c 	.word	0x20001d0c
 80118b4:	080151c4 	.word	0x080151c4

080118b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	4603      	mov	r3, r0
 80118c0:	6039      	str	r1, [r7, #0]
 80118c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	221a      	movs	r2, #26
 80118c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80118ca:	f000 f843 	bl	8011954 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80118ce:	4b02      	ldr	r3, [pc, #8]	; (80118d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3708      	adds	r7, #8
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	20000168 	.word	0x20000168

080118dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	4603      	mov	r3, r0
 80118e4:	6039      	str	r1, [r7, #0]
 80118e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80118e8:	79fb      	ldrb	r3, [r7, #7]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d105      	bne.n	80118fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80118ee:	683a      	ldr	r2, [r7, #0]
 80118f0:	4907      	ldr	r1, [pc, #28]	; (8011910 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80118f2:	4808      	ldr	r0, [pc, #32]	; (8011914 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80118f4:	f7ff fd7f 	bl	80113f6 <USBD_GetString>
 80118f8:	e004      	b.n	8011904 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80118fa:	683a      	ldr	r2, [r7, #0]
 80118fc:	4904      	ldr	r1, [pc, #16]	; (8011910 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80118fe:	4805      	ldr	r0, [pc, #20]	; (8011914 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011900:	f7ff fd79 	bl	80113f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011904:	4b02      	ldr	r3, [pc, #8]	; (8011910 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011906:	4618      	mov	r0, r3
 8011908:	3708      	adds	r7, #8
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	20001d0c 	.word	0x20001d0c
 8011914:	080151d8 	.word	0x080151d8

08011918 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	6039      	str	r1, [r7, #0]
 8011922:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011924:	79fb      	ldrb	r3, [r7, #7]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d105      	bne.n	8011936 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	4907      	ldr	r1, [pc, #28]	; (801194c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801192e:	4808      	ldr	r0, [pc, #32]	; (8011950 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011930:	f7ff fd61 	bl	80113f6 <USBD_GetString>
 8011934:	e004      	b.n	8011940 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	4904      	ldr	r1, [pc, #16]	; (801194c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801193a:	4805      	ldr	r0, [pc, #20]	; (8011950 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801193c:	f7ff fd5b 	bl	80113f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011940:	4b02      	ldr	r3, [pc, #8]	; (801194c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011942:	4618      	mov	r0, r3
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	20001d0c 	.word	0x20001d0c
 8011950:	080151e4 	.word	0x080151e4

08011954 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801195a:	4b0f      	ldr	r3, [pc, #60]	; (8011998 <Get_SerialNum+0x44>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011960:	4b0e      	ldr	r3, [pc, #56]	; (801199c <Get_SerialNum+0x48>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011966:	4b0e      	ldr	r3, [pc, #56]	; (80119a0 <Get_SerialNum+0x4c>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	4413      	add	r3, r2
 8011972:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d009      	beq.n	801198e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801197a:	2208      	movs	r2, #8
 801197c:	4909      	ldr	r1, [pc, #36]	; (80119a4 <Get_SerialNum+0x50>)
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f000 f814 	bl	80119ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011984:	2204      	movs	r2, #4
 8011986:	4908      	ldr	r1, [pc, #32]	; (80119a8 <Get_SerialNum+0x54>)
 8011988:	68b8      	ldr	r0, [r7, #8]
 801198a:	f000 f80f 	bl	80119ac <IntToUnicode>
  }
}
 801198e:	bf00      	nop
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	1fff7590 	.word	0x1fff7590
 801199c:	1fff7594 	.word	0x1fff7594
 80119a0:	1fff7598 	.word	0x1fff7598
 80119a4:	2000016a 	.word	0x2000016a
 80119a8:	2000017a 	.word	0x2000017a

080119ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b087      	sub	sp, #28
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	4613      	mov	r3, r2
 80119b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80119ba:	2300      	movs	r3, #0
 80119bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80119be:	2300      	movs	r3, #0
 80119c0:	75fb      	strb	r3, [r7, #23]
 80119c2:	e027      	b.n	8011a14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	0f1b      	lsrs	r3, r3, #28
 80119c8:	2b09      	cmp	r3, #9
 80119ca:	d80b      	bhi.n	80119e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	0f1b      	lsrs	r3, r3, #28
 80119d0:	b2da      	uxtb	r2, r3
 80119d2:	7dfb      	ldrb	r3, [r7, #23]
 80119d4:	005b      	lsls	r3, r3, #1
 80119d6:	4619      	mov	r1, r3
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	440b      	add	r3, r1
 80119dc:	3230      	adds	r2, #48	; 0x30
 80119de:	b2d2      	uxtb	r2, r2
 80119e0:	701a      	strb	r2, [r3, #0]
 80119e2:	e00a      	b.n	80119fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	0f1b      	lsrs	r3, r3, #28
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	7dfb      	ldrb	r3, [r7, #23]
 80119ec:	005b      	lsls	r3, r3, #1
 80119ee:	4619      	mov	r1, r3
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	440b      	add	r3, r1
 80119f4:	3237      	adds	r2, #55	; 0x37
 80119f6:	b2d2      	uxtb	r2, r2
 80119f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	011b      	lsls	r3, r3, #4
 80119fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011a00:	7dfb      	ldrb	r3, [r7, #23]
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	3301      	adds	r3, #1
 8011a06:	68ba      	ldr	r2, [r7, #8]
 8011a08:	4413      	add	r3, r2
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011a0e:	7dfb      	ldrb	r3, [r7, #23]
 8011a10:	3301      	adds	r3, #1
 8011a12:	75fb      	strb	r3, [r7, #23]
 8011a14:	7dfa      	ldrb	r2, [r7, #23]
 8011a16:	79fb      	ldrb	r3, [r7, #7]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d3d3      	bcc.n	80119c4 <IntToUnicode+0x18>
  }
}
 8011a1c:	bf00      	nop
 8011a1e:	bf00      	nop
 8011a20:	371c      	adds	r7, #28
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
	...

08011a2c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b098      	sub	sp, #96	; 0x60
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011a34:	f107 030c 	add.w	r3, r7, #12
 8011a38:	2254      	movs	r2, #84	; 0x54
 8011a3a:	2100      	movs	r1, #0
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 fb7b 	bl	8012138 <memset>
  if(pcdHandle->Instance==USB)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a15      	ldr	r2, [pc, #84]	; (8011a9c <HAL_PCD_MspInit+0x70>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d122      	bne.n	8011a92 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a50:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011a52:	2300      	movs	r3, #0
 8011a54:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011a56:	f107 030c 	add.w	r3, r7, #12
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7f8 fcf8 	bl	800a450 <HAL_RCCEx_PeriphCLKConfig>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d001      	beq.n	8011a6a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011a66:	f7f2 f8b5 	bl	8003bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011a6a:	4b0d      	ldr	r3, [pc, #52]	; (8011aa0 <HAL_PCD_MspInit+0x74>)
 8011a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a6e:	4a0c      	ldr	r2, [pc, #48]	; (8011aa0 <HAL_PCD_MspInit+0x74>)
 8011a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011a74:	6593      	str	r3, [r2, #88]	; 0x58
 8011a76:	4b0a      	ldr	r3, [pc, #40]	; (8011aa0 <HAL_PCD_MspInit+0x74>)
 8011a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011a7e:	60bb      	str	r3, [r7, #8]
 8011a80:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011a82:	2200      	movs	r2, #0
 8011a84:	2100      	movs	r1, #0
 8011a86:	2014      	movs	r0, #20
 8011a88:	f7f5 f8cb 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011a8c:	2014      	movs	r0, #20
 8011a8e:	f7f5 f8e2 	bl	8006c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011a92:	bf00      	nop
 8011a94:	3760      	adds	r7, #96	; 0x60
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	40005c00 	.word	0x40005c00
 8011aa0:	40021000 	.word	0x40021000

08011aa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011ab8:	4619      	mov	r1, r3
 8011aba:	4610      	mov	r0, r2
 8011abc:	f7fe fcfe 	bl	80104bc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011ada:	78fa      	ldrb	r2, [r7, #3]
 8011adc:	6879      	ldr	r1, [r7, #4]
 8011ade:	4613      	mov	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	00db      	lsls	r3, r3, #3
 8011ae6:	440b      	add	r3, r1
 8011ae8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	78fb      	ldrb	r3, [r7, #3]
 8011af0:	4619      	mov	r1, r3
 8011af2:	f7fe fd38 	bl	8010566 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011af6:	bf00      	nop
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b082      	sub	sp, #8
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
 8011b06:	460b      	mov	r3, r1
 8011b08:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011b10:	78fa      	ldrb	r2, [r7, #3]
 8011b12:	6879      	ldr	r1, [r7, #4]
 8011b14:	4613      	mov	r3, r2
 8011b16:	009b      	lsls	r3, r3, #2
 8011b18:	4413      	add	r3, r2
 8011b1a:	00db      	lsls	r3, r3, #3
 8011b1c:	440b      	add	r3, r1
 8011b1e:	333c      	adds	r3, #60	; 0x3c
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	78fb      	ldrb	r3, [r7, #3]
 8011b24:	4619      	mov	r1, r3
 8011b26:	f7fe fd81 	bl	801062c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011b2a:	bf00      	nop
 8011b2c:	3708      	adds	r7, #8
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b082      	sub	sp, #8
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7fe fe95 	bl	8010870 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011b46:	bf00      	nop
 8011b48:	3708      	adds	r7, #8
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}

08011b4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b4e:	b580      	push	{r7, lr}
 8011b50:	b084      	sub	sp, #16
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b56:	2301      	movs	r3, #1
 8011b58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	689b      	ldr	r3, [r3, #8]
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	d001      	beq.n	8011b66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011b62:	f7f2 f837 	bl	8003bd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011b6c:	7bfa      	ldrb	r2, [r7, #15]
 8011b6e:	4611      	mov	r1, r2
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7fe fe3f 	bl	80107f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7fe fdeb 	bl	8010758 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011b82:	bf00      	nop
 8011b84:	3710      	adds	r7, #16
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
	...

08011b8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fe fe3a 	bl	8010814 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	699b      	ldr	r3, [r3, #24]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d005      	beq.n	8011bb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ba8:	4b04      	ldr	r3, [pc, #16]	; (8011bbc <HAL_PCD_SuspendCallback+0x30>)
 8011baa:	691b      	ldr	r3, [r3, #16]
 8011bac:	4a03      	ldr	r2, [pc, #12]	; (8011bbc <HAL_PCD_SuspendCallback+0x30>)
 8011bae:	f043 0306 	orr.w	r3, r3, #6
 8011bb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011bb4:	bf00      	nop
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	e000ed00 	.word	0xe000ed00

08011bc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d007      	beq.n	8011be0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bd0:	4b08      	ldr	r3, [pc, #32]	; (8011bf4 <HAL_PCD_ResumeCallback+0x34>)
 8011bd2:	691b      	ldr	r3, [r3, #16]
 8011bd4:	4a07      	ldr	r2, [pc, #28]	; (8011bf4 <HAL_PCD_ResumeCallback+0x34>)
 8011bd6:	f023 0306 	bic.w	r3, r3, #6
 8011bda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011bdc:	f000 f9fa 	bl	8011fd4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fe fe2a 	bl	8010840 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011bec:	bf00      	nop
 8011bee:	3708      	adds	r7, #8
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	e000ed00 	.word	0xe000ed00

08011bf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011c00:	4a2b      	ldr	r2, [pc, #172]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	4a29      	ldr	r2, [pc, #164]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8011c10:	4b27      	ldr	r3, [pc, #156]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c12:	4a28      	ldr	r2, [pc, #160]	; (8011cb4 <USBD_LL_Init+0xbc>)
 8011c14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011c16:	4b26      	ldr	r3, [pc, #152]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c18:	2208      	movs	r2, #8
 8011c1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011c1c:	4b24      	ldr	r3, [pc, #144]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c1e:	2202      	movs	r2, #2
 8011c20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011c22:	4b23      	ldr	r3, [pc, #140]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c24:	2202      	movs	r2, #2
 8011c26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011c28:	4b21      	ldr	r3, [pc, #132]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011c2e:	4b20      	ldr	r3, [pc, #128]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c30:	2200      	movs	r2, #0
 8011c32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011c34:	4b1e      	ldr	r3, [pc, #120]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c36:	2200      	movs	r2, #0
 8011c38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011c3a:	4b1d      	ldr	r3, [pc, #116]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011c40:	481b      	ldr	r0, [pc, #108]	; (8011cb0 <USBD_LL_Init+0xb8>)
 8011c42:	f7f6 f8f9 	bl	8007e38 <HAL_PCD_Init>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011c4c:	f7f1 ffc2 	bl	8003bd4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c56:	2318      	movs	r3, #24
 8011c58:	2200      	movs	r2, #0
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	f7f7 fdb2 	bl	80097c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c66:	2358      	movs	r3, #88	; 0x58
 8011c68:	2200      	movs	r2, #0
 8011c6a:	2180      	movs	r1, #128	; 0x80
 8011c6c:	f7f7 fdaa 	bl	80097c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c76:	23c0      	movs	r3, #192	; 0xc0
 8011c78:	2200      	movs	r2, #0
 8011c7a:	2181      	movs	r1, #129	; 0x81
 8011c7c:	f7f7 fda2 	bl	80097c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	2101      	movs	r1, #1
 8011c8e:	f7f7 fd99 	bl	80097c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	2182      	movs	r1, #130	; 0x82
 8011ca0:	f7f7 fd90 	bl	80097c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	20001f0c 	.word	0x20001f0c
 8011cb4:	40005c00 	.word	0x40005c00

08011cb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7f6 f997 	bl	8008002 <HAL_PCD_Start>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cd8:	7bfb      	ldrb	r3, [r7, #15]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f000 f9c8 	bl	8012070 <USBD_Get_USB_Status>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b084      	sub	sp, #16
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
 8011cf6:	4608      	mov	r0, r1
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	70fb      	strb	r3, [r7, #3]
 8011d00:	460b      	mov	r3, r1
 8011d02:	70bb      	strb	r3, [r7, #2]
 8011d04:	4613      	mov	r3, r2
 8011d06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d16:	78bb      	ldrb	r3, [r7, #2]
 8011d18:	883a      	ldrh	r2, [r7, #0]
 8011d1a:	78f9      	ldrb	r1, [r7, #3]
 8011d1c:	f7f6 fadf 	bl	80082de <HAL_PCD_EP_Open>
 8011d20:	4603      	mov	r3, r0
 8011d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d24:	7bfb      	ldrb	r3, [r7, #15]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 f9a2 	bl	8012070 <USBD_Get_USB_Status>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b084      	sub	sp, #16
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
 8011d42:	460b      	mov	r3, r1
 8011d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d54:	78fa      	ldrb	r2, [r7, #3]
 8011d56:	4611      	mov	r1, r2
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7f6 fb26 	bl	80083aa <HAL_PCD_EP_Close>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d62:	7bfb      	ldrb	r3, [r7, #15]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f000 f983 	bl	8012070 <USBD_Get_USB_Status>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3710      	adds	r7, #16
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	460b      	mov	r3, r1
 8011d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d84:	2300      	movs	r3, #0
 8011d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d92:	78fa      	ldrb	r2, [r7, #3]
 8011d94:	4611      	mov	r1, r2
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7f6 fbe7 	bl	800856a <HAL_PCD_EP_SetStall>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011da0:	7bfb      	ldrb	r3, [r7, #15]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f000 f964 	bl	8012070 <USBD_Get_USB_Status>
 8011da8:	4603      	mov	r3, r0
 8011daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}

08011db6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011db6:	b580      	push	{r7, lr}
 8011db8:	b084      	sub	sp, #16
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011dd0:	78fa      	ldrb	r2, [r7, #3]
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7f6 fc1a 	bl	800860e <HAL_PCD_EP_ClrStall>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dde:	7bfb      	ldrb	r3, [r7, #15]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f000 f945 	bl	8012070 <USBD_Get_USB_Status>
 8011de6:	4603      	mov	r3, r0
 8011de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b085      	sub	sp, #20
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011e06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	da0c      	bge.n	8011e2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011e10:	78fb      	ldrb	r3, [r7, #3]
 8011e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e16:	68f9      	ldr	r1, [r7, #12]
 8011e18:	1c5a      	adds	r2, r3, #1
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	4413      	add	r3, r2
 8011e20:	00db      	lsls	r3, r3, #3
 8011e22:	440b      	add	r3, r1
 8011e24:	3302      	adds	r3, #2
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	e00b      	b.n	8011e42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e2a:	78fb      	ldrb	r3, [r7, #3]
 8011e2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e30:	68f9      	ldr	r1, [r7, #12]
 8011e32:	4613      	mov	r3, r2
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	4413      	add	r3, r2
 8011e38:	00db      	lsls	r3, r3, #3
 8011e3a:	440b      	add	r3, r1
 8011e3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011e40:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3714      	adds	r7, #20
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b084      	sub	sp, #16
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	460b      	mov	r3, r1
 8011e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011e68:	78fa      	ldrb	r2, [r7, #3]
 8011e6a:	4611      	mov	r1, r2
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7f6 fa11 	bl	8008294 <HAL_PCD_SetAddress>
 8011e72:	4603      	mov	r3, r0
 8011e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e76:	7bfb      	ldrb	r3, [r7, #15]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f000 f8f9 	bl	8012070 <USBD_Get_USB_Status>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	607a      	str	r2, [r7, #4]
 8011e96:	603b      	str	r3, [r7, #0]
 8011e98:	460b      	mov	r3, r1
 8011e9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011eaa:	7af9      	ldrb	r1, [r7, #11]
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	f7f6 fb18 	bl	80084e4 <HAL_PCD_EP_Transmit>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011eb8:	7dfb      	ldrb	r3, [r7, #23]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f000 f8d8 	bl	8012070 <USBD_Get_USB_Status>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ec4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3718      	adds	r7, #24
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b086      	sub	sp, #24
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	607a      	str	r2, [r7, #4]
 8011ed8:	603b      	str	r3, [r7, #0]
 8011eda:	460b      	mov	r3, r1
 8011edc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011eec:	7af9      	ldrb	r1, [r7, #11]
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	f7f6 faa2 	bl	800843a <HAL_PCD_EP_Receive>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011efa:	7dfb      	ldrb	r3, [r7, #23]
 8011efc:	4618      	mov	r0, r3
 8011efe:	f000 f8b7 	bl	8012070 <USBD_Get_USB_Status>
 8011f02:	4603      	mov	r3, r0
 8011f04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011f06:	7dbb      	ldrb	r3, [r7, #22]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3718      	adds	r7, #24
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011f22:	78fa      	ldrb	r2, [r7, #3]
 8011f24:	4611      	mov	r1, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7f6 fac4 	bl	80084b4 <HAL_PCD_EP_GetRxCount>
 8011f2c:	4603      	mov	r3, r0
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3708      	adds	r7, #8
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
	...

08011f38 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	460b      	mov	r3, r1
 8011f42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011f44:	78fb      	ldrb	r3, [r7, #3]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d002      	beq.n	8011f50 <HAL_PCDEx_LPM_Callback+0x18>
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d013      	beq.n	8011f76 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011f4e:	e023      	b.n	8011f98 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	699b      	ldr	r3, [r3, #24]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d007      	beq.n	8011f68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011f58:	f000 f83c 	bl	8011fd4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f5c:	4b10      	ldr	r3, [pc, #64]	; (8011fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f5e:	691b      	ldr	r3, [r3, #16]
 8011f60:	4a0f      	ldr	r2, [pc, #60]	; (8011fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f62:	f023 0306 	bic.w	r3, r3, #6
 8011f66:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7fe fc66 	bl	8010840 <USBD_LL_Resume>
    break;
 8011f74:	e010      	b.n	8011f98 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fe fc49 	bl	8010814 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	699b      	ldr	r3, [r3, #24]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d005      	beq.n	8011f96 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f8a:	4b05      	ldr	r3, [pc, #20]	; (8011fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	4a04      	ldr	r2, [pc, #16]	; (8011fa0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f90:	f043 0306 	orr.w	r3, r3, #6
 8011f94:	6113      	str	r3, [r2, #16]
    break;
 8011f96:	bf00      	nop
}
 8011f98:	bf00      	nop
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	e000ed00 	.word	0xe000ed00

08011fa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011fac:	4b03      	ldr	r3, [pc, #12]	; (8011fbc <USBD_static_malloc+0x18>)
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	370c      	adds	r7, #12
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	20002200 	.word	0x20002200

08011fc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]

}
 8011fc8:	bf00      	nop
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b094      	sub	sp, #80	; 0x50
 8011fd8:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011fda:	f107 0318 	add.w	r3, r7, #24
 8011fde:	2238      	movs	r2, #56	; 0x38
 8011fe0:	2100      	movs	r1, #0
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f000 f8a8 	bl	8012138 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011fe8:	1d3b      	adds	r3, r7, #4
 8011fea:	2200      	movs	r2, #0
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	605a      	str	r2, [r3, #4]
 8011ff0:	609a      	str	r2, [r3, #8]
 8011ff2:	60da      	str	r2, [r3, #12]
 8011ff4:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011ff6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011ffa:	f7f7 fc51 	bl	80098a0 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8011ffe:	2322      	movs	r3, #34	; 0x22
 8012000:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8012002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012006:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8012008:	2340      	movs	r3, #64	; 0x40
 801200a:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 801200c:	2301      	movs	r3, #1
 801200e:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012010:	2302      	movs	r3, #2
 8012012:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8012014:	2302      	movs	r3, #2
 8012016:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8012018:	2301      	movs	r3, #1
 801201a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 801201c:	2310      	movs	r3, #16
 801201e:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012020:	2302      	movs	r3, #2
 8012022:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8012024:	2302      	movs	r3, #2
 8012026:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8012028:	2302      	movs	r3, #2
 801202a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801202c:	f107 0318 	add.w	r3, r7, #24
 8012030:	4618      	mov	r0, r3
 8012032:	f7f7 fcd9 	bl	80099e8 <HAL_RCC_OscConfig>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d001      	beq.n	8012040 <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 801203c:	f7f1 fdca 	bl	8003bd4 <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012040:	230f      	movs	r3, #15
 8012042:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012044:	2303      	movs	r3, #3
 8012046:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012048:	2300      	movs	r3, #0
 801204a:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801204c:	2300      	movs	r3, #0
 801204e:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012050:	2300      	movs	r3, #0
 8012052:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8012054:	1d3b      	adds	r3, r7, #4
 8012056:	2103      	movs	r1, #3
 8012058:	4618      	mov	r0, r3
 801205a:	f7f7 ffdd 	bl	800a018 <HAL_RCC_ClockConfig>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	d001      	beq.n	8012068 <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 8012064:	f7f1 fdb6 	bl	8003bd4 <Error_Handler>
		  }

}
 8012068:	bf00      	nop
 801206a:	3750      	adds	r7, #80	; 0x50
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	4603      	mov	r3, r0
 8012078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801207a:	2300      	movs	r3, #0
 801207c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801207e:	79fb      	ldrb	r3, [r7, #7]
 8012080:	2b03      	cmp	r3, #3
 8012082:	d817      	bhi.n	80120b4 <USBD_Get_USB_Status+0x44>
 8012084:	a201      	add	r2, pc, #4	; (adr r2, 801208c <USBD_Get_USB_Status+0x1c>)
 8012086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801208a:	bf00      	nop
 801208c:	0801209d 	.word	0x0801209d
 8012090:	080120a3 	.word	0x080120a3
 8012094:	080120a9 	.word	0x080120a9
 8012098:	080120af 	.word	0x080120af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801209c:	2300      	movs	r3, #0
 801209e:	73fb      	strb	r3, [r7, #15]
    break;
 80120a0:	e00b      	b.n	80120ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80120a2:	2303      	movs	r3, #3
 80120a4:	73fb      	strb	r3, [r7, #15]
    break;
 80120a6:	e008      	b.n	80120ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80120a8:	2301      	movs	r3, #1
 80120aa:	73fb      	strb	r3, [r7, #15]
    break;
 80120ac:	e005      	b.n	80120ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80120ae:	2303      	movs	r3, #3
 80120b0:	73fb      	strb	r3, [r7, #15]
    break;
 80120b2:	e002      	b.n	80120ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80120b4:	2303      	movs	r3, #3
 80120b6:	73fb      	strb	r3, [r7, #15]
    break;
 80120b8:	bf00      	nop
  }
  return usb_status;
 80120ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3714      	adds	r7, #20
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <__errno>:
 80120c8:	4b01      	ldr	r3, [pc, #4]	; (80120d0 <__errno+0x8>)
 80120ca:	6818      	ldr	r0, [r3, #0]
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	20000184 	.word	0x20000184

080120d4 <__libc_init_array>:
 80120d4:	b570      	push	{r4, r5, r6, lr}
 80120d6:	4d0d      	ldr	r5, [pc, #52]	; (801210c <__libc_init_array+0x38>)
 80120d8:	4c0d      	ldr	r4, [pc, #52]	; (8012110 <__libc_init_array+0x3c>)
 80120da:	1b64      	subs	r4, r4, r5
 80120dc:	10a4      	asrs	r4, r4, #2
 80120de:	2600      	movs	r6, #0
 80120e0:	42a6      	cmp	r6, r4
 80120e2:	d109      	bne.n	80120f8 <__libc_init_array+0x24>
 80120e4:	4d0b      	ldr	r5, [pc, #44]	; (8012114 <__libc_init_array+0x40>)
 80120e6:	4c0c      	ldr	r4, [pc, #48]	; (8012118 <__libc_init_array+0x44>)
 80120e8:	f002 fdc2 	bl	8014c70 <_init>
 80120ec:	1b64      	subs	r4, r4, r5
 80120ee:	10a4      	asrs	r4, r4, #2
 80120f0:	2600      	movs	r6, #0
 80120f2:	42a6      	cmp	r6, r4
 80120f4:	d105      	bne.n	8012102 <__libc_init_array+0x2e>
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
 80120f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80120fc:	4798      	blx	r3
 80120fe:	3601      	adds	r6, #1
 8012100:	e7ee      	b.n	80120e0 <__libc_init_array+0xc>
 8012102:	f855 3b04 	ldr.w	r3, [r5], #4
 8012106:	4798      	blx	r3
 8012108:	3601      	adds	r6, #1
 801210a:	e7f2      	b.n	80120f2 <__libc_init_array+0x1e>
 801210c:	08015614 	.word	0x08015614
 8012110:	08015614 	.word	0x08015614
 8012114:	08015614 	.word	0x08015614
 8012118:	08015618 	.word	0x08015618

0801211c <memcpy>:
 801211c:	440a      	add	r2, r1
 801211e:	4291      	cmp	r1, r2
 8012120:	f100 33ff 	add.w	r3, r0, #4294967295
 8012124:	d100      	bne.n	8012128 <memcpy+0xc>
 8012126:	4770      	bx	lr
 8012128:	b510      	push	{r4, lr}
 801212a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801212e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012132:	4291      	cmp	r1, r2
 8012134:	d1f9      	bne.n	801212a <memcpy+0xe>
 8012136:	bd10      	pop	{r4, pc}

08012138 <memset>:
 8012138:	4402      	add	r2, r0
 801213a:	4603      	mov	r3, r0
 801213c:	4293      	cmp	r3, r2
 801213e:	d100      	bne.n	8012142 <memset+0xa>
 8012140:	4770      	bx	lr
 8012142:	f803 1b01 	strb.w	r1, [r3], #1
 8012146:	e7f9      	b.n	801213c <memset+0x4>

08012148 <__cvt>:
 8012148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801214c:	ec55 4b10 	vmov	r4, r5, d0
 8012150:	2d00      	cmp	r5, #0
 8012152:	460e      	mov	r6, r1
 8012154:	4619      	mov	r1, r3
 8012156:	462b      	mov	r3, r5
 8012158:	bfbb      	ittet	lt
 801215a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801215e:	461d      	movlt	r5, r3
 8012160:	2300      	movge	r3, #0
 8012162:	232d      	movlt	r3, #45	; 0x2d
 8012164:	700b      	strb	r3, [r1, #0]
 8012166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012168:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801216c:	4691      	mov	r9, r2
 801216e:	f023 0820 	bic.w	r8, r3, #32
 8012172:	bfbc      	itt	lt
 8012174:	4622      	movlt	r2, r4
 8012176:	4614      	movlt	r4, r2
 8012178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801217c:	d005      	beq.n	801218a <__cvt+0x42>
 801217e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012182:	d100      	bne.n	8012186 <__cvt+0x3e>
 8012184:	3601      	adds	r6, #1
 8012186:	2102      	movs	r1, #2
 8012188:	e000      	b.n	801218c <__cvt+0x44>
 801218a:	2103      	movs	r1, #3
 801218c:	ab03      	add	r3, sp, #12
 801218e:	9301      	str	r3, [sp, #4]
 8012190:	ab02      	add	r3, sp, #8
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	ec45 4b10 	vmov	d0, r4, r5
 8012198:	4653      	mov	r3, sl
 801219a:	4632      	mov	r2, r6
 801219c:	f000 fe18 	bl	8012dd0 <_dtoa_r>
 80121a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80121a4:	4607      	mov	r7, r0
 80121a6:	d102      	bne.n	80121ae <__cvt+0x66>
 80121a8:	f019 0f01 	tst.w	r9, #1
 80121ac:	d022      	beq.n	80121f4 <__cvt+0xac>
 80121ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80121b2:	eb07 0906 	add.w	r9, r7, r6
 80121b6:	d110      	bne.n	80121da <__cvt+0x92>
 80121b8:	783b      	ldrb	r3, [r7, #0]
 80121ba:	2b30      	cmp	r3, #48	; 0x30
 80121bc:	d10a      	bne.n	80121d4 <__cvt+0x8c>
 80121be:	2200      	movs	r2, #0
 80121c0:	2300      	movs	r3, #0
 80121c2:	4620      	mov	r0, r4
 80121c4:	4629      	mov	r1, r5
 80121c6:	f7ee fca7 	bl	8000b18 <__aeabi_dcmpeq>
 80121ca:	b918      	cbnz	r0, 80121d4 <__cvt+0x8c>
 80121cc:	f1c6 0601 	rsb	r6, r6, #1
 80121d0:	f8ca 6000 	str.w	r6, [sl]
 80121d4:	f8da 3000 	ldr.w	r3, [sl]
 80121d8:	4499      	add	r9, r3
 80121da:	2200      	movs	r2, #0
 80121dc:	2300      	movs	r3, #0
 80121de:	4620      	mov	r0, r4
 80121e0:	4629      	mov	r1, r5
 80121e2:	f7ee fc99 	bl	8000b18 <__aeabi_dcmpeq>
 80121e6:	b108      	cbz	r0, 80121ec <__cvt+0xa4>
 80121e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80121ec:	2230      	movs	r2, #48	; 0x30
 80121ee:	9b03      	ldr	r3, [sp, #12]
 80121f0:	454b      	cmp	r3, r9
 80121f2:	d307      	bcc.n	8012204 <__cvt+0xbc>
 80121f4:	9b03      	ldr	r3, [sp, #12]
 80121f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121f8:	1bdb      	subs	r3, r3, r7
 80121fa:	4638      	mov	r0, r7
 80121fc:	6013      	str	r3, [r2, #0]
 80121fe:	b004      	add	sp, #16
 8012200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012204:	1c59      	adds	r1, r3, #1
 8012206:	9103      	str	r1, [sp, #12]
 8012208:	701a      	strb	r2, [r3, #0]
 801220a:	e7f0      	b.n	80121ee <__cvt+0xa6>

0801220c <__exponent>:
 801220c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801220e:	4603      	mov	r3, r0
 8012210:	2900      	cmp	r1, #0
 8012212:	bfb8      	it	lt
 8012214:	4249      	neglt	r1, r1
 8012216:	f803 2b02 	strb.w	r2, [r3], #2
 801221a:	bfb4      	ite	lt
 801221c:	222d      	movlt	r2, #45	; 0x2d
 801221e:	222b      	movge	r2, #43	; 0x2b
 8012220:	2909      	cmp	r1, #9
 8012222:	7042      	strb	r2, [r0, #1]
 8012224:	dd2a      	ble.n	801227c <__exponent+0x70>
 8012226:	f10d 0407 	add.w	r4, sp, #7
 801222a:	46a4      	mov	ip, r4
 801222c:	270a      	movs	r7, #10
 801222e:	46a6      	mov	lr, r4
 8012230:	460a      	mov	r2, r1
 8012232:	fb91 f6f7 	sdiv	r6, r1, r7
 8012236:	fb07 1516 	mls	r5, r7, r6, r1
 801223a:	3530      	adds	r5, #48	; 0x30
 801223c:	2a63      	cmp	r2, #99	; 0x63
 801223e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012242:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012246:	4631      	mov	r1, r6
 8012248:	dcf1      	bgt.n	801222e <__exponent+0x22>
 801224a:	3130      	adds	r1, #48	; 0x30
 801224c:	f1ae 0502 	sub.w	r5, lr, #2
 8012250:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012254:	1c44      	adds	r4, r0, #1
 8012256:	4629      	mov	r1, r5
 8012258:	4561      	cmp	r1, ip
 801225a:	d30a      	bcc.n	8012272 <__exponent+0x66>
 801225c:	f10d 0209 	add.w	r2, sp, #9
 8012260:	eba2 020e 	sub.w	r2, r2, lr
 8012264:	4565      	cmp	r5, ip
 8012266:	bf88      	it	hi
 8012268:	2200      	movhi	r2, #0
 801226a:	4413      	add	r3, r2
 801226c:	1a18      	subs	r0, r3, r0
 801226e:	b003      	add	sp, #12
 8012270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012276:	f804 2f01 	strb.w	r2, [r4, #1]!
 801227a:	e7ed      	b.n	8012258 <__exponent+0x4c>
 801227c:	2330      	movs	r3, #48	; 0x30
 801227e:	3130      	adds	r1, #48	; 0x30
 8012280:	7083      	strb	r3, [r0, #2]
 8012282:	70c1      	strb	r1, [r0, #3]
 8012284:	1d03      	adds	r3, r0, #4
 8012286:	e7f1      	b.n	801226c <__exponent+0x60>

08012288 <_printf_float>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	ed2d 8b02 	vpush	{d8}
 8012290:	b08d      	sub	sp, #52	; 0x34
 8012292:	460c      	mov	r4, r1
 8012294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012298:	4616      	mov	r6, r2
 801229a:	461f      	mov	r7, r3
 801229c:	4605      	mov	r5, r0
 801229e:	f001 fd3d 	bl	8013d1c <_localeconv_r>
 80122a2:	f8d0 a000 	ldr.w	sl, [r0]
 80122a6:	4650      	mov	r0, sl
 80122a8:	f7ed ffba 	bl	8000220 <strlen>
 80122ac:	2300      	movs	r3, #0
 80122ae:	930a      	str	r3, [sp, #40]	; 0x28
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	9305      	str	r3, [sp, #20]
 80122b4:	f8d8 3000 	ldr.w	r3, [r8]
 80122b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80122bc:	3307      	adds	r3, #7
 80122be:	f023 0307 	bic.w	r3, r3, #7
 80122c2:	f103 0208 	add.w	r2, r3, #8
 80122c6:	f8c8 2000 	str.w	r2, [r8]
 80122ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80122d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80122d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80122da:	9307      	str	r3, [sp, #28]
 80122dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80122e0:	ee08 0a10 	vmov	s16, r0
 80122e4:	4b9f      	ldr	r3, [pc, #636]	; (8012564 <_printf_float+0x2dc>)
 80122e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122ea:	f04f 32ff 	mov.w	r2, #4294967295
 80122ee:	f7ee fc45 	bl	8000b7c <__aeabi_dcmpun>
 80122f2:	bb88      	cbnz	r0, 8012358 <_printf_float+0xd0>
 80122f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122f8:	4b9a      	ldr	r3, [pc, #616]	; (8012564 <_printf_float+0x2dc>)
 80122fa:	f04f 32ff 	mov.w	r2, #4294967295
 80122fe:	f7ee fc1f 	bl	8000b40 <__aeabi_dcmple>
 8012302:	bb48      	cbnz	r0, 8012358 <_printf_float+0xd0>
 8012304:	2200      	movs	r2, #0
 8012306:	2300      	movs	r3, #0
 8012308:	4640      	mov	r0, r8
 801230a:	4649      	mov	r1, r9
 801230c:	f7ee fc0e 	bl	8000b2c <__aeabi_dcmplt>
 8012310:	b110      	cbz	r0, 8012318 <_printf_float+0x90>
 8012312:	232d      	movs	r3, #45	; 0x2d
 8012314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012318:	4b93      	ldr	r3, [pc, #588]	; (8012568 <_printf_float+0x2e0>)
 801231a:	4894      	ldr	r0, [pc, #592]	; (801256c <_printf_float+0x2e4>)
 801231c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012320:	bf94      	ite	ls
 8012322:	4698      	movls	r8, r3
 8012324:	4680      	movhi	r8, r0
 8012326:	2303      	movs	r3, #3
 8012328:	6123      	str	r3, [r4, #16]
 801232a:	9b05      	ldr	r3, [sp, #20]
 801232c:	f023 0204 	bic.w	r2, r3, #4
 8012330:	6022      	str	r2, [r4, #0]
 8012332:	f04f 0900 	mov.w	r9, #0
 8012336:	9700      	str	r7, [sp, #0]
 8012338:	4633      	mov	r3, r6
 801233a:	aa0b      	add	r2, sp, #44	; 0x2c
 801233c:	4621      	mov	r1, r4
 801233e:	4628      	mov	r0, r5
 8012340:	f000 f9d8 	bl	80126f4 <_printf_common>
 8012344:	3001      	adds	r0, #1
 8012346:	f040 8090 	bne.w	801246a <_printf_float+0x1e2>
 801234a:	f04f 30ff 	mov.w	r0, #4294967295
 801234e:	b00d      	add	sp, #52	; 0x34
 8012350:	ecbd 8b02 	vpop	{d8}
 8012354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012358:	4642      	mov	r2, r8
 801235a:	464b      	mov	r3, r9
 801235c:	4640      	mov	r0, r8
 801235e:	4649      	mov	r1, r9
 8012360:	f7ee fc0c 	bl	8000b7c <__aeabi_dcmpun>
 8012364:	b140      	cbz	r0, 8012378 <_printf_float+0xf0>
 8012366:	464b      	mov	r3, r9
 8012368:	2b00      	cmp	r3, #0
 801236a:	bfbc      	itt	lt
 801236c:	232d      	movlt	r3, #45	; 0x2d
 801236e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012372:	487f      	ldr	r0, [pc, #508]	; (8012570 <_printf_float+0x2e8>)
 8012374:	4b7f      	ldr	r3, [pc, #508]	; (8012574 <_printf_float+0x2ec>)
 8012376:	e7d1      	b.n	801231c <_printf_float+0x94>
 8012378:	6863      	ldr	r3, [r4, #4]
 801237a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801237e:	9206      	str	r2, [sp, #24]
 8012380:	1c5a      	adds	r2, r3, #1
 8012382:	d13f      	bne.n	8012404 <_printf_float+0x17c>
 8012384:	2306      	movs	r3, #6
 8012386:	6063      	str	r3, [r4, #4]
 8012388:	9b05      	ldr	r3, [sp, #20]
 801238a:	6861      	ldr	r1, [r4, #4]
 801238c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012390:	2300      	movs	r3, #0
 8012392:	9303      	str	r3, [sp, #12]
 8012394:	ab0a      	add	r3, sp, #40	; 0x28
 8012396:	e9cd b301 	strd	fp, r3, [sp, #4]
 801239a:	ab09      	add	r3, sp, #36	; 0x24
 801239c:	ec49 8b10 	vmov	d0, r8, r9
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	6022      	str	r2, [r4, #0]
 80123a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80123a8:	4628      	mov	r0, r5
 80123aa:	f7ff fecd 	bl	8012148 <__cvt>
 80123ae:	9b06      	ldr	r3, [sp, #24]
 80123b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123b2:	2b47      	cmp	r3, #71	; 0x47
 80123b4:	4680      	mov	r8, r0
 80123b6:	d108      	bne.n	80123ca <_printf_float+0x142>
 80123b8:	1cc8      	adds	r0, r1, #3
 80123ba:	db02      	blt.n	80123c2 <_printf_float+0x13a>
 80123bc:	6863      	ldr	r3, [r4, #4]
 80123be:	4299      	cmp	r1, r3
 80123c0:	dd41      	ble.n	8012446 <_printf_float+0x1be>
 80123c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80123c6:	fa5f fb8b 	uxtb.w	fp, fp
 80123ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80123ce:	d820      	bhi.n	8012412 <_printf_float+0x18a>
 80123d0:	3901      	subs	r1, #1
 80123d2:	465a      	mov	r2, fp
 80123d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80123d8:	9109      	str	r1, [sp, #36]	; 0x24
 80123da:	f7ff ff17 	bl	801220c <__exponent>
 80123de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123e0:	1813      	adds	r3, r2, r0
 80123e2:	2a01      	cmp	r2, #1
 80123e4:	4681      	mov	r9, r0
 80123e6:	6123      	str	r3, [r4, #16]
 80123e8:	dc02      	bgt.n	80123f0 <_printf_float+0x168>
 80123ea:	6822      	ldr	r2, [r4, #0]
 80123ec:	07d2      	lsls	r2, r2, #31
 80123ee:	d501      	bpl.n	80123f4 <_printf_float+0x16c>
 80123f0:	3301      	adds	r3, #1
 80123f2:	6123      	str	r3, [r4, #16]
 80123f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d09c      	beq.n	8012336 <_printf_float+0xae>
 80123fc:	232d      	movs	r3, #45	; 0x2d
 80123fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012402:	e798      	b.n	8012336 <_printf_float+0xae>
 8012404:	9a06      	ldr	r2, [sp, #24]
 8012406:	2a47      	cmp	r2, #71	; 0x47
 8012408:	d1be      	bne.n	8012388 <_printf_float+0x100>
 801240a:	2b00      	cmp	r3, #0
 801240c:	d1bc      	bne.n	8012388 <_printf_float+0x100>
 801240e:	2301      	movs	r3, #1
 8012410:	e7b9      	b.n	8012386 <_printf_float+0xfe>
 8012412:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012416:	d118      	bne.n	801244a <_printf_float+0x1c2>
 8012418:	2900      	cmp	r1, #0
 801241a:	6863      	ldr	r3, [r4, #4]
 801241c:	dd0b      	ble.n	8012436 <_printf_float+0x1ae>
 801241e:	6121      	str	r1, [r4, #16]
 8012420:	b913      	cbnz	r3, 8012428 <_printf_float+0x1a0>
 8012422:	6822      	ldr	r2, [r4, #0]
 8012424:	07d0      	lsls	r0, r2, #31
 8012426:	d502      	bpl.n	801242e <_printf_float+0x1a6>
 8012428:	3301      	adds	r3, #1
 801242a:	440b      	add	r3, r1
 801242c:	6123      	str	r3, [r4, #16]
 801242e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012430:	f04f 0900 	mov.w	r9, #0
 8012434:	e7de      	b.n	80123f4 <_printf_float+0x16c>
 8012436:	b913      	cbnz	r3, 801243e <_printf_float+0x1b6>
 8012438:	6822      	ldr	r2, [r4, #0]
 801243a:	07d2      	lsls	r2, r2, #31
 801243c:	d501      	bpl.n	8012442 <_printf_float+0x1ba>
 801243e:	3302      	adds	r3, #2
 8012440:	e7f4      	b.n	801242c <_printf_float+0x1a4>
 8012442:	2301      	movs	r3, #1
 8012444:	e7f2      	b.n	801242c <_printf_float+0x1a4>
 8012446:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801244a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801244c:	4299      	cmp	r1, r3
 801244e:	db05      	blt.n	801245c <_printf_float+0x1d4>
 8012450:	6823      	ldr	r3, [r4, #0]
 8012452:	6121      	str	r1, [r4, #16]
 8012454:	07d8      	lsls	r0, r3, #31
 8012456:	d5ea      	bpl.n	801242e <_printf_float+0x1a6>
 8012458:	1c4b      	adds	r3, r1, #1
 801245a:	e7e7      	b.n	801242c <_printf_float+0x1a4>
 801245c:	2900      	cmp	r1, #0
 801245e:	bfd4      	ite	le
 8012460:	f1c1 0202 	rsble	r2, r1, #2
 8012464:	2201      	movgt	r2, #1
 8012466:	4413      	add	r3, r2
 8012468:	e7e0      	b.n	801242c <_printf_float+0x1a4>
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	055a      	lsls	r2, r3, #21
 801246e:	d407      	bmi.n	8012480 <_printf_float+0x1f8>
 8012470:	6923      	ldr	r3, [r4, #16]
 8012472:	4642      	mov	r2, r8
 8012474:	4631      	mov	r1, r6
 8012476:	4628      	mov	r0, r5
 8012478:	47b8      	blx	r7
 801247a:	3001      	adds	r0, #1
 801247c:	d12c      	bne.n	80124d8 <_printf_float+0x250>
 801247e:	e764      	b.n	801234a <_printf_float+0xc2>
 8012480:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012484:	f240 80e0 	bls.w	8012648 <_printf_float+0x3c0>
 8012488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801248c:	2200      	movs	r2, #0
 801248e:	2300      	movs	r3, #0
 8012490:	f7ee fb42 	bl	8000b18 <__aeabi_dcmpeq>
 8012494:	2800      	cmp	r0, #0
 8012496:	d034      	beq.n	8012502 <_printf_float+0x27a>
 8012498:	4a37      	ldr	r2, [pc, #220]	; (8012578 <_printf_float+0x2f0>)
 801249a:	2301      	movs	r3, #1
 801249c:	4631      	mov	r1, r6
 801249e:	4628      	mov	r0, r5
 80124a0:	47b8      	blx	r7
 80124a2:	3001      	adds	r0, #1
 80124a4:	f43f af51 	beq.w	801234a <_printf_float+0xc2>
 80124a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80124ac:	429a      	cmp	r2, r3
 80124ae:	db02      	blt.n	80124b6 <_printf_float+0x22e>
 80124b0:	6823      	ldr	r3, [r4, #0]
 80124b2:	07d8      	lsls	r0, r3, #31
 80124b4:	d510      	bpl.n	80124d8 <_printf_float+0x250>
 80124b6:	ee18 3a10 	vmov	r3, s16
 80124ba:	4652      	mov	r2, sl
 80124bc:	4631      	mov	r1, r6
 80124be:	4628      	mov	r0, r5
 80124c0:	47b8      	blx	r7
 80124c2:	3001      	adds	r0, #1
 80124c4:	f43f af41 	beq.w	801234a <_printf_float+0xc2>
 80124c8:	f04f 0800 	mov.w	r8, #0
 80124cc:	f104 091a 	add.w	r9, r4, #26
 80124d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124d2:	3b01      	subs	r3, #1
 80124d4:	4543      	cmp	r3, r8
 80124d6:	dc09      	bgt.n	80124ec <_printf_float+0x264>
 80124d8:	6823      	ldr	r3, [r4, #0]
 80124da:	079b      	lsls	r3, r3, #30
 80124dc:	f100 8105 	bmi.w	80126ea <_printf_float+0x462>
 80124e0:	68e0      	ldr	r0, [r4, #12]
 80124e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124e4:	4298      	cmp	r0, r3
 80124e6:	bfb8      	it	lt
 80124e8:	4618      	movlt	r0, r3
 80124ea:	e730      	b.n	801234e <_printf_float+0xc6>
 80124ec:	2301      	movs	r3, #1
 80124ee:	464a      	mov	r2, r9
 80124f0:	4631      	mov	r1, r6
 80124f2:	4628      	mov	r0, r5
 80124f4:	47b8      	blx	r7
 80124f6:	3001      	adds	r0, #1
 80124f8:	f43f af27 	beq.w	801234a <_printf_float+0xc2>
 80124fc:	f108 0801 	add.w	r8, r8, #1
 8012500:	e7e6      	b.n	80124d0 <_printf_float+0x248>
 8012502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012504:	2b00      	cmp	r3, #0
 8012506:	dc39      	bgt.n	801257c <_printf_float+0x2f4>
 8012508:	4a1b      	ldr	r2, [pc, #108]	; (8012578 <_printf_float+0x2f0>)
 801250a:	2301      	movs	r3, #1
 801250c:	4631      	mov	r1, r6
 801250e:	4628      	mov	r0, r5
 8012510:	47b8      	blx	r7
 8012512:	3001      	adds	r0, #1
 8012514:	f43f af19 	beq.w	801234a <_printf_float+0xc2>
 8012518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801251c:	4313      	orrs	r3, r2
 801251e:	d102      	bne.n	8012526 <_printf_float+0x29e>
 8012520:	6823      	ldr	r3, [r4, #0]
 8012522:	07d9      	lsls	r1, r3, #31
 8012524:	d5d8      	bpl.n	80124d8 <_printf_float+0x250>
 8012526:	ee18 3a10 	vmov	r3, s16
 801252a:	4652      	mov	r2, sl
 801252c:	4631      	mov	r1, r6
 801252e:	4628      	mov	r0, r5
 8012530:	47b8      	blx	r7
 8012532:	3001      	adds	r0, #1
 8012534:	f43f af09 	beq.w	801234a <_printf_float+0xc2>
 8012538:	f04f 0900 	mov.w	r9, #0
 801253c:	f104 0a1a 	add.w	sl, r4, #26
 8012540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012542:	425b      	negs	r3, r3
 8012544:	454b      	cmp	r3, r9
 8012546:	dc01      	bgt.n	801254c <_printf_float+0x2c4>
 8012548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801254a:	e792      	b.n	8012472 <_printf_float+0x1ea>
 801254c:	2301      	movs	r3, #1
 801254e:	4652      	mov	r2, sl
 8012550:	4631      	mov	r1, r6
 8012552:	4628      	mov	r0, r5
 8012554:	47b8      	blx	r7
 8012556:	3001      	adds	r0, #1
 8012558:	f43f aef7 	beq.w	801234a <_printf_float+0xc2>
 801255c:	f109 0901 	add.w	r9, r9, #1
 8012560:	e7ee      	b.n	8012540 <_printf_float+0x2b8>
 8012562:	bf00      	nop
 8012564:	7fefffff 	.word	0x7fefffff
 8012568:	08015238 	.word	0x08015238
 801256c:	0801523c 	.word	0x0801523c
 8012570:	08015244 	.word	0x08015244
 8012574:	08015240 	.word	0x08015240
 8012578:	08015248 	.word	0x08015248
 801257c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801257e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012580:	429a      	cmp	r2, r3
 8012582:	bfa8      	it	ge
 8012584:	461a      	movge	r2, r3
 8012586:	2a00      	cmp	r2, #0
 8012588:	4691      	mov	r9, r2
 801258a:	dc37      	bgt.n	80125fc <_printf_float+0x374>
 801258c:	f04f 0b00 	mov.w	fp, #0
 8012590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012594:	f104 021a 	add.w	r2, r4, #26
 8012598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801259a:	9305      	str	r3, [sp, #20]
 801259c:	eba3 0309 	sub.w	r3, r3, r9
 80125a0:	455b      	cmp	r3, fp
 80125a2:	dc33      	bgt.n	801260c <_printf_float+0x384>
 80125a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125a8:	429a      	cmp	r2, r3
 80125aa:	db3b      	blt.n	8012624 <_printf_float+0x39c>
 80125ac:	6823      	ldr	r3, [r4, #0]
 80125ae:	07da      	lsls	r2, r3, #31
 80125b0:	d438      	bmi.n	8012624 <_printf_float+0x39c>
 80125b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125b4:	9a05      	ldr	r2, [sp, #20]
 80125b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125b8:	1a9a      	subs	r2, r3, r2
 80125ba:	eba3 0901 	sub.w	r9, r3, r1
 80125be:	4591      	cmp	r9, r2
 80125c0:	bfa8      	it	ge
 80125c2:	4691      	movge	r9, r2
 80125c4:	f1b9 0f00 	cmp.w	r9, #0
 80125c8:	dc35      	bgt.n	8012636 <_printf_float+0x3ae>
 80125ca:	f04f 0800 	mov.w	r8, #0
 80125ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80125d2:	f104 0a1a 	add.w	sl, r4, #26
 80125d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125da:	1a9b      	subs	r3, r3, r2
 80125dc:	eba3 0309 	sub.w	r3, r3, r9
 80125e0:	4543      	cmp	r3, r8
 80125e2:	f77f af79 	ble.w	80124d8 <_printf_float+0x250>
 80125e6:	2301      	movs	r3, #1
 80125e8:	4652      	mov	r2, sl
 80125ea:	4631      	mov	r1, r6
 80125ec:	4628      	mov	r0, r5
 80125ee:	47b8      	blx	r7
 80125f0:	3001      	adds	r0, #1
 80125f2:	f43f aeaa 	beq.w	801234a <_printf_float+0xc2>
 80125f6:	f108 0801 	add.w	r8, r8, #1
 80125fa:	e7ec      	b.n	80125d6 <_printf_float+0x34e>
 80125fc:	4613      	mov	r3, r2
 80125fe:	4631      	mov	r1, r6
 8012600:	4642      	mov	r2, r8
 8012602:	4628      	mov	r0, r5
 8012604:	47b8      	blx	r7
 8012606:	3001      	adds	r0, #1
 8012608:	d1c0      	bne.n	801258c <_printf_float+0x304>
 801260a:	e69e      	b.n	801234a <_printf_float+0xc2>
 801260c:	2301      	movs	r3, #1
 801260e:	4631      	mov	r1, r6
 8012610:	4628      	mov	r0, r5
 8012612:	9205      	str	r2, [sp, #20]
 8012614:	47b8      	blx	r7
 8012616:	3001      	adds	r0, #1
 8012618:	f43f ae97 	beq.w	801234a <_printf_float+0xc2>
 801261c:	9a05      	ldr	r2, [sp, #20]
 801261e:	f10b 0b01 	add.w	fp, fp, #1
 8012622:	e7b9      	b.n	8012598 <_printf_float+0x310>
 8012624:	ee18 3a10 	vmov	r3, s16
 8012628:	4652      	mov	r2, sl
 801262a:	4631      	mov	r1, r6
 801262c:	4628      	mov	r0, r5
 801262e:	47b8      	blx	r7
 8012630:	3001      	adds	r0, #1
 8012632:	d1be      	bne.n	80125b2 <_printf_float+0x32a>
 8012634:	e689      	b.n	801234a <_printf_float+0xc2>
 8012636:	9a05      	ldr	r2, [sp, #20]
 8012638:	464b      	mov	r3, r9
 801263a:	4442      	add	r2, r8
 801263c:	4631      	mov	r1, r6
 801263e:	4628      	mov	r0, r5
 8012640:	47b8      	blx	r7
 8012642:	3001      	adds	r0, #1
 8012644:	d1c1      	bne.n	80125ca <_printf_float+0x342>
 8012646:	e680      	b.n	801234a <_printf_float+0xc2>
 8012648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801264a:	2a01      	cmp	r2, #1
 801264c:	dc01      	bgt.n	8012652 <_printf_float+0x3ca>
 801264e:	07db      	lsls	r3, r3, #31
 8012650:	d538      	bpl.n	80126c4 <_printf_float+0x43c>
 8012652:	2301      	movs	r3, #1
 8012654:	4642      	mov	r2, r8
 8012656:	4631      	mov	r1, r6
 8012658:	4628      	mov	r0, r5
 801265a:	47b8      	blx	r7
 801265c:	3001      	adds	r0, #1
 801265e:	f43f ae74 	beq.w	801234a <_printf_float+0xc2>
 8012662:	ee18 3a10 	vmov	r3, s16
 8012666:	4652      	mov	r2, sl
 8012668:	4631      	mov	r1, r6
 801266a:	4628      	mov	r0, r5
 801266c:	47b8      	blx	r7
 801266e:	3001      	adds	r0, #1
 8012670:	f43f ae6b 	beq.w	801234a <_printf_float+0xc2>
 8012674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012678:	2200      	movs	r2, #0
 801267a:	2300      	movs	r3, #0
 801267c:	f7ee fa4c 	bl	8000b18 <__aeabi_dcmpeq>
 8012680:	b9d8      	cbnz	r0, 80126ba <_printf_float+0x432>
 8012682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012684:	f108 0201 	add.w	r2, r8, #1
 8012688:	3b01      	subs	r3, #1
 801268a:	4631      	mov	r1, r6
 801268c:	4628      	mov	r0, r5
 801268e:	47b8      	blx	r7
 8012690:	3001      	adds	r0, #1
 8012692:	d10e      	bne.n	80126b2 <_printf_float+0x42a>
 8012694:	e659      	b.n	801234a <_printf_float+0xc2>
 8012696:	2301      	movs	r3, #1
 8012698:	4652      	mov	r2, sl
 801269a:	4631      	mov	r1, r6
 801269c:	4628      	mov	r0, r5
 801269e:	47b8      	blx	r7
 80126a0:	3001      	adds	r0, #1
 80126a2:	f43f ae52 	beq.w	801234a <_printf_float+0xc2>
 80126a6:	f108 0801 	add.w	r8, r8, #1
 80126aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126ac:	3b01      	subs	r3, #1
 80126ae:	4543      	cmp	r3, r8
 80126b0:	dcf1      	bgt.n	8012696 <_printf_float+0x40e>
 80126b2:	464b      	mov	r3, r9
 80126b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80126b8:	e6dc      	b.n	8012474 <_printf_float+0x1ec>
 80126ba:	f04f 0800 	mov.w	r8, #0
 80126be:	f104 0a1a 	add.w	sl, r4, #26
 80126c2:	e7f2      	b.n	80126aa <_printf_float+0x422>
 80126c4:	2301      	movs	r3, #1
 80126c6:	4642      	mov	r2, r8
 80126c8:	e7df      	b.n	801268a <_printf_float+0x402>
 80126ca:	2301      	movs	r3, #1
 80126cc:	464a      	mov	r2, r9
 80126ce:	4631      	mov	r1, r6
 80126d0:	4628      	mov	r0, r5
 80126d2:	47b8      	blx	r7
 80126d4:	3001      	adds	r0, #1
 80126d6:	f43f ae38 	beq.w	801234a <_printf_float+0xc2>
 80126da:	f108 0801 	add.w	r8, r8, #1
 80126de:	68e3      	ldr	r3, [r4, #12]
 80126e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80126e2:	1a5b      	subs	r3, r3, r1
 80126e4:	4543      	cmp	r3, r8
 80126e6:	dcf0      	bgt.n	80126ca <_printf_float+0x442>
 80126e8:	e6fa      	b.n	80124e0 <_printf_float+0x258>
 80126ea:	f04f 0800 	mov.w	r8, #0
 80126ee:	f104 0919 	add.w	r9, r4, #25
 80126f2:	e7f4      	b.n	80126de <_printf_float+0x456>

080126f4 <_printf_common>:
 80126f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126f8:	4616      	mov	r6, r2
 80126fa:	4699      	mov	r9, r3
 80126fc:	688a      	ldr	r2, [r1, #8]
 80126fe:	690b      	ldr	r3, [r1, #16]
 8012700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012704:	4293      	cmp	r3, r2
 8012706:	bfb8      	it	lt
 8012708:	4613      	movlt	r3, r2
 801270a:	6033      	str	r3, [r6, #0]
 801270c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012710:	4607      	mov	r7, r0
 8012712:	460c      	mov	r4, r1
 8012714:	b10a      	cbz	r2, 801271a <_printf_common+0x26>
 8012716:	3301      	adds	r3, #1
 8012718:	6033      	str	r3, [r6, #0]
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	0699      	lsls	r1, r3, #26
 801271e:	bf42      	ittt	mi
 8012720:	6833      	ldrmi	r3, [r6, #0]
 8012722:	3302      	addmi	r3, #2
 8012724:	6033      	strmi	r3, [r6, #0]
 8012726:	6825      	ldr	r5, [r4, #0]
 8012728:	f015 0506 	ands.w	r5, r5, #6
 801272c:	d106      	bne.n	801273c <_printf_common+0x48>
 801272e:	f104 0a19 	add.w	sl, r4, #25
 8012732:	68e3      	ldr	r3, [r4, #12]
 8012734:	6832      	ldr	r2, [r6, #0]
 8012736:	1a9b      	subs	r3, r3, r2
 8012738:	42ab      	cmp	r3, r5
 801273a:	dc26      	bgt.n	801278a <_printf_common+0x96>
 801273c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012740:	1e13      	subs	r3, r2, #0
 8012742:	6822      	ldr	r2, [r4, #0]
 8012744:	bf18      	it	ne
 8012746:	2301      	movne	r3, #1
 8012748:	0692      	lsls	r2, r2, #26
 801274a:	d42b      	bmi.n	80127a4 <_printf_common+0xb0>
 801274c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012750:	4649      	mov	r1, r9
 8012752:	4638      	mov	r0, r7
 8012754:	47c0      	blx	r8
 8012756:	3001      	adds	r0, #1
 8012758:	d01e      	beq.n	8012798 <_printf_common+0xa4>
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	68e5      	ldr	r5, [r4, #12]
 801275e:	6832      	ldr	r2, [r6, #0]
 8012760:	f003 0306 	and.w	r3, r3, #6
 8012764:	2b04      	cmp	r3, #4
 8012766:	bf08      	it	eq
 8012768:	1aad      	subeq	r5, r5, r2
 801276a:	68a3      	ldr	r3, [r4, #8]
 801276c:	6922      	ldr	r2, [r4, #16]
 801276e:	bf0c      	ite	eq
 8012770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012774:	2500      	movne	r5, #0
 8012776:	4293      	cmp	r3, r2
 8012778:	bfc4      	itt	gt
 801277a:	1a9b      	subgt	r3, r3, r2
 801277c:	18ed      	addgt	r5, r5, r3
 801277e:	2600      	movs	r6, #0
 8012780:	341a      	adds	r4, #26
 8012782:	42b5      	cmp	r5, r6
 8012784:	d11a      	bne.n	80127bc <_printf_common+0xc8>
 8012786:	2000      	movs	r0, #0
 8012788:	e008      	b.n	801279c <_printf_common+0xa8>
 801278a:	2301      	movs	r3, #1
 801278c:	4652      	mov	r2, sl
 801278e:	4649      	mov	r1, r9
 8012790:	4638      	mov	r0, r7
 8012792:	47c0      	blx	r8
 8012794:	3001      	adds	r0, #1
 8012796:	d103      	bne.n	80127a0 <_printf_common+0xac>
 8012798:	f04f 30ff 	mov.w	r0, #4294967295
 801279c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127a0:	3501      	adds	r5, #1
 80127a2:	e7c6      	b.n	8012732 <_printf_common+0x3e>
 80127a4:	18e1      	adds	r1, r4, r3
 80127a6:	1c5a      	adds	r2, r3, #1
 80127a8:	2030      	movs	r0, #48	; 0x30
 80127aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80127ae:	4422      	add	r2, r4
 80127b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80127b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80127b8:	3302      	adds	r3, #2
 80127ba:	e7c7      	b.n	801274c <_printf_common+0x58>
 80127bc:	2301      	movs	r3, #1
 80127be:	4622      	mov	r2, r4
 80127c0:	4649      	mov	r1, r9
 80127c2:	4638      	mov	r0, r7
 80127c4:	47c0      	blx	r8
 80127c6:	3001      	adds	r0, #1
 80127c8:	d0e6      	beq.n	8012798 <_printf_common+0xa4>
 80127ca:	3601      	adds	r6, #1
 80127cc:	e7d9      	b.n	8012782 <_printf_common+0x8e>
	...

080127d0 <_printf_i>:
 80127d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127d4:	7e0f      	ldrb	r7, [r1, #24]
 80127d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80127d8:	2f78      	cmp	r7, #120	; 0x78
 80127da:	4691      	mov	r9, r2
 80127dc:	4680      	mov	r8, r0
 80127de:	460c      	mov	r4, r1
 80127e0:	469a      	mov	sl, r3
 80127e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80127e6:	d807      	bhi.n	80127f8 <_printf_i+0x28>
 80127e8:	2f62      	cmp	r7, #98	; 0x62
 80127ea:	d80a      	bhi.n	8012802 <_printf_i+0x32>
 80127ec:	2f00      	cmp	r7, #0
 80127ee:	f000 80d8 	beq.w	80129a2 <_printf_i+0x1d2>
 80127f2:	2f58      	cmp	r7, #88	; 0x58
 80127f4:	f000 80a3 	beq.w	801293e <_printf_i+0x16e>
 80127f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80127fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012800:	e03a      	b.n	8012878 <_printf_i+0xa8>
 8012802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012806:	2b15      	cmp	r3, #21
 8012808:	d8f6      	bhi.n	80127f8 <_printf_i+0x28>
 801280a:	a101      	add	r1, pc, #4	; (adr r1, 8012810 <_printf_i+0x40>)
 801280c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012810:	08012869 	.word	0x08012869
 8012814:	0801287d 	.word	0x0801287d
 8012818:	080127f9 	.word	0x080127f9
 801281c:	080127f9 	.word	0x080127f9
 8012820:	080127f9 	.word	0x080127f9
 8012824:	080127f9 	.word	0x080127f9
 8012828:	0801287d 	.word	0x0801287d
 801282c:	080127f9 	.word	0x080127f9
 8012830:	080127f9 	.word	0x080127f9
 8012834:	080127f9 	.word	0x080127f9
 8012838:	080127f9 	.word	0x080127f9
 801283c:	08012989 	.word	0x08012989
 8012840:	080128ad 	.word	0x080128ad
 8012844:	0801296b 	.word	0x0801296b
 8012848:	080127f9 	.word	0x080127f9
 801284c:	080127f9 	.word	0x080127f9
 8012850:	080129ab 	.word	0x080129ab
 8012854:	080127f9 	.word	0x080127f9
 8012858:	080128ad 	.word	0x080128ad
 801285c:	080127f9 	.word	0x080127f9
 8012860:	080127f9 	.word	0x080127f9
 8012864:	08012973 	.word	0x08012973
 8012868:	682b      	ldr	r3, [r5, #0]
 801286a:	1d1a      	adds	r2, r3, #4
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	602a      	str	r2, [r5, #0]
 8012870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012878:	2301      	movs	r3, #1
 801287a:	e0a3      	b.n	80129c4 <_printf_i+0x1f4>
 801287c:	6820      	ldr	r0, [r4, #0]
 801287e:	6829      	ldr	r1, [r5, #0]
 8012880:	0606      	lsls	r6, r0, #24
 8012882:	f101 0304 	add.w	r3, r1, #4
 8012886:	d50a      	bpl.n	801289e <_printf_i+0xce>
 8012888:	680e      	ldr	r6, [r1, #0]
 801288a:	602b      	str	r3, [r5, #0]
 801288c:	2e00      	cmp	r6, #0
 801288e:	da03      	bge.n	8012898 <_printf_i+0xc8>
 8012890:	232d      	movs	r3, #45	; 0x2d
 8012892:	4276      	negs	r6, r6
 8012894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012898:	485e      	ldr	r0, [pc, #376]	; (8012a14 <_printf_i+0x244>)
 801289a:	230a      	movs	r3, #10
 801289c:	e019      	b.n	80128d2 <_printf_i+0x102>
 801289e:	680e      	ldr	r6, [r1, #0]
 80128a0:	602b      	str	r3, [r5, #0]
 80128a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80128a6:	bf18      	it	ne
 80128a8:	b236      	sxthne	r6, r6
 80128aa:	e7ef      	b.n	801288c <_printf_i+0xbc>
 80128ac:	682b      	ldr	r3, [r5, #0]
 80128ae:	6820      	ldr	r0, [r4, #0]
 80128b0:	1d19      	adds	r1, r3, #4
 80128b2:	6029      	str	r1, [r5, #0]
 80128b4:	0601      	lsls	r1, r0, #24
 80128b6:	d501      	bpl.n	80128bc <_printf_i+0xec>
 80128b8:	681e      	ldr	r6, [r3, #0]
 80128ba:	e002      	b.n	80128c2 <_printf_i+0xf2>
 80128bc:	0646      	lsls	r6, r0, #25
 80128be:	d5fb      	bpl.n	80128b8 <_printf_i+0xe8>
 80128c0:	881e      	ldrh	r6, [r3, #0]
 80128c2:	4854      	ldr	r0, [pc, #336]	; (8012a14 <_printf_i+0x244>)
 80128c4:	2f6f      	cmp	r7, #111	; 0x6f
 80128c6:	bf0c      	ite	eq
 80128c8:	2308      	moveq	r3, #8
 80128ca:	230a      	movne	r3, #10
 80128cc:	2100      	movs	r1, #0
 80128ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128d2:	6865      	ldr	r5, [r4, #4]
 80128d4:	60a5      	str	r5, [r4, #8]
 80128d6:	2d00      	cmp	r5, #0
 80128d8:	bfa2      	ittt	ge
 80128da:	6821      	ldrge	r1, [r4, #0]
 80128dc:	f021 0104 	bicge.w	r1, r1, #4
 80128e0:	6021      	strge	r1, [r4, #0]
 80128e2:	b90e      	cbnz	r6, 80128e8 <_printf_i+0x118>
 80128e4:	2d00      	cmp	r5, #0
 80128e6:	d04d      	beq.n	8012984 <_printf_i+0x1b4>
 80128e8:	4615      	mov	r5, r2
 80128ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80128ee:	fb03 6711 	mls	r7, r3, r1, r6
 80128f2:	5dc7      	ldrb	r7, [r0, r7]
 80128f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80128f8:	4637      	mov	r7, r6
 80128fa:	42bb      	cmp	r3, r7
 80128fc:	460e      	mov	r6, r1
 80128fe:	d9f4      	bls.n	80128ea <_printf_i+0x11a>
 8012900:	2b08      	cmp	r3, #8
 8012902:	d10b      	bne.n	801291c <_printf_i+0x14c>
 8012904:	6823      	ldr	r3, [r4, #0]
 8012906:	07de      	lsls	r6, r3, #31
 8012908:	d508      	bpl.n	801291c <_printf_i+0x14c>
 801290a:	6923      	ldr	r3, [r4, #16]
 801290c:	6861      	ldr	r1, [r4, #4]
 801290e:	4299      	cmp	r1, r3
 8012910:	bfde      	ittt	le
 8012912:	2330      	movle	r3, #48	; 0x30
 8012914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012918:	f105 35ff 	addle.w	r5, r5, #4294967295
 801291c:	1b52      	subs	r2, r2, r5
 801291e:	6122      	str	r2, [r4, #16]
 8012920:	f8cd a000 	str.w	sl, [sp]
 8012924:	464b      	mov	r3, r9
 8012926:	aa03      	add	r2, sp, #12
 8012928:	4621      	mov	r1, r4
 801292a:	4640      	mov	r0, r8
 801292c:	f7ff fee2 	bl	80126f4 <_printf_common>
 8012930:	3001      	adds	r0, #1
 8012932:	d14c      	bne.n	80129ce <_printf_i+0x1fe>
 8012934:	f04f 30ff 	mov.w	r0, #4294967295
 8012938:	b004      	add	sp, #16
 801293a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801293e:	4835      	ldr	r0, [pc, #212]	; (8012a14 <_printf_i+0x244>)
 8012940:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012944:	6829      	ldr	r1, [r5, #0]
 8012946:	6823      	ldr	r3, [r4, #0]
 8012948:	f851 6b04 	ldr.w	r6, [r1], #4
 801294c:	6029      	str	r1, [r5, #0]
 801294e:	061d      	lsls	r5, r3, #24
 8012950:	d514      	bpl.n	801297c <_printf_i+0x1ac>
 8012952:	07df      	lsls	r7, r3, #31
 8012954:	bf44      	itt	mi
 8012956:	f043 0320 	orrmi.w	r3, r3, #32
 801295a:	6023      	strmi	r3, [r4, #0]
 801295c:	b91e      	cbnz	r6, 8012966 <_printf_i+0x196>
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	f023 0320 	bic.w	r3, r3, #32
 8012964:	6023      	str	r3, [r4, #0]
 8012966:	2310      	movs	r3, #16
 8012968:	e7b0      	b.n	80128cc <_printf_i+0xfc>
 801296a:	6823      	ldr	r3, [r4, #0]
 801296c:	f043 0320 	orr.w	r3, r3, #32
 8012970:	6023      	str	r3, [r4, #0]
 8012972:	2378      	movs	r3, #120	; 0x78
 8012974:	4828      	ldr	r0, [pc, #160]	; (8012a18 <_printf_i+0x248>)
 8012976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801297a:	e7e3      	b.n	8012944 <_printf_i+0x174>
 801297c:	0659      	lsls	r1, r3, #25
 801297e:	bf48      	it	mi
 8012980:	b2b6      	uxthmi	r6, r6
 8012982:	e7e6      	b.n	8012952 <_printf_i+0x182>
 8012984:	4615      	mov	r5, r2
 8012986:	e7bb      	b.n	8012900 <_printf_i+0x130>
 8012988:	682b      	ldr	r3, [r5, #0]
 801298a:	6826      	ldr	r6, [r4, #0]
 801298c:	6961      	ldr	r1, [r4, #20]
 801298e:	1d18      	adds	r0, r3, #4
 8012990:	6028      	str	r0, [r5, #0]
 8012992:	0635      	lsls	r5, r6, #24
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	d501      	bpl.n	801299c <_printf_i+0x1cc>
 8012998:	6019      	str	r1, [r3, #0]
 801299a:	e002      	b.n	80129a2 <_printf_i+0x1d2>
 801299c:	0670      	lsls	r0, r6, #25
 801299e:	d5fb      	bpl.n	8012998 <_printf_i+0x1c8>
 80129a0:	8019      	strh	r1, [r3, #0]
 80129a2:	2300      	movs	r3, #0
 80129a4:	6123      	str	r3, [r4, #16]
 80129a6:	4615      	mov	r5, r2
 80129a8:	e7ba      	b.n	8012920 <_printf_i+0x150>
 80129aa:	682b      	ldr	r3, [r5, #0]
 80129ac:	1d1a      	adds	r2, r3, #4
 80129ae:	602a      	str	r2, [r5, #0]
 80129b0:	681d      	ldr	r5, [r3, #0]
 80129b2:	6862      	ldr	r2, [r4, #4]
 80129b4:	2100      	movs	r1, #0
 80129b6:	4628      	mov	r0, r5
 80129b8:	f7ed fc3a 	bl	8000230 <memchr>
 80129bc:	b108      	cbz	r0, 80129c2 <_printf_i+0x1f2>
 80129be:	1b40      	subs	r0, r0, r5
 80129c0:	6060      	str	r0, [r4, #4]
 80129c2:	6863      	ldr	r3, [r4, #4]
 80129c4:	6123      	str	r3, [r4, #16]
 80129c6:	2300      	movs	r3, #0
 80129c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129cc:	e7a8      	b.n	8012920 <_printf_i+0x150>
 80129ce:	6923      	ldr	r3, [r4, #16]
 80129d0:	462a      	mov	r2, r5
 80129d2:	4649      	mov	r1, r9
 80129d4:	4640      	mov	r0, r8
 80129d6:	47d0      	blx	sl
 80129d8:	3001      	adds	r0, #1
 80129da:	d0ab      	beq.n	8012934 <_printf_i+0x164>
 80129dc:	6823      	ldr	r3, [r4, #0]
 80129de:	079b      	lsls	r3, r3, #30
 80129e0:	d413      	bmi.n	8012a0a <_printf_i+0x23a>
 80129e2:	68e0      	ldr	r0, [r4, #12]
 80129e4:	9b03      	ldr	r3, [sp, #12]
 80129e6:	4298      	cmp	r0, r3
 80129e8:	bfb8      	it	lt
 80129ea:	4618      	movlt	r0, r3
 80129ec:	e7a4      	b.n	8012938 <_printf_i+0x168>
 80129ee:	2301      	movs	r3, #1
 80129f0:	4632      	mov	r2, r6
 80129f2:	4649      	mov	r1, r9
 80129f4:	4640      	mov	r0, r8
 80129f6:	47d0      	blx	sl
 80129f8:	3001      	adds	r0, #1
 80129fa:	d09b      	beq.n	8012934 <_printf_i+0x164>
 80129fc:	3501      	adds	r5, #1
 80129fe:	68e3      	ldr	r3, [r4, #12]
 8012a00:	9903      	ldr	r1, [sp, #12]
 8012a02:	1a5b      	subs	r3, r3, r1
 8012a04:	42ab      	cmp	r3, r5
 8012a06:	dcf2      	bgt.n	80129ee <_printf_i+0x21e>
 8012a08:	e7eb      	b.n	80129e2 <_printf_i+0x212>
 8012a0a:	2500      	movs	r5, #0
 8012a0c:	f104 0619 	add.w	r6, r4, #25
 8012a10:	e7f5      	b.n	80129fe <_printf_i+0x22e>
 8012a12:	bf00      	nop
 8012a14:	0801524a 	.word	0x0801524a
 8012a18:	0801525b 	.word	0x0801525b

08012a1c <iprintf>:
 8012a1c:	b40f      	push	{r0, r1, r2, r3}
 8012a1e:	4b0a      	ldr	r3, [pc, #40]	; (8012a48 <iprintf+0x2c>)
 8012a20:	b513      	push	{r0, r1, r4, lr}
 8012a22:	681c      	ldr	r4, [r3, #0]
 8012a24:	b124      	cbz	r4, 8012a30 <iprintf+0x14>
 8012a26:	69a3      	ldr	r3, [r4, #24]
 8012a28:	b913      	cbnz	r3, 8012a30 <iprintf+0x14>
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f001 f8d8 	bl	8013be0 <__sinit>
 8012a30:	ab05      	add	r3, sp, #20
 8012a32:	9a04      	ldr	r2, [sp, #16]
 8012a34:	68a1      	ldr	r1, [r4, #8]
 8012a36:	9301      	str	r3, [sp, #4]
 8012a38:	4620      	mov	r0, r4
 8012a3a:	f001 fe87 	bl	801474c <_vfiprintf_r>
 8012a3e:	b002      	add	sp, #8
 8012a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a44:	b004      	add	sp, #16
 8012a46:	4770      	bx	lr
 8012a48:	20000184 	.word	0x20000184

08012a4c <_puts_r>:
 8012a4c:	b570      	push	{r4, r5, r6, lr}
 8012a4e:	460e      	mov	r6, r1
 8012a50:	4605      	mov	r5, r0
 8012a52:	b118      	cbz	r0, 8012a5c <_puts_r+0x10>
 8012a54:	6983      	ldr	r3, [r0, #24]
 8012a56:	b90b      	cbnz	r3, 8012a5c <_puts_r+0x10>
 8012a58:	f001 f8c2 	bl	8013be0 <__sinit>
 8012a5c:	69ab      	ldr	r3, [r5, #24]
 8012a5e:	68ac      	ldr	r4, [r5, #8]
 8012a60:	b913      	cbnz	r3, 8012a68 <_puts_r+0x1c>
 8012a62:	4628      	mov	r0, r5
 8012a64:	f001 f8bc 	bl	8013be0 <__sinit>
 8012a68:	4b2c      	ldr	r3, [pc, #176]	; (8012b1c <_puts_r+0xd0>)
 8012a6a:	429c      	cmp	r4, r3
 8012a6c:	d120      	bne.n	8012ab0 <_puts_r+0x64>
 8012a6e:	686c      	ldr	r4, [r5, #4]
 8012a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a72:	07db      	lsls	r3, r3, #31
 8012a74:	d405      	bmi.n	8012a82 <_puts_r+0x36>
 8012a76:	89a3      	ldrh	r3, [r4, #12]
 8012a78:	0598      	lsls	r0, r3, #22
 8012a7a:	d402      	bmi.n	8012a82 <_puts_r+0x36>
 8012a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a7e:	f001 f952 	bl	8013d26 <__retarget_lock_acquire_recursive>
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	0719      	lsls	r1, r3, #28
 8012a86:	d51d      	bpl.n	8012ac4 <_puts_r+0x78>
 8012a88:	6923      	ldr	r3, [r4, #16]
 8012a8a:	b1db      	cbz	r3, 8012ac4 <_puts_r+0x78>
 8012a8c:	3e01      	subs	r6, #1
 8012a8e:	68a3      	ldr	r3, [r4, #8]
 8012a90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012a94:	3b01      	subs	r3, #1
 8012a96:	60a3      	str	r3, [r4, #8]
 8012a98:	bb39      	cbnz	r1, 8012aea <_puts_r+0x9e>
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	da38      	bge.n	8012b10 <_puts_r+0xc4>
 8012a9e:	4622      	mov	r2, r4
 8012aa0:	210a      	movs	r1, #10
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f000 f848 	bl	8012b38 <__swbuf_r>
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	d011      	beq.n	8012ad0 <_puts_r+0x84>
 8012aac:	250a      	movs	r5, #10
 8012aae:	e011      	b.n	8012ad4 <_puts_r+0x88>
 8012ab0:	4b1b      	ldr	r3, [pc, #108]	; (8012b20 <_puts_r+0xd4>)
 8012ab2:	429c      	cmp	r4, r3
 8012ab4:	d101      	bne.n	8012aba <_puts_r+0x6e>
 8012ab6:	68ac      	ldr	r4, [r5, #8]
 8012ab8:	e7da      	b.n	8012a70 <_puts_r+0x24>
 8012aba:	4b1a      	ldr	r3, [pc, #104]	; (8012b24 <_puts_r+0xd8>)
 8012abc:	429c      	cmp	r4, r3
 8012abe:	bf08      	it	eq
 8012ac0:	68ec      	ldreq	r4, [r5, #12]
 8012ac2:	e7d5      	b.n	8012a70 <_puts_r+0x24>
 8012ac4:	4621      	mov	r1, r4
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	f000 f888 	bl	8012bdc <__swsetup_r>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	d0dd      	beq.n	8012a8c <_puts_r+0x40>
 8012ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8012ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ad6:	07da      	lsls	r2, r3, #31
 8012ad8:	d405      	bmi.n	8012ae6 <_puts_r+0x9a>
 8012ada:	89a3      	ldrh	r3, [r4, #12]
 8012adc:	059b      	lsls	r3, r3, #22
 8012ade:	d402      	bmi.n	8012ae6 <_puts_r+0x9a>
 8012ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ae2:	f001 f921 	bl	8013d28 <__retarget_lock_release_recursive>
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	bd70      	pop	{r4, r5, r6, pc}
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	da04      	bge.n	8012af8 <_puts_r+0xac>
 8012aee:	69a2      	ldr	r2, [r4, #24]
 8012af0:	429a      	cmp	r2, r3
 8012af2:	dc06      	bgt.n	8012b02 <_puts_r+0xb6>
 8012af4:	290a      	cmp	r1, #10
 8012af6:	d004      	beq.n	8012b02 <_puts_r+0xb6>
 8012af8:	6823      	ldr	r3, [r4, #0]
 8012afa:	1c5a      	adds	r2, r3, #1
 8012afc:	6022      	str	r2, [r4, #0]
 8012afe:	7019      	strb	r1, [r3, #0]
 8012b00:	e7c5      	b.n	8012a8e <_puts_r+0x42>
 8012b02:	4622      	mov	r2, r4
 8012b04:	4628      	mov	r0, r5
 8012b06:	f000 f817 	bl	8012b38 <__swbuf_r>
 8012b0a:	3001      	adds	r0, #1
 8012b0c:	d1bf      	bne.n	8012a8e <_puts_r+0x42>
 8012b0e:	e7df      	b.n	8012ad0 <_puts_r+0x84>
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	250a      	movs	r5, #10
 8012b14:	1c5a      	adds	r2, r3, #1
 8012b16:	6022      	str	r2, [r4, #0]
 8012b18:	701d      	strb	r5, [r3, #0]
 8012b1a:	e7db      	b.n	8012ad4 <_puts_r+0x88>
 8012b1c:	0801531c 	.word	0x0801531c
 8012b20:	0801533c 	.word	0x0801533c
 8012b24:	080152fc 	.word	0x080152fc

08012b28 <puts>:
 8012b28:	4b02      	ldr	r3, [pc, #8]	; (8012b34 <puts+0xc>)
 8012b2a:	4601      	mov	r1, r0
 8012b2c:	6818      	ldr	r0, [r3, #0]
 8012b2e:	f7ff bf8d 	b.w	8012a4c <_puts_r>
 8012b32:	bf00      	nop
 8012b34:	20000184 	.word	0x20000184

08012b38 <__swbuf_r>:
 8012b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b3a:	460e      	mov	r6, r1
 8012b3c:	4614      	mov	r4, r2
 8012b3e:	4605      	mov	r5, r0
 8012b40:	b118      	cbz	r0, 8012b4a <__swbuf_r+0x12>
 8012b42:	6983      	ldr	r3, [r0, #24]
 8012b44:	b90b      	cbnz	r3, 8012b4a <__swbuf_r+0x12>
 8012b46:	f001 f84b 	bl	8013be0 <__sinit>
 8012b4a:	4b21      	ldr	r3, [pc, #132]	; (8012bd0 <__swbuf_r+0x98>)
 8012b4c:	429c      	cmp	r4, r3
 8012b4e:	d12b      	bne.n	8012ba8 <__swbuf_r+0x70>
 8012b50:	686c      	ldr	r4, [r5, #4]
 8012b52:	69a3      	ldr	r3, [r4, #24]
 8012b54:	60a3      	str	r3, [r4, #8]
 8012b56:	89a3      	ldrh	r3, [r4, #12]
 8012b58:	071a      	lsls	r2, r3, #28
 8012b5a:	d52f      	bpl.n	8012bbc <__swbuf_r+0x84>
 8012b5c:	6923      	ldr	r3, [r4, #16]
 8012b5e:	b36b      	cbz	r3, 8012bbc <__swbuf_r+0x84>
 8012b60:	6923      	ldr	r3, [r4, #16]
 8012b62:	6820      	ldr	r0, [r4, #0]
 8012b64:	1ac0      	subs	r0, r0, r3
 8012b66:	6963      	ldr	r3, [r4, #20]
 8012b68:	b2f6      	uxtb	r6, r6
 8012b6a:	4283      	cmp	r3, r0
 8012b6c:	4637      	mov	r7, r6
 8012b6e:	dc04      	bgt.n	8012b7a <__swbuf_r+0x42>
 8012b70:	4621      	mov	r1, r4
 8012b72:	4628      	mov	r0, r5
 8012b74:	f000 ffa0 	bl	8013ab8 <_fflush_r>
 8012b78:	bb30      	cbnz	r0, 8012bc8 <__swbuf_r+0x90>
 8012b7a:	68a3      	ldr	r3, [r4, #8]
 8012b7c:	3b01      	subs	r3, #1
 8012b7e:	60a3      	str	r3, [r4, #8]
 8012b80:	6823      	ldr	r3, [r4, #0]
 8012b82:	1c5a      	adds	r2, r3, #1
 8012b84:	6022      	str	r2, [r4, #0]
 8012b86:	701e      	strb	r6, [r3, #0]
 8012b88:	6963      	ldr	r3, [r4, #20]
 8012b8a:	3001      	adds	r0, #1
 8012b8c:	4283      	cmp	r3, r0
 8012b8e:	d004      	beq.n	8012b9a <__swbuf_r+0x62>
 8012b90:	89a3      	ldrh	r3, [r4, #12]
 8012b92:	07db      	lsls	r3, r3, #31
 8012b94:	d506      	bpl.n	8012ba4 <__swbuf_r+0x6c>
 8012b96:	2e0a      	cmp	r6, #10
 8012b98:	d104      	bne.n	8012ba4 <__swbuf_r+0x6c>
 8012b9a:	4621      	mov	r1, r4
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f000 ff8b 	bl	8013ab8 <_fflush_r>
 8012ba2:	b988      	cbnz	r0, 8012bc8 <__swbuf_r+0x90>
 8012ba4:	4638      	mov	r0, r7
 8012ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ba8:	4b0a      	ldr	r3, [pc, #40]	; (8012bd4 <__swbuf_r+0x9c>)
 8012baa:	429c      	cmp	r4, r3
 8012bac:	d101      	bne.n	8012bb2 <__swbuf_r+0x7a>
 8012bae:	68ac      	ldr	r4, [r5, #8]
 8012bb0:	e7cf      	b.n	8012b52 <__swbuf_r+0x1a>
 8012bb2:	4b09      	ldr	r3, [pc, #36]	; (8012bd8 <__swbuf_r+0xa0>)
 8012bb4:	429c      	cmp	r4, r3
 8012bb6:	bf08      	it	eq
 8012bb8:	68ec      	ldreq	r4, [r5, #12]
 8012bba:	e7ca      	b.n	8012b52 <__swbuf_r+0x1a>
 8012bbc:	4621      	mov	r1, r4
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f000 f80c 	bl	8012bdc <__swsetup_r>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d0cb      	beq.n	8012b60 <__swbuf_r+0x28>
 8012bc8:	f04f 37ff 	mov.w	r7, #4294967295
 8012bcc:	e7ea      	b.n	8012ba4 <__swbuf_r+0x6c>
 8012bce:	bf00      	nop
 8012bd0:	0801531c 	.word	0x0801531c
 8012bd4:	0801533c 	.word	0x0801533c
 8012bd8:	080152fc 	.word	0x080152fc

08012bdc <__swsetup_r>:
 8012bdc:	4b32      	ldr	r3, [pc, #200]	; (8012ca8 <__swsetup_r+0xcc>)
 8012bde:	b570      	push	{r4, r5, r6, lr}
 8012be0:	681d      	ldr	r5, [r3, #0]
 8012be2:	4606      	mov	r6, r0
 8012be4:	460c      	mov	r4, r1
 8012be6:	b125      	cbz	r5, 8012bf2 <__swsetup_r+0x16>
 8012be8:	69ab      	ldr	r3, [r5, #24]
 8012bea:	b913      	cbnz	r3, 8012bf2 <__swsetup_r+0x16>
 8012bec:	4628      	mov	r0, r5
 8012bee:	f000 fff7 	bl	8013be0 <__sinit>
 8012bf2:	4b2e      	ldr	r3, [pc, #184]	; (8012cac <__swsetup_r+0xd0>)
 8012bf4:	429c      	cmp	r4, r3
 8012bf6:	d10f      	bne.n	8012c18 <__swsetup_r+0x3c>
 8012bf8:	686c      	ldr	r4, [r5, #4]
 8012bfa:	89a3      	ldrh	r3, [r4, #12]
 8012bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c00:	0719      	lsls	r1, r3, #28
 8012c02:	d42c      	bmi.n	8012c5e <__swsetup_r+0x82>
 8012c04:	06dd      	lsls	r5, r3, #27
 8012c06:	d411      	bmi.n	8012c2c <__swsetup_r+0x50>
 8012c08:	2309      	movs	r3, #9
 8012c0a:	6033      	str	r3, [r6, #0]
 8012c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c10:	81a3      	strh	r3, [r4, #12]
 8012c12:	f04f 30ff 	mov.w	r0, #4294967295
 8012c16:	e03e      	b.n	8012c96 <__swsetup_r+0xba>
 8012c18:	4b25      	ldr	r3, [pc, #148]	; (8012cb0 <__swsetup_r+0xd4>)
 8012c1a:	429c      	cmp	r4, r3
 8012c1c:	d101      	bne.n	8012c22 <__swsetup_r+0x46>
 8012c1e:	68ac      	ldr	r4, [r5, #8]
 8012c20:	e7eb      	b.n	8012bfa <__swsetup_r+0x1e>
 8012c22:	4b24      	ldr	r3, [pc, #144]	; (8012cb4 <__swsetup_r+0xd8>)
 8012c24:	429c      	cmp	r4, r3
 8012c26:	bf08      	it	eq
 8012c28:	68ec      	ldreq	r4, [r5, #12]
 8012c2a:	e7e6      	b.n	8012bfa <__swsetup_r+0x1e>
 8012c2c:	0758      	lsls	r0, r3, #29
 8012c2e:	d512      	bpl.n	8012c56 <__swsetup_r+0x7a>
 8012c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c32:	b141      	cbz	r1, 8012c46 <__swsetup_r+0x6a>
 8012c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c38:	4299      	cmp	r1, r3
 8012c3a:	d002      	beq.n	8012c42 <__swsetup_r+0x66>
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f001 fc7b 	bl	8014538 <_free_r>
 8012c42:	2300      	movs	r3, #0
 8012c44:	6363      	str	r3, [r4, #52]	; 0x34
 8012c46:	89a3      	ldrh	r3, [r4, #12]
 8012c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c4c:	81a3      	strh	r3, [r4, #12]
 8012c4e:	2300      	movs	r3, #0
 8012c50:	6063      	str	r3, [r4, #4]
 8012c52:	6923      	ldr	r3, [r4, #16]
 8012c54:	6023      	str	r3, [r4, #0]
 8012c56:	89a3      	ldrh	r3, [r4, #12]
 8012c58:	f043 0308 	orr.w	r3, r3, #8
 8012c5c:	81a3      	strh	r3, [r4, #12]
 8012c5e:	6923      	ldr	r3, [r4, #16]
 8012c60:	b94b      	cbnz	r3, 8012c76 <__swsetup_r+0x9a>
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c6c:	d003      	beq.n	8012c76 <__swsetup_r+0x9a>
 8012c6e:	4621      	mov	r1, r4
 8012c70:	4630      	mov	r0, r6
 8012c72:	f001 f87f 	bl	8013d74 <__smakebuf_r>
 8012c76:	89a0      	ldrh	r0, [r4, #12]
 8012c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c7c:	f010 0301 	ands.w	r3, r0, #1
 8012c80:	d00a      	beq.n	8012c98 <__swsetup_r+0xbc>
 8012c82:	2300      	movs	r3, #0
 8012c84:	60a3      	str	r3, [r4, #8]
 8012c86:	6963      	ldr	r3, [r4, #20]
 8012c88:	425b      	negs	r3, r3
 8012c8a:	61a3      	str	r3, [r4, #24]
 8012c8c:	6923      	ldr	r3, [r4, #16]
 8012c8e:	b943      	cbnz	r3, 8012ca2 <__swsetup_r+0xc6>
 8012c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c94:	d1ba      	bne.n	8012c0c <__swsetup_r+0x30>
 8012c96:	bd70      	pop	{r4, r5, r6, pc}
 8012c98:	0781      	lsls	r1, r0, #30
 8012c9a:	bf58      	it	pl
 8012c9c:	6963      	ldrpl	r3, [r4, #20]
 8012c9e:	60a3      	str	r3, [r4, #8]
 8012ca0:	e7f4      	b.n	8012c8c <__swsetup_r+0xb0>
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	e7f7      	b.n	8012c96 <__swsetup_r+0xba>
 8012ca6:	bf00      	nop
 8012ca8:	20000184 	.word	0x20000184
 8012cac:	0801531c 	.word	0x0801531c
 8012cb0:	0801533c 	.word	0x0801533c
 8012cb4:	080152fc 	.word	0x080152fc

08012cb8 <quorem>:
 8012cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cbc:	6903      	ldr	r3, [r0, #16]
 8012cbe:	690c      	ldr	r4, [r1, #16]
 8012cc0:	42a3      	cmp	r3, r4
 8012cc2:	4607      	mov	r7, r0
 8012cc4:	f2c0 8081 	blt.w	8012dca <quorem+0x112>
 8012cc8:	3c01      	subs	r4, #1
 8012cca:	f101 0814 	add.w	r8, r1, #20
 8012cce:	f100 0514 	add.w	r5, r0, #20
 8012cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012cd6:	9301      	str	r3, [sp, #4]
 8012cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8012cf0:	d331      	bcc.n	8012d56 <quorem+0x9e>
 8012cf2:	f04f 0e00 	mov.w	lr, #0
 8012cf6:	4640      	mov	r0, r8
 8012cf8:	46ac      	mov	ip, r5
 8012cfa:	46f2      	mov	sl, lr
 8012cfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8012d00:	b293      	uxth	r3, r2
 8012d02:	fb06 e303 	mla	r3, r6, r3, lr
 8012d06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	ebaa 0303 	sub.w	r3, sl, r3
 8012d10:	f8dc a000 	ldr.w	sl, [ip]
 8012d14:	0c12      	lsrs	r2, r2, #16
 8012d16:	fa13 f38a 	uxtah	r3, r3, sl
 8012d1a:	fb06 e202 	mla	r2, r6, r2, lr
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	9b00      	ldr	r3, [sp, #0]
 8012d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012d26:	b292      	uxth	r2, r2
 8012d28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012d2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d30:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d34:	4581      	cmp	r9, r0
 8012d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d3a:	f84c 3b04 	str.w	r3, [ip], #4
 8012d3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012d42:	d2db      	bcs.n	8012cfc <quorem+0x44>
 8012d44:	f855 300b 	ldr.w	r3, [r5, fp]
 8012d48:	b92b      	cbnz	r3, 8012d56 <quorem+0x9e>
 8012d4a:	9b01      	ldr	r3, [sp, #4]
 8012d4c:	3b04      	subs	r3, #4
 8012d4e:	429d      	cmp	r5, r3
 8012d50:	461a      	mov	r2, r3
 8012d52:	d32e      	bcc.n	8012db2 <quorem+0xfa>
 8012d54:	613c      	str	r4, [r7, #16]
 8012d56:	4638      	mov	r0, r7
 8012d58:	f001 fad6 	bl	8014308 <__mcmp>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	db24      	blt.n	8012daa <quorem+0xf2>
 8012d60:	3601      	adds	r6, #1
 8012d62:	4628      	mov	r0, r5
 8012d64:	f04f 0c00 	mov.w	ip, #0
 8012d68:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d6c:	f8d0 e000 	ldr.w	lr, [r0]
 8012d70:	b293      	uxth	r3, r2
 8012d72:	ebac 0303 	sub.w	r3, ip, r3
 8012d76:	0c12      	lsrs	r2, r2, #16
 8012d78:	fa13 f38e 	uxtah	r3, r3, lr
 8012d7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d8a:	45c1      	cmp	r9, r8
 8012d8c:	f840 3b04 	str.w	r3, [r0], #4
 8012d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d94:	d2e8      	bcs.n	8012d68 <quorem+0xb0>
 8012d96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d9e:	b922      	cbnz	r2, 8012daa <quorem+0xf2>
 8012da0:	3b04      	subs	r3, #4
 8012da2:	429d      	cmp	r5, r3
 8012da4:	461a      	mov	r2, r3
 8012da6:	d30a      	bcc.n	8012dbe <quorem+0x106>
 8012da8:	613c      	str	r4, [r7, #16]
 8012daa:	4630      	mov	r0, r6
 8012dac:	b003      	add	sp, #12
 8012dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db2:	6812      	ldr	r2, [r2, #0]
 8012db4:	3b04      	subs	r3, #4
 8012db6:	2a00      	cmp	r2, #0
 8012db8:	d1cc      	bne.n	8012d54 <quorem+0x9c>
 8012dba:	3c01      	subs	r4, #1
 8012dbc:	e7c7      	b.n	8012d4e <quorem+0x96>
 8012dbe:	6812      	ldr	r2, [r2, #0]
 8012dc0:	3b04      	subs	r3, #4
 8012dc2:	2a00      	cmp	r2, #0
 8012dc4:	d1f0      	bne.n	8012da8 <quorem+0xf0>
 8012dc6:	3c01      	subs	r4, #1
 8012dc8:	e7eb      	b.n	8012da2 <quorem+0xea>
 8012dca:	2000      	movs	r0, #0
 8012dcc:	e7ee      	b.n	8012dac <quorem+0xf4>
	...

08012dd0 <_dtoa_r>:
 8012dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd4:	ed2d 8b04 	vpush	{d8-d9}
 8012dd8:	ec57 6b10 	vmov	r6, r7, d0
 8012ddc:	b093      	sub	sp, #76	; 0x4c
 8012dde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012de0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012de4:	9106      	str	r1, [sp, #24]
 8012de6:	ee10 aa10 	vmov	sl, s0
 8012dea:	4604      	mov	r4, r0
 8012dec:	9209      	str	r2, [sp, #36]	; 0x24
 8012dee:	930c      	str	r3, [sp, #48]	; 0x30
 8012df0:	46bb      	mov	fp, r7
 8012df2:	b975      	cbnz	r5, 8012e12 <_dtoa_r+0x42>
 8012df4:	2010      	movs	r0, #16
 8012df6:	f000 fffd 	bl	8013df4 <malloc>
 8012dfa:	4602      	mov	r2, r0
 8012dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8012dfe:	b920      	cbnz	r0, 8012e0a <_dtoa_r+0x3a>
 8012e00:	4ba7      	ldr	r3, [pc, #668]	; (80130a0 <_dtoa_r+0x2d0>)
 8012e02:	21ea      	movs	r1, #234	; 0xea
 8012e04:	48a7      	ldr	r0, [pc, #668]	; (80130a4 <_dtoa_r+0x2d4>)
 8012e06:	f001 fe37 	bl	8014a78 <__assert_func>
 8012e0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012e0e:	6005      	str	r5, [r0, #0]
 8012e10:	60c5      	str	r5, [r0, #12]
 8012e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e14:	6819      	ldr	r1, [r3, #0]
 8012e16:	b151      	cbz	r1, 8012e2e <_dtoa_r+0x5e>
 8012e18:	685a      	ldr	r2, [r3, #4]
 8012e1a:	604a      	str	r2, [r1, #4]
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	4093      	lsls	r3, r2
 8012e20:	608b      	str	r3, [r1, #8]
 8012e22:	4620      	mov	r0, r4
 8012e24:	f001 f82e 	bl	8013e84 <_Bfree>
 8012e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	601a      	str	r2, [r3, #0]
 8012e2e:	1e3b      	subs	r3, r7, #0
 8012e30:	bfaa      	itet	ge
 8012e32:	2300      	movge	r3, #0
 8012e34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012e38:	f8c8 3000 	strge.w	r3, [r8]
 8012e3c:	4b9a      	ldr	r3, [pc, #616]	; (80130a8 <_dtoa_r+0x2d8>)
 8012e3e:	bfbc      	itt	lt
 8012e40:	2201      	movlt	r2, #1
 8012e42:	f8c8 2000 	strlt.w	r2, [r8]
 8012e46:	ea33 030b 	bics.w	r3, r3, fp
 8012e4a:	d11b      	bne.n	8012e84 <_dtoa_r+0xb4>
 8012e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e52:	6013      	str	r3, [r2, #0]
 8012e54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012e58:	4333      	orrs	r3, r6
 8012e5a:	f000 8592 	beq.w	8013982 <_dtoa_r+0xbb2>
 8012e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e60:	b963      	cbnz	r3, 8012e7c <_dtoa_r+0xac>
 8012e62:	4b92      	ldr	r3, [pc, #584]	; (80130ac <_dtoa_r+0x2dc>)
 8012e64:	e022      	b.n	8012eac <_dtoa_r+0xdc>
 8012e66:	4b92      	ldr	r3, [pc, #584]	; (80130b0 <_dtoa_r+0x2e0>)
 8012e68:	9301      	str	r3, [sp, #4]
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012e6e:	6013      	str	r3, [r2, #0]
 8012e70:	9801      	ldr	r0, [sp, #4]
 8012e72:	b013      	add	sp, #76	; 0x4c
 8012e74:	ecbd 8b04 	vpop	{d8-d9}
 8012e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e7c:	4b8b      	ldr	r3, [pc, #556]	; (80130ac <_dtoa_r+0x2dc>)
 8012e7e:	9301      	str	r3, [sp, #4]
 8012e80:	3303      	adds	r3, #3
 8012e82:	e7f3      	b.n	8012e6c <_dtoa_r+0x9c>
 8012e84:	2200      	movs	r2, #0
 8012e86:	2300      	movs	r3, #0
 8012e88:	4650      	mov	r0, sl
 8012e8a:	4659      	mov	r1, fp
 8012e8c:	f7ed fe44 	bl	8000b18 <__aeabi_dcmpeq>
 8012e90:	ec4b ab19 	vmov	d9, sl, fp
 8012e94:	4680      	mov	r8, r0
 8012e96:	b158      	cbz	r0, 8012eb0 <_dtoa_r+0xe0>
 8012e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	6013      	str	r3, [r2, #0]
 8012e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f000 856b 	beq.w	801397c <_dtoa_r+0xbac>
 8012ea6:	4883      	ldr	r0, [pc, #524]	; (80130b4 <_dtoa_r+0x2e4>)
 8012ea8:	6018      	str	r0, [r3, #0]
 8012eaa:	1e43      	subs	r3, r0, #1
 8012eac:	9301      	str	r3, [sp, #4]
 8012eae:	e7df      	b.n	8012e70 <_dtoa_r+0xa0>
 8012eb0:	ec4b ab10 	vmov	d0, sl, fp
 8012eb4:	aa10      	add	r2, sp, #64	; 0x40
 8012eb6:	a911      	add	r1, sp, #68	; 0x44
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f001 facb 	bl	8014454 <__d2b>
 8012ebe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012ec2:	ee08 0a10 	vmov	s16, r0
 8012ec6:	2d00      	cmp	r5, #0
 8012ec8:	f000 8084 	beq.w	8012fd4 <_dtoa_r+0x204>
 8012ecc:	ee19 3a90 	vmov	r3, s19
 8012ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ed4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012ed8:	4656      	mov	r6, sl
 8012eda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012ee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012ee6:	4b74      	ldr	r3, [pc, #464]	; (80130b8 <_dtoa_r+0x2e8>)
 8012ee8:	2200      	movs	r2, #0
 8012eea:	4630      	mov	r0, r6
 8012eec:	4639      	mov	r1, r7
 8012eee:	f7ed f9f3 	bl	80002d8 <__aeabi_dsub>
 8012ef2:	a365      	add	r3, pc, #404	; (adr r3, 8013088 <_dtoa_r+0x2b8>)
 8012ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef8:	f7ed fba6 	bl	8000648 <__aeabi_dmul>
 8012efc:	a364      	add	r3, pc, #400	; (adr r3, 8013090 <_dtoa_r+0x2c0>)
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	f7ed f9eb 	bl	80002dc <__adddf3>
 8012f06:	4606      	mov	r6, r0
 8012f08:	4628      	mov	r0, r5
 8012f0a:	460f      	mov	r7, r1
 8012f0c:	f7ed fb32 	bl	8000574 <__aeabi_i2d>
 8012f10:	a361      	add	r3, pc, #388	; (adr r3, 8013098 <_dtoa_r+0x2c8>)
 8012f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f16:	f7ed fb97 	bl	8000648 <__aeabi_dmul>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	4630      	mov	r0, r6
 8012f20:	4639      	mov	r1, r7
 8012f22:	f7ed f9db 	bl	80002dc <__adddf3>
 8012f26:	4606      	mov	r6, r0
 8012f28:	460f      	mov	r7, r1
 8012f2a:	f7ed fe3d 	bl	8000ba8 <__aeabi_d2iz>
 8012f2e:	2200      	movs	r2, #0
 8012f30:	9000      	str	r0, [sp, #0]
 8012f32:	2300      	movs	r3, #0
 8012f34:	4630      	mov	r0, r6
 8012f36:	4639      	mov	r1, r7
 8012f38:	f7ed fdf8 	bl	8000b2c <__aeabi_dcmplt>
 8012f3c:	b150      	cbz	r0, 8012f54 <_dtoa_r+0x184>
 8012f3e:	9800      	ldr	r0, [sp, #0]
 8012f40:	f7ed fb18 	bl	8000574 <__aeabi_i2d>
 8012f44:	4632      	mov	r2, r6
 8012f46:	463b      	mov	r3, r7
 8012f48:	f7ed fde6 	bl	8000b18 <__aeabi_dcmpeq>
 8012f4c:	b910      	cbnz	r0, 8012f54 <_dtoa_r+0x184>
 8012f4e:	9b00      	ldr	r3, [sp, #0]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	9b00      	ldr	r3, [sp, #0]
 8012f56:	2b16      	cmp	r3, #22
 8012f58:	d85a      	bhi.n	8013010 <_dtoa_r+0x240>
 8012f5a:	9a00      	ldr	r2, [sp, #0]
 8012f5c:	4b57      	ldr	r3, [pc, #348]	; (80130bc <_dtoa_r+0x2ec>)
 8012f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	ec51 0b19 	vmov	r0, r1, d9
 8012f6a:	f7ed fddf 	bl	8000b2c <__aeabi_dcmplt>
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	d050      	beq.n	8013014 <_dtoa_r+0x244>
 8012f72:	9b00      	ldr	r3, [sp, #0]
 8012f74:	3b01      	subs	r3, #1
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	2300      	movs	r3, #0
 8012f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f7e:	1b5d      	subs	r5, r3, r5
 8012f80:	1e6b      	subs	r3, r5, #1
 8012f82:	9305      	str	r3, [sp, #20]
 8012f84:	bf45      	ittet	mi
 8012f86:	f1c5 0301 	rsbmi	r3, r5, #1
 8012f8a:	9304      	strmi	r3, [sp, #16]
 8012f8c:	2300      	movpl	r3, #0
 8012f8e:	2300      	movmi	r3, #0
 8012f90:	bf4c      	ite	mi
 8012f92:	9305      	strmi	r3, [sp, #20]
 8012f94:	9304      	strpl	r3, [sp, #16]
 8012f96:	9b00      	ldr	r3, [sp, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	db3d      	blt.n	8013018 <_dtoa_r+0x248>
 8012f9c:	9b05      	ldr	r3, [sp, #20]
 8012f9e:	9a00      	ldr	r2, [sp, #0]
 8012fa0:	920a      	str	r2, [sp, #40]	; 0x28
 8012fa2:	4413      	add	r3, r2
 8012fa4:	9305      	str	r3, [sp, #20]
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	9307      	str	r3, [sp, #28]
 8012faa:	9b06      	ldr	r3, [sp, #24]
 8012fac:	2b09      	cmp	r3, #9
 8012fae:	f200 8089 	bhi.w	80130c4 <_dtoa_r+0x2f4>
 8012fb2:	2b05      	cmp	r3, #5
 8012fb4:	bfc4      	itt	gt
 8012fb6:	3b04      	subgt	r3, #4
 8012fb8:	9306      	strgt	r3, [sp, #24]
 8012fba:	9b06      	ldr	r3, [sp, #24]
 8012fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8012fc0:	bfcc      	ite	gt
 8012fc2:	2500      	movgt	r5, #0
 8012fc4:	2501      	movle	r5, #1
 8012fc6:	2b03      	cmp	r3, #3
 8012fc8:	f200 8087 	bhi.w	80130da <_dtoa_r+0x30a>
 8012fcc:	e8df f003 	tbb	[pc, r3]
 8012fd0:	59383a2d 	.word	0x59383a2d
 8012fd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012fd8:	441d      	add	r5, r3
 8012fda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012fde:	2b20      	cmp	r3, #32
 8012fe0:	bfc1      	itttt	gt
 8012fe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012fe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012fea:	fa0b f303 	lslgt.w	r3, fp, r3
 8012fee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012ff2:	bfda      	itte	le
 8012ff4:	f1c3 0320 	rsble	r3, r3, #32
 8012ff8:	fa06 f003 	lslle.w	r0, r6, r3
 8012ffc:	4318      	orrgt	r0, r3
 8012ffe:	f7ed faa9 	bl	8000554 <__aeabi_ui2d>
 8013002:	2301      	movs	r3, #1
 8013004:	4606      	mov	r6, r0
 8013006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801300a:	3d01      	subs	r5, #1
 801300c:	930e      	str	r3, [sp, #56]	; 0x38
 801300e:	e76a      	b.n	8012ee6 <_dtoa_r+0x116>
 8013010:	2301      	movs	r3, #1
 8013012:	e7b2      	b.n	8012f7a <_dtoa_r+0x1aa>
 8013014:	900b      	str	r0, [sp, #44]	; 0x2c
 8013016:	e7b1      	b.n	8012f7c <_dtoa_r+0x1ac>
 8013018:	9b04      	ldr	r3, [sp, #16]
 801301a:	9a00      	ldr	r2, [sp, #0]
 801301c:	1a9b      	subs	r3, r3, r2
 801301e:	9304      	str	r3, [sp, #16]
 8013020:	4253      	negs	r3, r2
 8013022:	9307      	str	r3, [sp, #28]
 8013024:	2300      	movs	r3, #0
 8013026:	930a      	str	r3, [sp, #40]	; 0x28
 8013028:	e7bf      	b.n	8012faa <_dtoa_r+0x1da>
 801302a:	2300      	movs	r3, #0
 801302c:	9308      	str	r3, [sp, #32]
 801302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013030:	2b00      	cmp	r3, #0
 8013032:	dc55      	bgt.n	80130e0 <_dtoa_r+0x310>
 8013034:	2301      	movs	r3, #1
 8013036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801303a:	461a      	mov	r2, r3
 801303c:	9209      	str	r2, [sp, #36]	; 0x24
 801303e:	e00c      	b.n	801305a <_dtoa_r+0x28a>
 8013040:	2301      	movs	r3, #1
 8013042:	e7f3      	b.n	801302c <_dtoa_r+0x25c>
 8013044:	2300      	movs	r3, #0
 8013046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013048:	9308      	str	r3, [sp, #32]
 801304a:	9b00      	ldr	r3, [sp, #0]
 801304c:	4413      	add	r3, r2
 801304e:	9302      	str	r3, [sp, #8]
 8013050:	3301      	adds	r3, #1
 8013052:	2b01      	cmp	r3, #1
 8013054:	9303      	str	r3, [sp, #12]
 8013056:	bfb8      	it	lt
 8013058:	2301      	movlt	r3, #1
 801305a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801305c:	2200      	movs	r2, #0
 801305e:	6042      	str	r2, [r0, #4]
 8013060:	2204      	movs	r2, #4
 8013062:	f102 0614 	add.w	r6, r2, #20
 8013066:	429e      	cmp	r6, r3
 8013068:	6841      	ldr	r1, [r0, #4]
 801306a:	d93d      	bls.n	80130e8 <_dtoa_r+0x318>
 801306c:	4620      	mov	r0, r4
 801306e:	f000 fec9 	bl	8013e04 <_Balloc>
 8013072:	9001      	str	r0, [sp, #4]
 8013074:	2800      	cmp	r0, #0
 8013076:	d13b      	bne.n	80130f0 <_dtoa_r+0x320>
 8013078:	4b11      	ldr	r3, [pc, #68]	; (80130c0 <_dtoa_r+0x2f0>)
 801307a:	4602      	mov	r2, r0
 801307c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013080:	e6c0      	b.n	8012e04 <_dtoa_r+0x34>
 8013082:	2301      	movs	r3, #1
 8013084:	e7df      	b.n	8013046 <_dtoa_r+0x276>
 8013086:	bf00      	nop
 8013088:	636f4361 	.word	0x636f4361
 801308c:	3fd287a7 	.word	0x3fd287a7
 8013090:	8b60c8b3 	.word	0x8b60c8b3
 8013094:	3fc68a28 	.word	0x3fc68a28
 8013098:	509f79fb 	.word	0x509f79fb
 801309c:	3fd34413 	.word	0x3fd34413
 80130a0:	08015279 	.word	0x08015279
 80130a4:	08015290 	.word	0x08015290
 80130a8:	7ff00000 	.word	0x7ff00000
 80130ac:	08015275 	.word	0x08015275
 80130b0:	0801526c 	.word	0x0801526c
 80130b4:	08015249 	.word	0x08015249
 80130b8:	3ff80000 	.word	0x3ff80000
 80130bc:	080153e0 	.word	0x080153e0
 80130c0:	080152eb 	.word	0x080152eb
 80130c4:	2501      	movs	r5, #1
 80130c6:	2300      	movs	r3, #0
 80130c8:	9306      	str	r3, [sp, #24]
 80130ca:	9508      	str	r5, [sp, #32]
 80130cc:	f04f 33ff 	mov.w	r3, #4294967295
 80130d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80130d4:	2200      	movs	r2, #0
 80130d6:	2312      	movs	r3, #18
 80130d8:	e7b0      	b.n	801303c <_dtoa_r+0x26c>
 80130da:	2301      	movs	r3, #1
 80130dc:	9308      	str	r3, [sp, #32]
 80130de:	e7f5      	b.n	80130cc <_dtoa_r+0x2fc>
 80130e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80130e6:	e7b8      	b.n	801305a <_dtoa_r+0x28a>
 80130e8:	3101      	adds	r1, #1
 80130ea:	6041      	str	r1, [r0, #4]
 80130ec:	0052      	lsls	r2, r2, #1
 80130ee:	e7b8      	b.n	8013062 <_dtoa_r+0x292>
 80130f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130f2:	9a01      	ldr	r2, [sp, #4]
 80130f4:	601a      	str	r2, [r3, #0]
 80130f6:	9b03      	ldr	r3, [sp, #12]
 80130f8:	2b0e      	cmp	r3, #14
 80130fa:	f200 809d 	bhi.w	8013238 <_dtoa_r+0x468>
 80130fe:	2d00      	cmp	r5, #0
 8013100:	f000 809a 	beq.w	8013238 <_dtoa_r+0x468>
 8013104:	9b00      	ldr	r3, [sp, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	dd32      	ble.n	8013170 <_dtoa_r+0x3a0>
 801310a:	4ab7      	ldr	r2, [pc, #732]	; (80133e8 <_dtoa_r+0x618>)
 801310c:	f003 030f 	and.w	r3, r3, #15
 8013110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013118:	9b00      	ldr	r3, [sp, #0]
 801311a:	05d8      	lsls	r0, r3, #23
 801311c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013120:	d516      	bpl.n	8013150 <_dtoa_r+0x380>
 8013122:	4bb2      	ldr	r3, [pc, #712]	; (80133ec <_dtoa_r+0x61c>)
 8013124:	ec51 0b19 	vmov	r0, r1, d9
 8013128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801312c:	f7ed fbb6 	bl	800089c <__aeabi_ddiv>
 8013130:	f007 070f 	and.w	r7, r7, #15
 8013134:	4682      	mov	sl, r0
 8013136:	468b      	mov	fp, r1
 8013138:	2503      	movs	r5, #3
 801313a:	4eac      	ldr	r6, [pc, #688]	; (80133ec <_dtoa_r+0x61c>)
 801313c:	b957      	cbnz	r7, 8013154 <_dtoa_r+0x384>
 801313e:	4642      	mov	r2, r8
 8013140:	464b      	mov	r3, r9
 8013142:	4650      	mov	r0, sl
 8013144:	4659      	mov	r1, fp
 8013146:	f7ed fba9 	bl	800089c <__aeabi_ddiv>
 801314a:	4682      	mov	sl, r0
 801314c:	468b      	mov	fp, r1
 801314e:	e028      	b.n	80131a2 <_dtoa_r+0x3d2>
 8013150:	2502      	movs	r5, #2
 8013152:	e7f2      	b.n	801313a <_dtoa_r+0x36a>
 8013154:	07f9      	lsls	r1, r7, #31
 8013156:	d508      	bpl.n	801316a <_dtoa_r+0x39a>
 8013158:	4640      	mov	r0, r8
 801315a:	4649      	mov	r1, r9
 801315c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013160:	f7ed fa72 	bl	8000648 <__aeabi_dmul>
 8013164:	3501      	adds	r5, #1
 8013166:	4680      	mov	r8, r0
 8013168:	4689      	mov	r9, r1
 801316a:	107f      	asrs	r7, r7, #1
 801316c:	3608      	adds	r6, #8
 801316e:	e7e5      	b.n	801313c <_dtoa_r+0x36c>
 8013170:	f000 809b 	beq.w	80132aa <_dtoa_r+0x4da>
 8013174:	9b00      	ldr	r3, [sp, #0]
 8013176:	4f9d      	ldr	r7, [pc, #628]	; (80133ec <_dtoa_r+0x61c>)
 8013178:	425e      	negs	r6, r3
 801317a:	4b9b      	ldr	r3, [pc, #620]	; (80133e8 <_dtoa_r+0x618>)
 801317c:	f006 020f 	and.w	r2, r6, #15
 8013180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013188:	ec51 0b19 	vmov	r0, r1, d9
 801318c:	f7ed fa5c 	bl	8000648 <__aeabi_dmul>
 8013190:	1136      	asrs	r6, r6, #4
 8013192:	4682      	mov	sl, r0
 8013194:	468b      	mov	fp, r1
 8013196:	2300      	movs	r3, #0
 8013198:	2502      	movs	r5, #2
 801319a:	2e00      	cmp	r6, #0
 801319c:	d17a      	bne.n	8013294 <_dtoa_r+0x4c4>
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d1d3      	bne.n	801314a <_dtoa_r+0x37a>
 80131a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f000 8082 	beq.w	80132ae <_dtoa_r+0x4de>
 80131aa:	4b91      	ldr	r3, [pc, #580]	; (80133f0 <_dtoa_r+0x620>)
 80131ac:	2200      	movs	r2, #0
 80131ae:	4650      	mov	r0, sl
 80131b0:	4659      	mov	r1, fp
 80131b2:	f7ed fcbb 	bl	8000b2c <__aeabi_dcmplt>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d079      	beq.n	80132ae <_dtoa_r+0x4de>
 80131ba:	9b03      	ldr	r3, [sp, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d076      	beq.n	80132ae <_dtoa_r+0x4de>
 80131c0:	9b02      	ldr	r3, [sp, #8]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	dd36      	ble.n	8013234 <_dtoa_r+0x464>
 80131c6:	9b00      	ldr	r3, [sp, #0]
 80131c8:	4650      	mov	r0, sl
 80131ca:	4659      	mov	r1, fp
 80131cc:	1e5f      	subs	r7, r3, #1
 80131ce:	2200      	movs	r2, #0
 80131d0:	4b88      	ldr	r3, [pc, #544]	; (80133f4 <_dtoa_r+0x624>)
 80131d2:	f7ed fa39 	bl	8000648 <__aeabi_dmul>
 80131d6:	9e02      	ldr	r6, [sp, #8]
 80131d8:	4682      	mov	sl, r0
 80131da:	468b      	mov	fp, r1
 80131dc:	3501      	adds	r5, #1
 80131de:	4628      	mov	r0, r5
 80131e0:	f7ed f9c8 	bl	8000574 <__aeabi_i2d>
 80131e4:	4652      	mov	r2, sl
 80131e6:	465b      	mov	r3, fp
 80131e8:	f7ed fa2e 	bl	8000648 <__aeabi_dmul>
 80131ec:	4b82      	ldr	r3, [pc, #520]	; (80133f8 <_dtoa_r+0x628>)
 80131ee:	2200      	movs	r2, #0
 80131f0:	f7ed f874 	bl	80002dc <__adddf3>
 80131f4:	46d0      	mov	r8, sl
 80131f6:	46d9      	mov	r9, fp
 80131f8:	4682      	mov	sl, r0
 80131fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80131fe:	2e00      	cmp	r6, #0
 8013200:	d158      	bne.n	80132b4 <_dtoa_r+0x4e4>
 8013202:	4b7e      	ldr	r3, [pc, #504]	; (80133fc <_dtoa_r+0x62c>)
 8013204:	2200      	movs	r2, #0
 8013206:	4640      	mov	r0, r8
 8013208:	4649      	mov	r1, r9
 801320a:	f7ed f865 	bl	80002d8 <__aeabi_dsub>
 801320e:	4652      	mov	r2, sl
 8013210:	465b      	mov	r3, fp
 8013212:	4680      	mov	r8, r0
 8013214:	4689      	mov	r9, r1
 8013216:	f7ed fca7 	bl	8000b68 <__aeabi_dcmpgt>
 801321a:	2800      	cmp	r0, #0
 801321c:	f040 8295 	bne.w	801374a <_dtoa_r+0x97a>
 8013220:	4652      	mov	r2, sl
 8013222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013226:	4640      	mov	r0, r8
 8013228:	4649      	mov	r1, r9
 801322a:	f7ed fc7f 	bl	8000b2c <__aeabi_dcmplt>
 801322e:	2800      	cmp	r0, #0
 8013230:	f040 8289 	bne.w	8013746 <_dtoa_r+0x976>
 8013234:	ec5b ab19 	vmov	sl, fp, d9
 8013238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801323a:	2b00      	cmp	r3, #0
 801323c:	f2c0 8148 	blt.w	80134d0 <_dtoa_r+0x700>
 8013240:	9a00      	ldr	r2, [sp, #0]
 8013242:	2a0e      	cmp	r2, #14
 8013244:	f300 8144 	bgt.w	80134d0 <_dtoa_r+0x700>
 8013248:	4b67      	ldr	r3, [pc, #412]	; (80133e8 <_dtoa_r+0x618>)
 801324a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801324e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013254:	2b00      	cmp	r3, #0
 8013256:	f280 80d5 	bge.w	8013404 <_dtoa_r+0x634>
 801325a:	9b03      	ldr	r3, [sp, #12]
 801325c:	2b00      	cmp	r3, #0
 801325e:	f300 80d1 	bgt.w	8013404 <_dtoa_r+0x634>
 8013262:	f040 826f 	bne.w	8013744 <_dtoa_r+0x974>
 8013266:	4b65      	ldr	r3, [pc, #404]	; (80133fc <_dtoa_r+0x62c>)
 8013268:	2200      	movs	r2, #0
 801326a:	4640      	mov	r0, r8
 801326c:	4649      	mov	r1, r9
 801326e:	f7ed f9eb 	bl	8000648 <__aeabi_dmul>
 8013272:	4652      	mov	r2, sl
 8013274:	465b      	mov	r3, fp
 8013276:	f7ed fc6d 	bl	8000b54 <__aeabi_dcmpge>
 801327a:	9e03      	ldr	r6, [sp, #12]
 801327c:	4637      	mov	r7, r6
 801327e:	2800      	cmp	r0, #0
 8013280:	f040 8245 	bne.w	801370e <_dtoa_r+0x93e>
 8013284:	9d01      	ldr	r5, [sp, #4]
 8013286:	2331      	movs	r3, #49	; 0x31
 8013288:	f805 3b01 	strb.w	r3, [r5], #1
 801328c:	9b00      	ldr	r3, [sp, #0]
 801328e:	3301      	adds	r3, #1
 8013290:	9300      	str	r3, [sp, #0]
 8013292:	e240      	b.n	8013716 <_dtoa_r+0x946>
 8013294:	07f2      	lsls	r2, r6, #31
 8013296:	d505      	bpl.n	80132a4 <_dtoa_r+0x4d4>
 8013298:	e9d7 2300 	ldrd	r2, r3, [r7]
 801329c:	f7ed f9d4 	bl	8000648 <__aeabi_dmul>
 80132a0:	3501      	adds	r5, #1
 80132a2:	2301      	movs	r3, #1
 80132a4:	1076      	asrs	r6, r6, #1
 80132a6:	3708      	adds	r7, #8
 80132a8:	e777      	b.n	801319a <_dtoa_r+0x3ca>
 80132aa:	2502      	movs	r5, #2
 80132ac:	e779      	b.n	80131a2 <_dtoa_r+0x3d2>
 80132ae:	9f00      	ldr	r7, [sp, #0]
 80132b0:	9e03      	ldr	r6, [sp, #12]
 80132b2:	e794      	b.n	80131de <_dtoa_r+0x40e>
 80132b4:	9901      	ldr	r1, [sp, #4]
 80132b6:	4b4c      	ldr	r3, [pc, #304]	; (80133e8 <_dtoa_r+0x618>)
 80132b8:	4431      	add	r1, r6
 80132ba:	910d      	str	r1, [sp, #52]	; 0x34
 80132bc:	9908      	ldr	r1, [sp, #32]
 80132be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80132c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80132c6:	2900      	cmp	r1, #0
 80132c8:	d043      	beq.n	8013352 <_dtoa_r+0x582>
 80132ca:	494d      	ldr	r1, [pc, #308]	; (8013400 <_dtoa_r+0x630>)
 80132cc:	2000      	movs	r0, #0
 80132ce:	f7ed fae5 	bl	800089c <__aeabi_ddiv>
 80132d2:	4652      	mov	r2, sl
 80132d4:	465b      	mov	r3, fp
 80132d6:	f7ec ffff 	bl	80002d8 <__aeabi_dsub>
 80132da:	9d01      	ldr	r5, [sp, #4]
 80132dc:	4682      	mov	sl, r0
 80132de:	468b      	mov	fp, r1
 80132e0:	4649      	mov	r1, r9
 80132e2:	4640      	mov	r0, r8
 80132e4:	f7ed fc60 	bl	8000ba8 <__aeabi_d2iz>
 80132e8:	4606      	mov	r6, r0
 80132ea:	f7ed f943 	bl	8000574 <__aeabi_i2d>
 80132ee:	4602      	mov	r2, r0
 80132f0:	460b      	mov	r3, r1
 80132f2:	4640      	mov	r0, r8
 80132f4:	4649      	mov	r1, r9
 80132f6:	f7ec ffef 	bl	80002d8 <__aeabi_dsub>
 80132fa:	3630      	adds	r6, #48	; 0x30
 80132fc:	f805 6b01 	strb.w	r6, [r5], #1
 8013300:	4652      	mov	r2, sl
 8013302:	465b      	mov	r3, fp
 8013304:	4680      	mov	r8, r0
 8013306:	4689      	mov	r9, r1
 8013308:	f7ed fc10 	bl	8000b2c <__aeabi_dcmplt>
 801330c:	2800      	cmp	r0, #0
 801330e:	d163      	bne.n	80133d8 <_dtoa_r+0x608>
 8013310:	4642      	mov	r2, r8
 8013312:	464b      	mov	r3, r9
 8013314:	4936      	ldr	r1, [pc, #216]	; (80133f0 <_dtoa_r+0x620>)
 8013316:	2000      	movs	r0, #0
 8013318:	f7ec ffde 	bl	80002d8 <__aeabi_dsub>
 801331c:	4652      	mov	r2, sl
 801331e:	465b      	mov	r3, fp
 8013320:	f7ed fc04 	bl	8000b2c <__aeabi_dcmplt>
 8013324:	2800      	cmp	r0, #0
 8013326:	f040 80b5 	bne.w	8013494 <_dtoa_r+0x6c4>
 801332a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801332c:	429d      	cmp	r5, r3
 801332e:	d081      	beq.n	8013234 <_dtoa_r+0x464>
 8013330:	4b30      	ldr	r3, [pc, #192]	; (80133f4 <_dtoa_r+0x624>)
 8013332:	2200      	movs	r2, #0
 8013334:	4650      	mov	r0, sl
 8013336:	4659      	mov	r1, fp
 8013338:	f7ed f986 	bl	8000648 <__aeabi_dmul>
 801333c:	4b2d      	ldr	r3, [pc, #180]	; (80133f4 <_dtoa_r+0x624>)
 801333e:	4682      	mov	sl, r0
 8013340:	468b      	mov	fp, r1
 8013342:	4640      	mov	r0, r8
 8013344:	4649      	mov	r1, r9
 8013346:	2200      	movs	r2, #0
 8013348:	f7ed f97e 	bl	8000648 <__aeabi_dmul>
 801334c:	4680      	mov	r8, r0
 801334e:	4689      	mov	r9, r1
 8013350:	e7c6      	b.n	80132e0 <_dtoa_r+0x510>
 8013352:	4650      	mov	r0, sl
 8013354:	4659      	mov	r1, fp
 8013356:	f7ed f977 	bl	8000648 <__aeabi_dmul>
 801335a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801335c:	9d01      	ldr	r5, [sp, #4]
 801335e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013360:	4682      	mov	sl, r0
 8013362:	468b      	mov	fp, r1
 8013364:	4649      	mov	r1, r9
 8013366:	4640      	mov	r0, r8
 8013368:	f7ed fc1e 	bl	8000ba8 <__aeabi_d2iz>
 801336c:	4606      	mov	r6, r0
 801336e:	f7ed f901 	bl	8000574 <__aeabi_i2d>
 8013372:	3630      	adds	r6, #48	; 0x30
 8013374:	4602      	mov	r2, r0
 8013376:	460b      	mov	r3, r1
 8013378:	4640      	mov	r0, r8
 801337a:	4649      	mov	r1, r9
 801337c:	f7ec ffac 	bl	80002d8 <__aeabi_dsub>
 8013380:	f805 6b01 	strb.w	r6, [r5], #1
 8013384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013386:	429d      	cmp	r5, r3
 8013388:	4680      	mov	r8, r0
 801338a:	4689      	mov	r9, r1
 801338c:	f04f 0200 	mov.w	r2, #0
 8013390:	d124      	bne.n	80133dc <_dtoa_r+0x60c>
 8013392:	4b1b      	ldr	r3, [pc, #108]	; (8013400 <_dtoa_r+0x630>)
 8013394:	4650      	mov	r0, sl
 8013396:	4659      	mov	r1, fp
 8013398:	f7ec ffa0 	bl	80002dc <__adddf3>
 801339c:	4602      	mov	r2, r0
 801339e:	460b      	mov	r3, r1
 80133a0:	4640      	mov	r0, r8
 80133a2:	4649      	mov	r1, r9
 80133a4:	f7ed fbe0 	bl	8000b68 <__aeabi_dcmpgt>
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d173      	bne.n	8013494 <_dtoa_r+0x6c4>
 80133ac:	4652      	mov	r2, sl
 80133ae:	465b      	mov	r3, fp
 80133b0:	4913      	ldr	r1, [pc, #76]	; (8013400 <_dtoa_r+0x630>)
 80133b2:	2000      	movs	r0, #0
 80133b4:	f7ec ff90 	bl	80002d8 <__aeabi_dsub>
 80133b8:	4602      	mov	r2, r0
 80133ba:	460b      	mov	r3, r1
 80133bc:	4640      	mov	r0, r8
 80133be:	4649      	mov	r1, r9
 80133c0:	f7ed fbb4 	bl	8000b2c <__aeabi_dcmplt>
 80133c4:	2800      	cmp	r0, #0
 80133c6:	f43f af35 	beq.w	8013234 <_dtoa_r+0x464>
 80133ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80133cc:	1e6b      	subs	r3, r5, #1
 80133ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80133d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80133d4:	2b30      	cmp	r3, #48	; 0x30
 80133d6:	d0f8      	beq.n	80133ca <_dtoa_r+0x5fa>
 80133d8:	9700      	str	r7, [sp, #0]
 80133da:	e049      	b.n	8013470 <_dtoa_r+0x6a0>
 80133dc:	4b05      	ldr	r3, [pc, #20]	; (80133f4 <_dtoa_r+0x624>)
 80133de:	f7ed f933 	bl	8000648 <__aeabi_dmul>
 80133e2:	4680      	mov	r8, r0
 80133e4:	4689      	mov	r9, r1
 80133e6:	e7bd      	b.n	8013364 <_dtoa_r+0x594>
 80133e8:	080153e0 	.word	0x080153e0
 80133ec:	080153b8 	.word	0x080153b8
 80133f0:	3ff00000 	.word	0x3ff00000
 80133f4:	40240000 	.word	0x40240000
 80133f8:	401c0000 	.word	0x401c0000
 80133fc:	40140000 	.word	0x40140000
 8013400:	3fe00000 	.word	0x3fe00000
 8013404:	9d01      	ldr	r5, [sp, #4]
 8013406:	4656      	mov	r6, sl
 8013408:	465f      	mov	r7, fp
 801340a:	4642      	mov	r2, r8
 801340c:	464b      	mov	r3, r9
 801340e:	4630      	mov	r0, r6
 8013410:	4639      	mov	r1, r7
 8013412:	f7ed fa43 	bl	800089c <__aeabi_ddiv>
 8013416:	f7ed fbc7 	bl	8000ba8 <__aeabi_d2iz>
 801341a:	4682      	mov	sl, r0
 801341c:	f7ed f8aa 	bl	8000574 <__aeabi_i2d>
 8013420:	4642      	mov	r2, r8
 8013422:	464b      	mov	r3, r9
 8013424:	f7ed f910 	bl	8000648 <__aeabi_dmul>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	4630      	mov	r0, r6
 801342e:	4639      	mov	r1, r7
 8013430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013434:	f7ec ff50 	bl	80002d8 <__aeabi_dsub>
 8013438:	f805 6b01 	strb.w	r6, [r5], #1
 801343c:	9e01      	ldr	r6, [sp, #4]
 801343e:	9f03      	ldr	r7, [sp, #12]
 8013440:	1bae      	subs	r6, r5, r6
 8013442:	42b7      	cmp	r7, r6
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	d135      	bne.n	80134b6 <_dtoa_r+0x6e6>
 801344a:	f7ec ff47 	bl	80002dc <__adddf3>
 801344e:	4642      	mov	r2, r8
 8013450:	464b      	mov	r3, r9
 8013452:	4606      	mov	r6, r0
 8013454:	460f      	mov	r7, r1
 8013456:	f7ed fb87 	bl	8000b68 <__aeabi_dcmpgt>
 801345a:	b9d0      	cbnz	r0, 8013492 <_dtoa_r+0x6c2>
 801345c:	4642      	mov	r2, r8
 801345e:	464b      	mov	r3, r9
 8013460:	4630      	mov	r0, r6
 8013462:	4639      	mov	r1, r7
 8013464:	f7ed fb58 	bl	8000b18 <__aeabi_dcmpeq>
 8013468:	b110      	cbz	r0, 8013470 <_dtoa_r+0x6a0>
 801346a:	f01a 0f01 	tst.w	sl, #1
 801346e:	d110      	bne.n	8013492 <_dtoa_r+0x6c2>
 8013470:	4620      	mov	r0, r4
 8013472:	ee18 1a10 	vmov	r1, s16
 8013476:	f000 fd05 	bl	8013e84 <_Bfree>
 801347a:	2300      	movs	r3, #0
 801347c:	9800      	ldr	r0, [sp, #0]
 801347e:	702b      	strb	r3, [r5, #0]
 8013480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013482:	3001      	adds	r0, #1
 8013484:	6018      	str	r0, [r3, #0]
 8013486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013488:	2b00      	cmp	r3, #0
 801348a:	f43f acf1 	beq.w	8012e70 <_dtoa_r+0xa0>
 801348e:	601d      	str	r5, [r3, #0]
 8013490:	e4ee      	b.n	8012e70 <_dtoa_r+0xa0>
 8013492:	9f00      	ldr	r7, [sp, #0]
 8013494:	462b      	mov	r3, r5
 8013496:	461d      	mov	r5, r3
 8013498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801349c:	2a39      	cmp	r2, #57	; 0x39
 801349e:	d106      	bne.n	80134ae <_dtoa_r+0x6de>
 80134a0:	9a01      	ldr	r2, [sp, #4]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d1f7      	bne.n	8013496 <_dtoa_r+0x6c6>
 80134a6:	9901      	ldr	r1, [sp, #4]
 80134a8:	2230      	movs	r2, #48	; 0x30
 80134aa:	3701      	adds	r7, #1
 80134ac:	700a      	strb	r2, [r1, #0]
 80134ae:	781a      	ldrb	r2, [r3, #0]
 80134b0:	3201      	adds	r2, #1
 80134b2:	701a      	strb	r2, [r3, #0]
 80134b4:	e790      	b.n	80133d8 <_dtoa_r+0x608>
 80134b6:	4ba6      	ldr	r3, [pc, #664]	; (8013750 <_dtoa_r+0x980>)
 80134b8:	2200      	movs	r2, #0
 80134ba:	f7ed f8c5 	bl	8000648 <__aeabi_dmul>
 80134be:	2200      	movs	r2, #0
 80134c0:	2300      	movs	r3, #0
 80134c2:	4606      	mov	r6, r0
 80134c4:	460f      	mov	r7, r1
 80134c6:	f7ed fb27 	bl	8000b18 <__aeabi_dcmpeq>
 80134ca:	2800      	cmp	r0, #0
 80134cc:	d09d      	beq.n	801340a <_dtoa_r+0x63a>
 80134ce:	e7cf      	b.n	8013470 <_dtoa_r+0x6a0>
 80134d0:	9a08      	ldr	r2, [sp, #32]
 80134d2:	2a00      	cmp	r2, #0
 80134d4:	f000 80d7 	beq.w	8013686 <_dtoa_r+0x8b6>
 80134d8:	9a06      	ldr	r2, [sp, #24]
 80134da:	2a01      	cmp	r2, #1
 80134dc:	f300 80ba 	bgt.w	8013654 <_dtoa_r+0x884>
 80134e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134e2:	2a00      	cmp	r2, #0
 80134e4:	f000 80b2 	beq.w	801364c <_dtoa_r+0x87c>
 80134e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80134ec:	9e07      	ldr	r6, [sp, #28]
 80134ee:	9d04      	ldr	r5, [sp, #16]
 80134f0:	9a04      	ldr	r2, [sp, #16]
 80134f2:	441a      	add	r2, r3
 80134f4:	9204      	str	r2, [sp, #16]
 80134f6:	9a05      	ldr	r2, [sp, #20]
 80134f8:	2101      	movs	r1, #1
 80134fa:	441a      	add	r2, r3
 80134fc:	4620      	mov	r0, r4
 80134fe:	9205      	str	r2, [sp, #20]
 8013500:	f000 fd78 	bl	8013ff4 <__i2b>
 8013504:	4607      	mov	r7, r0
 8013506:	2d00      	cmp	r5, #0
 8013508:	dd0c      	ble.n	8013524 <_dtoa_r+0x754>
 801350a:	9b05      	ldr	r3, [sp, #20]
 801350c:	2b00      	cmp	r3, #0
 801350e:	dd09      	ble.n	8013524 <_dtoa_r+0x754>
 8013510:	42ab      	cmp	r3, r5
 8013512:	9a04      	ldr	r2, [sp, #16]
 8013514:	bfa8      	it	ge
 8013516:	462b      	movge	r3, r5
 8013518:	1ad2      	subs	r2, r2, r3
 801351a:	9204      	str	r2, [sp, #16]
 801351c:	9a05      	ldr	r2, [sp, #20]
 801351e:	1aed      	subs	r5, r5, r3
 8013520:	1ad3      	subs	r3, r2, r3
 8013522:	9305      	str	r3, [sp, #20]
 8013524:	9b07      	ldr	r3, [sp, #28]
 8013526:	b31b      	cbz	r3, 8013570 <_dtoa_r+0x7a0>
 8013528:	9b08      	ldr	r3, [sp, #32]
 801352a:	2b00      	cmp	r3, #0
 801352c:	f000 80af 	beq.w	801368e <_dtoa_r+0x8be>
 8013530:	2e00      	cmp	r6, #0
 8013532:	dd13      	ble.n	801355c <_dtoa_r+0x78c>
 8013534:	4639      	mov	r1, r7
 8013536:	4632      	mov	r2, r6
 8013538:	4620      	mov	r0, r4
 801353a:	f000 fe1b 	bl	8014174 <__pow5mult>
 801353e:	ee18 2a10 	vmov	r2, s16
 8013542:	4601      	mov	r1, r0
 8013544:	4607      	mov	r7, r0
 8013546:	4620      	mov	r0, r4
 8013548:	f000 fd6a 	bl	8014020 <__multiply>
 801354c:	ee18 1a10 	vmov	r1, s16
 8013550:	4680      	mov	r8, r0
 8013552:	4620      	mov	r0, r4
 8013554:	f000 fc96 	bl	8013e84 <_Bfree>
 8013558:	ee08 8a10 	vmov	s16, r8
 801355c:	9b07      	ldr	r3, [sp, #28]
 801355e:	1b9a      	subs	r2, r3, r6
 8013560:	d006      	beq.n	8013570 <_dtoa_r+0x7a0>
 8013562:	ee18 1a10 	vmov	r1, s16
 8013566:	4620      	mov	r0, r4
 8013568:	f000 fe04 	bl	8014174 <__pow5mult>
 801356c:	ee08 0a10 	vmov	s16, r0
 8013570:	2101      	movs	r1, #1
 8013572:	4620      	mov	r0, r4
 8013574:	f000 fd3e 	bl	8013ff4 <__i2b>
 8013578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801357a:	2b00      	cmp	r3, #0
 801357c:	4606      	mov	r6, r0
 801357e:	f340 8088 	ble.w	8013692 <_dtoa_r+0x8c2>
 8013582:	461a      	mov	r2, r3
 8013584:	4601      	mov	r1, r0
 8013586:	4620      	mov	r0, r4
 8013588:	f000 fdf4 	bl	8014174 <__pow5mult>
 801358c:	9b06      	ldr	r3, [sp, #24]
 801358e:	2b01      	cmp	r3, #1
 8013590:	4606      	mov	r6, r0
 8013592:	f340 8081 	ble.w	8013698 <_dtoa_r+0x8c8>
 8013596:	f04f 0800 	mov.w	r8, #0
 801359a:	6933      	ldr	r3, [r6, #16]
 801359c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80135a0:	6918      	ldr	r0, [r3, #16]
 80135a2:	f000 fcd7 	bl	8013f54 <__hi0bits>
 80135a6:	f1c0 0020 	rsb	r0, r0, #32
 80135aa:	9b05      	ldr	r3, [sp, #20]
 80135ac:	4418      	add	r0, r3
 80135ae:	f010 001f 	ands.w	r0, r0, #31
 80135b2:	f000 8092 	beq.w	80136da <_dtoa_r+0x90a>
 80135b6:	f1c0 0320 	rsb	r3, r0, #32
 80135ba:	2b04      	cmp	r3, #4
 80135bc:	f340 808a 	ble.w	80136d4 <_dtoa_r+0x904>
 80135c0:	f1c0 001c 	rsb	r0, r0, #28
 80135c4:	9b04      	ldr	r3, [sp, #16]
 80135c6:	4403      	add	r3, r0
 80135c8:	9304      	str	r3, [sp, #16]
 80135ca:	9b05      	ldr	r3, [sp, #20]
 80135cc:	4403      	add	r3, r0
 80135ce:	4405      	add	r5, r0
 80135d0:	9305      	str	r3, [sp, #20]
 80135d2:	9b04      	ldr	r3, [sp, #16]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	dd07      	ble.n	80135e8 <_dtoa_r+0x818>
 80135d8:	ee18 1a10 	vmov	r1, s16
 80135dc:	461a      	mov	r2, r3
 80135de:	4620      	mov	r0, r4
 80135e0:	f000 fe22 	bl	8014228 <__lshift>
 80135e4:	ee08 0a10 	vmov	s16, r0
 80135e8:	9b05      	ldr	r3, [sp, #20]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	dd05      	ble.n	80135fa <_dtoa_r+0x82a>
 80135ee:	4631      	mov	r1, r6
 80135f0:	461a      	mov	r2, r3
 80135f2:	4620      	mov	r0, r4
 80135f4:	f000 fe18 	bl	8014228 <__lshift>
 80135f8:	4606      	mov	r6, r0
 80135fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d06e      	beq.n	80136de <_dtoa_r+0x90e>
 8013600:	ee18 0a10 	vmov	r0, s16
 8013604:	4631      	mov	r1, r6
 8013606:	f000 fe7f 	bl	8014308 <__mcmp>
 801360a:	2800      	cmp	r0, #0
 801360c:	da67      	bge.n	80136de <_dtoa_r+0x90e>
 801360e:	9b00      	ldr	r3, [sp, #0]
 8013610:	3b01      	subs	r3, #1
 8013612:	ee18 1a10 	vmov	r1, s16
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	220a      	movs	r2, #10
 801361a:	2300      	movs	r3, #0
 801361c:	4620      	mov	r0, r4
 801361e:	f000 fc53 	bl	8013ec8 <__multadd>
 8013622:	9b08      	ldr	r3, [sp, #32]
 8013624:	ee08 0a10 	vmov	s16, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	f000 81b1 	beq.w	8013990 <_dtoa_r+0xbc0>
 801362e:	2300      	movs	r3, #0
 8013630:	4639      	mov	r1, r7
 8013632:	220a      	movs	r2, #10
 8013634:	4620      	mov	r0, r4
 8013636:	f000 fc47 	bl	8013ec8 <__multadd>
 801363a:	9b02      	ldr	r3, [sp, #8]
 801363c:	2b00      	cmp	r3, #0
 801363e:	4607      	mov	r7, r0
 8013640:	f300 808e 	bgt.w	8013760 <_dtoa_r+0x990>
 8013644:	9b06      	ldr	r3, [sp, #24]
 8013646:	2b02      	cmp	r3, #2
 8013648:	dc51      	bgt.n	80136ee <_dtoa_r+0x91e>
 801364a:	e089      	b.n	8013760 <_dtoa_r+0x990>
 801364c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801364e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013652:	e74b      	b.n	80134ec <_dtoa_r+0x71c>
 8013654:	9b03      	ldr	r3, [sp, #12]
 8013656:	1e5e      	subs	r6, r3, #1
 8013658:	9b07      	ldr	r3, [sp, #28]
 801365a:	42b3      	cmp	r3, r6
 801365c:	bfbf      	itttt	lt
 801365e:	9b07      	ldrlt	r3, [sp, #28]
 8013660:	9607      	strlt	r6, [sp, #28]
 8013662:	1af2      	sublt	r2, r6, r3
 8013664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013666:	bfb6      	itet	lt
 8013668:	189b      	addlt	r3, r3, r2
 801366a:	1b9e      	subge	r6, r3, r6
 801366c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801366e:	9b03      	ldr	r3, [sp, #12]
 8013670:	bfb8      	it	lt
 8013672:	2600      	movlt	r6, #0
 8013674:	2b00      	cmp	r3, #0
 8013676:	bfb7      	itett	lt
 8013678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801367c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013680:	1a9d      	sublt	r5, r3, r2
 8013682:	2300      	movlt	r3, #0
 8013684:	e734      	b.n	80134f0 <_dtoa_r+0x720>
 8013686:	9e07      	ldr	r6, [sp, #28]
 8013688:	9d04      	ldr	r5, [sp, #16]
 801368a:	9f08      	ldr	r7, [sp, #32]
 801368c:	e73b      	b.n	8013506 <_dtoa_r+0x736>
 801368e:	9a07      	ldr	r2, [sp, #28]
 8013690:	e767      	b.n	8013562 <_dtoa_r+0x792>
 8013692:	9b06      	ldr	r3, [sp, #24]
 8013694:	2b01      	cmp	r3, #1
 8013696:	dc18      	bgt.n	80136ca <_dtoa_r+0x8fa>
 8013698:	f1ba 0f00 	cmp.w	sl, #0
 801369c:	d115      	bne.n	80136ca <_dtoa_r+0x8fa>
 801369e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136a2:	b993      	cbnz	r3, 80136ca <_dtoa_r+0x8fa>
 80136a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80136a8:	0d1b      	lsrs	r3, r3, #20
 80136aa:	051b      	lsls	r3, r3, #20
 80136ac:	b183      	cbz	r3, 80136d0 <_dtoa_r+0x900>
 80136ae:	9b04      	ldr	r3, [sp, #16]
 80136b0:	3301      	adds	r3, #1
 80136b2:	9304      	str	r3, [sp, #16]
 80136b4:	9b05      	ldr	r3, [sp, #20]
 80136b6:	3301      	adds	r3, #1
 80136b8:	9305      	str	r3, [sp, #20]
 80136ba:	f04f 0801 	mov.w	r8, #1
 80136be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	f47f af6a 	bne.w	801359a <_dtoa_r+0x7ca>
 80136c6:	2001      	movs	r0, #1
 80136c8:	e76f      	b.n	80135aa <_dtoa_r+0x7da>
 80136ca:	f04f 0800 	mov.w	r8, #0
 80136ce:	e7f6      	b.n	80136be <_dtoa_r+0x8ee>
 80136d0:	4698      	mov	r8, r3
 80136d2:	e7f4      	b.n	80136be <_dtoa_r+0x8ee>
 80136d4:	f43f af7d 	beq.w	80135d2 <_dtoa_r+0x802>
 80136d8:	4618      	mov	r0, r3
 80136da:	301c      	adds	r0, #28
 80136dc:	e772      	b.n	80135c4 <_dtoa_r+0x7f4>
 80136de:	9b03      	ldr	r3, [sp, #12]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	dc37      	bgt.n	8013754 <_dtoa_r+0x984>
 80136e4:	9b06      	ldr	r3, [sp, #24]
 80136e6:	2b02      	cmp	r3, #2
 80136e8:	dd34      	ble.n	8013754 <_dtoa_r+0x984>
 80136ea:	9b03      	ldr	r3, [sp, #12]
 80136ec:	9302      	str	r3, [sp, #8]
 80136ee:	9b02      	ldr	r3, [sp, #8]
 80136f0:	b96b      	cbnz	r3, 801370e <_dtoa_r+0x93e>
 80136f2:	4631      	mov	r1, r6
 80136f4:	2205      	movs	r2, #5
 80136f6:	4620      	mov	r0, r4
 80136f8:	f000 fbe6 	bl	8013ec8 <__multadd>
 80136fc:	4601      	mov	r1, r0
 80136fe:	4606      	mov	r6, r0
 8013700:	ee18 0a10 	vmov	r0, s16
 8013704:	f000 fe00 	bl	8014308 <__mcmp>
 8013708:	2800      	cmp	r0, #0
 801370a:	f73f adbb 	bgt.w	8013284 <_dtoa_r+0x4b4>
 801370e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013710:	9d01      	ldr	r5, [sp, #4]
 8013712:	43db      	mvns	r3, r3
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	f04f 0800 	mov.w	r8, #0
 801371a:	4631      	mov	r1, r6
 801371c:	4620      	mov	r0, r4
 801371e:	f000 fbb1 	bl	8013e84 <_Bfree>
 8013722:	2f00      	cmp	r7, #0
 8013724:	f43f aea4 	beq.w	8013470 <_dtoa_r+0x6a0>
 8013728:	f1b8 0f00 	cmp.w	r8, #0
 801372c:	d005      	beq.n	801373a <_dtoa_r+0x96a>
 801372e:	45b8      	cmp	r8, r7
 8013730:	d003      	beq.n	801373a <_dtoa_r+0x96a>
 8013732:	4641      	mov	r1, r8
 8013734:	4620      	mov	r0, r4
 8013736:	f000 fba5 	bl	8013e84 <_Bfree>
 801373a:	4639      	mov	r1, r7
 801373c:	4620      	mov	r0, r4
 801373e:	f000 fba1 	bl	8013e84 <_Bfree>
 8013742:	e695      	b.n	8013470 <_dtoa_r+0x6a0>
 8013744:	2600      	movs	r6, #0
 8013746:	4637      	mov	r7, r6
 8013748:	e7e1      	b.n	801370e <_dtoa_r+0x93e>
 801374a:	9700      	str	r7, [sp, #0]
 801374c:	4637      	mov	r7, r6
 801374e:	e599      	b.n	8013284 <_dtoa_r+0x4b4>
 8013750:	40240000 	.word	0x40240000
 8013754:	9b08      	ldr	r3, [sp, #32]
 8013756:	2b00      	cmp	r3, #0
 8013758:	f000 80ca 	beq.w	80138f0 <_dtoa_r+0xb20>
 801375c:	9b03      	ldr	r3, [sp, #12]
 801375e:	9302      	str	r3, [sp, #8]
 8013760:	2d00      	cmp	r5, #0
 8013762:	dd05      	ble.n	8013770 <_dtoa_r+0x9a0>
 8013764:	4639      	mov	r1, r7
 8013766:	462a      	mov	r2, r5
 8013768:	4620      	mov	r0, r4
 801376a:	f000 fd5d 	bl	8014228 <__lshift>
 801376e:	4607      	mov	r7, r0
 8013770:	f1b8 0f00 	cmp.w	r8, #0
 8013774:	d05b      	beq.n	801382e <_dtoa_r+0xa5e>
 8013776:	6879      	ldr	r1, [r7, #4]
 8013778:	4620      	mov	r0, r4
 801377a:	f000 fb43 	bl	8013e04 <_Balloc>
 801377e:	4605      	mov	r5, r0
 8013780:	b928      	cbnz	r0, 801378e <_dtoa_r+0x9be>
 8013782:	4b87      	ldr	r3, [pc, #540]	; (80139a0 <_dtoa_r+0xbd0>)
 8013784:	4602      	mov	r2, r0
 8013786:	f240 21ea 	movw	r1, #746	; 0x2ea
 801378a:	f7ff bb3b 	b.w	8012e04 <_dtoa_r+0x34>
 801378e:	693a      	ldr	r2, [r7, #16]
 8013790:	3202      	adds	r2, #2
 8013792:	0092      	lsls	r2, r2, #2
 8013794:	f107 010c 	add.w	r1, r7, #12
 8013798:	300c      	adds	r0, #12
 801379a:	f7fe fcbf 	bl	801211c <memcpy>
 801379e:	2201      	movs	r2, #1
 80137a0:	4629      	mov	r1, r5
 80137a2:	4620      	mov	r0, r4
 80137a4:	f000 fd40 	bl	8014228 <__lshift>
 80137a8:	9b01      	ldr	r3, [sp, #4]
 80137aa:	f103 0901 	add.w	r9, r3, #1
 80137ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80137b2:	4413      	add	r3, r2
 80137b4:	9305      	str	r3, [sp, #20]
 80137b6:	f00a 0301 	and.w	r3, sl, #1
 80137ba:	46b8      	mov	r8, r7
 80137bc:	9304      	str	r3, [sp, #16]
 80137be:	4607      	mov	r7, r0
 80137c0:	4631      	mov	r1, r6
 80137c2:	ee18 0a10 	vmov	r0, s16
 80137c6:	f7ff fa77 	bl	8012cb8 <quorem>
 80137ca:	4641      	mov	r1, r8
 80137cc:	9002      	str	r0, [sp, #8]
 80137ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80137d2:	ee18 0a10 	vmov	r0, s16
 80137d6:	f000 fd97 	bl	8014308 <__mcmp>
 80137da:	463a      	mov	r2, r7
 80137dc:	9003      	str	r0, [sp, #12]
 80137de:	4631      	mov	r1, r6
 80137e0:	4620      	mov	r0, r4
 80137e2:	f000 fdad 	bl	8014340 <__mdiff>
 80137e6:	68c2      	ldr	r2, [r0, #12]
 80137e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80137ec:	4605      	mov	r5, r0
 80137ee:	bb02      	cbnz	r2, 8013832 <_dtoa_r+0xa62>
 80137f0:	4601      	mov	r1, r0
 80137f2:	ee18 0a10 	vmov	r0, s16
 80137f6:	f000 fd87 	bl	8014308 <__mcmp>
 80137fa:	4602      	mov	r2, r0
 80137fc:	4629      	mov	r1, r5
 80137fe:	4620      	mov	r0, r4
 8013800:	9207      	str	r2, [sp, #28]
 8013802:	f000 fb3f 	bl	8013e84 <_Bfree>
 8013806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801380a:	ea43 0102 	orr.w	r1, r3, r2
 801380e:	9b04      	ldr	r3, [sp, #16]
 8013810:	430b      	orrs	r3, r1
 8013812:	464d      	mov	r5, r9
 8013814:	d10f      	bne.n	8013836 <_dtoa_r+0xa66>
 8013816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801381a:	d02a      	beq.n	8013872 <_dtoa_r+0xaa2>
 801381c:	9b03      	ldr	r3, [sp, #12]
 801381e:	2b00      	cmp	r3, #0
 8013820:	dd02      	ble.n	8013828 <_dtoa_r+0xa58>
 8013822:	9b02      	ldr	r3, [sp, #8]
 8013824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013828:	f88b a000 	strb.w	sl, [fp]
 801382c:	e775      	b.n	801371a <_dtoa_r+0x94a>
 801382e:	4638      	mov	r0, r7
 8013830:	e7ba      	b.n	80137a8 <_dtoa_r+0x9d8>
 8013832:	2201      	movs	r2, #1
 8013834:	e7e2      	b.n	80137fc <_dtoa_r+0xa2c>
 8013836:	9b03      	ldr	r3, [sp, #12]
 8013838:	2b00      	cmp	r3, #0
 801383a:	db04      	blt.n	8013846 <_dtoa_r+0xa76>
 801383c:	9906      	ldr	r1, [sp, #24]
 801383e:	430b      	orrs	r3, r1
 8013840:	9904      	ldr	r1, [sp, #16]
 8013842:	430b      	orrs	r3, r1
 8013844:	d122      	bne.n	801388c <_dtoa_r+0xabc>
 8013846:	2a00      	cmp	r2, #0
 8013848:	ddee      	ble.n	8013828 <_dtoa_r+0xa58>
 801384a:	ee18 1a10 	vmov	r1, s16
 801384e:	2201      	movs	r2, #1
 8013850:	4620      	mov	r0, r4
 8013852:	f000 fce9 	bl	8014228 <__lshift>
 8013856:	4631      	mov	r1, r6
 8013858:	ee08 0a10 	vmov	s16, r0
 801385c:	f000 fd54 	bl	8014308 <__mcmp>
 8013860:	2800      	cmp	r0, #0
 8013862:	dc03      	bgt.n	801386c <_dtoa_r+0xa9c>
 8013864:	d1e0      	bne.n	8013828 <_dtoa_r+0xa58>
 8013866:	f01a 0f01 	tst.w	sl, #1
 801386a:	d0dd      	beq.n	8013828 <_dtoa_r+0xa58>
 801386c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013870:	d1d7      	bne.n	8013822 <_dtoa_r+0xa52>
 8013872:	2339      	movs	r3, #57	; 0x39
 8013874:	f88b 3000 	strb.w	r3, [fp]
 8013878:	462b      	mov	r3, r5
 801387a:	461d      	mov	r5, r3
 801387c:	3b01      	subs	r3, #1
 801387e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013882:	2a39      	cmp	r2, #57	; 0x39
 8013884:	d071      	beq.n	801396a <_dtoa_r+0xb9a>
 8013886:	3201      	adds	r2, #1
 8013888:	701a      	strb	r2, [r3, #0]
 801388a:	e746      	b.n	801371a <_dtoa_r+0x94a>
 801388c:	2a00      	cmp	r2, #0
 801388e:	dd07      	ble.n	80138a0 <_dtoa_r+0xad0>
 8013890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013894:	d0ed      	beq.n	8013872 <_dtoa_r+0xaa2>
 8013896:	f10a 0301 	add.w	r3, sl, #1
 801389a:	f88b 3000 	strb.w	r3, [fp]
 801389e:	e73c      	b.n	801371a <_dtoa_r+0x94a>
 80138a0:	9b05      	ldr	r3, [sp, #20]
 80138a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80138a6:	4599      	cmp	r9, r3
 80138a8:	d047      	beq.n	801393a <_dtoa_r+0xb6a>
 80138aa:	ee18 1a10 	vmov	r1, s16
 80138ae:	2300      	movs	r3, #0
 80138b0:	220a      	movs	r2, #10
 80138b2:	4620      	mov	r0, r4
 80138b4:	f000 fb08 	bl	8013ec8 <__multadd>
 80138b8:	45b8      	cmp	r8, r7
 80138ba:	ee08 0a10 	vmov	s16, r0
 80138be:	f04f 0300 	mov.w	r3, #0
 80138c2:	f04f 020a 	mov.w	r2, #10
 80138c6:	4641      	mov	r1, r8
 80138c8:	4620      	mov	r0, r4
 80138ca:	d106      	bne.n	80138da <_dtoa_r+0xb0a>
 80138cc:	f000 fafc 	bl	8013ec8 <__multadd>
 80138d0:	4680      	mov	r8, r0
 80138d2:	4607      	mov	r7, r0
 80138d4:	f109 0901 	add.w	r9, r9, #1
 80138d8:	e772      	b.n	80137c0 <_dtoa_r+0x9f0>
 80138da:	f000 faf5 	bl	8013ec8 <__multadd>
 80138de:	4639      	mov	r1, r7
 80138e0:	4680      	mov	r8, r0
 80138e2:	2300      	movs	r3, #0
 80138e4:	220a      	movs	r2, #10
 80138e6:	4620      	mov	r0, r4
 80138e8:	f000 faee 	bl	8013ec8 <__multadd>
 80138ec:	4607      	mov	r7, r0
 80138ee:	e7f1      	b.n	80138d4 <_dtoa_r+0xb04>
 80138f0:	9b03      	ldr	r3, [sp, #12]
 80138f2:	9302      	str	r3, [sp, #8]
 80138f4:	9d01      	ldr	r5, [sp, #4]
 80138f6:	ee18 0a10 	vmov	r0, s16
 80138fa:	4631      	mov	r1, r6
 80138fc:	f7ff f9dc 	bl	8012cb8 <quorem>
 8013900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013904:	9b01      	ldr	r3, [sp, #4]
 8013906:	f805 ab01 	strb.w	sl, [r5], #1
 801390a:	1aea      	subs	r2, r5, r3
 801390c:	9b02      	ldr	r3, [sp, #8]
 801390e:	4293      	cmp	r3, r2
 8013910:	dd09      	ble.n	8013926 <_dtoa_r+0xb56>
 8013912:	ee18 1a10 	vmov	r1, s16
 8013916:	2300      	movs	r3, #0
 8013918:	220a      	movs	r2, #10
 801391a:	4620      	mov	r0, r4
 801391c:	f000 fad4 	bl	8013ec8 <__multadd>
 8013920:	ee08 0a10 	vmov	s16, r0
 8013924:	e7e7      	b.n	80138f6 <_dtoa_r+0xb26>
 8013926:	9b02      	ldr	r3, [sp, #8]
 8013928:	2b00      	cmp	r3, #0
 801392a:	bfc8      	it	gt
 801392c:	461d      	movgt	r5, r3
 801392e:	9b01      	ldr	r3, [sp, #4]
 8013930:	bfd8      	it	le
 8013932:	2501      	movle	r5, #1
 8013934:	441d      	add	r5, r3
 8013936:	f04f 0800 	mov.w	r8, #0
 801393a:	ee18 1a10 	vmov	r1, s16
 801393e:	2201      	movs	r2, #1
 8013940:	4620      	mov	r0, r4
 8013942:	f000 fc71 	bl	8014228 <__lshift>
 8013946:	4631      	mov	r1, r6
 8013948:	ee08 0a10 	vmov	s16, r0
 801394c:	f000 fcdc 	bl	8014308 <__mcmp>
 8013950:	2800      	cmp	r0, #0
 8013952:	dc91      	bgt.n	8013878 <_dtoa_r+0xaa8>
 8013954:	d102      	bne.n	801395c <_dtoa_r+0xb8c>
 8013956:	f01a 0f01 	tst.w	sl, #1
 801395a:	d18d      	bne.n	8013878 <_dtoa_r+0xaa8>
 801395c:	462b      	mov	r3, r5
 801395e:	461d      	mov	r5, r3
 8013960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013964:	2a30      	cmp	r2, #48	; 0x30
 8013966:	d0fa      	beq.n	801395e <_dtoa_r+0xb8e>
 8013968:	e6d7      	b.n	801371a <_dtoa_r+0x94a>
 801396a:	9a01      	ldr	r2, [sp, #4]
 801396c:	429a      	cmp	r2, r3
 801396e:	d184      	bne.n	801387a <_dtoa_r+0xaaa>
 8013970:	9b00      	ldr	r3, [sp, #0]
 8013972:	3301      	adds	r3, #1
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	2331      	movs	r3, #49	; 0x31
 8013978:	7013      	strb	r3, [r2, #0]
 801397a:	e6ce      	b.n	801371a <_dtoa_r+0x94a>
 801397c:	4b09      	ldr	r3, [pc, #36]	; (80139a4 <_dtoa_r+0xbd4>)
 801397e:	f7ff ba95 	b.w	8012eac <_dtoa_r+0xdc>
 8013982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013984:	2b00      	cmp	r3, #0
 8013986:	f47f aa6e 	bne.w	8012e66 <_dtoa_r+0x96>
 801398a:	4b07      	ldr	r3, [pc, #28]	; (80139a8 <_dtoa_r+0xbd8>)
 801398c:	f7ff ba8e 	b.w	8012eac <_dtoa_r+0xdc>
 8013990:	9b02      	ldr	r3, [sp, #8]
 8013992:	2b00      	cmp	r3, #0
 8013994:	dcae      	bgt.n	80138f4 <_dtoa_r+0xb24>
 8013996:	9b06      	ldr	r3, [sp, #24]
 8013998:	2b02      	cmp	r3, #2
 801399a:	f73f aea8 	bgt.w	80136ee <_dtoa_r+0x91e>
 801399e:	e7a9      	b.n	80138f4 <_dtoa_r+0xb24>
 80139a0:	080152eb 	.word	0x080152eb
 80139a4:	08015248 	.word	0x08015248
 80139a8:	0801526c 	.word	0x0801526c

080139ac <__sflush_r>:
 80139ac:	898a      	ldrh	r2, [r1, #12]
 80139ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b2:	4605      	mov	r5, r0
 80139b4:	0710      	lsls	r0, r2, #28
 80139b6:	460c      	mov	r4, r1
 80139b8:	d458      	bmi.n	8013a6c <__sflush_r+0xc0>
 80139ba:	684b      	ldr	r3, [r1, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	dc05      	bgt.n	80139cc <__sflush_r+0x20>
 80139c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	dc02      	bgt.n	80139cc <__sflush_r+0x20>
 80139c6:	2000      	movs	r0, #0
 80139c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139ce:	2e00      	cmp	r6, #0
 80139d0:	d0f9      	beq.n	80139c6 <__sflush_r+0x1a>
 80139d2:	2300      	movs	r3, #0
 80139d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80139d8:	682f      	ldr	r7, [r5, #0]
 80139da:	602b      	str	r3, [r5, #0]
 80139dc:	d032      	beq.n	8013a44 <__sflush_r+0x98>
 80139de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80139e0:	89a3      	ldrh	r3, [r4, #12]
 80139e2:	075a      	lsls	r2, r3, #29
 80139e4:	d505      	bpl.n	80139f2 <__sflush_r+0x46>
 80139e6:	6863      	ldr	r3, [r4, #4]
 80139e8:	1ac0      	subs	r0, r0, r3
 80139ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139ec:	b10b      	cbz	r3, 80139f2 <__sflush_r+0x46>
 80139ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139f0:	1ac0      	subs	r0, r0, r3
 80139f2:	2300      	movs	r3, #0
 80139f4:	4602      	mov	r2, r0
 80139f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139f8:	6a21      	ldr	r1, [r4, #32]
 80139fa:	4628      	mov	r0, r5
 80139fc:	47b0      	blx	r6
 80139fe:	1c43      	adds	r3, r0, #1
 8013a00:	89a3      	ldrh	r3, [r4, #12]
 8013a02:	d106      	bne.n	8013a12 <__sflush_r+0x66>
 8013a04:	6829      	ldr	r1, [r5, #0]
 8013a06:	291d      	cmp	r1, #29
 8013a08:	d82c      	bhi.n	8013a64 <__sflush_r+0xb8>
 8013a0a:	4a2a      	ldr	r2, [pc, #168]	; (8013ab4 <__sflush_r+0x108>)
 8013a0c:	40ca      	lsrs	r2, r1
 8013a0e:	07d6      	lsls	r6, r2, #31
 8013a10:	d528      	bpl.n	8013a64 <__sflush_r+0xb8>
 8013a12:	2200      	movs	r2, #0
 8013a14:	6062      	str	r2, [r4, #4]
 8013a16:	04d9      	lsls	r1, r3, #19
 8013a18:	6922      	ldr	r2, [r4, #16]
 8013a1a:	6022      	str	r2, [r4, #0]
 8013a1c:	d504      	bpl.n	8013a28 <__sflush_r+0x7c>
 8013a1e:	1c42      	adds	r2, r0, #1
 8013a20:	d101      	bne.n	8013a26 <__sflush_r+0x7a>
 8013a22:	682b      	ldr	r3, [r5, #0]
 8013a24:	b903      	cbnz	r3, 8013a28 <__sflush_r+0x7c>
 8013a26:	6560      	str	r0, [r4, #84]	; 0x54
 8013a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a2a:	602f      	str	r7, [r5, #0]
 8013a2c:	2900      	cmp	r1, #0
 8013a2e:	d0ca      	beq.n	80139c6 <__sflush_r+0x1a>
 8013a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a34:	4299      	cmp	r1, r3
 8013a36:	d002      	beq.n	8013a3e <__sflush_r+0x92>
 8013a38:	4628      	mov	r0, r5
 8013a3a:	f000 fd7d 	bl	8014538 <_free_r>
 8013a3e:	2000      	movs	r0, #0
 8013a40:	6360      	str	r0, [r4, #52]	; 0x34
 8013a42:	e7c1      	b.n	80139c8 <__sflush_r+0x1c>
 8013a44:	6a21      	ldr	r1, [r4, #32]
 8013a46:	2301      	movs	r3, #1
 8013a48:	4628      	mov	r0, r5
 8013a4a:	47b0      	blx	r6
 8013a4c:	1c41      	adds	r1, r0, #1
 8013a4e:	d1c7      	bne.n	80139e0 <__sflush_r+0x34>
 8013a50:	682b      	ldr	r3, [r5, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d0c4      	beq.n	80139e0 <__sflush_r+0x34>
 8013a56:	2b1d      	cmp	r3, #29
 8013a58:	d001      	beq.n	8013a5e <__sflush_r+0xb2>
 8013a5a:	2b16      	cmp	r3, #22
 8013a5c:	d101      	bne.n	8013a62 <__sflush_r+0xb6>
 8013a5e:	602f      	str	r7, [r5, #0]
 8013a60:	e7b1      	b.n	80139c6 <__sflush_r+0x1a>
 8013a62:	89a3      	ldrh	r3, [r4, #12]
 8013a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a68:	81a3      	strh	r3, [r4, #12]
 8013a6a:	e7ad      	b.n	80139c8 <__sflush_r+0x1c>
 8013a6c:	690f      	ldr	r7, [r1, #16]
 8013a6e:	2f00      	cmp	r7, #0
 8013a70:	d0a9      	beq.n	80139c6 <__sflush_r+0x1a>
 8013a72:	0793      	lsls	r3, r2, #30
 8013a74:	680e      	ldr	r6, [r1, #0]
 8013a76:	bf08      	it	eq
 8013a78:	694b      	ldreq	r3, [r1, #20]
 8013a7a:	600f      	str	r7, [r1, #0]
 8013a7c:	bf18      	it	ne
 8013a7e:	2300      	movne	r3, #0
 8013a80:	eba6 0807 	sub.w	r8, r6, r7
 8013a84:	608b      	str	r3, [r1, #8]
 8013a86:	f1b8 0f00 	cmp.w	r8, #0
 8013a8a:	dd9c      	ble.n	80139c6 <__sflush_r+0x1a>
 8013a8c:	6a21      	ldr	r1, [r4, #32]
 8013a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a90:	4643      	mov	r3, r8
 8013a92:	463a      	mov	r2, r7
 8013a94:	4628      	mov	r0, r5
 8013a96:	47b0      	blx	r6
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	dc06      	bgt.n	8013aaa <__sflush_r+0xfe>
 8013a9c:	89a3      	ldrh	r3, [r4, #12]
 8013a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aa2:	81a3      	strh	r3, [r4, #12]
 8013aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa8:	e78e      	b.n	80139c8 <__sflush_r+0x1c>
 8013aaa:	4407      	add	r7, r0
 8013aac:	eba8 0800 	sub.w	r8, r8, r0
 8013ab0:	e7e9      	b.n	8013a86 <__sflush_r+0xda>
 8013ab2:	bf00      	nop
 8013ab4:	20400001 	.word	0x20400001

08013ab8 <_fflush_r>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	690b      	ldr	r3, [r1, #16]
 8013abc:	4605      	mov	r5, r0
 8013abe:	460c      	mov	r4, r1
 8013ac0:	b913      	cbnz	r3, 8013ac8 <_fflush_r+0x10>
 8013ac2:	2500      	movs	r5, #0
 8013ac4:	4628      	mov	r0, r5
 8013ac6:	bd38      	pop	{r3, r4, r5, pc}
 8013ac8:	b118      	cbz	r0, 8013ad2 <_fflush_r+0x1a>
 8013aca:	6983      	ldr	r3, [r0, #24]
 8013acc:	b90b      	cbnz	r3, 8013ad2 <_fflush_r+0x1a>
 8013ace:	f000 f887 	bl	8013be0 <__sinit>
 8013ad2:	4b14      	ldr	r3, [pc, #80]	; (8013b24 <_fflush_r+0x6c>)
 8013ad4:	429c      	cmp	r4, r3
 8013ad6:	d11b      	bne.n	8013b10 <_fflush_r+0x58>
 8013ad8:	686c      	ldr	r4, [r5, #4]
 8013ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d0ef      	beq.n	8013ac2 <_fflush_r+0xa>
 8013ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013ae4:	07d0      	lsls	r0, r2, #31
 8013ae6:	d404      	bmi.n	8013af2 <_fflush_r+0x3a>
 8013ae8:	0599      	lsls	r1, r3, #22
 8013aea:	d402      	bmi.n	8013af2 <_fflush_r+0x3a>
 8013aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013aee:	f000 f91a 	bl	8013d26 <__retarget_lock_acquire_recursive>
 8013af2:	4628      	mov	r0, r5
 8013af4:	4621      	mov	r1, r4
 8013af6:	f7ff ff59 	bl	80139ac <__sflush_r>
 8013afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013afc:	07da      	lsls	r2, r3, #31
 8013afe:	4605      	mov	r5, r0
 8013b00:	d4e0      	bmi.n	8013ac4 <_fflush_r+0xc>
 8013b02:	89a3      	ldrh	r3, [r4, #12]
 8013b04:	059b      	lsls	r3, r3, #22
 8013b06:	d4dd      	bmi.n	8013ac4 <_fflush_r+0xc>
 8013b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b0a:	f000 f90d 	bl	8013d28 <__retarget_lock_release_recursive>
 8013b0e:	e7d9      	b.n	8013ac4 <_fflush_r+0xc>
 8013b10:	4b05      	ldr	r3, [pc, #20]	; (8013b28 <_fflush_r+0x70>)
 8013b12:	429c      	cmp	r4, r3
 8013b14:	d101      	bne.n	8013b1a <_fflush_r+0x62>
 8013b16:	68ac      	ldr	r4, [r5, #8]
 8013b18:	e7df      	b.n	8013ada <_fflush_r+0x22>
 8013b1a:	4b04      	ldr	r3, [pc, #16]	; (8013b2c <_fflush_r+0x74>)
 8013b1c:	429c      	cmp	r4, r3
 8013b1e:	bf08      	it	eq
 8013b20:	68ec      	ldreq	r4, [r5, #12]
 8013b22:	e7da      	b.n	8013ada <_fflush_r+0x22>
 8013b24:	0801531c 	.word	0x0801531c
 8013b28:	0801533c 	.word	0x0801533c
 8013b2c:	080152fc 	.word	0x080152fc

08013b30 <std>:
 8013b30:	2300      	movs	r3, #0
 8013b32:	b510      	push	{r4, lr}
 8013b34:	4604      	mov	r4, r0
 8013b36:	e9c0 3300 	strd	r3, r3, [r0]
 8013b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b3e:	6083      	str	r3, [r0, #8]
 8013b40:	8181      	strh	r1, [r0, #12]
 8013b42:	6643      	str	r3, [r0, #100]	; 0x64
 8013b44:	81c2      	strh	r2, [r0, #14]
 8013b46:	6183      	str	r3, [r0, #24]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	2208      	movs	r2, #8
 8013b4c:	305c      	adds	r0, #92	; 0x5c
 8013b4e:	f7fe faf3 	bl	8012138 <memset>
 8013b52:	4b05      	ldr	r3, [pc, #20]	; (8013b68 <std+0x38>)
 8013b54:	6263      	str	r3, [r4, #36]	; 0x24
 8013b56:	4b05      	ldr	r3, [pc, #20]	; (8013b6c <std+0x3c>)
 8013b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b5a:	4b05      	ldr	r3, [pc, #20]	; (8013b70 <std+0x40>)
 8013b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b5e:	4b05      	ldr	r3, [pc, #20]	; (8013b74 <std+0x44>)
 8013b60:	6224      	str	r4, [r4, #32]
 8013b62:	6323      	str	r3, [r4, #48]	; 0x30
 8013b64:	bd10      	pop	{r4, pc}
 8013b66:	bf00      	nop
 8013b68:	080149cd 	.word	0x080149cd
 8013b6c:	080149ef 	.word	0x080149ef
 8013b70:	08014a27 	.word	0x08014a27
 8013b74:	08014a4b 	.word	0x08014a4b

08013b78 <_cleanup_r>:
 8013b78:	4901      	ldr	r1, [pc, #4]	; (8013b80 <_cleanup_r+0x8>)
 8013b7a:	f000 b8af 	b.w	8013cdc <_fwalk_reent>
 8013b7e:	bf00      	nop
 8013b80:	08013ab9 	.word	0x08013ab9

08013b84 <__sfmoreglue>:
 8013b84:	b570      	push	{r4, r5, r6, lr}
 8013b86:	2268      	movs	r2, #104	; 0x68
 8013b88:	1e4d      	subs	r5, r1, #1
 8013b8a:	4355      	muls	r5, r2
 8013b8c:	460e      	mov	r6, r1
 8013b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b92:	f000 fd3d 	bl	8014610 <_malloc_r>
 8013b96:	4604      	mov	r4, r0
 8013b98:	b140      	cbz	r0, 8013bac <__sfmoreglue+0x28>
 8013b9a:	2100      	movs	r1, #0
 8013b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8013ba0:	300c      	adds	r0, #12
 8013ba2:	60a0      	str	r0, [r4, #8]
 8013ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013ba8:	f7fe fac6 	bl	8012138 <memset>
 8013bac:	4620      	mov	r0, r4
 8013bae:	bd70      	pop	{r4, r5, r6, pc}

08013bb0 <__sfp_lock_acquire>:
 8013bb0:	4801      	ldr	r0, [pc, #4]	; (8013bb8 <__sfp_lock_acquire+0x8>)
 8013bb2:	f000 b8b8 	b.w	8013d26 <__retarget_lock_acquire_recursive>
 8013bb6:	bf00      	nop
 8013bb8:	20002421 	.word	0x20002421

08013bbc <__sfp_lock_release>:
 8013bbc:	4801      	ldr	r0, [pc, #4]	; (8013bc4 <__sfp_lock_release+0x8>)
 8013bbe:	f000 b8b3 	b.w	8013d28 <__retarget_lock_release_recursive>
 8013bc2:	bf00      	nop
 8013bc4:	20002421 	.word	0x20002421

08013bc8 <__sinit_lock_acquire>:
 8013bc8:	4801      	ldr	r0, [pc, #4]	; (8013bd0 <__sinit_lock_acquire+0x8>)
 8013bca:	f000 b8ac 	b.w	8013d26 <__retarget_lock_acquire_recursive>
 8013bce:	bf00      	nop
 8013bd0:	20002422 	.word	0x20002422

08013bd4 <__sinit_lock_release>:
 8013bd4:	4801      	ldr	r0, [pc, #4]	; (8013bdc <__sinit_lock_release+0x8>)
 8013bd6:	f000 b8a7 	b.w	8013d28 <__retarget_lock_release_recursive>
 8013bda:	bf00      	nop
 8013bdc:	20002422 	.word	0x20002422

08013be0 <__sinit>:
 8013be0:	b510      	push	{r4, lr}
 8013be2:	4604      	mov	r4, r0
 8013be4:	f7ff fff0 	bl	8013bc8 <__sinit_lock_acquire>
 8013be8:	69a3      	ldr	r3, [r4, #24]
 8013bea:	b11b      	cbz	r3, 8013bf4 <__sinit+0x14>
 8013bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bf0:	f7ff bff0 	b.w	8013bd4 <__sinit_lock_release>
 8013bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8013bfa:	4b13      	ldr	r3, [pc, #76]	; (8013c48 <__sinit+0x68>)
 8013bfc:	4a13      	ldr	r2, [pc, #76]	; (8013c4c <__sinit+0x6c>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8013c02:	42a3      	cmp	r3, r4
 8013c04:	bf04      	itt	eq
 8013c06:	2301      	moveq	r3, #1
 8013c08:	61a3      	streq	r3, [r4, #24]
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	f000 f820 	bl	8013c50 <__sfp>
 8013c10:	6060      	str	r0, [r4, #4]
 8013c12:	4620      	mov	r0, r4
 8013c14:	f000 f81c 	bl	8013c50 <__sfp>
 8013c18:	60a0      	str	r0, [r4, #8]
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f000 f818 	bl	8013c50 <__sfp>
 8013c20:	2200      	movs	r2, #0
 8013c22:	60e0      	str	r0, [r4, #12]
 8013c24:	2104      	movs	r1, #4
 8013c26:	6860      	ldr	r0, [r4, #4]
 8013c28:	f7ff ff82 	bl	8013b30 <std>
 8013c2c:	68a0      	ldr	r0, [r4, #8]
 8013c2e:	2201      	movs	r2, #1
 8013c30:	2109      	movs	r1, #9
 8013c32:	f7ff ff7d 	bl	8013b30 <std>
 8013c36:	68e0      	ldr	r0, [r4, #12]
 8013c38:	2202      	movs	r2, #2
 8013c3a:	2112      	movs	r1, #18
 8013c3c:	f7ff ff78 	bl	8013b30 <std>
 8013c40:	2301      	movs	r3, #1
 8013c42:	61a3      	str	r3, [r4, #24]
 8013c44:	e7d2      	b.n	8013bec <__sinit+0xc>
 8013c46:	bf00      	nop
 8013c48:	08015234 	.word	0x08015234
 8013c4c:	08013b79 	.word	0x08013b79

08013c50 <__sfp>:
 8013c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c52:	4607      	mov	r7, r0
 8013c54:	f7ff ffac 	bl	8013bb0 <__sfp_lock_acquire>
 8013c58:	4b1e      	ldr	r3, [pc, #120]	; (8013cd4 <__sfp+0x84>)
 8013c5a:	681e      	ldr	r6, [r3, #0]
 8013c5c:	69b3      	ldr	r3, [r6, #24]
 8013c5e:	b913      	cbnz	r3, 8013c66 <__sfp+0x16>
 8013c60:	4630      	mov	r0, r6
 8013c62:	f7ff ffbd 	bl	8013be0 <__sinit>
 8013c66:	3648      	adds	r6, #72	; 0x48
 8013c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c6c:	3b01      	subs	r3, #1
 8013c6e:	d503      	bpl.n	8013c78 <__sfp+0x28>
 8013c70:	6833      	ldr	r3, [r6, #0]
 8013c72:	b30b      	cbz	r3, 8013cb8 <__sfp+0x68>
 8013c74:	6836      	ldr	r6, [r6, #0]
 8013c76:	e7f7      	b.n	8013c68 <__sfp+0x18>
 8013c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c7c:	b9d5      	cbnz	r5, 8013cb4 <__sfp+0x64>
 8013c7e:	4b16      	ldr	r3, [pc, #88]	; (8013cd8 <__sfp+0x88>)
 8013c80:	60e3      	str	r3, [r4, #12]
 8013c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c86:	6665      	str	r5, [r4, #100]	; 0x64
 8013c88:	f000 f84c 	bl	8013d24 <__retarget_lock_init_recursive>
 8013c8c:	f7ff ff96 	bl	8013bbc <__sfp_lock_release>
 8013c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c98:	6025      	str	r5, [r4, #0]
 8013c9a:	61a5      	str	r5, [r4, #24]
 8013c9c:	2208      	movs	r2, #8
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ca4:	f7fe fa48 	bl	8012138 <memset>
 8013ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cb4:	3468      	adds	r4, #104	; 0x68
 8013cb6:	e7d9      	b.n	8013c6c <__sfp+0x1c>
 8013cb8:	2104      	movs	r1, #4
 8013cba:	4638      	mov	r0, r7
 8013cbc:	f7ff ff62 	bl	8013b84 <__sfmoreglue>
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	6030      	str	r0, [r6, #0]
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	d1d5      	bne.n	8013c74 <__sfp+0x24>
 8013cc8:	f7ff ff78 	bl	8013bbc <__sfp_lock_release>
 8013ccc:	230c      	movs	r3, #12
 8013cce:	603b      	str	r3, [r7, #0]
 8013cd0:	e7ee      	b.n	8013cb0 <__sfp+0x60>
 8013cd2:	bf00      	nop
 8013cd4:	08015234 	.word	0x08015234
 8013cd8:	ffff0001 	.word	0xffff0001

08013cdc <_fwalk_reent>:
 8013cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ce0:	4606      	mov	r6, r0
 8013ce2:	4688      	mov	r8, r1
 8013ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ce8:	2700      	movs	r7, #0
 8013cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cee:	f1b9 0901 	subs.w	r9, r9, #1
 8013cf2:	d505      	bpl.n	8013d00 <_fwalk_reent+0x24>
 8013cf4:	6824      	ldr	r4, [r4, #0]
 8013cf6:	2c00      	cmp	r4, #0
 8013cf8:	d1f7      	bne.n	8013cea <_fwalk_reent+0xe>
 8013cfa:	4638      	mov	r0, r7
 8013cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d00:	89ab      	ldrh	r3, [r5, #12]
 8013d02:	2b01      	cmp	r3, #1
 8013d04:	d907      	bls.n	8013d16 <_fwalk_reent+0x3a>
 8013d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	d003      	beq.n	8013d16 <_fwalk_reent+0x3a>
 8013d0e:	4629      	mov	r1, r5
 8013d10:	4630      	mov	r0, r6
 8013d12:	47c0      	blx	r8
 8013d14:	4307      	orrs	r7, r0
 8013d16:	3568      	adds	r5, #104	; 0x68
 8013d18:	e7e9      	b.n	8013cee <_fwalk_reent+0x12>
	...

08013d1c <_localeconv_r>:
 8013d1c:	4800      	ldr	r0, [pc, #0]	; (8013d20 <_localeconv_r+0x4>)
 8013d1e:	4770      	bx	lr
 8013d20:	200002d8 	.word	0x200002d8

08013d24 <__retarget_lock_init_recursive>:
 8013d24:	4770      	bx	lr

08013d26 <__retarget_lock_acquire_recursive>:
 8013d26:	4770      	bx	lr

08013d28 <__retarget_lock_release_recursive>:
 8013d28:	4770      	bx	lr

08013d2a <__swhatbuf_r>:
 8013d2a:	b570      	push	{r4, r5, r6, lr}
 8013d2c:	460e      	mov	r6, r1
 8013d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d32:	2900      	cmp	r1, #0
 8013d34:	b096      	sub	sp, #88	; 0x58
 8013d36:	4614      	mov	r4, r2
 8013d38:	461d      	mov	r5, r3
 8013d3a:	da08      	bge.n	8013d4e <__swhatbuf_r+0x24>
 8013d3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013d40:	2200      	movs	r2, #0
 8013d42:	602a      	str	r2, [r5, #0]
 8013d44:	061a      	lsls	r2, r3, #24
 8013d46:	d410      	bmi.n	8013d6a <__swhatbuf_r+0x40>
 8013d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d4c:	e00e      	b.n	8013d6c <__swhatbuf_r+0x42>
 8013d4e:	466a      	mov	r2, sp
 8013d50:	f000 fed2 	bl	8014af8 <_fstat_r>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	dbf1      	blt.n	8013d3c <__swhatbuf_r+0x12>
 8013d58:	9a01      	ldr	r2, [sp, #4]
 8013d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d62:	425a      	negs	r2, r3
 8013d64:	415a      	adcs	r2, r3
 8013d66:	602a      	str	r2, [r5, #0]
 8013d68:	e7ee      	b.n	8013d48 <__swhatbuf_r+0x1e>
 8013d6a:	2340      	movs	r3, #64	; 0x40
 8013d6c:	2000      	movs	r0, #0
 8013d6e:	6023      	str	r3, [r4, #0]
 8013d70:	b016      	add	sp, #88	; 0x58
 8013d72:	bd70      	pop	{r4, r5, r6, pc}

08013d74 <__smakebuf_r>:
 8013d74:	898b      	ldrh	r3, [r1, #12]
 8013d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d78:	079d      	lsls	r5, r3, #30
 8013d7a:	4606      	mov	r6, r0
 8013d7c:	460c      	mov	r4, r1
 8013d7e:	d507      	bpl.n	8013d90 <__smakebuf_r+0x1c>
 8013d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	6123      	str	r3, [r4, #16]
 8013d88:	2301      	movs	r3, #1
 8013d8a:	6163      	str	r3, [r4, #20]
 8013d8c:	b002      	add	sp, #8
 8013d8e:	bd70      	pop	{r4, r5, r6, pc}
 8013d90:	ab01      	add	r3, sp, #4
 8013d92:	466a      	mov	r2, sp
 8013d94:	f7ff ffc9 	bl	8013d2a <__swhatbuf_r>
 8013d98:	9900      	ldr	r1, [sp, #0]
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f000 fc37 	bl	8014610 <_malloc_r>
 8013da2:	b948      	cbnz	r0, 8013db8 <__smakebuf_r+0x44>
 8013da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013da8:	059a      	lsls	r2, r3, #22
 8013daa:	d4ef      	bmi.n	8013d8c <__smakebuf_r+0x18>
 8013dac:	f023 0303 	bic.w	r3, r3, #3
 8013db0:	f043 0302 	orr.w	r3, r3, #2
 8013db4:	81a3      	strh	r3, [r4, #12]
 8013db6:	e7e3      	b.n	8013d80 <__smakebuf_r+0xc>
 8013db8:	4b0d      	ldr	r3, [pc, #52]	; (8013df0 <__smakebuf_r+0x7c>)
 8013dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8013dbc:	89a3      	ldrh	r3, [r4, #12]
 8013dbe:	6020      	str	r0, [r4, #0]
 8013dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013dc4:	81a3      	strh	r3, [r4, #12]
 8013dc6:	9b00      	ldr	r3, [sp, #0]
 8013dc8:	6163      	str	r3, [r4, #20]
 8013dca:	9b01      	ldr	r3, [sp, #4]
 8013dcc:	6120      	str	r0, [r4, #16]
 8013dce:	b15b      	cbz	r3, 8013de8 <__smakebuf_r+0x74>
 8013dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dd4:	4630      	mov	r0, r6
 8013dd6:	f000 fea1 	bl	8014b1c <_isatty_r>
 8013dda:	b128      	cbz	r0, 8013de8 <__smakebuf_r+0x74>
 8013ddc:	89a3      	ldrh	r3, [r4, #12]
 8013dde:	f023 0303 	bic.w	r3, r3, #3
 8013de2:	f043 0301 	orr.w	r3, r3, #1
 8013de6:	81a3      	strh	r3, [r4, #12]
 8013de8:	89a0      	ldrh	r0, [r4, #12]
 8013dea:	4305      	orrs	r5, r0
 8013dec:	81a5      	strh	r5, [r4, #12]
 8013dee:	e7cd      	b.n	8013d8c <__smakebuf_r+0x18>
 8013df0:	08013b79 	.word	0x08013b79

08013df4 <malloc>:
 8013df4:	4b02      	ldr	r3, [pc, #8]	; (8013e00 <malloc+0xc>)
 8013df6:	4601      	mov	r1, r0
 8013df8:	6818      	ldr	r0, [r3, #0]
 8013dfa:	f000 bc09 	b.w	8014610 <_malloc_r>
 8013dfe:	bf00      	nop
 8013e00:	20000184 	.word	0x20000184

08013e04 <_Balloc>:
 8013e04:	b570      	push	{r4, r5, r6, lr}
 8013e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013e08:	4604      	mov	r4, r0
 8013e0a:	460d      	mov	r5, r1
 8013e0c:	b976      	cbnz	r6, 8013e2c <_Balloc+0x28>
 8013e0e:	2010      	movs	r0, #16
 8013e10:	f7ff fff0 	bl	8013df4 <malloc>
 8013e14:	4602      	mov	r2, r0
 8013e16:	6260      	str	r0, [r4, #36]	; 0x24
 8013e18:	b920      	cbnz	r0, 8013e24 <_Balloc+0x20>
 8013e1a:	4b18      	ldr	r3, [pc, #96]	; (8013e7c <_Balloc+0x78>)
 8013e1c:	4818      	ldr	r0, [pc, #96]	; (8013e80 <_Balloc+0x7c>)
 8013e1e:	2166      	movs	r1, #102	; 0x66
 8013e20:	f000 fe2a 	bl	8014a78 <__assert_func>
 8013e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e28:	6006      	str	r6, [r0, #0]
 8013e2a:	60c6      	str	r6, [r0, #12]
 8013e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013e2e:	68f3      	ldr	r3, [r6, #12]
 8013e30:	b183      	cbz	r3, 8013e54 <_Balloc+0x50>
 8013e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e34:	68db      	ldr	r3, [r3, #12]
 8013e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013e3a:	b9b8      	cbnz	r0, 8013e6c <_Balloc+0x68>
 8013e3c:	2101      	movs	r1, #1
 8013e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8013e42:	1d72      	adds	r2, r6, #5
 8013e44:	0092      	lsls	r2, r2, #2
 8013e46:	4620      	mov	r0, r4
 8013e48:	f000 fb60 	bl	801450c <_calloc_r>
 8013e4c:	b160      	cbz	r0, 8013e68 <_Balloc+0x64>
 8013e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013e52:	e00e      	b.n	8013e72 <_Balloc+0x6e>
 8013e54:	2221      	movs	r2, #33	; 0x21
 8013e56:	2104      	movs	r1, #4
 8013e58:	4620      	mov	r0, r4
 8013e5a:	f000 fb57 	bl	801450c <_calloc_r>
 8013e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e60:	60f0      	str	r0, [r6, #12]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1e4      	bne.n	8013e32 <_Balloc+0x2e>
 8013e68:	2000      	movs	r0, #0
 8013e6a:	bd70      	pop	{r4, r5, r6, pc}
 8013e6c:	6802      	ldr	r2, [r0, #0]
 8013e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e72:	2300      	movs	r3, #0
 8013e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e78:	e7f7      	b.n	8013e6a <_Balloc+0x66>
 8013e7a:	bf00      	nop
 8013e7c:	08015279 	.word	0x08015279
 8013e80:	0801535c 	.word	0x0801535c

08013e84 <_Bfree>:
 8013e84:	b570      	push	{r4, r5, r6, lr}
 8013e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013e88:	4605      	mov	r5, r0
 8013e8a:	460c      	mov	r4, r1
 8013e8c:	b976      	cbnz	r6, 8013eac <_Bfree+0x28>
 8013e8e:	2010      	movs	r0, #16
 8013e90:	f7ff ffb0 	bl	8013df4 <malloc>
 8013e94:	4602      	mov	r2, r0
 8013e96:	6268      	str	r0, [r5, #36]	; 0x24
 8013e98:	b920      	cbnz	r0, 8013ea4 <_Bfree+0x20>
 8013e9a:	4b09      	ldr	r3, [pc, #36]	; (8013ec0 <_Bfree+0x3c>)
 8013e9c:	4809      	ldr	r0, [pc, #36]	; (8013ec4 <_Bfree+0x40>)
 8013e9e:	218a      	movs	r1, #138	; 0x8a
 8013ea0:	f000 fdea 	bl	8014a78 <__assert_func>
 8013ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ea8:	6006      	str	r6, [r0, #0]
 8013eaa:	60c6      	str	r6, [r0, #12]
 8013eac:	b13c      	cbz	r4, 8013ebe <_Bfree+0x3a>
 8013eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013eb0:	6862      	ldr	r2, [r4, #4]
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013eb8:	6021      	str	r1, [r4, #0]
 8013eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013ebe:	bd70      	pop	{r4, r5, r6, pc}
 8013ec0:	08015279 	.word	0x08015279
 8013ec4:	0801535c 	.word	0x0801535c

08013ec8 <__multadd>:
 8013ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ecc:	690d      	ldr	r5, [r1, #16]
 8013ece:	4607      	mov	r7, r0
 8013ed0:	460c      	mov	r4, r1
 8013ed2:	461e      	mov	r6, r3
 8013ed4:	f101 0c14 	add.w	ip, r1, #20
 8013ed8:	2000      	movs	r0, #0
 8013eda:	f8dc 3000 	ldr.w	r3, [ip]
 8013ede:	b299      	uxth	r1, r3
 8013ee0:	fb02 6101 	mla	r1, r2, r1, r6
 8013ee4:	0c1e      	lsrs	r6, r3, #16
 8013ee6:	0c0b      	lsrs	r3, r1, #16
 8013ee8:	fb02 3306 	mla	r3, r2, r6, r3
 8013eec:	b289      	uxth	r1, r1
 8013eee:	3001      	adds	r0, #1
 8013ef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ef4:	4285      	cmp	r5, r0
 8013ef6:	f84c 1b04 	str.w	r1, [ip], #4
 8013efa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013efe:	dcec      	bgt.n	8013eda <__multadd+0x12>
 8013f00:	b30e      	cbz	r6, 8013f46 <__multadd+0x7e>
 8013f02:	68a3      	ldr	r3, [r4, #8]
 8013f04:	42ab      	cmp	r3, r5
 8013f06:	dc19      	bgt.n	8013f3c <__multadd+0x74>
 8013f08:	6861      	ldr	r1, [r4, #4]
 8013f0a:	4638      	mov	r0, r7
 8013f0c:	3101      	adds	r1, #1
 8013f0e:	f7ff ff79 	bl	8013e04 <_Balloc>
 8013f12:	4680      	mov	r8, r0
 8013f14:	b928      	cbnz	r0, 8013f22 <__multadd+0x5a>
 8013f16:	4602      	mov	r2, r0
 8013f18:	4b0c      	ldr	r3, [pc, #48]	; (8013f4c <__multadd+0x84>)
 8013f1a:	480d      	ldr	r0, [pc, #52]	; (8013f50 <__multadd+0x88>)
 8013f1c:	21b5      	movs	r1, #181	; 0xb5
 8013f1e:	f000 fdab 	bl	8014a78 <__assert_func>
 8013f22:	6922      	ldr	r2, [r4, #16]
 8013f24:	3202      	adds	r2, #2
 8013f26:	f104 010c 	add.w	r1, r4, #12
 8013f2a:	0092      	lsls	r2, r2, #2
 8013f2c:	300c      	adds	r0, #12
 8013f2e:	f7fe f8f5 	bl	801211c <memcpy>
 8013f32:	4621      	mov	r1, r4
 8013f34:	4638      	mov	r0, r7
 8013f36:	f7ff ffa5 	bl	8013e84 <_Bfree>
 8013f3a:	4644      	mov	r4, r8
 8013f3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f40:	3501      	adds	r5, #1
 8013f42:	615e      	str	r6, [r3, #20]
 8013f44:	6125      	str	r5, [r4, #16]
 8013f46:	4620      	mov	r0, r4
 8013f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f4c:	080152eb 	.word	0x080152eb
 8013f50:	0801535c 	.word	0x0801535c

08013f54 <__hi0bits>:
 8013f54:	0c03      	lsrs	r3, r0, #16
 8013f56:	041b      	lsls	r3, r3, #16
 8013f58:	b9d3      	cbnz	r3, 8013f90 <__hi0bits+0x3c>
 8013f5a:	0400      	lsls	r0, r0, #16
 8013f5c:	2310      	movs	r3, #16
 8013f5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013f62:	bf04      	itt	eq
 8013f64:	0200      	lsleq	r0, r0, #8
 8013f66:	3308      	addeq	r3, #8
 8013f68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013f6c:	bf04      	itt	eq
 8013f6e:	0100      	lsleq	r0, r0, #4
 8013f70:	3304      	addeq	r3, #4
 8013f72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013f76:	bf04      	itt	eq
 8013f78:	0080      	lsleq	r0, r0, #2
 8013f7a:	3302      	addeq	r3, #2
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	db05      	blt.n	8013f8c <__hi0bits+0x38>
 8013f80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f84:	f103 0301 	add.w	r3, r3, #1
 8013f88:	bf08      	it	eq
 8013f8a:	2320      	moveq	r3, #32
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	4770      	bx	lr
 8013f90:	2300      	movs	r3, #0
 8013f92:	e7e4      	b.n	8013f5e <__hi0bits+0xa>

08013f94 <__lo0bits>:
 8013f94:	6803      	ldr	r3, [r0, #0]
 8013f96:	f013 0207 	ands.w	r2, r3, #7
 8013f9a:	4601      	mov	r1, r0
 8013f9c:	d00b      	beq.n	8013fb6 <__lo0bits+0x22>
 8013f9e:	07da      	lsls	r2, r3, #31
 8013fa0:	d423      	bmi.n	8013fea <__lo0bits+0x56>
 8013fa2:	0798      	lsls	r0, r3, #30
 8013fa4:	bf49      	itett	mi
 8013fa6:	085b      	lsrmi	r3, r3, #1
 8013fa8:	089b      	lsrpl	r3, r3, #2
 8013faa:	2001      	movmi	r0, #1
 8013fac:	600b      	strmi	r3, [r1, #0]
 8013fae:	bf5c      	itt	pl
 8013fb0:	600b      	strpl	r3, [r1, #0]
 8013fb2:	2002      	movpl	r0, #2
 8013fb4:	4770      	bx	lr
 8013fb6:	b298      	uxth	r0, r3
 8013fb8:	b9a8      	cbnz	r0, 8013fe6 <__lo0bits+0x52>
 8013fba:	0c1b      	lsrs	r3, r3, #16
 8013fbc:	2010      	movs	r0, #16
 8013fbe:	b2da      	uxtb	r2, r3
 8013fc0:	b90a      	cbnz	r2, 8013fc6 <__lo0bits+0x32>
 8013fc2:	3008      	adds	r0, #8
 8013fc4:	0a1b      	lsrs	r3, r3, #8
 8013fc6:	071a      	lsls	r2, r3, #28
 8013fc8:	bf04      	itt	eq
 8013fca:	091b      	lsreq	r3, r3, #4
 8013fcc:	3004      	addeq	r0, #4
 8013fce:	079a      	lsls	r2, r3, #30
 8013fd0:	bf04      	itt	eq
 8013fd2:	089b      	lsreq	r3, r3, #2
 8013fd4:	3002      	addeq	r0, #2
 8013fd6:	07da      	lsls	r2, r3, #31
 8013fd8:	d403      	bmi.n	8013fe2 <__lo0bits+0x4e>
 8013fda:	085b      	lsrs	r3, r3, #1
 8013fdc:	f100 0001 	add.w	r0, r0, #1
 8013fe0:	d005      	beq.n	8013fee <__lo0bits+0x5a>
 8013fe2:	600b      	str	r3, [r1, #0]
 8013fe4:	4770      	bx	lr
 8013fe6:	4610      	mov	r0, r2
 8013fe8:	e7e9      	b.n	8013fbe <__lo0bits+0x2a>
 8013fea:	2000      	movs	r0, #0
 8013fec:	4770      	bx	lr
 8013fee:	2020      	movs	r0, #32
 8013ff0:	4770      	bx	lr
	...

08013ff4 <__i2b>:
 8013ff4:	b510      	push	{r4, lr}
 8013ff6:	460c      	mov	r4, r1
 8013ff8:	2101      	movs	r1, #1
 8013ffa:	f7ff ff03 	bl	8013e04 <_Balloc>
 8013ffe:	4602      	mov	r2, r0
 8014000:	b928      	cbnz	r0, 801400e <__i2b+0x1a>
 8014002:	4b05      	ldr	r3, [pc, #20]	; (8014018 <__i2b+0x24>)
 8014004:	4805      	ldr	r0, [pc, #20]	; (801401c <__i2b+0x28>)
 8014006:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801400a:	f000 fd35 	bl	8014a78 <__assert_func>
 801400e:	2301      	movs	r3, #1
 8014010:	6144      	str	r4, [r0, #20]
 8014012:	6103      	str	r3, [r0, #16]
 8014014:	bd10      	pop	{r4, pc}
 8014016:	bf00      	nop
 8014018:	080152eb 	.word	0x080152eb
 801401c:	0801535c 	.word	0x0801535c

08014020 <__multiply>:
 8014020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014024:	4691      	mov	r9, r2
 8014026:	690a      	ldr	r2, [r1, #16]
 8014028:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801402c:	429a      	cmp	r2, r3
 801402e:	bfb8      	it	lt
 8014030:	460b      	movlt	r3, r1
 8014032:	460c      	mov	r4, r1
 8014034:	bfbc      	itt	lt
 8014036:	464c      	movlt	r4, r9
 8014038:	4699      	movlt	r9, r3
 801403a:	6927      	ldr	r7, [r4, #16]
 801403c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014040:	68a3      	ldr	r3, [r4, #8]
 8014042:	6861      	ldr	r1, [r4, #4]
 8014044:	eb07 060a 	add.w	r6, r7, sl
 8014048:	42b3      	cmp	r3, r6
 801404a:	b085      	sub	sp, #20
 801404c:	bfb8      	it	lt
 801404e:	3101      	addlt	r1, #1
 8014050:	f7ff fed8 	bl	8013e04 <_Balloc>
 8014054:	b930      	cbnz	r0, 8014064 <__multiply+0x44>
 8014056:	4602      	mov	r2, r0
 8014058:	4b44      	ldr	r3, [pc, #272]	; (801416c <__multiply+0x14c>)
 801405a:	4845      	ldr	r0, [pc, #276]	; (8014170 <__multiply+0x150>)
 801405c:	f240 115d 	movw	r1, #349	; 0x15d
 8014060:	f000 fd0a 	bl	8014a78 <__assert_func>
 8014064:	f100 0514 	add.w	r5, r0, #20
 8014068:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801406c:	462b      	mov	r3, r5
 801406e:	2200      	movs	r2, #0
 8014070:	4543      	cmp	r3, r8
 8014072:	d321      	bcc.n	80140b8 <__multiply+0x98>
 8014074:	f104 0314 	add.w	r3, r4, #20
 8014078:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801407c:	f109 0314 	add.w	r3, r9, #20
 8014080:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014084:	9202      	str	r2, [sp, #8]
 8014086:	1b3a      	subs	r2, r7, r4
 8014088:	3a15      	subs	r2, #21
 801408a:	f022 0203 	bic.w	r2, r2, #3
 801408e:	3204      	adds	r2, #4
 8014090:	f104 0115 	add.w	r1, r4, #21
 8014094:	428f      	cmp	r7, r1
 8014096:	bf38      	it	cc
 8014098:	2204      	movcc	r2, #4
 801409a:	9201      	str	r2, [sp, #4]
 801409c:	9a02      	ldr	r2, [sp, #8]
 801409e:	9303      	str	r3, [sp, #12]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d80c      	bhi.n	80140be <__multiply+0x9e>
 80140a4:	2e00      	cmp	r6, #0
 80140a6:	dd03      	ble.n	80140b0 <__multiply+0x90>
 80140a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d05a      	beq.n	8014166 <__multiply+0x146>
 80140b0:	6106      	str	r6, [r0, #16]
 80140b2:	b005      	add	sp, #20
 80140b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b8:	f843 2b04 	str.w	r2, [r3], #4
 80140bc:	e7d8      	b.n	8014070 <__multiply+0x50>
 80140be:	f8b3 a000 	ldrh.w	sl, [r3]
 80140c2:	f1ba 0f00 	cmp.w	sl, #0
 80140c6:	d024      	beq.n	8014112 <__multiply+0xf2>
 80140c8:	f104 0e14 	add.w	lr, r4, #20
 80140cc:	46a9      	mov	r9, r5
 80140ce:	f04f 0c00 	mov.w	ip, #0
 80140d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80140d6:	f8d9 1000 	ldr.w	r1, [r9]
 80140da:	fa1f fb82 	uxth.w	fp, r2
 80140de:	b289      	uxth	r1, r1
 80140e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80140e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80140e8:	f8d9 2000 	ldr.w	r2, [r9]
 80140ec:	4461      	add	r1, ip
 80140ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80140f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80140f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80140fa:	b289      	uxth	r1, r1
 80140fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014100:	4577      	cmp	r7, lr
 8014102:	f849 1b04 	str.w	r1, [r9], #4
 8014106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801410a:	d8e2      	bhi.n	80140d2 <__multiply+0xb2>
 801410c:	9a01      	ldr	r2, [sp, #4]
 801410e:	f845 c002 	str.w	ip, [r5, r2]
 8014112:	9a03      	ldr	r2, [sp, #12]
 8014114:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014118:	3304      	adds	r3, #4
 801411a:	f1b9 0f00 	cmp.w	r9, #0
 801411e:	d020      	beq.n	8014162 <__multiply+0x142>
 8014120:	6829      	ldr	r1, [r5, #0]
 8014122:	f104 0c14 	add.w	ip, r4, #20
 8014126:	46ae      	mov	lr, r5
 8014128:	f04f 0a00 	mov.w	sl, #0
 801412c:	f8bc b000 	ldrh.w	fp, [ip]
 8014130:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014134:	fb09 220b 	mla	r2, r9, fp, r2
 8014138:	4492      	add	sl, r2
 801413a:	b289      	uxth	r1, r1
 801413c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014140:	f84e 1b04 	str.w	r1, [lr], #4
 8014144:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014148:	f8be 1000 	ldrh.w	r1, [lr]
 801414c:	0c12      	lsrs	r2, r2, #16
 801414e:	fb09 1102 	mla	r1, r9, r2, r1
 8014152:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014156:	4567      	cmp	r7, ip
 8014158:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801415c:	d8e6      	bhi.n	801412c <__multiply+0x10c>
 801415e:	9a01      	ldr	r2, [sp, #4]
 8014160:	50a9      	str	r1, [r5, r2]
 8014162:	3504      	adds	r5, #4
 8014164:	e79a      	b.n	801409c <__multiply+0x7c>
 8014166:	3e01      	subs	r6, #1
 8014168:	e79c      	b.n	80140a4 <__multiply+0x84>
 801416a:	bf00      	nop
 801416c:	080152eb 	.word	0x080152eb
 8014170:	0801535c 	.word	0x0801535c

08014174 <__pow5mult>:
 8014174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014178:	4615      	mov	r5, r2
 801417a:	f012 0203 	ands.w	r2, r2, #3
 801417e:	4606      	mov	r6, r0
 8014180:	460f      	mov	r7, r1
 8014182:	d007      	beq.n	8014194 <__pow5mult+0x20>
 8014184:	4c25      	ldr	r4, [pc, #148]	; (801421c <__pow5mult+0xa8>)
 8014186:	3a01      	subs	r2, #1
 8014188:	2300      	movs	r3, #0
 801418a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801418e:	f7ff fe9b 	bl	8013ec8 <__multadd>
 8014192:	4607      	mov	r7, r0
 8014194:	10ad      	asrs	r5, r5, #2
 8014196:	d03d      	beq.n	8014214 <__pow5mult+0xa0>
 8014198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801419a:	b97c      	cbnz	r4, 80141bc <__pow5mult+0x48>
 801419c:	2010      	movs	r0, #16
 801419e:	f7ff fe29 	bl	8013df4 <malloc>
 80141a2:	4602      	mov	r2, r0
 80141a4:	6270      	str	r0, [r6, #36]	; 0x24
 80141a6:	b928      	cbnz	r0, 80141b4 <__pow5mult+0x40>
 80141a8:	4b1d      	ldr	r3, [pc, #116]	; (8014220 <__pow5mult+0xac>)
 80141aa:	481e      	ldr	r0, [pc, #120]	; (8014224 <__pow5mult+0xb0>)
 80141ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80141b0:	f000 fc62 	bl	8014a78 <__assert_func>
 80141b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80141b8:	6004      	str	r4, [r0, #0]
 80141ba:	60c4      	str	r4, [r0, #12]
 80141bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80141c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80141c4:	b94c      	cbnz	r4, 80141da <__pow5mult+0x66>
 80141c6:	f240 2171 	movw	r1, #625	; 0x271
 80141ca:	4630      	mov	r0, r6
 80141cc:	f7ff ff12 	bl	8013ff4 <__i2b>
 80141d0:	2300      	movs	r3, #0
 80141d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80141d6:	4604      	mov	r4, r0
 80141d8:	6003      	str	r3, [r0, #0]
 80141da:	f04f 0900 	mov.w	r9, #0
 80141de:	07eb      	lsls	r3, r5, #31
 80141e0:	d50a      	bpl.n	80141f8 <__pow5mult+0x84>
 80141e2:	4639      	mov	r1, r7
 80141e4:	4622      	mov	r2, r4
 80141e6:	4630      	mov	r0, r6
 80141e8:	f7ff ff1a 	bl	8014020 <__multiply>
 80141ec:	4639      	mov	r1, r7
 80141ee:	4680      	mov	r8, r0
 80141f0:	4630      	mov	r0, r6
 80141f2:	f7ff fe47 	bl	8013e84 <_Bfree>
 80141f6:	4647      	mov	r7, r8
 80141f8:	106d      	asrs	r5, r5, #1
 80141fa:	d00b      	beq.n	8014214 <__pow5mult+0xa0>
 80141fc:	6820      	ldr	r0, [r4, #0]
 80141fe:	b938      	cbnz	r0, 8014210 <__pow5mult+0x9c>
 8014200:	4622      	mov	r2, r4
 8014202:	4621      	mov	r1, r4
 8014204:	4630      	mov	r0, r6
 8014206:	f7ff ff0b 	bl	8014020 <__multiply>
 801420a:	6020      	str	r0, [r4, #0]
 801420c:	f8c0 9000 	str.w	r9, [r0]
 8014210:	4604      	mov	r4, r0
 8014212:	e7e4      	b.n	80141de <__pow5mult+0x6a>
 8014214:	4638      	mov	r0, r7
 8014216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801421a:	bf00      	nop
 801421c:	080154a8 	.word	0x080154a8
 8014220:	08015279 	.word	0x08015279
 8014224:	0801535c 	.word	0x0801535c

08014228 <__lshift>:
 8014228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801422c:	460c      	mov	r4, r1
 801422e:	6849      	ldr	r1, [r1, #4]
 8014230:	6923      	ldr	r3, [r4, #16]
 8014232:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014236:	68a3      	ldr	r3, [r4, #8]
 8014238:	4607      	mov	r7, r0
 801423a:	4691      	mov	r9, r2
 801423c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014240:	f108 0601 	add.w	r6, r8, #1
 8014244:	42b3      	cmp	r3, r6
 8014246:	db0b      	blt.n	8014260 <__lshift+0x38>
 8014248:	4638      	mov	r0, r7
 801424a:	f7ff fddb 	bl	8013e04 <_Balloc>
 801424e:	4605      	mov	r5, r0
 8014250:	b948      	cbnz	r0, 8014266 <__lshift+0x3e>
 8014252:	4602      	mov	r2, r0
 8014254:	4b2a      	ldr	r3, [pc, #168]	; (8014300 <__lshift+0xd8>)
 8014256:	482b      	ldr	r0, [pc, #172]	; (8014304 <__lshift+0xdc>)
 8014258:	f240 11d9 	movw	r1, #473	; 0x1d9
 801425c:	f000 fc0c 	bl	8014a78 <__assert_func>
 8014260:	3101      	adds	r1, #1
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	e7ee      	b.n	8014244 <__lshift+0x1c>
 8014266:	2300      	movs	r3, #0
 8014268:	f100 0114 	add.w	r1, r0, #20
 801426c:	f100 0210 	add.w	r2, r0, #16
 8014270:	4618      	mov	r0, r3
 8014272:	4553      	cmp	r3, sl
 8014274:	db37      	blt.n	80142e6 <__lshift+0xbe>
 8014276:	6920      	ldr	r0, [r4, #16]
 8014278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801427c:	f104 0314 	add.w	r3, r4, #20
 8014280:	f019 091f 	ands.w	r9, r9, #31
 8014284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014288:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801428c:	d02f      	beq.n	80142ee <__lshift+0xc6>
 801428e:	f1c9 0e20 	rsb	lr, r9, #32
 8014292:	468a      	mov	sl, r1
 8014294:	f04f 0c00 	mov.w	ip, #0
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	fa02 f209 	lsl.w	r2, r2, r9
 801429e:	ea42 020c 	orr.w	r2, r2, ip
 80142a2:	f84a 2b04 	str.w	r2, [sl], #4
 80142a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80142aa:	4298      	cmp	r0, r3
 80142ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80142b0:	d8f2      	bhi.n	8014298 <__lshift+0x70>
 80142b2:	1b03      	subs	r3, r0, r4
 80142b4:	3b15      	subs	r3, #21
 80142b6:	f023 0303 	bic.w	r3, r3, #3
 80142ba:	3304      	adds	r3, #4
 80142bc:	f104 0215 	add.w	r2, r4, #21
 80142c0:	4290      	cmp	r0, r2
 80142c2:	bf38      	it	cc
 80142c4:	2304      	movcc	r3, #4
 80142c6:	f841 c003 	str.w	ip, [r1, r3]
 80142ca:	f1bc 0f00 	cmp.w	ip, #0
 80142ce:	d001      	beq.n	80142d4 <__lshift+0xac>
 80142d0:	f108 0602 	add.w	r6, r8, #2
 80142d4:	3e01      	subs	r6, #1
 80142d6:	4638      	mov	r0, r7
 80142d8:	612e      	str	r6, [r5, #16]
 80142da:	4621      	mov	r1, r4
 80142dc:	f7ff fdd2 	bl	8013e84 <_Bfree>
 80142e0:	4628      	mov	r0, r5
 80142e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80142ea:	3301      	adds	r3, #1
 80142ec:	e7c1      	b.n	8014272 <__lshift+0x4a>
 80142ee:	3904      	subs	r1, #4
 80142f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80142f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80142f8:	4298      	cmp	r0, r3
 80142fa:	d8f9      	bhi.n	80142f0 <__lshift+0xc8>
 80142fc:	e7ea      	b.n	80142d4 <__lshift+0xac>
 80142fe:	bf00      	nop
 8014300:	080152eb 	.word	0x080152eb
 8014304:	0801535c 	.word	0x0801535c

08014308 <__mcmp>:
 8014308:	b530      	push	{r4, r5, lr}
 801430a:	6902      	ldr	r2, [r0, #16]
 801430c:	690c      	ldr	r4, [r1, #16]
 801430e:	1b12      	subs	r2, r2, r4
 8014310:	d10e      	bne.n	8014330 <__mcmp+0x28>
 8014312:	f100 0314 	add.w	r3, r0, #20
 8014316:	3114      	adds	r1, #20
 8014318:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801431c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014320:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014324:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014328:	42a5      	cmp	r5, r4
 801432a:	d003      	beq.n	8014334 <__mcmp+0x2c>
 801432c:	d305      	bcc.n	801433a <__mcmp+0x32>
 801432e:	2201      	movs	r2, #1
 8014330:	4610      	mov	r0, r2
 8014332:	bd30      	pop	{r4, r5, pc}
 8014334:	4283      	cmp	r3, r0
 8014336:	d3f3      	bcc.n	8014320 <__mcmp+0x18>
 8014338:	e7fa      	b.n	8014330 <__mcmp+0x28>
 801433a:	f04f 32ff 	mov.w	r2, #4294967295
 801433e:	e7f7      	b.n	8014330 <__mcmp+0x28>

08014340 <__mdiff>:
 8014340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	460c      	mov	r4, r1
 8014346:	4606      	mov	r6, r0
 8014348:	4611      	mov	r1, r2
 801434a:	4620      	mov	r0, r4
 801434c:	4690      	mov	r8, r2
 801434e:	f7ff ffdb 	bl	8014308 <__mcmp>
 8014352:	1e05      	subs	r5, r0, #0
 8014354:	d110      	bne.n	8014378 <__mdiff+0x38>
 8014356:	4629      	mov	r1, r5
 8014358:	4630      	mov	r0, r6
 801435a:	f7ff fd53 	bl	8013e04 <_Balloc>
 801435e:	b930      	cbnz	r0, 801436e <__mdiff+0x2e>
 8014360:	4b3a      	ldr	r3, [pc, #232]	; (801444c <__mdiff+0x10c>)
 8014362:	4602      	mov	r2, r0
 8014364:	f240 2132 	movw	r1, #562	; 0x232
 8014368:	4839      	ldr	r0, [pc, #228]	; (8014450 <__mdiff+0x110>)
 801436a:	f000 fb85 	bl	8014a78 <__assert_func>
 801436e:	2301      	movs	r3, #1
 8014370:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014378:	bfa4      	itt	ge
 801437a:	4643      	movge	r3, r8
 801437c:	46a0      	movge	r8, r4
 801437e:	4630      	mov	r0, r6
 8014380:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014384:	bfa6      	itte	ge
 8014386:	461c      	movge	r4, r3
 8014388:	2500      	movge	r5, #0
 801438a:	2501      	movlt	r5, #1
 801438c:	f7ff fd3a 	bl	8013e04 <_Balloc>
 8014390:	b920      	cbnz	r0, 801439c <__mdiff+0x5c>
 8014392:	4b2e      	ldr	r3, [pc, #184]	; (801444c <__mdiff+0x10c>)
 8014394:	4602      	mov	r2, r0
 8014396:	f44f 7110 	mov.w	r1, #576	; 0x240
 801439a:	e7e5      	b.n	8014368 <__mdiff+0x28>
 801439c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80143a0:	6926      	ldr	r6, [r4, #16]
 80143a2:	60c5      	str	r5, [r0, #12]
 80143a4:	f104 0914 	add.w	r9, r4, #20
 80143a8:	f108 0514 	add.w	r5, r8, #20
 80143ac:	f100 0e14 	add.w	lr, r0, #20
 80143b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80143b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80143b8:	f108 0210 	add.w	r2, r8, #16
 80143bc:	46f2      	mov	sl, lr
 80143be:	2100      	movs	r1, #0
 80143c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80143c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80143c8:	fa1f f883 	uxth.w	r8, r3
 80143cc:	fa11 f18b 	uxtah	r1, r1, fp
 80143d0:	0c1b      	lsrs	r3, r3, #16
 80143d2:	eba1 0808 	sub.w	r8, r1, r8
 80143d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80143da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80143de:	fa1f f888 	uxth.w	r8, r8
 80143e2:	1419      	asrs	r1, r3, #16
 80143e4:	454e      	cmp	r6, r9
 80143e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80143ea:	f84a 3b04 	str.w	r3, [sl], #4
 80143ee:	d8e7      	bhi.n	80143c0 <__mdiff+0x80>
 80143f0:	1b33      	subs	r3, r6, r4
 80143f2:	3b15      	subs	r3, #21
 80143f4:	f023 0303 	bic.w	r3, r3, #3
 80143f8:	3304      	adds	r3, #4
 80143fa:	3415      	adds	r4, #21
 80143fc:	42a6      	cmp	r6, r4
 80143fe:	bf38      	it	cc
 8014400:	2304      	movcc	r3, #4
 8014402:	441d      	add	r5, r3
 8014404:	4473      	add	r3, lr
 8014406:	469e      	mov	lr, r3
 8014408:	462e      	mov	r6, r5
 801440a:	4566      	cmp	r6, ip
 801440c:	d30e      	bcc.n	801442c <__mdiff+0xec>
 801440e:	f10c 0203 	add.w	r2, ip, #3
 8014412:	1b52      	subs	r2, r2, r5
 8014414:	f022 0203 	bic.w	r2, r2, #3
 8014418:	3d03      	subs	r5, #3
 801441a:	45ac      	cmp	ip, r5
 801441c:	bf38      	it	cc
 801441e:	2200      	movcc	r2, #0
 8014420:	441a      	add	r2, r3
 8014422:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014426:	b17b      	cbz	r3, 8014448 <__mdiff+0x108>
 8014428:	6107      	str	r7, [r0, #16]
 801442a:	e7a3      	b.n	8014374 <__mdiff+0x34>
 801442c:	f856 8b04 	ldr.w	r8, [r6], #4
 8014430:	fa11 f288 	uxtah	r2, r1, r8
 8014434:	1414      	asrs	r4, r2, #16
 8014436:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801443a:	b292      	uxth	r2, r2
 801443c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014440:	f84e 2b04 	str.w	r2, [lr], #4
 8014444:	1421      	asrs	r1, r4, #16
 8014446:	e7e0      	b.n	801440a <__mdiff+0xca>
 8014448:	3f01      	subs	r7, #1
 801444a:	e7ea      	b.n	8014422 <__mdiff+0xe2>
 801444c:	080152eb 	.word	0x080152eb
 8014450:	0801535c 	.word	0x0801535c

08014454 <__d2b>:
 8014454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014458:	4689      	mov	r9, r1
 801445a:	2101      	movs	r1, #1
 801445c:	ec57 6b10 	vmov	r6, r7, d0
 8014460:	4690      	mov	r8, r2
 8014462:	f7ff fccf 	bl	8013e04 <_Balloc>
 8014466:	4604      	mov	r4, r0
 8014468:	b930      	cbnz	r0, 8014478 <__d2b+0x24>
 801446a:	4602      	mov	r2, r0
 801446c:	4b25      	ldr	r3, [pc, #148]	; (8014504 <__d2b+0xb0>)
 801446e:	4826      	ldr	r0, [pc, #152]	; (8014508 <__d2b+0xb4>)
 8014470:	f240 310a 	movw	r1, #778	; 0x30a
 8014474:	f000 fb00 	bl	8014a78 <__assert_func>
 8014478:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801447c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014480:	bb35      	cbnz	r5, 80144d0 <__d2b+0x7c>
 8014482:	2e00      	cmp	r6, #0
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	d028      	beq.n	80144da <__d2b+0x86>
 8014488:	4668      	mov	r0, sp
 801448a:	9600      	str	r6, [sp, #0]
 801448c:	f7ff fd82 	bl	8013f94 <__lo0bits>
 8014490:	9900      	ldr	r1, [sp, #0]
 8014492:	b300      	cbz	r0, 80144d6 <__d2b+0x82>
 8014494:	9a01      	ldr	r2, [sp, #4]
 8014496:	f1c0 0320 	rsb	r3, r0, #32
 801449a:	fa02 f303 	lsl.w	r3, r2, r3
 801449e:	430b      	orrs	r3, r1
 80144a0:	40c2      	lsrs	r2, r0
 80144a2:	6163      	str	r3, [r4, #20]
 80144a4:	9201      	str	r2, [sp, #4]
 80144a6:	9b01      	ldr	r3, [sp, #4]
 80144a8:	61a3      	str	r3, [r4, #24]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	bf14      	ite	ne
 80144ae:	2202      	movne	r2, #2
 80144b0:	2201      	moveq	r2, #1
 80144b2:	6122      	str	r2, [r4, #16]
 80144b4:	b1d5      	cbz	r5, 80144ec <__d2b+0x98>
 80144b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80144ba:	4405      	add	r5, r0
 80144bc:	f8c9 5000 	str.w	r5, [r9]
 80144c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80144c4:	f8c8 0000 	str.w	r0, [r8]
 80144c8:	4620      	mov	r0, r4
 80144ca:	b003      	add	sp, #12
 80144cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80144d4:	e7d5      	b.n	8014482 <__d2b+0x2e>
 80144d6:	6161      	str	r1, [r4, #20]
 80144d8:	e7e5      	b.n	80144a6 <__d2b+0x52>
 80144da:	a801      	add	r0, sp, #4
 80144dc:	f7ff fd5a 	bl	8013f94 <__lo0bits>
 80144e0:	9b01      	ldr	r3, [sp, #4]
 80144e2:	6163      	str	r3, [r4, #20]
 80144e4:	2201      	movs	r2, #1
 80144e6:	6122      	str	r2, [r4, #16]
 80144e8:	3020      	adds	r0, #32
 80144ea:	e7e3      	b.n	80144b4 <__d2b+0x60>
 80144ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80144f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80144f4:	f8c9 0000 	str.w	r0, [r9]
 80144f8:	6918      	ldr	r0, [r3, #16]
 80144fa:	f7ff fd2b 	bl	8013f54 <__hi0bits>
 80144fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014502:	e7df      	b.n	80144c4 <__d2b+0x70>
 8014504:	080152eb 	.word	0x080152eb
 8014508:	0801535c 	.word	0x0801535c

0801450c <_calloc_r>:
 801450c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801450e:	fba1 2402 	umull	r2, r4, r1, r2
 8014512:	b94c      	cbnz	r4, 8014528 <_calloc_r+0x1c>
 8014514:	4611      	mov	r1, r2
 8014516:	9201      	str	r2, [sp, #4]
 8014518:	f000 f87a 	bl	8014610 <_malloc_r>
 801451c:	9a01      	ldr	r2, [sp, #4]
 801451e:	4605      	mov	r5, r0
 8014520:	b930      	cbnz	r0, 8014530 <_calloc_r+0x24>
 8014522:	4628      	mov	r0, r5
 8014524:	b003      	add	sp, #12
 8014526:	bd30      	pop	{r4, r5, pc}
 8014528:	220c      	movs	r2, #12
 801452a:	6002      	str	r2, [r0, #0]
 801452c:	2500      	movs	r5, #0
 801452e:	e7f8      	b.n	8014522 <_calloc_r+0x16>
 8014530:	4621      	mov	r1, r4
 8014532:	f7fd fe01 	bl	8012138 <memset>
 8014536:	e7f4      	b.n	8014522 <_calloc_r+0x16>

08014538 <_free_r>:
 8014538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801453a:	2900      	cmp	r1, #0
 801453c:	d044      	beq.n	80145c8 <_free_r+0x90>
 801453e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014542:	9001      	str	r0, [sp, #4]
 8014544:	2b00      	cmp	r3, #0
 8014546:	f1a1 0404 	sub.w	r4, r1, #4
 801454a:	bfb8      	it	lt
 801454c:	18e4      	addlt	r4, r4, r3
 801454e:	f000 fb19 	bl	8014b84 <__malloc_lock>
 8014552:	4a1e      	ldr	r2, [pc, #120]	; (80145cc <_free_r+0x94>)
 8014554:	9801      	ldr	r0, [sp, #4]
 8014556:	6813      	ldr	r3, [r2, #0]
 8014558:	b933      	cbnz	r3, 8014568 <_free_r+0x30>
 801455a:	6063      	str	r3, [r4, #4]
 801455c:	6014      	str	r4, [r2, #0]
 801455e:	b003      	add	sp, #12
 8014560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014564:	f000 bb14 	b.w	8014b90 <__malloc_unlock>
 8014568:	42a3      	cmp	r3, r4
 801456a:	d908      	bls.n	801457e <_free_r+0x46>
 801456c:	6825      	ldr	r5, [r4, #0]
 801456e:	1961      	adds	r1, r4, r5
 8014570:	428b      	cmp	r3, r1
 8014572:	bf01      	itttt	eq
 8014574:	6819      	ldreq	r1, [r3, #0]
 8014576:	685b      	ldreq	r3, [r3, #4]
 8014578:	1949      	addeq	r1, r1, r5
 801457a:	6021      	streq	r1, [r4, #0]
 801457c:	e7ed      	b.n	801455a <_free_r+0x22>
 801457e:	461a      	mov	r2, r3
 8014580:	685b      	ldr	r3, [r3, #4]
 8014582:	b10b      	cbz	r3, 8014588 <_free_r+0x50>
 8014584:	42a3      	cmp	r3, r4
 8014586:	d9fa      	bls.n	801457e <_free_r+0x46>
 8014588:	6811      	ldr	r1, [r2, #0]
 801458a:	1855      	adds	r5, r2, r1
 801458c:	42a5      	cmp	r5, r4
 801458e:	d10b      	bne.n	80145a8 <_free_r+0x70>
 8014590:	6824      	ldr	r4, [r4, #0]
 8014592:	4421      	add	r1, r4
 8014594:	1854      	adds	r4, r2, r1
 8014596:	42a3      	cmp	r3, r4
 8014598:	6011      	str	r1, [r2, #0]
 801459a:	d1e0      	bne.n	801455e <_free_r+0x26>
 801459c:	681c      	ldr	r4, [r3, #0]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	6053      	str	r3, [r2, #4]
 80145a2:	4421      	add	r1, r4
 80145a4:	6011      	str	r1, [r2, #0]
 80145a6:	e7da      	b.n	801455e <_free_r+0x26>
 80145a8:	d902      	bls.n	80145b0 <_free_r+0x78>
 80145aa:	230c      	movs	r3, #12
 80145ac:	6003      	str	r3, [r0, #0]
 80145ae:	e7d6      	b.n	801455e <_free_r+0x26>
 80145b0:	6825      	ldr	r5, [r4, #0]
 80145b2:	1961      	adds	r1, r4, r5
 80145b4:	428b      	cmp	r3, r1
 80145b6:	bf04      	itt	eq
 80145b8:	6819      	ldreq	r1, [r3, #0]
 80145ba:	685b      	ldreq	r3, [r3, #4]
 80145bc:	6063      	str	r3, [r4, #4]
 80145be:	bf04      	itt	eq
 80145c0:	1949      	addeq	r1, r1, r5
 80145c2:	6021      	streq	r1, [r4, #0]
 80145c4:	6054      	str	r4, [r2, #4]
 80145c6:	e7ca      	b.n	801455e <_free_r+0x26>
 80145c8:	b003      	add	sp, #12
 80145ca:	bd30      	pop	{r4, r5, pc}
 80145cc:	20002424 	.word	0x20002424

080145d0 <sbrk_aligned>:
 80145d0:	b570      	push	{r4, r5, r6, lr}
 80145d2:	4e0e      	ldr	r6, [pc, #56]	; (801460c <sbrk_aligned+0x3c>)
 80145d4:	460c      	mov	r4, r1
 80145d6:	6831      	ldr	r1, [r6, #0]
 80145d8:	4605      	mov	r5, r0
 80145da:	b911      	cbnz	r1, 80145e2 <sbrk_aligned+0x12>
 80145dc:	f000 f9e6 	bl	80149ac <_sbrk_r>
 80145e0:	6030      	str	r0, [r6, #0]
 80145e2:	4621      	mov	r1, r4
 80145e4:	4628      	mov	r0, r5
 80145e6:	f000 f9e1 	bl	80149ac <_sbrk_r>
 80145ea:	1c43      	adds	r3, r0, #1
 80145ec:	d00a      	beq.n	8014604 <sbrk_aligned+0x34>
 80145ee:	1cc4      	adds	r4, r0, #3
 80145f0:	f024 0403 	bic.w	r4, r4, #3
 80145f4:	42a0      	cmp	r0, r4
 80145f6:	d007      	beq.n	8014608 <sbrk_aligned+0x38>
 80145f8:	1a21      	subs	r1, r4, r0
 80145fa:	4628      	mov	r0, r5
 80145fc:	f000 f9d6 	bl	80149ac <_sbrk_r>
 8014600:	3001      	adds	r0, #1
 8014602:	d101      	bne.n	8014608 <sbrk_aligned+0x38>
 8014604:	f04f 34ff 	mov.w	r4, #4294967295
 8014608:	4620      	mov	r0, r4
 801460a:	bd70      	pop	{r4, r5, r6, pc}
 801460c:	20002428 	.word	0x20002428

08014610 <_malloc_r>:
 8014610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014614:	1ccd      	adds	r5, r1, #3
 8014616:	f025 0503 	bic.w	r5, r5, #3
 801461a:	3508      	adds	r5, #8
 801461c:	2d0c      	cmp	r5, #12
 801461e:	bf38      	it	cc
 8014620:	250c      	movcc	r5, #12
 8014622:	2d00      	cmp	r5, #0
 8014624:	4607      	mov	r7, r0
 8014626:	db01      	blt.n	801462c <_malloc_r+0x1c>
 8014628:	42a9      	cmp	r1, r5
 801462a:	d905      	bls.n	8014638 <_malloc_r+0x28>
 801462c:	230c      	movs	r3, #12
 801462e:	603b      	str	r3, [r7, #0]
 8014630:	2600      	movs	r6, #0
 8014632:	4630      	mov	r0, r6
 8014634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014638:	4e2e      	ldr	r6, [pc, #184]	; (80146f4 <_malloc_r+0xe4>)
 801463a:	f000 faa3 	bl	8014b84 <__malloc_lock>
 801463e:	6833      	ldr	r3, [r6, #0]
 8014640:	461c      	mov	r4, r3
 8014642:	bb34      	cbnz	r4, 8014692 <_malloc_r+0x82>
 8014644:	4629      	mov	r1, r5
 8014646:	4638      	mov	r0, r7
 8014648:	f7ff ffc2 	bl	80145d0 <sbrk_aligned>
 801464c:	1c43      	adds	r3, r0, #1
 801464e:	4604      	mov	r4, r0
 8014650:	d14d      	bne.n	80146ee <_malloc_r+0xde>
 8014652:	6834      	ldr	r4, [r6, #0]
 8014654:	4626      	mov	r6, r4
 8014656:	2e00      	cmp	r6, #0
 8014658:	d140      	bne.n	80146dc <_malloc_r+0xcc>
 801465a:	6823      	ldr	r3, [r4, #0]
 801465c:	4631      	mov	r1, r6
 801465e:	4638      	mov	r0, r7
 8014660:	eb04 0803 	add.w	r8, r4, r3
 8014664:	f000 f9a2 	bl	80149ac <_sbrk_r>
 8014668:	4580      	cmp	r8, r0
 801466a:	d13a      	bne.n	80146e2 <_malloc_r+0xd2>
 801466c:	6821      	ldr	r1, [r4, #0]
 801466e:	3503      	adds	r5, #3
 8014670:	1a6d      	subs	r5, r5, r1
 8014672:	f025 0503 	bic.w	r5, r5, #3
 8014676:	3508      	adds	r5, #8
 8014678:	2d0c      	cmp	r5, #12
 801467a:	bf38      	it	cc
 801467c:	250c      	movcc	r5, #12
 801467e:	4629      	mov	r1, r5
 8014680:	4638      	mov	r0, r7
 8014682:	f7ff ffa5 	bl	80145d0 <sbrk_aligned>
 8014686:	3001      	adds	r0, #1
 8014688:	d02b      	beq.n	80146e2 <_malloc_r+0xd2>
 801468a:	6823      	ldr	r3, [r4, #0]
 801468c:	442b      	add	r3, r5
 801468e:	6023      	str	r3, [r4, #0]
 8014690:	e00e      	b.n	80146b0 <_malloc_r+0xa0>
 8014692:	6822      	ldr	r2, [r4, #0]
 8014694:	1b52      	subs	r2, r2, r5
 8014696:	d41e      	bmi.n	80146d6 <_malloc_r+0xc6>
 8014698:	2a0b      	cmp	r2, #11
 801469a:	d916      	bls.n	80146ca <_malloc_r+0xba>
 801469c:	1961      	adds	r1, r4, r5
 801469e:	42a3      	cmp	r3, r4
 80146a0:	6025      	str	r5, [r4, #0]
 80146a2:	bf18      	it	ne
 80146a4:	6059      	strne	r1, [r3, #4]
 80146a6:	6863      	ldr	r3, [r4, #4]
 80146a8:	bf08      	it	eq
 80146aa:	6031      	streq	r1, [r6, #0]
 80146ac:	5162      	str	r2, [r4, r5]
 80146ae:	604b      	str	r3, [r1, #4]
 80146b0:	4638      	mov	r0, r7
 80146b2:	f104 060b 	add.w	r6, r4, #11
 80146b6:	f000 fa6b 	bl	8014b90 <__malloc_unlock>
 80146ba:	f026 0607 	bic.w	r6, r6, #7
 80146be:	1d23      	adds	r3, r4, #4
 80146c0:	1af2      	subs	r2, r6, r3
 80146c2:	d0b6      	beq.n	8014632 <_malloc_r+0x22>
 80146c4:	1b9b      	subs	r3, r3, r6
 80146c6:	50a3      	str	r3, [r4, r2]
 80146c8:	e7b3      	b.n	8014632 <_malloc_r+0x22>
 80146ca:	6862      	ldr	r2, [r4, #4]
 80146cc:	42a3      	cmp	r3, r4
 80146ce:	bf0c      	ite	eq
 80146d0:	6032      	streq	r2, [r6, #0]
 80146d2:	605a      	strne	r2, [r3, #4]
 80146d4:	e7ec      	b.n	80146b0 <_malloc_r+0xa0>
 80146d6:	4623      	mov	r3, r4
 80146d8:	6864      	ldr	r4, [r4, #4]
 80146da:	e7b2      	b.n	8014642 <_malloc_r+0x32>
 80146dc:	4634      	mov	r4, r6
 80146de:	6876      	ldr	r6, [r6, #4]
 80146e0:	e7b9      	b.n	8014656 <_malloc_r+0x46>
 80146e2:	230c      	movs	r3, #12
 80146e4:	603b      	str	r3, [r7, #0]
 80146e6:	4638      	mov	r0, r7
 80146e8:	f000 fa52 	bl	8014b90 <__malloc_unlock>
 80146ec:	e7a1      	b.n	8014632 <_malloc_r+0x22>
 80146ee:	6025      	str	r5, [r4, #0]
 80146f0:	e7de      	b.n	80146b0 <_malloc_r+0xa0>
 80146f2:	bf00      	nop
 80146f4:	20002424 	.word	0x20002424

080146f8 <__sfputc_r>:
 80146f8:	6893      	ldr	r3, [r2, #8]
 80146fa:	3b01      	subs	r3, #1
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	b410      	push	{r4}
 8014700:	6093      	str	r3, [r2, #8]
 8014702:	da08      	bge.n	8014716 <__sfputc_r+0x1e>
 8014704:	6994      	ldr	r4, [r2, #24]
 8014706:	42a3      	cmp	r3, r4
 8014708:	db01      	blt.n	801470e <__sfputc_r+0x16>
 801470a:	290a      	cmp	r1, #10
 801470c:	d103      	bne.n	8014716 <__sfputc_r+0x1e>
 801470e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014712:	f7fe ba11 	b.w	8012b38 <__swbuf_r>
 8014716:	6813      	ldr	r3, [r2, #0]
 8014718:	1c58      	adds	r0, r3, #1
 801471a:	6010      	str	r0, [r2, #0]
 801471c:	7019      	strb	r1, [r3, #0]
 801471e:	4608      	mov	r0, r1
 8014720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014724:	4770      	bx	lr

08014726 <__sfputs_r>:
 8014726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014728:	4606      	mov	r6, r0
 801472a:	460f      	mov	r7, r1
 801472c:	4614      	mov	r4, r2
 801472e:	18d5      	adds	r5, r2, r3
 8014730:	42ac      	cmp	r4, r5
 8014732:	d101      	bne.n	8014738 <__sfputs_r+0x12>
 8014734:	2000      	movs	r0, #0
 8014736:	e007      	b.n	8014748 <__sfputs_r+0x22>
 8014738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801473c:	463a      	mov	r2, r7
 801473e:	4630      	mov	r0, r6
 8014740:	f7ff ffda 	bl	80146f8 <__sfputc_r>
 8014744:	1c43      	adds	r3, r0, #1
 8014746:	d1f3      	bne.n	8014730 <__sfputs_r+0xa>
 8014748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801474c <_vfiprintf_r>:
 801474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014750:	460d      	mov	r5, r1
 8014752:	b09d      	sub	sp, #116	; 0x74
 8014754:	4614      	mov	r4, r2
 8014756:	4698      	mov	r8, r3
 8014758:	4606      	mov	r6, r0
 801475a:	b118      	cbz	r0, 8014764 <_vfiprintf_r+0x18>
 801475c:	6983      	ldr	r3, [r0, #24]
 801475e:	b90b      	cbnz	r3, 8014764 <_vfiprintf_r+0x18>
 8014760:	f7ff fa3e 	bl	8013be0 <__sinit>
 8014764:	4b89      	ldr	r3, [pc, #548]	; (801498c <_vfiprintf_r+0x240>)
 8014766:	429d      	cmp	r5, r3
 8014768:	d11b      	bne.n	80147a2 <_vfiprintf_r+0x56>
 801476a:	6875      	ldr	r5, [r6, #4]
 801476c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801476e:	07d9      	lsls	r1, r3, #31
 8014770:	d405      	bmi.n	801477e <_vfiprintf_r+0x32>
 8014772:	89ab      	ldrh	r3, [r5, #12]
 8014774:	059a      	lsls	r2, r3, #22
 8014776:	d402      	bmi.n	801477e <_vfiprintf_r+0x32>
 8014778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801477a:	f7ff fad4 	bl	8013d26 <__retarget_lock_acquire_recursive>
 801477e:	89ab      	ldrh	r3, [r5, #12]
 8014780:	071b      	lsls	r3, r3, #28
 8014782:	d501      	bpl.n	8014788 <_vfiprintf_r+0x3c>
 8014784:	692b      	ldr	r3, [r5, #16]
 8014786:	b9eb      	cbnz	r3, 80147c4 <_vfiprintf_r+0x78>
 8014788:	4629      	mov	r1, r5
 801478a:	4630      	mov	r0, r6
 801478c:	f7fe fa26 	bl	8012bdc <__swsetup_r>
 8014790:	b1c0      	cbz	r0, 80147c4 <_vfiprintf_r+0x78>
 8014792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014794:	07dc      	lsls	r4, r3, #31
 8014796:	d50e      	bpl.n	80147b6 <_vfiprintf_r+0x6a>
 8014798:	f04f 30ff 	mov.w	r0, #4294967295
 801479c:	b01d      	add	sp, #116	; 0x74
 801479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a2:	4b7b      	ldr	r3, [pc, #492]	; (8014990 <_vfiprintf_r+0x244>)
 80147a4:	429d      	cmp	r5, r3
 80147a6:	d101      	bne.n	80147ac <_vfiprintf_r+0x60>
 80147a8:	68b5      	ldr	r5, [r6, #8]
 80147aa:	e7df      	b.n	801476c <_vfiprintf_r+0x20>
 80147ac:	4b79      	ldr	r3, [pc, #484]	; (8014994 <_vfiprintf_r+0x248>)
 80147ae:	429d      	cmp	r5, r3
 80147b0:	bf08      	it	eq
 80147b2:	68f5      	ldreq	r5, [r6, #12]
 80147b4:	e7da      	b.n	801476c <_vfiprintf_r+0x20>
 80147b6:	89ab      	ldrh	r3, [r5, #12]
 80147b8:	0598      	lsls	r0, r3, #22
 80147ba:	d4ed      	bmi.n	8014798 <_vfiprintf_r+0x4c>
 80147bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147be:	f7ff fab3 	bl	8013d28 <__retarget_lock_release_recursive>
 80147c2:	e7e9      	b.n	8014798 <_vfiprintf_r+0x4c>
 80147c4:	2300      	movs	r3, #0
 80147c6:	9309      	str	r3, [sp, #36]	; 0x24
 80147c8:	2320      	movs	r3, #32
 80147ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80147d2:	2330      	movs	r3, #48	; 0x30
 80147d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014998 <_vfiprintf_r+0x24c>
 80147d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147dc:	f04f 0901 	mov.w	r9, #1
 80147e0:	4623      	mov	r3, r4
 80147e2:	469a      	mov	sl, r3
 80147e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147e8:	b10a      	cbz	r2, 80147ee <_vfiprintf_r+0xa2>
 80147ea:	2a25      	cmp	r2, #37	; 0x25
 80147ec:	d1f9      	bne.n	80147e2 <_vfiprintf_r+0x96>
 80147ee:	ebba 0b04 	subs.w	fp, sl, r4
 80147f2:	d00b      	beq.n	801480c <_vfiprintf_r+0xc0>
 80147f4:	465b      	mov	r3, fp
 80147f6:	4622      	mov	r2, r4
 80147f8:	4629      	mov	r1, r5
 80147fa:	4630      	mov	r0, r6
 80147fc:	f7ff ff93 	bl	8014726 <__sfputs_r>
 8014800:	3001      	adds	r0, #1
 8014802:	f000 80aa 	beq.w	801495a <_vfiprintf_r+0x20e>
 8014806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014808:	445a      	add	r2, fp
 801480a:	9209      	str	r2, [sp, #36]	; 0x24
 801480c:	f89a 3000 	ldrb.w	r3, [sl]
 8014810:	2b00      	cmp	r3, #0
 8014812:	f000 80a2 	beq.w	801495a <_vfiprintf_r+0x20e>
 8014816:	2300      	movs	r3, #0
 8014818:	f04f 32ff 	mov.w	r2, #4294967295
 801481c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014820:	f10a 0a01 	add.w	sl, sl, #1
 8014824:	9304      	str	r3, [sp, #16]
 8014826:	9307      	str	r3, [sp, #28]
 8014828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801482c:	931a      	str	r3, [sp, #104]	; 0x68
 801482e:	4654      	mov	r4, sl
 8014830:	2205      	movs	r2, #5
 8014832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014836:	4858      	ldr	r0, [pc, #352]	; (8014998 <_vfiprintf_r+0x24c>)
 8014838:	f7eb fcfa 	bl	8000230 <memchr>
 801483c:	9a04      	ldr	r2, [sp, #16]
 801483e:	b9d8      	cbnz	r0, 8014878 <_vfiprintf_r+0x12c>
 8014840:	06d1      	lsls	r1, r2, #27
 8014842:	bf44      	itt	mi
 8014844:	2320      	movmi	r3, #32
 8014846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801484a:	0713      	lsls	r3, r2, #28
 801484c:	bf44      	itt	mi
 801484e:	232b      	movmi	r3, #43	; 0x2b
 8014850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014854:	f89a 3000 	ldrb.w	r3, [sl]
 8014858:	2b2a      	cmp	r3, #42	; 0x2a
 801485a:	d015      	beq.n	8014888 <_vfiprintf_r+0x13c>
 801485c:	9a07      	ldr	r2, [sp, #28]
 801485e:	4654      	mov	r4, sl
 8014860:	2000      	movs	r0, #0
 8014862:	f04f 0c0a 	mov.w	ip, #10
 8014866:	4621      	mov	r1, r4
 8014868:	f811 3b01 	ldrb.w	r3, [r1], #1
 801486c:	3b30      	subs	r3, #48	; 0x30
 801486e:	2b09      	cmp	r3, #9
 8014870:	d94e      	bls.n	8014910 <_vfiprintf_r+0x1c4>
 8014872:	b1b0      	cbz	r0, 80148a2 <_vfiprintf_r+0x156>
 8014874:	9207      	str	r2, [sp, #28]
 8014876:	e014      	b.n	80148a2 <_vfiprintf_r+0x156>
 8014878:	eba0 0308 	sub.w	r3, r0, r8
 801487c:	fa09 f303 	lsl.w	r3, r9, r3
 8014880:	4313      	orrs	r3, r2
 8014882:	9304      	str	r3, [sp, #16]
 8014884:	46a2      	mov	sl, r4
 8014886:	e7d2      	b.n	801482e <_vfiprintf_r+0xe2>
 8014888:	9b03      	ldr	r3, [sp, #12]
 801488a:	1d19      	adds	r1, r3, #4
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	9103      	str	r1, [sp, #12]
 8014890:	2b00      	cmp	r3, #0
 8014892:	bfbb      	ittet	lt
 8014894:	425b      	neglt	r3, r3
 8014896:	f042 0202 	orrlt.w	r2, r2, #2
 801489a:	9307      	strge	r3, [sp, #28]
 801489c:	9307      	strlt	r3, [sp, #28]
 801489e:	bfb8      	it	lt
 80148a0:	9204      	strlt	r2, [sp, #16]
 80148a2:	7823      	ldrb	r3, [r4, #0]
 80148a4:	2b2e      	cmp	r3, #46	; 0x2e
 80148a6:	d10c      	bne.n	80148c2 <_vfiprintf_r+0x176>
 80148a8:	7863      	ldrb	r3, [r4, #1]
 80148aa:	2b2a      	cmp	r3, #42	; 0x2a
 80148ac:	d135      	bne.n	801491a <_vfiprintf_r+0x1ce>
 80148ae:	9b03      	ldr	r3, [sp, #12]
 80148b0:	1d1a      	adds	r2, r3, #4
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	9203      	str	r2, [sp, #12]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	bfb8      	it	lt
 80148ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80148be:	3402      	adds	r4, #2
 80148c0:	9305      	str	r3, [sp, #20]
 80148c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80149a8 <_vfiprintf_r+0x25c>
 80148c6:	7821      	ldrb	r1, [r4, #0]
 80148c8:	2203      	movs	r2, #3
 80148ca:	4650      	mov	r0, sl
 80148cc:	f7eb fcb0 	bl	8000230 <memchr>
 80148d0:	b140      	cbz	r0, 80148e4 <_vfiprintf_r+0x198>
 80148d2:	2340      	movs	r3, #64	; 0x40
 80148d4:	eba0 000a 	sub.w	r0, r0, sl
 80148d8:	fa03 f000 	lsl.w	r0, r3, r0
 80148dc:	9b04      	ldr	r3, [sp, #16]
 80148de:	4303      	orrs	r3, r0
 80148e0:	3401      	adds	r4, #1
 80148e2:	9304      	str	r3, [sp, #16]
 80148e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148e8:	482c      	ldr	r0, [pc, #176]	; (801499c <_vfiprintf_r+0x250>)
 80148ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80148ee:	2206      	movs	r2, #6
 80148f0:	f7eb fc9e 	bl	8000230 <memchr>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d03f      	beq.n	8014978 <_vfiprintf_r+0x22c>
 80148f8:	4b29      	ldr	r3, [pc, #164]	; (80149a0 <_vfiprintf_r+0x254>)
 80148fa:	bb1b      	cbnz	r3, 8014944 <_vfiprintf_r+0x1f8>
 80148fc:	9b03      	ldr	r3, [sp, #12]
 80148fe:	3307      	adds	r3, #7
 8014900:	f023 0307 	bic.w	r3, r3, #7
 8014904:	3308      	adds	r3, #8
 8014906:	9303      	str	r3, [sp, #12]
 8014908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801490a:	443b      	add	r3, r7
 801490c:	9309      	str	r3, [sp, #36]	; 0x24
 801490e:	e767      	b.n	80147e0 <_vfiprintf_r+0x94>
 8014910:	fb0c 3202 	mla	r2, ip, r2, r3
 8014914:	460c      	mov	r4, r1
 8014916:	2001      	movs	r0, #1
 8014918:	e7a5      	b.n	8014866 <_vfiprintf_r+0x11a>
 801491a:	2300      	movs	r3, #0
 801491c:	3401      	adds	r4, #1
 801491e:	9305      	str	r3, [sp, #20]
 8014920:	4619      	mov	r1, r3
 8014922:	f04f 0c0a 	mov.w	ip, #10
 8014926:	4620      	mov	r0, r4
 8014928:	f810 2b01 	ldrb.w	r2, [r0], #1
 801492c:	3a30      	subs	r2, #48	; 0x30
 801492e:	2a09      	cmp	r2, #9
 8014930:	d903      	bls.n	801493a <_vfiprintf_r+0x1ee>
 8014932:	2b00      	cmp	r3, #0
 8014934:	d0c5      	beq.n	80148c2 <_vfiprintf_r+0x176>
 8014936:	9105      	str	r1, [sp, #20]
 8014938:	e7c3      	b.n	80148c2 <_vfiprintf_r+0x176>
 801493a:	fb0c 2101 	mla	r1, ip, r1, r2
 801493e:	4604      	mov	r4, r0
 8014940:	2301      	movs	r3, #1
 8014942:	e7f0      	b.n	8014926 <_vfiprintf_r+0x1da>
 8014944:	ab03      	add	r3, sp, #12
 8014946:	9300      	str	r3, [sp, #0]
 8014948:	462a      	mov	r2, r5
 801494a:	4b16      	ldr	r3, [pc, #88]	; (80149a4 <_vfiprintf_r+0x258>)
 801494c:	a904      	add	r1, sp, #16
 801494e:	4630      	mov	r0, r6
 8014950:	f7fd fc9a 	bl	8012288 <_printf_float>
 8014954:	4607      	mov	r7, r0
 8014956:	1c78      	adds	r0, r7, #1
 8014958:	d1d6      	bne.n	8014908 <_vfiprintf_r+0x1bc>
 801495a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801495c:	07d9      	lsls	r1, r3, #31
 801495e:	d405      	bmi.n	801496c <_vfiprintf_r+0x220>
 8014960:	89ab      	ldrh	r3, [r5, #12]
 8014962:	059a      	lsls	r2, r3, #22
 8014964:	d402      	bmi.n	801496c <_vfiprintf_r+0x220>
 8014966:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014968:	f7ff f9de 	bl	8013d28 <__retarget_lock_release_recursive>
 801496c:	89ab      	ldrh	r3, [r5, #12]
 801496e:	065b      	lsls	r3, r3, #25
 8014970:	f53f af12 	bmi.w	8014798 <_vfiprintf_r+0x4c>
 8014974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014976:	e711      	b.n	801479c <_vfiprintf_r+0x50>
 8014978:	ab03      	add	r3, sp, #12
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	462a      	mov	r2, r5
 801497e:	4b09      	ldr	r3, [pc, #36]	; (80149a4 <_vfiprintf_r+0x258>)
 8014980:	a904      	add	r1, sp, #16
 8014982:	4630      	mov	r0, r6
 8014984:	f7fd ff24 	bl	80127d0 <_printf_i>
 8014988:	e7e4      	b.n	8014954 <_vfiprintf_r+0x208>
 801498a:	bf00      	nop
 801498c:	0801531c 	.word	0x0801531c
 8014990:	0801533c 	.word	0x0801533c
 8014994:	080152fc 	.word	0x080152fc
 8014998:	080154b4 	.word	0x080154b4
 801499c:	080154be 	.word	0x080154be
 80149a0:	08012289 	.word	0x08012289
 80149a4:	08014727 	.word	0x08014727
 80149a8:	080154ba 	.word	0x080154ba

080149ac <_sbrk_r>:
 80149ac:	b538      	push	{r3, r4, r5, lr}
 80149ae:	4d06      	ldr	r5, [pc, #24]	; (80149c8 <_sbrk_r+0x1c>)
 80149b0:	2300      	movs	r3, #0
 80149b2:	4604      	mov	r4, r0
 80149b4:	4608      	mov	r0, r1
 80149b6:	602b      	str	r3, [r5, #0]
 80149b8:	f7f0 f81c 	bl	80049f4 <_sbrk>
 80149bc:	1c43      	adds	r3, r0, #1
 80149be:	d102      	bne.n	80149c6 <_sbrk_r+0x1a>
 80149c0:	682b      	ldr	r3, [r5, #0]
 80149c2:	b103      	cbz	r3, 80149c6 <_sbrk_r+0x1a>
 80149c4:	6023      	str	r3, [r4, #0]
 80149c6:	bd38      	pop	{r3, r4, r5, pc}
 80149c8:	2000242c 	.word	0x2000242c

080149cc <__sread>:
 80149cc:	b510      	push	{r4, lr}
 80149ce:	460c      	mov	r4, r1
 80149d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d4:	f000 f8e2 	bl	8014b9c <_read_r>
 80149d8:	2800      	cmp	r0, #0
 80149da:	bfab      	itete	ge
 80149dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80149de:	89a3      	ldrhlt	r3, [r4, #12]
 80149e0:	181b      	addge	r3, r3, r0
 80149e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80149e6:	bfac      	ite	ge
 80149e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80149ea:	81a3      	strhlt	r3, [r4, #12]
 80149ec:	bd10      	pop	{r4, pc}

080149ee <__swrite>:
 80149ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f2:	461f      	mov	r7, r3
 80149f4:	898b      	ldrh	r3, [r1, #12]
 80149f6:	05db      	lsls	r3, r3, #23
 80149f8:	4605      	mov	r5, r0
 80149fa:	460c      	mov	r4, r1
 80149fc:	4616      	mov	r6, r2
 80149fe:	d505      	bpl.n	8014a0c <__swrite+0x1e>
 8014a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a04:	2302      	movs	r3, #2
 8014a06:	2200      	movs	r2, #0
 8014a08:	f000 f898 	bl	8014b3c <_lseek_r>
 8014a0c:	89a3      	ldrh	r3, [r4, #12]
 8014a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a16:	81a3      	strh	r3, [r4, #12]
 8014a18:	4632      	mov	r2, r6
 8014a1a:	463b      	mov	r3, r7
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a22:	f000 b817 	b.w	8014a54 <_write_r>

08014a26 <__sseek>:
 8014a26:	b510      	push	{r4, lr}
 8014a28:	460c      	mov	r4, r1
 8014a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a2e:	f000 f885 	bl	8014b3c <_lseek_r>
 8014a32:	1c43      	adds	r3, r0, #1
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	bf15      	itete	ne
 8014a38:	6560      	strne	r0, [r4, #84]	; 0x54
 8014a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014a42:	81a3      	strheq	r3, [r4, #12]
 8014a44:	bf18      	it	ne
 8014a46:	81a3      	strhne	r3, [r4, #12]
 8014a48:	bd10      	pop	{r4, pc}

08014a4a <__sclose>:
 8014a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a4e:	f000 b831 	b.w	8014ab4 <_close_r>
	...

08014a54 <_write_r>:
 8014a54:	b538      	push	{r3, r4, r5, lr}
 8014a56:	4d07      	ldr	r5, [pc, #28]	; (8014a74 <_write_r+0x20>)
 8014a58:	4604      	mov	r4, r0
 8014a5a:	4608      	mov	r0, r1
 8014a5c:	4611      	mov	r1, r2
 8014a5e:	2200      	movs	r2, #0
 8014a60:	602a      	str	r2, [r5, #0]
 8014a62:	461a      	mov	r2, r3
 8014a64:	f7ef ff65 	bl	8004932 <_write>
 8014a68:	1c43      	adds	r3, r0, #1
 8014a6a:	d102      	bne.n	8014a72 <_write_r+0x1e>
 8014a6c:	682b      	ldr	r3, [r5, #0]
 8014a6e:	b103      	cbz	r3, 8014a72 <_write_r+0x1e>
 8014a70:	6023      	str	r3, [r4, #0]
 8014a72:	bd38      	pop	{r3, r4, r5, pc}
 8014a74:	2000242c 	.word	0x2000242c

08014a78 <__assert_func>:
 8014a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a7a:	4614      	mov	r4, r2
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	4b09      	ldr	r3, [pc, #36]	; (8014aa4 <__assert_func+0x2c>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	4605      	mov	r5, r0
 8014a84:	68d8      	ldr	r0, [r3, #12]
 8014a86:	b14c      	cbz	r4, 8014a9c <__assert_func+0x24>
 8014a88:	4b07      	ldr	r3, [pc, #28]	; (8014aa8 <__assert_func+0x30>)
 8014a8a:	9100      	str	r1, [sp, #0]
 8014a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a90:	4906      	ldr	r1, [pc, #24]	; (8014aac <__assert_func+0x34>)
 8014a92:	462b      	mov	r3, r5
 8014a94:	f000 f81e 	bl	8014ad4 <fiprintf>
 8014a98:	f000 f89f 	bl	8014bda <abort>
 8014a9c:	4b04      	ldr	r3, [pc, #16]	; (8014ab0 <__assert_func+0x38>)
 8014a9e:	461c      	mov	r4, r3
 8014aa0:	e7f3      	b.n	8014a8a <__assert_func+0x12>
 8014aa2:	bf00      	nop
 8014aa4:	20000184 	.word	0x20000184
 8014aa8:	080154c5 	.word	0x080154c5
 8014aac:	080154d2 	.word	0x080154d2
 8014ab0:	08015500 	.word	0x08015500

08014ab4 <_close_r>:
 8014ab4:	b538      	push	{r3, r4, r5, lr}
 8014ab6:	4d06      	ldr	r5, [pc, #24]	; (8014ad0 <_close_r+0x1c>)
 8014ab8:	2300      	movs	r3, #0
 8014aba:	4604      	mov	r4, r0
 8014abc:	4608      	mov	r0, r1
 8014abe:	602b      	str	r3, [r5, #0]
 8014ac0:	f7ef ff64 	bl	800498c <_close>
 8014ac4:	1c43      	adds	r3, r0, #1
 8014ac6:	d102      	bne.n	8014ace <_close_r+0x1a>
 8014ac8:	682b      	ldr	r3, [r5, #0]
 8014aca:	b103      	cbz	r3, 8014ace <_close_r+0x1a>
 8014acc:	6023      	str	r3, [r4, #0]
 8014ace:	bd38      	pop	{r3, r4, r5, pc}
 8014ad0:	2000242c 	.word	0x2000242c

08014ad4 <fiprintf>:
 8014ad4:	b40e      	push	{r1, r2, r3}
 8014ad6:	b503      	push	{r0, r1, lr}
 8014ad8:	4601      	mov	r1, r0
 8014ada:	ab03      	add	r3, sp, #12
 8014adc:	4805      	ldr	r0, [pc, #20]	; (8014af4 <fiprintf+0x20>)
 8014ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ae2:	6800      	ldr	r0, [r0, #0]
 8014ae4:	9301      	str	r3, [sp, #4]
 8014ae6:	f7ff fe31 	bl	801474c <_vfiprintf_r>
 8014aea:	b002      	add	sp, #8
 8014aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8014af0:	b003      	add	sp, #12
 8014af2:	4770      	bx	lr
 8014af4:	20000184 	.word	0x20000184

08014af8 <_fstat_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	4d07      	ldr	r5, [pc, #28]	; (8014b18 <_fstat_r+0x20>)
 8014afc:	2300      	movs	r3, #0
 8014afe:	4604      	mov	r4, r0
 8014b00:	4608      	mov	r0, r1
 8014b02:	4611      	mov	r1, r2
 8014b04:	602b      	str	r3, [r5, #0]
 8014b06:	f7ef ff4d 	bl	80049a4 <_fstat>
 8014b0a:	1c43      	adds	r3, r0, #1
 8014b0c:	d102      	bne.n	8014b14 <_fstat_r+0x1c>
 8014b0e:	682b      	ldr	r3, [r5, #0]
 8014b10:	b103      	cbz	r3, 8014b14 <_fstat_r+0x1c>
 8014b12:	6023      	str	r3, [r4, #0]
 8014b14:	bd38      	pop	{r3, r4, r5, pc}
 8014b16:	bf00      	nop
 8014b18:	2000242c 	.word	0x2000242c

08014b1c <_isatty_r>:
 8014b1c:	b538      	push	{r3, r4, r5, lr}
 8014b1e:	4d06      	ldr	r5, [pc, #24]	; (8014b38 <_isatty_r+0x1c>)
 8014b20:	2300      	movs	r3, #0
 8014b22:	4604      	mov	r4, r0
 8014b24:	4608      	mov	r0, r1
 8014b26:	602b      	str	r3, [r5, #0]
 8014b28:	f7ef ff4c 	bl	80049c4 <_isatty>
 8014b2c:	1c43      	adds	r3, r0, #1
 8014b2e:	d102      	bne.n	8014b36 <_isatty_r+0x1a>
 8014b30:	682b      	ldr	r3, [r5, #0]
 8014b32:	b103      	cbz	r3, 8014b36 <_isatty_r+0x1a>
 8014b34:	6023      	str	r3, [r4, #0]
 8014b36:	bd38      	pop	{r3, r4, r5, pc}
 8014b38:	2000242c 	.word	0x2000242c

08014b3c <_lseek_r>:
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	4d07      	ldr	r5, [pc, #28]	; (8014b5c <_lseek_r+0x20>)
 8014b40:	4604      	mov	r4, r0
 8014b42:	4608      	mov	r0, r1
 8014b44:	4611      	mov	r1, r2
 8014b46:	2200      	movs	r2, #0
 8014b48:	602a      	str	r2, [r5, #0]
 8014b4a:	461a      	mov	r2, r3
 8014b4c:	f7ef ff45 	bl	80049da <_lseek>
 8014b50:	1c43      	adds	r3, r0, #1
 8014b52:	d102      	bne.n	8014b5a <_lseek_r+0x1e>
 8014b54:	682b      	ldr	r3, [r5, #0]
 8014b56:	b103      	cbz	r3, 8014b5a <_lseek_r+0x1e>
 8014b58:	6023      	str	r3, [r4, #0]
 8014b5a:	bd38      	pop	{r3, r4, r5, pc}
 8014b5c:	2000242c 	.word	0x2000242c

08014b60 <__ascii_mbtowc>:
 8014b60:	b082      	sub	sp, #8
 8014b62:	b901      	cbnz	r1, 8014b66 <__ascii_mbtowc+0x6>
 8014b64:	a901      	add	r1, sp, #4
 8014b66:	b142      	cbz	r2, 8014b7a <__ascii_mbtowc+0x1a>
 8014b68:	b14b      	cbz	r3, 8014b7e <__ascii_mbtowc+0x1e>
 8014b6a:	7813      	ldrb	r3, [r2, #0]
 8014b6c:	600b      	str	r3, [r1, #0]
 8014b6e:	7812      	ldrb	r2, [r2, #0]
 8014b70:	1e10      	subs	r0, r2, #0
 8014b72:	bf18      	it	ne
 8014b74:	2001      	movne	r0, #1
 8014b76:	b002      	add	sp, #8
 8014b78:	4770      	bx	lr
 8014b7a:	4610      	mov	r0, r2
 8014b7c:	e7fb      	b.n	8014b76 <__ascii_mbtowc+0x16>
 8014b7e:	f06f 0001 	mvn.w	r0, #1
 8014b82:	e7f8      	b.n	8014b76 <__ascii_mbtowc+0x16>

08014b84 <__malloc_lock>:
 8014b84:	4801      	ldr	r0, [pc, #4]	; (8014b8c <__malloc_lock+0x8>)
 8014b86:	f7ff b8ce 	b.w	8013d26 <__retarget_lock_acquire_recursive>
 8014b8a:	bf00      	nop
 8014b8c:	20002420 	.word	0x20002420

08014b90 <__malloc_unlock>:
 8014b90:	4801      	ldr	r0, [pc, #4]	; (8014b98 <__malloc_unlock+0x8>)
 8014b92:	f7ff b8c9 	b.w	8013d28 <__retarget_lock_release_recursive>
 8014b96:	bf00      	nop
 8014b98:	20002420 	.word	0x20002420

08014b9c <_read_r>:
 8014b9c:	b538      	push	{r3, r4, r5, lr}
 8014b9e:	4d07      	ldr	r5, [pc, #28]	; (8014bbc <_read_r+0x20>)
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	4608      	mov	r0, r1
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	602a      	str	r2, [r5, #0]
 8014baa:	461a      	mov	r2, r3
 8014bac:	f7ef fea4 	bl	80048f8 <_read>
 8014bb0:	1c43      	adds	r3, r0, #1
 8014bb2:	d102      	bne.n	8014bba <_read_r+0x1e>
 8014bb4:	682b      	ldr	r3, [r5, #0]
 8014bb6:	b103      	cbz	r3, 8014bba <_read_r+0x1e>
 8014bb8:	6023      	str	r3, [r4, #0]
 8014bba:	bd38      	pop	{r3, r4, r5, pc}
 8014bbc:	2000242c 	.word	0x2000242c

08014bc0 <__ascii_wctomb>:
 8014bc0:	b149      	cbz	r1, 8014bd6 <__ascii_wctomb+0x16>
 8014bc2:	2aff      	cmp	r2, #255	; 0xff
 8014bc4:	bf85      	ittet	hi
 8014bc6:	238a      	movhi	r3, #138	; 0x8a
 8014bc8:	6003      	strhi	r3, [r0, #0]
 8014bca:	700a      	strbls	r2, [r1, #0]
 8014bcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8014bd0:	bf98      	it	ls
 8014bd2:	2001      	movls	r0, #1
 8014bd4:	4770      	bx	lr
 8014bd6:	4608      	mov	r0, r1
 8014bd8:	4770      	bx	lr

08014bda <abort>:
 8014bda:	b508      	push	{r3, lr}
 8014bdc:	2006      	movs	r0, #6
 8014bde:	f000 f82b 	bl	8014c38 <raise>
 8014be2:	2001      	movs	r0, #1
 8014be4:	f7ef fe7e 	bl	80048e4 <_exit>

08014be8 <_raise_r>:
 8014be8:	291f      	cmp	r1, #31
 8014bea:	b538      	push	{r3, r4, r5, lr}
 8014bec:	4604      	mov	r4, r0
 8014bee:	460d      	mov	r5, r1
 8014bf0:	d904      	bls.n	8014bfc <_raise_r+0x14>
 8014bf2:	2316      	movs	r3, #22
 8014bf4:	6003      	str	r3, [r0, #0]
 8014bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8014bfa:	bd38      	pop	{r3, r4, r5, pc}
 8014bfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014bfe:	b112      	cbz	r2, 8014c06 <_raise_r+0x1e>
 8014c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c04:	b94b      	cbnz	r3, 8014c1a <_raise_r+0x32>
 8014c06:	4620      	mov	r0, r4
 8014c08:	f000 f830 	bl	8014c6c <_getpid_r>
 8014c0c:	462a      	mov	r2, r5
 8014c0e:	4601      	mov	r1, r0
 8014c10:	4620      	mov	r0, r4
 8014c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c16:	f000 b817 	b.w	8014c48 <_kill_r>
 8014c1a:	2b01      	cmp	r3, #1
 8014c1c:	d00a      	beq.n	8014c34 <_raise_r+0x4c>
 8014c1e:	1c59      	adds	r1, r3, #1
 8014c20:	d103      	bne.n	8014c2a <_raise_r+0x42>
 8014c22:	2316      	movs	r3, #22
 8014c24:	6003      	str	r3, [r0, #0]
 8014c26:	2001      	movs	r0, #1
 8014c28:	e7e7      	b.n	8014bfa <_raise_r+0x12>
 8014c2a:	2400      	movs	r4, #0
 8014c2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c30:	4628      	mov	r0, r5
 8014c32:	4798      	blx	r3
 8014c34:	2000      	movs	r0, #0
 8014c36:	e7e0      	b.n	8014bfa <_raise_r+0x12>

08014c38 <raise>:
 8014c38:	4b02      	ldr	r3, [pc, #8]	; (8014c44 <raise+0xc>)
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	6818      	ldr	r0, [r3, #0]
 8014c3e:	f7ff bfd3 	b.w	8014be8 <_raise_r>
 8014c42:	bf00      	nop
 8014c44:	20000184 	.word	0x20000184

08014c48 <_kill_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4d07      	ldr	r5, [pc, #28]	; (8014c68 <_kill_r+0x20>)
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	4604      	mov	r4, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	4611      	mov	r1, r2
 8014c54:	602b      	str	r3, [r5, #0]
 8014c56:	f7ef fe35 	bl	80048c4 <_kill>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d102      	bne.n	8014c64 <_kill_r+0x1c>
 8014c5e:	682b      	ldr	r3, [r5, #0]
 8014c60:	b103      	cbz	r3, 8014c64 <_kill_r+0x1c>
 8014c62:	6023      	str	r3, [r4, #0]
 8014c64:	bd38      	pop	{r3, r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	2000242c 	.word	0x2000242c

08014c6c <_getpid_r>:
 8014c6c:	f7ef be22 	b.w	80048b4 <_getpid>

08014c70 <_init>:
 8014c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c72:	bf00      	nop
 8014c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c76:	bc08      	pop	{r3}
 8014c78:	469e      	mov	lr, r3
 8014c7a:	4770      	bx	lr

08014c7c <_fini>:
 8014c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c7e:	bf00      	nop
 8014c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c82:	bc08      	pop	{r3}
 8014c84:	469e      	mov	lr, r3
 8014c86:	4770      	bx	lr
