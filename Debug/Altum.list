
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  08017e78  08017e78  00027e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801884c  0801884c  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  0801884c  0801884c  0002884c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018854  08018854  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018854  08018854  00028854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018858  08018858  00028858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0801885c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000218c  20000354  08018bb0  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024e0  08018bb0  000324e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ca16  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078bb  00000000  00000000  0007cd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025c0  00000000  00000000  00084658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002360  00000000  00000000  00086c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003da84  00000000  00000000  00088f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040166  00000000  00000000  000c69fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d2d0  00000000  00000000  00106b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00283e32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b23c  00000000  00000000  00283e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017e60 	.word	0x08017e60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08017e60 	.word	0x08017e60

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components){
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2300      	movs	r3, #0
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	6053      	str	r3, [r2, #4]
 8000f14:	6093      	str	r3, [r2, #8]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3314      	adds	r3, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	861a      	strh	r2, [r3, #48]	; 0x30
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	this->_sbus = sbus;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

	this->_ledPWM = 0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	851a      	strh	r2, [r3, #40]	; 0x28


}
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 3);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 f8f8 	bl	8005178 <_ZN10Components9get_ADC_1Ev>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f005 fe81 	bl	8006c94 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 f8fa 	bl	8005190 <_ZN10Components9get_ADC_2Ev>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f005 fe76 	bl	8006c94 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 f8fd 	bl	80051ac <_ZN10Components9get_ADC_5Ev>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3314      	adds	r3, #20
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f005 fe6b 	bl	8006c94 <HAL_ADC_Start_DMA>



}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 8000fc6:	b590      	push	{r4, r7, lr}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f830 	bl	8004038 <_ZN4SBUS8B_buttonEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <_ZN9Convertor9updateLEDEv+0x28>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe8:	da01      	bge.n	8000fee <_ZN9Convertor9updateLEDEv+0x28>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <_ZN9Convertor9updateLEDEv+0x2a>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d015      	beq.n	8001020 <_ZN9Convertor9updateLEDEv+0x5a>
		_ledPWM += 250;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	33fa      	adds	r3, #250	; 0xfa
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fafb 	bl	800260c <_ZN11Initializer13get_LED_TimerEv>
 8001016:	4603      	mov	r3, r0
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4622      	mov	r2, r4
 800101c:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 800101e:	e026      	b.n	800106e <_ZN9Convertor9updateLEDEv+0xa8>
	}else if(_sbus->A_button() && _ledPWM > 0){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4618      	mov	r0, r3
 8001026:	f002 ffad 	bl	8003f84 <_ZN4SBUS8A_buttonEv>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <_ZN9Convertor9updateLEDEv+0x78>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001036:	2b00      	cmp	r3, #0
 8001038:	dd01      	ble.n	800103e <_ZN9Convertor9updateLEDEv+0x78>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <_ZN9Convertor9updateLEDEv+0x7a>
 800103e:	2300      	movs	r3, #0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <_ZN9Convertor9updateLEDEv+0xa8>
		_ledPWM -= 250;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800104a:	b29b      	uxth	r3, r3
 800104c:	3bfa      	subs	r3, #250	; 0xfa
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fad3 	bl	800260c <_ZN11Initializer13get_LED_TimerEv>
 8001066:	4603      	mov	r3, r0
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4622      	mov	r2, r4
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bd90      	pop	{r4, r7, pc}

08001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	460b      	mov	r3, r1
 8001084:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 8001086:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db76      	blt.n	800117c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d109      	bne.n	80010a8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 8001094:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfb8      	it	lt
 800109c:	425b      	neglt	r3, r3
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	e03c      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d109      	bne.n	80010c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 80010ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	425b      	neglt	r3, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	639a      	str	r2, [r3, #56]	; 0x38
 80010c0:	e02f      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d109      	bne.n	80010dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 80010c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bfb8      	it	lt
 80010d0:	425b      	neglt	r3, r3
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010da:	e022      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d109      	bne.n	80010f6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 80010e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bfb8      	it	lt
 80010ea:	425b      	neglt	r3, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
 80010f4:	e015      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d109      	bne.n	8001110 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 80010fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001100:	2b00      	cmp	r3, #0
 8001102:	bfb8      	it	lt
 8001104:	425b      	neglt	r3, r3
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	649a      	str	r2, [r3, #72]	; 0x48
 800110e:	e008      	b.n	8001122 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001110:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001114:	2b00      	cmp	r3, #0
 8001116:	bfb8      	it	lt
 8001118:	425b      	neglt	r3, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d104      	bne.n	8001132 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 8001130:	e09e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b04      	cmp	r3, #4
 8001136:	d104      	bne.n	8001142 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001140:	e096      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d104      	bne.n	8001152 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001150:	e08e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d104      	bne.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001160:	e086      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b10      	cmp	r3, #16
 8001166:	d104      	bne.n	8001172 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001170:	e07e      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800117a:	e079      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 800117c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da75      	bge.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e023      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d104      	bne.n	80011a4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	639a      	str	r2, [r3, #56]	; 0x38
 80011a2:	e01b      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d104      	bne.n	80011b4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b2:	e013      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d104      	bne.n	80011c4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e00b      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d104      	bne.n	80011d4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	649a      	str	r2, [r3, #72]	; 0x48
 80011d2:	e003      	b.n	80011dc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 80011e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bfb8      	it	lt
 80011ea:	425b      	neglt	r3, r3
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011f4:	e03c      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d109      	bne.n	8001210 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 80011fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001200:	2b00      	cmp	r3, #0
 8001202:	bfb8      	it	lt
 8001204:	425b      	neglt	r3, r3
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800120e:	e02f      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b08      	cmp	r3, #8
 8001214:	d109      	bne.n	800122a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 8001216:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bfb8      	it	lt
 800121e:	425b      	neglt	r3, r3
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001228:	e022      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d109      	bne.n	8001244 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 8001230:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001234:	2b00      	cmp	r3, #0
 8001236:	bfb8      	it	lt
 8001238:	425b      	neglt	r3, r3
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001242:	e015      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d109      	bne.n	800125e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 800124a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfb8      	it	lt
 8001252:	425b      	neglt	r3, r3
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800125c:	e008      	b.n	8001270 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800125e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001262:	2b00      	cmp	r3, #0
 8001264:	bfb8      	it	lt
 8001266:	425b      	neglt	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	this->_cleanerMotorPWM = 0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	855a      	strh	r2, [r3, #42]	; 0x2a
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fd40 	bl	8003d14 <_ZN4SBUS9getRightYEv>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	855a      	strh	r2, [r3, #42]	; 0x2a

	if(_cleanerMotorPWM > 10){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	dd10      	ble.n	80012d2 <_ZN9Convertor18updateCleanerMotorEv+0x56>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bfb8      	it	lt
 80012ba:	425b      	neglt	r3, r3
 80012bc:	b29c      	uxth	r4, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f9d3 	bl	800266e <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4622      	mov	r2, r4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

	}



}
 80012d0:	e008      	b.n	80012e4 <_ZN9Convertor18updateCleanerMotorEv+0x68>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f9c9 	bl	800266e <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80012dc:	4603      	mov	r3, r0
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <_ZN9Convertor14updateSelectorEv>:



void Convertor::updateSelector(void){
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fd73 	bl	8003de4 <_ZN4SBUS9getRightXEv>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001306:	ee17 3a90 	vmov	r3, s15
 800130a:	b21a      	sxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	859a      	strh	r2, [r3, #44]	; 0x2c

	float cleanerPos = 110;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <_ZN9Convertor14updateSelectorEv+0x8c>)
 8001312:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <_ZN9Convertor14updateSelectorEv+0x90>)
 8001316:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800131e:	2b00      	cmp	r3, #0
 8001320:	dd10      	ble.n	8001344 <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f979 	bl	8002624 <_ZN11Initializer18get_selector_TimerEv>
 8001332:	4602      	mov	r2, r0
 8001334:	2308      	movs	r3, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	230c      	movs	r3, #12
 800133a:	4621      	mov	r1, r4
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe9a 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 8001342:	e014      	b.n	800136e <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800134a:	2b00      	cmp	r3, #0
 800134c:	da0f      	bge.n	800136e <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4618      	mov	r0, r3
 800135a:	f001 f963 	bl	8002624 <_ZN11Initializer18get_selector_TimerEv>
 800135e:	4602      	mov	r2, r0
 8001360:	2308      	movs	r3, #8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	230c      	movs	r3, #12
 8001366:	4621      	mov	r1, r4
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fe84 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	42dc0000 	.word	0x42dc0000
 800137c:	44700000 	.word	0x44700000

08001380 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fc6f 	bl	8003c70 <_ZN4SBUS8getLeftYEv>
 8001392:	eef0 7a40 	vmov.f32	s15, s0
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 3a90 	vmov	r3, s15
 800139e:	b21a      	sxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_pushMotorPWM > 0){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd10      	ble.n	80013d0 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f93f 	bl	800263c <_ZN11Initializer19get_pushMotor_TimerEv>
 80013be:	4602      	mov	r2, r0
 80013c0:	2308      	movs	r3, #8
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2304      	movs	r3, #4
 80013c6:	4621      	mov	r1, r4
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe54 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 80013ce:	e014      	b.n	80013fa <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da0f      	bge.n	80013fa <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 f929 	bl	800263c <_ZN11Initializer19get_pushMotor_TimerEv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	2308      	movs	r3, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2304      	movs	r3, #4
 80013f2:	4621      	mov	r1, r4
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fe3e 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}

08001402 <_ZN9Convertor16updateFluidMotorEv>:

void Convertor::updateFluidMotor(void){
 8001402:	b590      	push	{r4, r7, lr}
 8001404:	b085      	sub	sp, #20
 8001406:	af02      	add	r7, sp, #8
 8001408:	6078      	str	r0, [r7, #4]

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fd50 	bl	8003eb4 <_ZN4SBUS11getJogWheelEv>
 8001414:	eef0 7a40 	vmov.f32	s15, s0
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	b21a      	sxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	861a      	strh	r2, [r3, #48]	; 0x30

	if(_fluidPWM > 0){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd10      	ble.n	8001452 <_ZN9Convertor16updateFluidMotorEv+0x50>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f90a 	bl	8002654 <_ZN11Initializer20get_fluidMotor_TimerEv>
 8001440:	4602      	mov	r2, r0
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2304      	movs	r3, #4
 8001448:	4621      	mov	r1, r4
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fe13 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
	}


}
 8001450:	e014      	b.n	800147c <_ZN9Convertor16updateFluidMotorEv+0x7a>
	}else if(_fluidPWM < 0){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0f      	bge.n	800147c <_ZN9Convertor16updateFluidMotorEv+0x7a>
		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f8f4 	bl	8002654 <_ZN11Initializer20get_fluidMotor_TimerEv>
 800146c:	4602      	mov	r2, r0
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2304      	movs	r3, #4
 8001474:	4621      	mov	r1, r4
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fdfd 	bl	8001076 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <_ZN9Convertor7processEv>:

	return ADC_5_Buffer[1] / 4.095;
}


void Convertor::process(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]


	this->updateLED();
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fd9a 	bl	8000fc6 <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff2a 	bl	80012ec <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff71 	bl	8001380 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffaf 	bl	8001402 <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fee9 	bl	800127c <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fd63 	bl	8000f76 <_ZN9Convertor6getADCEv>

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_+0x34>)
 80014c8:	609a      	str	r2, [r3, #8]

	this->_huart1 = huart1;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	605a      	str	r2, [r3, #4]
	this->initClock();
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f001 f832 	bl	8002540 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 ff89 	bl	80023f4 <_ZN11Initializer8initGPIOEv>
}
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000074c 	.word	0x2000074c

080014f0 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]


	this->initDMA();
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 ff25 	bl	8002348 <_ZN11Initializer7initDMAEv>

	this->initTIM_1();
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f822 	bl	8001548 <_ZN11Initializer9initTIM_1Ev>

	this->initTIM_2();
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f923 	bl	8001750 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f99a 	bl	8001844 <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fa53 	bl	80019bc <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fb32 	bl	8001b80 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fc45 	bl	8001dac <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fd0c 	bl	8001f40 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fd79 	bl	8002020 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fdfe 	bl	8002130 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fe8b 	bl	8002250 <_ZN11Initializer8initI2C2Ev>


    MX_USB_Device_Init();
 800153a:	f013 f933 	bl	80147a4 <MX_USB_Device_Init>


}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <_ZN11Initializer9initTIM_1Ev>:


void Initializer::initTIM_1(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b09e      	sub	sp, #120	; 0x78
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM1_CLK_ENABLE();
 8001550:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001554:	4a7b      	ldr	r2, [pc, #492]	; (8001744 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155a:	6613      	str	r3, [r2, #96]	; 0x60
 800155c:	4b79      	ldr	r3, [pc, #484]	; (8001744 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001568:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2234      	movs	r2, #52	; 0x34
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f013 fec0 	bl	8015324 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a68      	ldr	r2, [pc, #416]	; (8001748 <_ZN11Initializer9initTIM_1Ev+0x200>)
 80015a8:	60da      	str	r2, [r3, #12]
	  htim1.Init.Prescaler = 8;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2208      	movs	r2, #8
 80015ae:	611a      	str	r2, [r3, #16]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
	  htim1.Init.Period = 1080;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80015bc:	619a      	str	r2, [r3, #24]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
	  htim1.Init.RepetitionCounter = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	330c      	adds	r3, #12
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00c fa4b 	bl	800da70 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <_ZN11Initializer9initTIM_1Ev+0xae>
	  {
	    this->Error_Handler();
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f001 f85a 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80015f0:	4856      	ldr	r0, [pc, #344]	; (800174c <_ZN11Initializer9initTIM_1Ev+0x204>)
 80015f2:	f014 fb09 	bl	8015c08 <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	330c      	adds	r3, #12
 8001600:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f00c fd06 	bl	800e018 <HAL_TIM_ConfigClockSource>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <_ZN11Initializer9initTIM_1Ev+0xda>
	  {
	    Error_Handler();
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 f841 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	330c      	adds	r3, #12
 8001626:	4618      	mov	r0, r3
 8001628:	f00c fa79 	bl	800db1e <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <_ZN11Initializer9initTIM_1Ev+0x100>
	  {
	    this->Error_Handler();
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f001 f831 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001642:	4842      	ldr	r0, [pc, #264]	; (800174c <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001644:	f014 fae0 	bl	8015c08 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	330c      	adds	r3, #12
 8001658:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f00d fb46 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <_ZN11Initializer9initTIM_1Ev+0x132>
	  {
	    this->Error_Handler();
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f001 f815 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167a:	2360      	movs	r3, #96	; 0x60
 800167c:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001682:	2300      	movs	r3, #0
 8001684:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	330c      	adds	r3, #12
 800169a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800169e:	2208      	movs	r2, #8
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00c fba5 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <_ZN11Initializer9initTIM_1Ev+0x17a>
	  {
	    this->Error_Handler();
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fff4 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <_ZN11Initializer9initTIM_1Ev+0x204>)
 80016be:	f014 faa3 	bl	8015c08 <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016da:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	330c      	adds	r3, #12
 80016fe:	f107 020c 	add.w	r2, r7, #12
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f00d fb89 	bl	800ee1c <HAL_TIMEx_ConfigBreakDeadTime>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <_ZN11Initializer9initTIM_1Ev+0x1de>
	  {
	    this->Error_Handler();
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 ffc2 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001722:	f014 fa71 	bl	8015c08 <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	330c      	adds	r3, #12
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fa62 	bl	8005bf4 <HAL_TIM_MspPostInit>
	   * These signals are used to drive a full-bridge inverter, which is a common configuration for driving
	   * motor loads. In this case, the function starts the	   *  timer channel's complementary output
	   *  (marked as "PWMN" in the function name) for the specified timer. */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	330c      	adds	r3, #12
 8001734:	2108      	movs	r1, #8
 8001736:	4618      	mov	r0, r3
 8001738:	f00d fa18 	bl	800eb6c <HAL_TIMEx_PWMN_Start>


}
 800173c:	bf00      	nop
 800173e:	3778      	adds	r7, #120	; 0x78
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	40012c00 	.word	0x40012c00
 800174c:	08017e78 	.word	0x08017e78

08001750 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001778:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	  htim2.Init.Prescaler = 0;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  htim2.Init.Period = 4.294967295E9;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f04f 32ff 	mov.w	r2, #4294967295
 8001792:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00c f95f 	bl	800da70 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf14      	ite	ne
 80017b8:	2301      	movne	r3, #1
 80017ba:	2300      	moveq	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <_ZN11Initializer9initTIM_2Ev+0x7e>
	  {
	    this->Error_Handler();
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 ff6e 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80017c8:	481d      	ldr	r0, [pc, #116]	; (8001840 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80017ca:	f014 fa1d 	bl	8015c08 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017da:	f107 0218 	add.w	r2, r7, #24
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00c fc19 	bl	800e018 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <_ZN11Initializer9initTIM_2Ev+0xb2>
	  {
	    this->Error_Handler();
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 ff54 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80017fc:	4810      	ldr	r0, [pc, #64]	; (8001840 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80017fe:	f014 fa03 	bl	8015c08 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f00d fa6a 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <_ZN11Initializer9initTIM_2Ev+0xe8>
	  {
	    this->Error_Handler();
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 ff39 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001832:	4803      	ldr	r0, [pc, #12]	; (8001840 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001834:	f014 f9e8 	bl	8015c08 <iprintf>

	  }


}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	08017e90 	.word	0x08017e90

08001844 <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 800184c:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]


	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a4b      	ldr	r2, [pc, #300]	; (80019b4 <_ZN11Initializer9initTIM_3Ev+0x170>)
 8001888:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  htim3.Init.Prescaler = 0;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	  htim3.Init.Period = 1000;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018a2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80018bc:	4618      	mov	r0, r3
 80018be:	f00c f92e 	bl	800db1e <HAL_TIM_PWM_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <_ZN11Initializer9initTIM_3Ev+0x9a>
	  {
	    this->Error_Handler();
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fee6 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 80018d8:	4837      	ldr	r0, [pc, #220]	; (80019b8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 80018da:	f014 f995 	bl	8015c08 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80018ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00d f9fc 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <_ZN11Initializer9initTIM_3Ev+0xd0>
	  {
	    this->Error_Handler();
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fecb 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800190e:	482a      	ldr	r0, [pc, #168]	; (80019b8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001910:	f014 f97a 	bl	8015c08 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	; 0x60
 8001916:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800192a:	f107 0110 	add.w	r1, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f00c fa5d 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <_ZN11Initializer9initTIM_3Ev+0x10e>
	  {
	    this->Error_Handler();
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 feac 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800194c:	481a      	ldr	r0, [pc, #104]	; (80019b8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 800194e:	f014 f95b 	bl	8015c08 <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001958:	f107 0110 	add.w	r1, r7, #16
 800195c:	2204      	movs	r2, #4
 800195e:	4618      	mov	r0, r3
 8001960:	f00c fa46 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf14      	ite	ne
 800196a:	2301      	movne	r3, #1
 800196c:	2300      	moveq	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <_ZN11Initializer9initTIM_3Ev+0x13c>
	  {
	    this->Error_Handler();
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fe95 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 800197a:	480f      	ldr	r0, [pc, #60]	; (80019b8 <_ZN11Initializer9initTIM_3Ev+0x174>)
 800197c:	f014 f944 	bl	8015c08 <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001986:	4618      	mov	r0, r3
 8001988:	f004 f934 	bl	8005bf4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f00c f919 	bl	800dbcc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80019a0:	2104      	movs	r1, #4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00c f912 	bl	800dbcc <HAL_TIM_PWM_Start>



}
 80019a8:	bf00      	nop
 80019aa:	3738      	adds	r7, #56	; 0x38
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40000400 	.word	0x40000400
 80019b8:	08017ea8 	.word	0x08017ea8

080019bc <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b092      	sub	sp, #72	; 0x48
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6593      	str	r3, [r2, #88]	; 0x58
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a5a      	ldr	r2, [pc, #360]	; (8001b78 <_ZN11Initializer9initTIM_4Ev+0x1bc>)
 8001a0e:	659a      	str	r2, [r3, #88]	; 0x58
	  htim4.Init.Prescaler = 2;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	661a      	str	r2, [r3, #96]	; 0x60
	  htim4.Init.Period = 1000;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a22:	665a      	str	r2, [r3, #100]	; 0x64
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	669a      	str	r2, [r3, #104]	; 0x68
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	671a      	str	r2, [r3, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3358      	adds	r3, #88	; 0x58
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00c f81b 	bl	800da70 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <_ZN11Initializer9initTIM_4Ev+0x9a>
	  {
	    this->Error_Handler();
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fe2a 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001a50:	484a      	ldr	r0, [pc, #296]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001a52:	f014 f8d9 	bl	8015c08 <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3358      	adds	r3, #88	; 0x58
 8001a60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00c fad6 	bl	800e018 <HAL_TIM_ConfigClockSource>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <_ZN11Initializer9initTIM_4Ev+0xcc>
	  {
	    this->Error_Handler();
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fe11 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001a82:	483e      	ldr	r0, [pc, #248]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001a84:	f014 f8c0 	bl	8015c08 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3358      	adds	r3, #88	; 0x58
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00c f846 	bl	800db1e <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <_ZN11Initializer9initTIM_4Ev+0xf2>
	  {
	    this->Error_Handler();
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fdfe 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001aa8:	4834      	ldr	r0, [pc, #208]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001aaa:	f014 f8ad 	bl	8015c08 <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3358      	adds	r3, #88	; 0x58
 8001aba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00d f915 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <_ZN11Initializer9initTIM_4Ev+0x126>
	  {
	    this->Error_Handler();
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fde4 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001adc:	4827      	ldr	r0, [pc, #156]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001ade:	f014 f893 	bl	8015c08 <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3358      	adds	r3, #88	; 0x58
 8001af6:	f107 0110 	add.w	r1, r7, #16
 8001afa:	2204      	movs	r2, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00c f977 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <_ZN11Initializer9initTIM_4Ev+0x162>
	  {
	    this->Error_Handler();
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fdc6 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b18:	4818      	ldr	r0, [pc, #96]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001b1a:	f014 f875 	bl	8015c08 <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3358      	adds	r3, #88	; 0x58
 8001b22:	f107 0110 	add.w	r1, r7, #16
 8001b26:	2208      	movs	r2, #8
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00c f961 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf14      	ite	ne
 8001b34:	2301      	movne	r3, #1
 8001b36:	2300      	moveq	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <_ZN11Initializer9initTIM_4Ev+0x18e>
	  {
	    this->Error_Handler();
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fdb0 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001b46:	f014 f85f 	bl	8015c08 <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3358      	adds	r3, #88	; 0x58
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 f850 	bl	8005bf4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3358      	adds	r3, #88	; 0x58
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00c f836 	bl	800dbcc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3358      	adds	r3, #88	; 0x58
 8001b64:	2104      	movs	r1, #4
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00c f830 	bl	800dbcc <HAL_TIM_PWM_Start>


}
 8001b6c:	bf00      	nop
 8001b6e:	3748      	adds	r7, #72	; 0x48
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	08017ec0 	.word	0x08017ec0

08001b80 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b09e      	sub	sp, #120	; 0x78
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001b88:	4b86      	ldr	r3, [pc, #536]	; (8001da4 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8c:	4a85      	ldr	r2, [pc, #532]	; (8001da4 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b92:	6613      	str	r3, [r2, #96]	; 0x60
 8001b94:	4b83      	ldr	r3, [pc, #524]	; (8001da4 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2234      	movs	r2, #52	; 0x34
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f013 fba4 	bl	8015324 <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <_ZN11Initializer9initTIM_8Ev+0x228>)
 8001be0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim8.Init.Prescaler = 2;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim8.Init.Period = 1000;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bfa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim8.Init.RepetitionCounter = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	33f0      	adds	r3, #240	; 0xf0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00b ff28 	bl	800da70 <HAL_TIM_Base_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf14      	ite	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	2300      	moveq	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <_ZN11Initializer9initTIM_8Ev+0xb6>
	  {
	    Error_Handler();
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fd37 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	33f0      	adds	r3, #240	; 0xf0
 8001c40:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00c f9e6 	bl	800e018 <HAL_TIM_ConfigClockSource>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <_ZN11Initializer9initTIM_8Ev+0xe2>
	  {
	    Error_Handler();
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fd21 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	33f0      	adds	r3, #240	; 0xf0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00b ff59 	bl	800db1e <HAL_TIM_PWM_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <_ZN11Initializer9initTIM_8Ev+0x102>
	  {
	    Error_Handler();
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fd11 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	33f0      	adds	r3, #240	; 0xf0
 8001c92:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00d f829 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <_ZN11Initializer9initTIM_8Ev+0x134>
	  {
	    Error_Handler();
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fcf8 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb4:	2360      	movs	r3, #96	; 0x60
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	33f0      	adds	r3, #240	; 0xf0
 8001cd4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001cd8:	2208      	movs	r2, #8
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00c f888 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <_ZN11Initializer9initTIM_8Ev+0x176>
	  {
	    Error_Handler();
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fcd7 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	33f0      	adds	r3, #240	; 0xf0
 8001cfa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001cfe:	220c      	movs	r2, #12
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00c f875 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <_ZN11Initializer9initTIM_8Ev+0x19c>
	  {
	    Error_Handler();
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fcc4 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d34:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	33f0      	adds	r3, #240	; 0xf0
 8001d58:	f107 020c 	add.w	r2, r7, #12
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00d f85c 	bl	800ee1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <_ZN11Initializer9initTIM_8Ev+0x1fa>
	  {
	    Error_Handler();
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fc95 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	33f0      	adds	r3, #240	; 0xf0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 ff38 	bl	8005bf4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	33f0      	adds	r3, #240	; 0xf0
 8001d88:	2108      	movs	r1, #8
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00b ff1e 	bl	800dbcc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	33f0      	adds	r3, #240	; 0xf0
 8001d94:	210c      	movs	r1, #12
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00c fee8 	bl	800eb6c <HAL_TIMEx_PWMN_Start>




}
 8001d9c:	bf00      	nop
 8001d9e:	3778      	adds	r7, #120	; 0x78
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40013400 	.word	0x40013400

08001dac <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b098      	sub	sp, #96	; 0x60
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8001db4:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db8:	4a5e      	ldr	r2, [pc, #376]	; (8001f34 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc0:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	615a      	str	r2, [r3, #20]
 8001dde:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2234      	movs	r2, #52	; 0x34
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f013 fa9b 	bl	8015324 <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a51      	ldr	r2, [pc, #324]	; (8001f38 <_ZN11Initializer10initTIM_16Ev+0x18c>)
 8001df2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim16.Init.Prescaler = 128;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim16.Init.Period = 1000;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  htim16.Init.RepetitionCounter = 0;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	33a4      	adds	r3, #164	; 0xa4
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00b fe1f 	bl	800da70 <HAL_TIM_Base_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fc2e 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e48:	483c      	ldr	r0, [pc, #240]	; (8001f3c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001e4a:	f013 fedd 	bl	8015c08 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	33a4      	adds	r3, #164	; 0xa4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00b fe63 	bl	800db1e <HAL_TIM_PWM_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf14      	ite	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	2300      	moveq	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fc1b 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001e6e:	4833      	ldr	r0, [pc, #204]	; (8001f3c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001e70:	f013 feca 	bl	8015c08 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e74:	2360      	movs	r3, #96	; 0x60
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e80:	2300      	movs	r3, #0
 8001e82:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	33a4      	adds	r3, #164	; 0xa4
 8001e94:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00b ffa8 	bl	800ddf0 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fbf7 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001eb6:	4821      	ldr	r0, [pc, #132]	; (8001f3c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001eb8:	f013 fea6 	bl	8015c08 <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	33a4      	adds	r3, #164	; 0xa4
 8001ee2:	f107 0210 	add.w	r2, r7, #16
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00c ff97 	bl	800ee1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fbd0 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001f06:	f013 fe7f 	bl	8015c08 <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	33a4      	adds	r3, #164	; 0xa4
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fe70 	bl	8005bf4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	33a4      	adds	r3, #164	; 0xa4
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00b fe56 	bl	800dbcc <HAL_TIM_PWM_Start>
	  //set to zero...
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34





}
 8001f2a:	bf00      	nop
 8001f2c:	3760      	adds	r7, #96	; 0x60
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40014400 	.word	0x40014400
 8001f3c:	08017ed8 	.word	0x08017ed8

08001f40 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09c      	sub	sp, #112	; 0x70
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <_ZN11Initializer10initTIM_20Ev+0xd8>)
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 8001f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00b fd73 	bl	800da70 <HAL_TIM_Base_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fb82 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001fa0:	481e      	ldr	r0, [pc, #120]	; (800201c <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001fa2:	f013 fe31 	bl	8015c08 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001faa:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001fac:	f107 0214 	add.w	r2, r7, #20
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00c f82e 	bl	800e018 <HAL_TIM_ConfigClockSource>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf14      	ite	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	2300      	moveq	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fb69 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001fd2:	4812      	ldr	r0, [pc, #72]	; (800201c <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8001fd4:	f013 fe18 	bl	8015c08 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001fe4:	f107 0208 	add.w	r2, r7, #8
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f00c fe7e 	bl	800ecf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fb4d 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <_ZN11Initializer10initTIM_20Ev+0xdc>)
 800200c:	f013 fdfc 	bl	8015c08 <iprintf>

	  }



}
 8002010:	bf00      	nop
 8002012:	3770      	adds	r7, #112	; 0x70
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40015000 	.word	0x40015000
 800201c:	08017ed8 	.word	0x08017ed8

08002020 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <_ZN11Initializer11initUSART_1Ev+0x108>)
 800202e:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002038:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	220c      	movs	r2, #12
 8002058:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f00c ff9f 	bl	800efca <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fb01 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80020a2:	4822      	ldr	r0, [pc, #136]	; (800212c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80020a4:	f013 fdb0 	bl	8015c08 <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00e fb3a 	bl	8010728 <HAL_UARTEx_SetTxFifoThreshold>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 faed 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80020ca:	4818      	ldr	r0, [pc, #96]	; (800212c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80020cc:	f013 fd9c 	bl	8015c08 <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00e fb64 	bl	80107a4 <HAL_UARTEx_SetRxFifoThreshold>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fad9 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80020f2:	480e      	ldr	r0, [pc, #56]	; (800212c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80020f4:	f013 fd88 	bl	8015c08 <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f00e fada 	bl	80106b6 <HAL_UARTEx_DisableFifoMode>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fac6 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <_ZN11Initializer11initUSART_1Ev+0x10c>)
 800211a:	f013 fd75 	bl	8015c08 <iprintf>

	  }



}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40013800 	.word	0x40013800
 800212c:	08017ef0 	.word	0x08017ef0

08002130 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a41      	ldr	r2, [pc, #260]	; (8002244 <_ZN11Initializer11initUSART_2Ev+0x114>)
 800213e:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a40      	ldr	r2, [pc, #256]	; (8002248 <_ZN11Initializer11initUSART_2Ev+0x118>)
 8002146:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002150:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002162:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	220c      	movs	r2, #12
 800216a:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2202      	movs	r2, #2
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00c ff11 	bl	800efca <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fa73 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80021be:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80021c0:	f013 fd22 	bl	8015c08 <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00e faac 	bl	8010728 <HAL_UARTEx_SetTxFifoThreshold>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fa5f 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80021e6:	4819      	ldr	r0, [pc, #100]	; (800224c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80021e8:	f013 fd0e 	bl	8015c08 <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00e fad6 	bl	80107a4 <HAL_UARTEx_SetRxFifoThreshold>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fa4b 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 800220e:	480f      	ldr	r0, [pc, #60]	; (800224c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002210:	f013 fcfa 	bl	8015c08 <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	f00e fa4c 	bl	80106b6 <HAL_UARTEx_DisableFifoMode>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa38 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002236:	f013 fce7 	bl	8015c08 <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40004400 	.word	0x40004400
 8002248:	000186a0 	.word	0x000186a0
 800224c:	08017f04 	.word	0x08017f04

08002250 <_ZN11Initializer8initI2C2Ev>:

void Initializer::initI2C2(void){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

	  hi2c_ptr->Instance = I2C2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a36      	ldr	r2, [pc, #216]	; (8002338 <_ZN11Initializer8initI2C2Ev+0xe8>)
 800225e:	601a      	str	r2, [r3, #0]
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a35      	ldr	r2, [pc, #212]	; (800233c <_ZN11Initializer8initI2C2Ev+0xec>)
 8002266:	605a      	str	r2, [r3, #4]
	  hi2c_ptr->Init.OwnAddress1 = 0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
	  hi2c_ptr->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2201      	movs	r2, #1
 8002276:	60da      	str	r2, [r3, #12]
	  hi2c_ptr->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
	  hi2c_ptr->Init.OwnAddress2 = 0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
	  hi2c_ptr->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
	  hi2c_ptr->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	61da      	str	r2, [r3, #28]
	  hi2c_ptr->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(hi2c_ptr) != HAL_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 fff1 	bl	800928c <HAL_I2C_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <_ZN11Initializer8initI2C2Ev+0x76>
	  {
	    Error_Handler();
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f9f2 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80022c0:	481f      	ldr	r0, [pc, #124]	; (8002340 <_ZN11Initializer8initI2C2Ev+0xf0>)
 80022c2:	f013 fca1 	bl	8015c08 <iprintf>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(hi2c_ptr, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f008 fbb7 	bl	800aa40 <HAL_I2CEx_ConfigAnalogFilter>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <_ZN11Initializer8initI2C2Ev+0x9e>
	  {
	    this->Error_Handler();
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f9de 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80022e8:	4815      	ldr	r0, [pc, #84]	; (8002340 <_ZN11Initializer8initI2C2Ev+0xf0>)
 80022ea:	f013 fc8d 	bl	8015c08 <iprintf>

	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(hi2c_ptr, 0) != HAL_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f008 fbee 	bl	800aad6 <HAL_I2CEx_ConfigDigitalFilter>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <_ZN11Initializer8initI2C2Ev+0xc6>
	  {
	    this->Error_Handler();
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9ca 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <_ZN11Initializer8initI2C2Ev+0xf0>)
 8002312:	f013 fc79 	bl	8015c08 <iprintf>

	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */
	  __HAL_RCC_I2C2_CLK_ENABLE();
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <_ZN11Initializer8initI2C2Ev+0xf4>)
 800231c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]


}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40005800 	.word	0x40005800
 800233c:	20a0c4df 	.word	0x20a0c4df
 8002340:	08017f18 	.word	0x08017f18
 8002344:	40021000 	.word	0x40021000

08002348 <_ZN11Initializer7initDMAEv>:




void Initializer::initDMA(void){
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6493      	str	r3, [r2, #72]	; 0x48
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 800235e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6493      	str	r3, [r2, #72]	; 0x48
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 8002376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 8002382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	6493      	str	r3, [r2, #72]	; 0x48
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <_ZN11Initializer7initDMAEv+0xa8>)
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	200b      	movs	r0, #11
 800239e:	f006 f882 	bl	80084a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023a2:	200b      	movs	r0, #11
 80023a4:	f006 f899 	bl	80084da <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	200c      	movs	r0, #12
 80023ae:	f006 f87a 	bl	80084a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80023b2:	200c      	movs	r0, #12
 80023b4:	f006 f891 	bl	80084da <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	200d      	movs	r0, #13
 80023be:	f006 f872 	bl	80084a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80023c2:	200d      	movs	r0, #13
 80023c4:	f006 f889 	bl	80084da <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	200e      	movs	r0, #14
 80023ce:	f006 f86a 	bl	80084a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80023d2:	200e      	movs	r0, #14
 80023d4:	f006 f881 	bl	80084da <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	2038      	movs	r0, #56	; 0x38
 80023de:	f006 f862 	bl	80084a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80023e2:	2038      	movs	r0, #56	; 0x38
 80023e4:	f006 f879 	bl	80084da <HAL_NVIC_EnableIRQ>

}
 80023e8:	bf00      	nop
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000

080023f4 <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	4b48      	ldr	r3, [pc, #288]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	4a47      	ldr	r2, [pc, #284]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002428:	4a41      	ldr	r2, [pc, #260]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800242a:	f043 0320 	orr.w	r3, r3, #32
 800242e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800244a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a35      	ldr	r2, [pc, #212]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <_ZN11Initializer8initGPIOEv+0x13c>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800248a:	482a      	ldr	r0, [pc, #168]	; (8002534 <_ZN11Initializer8initGPIOEv+0x140>)
 800248c:	f006 fecc 	bl	8009228 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	2102      	movs	r1, #2
 8002494:	4828      	ldr	r0, [pc, #160]	; (8002538 <_ZN11Initializer8initGPIOEv+0x144>)
 8002496:	f006 fec7 	bl	8009228 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a0:	4826      	ldr	r0, [pc, #152]	; (800253c <_ZN11Initializer8initGPIOEv+0x148>)
 80024a2:	f006 fec1 	bl	8009228 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2110      	movs	r1, #16
 80024aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ae:	f006 febb 	bl	8009228 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 80024b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024b6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	4619      	mov	r1, r3
 80024ca:	481a      	ldr	r0, [pc, #104]	; (8002534 <_ZN11Initializer8initGPIOEv+0x140>)
 80024cc:	f006 fd2a 	bl	8008f24 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 80024d0:	2302      	movs	r3, #2
 80024d2:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	4814      	ldr	r0, [pc, #80]	; (8002538 <_ZN11Initializer8initGPIOEv+0x144>)
 80024e8:	f006 fd1c 	bl	8008f24 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 80024ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4619      	mov	r1, r3
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <_ZN11Initializer8initGPIOEv+0x148>)
 8002506:	f006 fd0d 	bl	8008f24 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800250a:	2310      	movs	r3, #16
 800250c:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250e:	2301      	movs	r3, #1
 8002510:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002524:	f006 fcfe 	bl	8008f24 <HAL_GPIO_Init>

}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	48000800 	.word	0x48000800
 8002538:	48001400 	.word	0x48001400
 800253c:	48001800 	.word	0x48001800

08002540 <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 8002540:	b580      	push	{r7, lr}
 8002542:	b096      	sub	sp, #88	; 0x58
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002548:	f107 0320 	add.w	r3, r7, #32
 800254c:	2238      	movs	r2, #56	; 0x38
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f012 fee7 	bl	8015324 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002566:	f44f 7000 	mov.w	r0, #512	; 0x200
 800256a:	f00a fa5b 	bl	800ca24 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800256e:	2322      	movs	r3, #34	; 0x22
 8002570:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002578:	2340      	movs	r3, #64	; 0x40
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800257c:	2301      	movs	r3, #1
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002580:	2302      	movs	r3, #2
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002584:	2302      	movs	r3, #2
 8002586:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002588:	2301      	movs	r3, #1
 800258a:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 800258c:	2310      	movs	r3, #16
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002590:	2302      	movs	r3, #2
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002594:	2302      	movs	r3, #2
 8002596:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002598:	2302      	movs	r3, #2
 800259a:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259c:	f107 0320 	add.w	r3, r7, #32
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00a fae3 	bl	800cb6c <HAL_RCC_OscConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f874 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80025bc:	4812      	ldr	r0, [pc, #72]	; (8002608 <_ZN11Initializer9initClockEv+0xc8>)
 80025be:	f013 fb23 	bl	8015c08 <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c2:	230f      	movs	r3, #15
 80025c4:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c6:	2303      	movs	r3, #3
 80025c8:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	2103      	movs	r1, #3
 80025dc:	4618      	mov	r0, r3
 80025de:	f00a fddd 	bl	800d19c <HAL_RCC_ClockConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f856 	bl	80026a4 <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <_ZN11Initializer9initClockEv+0xc8>)
 80025fa:	f013 fb05 	bl	8015c08 <iprintf>

	  }


}
 80025fe:	bf00      	nop
 8002600:	3758      	adds	r7, #88	; 0x58
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	08017f2c 	.word	0x08017f2c

0800260c <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

	return &htim16;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	33a4      	adds	r3, #164	; 0xa4

}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_ZN11Initializer18get_selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_selector_Timer(void){
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

	return &htim8;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	33f0      	adds	r3, #240	; 0xf0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_ZN11Initializer19get_pushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_pushMotor_Timer(void){
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

	return &htim4;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3358      	adds	r3, #88	; 0x58
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_ZN11Initializer20get_fluidMotor_TimerEv>:


TIM_HandleTypeDef* Initializer::get_fluidMotor_Timer(void){
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

	return &htim3;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f503 739e 	add.w	r3, r3, #316	; 0x13c

}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_ZN11Initializer22get_cleanerMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_cleanerMotor_Timer(void){
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]

	return &htim1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	330c      	adds	r3, #12

}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <_ZN11Initializer7get_i2cEv>:

I2C_HandleTypeDef* Initializer::get_i2c(void){
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

	return &hi2c2;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <_ZN11Initializer7get_i2cEv+0x18>)
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000074c 	.word	0x2000074c

080026a4 <_ZN11Initializer13Error_HandlerEv>:



void Initializer::Error_Handler(void){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b1d      	cmp	r3, #29
 80026b4:	d80e      	bhi.n	80026d4 <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80026b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ba:	4808      	ldr	r0, [pc, #32]	; (80026dc <_ZN11Initializer13Error_HandlerEv+0x38>)
 80026bc:	f006 fdcc 	bl	8009258 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80026c0:	2032      	movs	r0, #50	; 0x32
 80026c2:	f003 febb 	bl	800643c <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <_ZN11Initializer13Error_HandlerEv+0x3c>)
 80026c8:	f013 fb24 	bl	8015d14 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	3301      	adds	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e7ed      	b.n	80026b0 <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	48000800 	.word	0x48000800
 80026e0:	08017f4c 	.word	0x08017f4c

080026e4 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4053      	eors	r3, r2
 80026fa:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	b25a      	sxtb	r2, r3
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4053      	eors	r3, r2
 8002708:	b25b      	sxtb	r3, r3
 800270a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21a      	sxth	r2, r3
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21b      	sxth	r3, r3
 800271c:	4053      	eors	r3, r2
 800271e:	b21a      	sxth	r2, r3
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	b21b      	sxth	r3, r3
 8002726:	4053      	eors	r3, r2
 8002728:	b21a      	sxth	r2, r3
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	b2db      	uxtb	r3, r3
 8002730:	b21b      	sxth	r3, r3
 8002732:	4053      	eors	r3, r2
 8002734:	b21b      	sxth	r3, r3
 8002736:	b29a      	uxth	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	801a      	strh	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002756:	801a      	strh	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8002770:	f107 030e 	add.w	r3, r7, #14
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ffe7 	bl	8002748 <crc_init>
	while (length--) {
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	1e5a      	subs	r2, r3, #1
 800277e:	807a      	strh	r2, [r7, #2]
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	f107 020e 	add.w	r2, r7, #14
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ffa1 	bl	80026e4 <crc_accumulate>
	while (length--) {
 80027a2:	e7ea      	b.n	800277a <crc_calculate+0x16>
        }
        return crcTmp;
 80027a4:	89fb      	ldrh	r3, [r7, #14]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	617b      	str	r3, [r7, #20]
	while (length--) {
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	1e5a      	subs	r2, r3, #1
 80027c4:	80fa      	strh	r2, [r7, #6]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	617a      	str	r2, [r7, #20]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff80 	bl	80026e4 <crc_accumulate>
	while (length--) {
 80027e4:	e7ec      	b.n	80027c0 <crc_accumulate_buffer+0x12>
        }
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <mavlink_sha256_init+0x50>)
 8002808:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <mavlink_sha256_init+0x54>)
 800280e:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <mavlink_sha256_init+0x58>)
 8002814:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <mavlink_sha256_init+0x5c>)
 800281a:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <mavlink_sha256_init+0x60>)
 8002820:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <mavlink_sha256_init+0x64>)
 8002826:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <mavlink_sha256_init+0x68>)
 800282c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <mavlink_sha256_init+0x6c>)
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	6a09e667 	.word	0x6a09e667
 8002844:	bb67ae85 	.word	0xbb67ae85
 8002848:	3c6ef372 	.word	0x3c6ef372
 800284c:	a54ff53a 	.word	0xa54ff53a
 8002850:	510e527f 	.word	0x510e527f
 8002854:	9b05688c 	.word	0x9b05688c
 8002858:	1f83d9ab 	.word	0x1f83d9ab
 800285c:	5be0cd19 	.word	0x5be0cd19

08002860 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002860:	b480      	push	{r7}
 8002862:	b0cf      	sub	sp, #316	; 0x13c
 8002864:	af00      	add	r7, sp, #0
 8002866:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800286a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800286e:	6018      	str	r0, [r3, #0]
 8002870:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002874:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002878:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800287a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800287e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 800288a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800288e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 800289a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800289e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80028aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 80028ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80028ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80028da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80028ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002904:	2b0f      	cmp	r3, #15
 8002906:	dc17      	bgt.n	8002938 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 8002908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002912:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	4413      	add	r3, r2
 800291a:	6819      	ldr	r1, [r3, #0]
 800291c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002924:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 800292c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002936:	e7e3      	b.n	8002900 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8002938:	2310      	movs	r3, #16
 800293a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800293e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002942:	2b3f      	cmp	r3, #63	; 0x3f
 8002944:	dc6a      	bgt.n	8002a1c <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800294a:	1e9a      	subs	r2, r3, #2
 800294c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	ea4f 4273 	mov.w	r2, r3, ror #17
 800295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002960:	1e99      	subs	r1, r3, #2
 8002962:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800296a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800296e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002972:	405a      	eors	r2, r3
 8002974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002978:	1e99      	subs	r1, r3, #2
 800297a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800297e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002986:	0a9b      	lsrs	r3, r3, #10
 8002988:	405a      	eors	r2, r3
 800298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800298e:	1fd9      	subs	r1, r3, #7
 8002990:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002998:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800299c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800299e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a2:	f1a3 010f 	sub.w	r1, r3, #15
 80029a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029b2:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80029b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ba:	f1a3 000f 	sub.w	r0, r3, #15
 80029be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029ca:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80029ce:	4059      	eors	r1, r3
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029d4:	f1a3 000f 	sub.w	r0, r3, #15
 80029d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80029e8:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80029ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ee:	f1a3 0110 	sub.w	r1, r3, #16
 80029f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029fe:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a08:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a14:	3301      	adds	r3, #1
 8002a16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a1a:	e790      	b.n	800293e <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a26:	2b3f      	cmp	r3, #63	; 0x3f
 8002a28:	dc79      	bgt.n	8002b1e <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002a2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a2e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002a32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a36:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002a3a:	405a      	eors	r2, r3
 8002a3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a40:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002a44:	405a      	eors	r2, r3
 8002a46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002a4a:	441a      	add	r2, r3
 8002a4c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002a50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a54:	4019      	ands	r1, r3
 8002a56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a5a:	43d8      	mvns	r0, r3
 8002a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a60:	4003      	ands	r3, r0
 8002a62:	404b      	eors	r3, r1
 8002a64:	441a      	add	r2, r3
 8002a66:	496d      	ldr	r1, [pc, #436]	; (8002c1c <mavlink_sha256_calc+0x3bc>)
 8002a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a70:	441a      	add	r2, r3
 8002a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a7a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002a7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a82:	4413      	add	r3, r2
 8002a84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002a88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a8c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002a90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a94:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002a98:	405a      	eors	r2, r3
 8002a9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a9e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002aa2:	405a      	eors	r2, r3
 8002aa4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002aac:	4059      	eors	r1, r3
 8002aae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ab2:	4019      	ands	r1, r3
 8002ab4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002abc:	4003      	ands	r3, r0
 8002abe:	404b      	eors	r3, r1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8002ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ad2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002ad6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ada:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002ade:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002ae2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002af0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002af8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002afc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002b04:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b16:	3301      	adds	r3, #1
 8002b18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b1c:	e781      	b.n	8002a22 <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8002b1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b2e:	441a      	add	r2, r3
 8002b30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002b3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b4c:	441a      	add	r2, r3
 8002b4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002b5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002b78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b88:	441a      	add	r2, r3
 8002b8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b8e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002b96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b9a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ba6:	441a      	add	r2, r3
 8002ba8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002bb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bb8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bc4:	441a      	add	r2, r3
 8002bc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002bd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bd6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002be2:	441a      	add	r2, r3
 8002be4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002be8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002bf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bf4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c00:	441a      	add	r2, r3
 8002c02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c0e:	bf00      	nop
 8002c10:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	08018334 	.word	0x08018334

08002c20 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b09c      	sub	sp, #112	; 0x70
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	441a      	add	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d904      	bls.n	8002c58 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c60:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d058      	beq.n	8002d1a <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8002c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002c6e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d201      	bcs.n	8002c7c <mavlink_sha256_update+0x5c>
            l = len;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c84:	4413      	add	r3, r2
 8002c86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c88:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f012 fb3c 	bl	8015308 <memcpy>
	offset += l;
 8002c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c94:	4413      	add	r3, r2
 8002c96:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8002c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c9c:	4413      	add	r3, r2
 8002c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d1d9      	bne.n	8002c62 <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3328      	adds	r3, #40	; 0x28
 8002cb2:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	dc24      	bgt.n	8002d08 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc4:	4413      	add	r3, r2
 8002cc6:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002cc8:	f107 0210 	add.w	r2, r7, #16
 8002ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd6:	3303      	adds	r3, #3
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cdc:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce0:	1c9a      	adds	r2, r3, #2
 8002ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf8:	3303      	adds	r3, #3
 8002cfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cfc:	7812      	ldrb	r2, [r2, #0]
 8002cfe:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d02:	3301      	adds	r3, #1
 8002d04:	663b      	str	r3, [r7, #96]	; 0x60
 8002d06:	e7d7      	b.n	8002cb8 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff fda6 	bl	8002860 <mavlink_sha256_calc>
	    offset = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002d18:	e7a3      	b.n	8002c62 <mavlink_sha256_update+0x42>
	}
    }
}
 8002d1a:	bf00      	nop
 8002d1c:	3770      	adds	r7, #112	; 0x70
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b098      	sub	sp, #96	; 0x60
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d36:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3a:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8002d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d42:	3301      	adds	r3, #1
 8002d44:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3308      	adds	r3, #8
 8002d4a:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	3301      	adds	r3, #1
 8002d56:	2247      	movs	r2, #71	; 0x47
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f012 fae2 	bl	8015324 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d66:	3307      	adds	r3, #7
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	3360      	adds	r3, #96	; 0x60
 8002d6c:	443b      	add	r3, r7
 8002d6e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0a1a      	lsrs	r2, r3, #8
 8002d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d7a:	3306      	adds	r3, #6
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	3360      	adds	r3, #96	; 0x60
 8002d80:	443b      	add	r3, r7
 8002d82:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0c1a      	lsrs	r2, r3, #16
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8e:	3305      	adds	r3, #5
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	443b      	add	r3, r7
 8002d96:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0e1a      	lsrs	r2, r3, #24
 8002da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da2:	3304      	adds	r3, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	3360      	adds	r3, #96	; 0x60
 8002da8:	443b      	add	r3, r7
 8002daa:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db4:	3303      	adds	r3, #3
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	443b      	add	r3, r7
 8002dbc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0a1a      	lsrs	r2, r3, #8
 8002dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc8:	3302      	adds	r3, #2
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	3360      	adds	r3, #96	; 0x60
 8002dce:	443b      	add	r3, r7
 8002dd0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1a      	lsrs	r2, r3, #16
 8002dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ddc:	3301      	adds	r3, #1
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	3360      	adds	r3, #96	; 0x60
 8002de2:	443b      	add	r3, r7
 8002de4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0e1b      	lsrs	r3, r3, #24
 8002dee:	b2d9      	uxtb	r1, r3
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df6:	4413      	add	r3, r2
 8002df8:	460a      	mov	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8002dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dfe:	f103 0208 	add.w	r2, r3, #8
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff09 	bl	8002c20 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8002e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e10:	78da      	ldrb	r2, [r3, #3]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e1c:	7892      	ldrb	r2, [r2, #2]
 8002e1e:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	3302      	adds	r3, #2
 8002e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e26:	7852      	ldrb	r2, [r2, #1]
 8002e28:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	3303      	adds	r3, #3
 8002e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3304      	adds	r3, #4
 8002e38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e3a:	79d2      	ldrb	r2, [r2, #7]
 8002e3c:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3305      	adds	r3, #5
 8002e42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e44:	7992      	ldrb	r2, [r2, #6]
 8002e46:	701a      	strb	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3760      	adds	r7, #96	; 0x60
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8002e5a:	79fa      	ldrb	r2, [r7, #7]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4a03      	ldr	r2, [pc, #12]	; (8002e74 <mavlink_get_channel_status+0x24>)
 8002e66:	4413      	add	r3, r2
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	20000370 	.word	0x20000370

08002e78 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b0a0      	sub	sp, #128	; 0x80
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <mavlink_sign_packet+0x20>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <mavlink_sign_packet+0x24>
	    return 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e04f      	b.n	8002f3c <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	785a      	ldrb	r2, [r3, #1]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002eaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f107 0110 	add.w	r1, r7, #16
 8002eb6:	2206      	movs	r2, #6
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f012 fa25 	bl	8015308 <memcpy>
	signing->timestamp++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ec4:	1c54      	adds	r4, r2, #1
 8002ec6:	f143 0500 	adc.w	r5, r3, #0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8002ed0:	f107 0318 	add.w	r3, r7, #24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fc8b 	bl	80027f0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f103 0110 	add.w	r1, r3, #16
 8002ee0:	f107 0318 	add.w	r3, r7, #24
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fe9a 	bl	8002c20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	f107 0318 	add.w	r3, r7, #24
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fe93 	bl	8002c20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8002efa:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8002efe:	f107 0318 	add.w	r3, r7, #24
 8002f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fe8a 	bl	8002c20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8002f0c:	f107 0318 	add.w	r3, r7, #24
 8002f10:	2202      	movs	r2, #2
 8002f12:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fe82 	bl	8002c20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8002f1c:	f107 0318 	add.w	r3, r7, #24
 8002f20:	2207      	movs	r2, #7
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fe7b 	bl	8002c20 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1dda      	adds	r2, r3, #7
 8002f2e:	f107 0318 	add.w	r3, r7, #24
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fef4 	bl	8002d22 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8002f3a:	230d      	movs	r3, #13
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3780      	adds	r7, #128	; 0x80
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bdb0      	pop	{r4, r5, r7, pc}

08002f44 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d90a      	bls.n	8002f6c <_mav_trim_payload+0x28>
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <_mav_trim_payload+0x28>
		length--;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8002f6a:	e7f1      	b.n	8002f50 <_mav_trim_payload+0xc>
	}
	return length;
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8002f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7c:	b08f      	sub	sp, #60	; 0x3c
 8002f7e:	af04      	add	r7, sp, #16
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	72fb      	strb	r3, [r7, #11]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7b1b      	ldrb	r3, [r3, #12]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002fa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <mavlink_finalize_message_buffer+0x4e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <mavlink_finalize_message_buffer+0x4e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <mavlink_finalize_message_buffer+0x4e>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <mavlink_finalize_message_buffer+0x50>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8002fce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <mavlink_finalize_message_buffer+0x60>
 8002fd6:	230d      	movs	r3, #13
 8002fd8:	e000      	b.n	8002fdc <mavlink_finalize_message_buffer+0x62>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8002fe0:	230a      	movs	r3, #10
 8002fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8002fe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22fe      	movs	r2, #254	; 0xfe
 8002ff2:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8002ff4:	2306      	movs	r3, #6
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ffa:	e002      	b.n	8003002 <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	22fd      	movs	r2, #253	; 0xfd
 8003000:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003002:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <mavlink_finalize_message_buffer+0x96>
 800300a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800300e:	e009      	b.n	8003024 <mavlink_finalize_message_buffer+0xaa>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	330c      	adds	r3, #12
 8003014:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff92 	bl	8002f44 <_mav_trim_payload>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	7afa      	ldrb	r2, [r7, #11]
 800302c:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	7aba      	ldrb	r2, [r7, #10]
 8003032:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	711a      	strb	r2, [r3, #4]
	if (signing) {
 800303a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	791b      	ldrb	r3, [r3, #4]
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	799a      	ldrb	r2, [r3, #6]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	799b      	ldrb	r3, [r3, #6]
 8003062:	3301      	adds	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	789b      	ldrb	r3, [r3, #2]
 800306e:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	78db      	ldrb	r3, [r3, #3]
 8003074:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8003076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	79db      	ldrb	r3, [r3, #7]
 8003088:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	7a1b      	ldrb	r3, [r3, #8]
 800308e:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	7a5a      	ldrb	r2, [r3, #9]
 8003094:	7a99      	ldrb	r1, [r3, #10]
 8003096:	0209      	lsls	r1, r1, #8
 8003098:	430a      	orrs	r2, r1
 800309a:	7adb      	ldrb	r3, [r3, #11]
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	4313      	orrs	r3, r2
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	777b      	strb	r3, [r7, #29]
 80030a4:	e030      	b.n	8003108 <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	791b      	ldrb	r3, [r3, #4]
 80030aa:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	795b      	ldrb	r3, [r3, #5]
 80030b0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	799b      	ldrb	r3, [r3, #6]
 80030b6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	79db      	ldrb	r3, [r3, #7]
 80030bc:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	7a1b      	ldrb	r3, [r3, #8]
 80030c2:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	7a5a      	ldrb	r2, [r3, #9]
 80030c8:	7a99      	ldrb	r1, [r3, #10]
 80030ca:	0209      	lsls	r1, r1, #8
 80030cc:	430a      	orrs	r2, r1
 80030ce:	7adb      	ldrb	r3, [r3, #11]
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	7a5a      	ldrb	r2, [r3, #9]
 80030dc:	7a99      	ldrb	r1, [r3, #10]
 80030de:	0209      	lsls	r1, r1, #8
 80030e0:	430a      	orrs	r2, r1
 80030e2:	7adb      	ldrb	r3, [r3, #11]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	4313      	orrs	r3, r2
 80030e8:	121b      	asrs	r3, r3, #8
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	7a5a      	ldrb	r2, [r3, #9]
 80030f4:	7a99      	ldrb	r1, [r3, #10]
 80030f6:	0209      	lsls	r1, r1, #8
 80030f8:	430a      	orrs	r2, r1
 80030fa:	7adb      	ldrb	r3, [r3, #11]
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	4313      	orrs	r3, r2
 8003100:	141b      	asrs	r3, r3, #16
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	f107 0318 	add.w	r3, r7, #24
 8003116:	3301      	adds	r3, #1
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fb22 	bl	8002764 <crc_calculate>
 8003120:	4603      	mov	r3, r0
 8003122:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f103 010c 	add.w	r1, r3, #12
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	78db      	ldrb	r3, [r3, #3]
 800312e:	b29a      	uxth	r2, r3
 8003130:	f107 0316 	add.w	r3, r7, #22
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fb3a 	bl	80027ae <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 800313a:	f107 0216 	add.w	r2, r7, #22
 800313e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff facd 	bl	80026e4 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800314a:	8af9      	ldrh	r1, [r7, #22]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	330c      	adds	r3, #12
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	78d2      	ldrb	r2, [r2, #3]
 8003154:	4413      	add	r3, r2
 8003156:	b2ca      	uxtb	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800315a:	8afb      	ldrh	r3, [r7, #22]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	b299      	uxth	r1, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f103 020c 	add.w	r2, r3, #12
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	3301      	adds	r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	b2ca      	uxtb	r2, r1
 8003170:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8003172:	8afa      	ldrh	r2, [r7, #22]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8003178:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01a      	beq.n	80031b6 <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	310c      	adds	r1, #12
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800319a:	4401      	add	r1, r0
 800319c:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80031a0:	f107 0018 	add.w	r0, r7, #24
 80031a4:	9102      	str	r1, [sp, #8]
 80031a6:	9201      	str	r2, [sp, #4]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4633      	mov	r3, r6
 80031ac:	4602      	mov	r2, r0
 80031ae:	4629      	mov	r1, r5
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff fe61 	bl	8002e78 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	78db      	ldrb	r3, [r3, #3]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3302      	adds	r3, #2
 80031d2:	b29b      	uxth	r3, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	372c      	adds	r7, #44	; 0x2c
 80031d8:	46bd      	mov	sp, r7
 80031da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031dc <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	70fb      	strb	r3, [r7, #3]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70bb      	strb	r3, [r7, #2]
 80031f2:	4613      	mov	r3, r2
 80031f4:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80031f6:	787b      	ldrb	r3, [r7, #1]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fe29 	bl	8002e50 <mavlink_get_channel_status>
 80031fe:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8003200:	78ba      	ldrb	r2, [r7, #2]
 8003202:	78f9      	ldrb	r1, [r7, #3]
 8003204:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003208:	9302      	str	r3, [sp, #8]
 800320a:	7f3b      	ldrb	r3, [r7, #28]
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	7e3b      	ldrb	r3, [r7, #24]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff feb0 	bl	8002f7a <mavlink_finalize_message_buffer>
 800321a:	4603      	mov	r3, r0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af04      	add	r7, sp, #16
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	460b      	mov	r3, r1
 8003238:	70bb      	strb	r3, [r7, #2]
 800323a:	4613      	mov	r3, r2
 800323c:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 800323e:	78ba      	ldrb	r2, [r7, #2]
 8003240:	78f9      	ldrb	r1, [r7, #3]
 8003242:	7d3b      	ldrb	r3, [r7, #20]
 8003244:	9302      	str	r3, [sp, #8]
 8003246:	7c3b      	ldrb	r3, [r7, #16]
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	787b      	ldrb	r3, [r7, #1]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ffc3 	bl	80031dc <mavlink_finalize_message_chan>
 8003256:	4603      	mov	r3, r0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	789b      	ldrb	r3, [r3, #2]
 8003274:	2bfe      	cmp	r3, #254	; 0xfe
 8003276:	d13a      	bne.n	80032ee <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800327c:	2305      	movs	r3, #5
 800327e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	789a      	ldrb	r2, [r3, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3302      	adds	r3, #2
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	7992      	ldrb	r2, [r2, #6]
 8003298:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3303      	adds	r3, #3
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	79d2      	ldrb	r2, [r2, #7]
 80032a2:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	7a12      	ldrb	r2, [r2, #8]
 80032ac:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7a5a      	ldrb	r2, [r3, #9]
 80032b2:	7a99      	ldrb	r1, [r3, #10]
 80032b4:	0209      	lsls	r1, r1, #8
 80032b6:	430a      	orrs	r2, r1
 80032b8:	7adb      	ldrb	r3, [r3, #11]
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	4313      	orrs	r3, r2
 80032be:	461a      	mov	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3305      	adds	r3, #5
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	1d98      	adds	r0, r3, #6
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f103 010c 	add.w	r1, r3, #12
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	78db      	ldrb	r3, [r3, #3]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f012 f816 	bl	8015308 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80032dc:	7dbb      	ldrb	r3, [r7, #22]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	78d2      	ldrb	r2, [r2, #3]
 80032e2:	4413      	add	r3, r2
 80032e4:	3301      	adds	r3, #1
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e06c      	b.n	80033c8 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fe24 	bl	8002f44 <_mav_trim_payload>
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8003300:	2309      	movs	r3, #9
 8003302:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	789a      	ldrb	r2, [r3, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3301      	adds	r3, #1
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3302      	adds	r3, #2
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	7912      	ldrb	r2, [r2, #4]
 800331c:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3303      	adds	r3, #3
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	7952      	ldrb	r2, [r2, #5]
 8003326:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	7992      	ldrb	r2, [r2, #6]
 8003330:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3305      	adds	r3, #5
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	79d2      	ldrb	r2, [r2, #7]
 800333a:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3306      	adds	r3, #6
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	7a12      	ldrb	r2, [r2, #8]
 8003344:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	7a5a      	ldrb	r2, [r3, #9]
 800334a:	7a99      	ldrb	r1, [r3, #10]
 800334c:	0209      	lsls	r1, r1, #8
 800334e:	430a      	orrs	r2, r1
 8003350:	7adb      	ldrb	r3, [r3, #11]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	4313      	orrs	r3, r2
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3307      	adds	r3, #7
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	7a5a      	ldrb	r2, [r3, #9]
 8003364:	7a99      	ldrb	r1, [r3, #10]
 8003366:	0209      	lsls	r1, r1, #8
 8003368:	430a      	orrs	r2, r1
 800336a:	7adb      	ldrb	r3, [r3, #11]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	4313      	orrs	r3, r2
 8003370:	121a      	asrs	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3308      	adds	r3, #8
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	7a5a      	ldrb	r2, [r3, #9]
 800337e:	7a99      	ldrb	r1, [r3, #10]
 8003380:	0209      	lsls	r1, r1, #8
 8003382:	430a      	orrs	r2, r1
 8003384:	7adb      	ldrb	r3, [r3, #11]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	4313      	orrs	r3, r2
 800338a:	141a      	asrs	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3309      	adds	r3, #9
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f103 000a 	add.w	r0, r3, #10
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	4619      	mov	r1, r3
 80033a2:	f011 ffb1 	bl	8015308 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80033a6:	7dba      	ldrb	r2, [r7, #22]
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	4413      	add	r3, r2
 80033ac:	3301      	adds	r3, #1
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	791b      	ldrb	r3, [r3, #4]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <mavlink_msg_to_send_buffer+0x164>
 80033c0:	230d      	movs	r3, #13
 80033c2:	e000      	b.n	80033c6 <mavlink_msg_to_send_buffer+0x166>
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	b29a      	uxth	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	3301      	adds	r3, #1
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1c98      	adds	r0, r3, #2
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80033f6:	7dfa      	ldrb	r2, [r7, #23]
 80033f8:	4619      	mov	r1, r3
 80033fa:	f011 ff85 	bl	8015308 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80033fe:	7dbb      	ldrb	r3, [r7, #22]
 8003400:	b29a      	uxth	r2, r3
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	b29b      	uxth	r3, r3
 8003406:	4413      	add	r3, r2
 8003408:	b29a      	uxth	r2, r3
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	b29b      	uxth	r3, r3
 800340e:	4413      	add	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	3303      	adds	r3, #3
 8003414:	b29b      	uxth	r3, r3
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <mavlink_msg_vfr_hud_pack>:
 * @param climb [m/s] Current climb rate.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08e      	sub	sp, #56	; 0x38
 8003422:	af02      	add	r7, sp, #8
 8003424:	613a      	str	r2, [r7, #16]
 8003426:	ed87 0a03 	vstr	s0, [r7, #12]
 800342a:	edc7 0a02 	vstr	s1, [r7, #8]
 800342e:	461a      	mov	r2, r3
 8003430:	ed87 1a01 	vstr	s2, [r7, #4]
 8003434:	edc7 1a00 	vstr	s3, [r7]
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]
 800343c:	460b      	mov	r3, r1
 800343e:	75bb      	strb	r3, [r7, #22]
 8003440:	4613      	mov	r3, r2
 8003442:	82bb      	strh	r3, [r7, #20]
    _mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	61fb      	str	r3, [r7, #28]
    packet.groundspeed = groundspeed;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	623b      	str	r3, [r7, #32]
    packet.alt = alt;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
    packet.climb = climb;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.heading = heading;
 8003454:	8abb      	ldrh	r3, [r7, #20]
 8003456:	85bb      	strh	r3, [r7, #44]	; 0x2c
    packet.throttle = throttle;
 8003458:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800345a:	85fb      	strh	r3, [r7, #46]	; 0x2e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	330c      	adds	r3, #12
 8003460:	f107 011c 	add.w	r1, r7, #28
 8003464:	2214      	movs	r2, #20
 8003466:	4618      	mov	r0, r3
 8003468:	f011 ff4e 	bl	8015308 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2200      	movs	r2, #0
 8003470:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8003474:	725a      	strb	r2, [r3, #9]
 8003476:	2200      	movs	r2, #0
 8003478:	729a      	strb	r2, [r3, #10]
 800347a:	2200      	movs	r2, #0
 800347c:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 800347e:	7dba      	ldrb	r2, [r7, #22]
 8003480:	7df9      	ldrb	r1, [r7, #23]
 8003482:	2314      	movs	r3, #20
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2314      	movs	r3, #20
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2314      	movs	r3, #20
 800348c:	6938      	ldr	r0, [r7, #16]
 800348e:	f7ff fec9 	bl	8003224 <mavlink_finalize_message>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3730      	adds	r7, #48	; 0x30
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	603a      	str	r2, [r7, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
 80034aa:	460b      	mov	r3, r1
 80034ac:	71bb      	strb	r3, [r7, #6]
 80034ae:	4613      	mov	r3, r2
 80034b0:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 80034b6:	797b      	ldrb	r3, [r7, #5]
 80034b8:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 80034ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034be:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 80034c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034c4:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 80034c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80034ca:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 80034cc:	2303      	movs	r3, #3
 80034ce:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	f107 010c 	add.w	r1, r7, #12
 80034d8:	2209      	movs	r2, #9
 80034da:	4618      	mov	r0, r3
 80034dc:	f011 ff14 	bl	8015308 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	725a      	strb	r2, [r3, #9]
 80034e6:	2200      	movs	r2, #0
 80034e8:	729a      	strb	r2, [r3, #10]
 80034ea:	2200      	movs	r2, #0
 80034ec:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80034ee:	79ba      	ldrb	r2, [r7, #6]
 80034f0:	79f9      	ldrb	r1, [r7, #7]
 80034f2:	2332      	movs	r3, #50	; 0x32
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	2309      	movs	r3, #9
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2309      	movs	r3, #9
 80034fc:	6838      	ldr	r0, [r7, #0]
 80034fe:	f7ff fe91 	bl	8003224 <mavlink_finalize_message>
 8003502:	4603      	mov	r3, r0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af04      	add	r7, sp, #16
 8003512:	60ba      	str	r2, [r7, #8]
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	460b      	mov	r3, r1
 800351c:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	791e      	ldrb	r6, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	795b      	ldrb	r3, [r3, #5]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	7992      	ldrb	r2, [r2, #6]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	6809      	ldr	r1, [r1, #0]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	79c0      	ldrb	r0, [r0, #7]
 8003532:	7bbd      	ldrb	r5, [r7, #14]
 8003534:	7bfc      	ldrb	r4, [r7, #15]
 8003536:	9003      	str	r0, [sp, #12]
 8003538:	9102      	str	r1, [sp, #8]
 800353a:	9201      	str	r2, [sp, #4]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	4633      	mov	r3, r6
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	4629      	mov	r1, r5
 8003544:	4620      	mov	r0, r4
 8003546:	f7ff ffa9 	bl	800349c <mavlink_msg_heartbeat_pack>
 800354a:	4603      	mov	r3, r0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003554 <_ZN14MavlinkControl16mavlink_header_tC1Ev>:
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	705a      	strb	r2, [r3, #1]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	709a      	strb	r2, [r3, #2]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	70da      	strb	r2, [r3, #3]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	711a      	strb	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	715a      	strb	r2, [r3, #5]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	719a      	strb	r2, [r3, #6]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, I2C_HandleTypeDef* i2c)
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
: _huart_mavlink(huart), _altimeter_i2c(i2c)  {
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	731a      	strb	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	81da      	strh	r2, [r3, #14]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc0>)
 80035ca:	8812      	ldrh	r2, [r2, #0]
 80035cc:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	220a      	movs	r2, #10
 80035e2:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80035fc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f011 fe8e 	bl	8015324 <memset>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f203 33f1 	addw	r3, r3, #1009	; 0x3f1
 800361e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f011 fe7d 	bl	8015324 <memset>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9c1 2300 	strd	r2, r3, [r1]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff85 	bl	8003554 <_ZN14MavlinkControl16mavlink_header_tC1Ev>

	  instancePtr = this;
 800364a:	4a05      	ldr	r2, [pc, #20]	; (8003660 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc4>)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6013      	str	r3, [r2, #0]
	//HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);




}
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	08017f70 	.word	0x08017f70
 8003660:	200003d0 	.word	0x200003d0

08003664 <HAL_UARTEx_RxEventCallback>:
void MavlinkControl::uartRxCallback(UART_HandleTypeDef *huart, uint16_t Size) {
  // Call the overridden function with the instancePtr as the first argument
  HAL_UARTEx_RxEventCallback(instancePtr->_huart_mavlink, Size);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]

  // Access the instance of the class using the static member variable
  MavlinkControl* instance = MavlinkControl::instancePtr;
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <HAL_UARTEx_RxEventCallback+0x20>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
	instance
	->process_header();
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f83c 	bl	80036f4 <_ZN14MavlinkControl14process_headerEv>



}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200003d0 	.word	0x200003d0

08003688 <_ZN14MavlinkControl9update_RXEv>:

void MavlinkControl::update_RX(void){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, RX_BUFFER_SIZE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800369a:	2214      	movs	r2, #20
 800369c:	4619      	mov	r1, r3
 800369e:	f00d f8bf 	bl	8010820 <HAL_UARTEx_ReceiveToIdle_DMA>


}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <_ZN14MavlinkControl9update_TXEv>:





void MavlinkControl::update_TX(void){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

	//Every 0.5 sec send a heartbeat to the herelink controller. If this runs continuously this
	//blocks the SBUS protocol

	this->sendTestMessage();
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f8fb 	bl	80038b0 <_ZN14MavlinkControl15sendTestMessageEv>

	if(HAL_GetTick() % 500 == 0){
 80036ba:	f002 feb3 	bl	8006424 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <_ZN14MavlinkControl9update_TXEv+0x44>)
 80036c2:	fba3 1302 	umull	r1, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <_ZN14MavlinkControl9update_TXEv+0x3a>

		this->heartbeat();
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f895 	bl	8003810 <_ZN14MavlinkControl9heartbeatEv>

	}

}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <_ZN14MavlinkControl14process_headerEv>:

void MavlinkControl::process_header(void){
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	//first check the header for value 0xFD

	//NOT EVEN SURE IF I NEED THIS LATER


	if(_receiveBuffer_1[0] == 0xFD){
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8003702:	2bfd      	cmp	r3, #253	; 0xfd
 8003704:	d147      	bne.n	8003796 <_ZN14MavlinkControl14process_headerEv+0xa2>
		_receiveBuffer_2 = _receiveBuffer_1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec

		//printf("CHECKING IF LEN IS OK %d \r\n", _tempBuffer[1]);


		_mavlink_received_header.magic = _receiveBuffer_2[0];
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003726:	785a      	ldrb	r2, [r3, #1]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.incompat_flags = _receiveBuffer_2[2];
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003734:	789a      	ldrb	r2, [r3, #2]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
		_mavlink_received_header.compat_flags = _receiveBuffer_2[3];
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003742:	78da      	ldrb	r2, [r3, #3]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
		_mavlink_received_header.seq = _receiveBuffer_2[4];
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003750:	791a      	ldrb	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[5];
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800375e:	795a      	ldrb	r2, [r3, #5]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.msgid = _receiveBuffer_2[6] | _receiveBuffer_2[7] | _receiveBuffer_2[8];
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800376c:	3306      	adds	r3, #6
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003776:	3307      	adds	r3, #7
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	b2da      	uxtb	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003784:	3308      	adds	r3, #8
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4313      	orrs	r3, r2
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520





}
 8003794:	e036      	b.n	8003804 <_ZN14MavlinkControl14process_headerEv+0x110>
	}else if(_receiveBuffer_1[0] == 0xFE){
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 800379c:	2bfe      	cmp	r3, #254	; 0xfe
 800379e:	d131      	bne.n	8003804 <_ZN14MavlinkControl14process_headerEv+0x110>
		_receiveBuffer_2 = _receiveBuffer_1;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
		_mavlink_received_header.magic = _receiveBuffer_2[0];
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80037c0:	785a      	ldrb	r2, [r3, #1]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.seq = _receiveBuffer_2[2];
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80037ce:	789a      	ldrb	r2, [r3, #2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[3];
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80037dc:	78da      	ldrb	r2, [r3, #3]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.compid = _receiveBuffer_2[4];
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80037ea:	791a      	ldrb	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
		_mavlink_received_header.msgid = _receiveBuffer_2[5];
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80037f8:	3305      	adds	r3, #5
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <_ZN14MavlinkControl9heartbeatEv>:
	return _mavlink_received_header;

}


void MavlinkControl::heartbeat(void){
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af04      	add	r7, sp, #16
 8003816:	6078      	str	r0, [r7, #4]


	_bufferLength = mavlink_msg_heartbeat_encode(
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f203 1233 	addw	r2, r3, #307	; 0x133
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend,
			&_mavlink_heartbeat);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
	_bufferLength = mavlink_msg_heartbeat_encode(
 8003830:	f7ff fe6c 	bl	800350c <mavlink_msg_heartbeat_encode>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	81da      	strh	r2, [r3, #14]
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f203 1233 	addw	r2, r3, #307	; 0x133
 800384e:	2303      	movs	r3, #3
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	2300      	movs	r3, #0
 8003854:	9302      	str	r3, [sp, #8]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	230a      	movs	r3, #10
 8003860:	f7ff fe1c 	bl	800349c <mavlink_msg_heartbeat_pack>
			&_mavlinkSend, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f7ff fcf4 	bl	8003260 <mavlink_msg_to_send_buffer>

	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _bufferLength, 100) != HAL_OK){
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	89da      	ldrh	r2, [r3, #14]
 8003886:	2364      	movs	r3, #100	; 0x64
 8003888:	f00b fbef 	bl	800f06a <HAL_UART_Transmit>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <_ZN14MavlinkControl9heartbeatEv+0x92>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <_ZN14MavlinkControl9heartbeatEv+0x9c>)
 800389e:	f012 fa39 	bl	8015d14 <puts>
	}

}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	08017f74 	.word	0x08017f74

080038b0 <_ZN14MavlinkControl15sendTestMessageEv>:

void MavlinkControl::sendTestMessage(void){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	6078      	str	r0, [r7, #4]

	float testValue = 122.0f;
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <_ZN14MavlinkControl15sendTestMessageEv+0x8c>)
 80038ba:	60fb      	str	r3, [r7, #12]

	// mavlink_msg_vfr_hud_pack function below repacks the value to a hud message. These can be configured on the QgroundControl app.
	//The hud message can contain values such as ground speed, altitude, etc... autocomplete will give you an overview
	//of the different values that can be sent. The values itself are hardcoded into the firmware of the Herelink controller though

	mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid,&_mavlinkSend, testValue, 0.0f,0,0,0,0);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f203 1233 	addw	r2, r3, #307	; 0x133
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8003940 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 80038d6:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8003940 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 80038da:	2300      	movs	r3, #0
 80038dc:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003940 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 80038e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80038e4:	f7ff fd9b 	bl	800341e <mavlink_msg_vfr_hud_pack>
	_TX_bufferLength = mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f203 1333 	addw	r3, r3, #307	; 0x133
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f7ff fcb2 	bl	8003260 <mavlink_msg_to_send_buffer>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _TX_bufferLength, 100) != HAL_OK){
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b3 250a 	ldrh.w	r2, [r3, #1290]	; 0x50a
 8003916:	2364      	movs	r3, #100	; 0x64
 8003918:	f00b fba7 	bl	800f06a <HAL_UART_Transmit>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <_ZN14MavlinkControl15sendTestMessageEv+0x82>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 800392c:	4805      	ldr	r0, [pc, #20]	; (8003944 <_ZN14MavlinkControl15sendTestMessageEv+0x94>)
 800392e:	f012 f9f1 	bl	8015d14 <puts>
	}

}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	42f40000 	.word	0x42f40000
 8003940:	00000000 	.word	0x00000000
 8003944:	08017f74 	.word	0x08017f74

08003948 <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	611a      	str	r2, [r3, #16]
 8003962:	615a      	str	r2, [r3, #20]
 8003964:	761a      	strb	r2, [r3, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	331e      	adds	r3, #30
 800396a:	2220      	movs	r2, #32
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f011 fcd8 	bl	8015324 <memset>

	this->_huart_sbus = huart_sbus;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	601a      	str	r2, [r3, #0]





}
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]



	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	2219      	movs	r2, #25
 8003996:	4619      	mov	r1, r3
 8003998:	f00c ff42 	bl	8010820 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f804 	bl	80039aa <_ZN4SBUS8readSBUSEv>




}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]

		//als iemand er ooit in slaagt om dit in een mooie for-loop of iets dergelijks te gieten, chapeau, ik vind hem niet :').


		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	795b      	ldrb	r3, [r3, #5]
 80039b6:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	799b      	ldrb	r3, [r3, #6]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 80039c2:	89fa      	ldrh	r2, [r7, #14]
 80039c4:	89bb      	ldrh	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	799b      	ldrb	r3, [r3, #6]
 80039d8:	08db      	lsrs	r3, r3, #3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	79db      	ldrb	r3, [r3, #7]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	015b      	lsls	r3, r3, #5
 80039e6:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 80039e8:	89fa      	ldrh	r2, [r7, #14]
 80039ea:	89bb      	ldrh	r3, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	79db      	ldrb	r3, [r3, #7]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7a1b      	ldrb	r3, [r3, #8]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7a5b      	ldrb	r3, [r3, #9]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 8003a18:	89fa      	ldrh	r2, [r7, #14]
 8003a1a:	89bb      	ldrh	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7a5b      	ldrb	r3, [r3, #9]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7a9b      	ldrb	r3, [r3, #10]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	01db      	lsls	r3, r3, #7
 8003a42:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8003a44:	89fa      	ldrh	r2, [r7, #14]
 8003a46:	89bb      	ldrh	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7a9b      	ldrb	r3, [r3, #10]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7adb      	ldrb	r3, [r3, #11]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 8003a6a:	89fa      	ldrh	r2, [r7, #14]
 8003a6c:	89bb      	ldrh	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	84da      	strh	r2, [r3, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7adb      	ldrb	r3, [r3, #11]
 8003a80:	09db      	lsrs	r3, r3, #7
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7b1b      	ldrb	r3, [r3, #12]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7b5b      	ldrb	r3, [r3, #13]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	025b      	lsls	r3, r3, #9
 8003a98:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 8003a9a:	89fa      	ldrh	r2, [r7, #14]
 8003a9c:	89bb      	ldrh	r3, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7b5b      	ldrb	r3, [r3, #13]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7b9b      	ldrb	r3, [r3, #14]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	019b      	lsls	r3, r3, #6
 8003ac4:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8003ac6:	89fa      	ldrh	r2, [r7, #14]
 8003ac8:	89bb      	ldrh	r3, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7b9b      	ldrb	r3, [r3, #14]
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7bdb      	ldrb	r3, [r3, #15]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 8003aec:	89fa      	ldrh	r2, [r7, #14]
 8003aee:	89bb      	ldrh	r3, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7c1b      	ldrb	r3, [r3, #16]
 8003b02:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7c5b      	ldrb	r3, [r3, #17]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 8003b0e:	89fa      	ldrh	r2, [r7, #14]
 8003b10:	89bb      	ldrh	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7c5b      	ldrb	r3, [r3, #17]
 8003b24:	08db      	lsrs	r3, r3, #3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	7c9b      	ldrb	r3, [r3, #18]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	015b      	lsls	r3, r3, #5
 8003b32:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8003b34:	89fa      	ldrh	r2, [r7, #14]
 8003b36:	89bb      	ldrh	r3, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7c9b      	ldrb	r3, [r3, #18]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7cdb      	ldrb	r3, [r3, #19]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7d1b      	ldrb	r3, [r3, #20]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8003b64:	89fa      	ldrh	r2, [r7, #14]
 8003b66:	89bb      	ldrh	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	897b      	ldrh	r3, [r7, #10]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7d1b      	ldrb	r3, [r3, #20]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	7d5b      	ldrb	r3, [r3, #21]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	01db      	lsls	r3, r3, #7
 8003b8e:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8003b90:	89fa      	ldrh	r2, [r7, #14]
 8003b92:	89bb      	ldrh	r3, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7d5b      	ldrb	r3, [r3, #21]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7d9b      	ldrb	r3, [r3, #22]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8003bb6:	89fa      	ldrh	r2, [r7, #14]
 8003bb8:	89bb      	ldrh	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7d9b      	ldrb	r3, [r3, #22]
 8003bcc:	09db      	lsrs	r3, r3, #7
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7ddb      	ldrb	r3, [r3, #23]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7e1b      	ldrb	r3, [r3, #24]
 8003be0:	125b      	asrs	r3, r3, #9
 8003be2:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 8003be4:	89fa      	ldrh	r2, [r7, #14]
 8003be6:	89bb      	ldrh	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	897b      	ldrh	r3, [r7, #10]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7e1b      	ldrb	r3, [r3, #24]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7e5b      	ldrb	r3, [r3, #25]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 8003c10:	89fa      	ldrh	r2, [r7, #14]
 8003c12:	89bb      	ldrh	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7e5b      	ldrb	r3, [r3, #25]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7e9b      	ldrb	r3, [r3, #26]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 8003c36:	89fa      	ldrh	r2, [r7, #14]
 8003c38:	89bb      	ldrh	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	7edb      	ldrb	r3, [r3, #27]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <_ZN4SBUS8readSBUSEv+0x2b0>
 8003c54:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c58:	e000      	b.n	8003c5c <_ZN4SBUS8readSBUSEv+0x2b2>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 8003c60:	2301      	movs	r3, #1


}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003c7c:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 8003c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c82:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8003c84:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003c88:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 8003c8a:	f240 6394 	movw	r3, #1684	; 0x694
 8003c8e:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 8003c90:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	da14      	bge.n	8003cc6 <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8003c9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003ca0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003caa:	fb03 f202 	mul.w	r2, r3, r2
 8003cae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003cb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cb6:	1acb      	subs	r3, r1, r3
 8003cb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc4:	e01b      	b.n	8003cfe <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 8003cc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003cca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	dd13      	ble.n	8003cfa <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8003cd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003cd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <_ZN4SBUS8getLeftYEv+0x9c>)
 8003cde:	fb03 f202 	mul.w	r2, r3, r2
 8003ce2:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003ce6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cea:	1acb      	subs	r3, r1, r3
 8003cec:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf8:	e001      	b.n	8003cfe <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 8003cfa:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003d10 <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 8003cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	fffffc18 	.word	0xfffffc18
 8003d10:	00000000 	.word	0x00000000

08003d14 <_ZN4SBUS9getRightYEv>:

  }
}


float SBUS::getRightY(void){
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8c1b      	ldrh	r3, [r3, #32]
 8003d20:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003d22:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003d26:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <_ZN4SBUS9getRightYEv+0xc0>)
 8003d2a:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <_ZN4SBUS9getRightYEv+0xc4>)
 8003d2e:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 8003d30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	dd16      	ble.n	8003d78 <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 8003d4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003ddc <_ZN4SBUS9getRightYEv+0xc8>
 8003d62:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d66:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d76:	e025      	b.n	8003dc4 <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 8003d78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d84:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d90:	d516      	bpl.n	8003dc0 <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 8003d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003ddc <_ZN4SBUS9getRightYEv+0xc8>
 8003daa:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8003db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	e001      	b.n	8003dc4 <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8003dc0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003de0 <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	43b60000 	.word	0x43b60000
 8003dd8:	44d28000 	.word	0x44d28000
 8003ddc:	447a0000 	.word	0x447a0000
 8003de0:	00000000 	.word	0x00000000

08003de4 <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8bdb      	ldrh	r3, [r3, #30]
 8003df0:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003df2:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003df6:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <_ZN4SBUS9getRightXEv+0xc0>)
 8003dfa:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <_ZN4SBUS9getRightXEv+0xc4>)
 8003dfe:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8003e00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e18:	dd16      	ble.n	8003e48 <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8003e1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003eac <_ZN4SBUS9getRightXEv+0xc8>
 8003e32:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e36:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e46:	e025      	b.n	8003e94 <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 8003e48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e54:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e60:	d516      	bpl.n	8003e90 <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8003e62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e76:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003eac <_ZN4SBUS9getRightXEv+0xc8>
 8003e7a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e8e:	e001      	b.n	8003e94 <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8003e90:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003eb0 <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 8003e94:	eeb0 0a67 	vmov.f32	s0, s15
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	43b60000 	.word	0x43b60000
 8003ea8:	44d28000 	.word	0x44d28000
 8003eac:	447a0000 	.word	0x447a0000
 8003eb0:	00000000 	.word	0x00000000

08003eb4 <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[4];
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec0:	82fb      	strh	r3, [r7, #22]

	float center_value = 1024.0f;
 8003ec2:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003ec6:	613b      	str	r3, [r7, #16]
	float max_left = 1684.0f;
 8003ec8:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <_ZN4SBUS11getJogWheelEv+0xc0>)
 8003eca:	60fb      	str	r3, [r7, #12]
	float max_right = 364.0f;
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <_ZN4SBUS11getJogWheelEv+0xc4>)
 8003ece:	60bb      	str	r3, [r7, #8]

	if(raw_value < center_value){
 8003ed0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003edc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	dd16      	ble.n	8003f18 <_ZN4SBUS11getJogWheelEv+0x64>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));
 8003eea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003efe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003f7c <_ZN4SBUS11getJogWheelEv+0xc8>
 8003f02:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f06:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f16:	e025      	b.n	8003f64 <_ZN4SBUS11getJogWheelEv+0xb0>

	}else if (raw_value > center_value){
 8003f18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f24:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f30:	d516      	bpl.n	8003f60 <_ZN4SBUS11getJogWheelEv+0xac>

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 8003f32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f46:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003f7c <_ZN4SBUS11getJogWheelEv+0xc8>
 8003f4a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f52:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5e:	e001      	b.n	8003f64 <_ZN4SBUS11getJogWheelEv+0xb0>
	}else {

		return 0.0f;
 8003f60:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003f80 <_ZN4SBUS11getJogWheelEv+0xcc>
	}


}
 8003f64:	eeb0 0a67 	vmov.f32	s0, s15
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	44d28000 	.word	0x44d28000
 8003f78:	43b60000 	.word	0x43b60000
 8003f7c:	447a0000 	.word	0x447a0000
 8003f80:	00000000 	.word	0x00000000

08003f84 <_ZN4SBUS8A_buttonEv>:

bool SBUS::A_button(void){
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	//state machine to make sure the button presses debounce correctly (I know it's overkill but hey...).

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f94:	bf8c      	ite	hi
 8003f96:	2301      	movhi	r3, #1
 8003f98:	2300      	movls	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <_ZN4SBUS8A_buttonEv+0xac>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d02d      	beq.n	8004000 <_ZN4SBUS8A_buttonEv+0x7c>
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	dc3b      	bgt.n	8004020 <_ZN4SBUS8A_buttonEv+0x9c>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <_ZN4SBUS8A_buttonEv+0x2e>
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d00a      	beq.n	8003fc6 <_ZN4SBUS8A_buttonEv+0x42>
 8003fb0:	e036      	b.n	8004020 <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02e      	beq.n	8004016 <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <_ZN4SBUS8A_buttonEv+0xac>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8003fc4:	e027      	b.n	8004016 <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 8003fd2:	4b17      	ldr	r3, [pc, #92]	; (8004030 <_ZN4SBUS8A_buttonEv+0xac>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8003fd8:	e01f      	b.n	800401a <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8003fda:	4b16      	ldr	r3, [pc, #88]	; (8004034 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <_ZN4SBUS8A_buttonEv+0xb0>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b31      	cmp	r3, #49	; 0x31
 8003fec:	bf8c      	ite	hi
 8003fee:	2301      	movhi	r3, #1
 8003ff0:	2300      	movls	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <_ZN4SBUS8A_buttonEv+0xac>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]
	      break;
 8003ffe:	e00c      	b.n	800401a <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	f083 0301 	eor.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <_ZN4SBUS8A_buttonEv+0xac>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
	        return true;
 8004012:	2301      	movs	r3, #1
 8004014:	e005      	b.n	8004022 <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 8004016:	bf00      	nop
 8004018:	e002      	b.n	8004020 <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 800401e:	bf00      	nop
	  }

	  return false;
 8004020:	2300      	movs	r3, #0

}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	200003d4 	.word	0x200003d4
 8004034:	200003d5 	.word	0x200003d5

08004038 <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004048:	bf8c      	ite	hi
 800404a:	2301      	movhi	r3, #1
 800404c:	2300      	movls	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
			  );

	  switch (debounce_state) {
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <_ZN4SBUS8B_buttonEv+0xac>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d02d      	beq.n	80040b4 <_ZN4SBUS8B_buttonEv+0x7c>
 8004058:	2b02      	cmp	r3, #2
 800405a:	dc3b      	bgt.n	80040d4 <_ZN4SBUS8B_buttonEv+0x9c>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <_ZN4SBUS8B_buttonEv+0x2e>
 8004060:	2b01      	cmp	r3, #1
 8004062:	d00a      	beq.n	800407a <_ZN4SBUS8B_buttonEv+0x42>
 8004064:	e036      	b.n	80040d4 <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02e      	beq.n	80040ca <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <_ZN4SBUS8B_buttonEv+0xac>)
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <_ZN4SBUS8B_buttonEv+0xb0>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8004078:	e027      	b.n	80040ca <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 8004086:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <_ZN4SBUS8B_buttonEv+0xac>)
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 800408c:	e01f      	b.n	80040ce <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <_ZN4SBUS8B_buttonEv+0xb0>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <_ZN4SBUS8B_buttonEv+0xb0>)
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <_ZN4SBUS8B_buttonEv+0xb0>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b31      	cmp	r3, #49	; 0x31
 80040a0:	bf8c      	ite	hi
 80040a2:	2301      	movhi	r3, #1
 80040a4:	2300      	movls	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d010      	beq.n	80040ce <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <_ZN4SBUS8B_buttonEv+0xac>)
 80040ae:	2202      	movs	r2, #2
 80040b0:	701a      	strb	r2, [r3, #0]
	      break;
 80040b2:	e00c      	b.n	80040ce <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	f083 0301 	eor.w	r3, r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 80040c0:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <_ZN4SBUS8B_buttonEv+0xac>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
	        return true;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e005      	b.n	80040d6 <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 80040d2:	bf00      	nop
	  }

	  return false;
 80040d4:	2300      	movs	r3, #0


}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	200003d6 	.word	0x200003d6
 80040e8:	200003d7 	.word	0x200003d7

080040ec <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>:
#include "altimeter.h"

Altimeter::Altimeter(I2C_HandleTypeDef* i2c) :_i2c (i2c){
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	715a      	strb	r2, [r3, #5]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	60da      	str	r2, [r3, #12]



}
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <_ZN9Altimeter14init_altimeterEv>:

void Altimeter::init_altimeter(void){
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af04      	add	r7, sp, #16
 800411e:	6078      	str	r0, [r7, #4]

	//Set to altimeter mode
	_altimeter_mode = 0x38;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2238      	movs	r2, #56	; 0x38
 8004124:	711a      	strb	r2, [r3, #4]
	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, 1, &_altimeter_mode, 1, 100) != HAL_OK){
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	2264      	movs	r2, #100	; 0x64
 8004130:	9202      	str	r2, [sp, #8]
 8004132:	2201      	movs	r2, #1
 8004134:	9201      	str	r2, [sp, #4]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2301      	movs	r3, #1
 800413a:	2226      	movs	r2, #38	; 0x26
 800413c:	21c0      	movs	r1, #192	; 0xc0
 800413e:	f005 fa29 	bl	8009594 <HAL_I2C_Mem_Write>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <_ZN9Altimeter14init_altimeterEv+0x40>

		printf("error with i2c \r\n");
 8004152:	481d      	ldr	r0, [pc, #116]	; (80041c8 <_ZN9Altimeter14init_altimeterEv+0xb0>)
 8004154:	f011 fdde 	bl	8015d14 <puts>

	}
	//No event flags disabled (might change later).
	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_2, 1, &_event_flags, 1, 100) != HAL_OK){
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3305      	adds	r3, #5
 8004160:	2264      	movs	r2, #100	; 0x64
 8004162:	9202      	str	r2, [sp, #8]
 8004164:	2201      	movs	r2, #1
 8004166:	9201      	str	r2, [sp, #4]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	2301      	movs	r3, #1
 800416c:	2227      	movs	r2, #39	; 0x27
 800416e:	21c0      	movs	r1, #192	; 0xc0
 8004170:	f005 fa10 	bl	8009594 <HAL_I2C_Mem_Write>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <_ZN9Altimeter14init_altimeterEv+0x72>

		printf("error with i2c \r\n");
 8004184:	4810      	ldr	r0, [pc, #64]	; (80041c8 <_ZN9Altimeter14init_altimeterEv+0xb0>)
 8004186:	f011 fdc5 	bl	8015d14 <puts>
	}
	uint8_t data[1] = {0x07};
 800418a:	2307      	movs	r3, #7
 800418c:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, 0x13, 1, data, 1, 100) != HAL_OK){
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	2364      	movs	r3, #100	; 0x64
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	2301      	movs	r3, #1
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	f107 030c 	add.w	r3, r7, #12
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2301      	movs	r3, #1
 80041a2:	2213      	movs	r2, #19
 80041a4:	21c0      	movs	r1, #192	; 0xc0
 80041a6:	f005 f9f5 	bl	8009594 <HAL_I2C_Mem_Write>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <_ZN9Altimeter14init_altimeterEv+0xa8>
		printf("error with i2c \r\n");
 80041ba:	4803      	ldr	r0, [pc, #12]	; (80041c8 <_ZN9Altimeter14init_altimeterEv+0xb0>)
 80041bc:	f011 fdaa 	bl	8015d14 <puts>
	}

}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	08017f9c 	.word	0x08017f9c

080041cc <_ZN9Altimeter12get_altitudeEv>:



float Altimeter::get_altitude(void){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af04      	add	r7, sp, #16
 80041d2:	6078      	str	r0, [r7, #4]
	//IIC_RegWrite(SlaveAddressIIC, 0x26, 0xB8); SET TO ALTIMETER WITH OVERSAMPLING 128
	  uint8_t transmit_data[2];
	    uint8_t status_reg, out_p_msb, out_p_csb, out_p_lsb, out_t_msb, out_t_lsb;

	    // Set to Altimeter with an OSR = 128
	    transmit_data[0] = _altimeter_ctrl_reg_1;
 80041d4:	2326      	movs	r3, #38	; 0x26
 80041d6:	743b      	strb	r3, [r7, #16]
	    transmit_data[1] = 0xB8;
 80041d8:	23b8      	movs	r3, #184	; 0xb8
 80041da:	747b      	strb	r3, [r7, #17]
	    HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 2, 100);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	f107 0210 	add.w	r2, r7, #16
 80041e4:	2364      	movs	r3, #100	; 0x64
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2302      	movs	r3, #2
 80041ea:	21c0      	movs	r1, #192	; 0xc0
 80041ec:	f005 f8de 	bl	80093ac <HAL_I2C_Master_Transmit>
	    while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f005 fcb6 	bl	8009b66 <HAL_I2C_GetState>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d000      	beq.n	800420c <_ZN9Altimeter12get_altitudeEv+0x40>
 800420a:	e7f1      	b.n	80041f0 <_ZN9Altimeter12get_altitudeEv+0x24>

	    // Enable Data Flags in PT_DATA_CFG
	    transmit_data[0] = _altimeter_data_event_flag_reg;
 800420c:	2313      	movs	r3, #19
 800420e:	743b      	strb	r3, [r7, #16]
	    transmit_data[1] = 0x07;
 8004210:	2307      	movs	r3, #7
 8004212:	747b      	strb	r3, [r7, #17]
	    HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 2, 100);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	f107 0210 	add.w	r2, r7, #16
 800421c:	2364      	movs	r3, #100	; 0x64
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2302      	movs	r3, #2
 8004222:	21c0      	movs	r1, #192	; 0xc0
 8004224:	f005 f8c2 	bl	80093ac <HAL_I2C_Master_Transmit>
	    while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f005 fc9a 	bl	8009b66 <HAL_I2C_GetState>
 8004232:	4603      	mov	r3, r0
 8004234:	2b20      	cmp	r3, #32
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d000      	beq.n	8004244 <_ZN9Altimeter12get_altitudeEv+0x78>
 8004242:	e7f1      	b.n	8004228 <_ZN9Altimeter12get_altitudeEv+0x5c>

	    // Set Active
	    transmit_data[0] = 0x26;
 8004244:	2326      	movs	r3, #38	; 0x26
 8004246:	743b      	strb	r3, [r7, #16]
	    transmit_data[1] = 0xB9;
 8004248:	23b9      	movs	r3, #185	; 0xb9
 800424a:	747b      	strb	r3, [r7, #17]
	    HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 2, 100);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	f107 0210 	add.w	r2, r7, #16
 8004254:	2364      	movs	r3, #100	; 0x64
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2302      	movs	r3, #2
 800425a:	21c0      	movs	r1, #192	; 0xc0
 800425c:	f005 f8a6 	bl	80093ac <HAL_I2C_Master_Transmit>
	    while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f005 fc7e 	bl	8009b66 <HAL_I2C_GetState>
 800426a:	4603      	mov	r3, r0
 800426c:	2b20      	cmp	r3, #32
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d000      	beq.n	800427c <_ZN9Altimeter12get_altitudeEv+0xb0>
 800427a:	e7f1      	b.n	8004260 <_ZN9Altimeter12get_altitudeEv+0x94>

	    // Read STATUS Register
	    HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x00, 1, &status_reg, 1, 100);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	2364      	movs	r3, #100	; 0x64
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	2301      	movs	r3, #1
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	f107 030f 	add.w	r3, r7, #15
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2301      	movs	r3, #1
 8004290:	2200      	movs	r2, #0
 8004292:	21c0      	movs	r1, #192	; 0xc0
 8004294:	f005 fa92 	bl	80097bc <HAL_I2C_Mem_Read>

	    // Is Data Ready
	    while(!(status_reg & 0x08)){
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10e      	bne.n	80042c0 <_ZN9Altimeter12get_altitudeEv+0xf4>
	        HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x00, 1, &status_reg, 1, 100);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	2364      	movs	r3, #100	; 0x64
 80042a8:	9302      	str	r3, [sp, #8]
 80042aa:	2301      	movs	r3, #1
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	f107 030f 	add.w	r3, r7, #15
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2301      	movs	r3, #1
 80042b6:	2200      	movs	r2, #0
 80042b8:	21c0      	movs	r1, #192	; 0xc0
 80042ba:	f005 fa7f 	bl	80097bc <HAL_I2C_Mem_Read>
	    while(!(status_reg & 0x08)){
 80042be:	e7eb      	b.n	8004298 <_ZN9Altimeter12get_altitudeEv+0xcc>
	    }

	    // Read OUT_P and OUT_T
	    HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x01, 1, &_pressure_data[0], 1, 100);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3307      	adds	r3, #7
 80042c8:	2264      	movs	r2, #100	; 0x64
 80042ca:	9202      	str	r2, [sp, #8]
 80042cc:	2201      	movs	r2, #1
 80042ce:	9201      	str	r2, [sp, #4]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2301      	movs	r3, #1
 80042d4:	2201      	movs	r2, #1
 80042d6:	21c0      	movs	r1, #192	; 0xc0
 80042d8:	f005 fa70 	bl	80097bc <HAL_I2C_Mem_Read>
	    HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x02, 1, &_pressure_data[1], 1, 100);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3308      	adds	r3, #8
 80042e4:	2264      	movs	r2, #100	; 0x64
 80042e6:	9202      	str	r2, [sp, #8]
 80042e8:	2201      	movs	r2, #1
 80042ea:	9201      	str	r2, [sp, #4]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	2301      	movs	r3, #1
 80042f0:	2202      	movs	r2, #2
 80042f2:	21c0      	movs	r1, #192	; 0xc0
 80042f4:	f005 fa62 	bl	80097bc <HAL_I2C_Mem_Read>
	    HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x03, 1, &_pressure_data[2], 1, 100);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3309      	adds	r3, #9
 8004300:	2264      	movs	r2, #100	; 0x64
 8004302:	9202      	str	r2, [sp, #8]
 8004304:	2201      	movs	r2, #1
 8004306:	9201      	str	r2, [sp, #4]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2301      	movs	r3, #1
 800430c:	2203      	movs	r2, #3
 800430e:	21c0      	movs	r1, #192	; 0xc0
 8004310:	f005 fa54 	bl	80097bc <HAL_I2C_Mem_Read>


	    // Combine the three bytes into a 20-bit value
	    uint32_t pressure_raw = ((uint32_t)_pressure_data[0] << 16) | ((uint32_t)_pressure_data[1] << 8) | _pressure_data[2];
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	79db      	ldrb	r3, [r3, #7]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7a1b      	ldrb	r3, [r3, #8]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4313      	orrs	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	7a52      	ldrb	r2, [r2, #9]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
	    // Convert the two's complement value to a signed integer
	    if (pressure_raw & 0x80000) {
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <_ZN9Altimeter12get_altitudeEv+0x174>
	        pressure_raw |= 0xFFF00000;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800433a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800433e:	617b      	str	r3, [r7, #20]
	    }

	    // Convert the raw pressure value to a human-readable value
	    this->_altitude = (float)pressure_raw / 4.0;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800434a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800434e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	edc3 7a03 	vstr	s15, [r3, #12]
	    return this->_altitude;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	ee07 3a90 	vmov	s15, r3

}
 8004360:	eeb0 0a67 	vmov.f32	s0, s15
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004374:	2300      	movs	r3, #0
 8004376:	73fb      	strb	r3, [r7, #15]
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b1d      	cmp	r3, #29
 800437c:	d80e      	bhi.n	800439c <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 800437e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004382:	4808      	ldr	r0, [pc, #32]	; (80043a4 <_ZN10Components13Error_HandlerEv+0x38>)
 8004384:	f004 ff68 	bl	8009258 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8004388:	20c8      	movs	r0, #200	; 0xc8
 800438a:	f002 f857 	bl	800643c <HAL_Delay>
		printf("Components error handler !! \r\n");
 800438e:	4806      	ldr	r0, [pc, #24]	; (80043a8 <_ZN10Components13Error_HandlerEv+0x3c>)
 8004390:	f011 fcc0 	bl	8015d14 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	3301      	adds	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e7ed      	b.n	8004378 <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	48000800 	.word	0x48000800
 80043a8:	08017fb0 	.word	0x08017fb0

080043ac <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fb09 	bl	80049cc <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fb42 	bl	8004a44 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb7b 	bl	8004abc <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fbb0 	bl	8004b2c <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fbe9 	bl	8004ba4 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f86a 	bl	80044ac <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fc19 	bl	8004c10 <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fc7e 	bl	8004ce0 <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fccf 	bl	8004d88 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fd1e 	bl	8004e2c <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fd6d 	bl	8004ed0 <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fdae 	bl	8004f58 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f95f 	bl	80046c0 <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fdec 	bl	8004fe0 <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fe2d 	bl	8005068 <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa1a 	bl	8004848 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fe6b 	bl	80050f0 <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	4618      	mov	r0, r3
 8004420:	f006 fc76 	bl	800ad10 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	4618      	mov	r0, r3
 800442a:	f006 fc71 	bl	800ad10 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4618      	mov	r0, r3
 8004434:	f006 fc6c 	bl	800ad10 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	4618      	mov	r0, r3
 800443e:	f006 fc67 	bl	800ad10 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	4618      	mov	r0, r3
 8004448:	f006 fc62 	bl	800ad10 <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	4618      	mov	r0, r3
 8004452:	f006 fc8e 	bl	800ad72 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	4618      	mov	r0, r3
 800445c:	f006 fc89 	bl	800ad72 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	4618      	mov	r0, r3
 8004466:	f006 fc84 	bl	800ad72 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4618      	mov	r0, r3
 8004470:	f006 fc7f 	bl	800ad72 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	4618      	mov	r0, r3
 800447a:	f006 fc7a 	bl	800ad72 <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	217f      	movs	r1, #127	; 0x7f
 8004484:	4618      	mov	r0, r3
 8004486:	f003 fadf 	bl	8007a48 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	217f      	movs	r1, #127	; 0x7f
 8004490:	4618      	mov	r0, r3
 8004492:	f003 fad9 	bl	8007a48 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	217f      	movs	r1, #127	; 0x7f
 800449c:	4618      	mov	r0, r3
 800449e:	f003 fad3 	bl	8007a48 <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08e      	sub	sp, #56	; 0x38
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 80044b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	2220      	movs	r2, #32
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f010 ff2b 	bl	8015324 <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80044d6:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80044e0:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	2200      	movs	r2, #0
 80044f0:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	2201      	movs	r2, #1
 8004500:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	2208      	movs	r2, #8
 8004508:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	2200      	movs	r2, #0
 8004510:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	2200      	movs	r2, #0
 8004518:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	2203      	movs	r2, #3
 8004520:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2200      	movs	r2, #0
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	2200      	movs	r2, #0
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	221c      	movs	r2, #28
 800455e:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004568:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	2200      	movs	r2, #0
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	2201      	movs	r2, #1
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	4618      	mov	r0, r3
 8004580:	f002 f9c6 	bl	8006910 <HAL_ADC_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fee9 	bl	800436c <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 800459a:	4842      	ldr	r0, [pc, #264]	; (80046a4 <_ZN10Components10init_ADC_1Ev+0x1f8>)
 800459c:	f011 fb34 	bl	8015c08 <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 faac 	bl	8007b0c <HAL_ADCEx_MultiModeConfigChannel>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fed1 	bl	800436c <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 80045ca:	4837      	ldr	r0, [pc, #220]	; (80046a8 <_ZN10Components10init_ADC_1Ev+0x1fc>)
 80045cc:	f011 fb1c 	bl	8015c08 <iprintf>

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN


		  //KANAAL VOOR DE SELECTOR POT
		  sConfig.Channel = ADC_CHANNEL_11;
 80045d0:	4b36      	ldr	r3, [pc, #216]	; (80046ac <_ZN10Components10init_ADC_1Ev+0x200>)
 80045d2:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 80045d4:	2306      	movs	r3, #6
 80045d6:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80045d8:	2304      	movs	r3, #4
 80045da:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80045dc:	237f      	movs	r3, #127	; 0x7f
 80045de:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80045e0:	2304      	movs	r3, #4
 80045e2:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f107 020c 	add.w	r2, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 fc40 	bl	8006e78 <HAL_ADC_ConfigChannel>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff feaf 	bl	800436c <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 800460e:	4828      	ldr	r0, [pc, #160]	; (80046b0 <_ZN10Components10init_ADC_1Ev+0x204>)
 8004610:	f011 fafa 	bl	8015c08 <iprintf>
		  }


		  //KANAAL VOOR DE PUSH POT
		  sConfig.Channel = ADC_CHANNEL_14;
 8004614:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <_ZN10Components10init_ADC_1Ev+0x208>)
 8004616:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004618:	2312      	movs	r3, #18
 800461a:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800461c:	2304      	movs	r3, #4
 800461e:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004620:	237f      	movs	r3, #127	; 0x7f
 8004622:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004624:	2304      	movs	r3, #4
 8004626:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	f107 020c 	add.w	r2, r7, #12
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f002 fc1e 	bl	8006e78 <HAL_ADC_ConfigChannel>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff fe8d 	bl	800436c <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8004652:	4819      	ldr	r0, [pc, #100]	; (80046b8 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004654:	f011 fad8 	bl	8015c08 <iprintf>
		  }

		  //KANAAL VOOR DE FLUID POT
		  sConfig.Channel = ADC_CHANNEL_12;
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <_ZN10Components10init_ADC_1Ev+0x210>)
 800465a:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_4;
 800465c:	2318      	movs	r3, #24
 800465e:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004660:	2304      	movs	r3, #4
 8004662:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004664:	237f      	movs	r3, #127	; 0x7f
 8004666:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004668:	2304      	movs	r3, #4
 800466a:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f107 020c 	add.w	r2, r7, #12
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f002 fbfc 	bl	8006e78 <HAL_ADC_ConfigChannel>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <_ZN10Components10init_ADC_1Ev+0x1f0>
		  {
		    this->Error_Handler();
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fe6b 	bl	800436c <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8004696:	4808      	ldr	r0, [pc, #32]	; (80046b8 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004698:	f011 fab6 	bl	8015c08 <iprintf>
		  }


}
 800469c:	bf00      	nop
 800469e:	3738      	adds	r7, #56	; 0x38
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	08017fd0 	.word	0x08017fd0
 80046a8:	08017fe4 	.word	0x08017fe4
 80046ac:	2e300800 	.word	0x2e300800
 80046b0:	08018014 	.word	0x08018014
 80046b4:	3ac04000 	.word	0x3ac04000
 80046b8:	08018038 	.word	0x08018038
 80046bc:	32601000 	.word	0x32601000

080046c0 <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	2220      	movs	r2, #32
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f010 fe27 	bl	8015324 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	4a55      	ldr	r2, [pc, #340]	; (8004830 <_ZN10Components10init_ADC_2Ev+0x170>)
 80046dc:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80046e6:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	2200      	movs	r2, #0
 80046f6:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	2201      	movs	r2, #1
 8004706:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	2208      	movs	r2, #8
 800470e:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	2200      	movs	r2, #0
 800471e:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	2202      	movs	r2, #2
 8004726:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	2200      	movs	r2, #0
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004750:	2200      	movs	r2, #0
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2218      	movs	r2, #24
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	22e0      	movs	r2, #224	; 0xe0
 800476c:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	2200      	movs	r2, #0
 8004774:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2201      	movs	r2, #1
 800477c:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004782:	4618      	mov	r0, r3
 8004784:	f002 f8c4 	bl	8006910 <HAL_ADC_Init>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fde7 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 800479e:	4825      	ldr	r0, [pc, #148]	; (8004834 <_ZN10Components10init_ADC_2Ev+0x174>)
 80047a0:	f011 fab8 	bl	8015d14 <puts>
	  /** Configure Regular Channel
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <_ZN10Components10init_ADC_2Ev+0x178>)
 80047a6:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047a8:	2306      	movs	r3, #6
 80047aa:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047b0:	237f      	movs	r3, #127	; 0x7f
 80047b2:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047b4:	2304      	movs	r3, #4
 80047b6:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	f107 0208 	add.w	r2, r7, #8
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 fb56 	bl	8006e78 <HAL_ADC_ConfigChannel>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fdc5 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 80047e2:	4816      	ldr	r0, [pc, #88]	; (800483c <_ZN10Components10init_ADC_2Ev+0x17c>)
 80047e4:	f011 fa96 	bl	8015d14 <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80047e8:	4b15      	ldr	r3, [pc, #84]	; (8004840 <_ZN10Components10init_ADC_2Ev+0x180>)
 80047ea:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80047ec:	230c      	movs	r3, #12
 80047ee:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80047f0:	2304      	movs	r3, #4
 80047f2:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047f4:	237f      	movs	r3, #127	; 0x7f
 80047f6:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047f8:	2304      	movs	r3, #4
 80047fa:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	f107 0208 	add.w	r2, r7, #8
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f002 fb36 	bl	8006e78 <HAL_ADC_ConfigChannel>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fda5 	bl	800436c <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 8004822:	4808      	ldr	r0, [pc, #32]	; (8004844 <_ZN10Components10init_ADC_2Ev+0x184>)
 8004824:	f011 fa76 	bl	8015d14 <puts>

	  }


}
 8004828:	bf00      	nop
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	50000100 	.word	0x50000100
 8004834:	08018064 	.word	0x08018064
 8004838:	c3290000 	.word	0xc3290000
 800483c:	08018080 	.word	0x08018080
 8004840:	cb8c0000 	.word	0xcb8c0000
 8004844:	080180a8 	.word	0x080180a8

08004848 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8004850:	f107 0308 	add.w	r3, r7, #8
 8004854:	2220      	movs	r2, #32
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f010 fd63 	bl	8015324 <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a55      	ldr	r2, [pc, #340]	; (80049b8 <_ZN10Components10init_ADC_5Ev+0x170>)
 8004864:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800486e:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2200      	movs	r2, #0
 800487e:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	2200      	movs	r2, #0
 8004886:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2201      	movs	r2, #1
 800488e:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2208      	movs	r2, #8
 8004896:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2200      	movs	r2, #0
 80048a6:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2202      	movs	r2, #2
 80048ae:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2200      	movs	r2, #0
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	2200      	movs	r2, #0
 80048da:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	2218      	movs	r2, #24
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	22e0      	movs	r2, #224	; 0xe0
 80048f4:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2200      	movs	r2, #0
 80048fc:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2201      	movs	r2, #1
 8004904:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f800 	bl	8006910 <HAL_ADC_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fd23 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 8004926:	4825      	ldr	r0, [pc, #148]	; (80049bc <_ZN10Components10init_ADC_5Ev+0x174>)
 8004928:	f011 f96e 	bl	8015c08 <iprintf>
	  }

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <_ZN10Components10init_ADC_5Ev+0x178>)
 800492e:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004930:	2306      	movs	r3, #6
 8004932:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004938:	237f      	movs	r3, #127	; 0x7f
 800493a:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800493c:	2304      	movs	r3, #4
 800493e:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f107 0208 	add.w	r2, r7, #8
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f002 fa92 	bl	8006e78 <HAL_ADC_ConfigChannel>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fd01 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 800496a:	4816      	ldr	r0, [pc, #88]	; (80049c4 <_ZN10Components10init_ADC_5Ev+0x17c>)
 800496c:	f011 f94c 	bl	8015c08 <iprintf>

	  }

	  //selector motor (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8004970:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <_ZN10Components10init_ADC_5Ev+0x180>)
 8004972:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004974:	230c      	movs	r3, #12
 8004976:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004978:	2304      	movs	r3, #4
 800497a:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800497c:	237f      	movs	r3, #127	; 0x7f
 800497e:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004980:	2304      	movs	r3, #4
 8004982:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f107 0208 	add.w	r2, r7, #8
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f002 fa72 	bl	8006e78 <HAL_ADC_ConfigChannel>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf14      	ite	ne
 800499a:	2301      	movne	r3, #1
 800499c:	2300      	moveq	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fce1 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 80049aa:	4806      	ldr	r0, [pc, #24]	; (80049c4 <_ZN10Components10init_ADC_5Ev+0x17c>)
 80049ac:	f011 f92c 	bl	8015c08 <iprintf>
	  }




}
 80049b0:	bf00      	nop
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	50000600 	.word	0x50000600
 80049bc:	080180d0 	.word	0x080180d0
 80049c0:	94f00020 	.word	0x94f00020
 80049c4:	080180e8 	.word	0x080180e8
 80049c8:	8c900008 	.word	0x8c900008

080049cc <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <_ZN10Components11init_COMP_1Ev+0x70>)
 80049da:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2250      	movs	r2, #80	; 0x50
 80049ea:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2200      	movs	r2, #0
 80049f2:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2200      	movs	r2, #0
 8004a02:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 fad3 	bl	8007fbc <HAL_COMP_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fca0 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 8004a2c:	4804      	ldr	r0, [pc, #16]	; (8004a40 <_ZN10Components11init_COMP_1Ev+0x74>)
 8004a2e:	f011 f8eb 	bl	8015c08 <iprintf>

	  }
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40010200 	.word	0x40010200
 8004a40:	0801810c 	.word	0x0801810c

08004a44 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <_ZN10Components11init_COMP_2Ev+0x70>)
 8004a52:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2250      	movs	r2, #80	; 0x50
 8004a62:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f003 fa97 	bl	8007fbc <HAL_COMP_Init>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff fc64 	bl	800436c <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 8004aa4:	4804      	ldr	r0, [pc, #16]	; (8004ab8 <_ZN10Components11init_COMP_2Ev+0x74>)
 8004aa6:	f011 f8af 	bl	8015c08 <iprintf>
	    }




}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40010204 	.word	0x40010204
 8004ab8:	08018124 	.word	0x08018124

08004abc <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4a16      	ldr	r2, [pc, #88]	; (8004b24 <_ZN10Components11init_COMP_4Ev+0x68>)
 8004aca:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2240      	movs	r2, #64	; 0x40
 8004ada:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f003 fa5f 	bl	8007fbc <HAL_COMP_Init>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fc2c 	bl	800436c <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8004b14:	4804      	ldr	r0, [pc, #16]	; (8004b28 <_ZN10Components11init_COMP_4Ev+0x6c>)
 8004b16:	f011 f877 	bl	8015c08 <iprintf>
    }
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	4001020c 	.word	0x4001020c
 8004b28:	0801813c 	.word	0x0801813c

08004b2c <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <_ZN10Components11init_COMP_5Ev+0x70>)
 8004b3a:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2240      	movs	r2, #64	; 0x40
 8004b4a:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f003 fa23 	bl	8007fbc <HAL_COMP_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fbf0 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 8004b8c:	4804      	ldr	r0, [pc, #16]	; (8004ba0 <_ZN10Components11init_COMP_5Ev+0x74>)
 8004b8e:	f011 f83b 	bl	8015c08 <iprintf>

	  }

}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40010210 	.word	0x40010210
 8004ba0:	08018154 	.word	0x08018154

08004ba4 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	4a16      	ldr	r2, [pc, #88]	; (8004c0c <_ZN10Components11init_COMP_7Ev+0x68>)
 8004bb2:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2250      	movs	r2, #80	; 0x50
 8004bc2:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f003 f9e7 	bl	8007fbc <HAL_COMP_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fbb4 	bl	800436c <_ZN10Components13Error_HandlerEv>
	   }



}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40010218 	.word	0x40010218

08004c10 <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08e      	sub	sp, #56	; 0x38
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	2230      	movs	r2, #48	; 0x30
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f010 fb7f 	bl	8015324 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <_ZN10Components10init_DAC_1Ev+0xc8>)
 8004c2c:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 fc6b 	bl	800850e <HAL_DAC_Init>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf14      	ite	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	2300      	moveq	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fb8f 	bl	800436c <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8004c4e:	4823      	ldr	r0, [pc, #140]	; (8004cdc <_ZN10Components10init_DAC_1Ev+0xcc>)
 8004c50:	f010 ffda 	bl	8015c08 <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004c54:	2302      	movs	r3, #2
 8004c56:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004c70:	2302      	movs	r3, #2
 8004c72:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004c74:	2300      	movs	r3, #0
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f107 0108 	add.w	r1, r7, #8
 8004c80:	2200      	movs	r2, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 fc66 	bl	8008554 <HAL_DAC_ConfigChannel>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf14      	ite	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	2300      	moveq	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fb67 	bl	800436c <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8004c9e:	480f      	ldr	r0, [pc, #60]	; (8004cdc <_ZN10Components10init_DAC_1Ev+0xcc>)
 8004ca0:	f010 ffb2 	bl	8015c08 <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f107 0108 	add.w	r1, r7, #8
 8004cac:	2210      	movs	r2, #16
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 fc50 	bl	8008554 <HAL_DAC_ConfigChannel>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf14      	ite	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	2300      	moveq	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fb51 	bl	800436c <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8004cca:	4804      	ldr	r0, [pc, #16]	; (8004cdc <_ZN10Components10init_DAC_1Ev+0xcc>)
 8004ccc:	f010 ff9c 	bl	8015c08 <iprintf>

    }

}
 8004cd0:	bf00      	nop
 8004cd2:	3738      	adds	r7, #56	; 0x38
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	50000800 	.word	0x50000800
 8004cdc:	0801816c 	.word	0x0801816c

08004ce0 <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08e      	sub	sp, #56	; 0x38
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	2230      	movs	r2, #48	; 0x30
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f010 fb17 	bl	8015324 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <_ZN10Components10init_DAC_2Ev+0x9c>)
 8004cfc:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 fc03 	bl	800850e <HAL_DAC_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fb27 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8004d1e:	4818      	ldr	r0, [pc, #96]	; (8004d80 <_ZN10Components10init_DAC_2Ev+0xa0>)
 8004d20:	f010 ff72 	bl	8015c08 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004d24:	2302      	movs	r3, #2
 8004d26:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004d40:	2302      	movs	r3, #2
 8004d42:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004d48:	f107 0308 	add.w	r3, r7, #8
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	4619      	mov	r1, r3
 8004d50:	480c      	ldr	r0, [pc, #48]	; (8004d84 <_ZN10Components10init_DAC_2Ev+0xa4>)
 8004d52:	f003 fbff 	bl	8008554 <HAL_DAC_ConfigChannel>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf14      	ite	ne
 8004d5c:	2301      	movne	r3, #1
 8004d5e:	2300      	moveq	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fb00 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8004d6c:	4804      	ldr	r0, [pc, #16]	; (8004d80 <_ZN10Components10init_DAC_2Ev+0xa0>)
 8004d6e:	f010 ff4b 	bl	8015c08 <iprintf>

	  }


}
 8004d72:	bf00      	nop
 8004d74:	3738      	adds	r7, #56	; 0x38
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	50000c00 	.word	0x50000c00
 8004d80:	08018184 	.word	0x08018184
 8004d84:	200004a0 	.word	0x200004a0

08004d88 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08e      	sub	sp, #56	; 0x38
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	2230      	movs	r2, #48	; 0x30
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f010 fac3 	bl	8015324 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <_ZN10Components10init_DAC_3Ev+0x9c>)
 8004da4:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f003 fbaf 	bl	800850e <HAL_DAC_Init>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	2300      	moveq	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff fad3 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8004dc6:	4818      	ldr	r0, [pc, #96]	; (8004e28 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8004dc8:	f010 ff1e 	bl	8015c08 <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004de4:	2302      	movs	r3, #2
 8004de6:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004de8:	2302      	movs	r3, #2
 8004dea:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004dec:	2300      	movs	r3, #0
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f107 0108 	add.w	r1, r7, #8
 8004df8:	2210      	movs	r2, #16
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f003 fbaa 	bl	8008554 <HAL_DAC_ConfigChannel>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff faab 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8004e16:	4804      	ldr	r0, [pc, #16]	; (8004e28 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8004e18:	f010 fef6 	bl	8015c08 <iprintf>

	  }



}
 8004e1c:	bf00      	nop
 8004e1e:	3738      	adds	r7, #56	; 0x38
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	50001000 	.word	0x50001000
 8004e28:	0801819c 	.word	0x0801819c

08004e2c <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 8004e34:	f107 0308 	add.w	r3, r7, #8
 8004e38:	2230      	movs	r2, #48	; 0x30
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f010 fa71 	bl	8015324 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <_ZN10Components10init_DAC_4Ev+0x9c>)
 8004e48:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 fb5d 	bl	800850e <HAL_DAC_Init>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fa81 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8004e6a:	4818      	ldr	r0, [pc, #96]	; (8004ecc <_ZN10Components10init_DAC_4Ev+0xa0>)
 8004e6c:	f010 fecc 	bl	8015c08 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004e70:	2302      	movs	r3, #2
 8004e72:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f107 0108 	add.w	r1, r7, #8
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 fb58 	bl	8008554 <HAL_DAC_ConfigChannel>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fa59 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 8004eba:	4804      	ldr	r0, [pc, #16]	; (8004ecc <_ZN10Components10init_DAC_4Ev+0xa0>)
 8004ebc:	f010 fea4 	bl	8015c08 <iprintf>

	  }


}
 8004ec0:	bf00      	nop
 8004ec2:	3738      	adds	r7, #56	; 0x38
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	50001400 	.word	0x50001400
 8004ecc:	080181b4 	.word	0x080181b4

08004ed0 <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <_ZN10Components9init_OA_1Ev+0x80>)
 8004ede:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2201      	movs	r2, #1
 8004efe:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2200      	movs	r2, #0
 8004f06:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2200      	movs	r2, #0
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f005 fe23 	bl	800ab70 <HAL_OPAMP_Init>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fa16 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 8004f40:	4804      	ldr	r0, [pc, #16]	; (8004f54 <_ZN10Components9init_OA_1Ev+0x84>)
 8004f42:	f010 fe61 	bl	8015c08 <iprintf>
	  }


}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40010300 	.word	0x40010300
 8004f54:	080181cc 	.word	0x080181cc

08004f58 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <_ZN10Components9init_OA_2Ev+0x80>)
 8004f66:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	2240      	movs	r2, #64	; 0x40
 8004f76:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	2201      	movs	r2, #1
 8004f86:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	2200      	movs	r2, #0
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f005 fdde 	bl	800ab70 <HAL_OPAMP_Init>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff f9d1 	bl	800436c <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 8004fca:	4804      	ldr	r0, [pc, #16]	; (8004fdc <_ZN10Components9init_OA_2Ev+0x84>)
 8004fcc:	f010 fe1c 	bl	8015c08 <iprintf>

	    }


}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40010304 	.word	0x40010304
 8004fdc:	080181e4 	.word	0x080181e4

08004fe0 <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <_ZN10Components9init_OA_3Ev+0x80>)
 8004fee:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	2200      	movs	r2, #0
 8005006:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	2201      	movs	r2, #1
 800500e:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	2200      	movs	r2, #0
 8005016:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	2200      	movs	r2, #0
 800501e:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	2200      	movs	r2, #0
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	2200      	movs	r2, #0
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	4618      	mov	r0, r3
 8005036:	f005 fd9b 	bl	800ab70 <HAL_OPAMP_Init>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff f98e 	bl	800436c <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 8005050:	4804      	ldr	r0, [pc, #16]	; (8005064 <_ZN10Components9init_OA_3Ev+0x84>)
 8005052:	f010 fdd9 	bl	8015c08 <iprintf>

	   }

}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40010308 	.word	0x40010308
 8005064:	080181fc 	.word	0x080181fc

08005068 <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <_ZN10Components9init_OA_4Ev+0x80>)
 8005076:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2240      	movs	r2, #64	; 0x40
 8005086:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	2200      	movs	r2, #0
 800508e:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2201      	movs	r2, #1
 8005096:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	2200      	movs	r2, #0
 800509e:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	2200      	movs	r2, #0
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	2200      	movs	r2, #0
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	4618      	mov	r0, r3
 80050c0:	f005 fd56 	bl	800ab70 <HAL_OPAMP_Init>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bf14      	ite	ne
 80050ca:	2301      	movne	r3, #1
 80050cc:	2300      	moveq	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff f949 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 80050da:	4804      	ldr	r0, [pc, #16]	; (80050ec <_ZN10Components9init_OA_4Ev+0x84>)
 80050dc:	f010 fd94 	bl	8015c08 <iprintf>

	  }
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	4001030c 	.word	0x4001030c
 80050ec:	08018214 	.word	0x08018214

080050f0 <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <_ZN10Components9init_OA_5Ev+0x80>)
 80050fe:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005104:	2200      	movs	r2, #0
 8005106:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	2240      	movs	r2, #64	; 0x40
 800510e:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	2200      	movs	r2, #0
 8005116:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	2201      	movs	r2, #1
 800511e:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	2200      	movs	r2, #0
 800512e:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005138:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	2200      	movs	r2, #0
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	4618      	mov	r0, r3
 8005148:	f005 fd12 	bl	800ab70 <HAL_OPAMP_Init>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	bf14      	ite	ne
 8005152:	2301      	movne	r3, #1
 8005154:	2300      	moveq	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff f905 	bl	800436c <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 8005162:	4804      	ldr	r0, [pc, #16]	; (8005174 <_ZN10Components9init_OA_5Ev+0x84>)
 8005164:	f010 fd50 	bl	8015c08 <iprintf>

	  }

}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40010310 	.word	0x40010310
 8005174:	0801822c 	.word	0x0801822c

08005178 <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

	return &hadc2;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <_ZN10Components9get_ADC_2Ev+0x18>)
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000674 	.word	0x20000674

080051ac <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

	return &hadc5;
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <_ZN10Components9get_ADC_5Ev+0x18>)

}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	200006e0 	.word	0x200006e0

080051c8 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, MavlinkControl* mavlink, Convertor *convertor){
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]

	this->_sbus = sbus;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	605a      	str	r2, [r3, #4]
	this->_mavlink = mavlink;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	609a      	str	r2, [r3, #8]

}
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <main>:
//UART HANDLES IN MAIN FOR NOW, DMA HANDLES are created in stm32g4xx_hal_msp.c file
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


int main(void){
 80051f8:	b580      	push	{r7, lr}
 80051fa:	f5ad 6dfa 	sub.w	sp, sp, #2000	; 0x7d0
 80051fe:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 8005200:	f001 f8ab 	bl	800635a <HAL_Init>
	//Initialize clock/DMA/... configurations and components.
	HAL_Delay(100);
 8005204:	2064      	movs	r0, #100	; 0x64
 8005206:	f001 f919 	bl	800643c <HAL_Delay>
	Initializer init(&huart1, &huart2);
 800520a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 800520e:	4a46      	ldr	r2, [pc, #280]	; (8005328 <main+0x130>)
 8005210:	4946      	ldr	r1, [pc, #280]	; (800532c <main+0x134>)
 8005212:	4618      	mov	r0, r3
 8005214:	f7fc f950 	bl	80014b8 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8005218:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 800521c:	4618      	mov	r0, r3
 800521e:	f7fc f967 	bl	80014f0 <_ZN11Initializer12init_ConfigsEv>

	Components components;
 8005222:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8005226:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800522a:	4a41      	ldr	r2, [pc, #260]	; (8005330 <main+0x138>)
 800522c:	4618      	mov	r0, r3
 800522e:	4611      	mov	r1, r2
 8005230:	2344      	movs	r3, #68	; 0x44
 8005232:	461a      	mov	r2, r3
 8005234:	f010 f868 	bl	8015308 <memcpy>
	components.init_Components();
 8005238:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff f8b5 	bl	80043ac <_ZN10Components15init_ComponentsEv>

	HAL_Delay(100);
 8005242:	2064      	movs	r0, #100	; 0x64
 8005244:	f001 f8fa 	bl	800643c <HAL_Delay>
	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8005248:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800524c:	4936      	ldr	r1, [pc, #216]	; (8005328 <main+0x130>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fb7a 	bl	8003948 <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	MavlinkControl mavlink(&huart1, init.get_i2c());
 8005254:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8005258:	4618      	mov	r0, r3
 800525a:	f7fd fa15 	bl	8002688 <_ZN11Initializer7get_i2cEv>
 800525e:	4602      	mov	r2, r0
 8005260:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005264:	4931      	ldr	r1, [pc, #196]	; (800532c <main+0x134>)
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe f998 	bl	800359c <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>

	Convertor convertor(&sbus, &init, &components);
 800526c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005270:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 8005274:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8005278:	f107 001c 	add.w	r0, r7, #28
 800527c:	f7fb fe3e 	bl	8000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>
	Debugger debugger(&sbus, &mavlink, &convertor);
 8005280:	f107 031c 	add.w	r3, r7, #28
 8005284:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005288:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 800528c:	f107 0010 	add.w	r0, r7, #16
 8005290:	f7ff ff9a 	bl	80051c8 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9Convertor>
	Altimeter altimeter(&hi2c2);
 8005294:	463b      	mov	r3, r7
 8005296:	4927      	ldr	r1, [pc, #156]	; (8005334 <main+0x13c>)
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe ff27 	bl	80040ec <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>


	HAL_Delay(100);
 800529e:	2064      	movs	r0, #100	; 0x64
 80052a0:	f001 f8cc 	bl	800643c <HAL_Delay>

	printf(" sanity check \r \n");
 80052a4:	4824      	ldr	r0, [pc, #144]	; (8005338 <main+0x140>)
 80052a6:	f010 fd35 	bl	8015d14 <puts>


    altimeter.init_altimeter();
 80052aa:	463b      	mov	r3, r7
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fe ff33 	bl	8004118 <_ZN9Altimeter14init_altimeterEv>

	/* Main loop */
	while (1){


		if(HAL_GetTick() % 1000 == 0){
 80052b2:	f001 f8b7 	bl	8006424 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b20      	ldr	r3, [pc, #128]	; (800533c <main+0x144>)
 80052ba:	fba3 1302 	umull	r1, r3, r3, r2
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <main+0xea>

			HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 80052d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052dc:	4818      	ldr	r0, [pc, #96]	; (8005340 <main+0x148>)
 80052de:	f003 ffbb 	bl	8009258 <HAL_GPIO_TogglePin>


		}

		  sbus.update();
 80052e2:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fb4c 	bl	8003984 <_ZN4SBUS6updateEv>
		  convertor.process();
 80052ec:	f107 031c 	add.w	r3, r7, #28
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fc f8c7 	bl	8001484 <_ZN9Convertor7processEv>
		  mavlink.update_TX();
 80052f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe f9d6 	bl	80036ac <_ZN14MavlinkControl9update_TXEv>
		  mavlink.update_RX();
 8005300:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe f9bf 	bl	8003688 <_ZN14MavlinkControl9update_RXEv>
		  printf("testing %f \r\n",altimeter.get_altitude());
 800530a:	463b      	mov	r3, r7
 800530c:	4618      	mov	r0, r3
 800530e:	f7fe ff5d 	bl	80041cc <_ZN9Altimeter12get_altitudeEv>
 8005312:	ee10 3a10 	vmov	r3, s0
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb f93e 	bl	8000598 <__aeabi_f2d>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4808      	ldr	r0, [pc, #32]	; (8005344 <main+0x14c>)
 8005322:	f010 fc71 	bl	8015c08 <iprintf>
		if(HAL_GetTick() % 1000 == 0){
 8005326:	e7c4      	b.n	80052b2 <main+0xba>
 8005328:	20000828 	.word	0x20000828
 800532c:	20000798 	.word	0x20000798
 8005330:	08018268 	.word	0x08018268
 8005334:	2000074c 	.word	0x2000074c
 8005338:	08018244 	.word	0x08018244
 800533c:	10624dd3 	.word	0x10624dd3
 8005340:	48000800 	.word	0x48000800
 8005344:	08018258 	.word	0x08018258

08005348 <Error_Handler>:
}




void Error_Handler(void){
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800534e:	2300      	movs	r3, #0
 8005350:	71fb      	strb	r3, [r7, #7]
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	2b1d      	cmp	r3, #29
 8005356:	d80e      	bhi.n	8005376 <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8005358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800535c:	4808      	ldr	r0, [pc, #32]	; (8005380 <Error_Handler+0x38>)
 800535e:	f003 ff7b 	bl	8009258 <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8005362:	4808      	ldr	r0, [pc, #32]	; (8005384 <Error_Handler+0x3c>)
 8005364:	f010 fcd6 	bl	8015d14 <puts>
		HAL_Delay(100);
 8005368:	2064      	movs	r0, #100	; 0x64
 800536a:	f001 f867 	bl	800643c <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	3301      	adds	r3, #1
 8005372:	71fb      	strb	r3, [r7, #7]
 8005374:	e7ed      	b.n	8005352 <Error_Handler+0xa>
	}

}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	48000800 	.word	0x48000800
 8005384:	080182ac 	.word	0x080182ac

08005388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <HAL_MspInit+0x44>)
 8005390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005392:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <HAL_MspInit+0x44>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6613      	str	r3, [r2, #96]	; 0x60
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_MspInit+0x44>)
 800539c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_MspInit+0x44>)
 80053a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053aa:	4a08      	ldr	r2, [pc, #32]	; (80053cc <HAL_MspInit+0x44>)
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6593      	str	r3, [r2, #88]	; 0x58
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_MspInit+0x44>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40021000 	.word	0x40021000

080053d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b0a2      	sub	sp, #136	; 0x88
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	609a      	str	r2, [r3, #8]
 80053e4:	60da      	str	r2, [r3, #12]
 80053e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053e8:	f107 0320 	add.w	r3, r7, #32
 80053ec:	2254      	movs	r2, #84	; 0x54
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f00f ff97 	bl	8015324 <memset>
  if(hadc->Instance==ADC1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053fe:	f040 8086 	bne.w	800550e <HAL_ADC_MspInit+0x13e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005406:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005408:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800540c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800540e:	f107 0320 	add.w	r3, r7, #32
 8005412:	4618      	mov	r0, r3
 8005414:	f008 f8de 	bl	800d5d4 <HAL_RCCEx_PeriphCLKConfig>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800541e:	f7ff ff93 	bl	8005348 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005422:	4b8e      	ldr	r3, [pc, #568]	; (800565c <HAL_ADC_MspInit+0x28c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	4a8c      	ldr	r2, [pc, #560]	; (800565c <HAL_ADC_MspInit+0x28c>)
 800542a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800542c:	4b8b      	ldr	r3, [pc, #556]	; (800565c <HAL_ADC_MspInit+0x28c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10b      	bne.n	800544c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005434:	4b8a      	ldr	r3, [pc, #552]	; (8005660 <HAL_ADC_MspInit+0x290>)
 8005436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005438:	4a89      	ldr	r2, [pc, #548]	; (8005660 <HAL_ADC_MspInit+0x290>)
 800543a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800543e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005440:	4b87      	ldr	r3, [pc, #540]	; (8005660 <HAL_ADC_MspInit+0x290>)
 8005442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800544c:	4b84      	ldr	r3, [pc, #528]	; (8005660 <HAL_ADC_MspInit+0x290>)
 800544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005450:	4a83      	ldr	r2, [pc, #524]	; (8005660 <HAL_ADC_MspInit+0x290>)
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005458:	4b81      	ldr	r3, [pc, #516]	; (8005660 <HAL_ADC_MspInit+0x290>)
 800545a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005464:	4b7e      	ldr	r3, [pc, #504]	; (8005660 <HAL_ADC_MspInit+0x290>)
 8005466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005468:	4a7d      	ldr	r2, [pc, #500]	; (8005660 <HAL_ADC_MspInit+0x290>)
 800546a:	f043 0302 	orr.w	r3, r3, #2
 800546e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005470:	4b7b      	ldr	r3, [pc, #492]	; (8005660 <HAL_ADC_MspInit+0x290>)
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 800547c:	2301      	movs	r3, #1
 800547e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005480:	2303      	movs	r3, #3
 8005482:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8005488:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800548c:	4619      	mov	r1, r3
 800548e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005492:	f003 fd47 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8005496:	f641 0302 	movw	r3, #6146	; 0x1802
 800549a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800549c:	2303      	movs	r3, #3
 800549e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80054a8:	4619      	mov	r1, r3
 80054aa:	486e      	ldr	r0, [pc, #440]	; (8005664 <HAL_ADC_MspInit+0x294>)
 80054ac:	f003 fd3a 	bl	8008f24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80054b0:	4b6d      	ldr	r3, [pc, #436]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054b2:	4a6e      	ldr	r2, [pc, #440]	; (800566c <HAL_ADC_MspInit+0x29c>)
 80054b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80054b6:	4b6c      	ldr	r3, [pc, #432]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054b8:	2205      	movs	r2, #5
 80054ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054bc:	4b6a      	ldr	r3, [pc, #424]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054be:	2200      	movs	r2, #0
 80054c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80054c2:	4b69      	ldr	r3, [pc, #420]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80054c8:	4b67      	ldr	r3, [pc, #412]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80054ce:	4b66      	ldr	r3, [pc, #408]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80054d6:	4b64      	ldr	r3, [pc, #400]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80054de:	4b62      	ldr	r3, [pc, #392]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80054e4:	4b60      	ldr	r3, [pc, #384]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80054ea:	485f      	ldr	r0, [pc, #380]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054ec:	f003 f9da 	bl	80088a4 <HAL_DMA_Init>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80054f6:	f7ff ff27 	bl	8005348 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a5a      	ldr	r2, [pc, #360]	; (8005668 <HAL_ADC_MspInit+0x298>)
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
 8005500:	4a59      	ldr	r2, [pc, #356]	; (8005668 <HAL_ADC_MspInit+0x298>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 8005506:	485a      	ldr	r0, [pc, #360]	; (8005670 <HAL_ADC_MspInit+0x2a0>)
 8005508:	f010 fc04 	bl	8015d14 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800550c:	e0a1      	b.n	8005652 <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a58      	ldr	r2, [pc, #352]	; (8005674 <HAL_ADC_MspInit+0x2a4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d150      	bne.n	80055ba <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800551e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005522:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005524:	f107 0320 	add.w	r3, r7, #32
 8005528:	4618      	mov	r0, r3
 800552a:	f008 f853 	bl	800d5d4 <HAL_RCCEx_PeriphCLKConfig>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 8005534:	f7ff ff08 	bl	8005348 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005538:	4b48      	ldr	r3, [pc, #288]	; (800565c <HAL_ADC_MspInit+0x28c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a47      	ldr	r2, [pc, #284]	; (800565c <HAL_ADC_MspInit+0x28c>)
 8005540:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005542:	4b46      	ldr	r3, [pc, #280]	; (800565c <HAL_ADC_MspInit+0x28c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d10b      	bne.n	8005562 <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800554a:	4b45      	ldr	r3, [pc, #276]	; (8005660 <HAL_ADC_MspInit+0x290>)
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	4a44      	ldr	r2, [pc, #272]	; (8005660 <HAL_ADC_MspInit+0x290>)
 8005550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005556:	4b42      	ldr	r3, [pc, #264]	; (8005660 <HAL_ADC_MspInit+0x290>)
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 8005562:	4b45      	ldr	r3, [pc, #276]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 8005564:	4a45      	ldr	r2, [pc, #276]	; (800567c <HAL_ADC_MspInit+0x2ac>)
 8005566:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005568:	4b43      	ldr	r3, [pc, #268]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 800556a:	2224      	movs	r2, #36	; 0x24
 800556c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800556e:	4b42      	ldr	r3, [pc, #264]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 8005570:	2200      	movs	r2, #0
 8005572:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005574:	4b40      	ldr	r3, [pc, #256]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 8005576:	2200      	movs	r2, #0
 8005578:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005580:	4b3d      	ldr	r3, [pc, #244]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 8005582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005586:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005588:	4b3b      	ldr	r3, [pc, #236]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 800558a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005590:	4b39      	ldr	r3, [pc, #228]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 8005592:	2200      	movs	r2, #0
 8005594:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005596:	4b38      	ldr	r3, [pc, #224]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 8005598:	2200      	movs	r2, #0
 800559a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800559c:	4836      	ldr	r0, [pc, #216]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 800559e:	f003 f981 	bl	80088a4 <HAL_DMA_Init>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 80055a8:	f7ff fece 	bl	8005348 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a32      	ldr	r2, [pc, #200]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
 80055b2:	4a31      	ldr	r2, [pc, #196]	; (8005678 <HAL_ADC_MspInit+0x2a8>)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80055b8:	e04b      	b.n	8005652 <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC5)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a30      	ldr	r2, [pc, #192]	; (8005680 <HAL_ADC_MspInit+0x2b0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d146      	bne.n	8005652 <HAL_ADC_MspInit+0x282>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80055c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80055ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055ce:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055d0:	f107 0320 	add.w	r3, r7, #32
 80055d4:	4618      	mov	r0, r3
 80055d6:	f007 fffd 	bl	800d5d4 <HAL_RCCEx_PeriphCLKConfig>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 80055e0:	f7ff feb2 	bl	8005348 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <HAL_ADC_MspInit+0x290>)
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e8:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <HAL_ADC_MspInit+0x290>)
 80055ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <HAL_ADC_MspInit+0x290>)
 80055f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 80055fc:	4b21      	ldr	r3, [pc, #132]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 80055fe:	4a22      	ldr	r2, [pc, #136]	; (8005688 <HAL_ADC_MspInit+0x2b8>)
 8005600:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8005602:	4b20      	ldr	r3, [pc, #128]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 8005604:	2227      	movs	r2, #39	; 0x27
 8005606:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005608:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 800560a:	2200      	movs	r2, #0
 800560c:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 8005610:	2200      	movs	r2, #0
 8005612:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8005614:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800561a:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 800561c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005620:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 8005624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005628:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 800562c:	2200      	movs	r2, #0
 800562e:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8005630:	4b14      	ldr	r3, [pc, #80]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 8005632:	2200      	movs	r2, #0
 8005634:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8005636:	4813      	ldr	r0, [pc, #76]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 8005638:	f003 f934 	bl	80088a4 <HAL_DMA_Init>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 8005642:	f7ff fe81 	bl	8005348 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
 800564c:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <HAL_ADC_MspInit+0x2b4>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005652:	bf00      	nop
 8005654:	3788      	adds	r7, #136	; 0x88
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000a98 	.word	0x20000a98
 8005660:	40021000 	.word	0x40021000
 8005664:	48000400 	.word	0x48000400
 8005668:	200008b8 	.word	0x200008b8
 800566c:	4002001c 	.word	0x4002001c
 8005670:	080182d0 	.word	0x080182d0
 8005674:	50000100 	.word	0x50000100
 8005678:	20000918 	.word	0x20000918
 800567c:	40020030 	.word	0x40020030
 8005680:	50000600 	.word	0x50000600
 8005684:	20000978 	.word	0x20000978
 8005688:	40020044 	.word	0x40020044

0800568c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08c      	sub	sp, #48	; 0x30
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005694:	f107 031c 	add.w	r3, r7, #28
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <HAL_COMP_MspInit+0x114>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d119      	bne.n	80056e2 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ae:	4b3d      	ldr	r3, [pc, #244]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ba:	4b3a      	ldr	r3, [pc, #232]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056ca:	2303      	movs	r3, #3
 80056cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d2:	f107 031c 	add.w	r3, r7, #28
 80056d6:	4619      	mov	r1, r3
 80056d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056dc:	f003 fc22 	bl	8008f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 80056e0:	e05a      	b.n	8005798 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a30      	ldr	r2, [pc, #192]	; (80057a8 <HAL_COMP_MspInit+0x11c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d118      	bne.n	800571e <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ec:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	4a2c      	ldr	r2, [pc, #176]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 80056f2:	f043 0302 	orr.w	r3, r3, #2
 80056f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 80056fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 8005704:	2301      	movs	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005708:	2303      	movs	r3, #3
 800570a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 8005710:	f107 031c 	add.w	r3, r7, #28
 8005714:	4619      	mov	r1, r3
 8005716:	4825      	ldr	r0, [pc, #148]	; (80057ac <HAL_COMP_MspInit+0x120>)
 8005718:	f003 fc04 	bl	8008f24 <HAL_GPIO_Init>
}
 800571c:	e03c      	b.n	8005798 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <HAL_COMP_MspInit+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d119      	bne.n	800575c <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 800572a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 8005736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8005740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005746:	2303      	movs	r3, #3
 8005748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574a:	2300      	movs	r3, #0
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 800574e:	f107 031c 	add.w	r3, r7, #28
 8005752:	4619      	mov	r1, r3
 8005754:	4815      	ldr	r0, [pc, #84]	; (80057ac <HAL_COMP_MspInit+0x120>)
 8005756:	f003 fbe5 	bl	8008f24 <HAL_GPIO_Init>
}
 800575a:	e01d      	b.n	8005798 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a14      	ldr	r2, [pc, #80]	; (80057b4 <HAL_COMP_MspInit+0x128>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d118      	bne.n	8005798 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <HAL_COMP_MspInit+0x118>)
 8005774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 800577e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005784:	2303      	movs	r3, #3
 8005786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	2300      	movs	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 800578c:	f107 031c 	add.w	r3, r7, #28
 8005790:	4619      	mov	r1, r3
 8005792:	4806      	ldr	r0, [pc, #24]	; (80057ac <HAL_COMP_MspInit+0x120>)
 8005794:	f003 fbc6 	bl	8008f24 <HAL_GPIO_Init>
}
 8005798:	bf00      	nop
 800579a:	3730      	adds	r7, #48	; 0x30
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40010204 	.word	0x40010204
 80057a4:	40021000 	.word	0x40021000
 80057a8:	4001020c 	.word	0x4001020c
 80057ac:	48000400 	.word	0x48000400
 80057b0:	40010210 	.word	0x40010210
 80057b4:	40010218 	.word	0x40010218

080057b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a25      	ldr	r2, [pc, #148]	; (800585c <HAL_DAC_MspInit+0xa4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d10c      	bne.n	80057e4 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80057ca:	4b25      	ldr	r3, [pc, #148]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	4a24      	ldr	r2, [pc, #144]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 80057d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80057e2:	e034      	b.n	800584e <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_DAC_MspInit+0xac>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10c      	bne.n	8005808 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 80057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 80057f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057fa:	4b19      	ldr	r3, [pc, #100]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 80057fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
}
 8005806:	e022      	b.n	800584e <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a16      	ldr	r2, [pc, #88]	; (8005868 <HAL_DAC_MspInit+0xb0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10c      	bne.n	800582c <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8005812:	4b13      	ldr	r3, [pc, #76]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 8005814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 8005818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800581c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800581e:	4b10      	ldr	r3, [pc, #64]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 8005820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
}
 800582a:	e010      	b.n	800584e <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0e      	ldr	r2, [pc, #56]	; (800586c <HAL_DAC_MspInit+0xb4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10b      	bne.n	800584e <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 8005838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583a:	4a09      	ldr	r2, [pc, #36]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 800583c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <HAL_DAC_MspInit+0xa8>)
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	50000800 	.word	0x50000800
 8005860:	40021000 	.word	0x40021000
 8005864:	50000c00 	.word	0x50000c00
 8005868:	50001000 	.word	0x50001000
 800586c:	50001400 	.word	0x50001400

08005870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b09e      	sub	sp, #120	; 0x78
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005878:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005888:	f107 0310 	add.w	r3, r7, #16
 800588c:	2254      	movs	r2, #84	; 0x54
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f00f fd47 	bl	8015324 <memset>
  if(hi2c->Instance==I2C2)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a27      	ldr	r2, [pc, #156]	; (8005938 <HAL_I2C_MspInit+0xc8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d147      	bne.n	8005930 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80058a4:	2300      	movs	r3, #0
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058a8:	f107 0310 	add.w	r3, r7, #16
 80058ac:	4618      	mov	r0, r3
 80058ae:	f007 fe91 	bl	800d5d4 <HAL_RCCEx_PeriphCLKConfig>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80058b8:	f7ff fd46 	bl	8005348 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058bc:	4b1f      	ldr	r3, [pc, #124]	; (800593c <HAL_I2C_MspInit+0xcc>)
 80058be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c0:	4a1e      	ldr	r2, [pc, #120]	; (800593c <HAL_I2C_MspInit+0xcc>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058c8:	4b1c      	ldr	r3, [pc, #112]	; (800593c <HAL_I2C_MspInit+0xcc>)
 80058ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80058d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058da:	2312      	movs	r3, #18
 80058dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058e2:	2300      	movs	r3, #0
 80058e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80058e6:	2304      	movs	r3, #4
 80058e8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80058ee:	4619      	mov	r1, r3
 80058f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058f4:	f003 fb16 	bl	8008f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <HAL_I2C_MspInit+0xcc>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	4a0f      	ldr	r2, [pc, #60]	; (800593c <HAL_I2C_MspInit+0xcc>)
 80058fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005902:	6593      	str	r3, [r2, #88]	; 0x58
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_I2C_MspInit+0xcc>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005910:	2200      	movs	r2, #0
 8005912:	2100      	movs	r1, #0
 8005914:	2021      	movs	r0, #33	; 0x21
 8005916:	f002 fdc6 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800591a:	2021      	movs	r0, #33	; 0x21
 800591c:	f002 fddd 	bl	80084da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8005920:	2200      	movs	r2, #0
 8005922:	2100      	movs	r1, #0
 8005924:	2022      	movs	r0, #34	; 0x22
 8005926:	f002 fdbe 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800592a:	2022      	movs	r0, #34	; 0x22
 800592c:	f002 fdd5 	bl	80084da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005930:	bf00      	nop
 8005932:	3778      	adds	r7, #120	; 0x78
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40005800 	.word	0x40005800
 800593c:	40021000 	.word	0x40021000

08005940 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	; 0x30
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005948:	f107 031c 	add.w	r3, r7, #28
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a4d      	ldr	r2, [pc, #308]	; (8005a94 <HAL_OPAMP_MspInit+0x154>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d119      	bne.n	8005996 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005962:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005966:	4a4c      	ldr	r2, [pc, #304]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 800597a:	230a      	movs	r3, #10
 800597c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800597e:	2303      	movs	r3, #3
 8005980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005986:	f107 031c 	add.w	r3, r7, #28
 800598a:	4619      	mov	r1, r3
 800598c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005990:	f003 fac8 	bl	8008f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 8005994:	e079      	b.n	8005a8a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a40      	ldr	r2, [pc, #256]	; (8005a9c <HAL_OPAMP_MspInit+0x15c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d119      	bne.n	80059d4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059a0:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 80059a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a4:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ac:	4b3a      	ldr	r3, [pc, #232]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 80059ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80059b8:	23a0      	movs	r3, #160	; 0xa0
 80059ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059bc:	2303      	movs	r3, #3
 80059be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c4:	f107 031c 	add.w	r3, r7, #28
 80059c8:	4619      	mov	r1, r3
 80059ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ce:	f003 faa9 	bl	8008f24 <HAL_GPIO_Init>
}
 80059d2:	e05a      	b.n	8005a8a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a31      	ldr	r2, [pc, #196]	; (8005aa0 <HAL_OPAMP_MspInit+0x160>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d118      	bne.n	8005a10 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059de:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 80059e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e2:	4a2d      	ldr	r2, [pc, #180]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 80059e4:	f043 0302 	orr.w	r3, r3, #2
 80059e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ea:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 80059f6:	2305      	movs	r3, #5
 80059f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059fa:	2303      	movs	r3, #3
 80059fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a02:	f107 031c 	add.w	r3, r7, #28
 8005a06:	4619      	mov	r1, r3
 8005a08:	4826      	ldr	r0, [pc, #152]	; (8005aa4 <HAL_OPAMP_MspInit+0x164>)
 8005a0a:	f003 fa8b 	bl	8008f24 <HAL_GPIO_Init>
}
 8005a0e:	e03c      	b.n	8005a8a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <HAL_OPAMP_MspInit+0x168>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d119      	bne.n	8005a4e <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a1a:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8005a32:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8005a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a40:	f107 031c 	add.w	r3, r7, #28
 8005a44:	4619      	mov	r1, r3
 8005a46:	4817      	ldr	r0, [pc, #92]	; (8005aa4 <HAL_OPAMP_MspInit+0x164>)
 8005a48:	f003 fa6c 	bl	8008f24 <HAL_GPIO_Init>
}
 8005a4c:	e01d      	b.n	8005a8a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a16      	ldr	r2, [pc, #88]	; (8005aac <HAL_OPAMP_MspInit+0x16c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d118      	bne.n	8005a8a <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5c:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005a5e:	f043 0302 	orr.w	r3, r3, #2
 8005a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <HAL_OPAMP_MspInit+0x158>)
 8005a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8005a70:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a76:	2303      	movs	r3, #3
 8005a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a7e:	f107 031c 	add.w	r3, r7, #28
 8005a82:	4619      	mov	r1, r3
 8005a84:	4807      	ldr	r0, [pc, #28]	; (8005aa4 <HAL_OPAMP_MspInit+0x164>)
 8005a86:	f003 fa4d 	bl	8008f24 <HAL_GPIO_Init>
}
 8005a8a:	bf00      	nop
 8005a8c:	3730      	adds	r7, #48	; 0x30
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40010300 	.word	0x40010300
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40010304 	.word	0x40010304
 8005aa0:	40010308 	.word	0x40010308
 8005aa4:	48000400 	.word	0x48000400
 8005aa8:	4001030c 	.word	0x4001030c
 8005aac:	40010310 	.word	0x40010310

08005ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b089      	sub	sp, #36	; 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <HAL_TIM_Base_MspInit+0xec>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10c      	bne.n	8005adc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ac2:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac6:	4a36      	ldr	r2, [pc, #216]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005acc:	6613      	str	r3, [r2, #96]	; 0x60
 8005ace:	4b34      	ldr	r3, [pc, #208]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8005ada:	e058      	b.n	8005b8e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ae6:	4b2e      	ldr	r3, [pc, #184]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aea:	4a2d      	ldr	r2, [pc, #180]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	6593      	str	r3, [r2, #88]	; 0x58
 8005af2:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	69bb      	ldr	r3, [r7, #24]
}
 8005afe:	e046      	b.n	8005b8e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a27      	ldr	r2, [pc, #156]	; (8005ba4 <HAL_TIM_Base_MspInit+0xf4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10c      	bne.n	8005b24 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b0a:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0e:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	6593      	str	r3, [r2, #88]	; 0x58
 8005b16:	4b22      	ldr	r3, [pc, #136]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	697b      	ldr	r3, [r7, #20]
}
 8005b22:	e034      	b.n	8005b8e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <HAL_TIM_Base_MspInit+0xf8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10c      	bne.n	8005b48 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b32:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b38:	6613      	str	r3, [r2, #96]	; 0x60
 8005b3a:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
}
 8005b46:	e022      	b.n	8005b8e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a17      	ldr	r2, [pc, #92]	; (8005bac <HAL_TIM_Base_MspInit+0xfc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10c      	bne.n	8005b6c <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b56:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
}
 8005b6a:	e010      	b.n	8005b8e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0f      	ldr	r2, [pc, #60]	; (8005bb0 <HAL_TIM_Base_MspInit+0x100>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10b      	bne.n	8005b8e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b80:	6613      	str	r3, [r2, #96]	; 0x60
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	3724      	adds	r7, #36	; 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40015000 	.word	0x40015000

08005bb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <HAL_TIM_PWM_MspInit+0x38>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10b      	bne.n	8005bde <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005bcc:	f043 0302 	orr.w	r3, r3, #2
 8005bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40021000 	.word	0x40021000

08005bf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08e      	sub	sp, #56	; 0x38
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a65      	ldr	r2, [pc, #404]	; (8005da8 <HAL_TIM_MspPostInit+0x1b4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d11c      	bne.n	8005c50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c16:	4b65      	ldr	r3, [pc, #404]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	4a64      	ldr	r2, [pc, #400]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005c1c:	f043 0320 	orr.w	r3, r3, #32
 8005c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c22:	4b62      	ldr	r3, [pc, #392]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c32:	2302      	movs	r3, #2
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005c3e:	2306      	movs	r3, #6
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 8005c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c46:	4619      	mov	r1, r3
 8005c48:	4859      	ldr	r0, [pc, #356]	; (8005db0 <HAL_TIM_MspPostInit+0x1bc>)
 8005c4a:	f003 f96b 	bl	8008f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8005c4e:	e0a6      	b.n	8005d9e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a57      	ldr	r2, [pc, #348]	; (8005db4 <HAL_TIM_MspPostInit+0x1c0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d11c      	bne.n	8005c94 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c5a:	4b54      	ldr	r3, [pc, #336]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	4a53      	ldr	r2, [pc, #332]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c66:	4b51      	ldr	r3, [pc, #324]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 8005c72:	2330      	movs	r3, #48	; 0x30
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c76:	2302      	movs	r3, #2
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c82:	2302      	movs	r3, #2
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	484a      	ldr	r0, [pc, #296]	; (8005db8 <HAL_TIM_MspPostInit+0x1c4>)
 8005c8e:	f003 f949 	bl	8008f24 <HAL_GPIO_Init>
}
 8005c92:	e084      	b.n	8005d9e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a48      	ldr	r2, [pc, #288]	; (8005dbc <HAL_TIM_MspPostInit+0x1c8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d11d      	bne.n	8005cda <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c9e:	4b43      	ldr	r3, [pc, #268]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca2:	4a42      	ldr	r2, [pc, #264]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005ca4:	f043 0302 	orr.w	r3, r3, #2
 8005ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005caa:	4b40      	ldr	r3, [pc, #256]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 8005cb6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4839      	ldr	r0, [pc, #228]	; (8005db8 <HAL_TIM_MspPostInit+0x1c4>)
 8005cd4:	f003 f926 	bl	8008f24 <HAL_GPIO_Init>
}
 8005cd8:	e061      	b.n	8005d9e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a38      	ldr	r2, [pc, #224]	; (8005dc0 <HAL_TIM_MspPostInit+0x1cc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d13a      	bne.n	8005d5a <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ce4:	4b31      	ldr	r3, [pc, #196]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce8:	4a30      	ldr	r2, [pc, #192]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005cea:	f043 0304 	orr.w	r3, r3, #4
 8005cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cf0:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cfc:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d00:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005d02:	f043 0302 	orr.w	r3, r3, #2
 8005d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d08:	4b28      	ldr	r3, [pc, #160]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 8005d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d22:	2300      	movs	r3, #0
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8005d26:	2306      	movs	r3, #6
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8005d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4824      	ldr	r0, [pc, #144]	; (8005dc4 <HAL_TIM_MspPostInit+0x1d0>)
 8005d32:	f003 f8f7 	bl	8008f24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 8005d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d44:	2300      	movs	r3, #0
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8005d48:	230a      	movs	r3, #10
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 8005d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d50:	4619      	mov	r1, r3
 8005d52:	4819      	ldr	r0, [pc, #100]	; (8005db8 <HAL_TIM_MspPostInit+0x1c4>)
 8005d54:	f003 f8e6 	bl	8008f24 <HAL_GPIO_Init>
}
 8005d58:	e021      	b.n	8005d9e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <HAL_TIM_MspPostInit+0x1d4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d11c      	bne.n	8005d9e <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d68:	4a10      	ldr	r2, [pc, #64]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d70:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <HAL_TIM_MspPostInit+0x1b8>)
 8005d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 8005d7c:	2340      	movs	r3, #64	; 0x40
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d80:	2302      	movs	r3, #2
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8005d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d94:	4619      	mov	r1, r3
 8005d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d9a:	f003 f8c3 	bl	8008f24 <HAL_GPIO_Init>
}
 8005d9e:	bf00      	nop
 8005da0:	3738      	adds	r7, #56	; 0x38
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40021000 	.word	0x40021000
 8005db0:	48001400 	.word	0x48001400
 8005db4:	40000400 	.word	0x40000400
 8005db8:	48000400 	.word	0x48000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	48000800 	.word	0x48000800
 8005dc8:	40014400 	.word	0x40014400

08005dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0a2      	sub	sp, #136	; 0x88
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005de4:	f107 0320 	add.w	r3, r7, #32
 8005de8:	2254      	movs	r2, #84	; 0x54
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f00f fa99 	bl	8015324 <memset>
  if(huart->Instance==USART1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a81      	ldr	r2, [pc, #516]	; (8005ffc <HAL_UART_MspInit+0x230>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	f040 808b 	bne.w	8005f14 <HAL_UART_MspInit+0x148>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005e02:	2300      	movs	r3, #0
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e06:	f107 0320 	add.w	r3, r7, #32
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f007 fbe2 	bl	800d5d4 <HAL_RCCEx_PeriphCLKConfig>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005e16:	f7ff fa97 	bl	8005348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e1a:	4b79      	ldr	r3, [pc, #484]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	4a78      	ldr	r2, [pc, #480]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e24:	6613      	str	r3, [r2, #96]	; 0x60
 8005e26:	4b76      	ldr	r3, [pc, #472]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e32:	4b73      	ldr	r3, [pc, #460]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e36:	4a72      	ldr	r2, [pc, #456]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e38:	f043 0301 	orr.w	r3, r3, #1
 8005e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e3e:	4b70      	ldr	r3, [pc, #448]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e4a:	4b6d      	ldr	r3, [pc, #436]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4e:	4a6c      	ldr	r2, [pc, #432]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e56:	4b6a      	ldr	r3, [pc, #424]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e70:	2300      	movs	r3, #0
 8005e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e76:	2307      	movs	r3, #7
 8005e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e80:	4619      	mov	r1, r3
 8005e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e86:	f003 f84d 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e8a:	2340      	movs	r3, #64	; 0x40
 8005e8c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e9c:	2307      	movs	r3, #7
 8005e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4856      	ldr	r0, [pc, #344]	; (8006004 <HAL_UART_MspInit+0x238>)
 8005eaa:	f003 f83b 	bl	8008f24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8005eae:	4b56      	ldr	r3, [pc, #344]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005eb0:	4a56      	ldr	r2, [pc, #344]	; (800600c <HAL_UART_MspInit+0x240>)
 8005eb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005eb4:	4b54      	ldr	r3, [pc, #336]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005eb6:	2218      	movs	r2, #24
 8005eb8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005eba:	4b53      	ldr	r3, [pc, #332]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ec0:	4b51      	ldr	r3, [pc, #324]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ec6:	4b50      	ldr	r3, [pc, #320]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005ec8:	2280      	movs	r2, #128	; 0x80
 8005eca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ecc:	4b4e      	ldr	r3, [pc, #312]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ed2:	4b4d      	ldr	r3, [pc, #308]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005ed8:	4b4b      	ldr	r3, [pc, #300]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ede:	4b4a      	ldr	r3, [pc, #296]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ee4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005ee6:	4848      	ldr	r0, [pc, #288]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005ee8:	f002 fcdc 	bl	80088a4 <HAL_DMA_Init>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005ef2:	f7ff fa29 	bl	8005348 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a43      	ldr	r2, [pc, #268]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005efa:	67da      	str	r2, [r3, #124]	; 0x7c
 8005efc:	4a42      	ldr	r2, [pc, #264]	; (8006008 <HAL_UART_MspInit+0x23c>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005f02:	2200      	movs	r2, #0
 8005f04:	2100      	movs	r1, #0
 8005f06:	2025      	movs	r0, #37	; 0x25
 8005f08:	f002 facd 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f0c:	2025      	movs	r0, #37	; 0x25
 8005f0e:	f002 fae4 	bl	80084da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005f12:	e06f      	b.n	8005ff4 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <HAL_UART_MspInit+0x244>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d16a      	bne.n	8005ff4 <HAL_UART_MspInit+0x228>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005f22:	2300      	movs	r3, #0
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f26:	f107 0320 	add.w	r3, r7, #32
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f007 fb52 	bl	800d5d4 <HAL_RCCEx_PeriphCLKConfig>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8005f36:	f7ff fa07 	bl	8005348 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f3a:	4b31      	ldr	r3, [pc, #196]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3e:	4a30      	ldr	r2, [pc, #192]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f44:	6593      	str	r3, [r2, #88]	; 0x58
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f52:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f56:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f5e:	4b28      	ldr	r3, [pc, #160]	; (8006000 <HAL_UART_MspInit+0x234>)
 8005f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8005f6a:	f248 0304 	movw	r3, #32772	; 0x8004
 8005f6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f70:	2302      	movs	r3, #2
 8005f72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f7e:	2307      	movs	r3, #7
 8005f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f8e:	f002 ffc9 	bl	8008f24 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8005f92:	4b20      	ldr	r3, [pc, #128]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005f94:	4a20      	ldr	r2, [pc, #128]	; (8006018 <HAL_UART_MspInit+0x24c>)
 8005f96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005f9a:	221a      	movs	r2, #26
 8005f9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f9e:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005faa:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fac:	2280      	movs	r2, #128	; 0x80
 8005fae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fb0:	4b18      	ldr	r3, [pc, #96]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fb6:	4b17      	ldr	r3, [pc, #92]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005fbc:	4b15      	ldr	r3, [pc, #84]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fc2:	4b14      	ldr	r3, [pc, #80]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005fc8:	4812      	ldr	r0, [pc, #72]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fca:	f002 fc6b 	bl	80088a4 <HAL_DMA_Init>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8005fd4:	f7ff f9b8 	bl	8005348 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c
 8005fde:	4a0d      	ldr	r2, [pc, #52]	; (8006014 <HAL_UART_MspInit+0x248>)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	2026      	movs	r0, #38	; 0x26
 8005fea:	f002 fa5c 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005fee:	2026      	movs	r0, #38	; 0x26
 8005ff0:	f002 fa73 	bl	80084da <HAL_NVIC_EnableIRQ>
}
 8005ff4:	bf00      	nop
 8005ff6:	3788      	adds	r7, #136	; 0x88
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40013800 	.word	0x40013800
 8006000:	40021000 	.word	0x40021000
 8006004:	48000400 	.word	0x48000400
 8006008:	200009d8 	.word	0x200009d8
 800600c:	40020008 	.word	0x40020008
 8006010:	40004400 	.word	0x40004400
 8006014:	20000a38 	.word	0x20000a38
 8006018:	40020408 	.word	0x40020408

0800601c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006020:	e7fe      	b.n	8006020 <NMI_Handler+0x4>

08006022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006022:	b480      	push	{r7}
 8006024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006026:	e7fe      	b.n	8006026 <HardFault_Handler+0x4>

08006028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800602c:	e7fe      	b.n	800602c <MemManage_Handler+0x4>

0800602e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800602e:	b480      	push	{r7}
 8006030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006032:	e7fe      	b.n	8006032 <BusFault_Handler+0x4>

08006034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006038:	e7fe      	b.n	8006038 <UsageFault_Handler+0x4>

0800603a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800603a:	b480      	push	{r7}
 800603c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800603e:	bf00      	nop
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800604c:	bf00      	nop
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006056:	b480      	push	{r7}
 8006058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006068:	f000 f9ca 	bl	8006400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800606c:	bf00      	nop
 800606e:	bd80      	pop	{r7, pc}

08006070 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006074:	4802      	ldr	r0, [pc, #8]	; (8006080 <DMA1_Channel1_IRQHandler+0x10>)
 8006076:	f002 fdf8 	bl	8008c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	200009d8 	.word	0x200009d8

08006084 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006088:	4802      	ldr	r0, [pc, #8]	; (8006094 <DMA1_Channel2_IRQHandler+0x10>)
 800608a:	f002 fdee 	bl	8008c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200008b8 	.word	0x200008b8

08006098 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800609c:	4802      	ldr	r0, [pc, #8]	; (80060a8 <DMA1_Channel3_IRQHandler+0x10>)
 800609e:	f002 fde4 	bl	8008c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000918 	.word	0x20000918

080060ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80060b0:	4802      	ldr	r0, [pc, #8]	; (80060bc <DMA1_Channel4_IRQHandler+0x10>)
 80060b2:	f002 fdda 	bl	8008c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000978 	.word	0x20000978

080060c0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80060c4:	4802      	ldr	r0, [pc, #8]	; (80060d0 <USB_LP_IRQHandler+0x10>)
 80060c6:	f005 f880 	bl	800b1ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80060ca:	bf00      	nop
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20001fbc 	.word	0x20001fbc

080060d4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80060d8:	4802      	ldr	r0, [pc, #8]	; (80060e4 <I2C2_EV_IRQHandler+0x10>)
 80060da:	f003 fc89 	bl	80099f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	2000074c 	.word	0x2000074c

080060e8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80060ec:	4802      	ldr	r0, [pc, #8]	; (80060f8 <I2C2_ER_IRQHandler+0x10>)
 80060ee:	f003 fc99 	bl	8009a24 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	2000074c 	.word	0x2000074c

080060fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006100:	4802      	ldr	r0, [pc, #8]	; (800610c <USART1_IRQHandler+0x10>)
 8006102:	f009 f849 	bl	800f198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000798 	.word	0x20000798

08006110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006114:	4802      	ldr	r0, [pc, #8]	; (8006120 <USART2_IRQHandler+0x10>)
 8006116:	f009 f83f 	bl	800f198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000828 	.word	0x20000828

08006124 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006128:	4802      	ldr	r0, [pc, #8]	; (8006134 <DMA2_Channel1_IRQHandler+0x10>)
 800612a:	f002 fd9e 	bl	8008c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000a38 	.word	0x20000a38

08006138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  return 1;
 800613c:	2301      	movs	r3, #1
}
 800613e:	4618      	mov	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <_kill>:

int _kill(int pid, int sig)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006152:	f00f f8af 	bl	80152b4 <__errno>
 8006156:	4603      	mov	r3, r0
 8006158:	2216      	movs	r2, #22
 800615a:	601a      	str	r2, [r3, #0]
  return -1;
 800615c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <_exit>:

void _exit (int status)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006170:	f04f 31ff 	mov.w	r1, #4294967295
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ffe7 	bl	8006148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800617a:	e7fe      	b.n	800617a <_exit+0x12>

0800617c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e00a      	b.n	80061a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800618e:	f3af 8000 	nop.w
 8006192:	4601      	mov	r1, r0
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	60ba      	str	r2, [r7, #8]
 800619a:	b2ca      	uxtb	r2, r1
 800619c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	3301      	adds	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	dbf0      	blt.n	800618e <_read+0x12>
  }

  return len;
 80061ac:	687b      	ldr	r3, [r7, #4]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b086      	sub	sp, #24
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d002      	beq.n	80061ce <_write+0x18>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d115      	bne.n	80061fa <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68b8      	ldr	r0, [r7, #8]
 80061d2:	f00e fbcd 	bl	8014970 <CDC_Transmit_FS>
 80061d6:	4603      	mov	r3, r0
 80061d8:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d0f6      	beq.n	80061ce <_write+0x18>
		        if (result != USBD_OK)
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <_write+0x40>
		        {
		            errno = EIO;
 80061e6:	f00f f865 	bl	80152b4 <__errno>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2205      	movs	r2, #5
 80061ee:	601a      	str	r2, [r3, #0]
		            return -1;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	e008      	b.n	8006208 <_write+0x52>
		        }
		        return len;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	e006      	b.n	8006208 <_write+0x52>
		    }
		    errno = EBADF;
 80061fa:	f00f f85b 	bl	80152b4 <__errno>
 80061fe:	4603      	mov	r3, r0
 8006200:	2209      	movs	r2, #9
 8006202:	601a      	str	r2, [r3, #0]
		    return -1;
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <_close>:

int _close(int file)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006238:	605a      	str	r2, [r3, #4]
  return 0;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <_isatty>:

int _isatty(int file)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006250:	2301      	movs	r3, #1
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <_sbrk+0x5c>)
 8006282:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <_sbrk+0x60>)
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800628c:	4b13      	ldr	r3, [pc, #76]	; (80062dc <_sbrk+0x64>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <_sbrk+0x64>)
 8006296:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <_sbrk+0x68>)
 8006298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <_sbrk+0x64>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d207      	bcs.n	80062b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062a8:	f00f f804 	bl	80152b4 <__errno>
 80062ac:	4603      	mov	r3, r0
 80062ae:	220c      	movs	r2, #12
 80062b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e009      	b.n	80062cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <_sbrk+0x64>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <_sbrk+0x64>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	4a05      	ldr	r2, [pc, #20]	; (80062dc <_sbrk+0x64>)
 80062c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062ca:	68fb      	ldr	r3, [r7, #12]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20020000 	.word	0x20020000
 80062d8:	00000400 	.word	0x00000400
 80062dc:	20000a9c 	.word	0x20000a9c
 80062e0:	200024e0 	.word	0x200024e0

080062e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <SystemInit+0x20>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	4a05      	ldr	r2, [pc, #20]	; (8006304 <SystemInit+0x20>)
 80062f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	e000ed00 	.word	0xe000ed00

08006308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006308:	480d      	ldr	r0, [pc, #52]	; (8006340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800630a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800630c:	480d      	ldr	r0, [pc, #52]	; (8006344 <LoopForever+0x6>)
  ldr r1, =_edata
 800630e:	490e      	ldr	r1, [pc, #56]	; (8006348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006310:	4a0e      	ldr	r2, [pc, #56]	; (800634c <LoopForever+0xe>)
  movs r3, #0
 8006312:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006314:	e002      	b.n	800631c <LoopCopyDataInit>

08006316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800631a:	3304      	adds	r3, #4

0800631c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800631c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800631e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006320:	d3f9      	bcc.n	8006316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006322:	4a0b      	ldr	r2, [pc, #44]	; (8006350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006324:	4c0b      	ldr	r4, [pc, #44]	; (8006354 <LoopForever+0x16>)
  movs r3, #0
 8006326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006328:	e001      	b.n	800632e <LoopFillZerobss>

0800632a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800632a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800632c:	3204      	adds	r2, #4

0800632e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800632e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006330:	d3fb      	bcc.n	800632a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006332:	f7ff ffd7 	bl	80062e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006336:	f00e ffc3 	bl	80152c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800633a:	f7fe ff5d 	bl	80051f8 <main>

0800633e <LoopForever>:

LoopForever:
    b LoopForever
 800633e:	e7fe      	b.n	800633e <LoopForever>
  ldr   r0, =_estack
 8006340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006348:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 800634c:	0801885c 	.word	0x0801885c
  ldr r2, =_sbss
 8006350:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8006354:	200024e0 	.word	0x200024e0

08006358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006358:	e7fe      	b.n	8006358 <ADC1_2_IRQHandler>

0800635a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006364:	2003      	movs	r0, #3
 8006366:	f002 f893 	bl	8008490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800636a:	200f      	movs	r0, #15
 800636c:	f000 f80e 	bl	800638c <HAL_InitTick>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	71fb      	strb	r3, [r7, #7]
 800637a:	e001      	b.n	8006380 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800637c:	f7ff f804 	bl	8005388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006380:	79fb      	ldrb	r3, [r7, #7]

}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <HAL_InitTick+0x68>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d022      	beq.n	80063e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80063a0:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <HAL_InitTick+0x6c>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4b13      	ldr	r3, [pc, #76]	; (80063f4 <HAL_InitTick+0x68>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	4618      	mov	r0, r3
 80063b6:	f002 f89e 	bl	80084f6 <HAL_SYSTICK_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10f      	bne.n	80063e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b0f      	cmp	r3, #15
 80063c4:	d809      	bhi.n	80063da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063c6:	2200      	movs	r2, #0
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	f04f 30ff 	mov.w	r0, #4294967295
 80063ce:	f002 f86a 	bl	80084a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <HAL_InitTick+0x70>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e007      	b.n	80063ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
 80063de:	e004      	b.n	80063ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
 80063e4:	e001      	b.n	80063ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000008 	.word	0x20000008
 80063f8:	20000000 	.word	0x20000000
 80063fc:	20000004 	.word	0x20000004

08006400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <HAL_IncTick+0x1c>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_IncTick+0x20>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4413      	add	r3, r2
 800640e:	4a03      	ldr	r2, [pc, #12]	; (800641c <HAL_IncTick+0x1c>)
 8006410:	6013      	str	r3, [r2, #0]
}
 8006412:	bf00      	nop
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000aa0 	.word	0x20000aa0
 8006420:	20000008 	.word	0x20000008

08006424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  return uwTick;
 8006428:	4b03      	ldr	r3, [pc, #12]	; (8006438 <HAL_GetTick+0x14>)
 800642a:	681b      	ldr	r3, [r3, #0]
}
 800642c:	4618      	mov	r0, r3
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000aa0 	.word	0x20000aa0

0800643c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006444:	f7ff ffee 	bl	8006424 <HAL_GetTick>
 8006448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d004      	beq.n	8006460 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_Delay+0x40>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006460:	bf00      	nop
 8006462:	f7ff ffdf 	bl	8006424 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d8f7      	bhi.n	8006462 <HAL_Delay+0x26>
  {
  }
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000008 	.word	0x20000008

08006480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	609a      	str	r2, [r3, #8]
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3360      	adds	r3, #96	; 0x60
 80064fa:	461a      	mov	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b08      	ldr	r3, [pc, #32]	; (800652c <LL_ADC_SetOffset+0x44>)
 800650a:	4013      	ands	r3, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	4313      	orrs	r3, r2
 8006518:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	03fff000 	.word	0x03fff000

08006530 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3360      	adds	r3, #96	; 0x60
 800653e:	461a      	mov	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3360      	adds	r3, #96	; 0x60
 800656c:	461a      	mov	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	431a      	orrs	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006592:	b480      	push	{r7}
 8006594:	b087      	sub	sp, #28
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3360      	adds	r3, #96	; 0x60
 80065a2:	461a      	mov	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3360      	adds	r3, #96	; 0x60
 80065d8:	461a      	mov	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	615a      	str	r2, [r3, #20]
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800664a:	b480      	push	{r7}
 800664c:	b087      	sub	sp, #28
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3330      	adds	r3, #48	; 0x30
 800665a:	461a      	mov	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	4413      	add	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	211f      	movs	r1, #31
 8006676:	fa01 f303 	lsl.w	r3, r1, r3
 800667a:	43db      	mvns	r3, r3
 800667c:	401a      	ands	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	0e9b      	lsrs	r3, r3, #26
 8006682:	f003 011f 	and.w	r1, r3, #31
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	fa01 f303 	lsl.w	r3, r1, r3
 8006690:	431a      	orrs	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3314      	adds	r3, #20
 80066b2:	461a      	mov	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	0e5b      	lsrs	r3, r3, #25
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	4413      	add	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	0d1b      	lsrs	r3, r3, #20
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2107      	movs	r1, #7
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	43db      	mvns	r3, r3
 80066d6:	401a      	ands	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	0d1b      	lsrs	r3, r3, #20
 80066dc:	f003 031f 	and.w	r3, r3, #31
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	431a      	orrs	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a0f      	ldr	r2, [pc, #60]	; (8006744 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d10a      	bne.n	8006722 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006720:	e00a      	b.n	8006738 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672e:	43db      	mvns	r3, r3
 8006730:	401a      	ands	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	407f0000 	.word	0x407f0000

08006748 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f003 031f 	and.w	r3, r3, #31
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6093      	str	r3, [r2, #8]
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800679c:	d101      	bne.n	80067a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80067c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ec:	d101      	bne.n	80067f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006814:	f043 0201 	orr.w	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800683c:	f043 0202 	orr.w	r2, r3, #2
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <LL_ADC_IsEnabled+0x18>
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <LL_ADC_IsEnabled+0x1a>
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d101      	bne.n	800688e <LL_ADC_IsDisableOngoing+0x18>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <LL_ADC_IsDisableOngoing+0x1a>
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80068b0:	f043 0204 	orr.w	r2, r3, #4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d101      	bne.n	80068dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d101      	bne.n	8006902 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b089      	sub	sp, #36	; 0x24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800691c:	2300      	movs	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e1af      	b.n	8006c8a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fe fd49 	bl	80053d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff ff19 	bl	8006788 <LL_ADC_IsDeepPowerDownEnabled>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff feff 	bl	8006764 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff ff34 	bl	80067d8 <LL_ADC_IsInternalRegulatorEnabled>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d115      	bne.n	80069a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff ff18 	bl	80067b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006980:	4b9f      	ldr	r3, [pc, #636]	; (8006c00 <HAL_ADC_Init+0x2f0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	099b      	lsrs	r3, r3, #6
 8006986:	4a9f      	ldr	r2, [pc, #636]	; (8006c04 <HAL_ADC_Init+0x2f4>)
 8006988:	fba2 2303 	umull	r2, r3, r2, r3
 800698c:	099b      	lsrs	r3, r3, #6
 800698e:	3301      	adds	r3, #1
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006994:	e002      	b.n	800699c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	3b01      	subs	r3, #1
 800699a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f9      	bne.n	8006996 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff ff16 	bl	80067d8 <LL_ADC_IsInternalRegulatorEnabled>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10d      	bne.n	80069ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b6:	f043 0210 	orr.w	r2, r3, #16
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c2:	f043 0201 	orr.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff ff76 	bl	80068c4 <LL_ADC_REG_IsConversionOngoing>
 80069d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f040 8148 	bne.w	8006c78 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 8144 	bne.w	8006c78 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80069f8:	f043 0202 	orr.w	r2, r3, #2
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff ff23 	bl	8006850 <LL_ADC_IsEnabled>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d141      	bne.n	8006a94 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a18:	d004      	beq.n	8006a24 <HAL_ADC_Init+0x114>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7a      	ldr	r2, [pc, #488]	; (8006c08 <HAL_ADC_Init+0x2f8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d10f      	bne.n	8006a44 <HAL_ADC_Init+0x134>
 8006a24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006a28:	f7ff ff12 	bl	8006850 <LL_ADC_IsEnabled>
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	4876      	ldr	r0, [pc, #472]	; (8006c08 <HAL_ADC_Init+0x2f8>)
 8006a30:	f7ff ff0e 	bl	8006850 <LL_ADC_IsEnabled>
 8006a34:	4603      	mov	r3, r0
 8006a36:	4323      	orrs	r3, r4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	e012      	b.n	8006a6a <HAL_ADC_Init+0x15a>
 8006a44:	4871      	ldr	r0, [pc, #452]	; (8006c0c <HAL_ADC_Init+0x2fc>)
 8006a46:	f7ff ff03 	bl	8006850 <LL_ADC_IsEnabled>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4870      	ldr	r0, [pc, #448]	; (8006c10 <HAL_ADC_Init+0x300>)
 8006a4e:	f7ff feff 	bl	8006850 <LL_ADC_IsEnabled>
 8006a52:	4603      	mov	r3, r0
 8006a54:	431c      	orrs	r4, r3
 8006a56:	486f      	ldr	r0, [pc, #444]	; (8006c14 <HAL_ADC_Init+0x304>)
 8006a58:	f7ff fefa 	bl	8006850 <LL_ADC_IsEnabled>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	4323      	orrs	r3, r4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bf0c      	ite	eq
 8006a64:	2301      	moveq	r3, #1
 8006a66:	2300      	movne	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d012      	beq.n	8006a94 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a76:	d004      	beq.n	8006a82 <HAL_ADC_Init+0x172>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a62      	ldr	r2, [pc, #392]	; (8006c08 <HAL_ADC_Init+0x2f8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d101      	bne.n	8006a86 <HAL_ADC_Init+0x176>
 8006a82:	4a65      	ldr	r2, [pc, #404]	; (8006c18 <HAL_ADC_Init+0x308>)
 8006a84:	e000      	b.n	8006a88 <HAL_ADC_Init+0x178>
 8006a86:	4a65      	ldr	r2, [pc, #404]	; (8006c1c <HAL_ADC_Init+0x30c>)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f7ff fcf6 	bl	8006480 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7f5b      	ldrb	r3, [r3, #29]
 8006a98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006aa4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006aaa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ab2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d106      	bne.n	8006ad0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	045b      	lsls	r3, r3, #17
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <HAL_ADC_Init+0x310>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	69b9      	ldr	r1, [r7, #24]
 8006afc:	430b      	orrs	r3, r1
 8006afe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fed2 	bl	80068c4 <LL_ADC_REG_IsConversionOngoing>
 8006b20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fedf 	bl	80068ea <LL_ADC_INJ_IsConversionOngoing>
 8006b2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d17f      	bne.n	8006c34 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d17c      	bne.n	8006c34 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006b3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b46:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b56:	f023 0302 	bic.w	r3, r3, #2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	69b9      	ldr	r1, [r7, #24]
 8006b60:	430b      	orrs	r3, r1
 8006b62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d017      	beq.n	8006b9c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6911      	ldr	r1, [r2, #16]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	430b      	orrs	r3, r1
 8006b96:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006b9a:	e013      	b.n	8006bc4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006baa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006bc0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d12a      	bne.n	8006c24 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bd8:	f023 0304 	bic.w	r3, r3, #4
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006bea:	4311      	orrs	r1, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0201 	orr.w	r2, r2, #1
 8006bfc:	611a      	str	r2, [r3, #16]
 8006bfe:	e019      	b.n	8006c34 <HAL_ADC_Init+0x324>
 8006c00:	20000000 	.word	0x20000000
 8006c04:	053e2d63 	.word	0x053e2d63
 8006c08:	50000100 	.word	0x50000100
 8006c0c:	50000400 	.word	0x50000400
 8006c10:	50000500 	.word	0x50000500
 8006c14:	50000600 	.word	0x50000600
 8006c18:	50000300 	.word	0x50000300
 8006c1c:	50000700 	.word	0x50000700
 8006c20:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d10c      	bne.n	8006c56 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f023 010f 	bic.w	r1, r3, #15
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	1e5a      	subs	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
 8006c54:	e007      	b.n	8006c66 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 020f 	bic.w	r2, r2, #15
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	f043 0201 	orr.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c76:	e007      	b.n	8006c88 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	f043 0210 	orr.w	r2, r3, #16
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3724      	adds	r7, #36	; 0x24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd90      	pop	{r4, r7, pc}
 8006c92:	bf00      	nop

08006c94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ca8:	d004      	beq.n	8006cb4 <HAL_ADC_Start_DMA+0x20>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a5a      	ldr	r2, [pc, #360]	; (8006e18 <HAL_ADC_Start_DMA+0x184>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d101      	bne.n	8006cb8 <HAL_ADC_Start_DMA+0x24>
 8006cb4:	4b59      	ldr	r3, [pc, #356]	; (8006e1c <HAL_ADC_Start_DMA+0x188>)
 8006cb6:	e000      	b.n	8006cba <HAL_ADC_Start_DMA+0x26>
 8006cb8:	4b59      	ldr	r3, [pc, #356]	; (8006e20 <HAL_ADC_Start_DMA+0x18c>)
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fd44 	bl	8006748 <LL_ADC_GetMultimode>
 8006cc0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fdfc 	bl	80068c4 <LL_ADC_REG_IsConversionOngoing>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 809b 	bne.w	8006e0a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_ADC_Start_DMA+0x4e>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e096      	b.n	8006e10 <HAL_ADC_Start_DMA+0x17c>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a4d      	ldr	r2, [pc, #308]	; (8006e24 <HAL_ADC_Start_DMA+0x190>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d008      	beq.n	8006d06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	d002      	beq.n	8006d06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2b09      	cmp	r3, #9
 8006d04:	d17a      	bne.n	8006dfc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fcf6 	bl	80076f8 <ADC_Enable>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d16d      	bne.n	8006df2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d1e:	f023 0301 	bic.w	r3, r3, #1
 8006d22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3a      	ldr	r2, [pc, #232]	; (8006e18 <HAL_ADC_Start_DMA+0x184>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_ADC_Start_DMA+0xb4>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a3b      	ldr	r2, [pc, #236]	; (8006e28 <HAL_ADC_Start_DMA+0x194>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d002      	beq.n	8006d44 <HAL_ADC_Start_DMA+0xb0>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	e003      	b.n	8006d4c <HAL_ADC_Start_DMA+0xb8>
 8006d44:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <HAL_ADC_Start_DMA+0x198>)
 8006d46:	e001      	b.n	8006d4c <HAL_ADC_Start_DMA+0xb8>
 8006d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d002      	beq.n	8006d5a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d76:	f023 0206 	bic.w	r2, r3, #6
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	661a      	str	r2, [r3, #96]	; 0x60
 8006d7e:	e002      	b.n	8006d86 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	4a29      	ldr	r2, [pc, #164]	; (8006e30 <HAL_ADC_Start_DMA+0x19c>)
 8006d8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	4a28      	ldr	r2, [pc, #160]	; (8006e34 <HAL_ADC_Start_DMA+0x1a0>)
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	4a27      	ldr	r2, [pc, #156]	; (8006e38 <HAL_ADC_Start_DMA+0x1a4>)
 8006d9c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	221c      	movs	r2, #28
 8006da4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0210 	orr.w	r2, r2, #16
 8006dbc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0201 	orr.w	r2, r2, #1
 8006dcc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3340      	adds	r3, #64	; 0x40
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f001 fe09 	bl	80089f4 <HAL_DMA_Start_IT>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fd56 	bl	800689c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006df0:	e00d      	b.n	8006e0e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006dfa:	e008      	b.n	8006e0e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006e08:	e001      	b.n	8006e0e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	50000100 	.word	0x50000100
 8006e1c:	50000300 	.word	0x50000300
 8006e20:	50000700 	.word	0x50000700
 8006e24:	50000600 	.word	0x50000600
 8006e28:	50000500 	.word	0x50000500
 8006e2c:	50000400 	.word	0x50000400
 8006e30:	0800787b 	.word	0x0800787b
 8006e34:	08007953 	.word	0x08007953
 8006e38:	0800796f 	.word	0x0800796f

08006e3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b0b6      	sub	sp, #216	; 0xd8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d102      	bne.n	8006e9c <HAL_ADC_ConfigChannel+0x24>
 8006e96:	2302      	movs	r3, #2
 8006e98:	f000 bc13 	b.w	80076c2 <HAL_ADC_ConfigChannel+0x84a>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fd0b 	bl	80068c4 <LL_ADC_REG_IsConversionOngoing>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 83f3 	bne.w	800769c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7ff fbc1 	bl	800664a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fcf9 	bl	80068c4 <LL_ADC_REG_IsConversionOngoing>
 8006ed2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff fd05 	bl	80068ea <LL_ADC_INJ_IsConversionOngoing>
 8006ee0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ee4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 81d9 	bne.w	80072a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 81d4 	bne.w	80072a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f00:	d10f      	bne.n	8006f22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f7ff fbc8 	bl	80066a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fb6f 	bl	80065fe <LL_ADC_SetSamplingTimeCommonConfig>
 8006f20:	e00e      	b.n	8006f40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6819      	ldr	r1, [r3, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f7ff fbb7 	bl	80066a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fb5f 	bl	80065fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	08db      	lsrs	r3, r3, #3
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d022      	beq.n	8006fa8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6919      	ldr	r1, [r3, #16]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f72:	f7ff fab9 	bl	80064e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	6919      	ldr	r1, [r3, #16]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7ff fb05 	bl	8006592 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6919      	ldr	r1, [r3, #16]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	7f1b      	ldrb	r3, [r3, #28]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d102      	bne.n	8006f9e <HAL_ADC_ConfigChannel+0x126>
 8006f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f9c:	e000      	b.n	8006fa0 <HAL_ADC_ConfigChannel+0x128>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f7ff fb11 	bl	80065c8 <LL_ADC_SetOffsetSaturation>
 8006fa6:	e17b      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fabe 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <HAL_ADC_ConfigChannel+0x15c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fab3 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	0e9b      	lsrs	r3, r3, #26
 8006fce:	f003 021f 	and.w	r2, r3, #31
 8006fd2:	e01e      	b.n	8007012 <HAL_ADC_ConfigChannel+0x19a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff faa8 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fea:	fa93 f3a3 	rbit	r3, r3
 8006fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007002:	2320      	movs	r3, #32
 8007004:	e004      	b.n	8007010 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800700a:	fab3 f383 	clz	r3, r3
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <HAL_ADC_ConfigChannel+0x1b2>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	0e9b      	lsrs	r3, r3, #26
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	e018      	b.n	800705c <HAL_ADC_ConfigChannel+0x1e4>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007036:	fa93 f3a3 	rbit	r3, r3
 800703a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800703e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800704e:	2320      	movs	r3, #32
 8007050:	e004      	b.n	800705c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007056:	fab3 f383 	clz	r3, r3
 800705a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800705c:	429a      	cmp	r2, r3
 800705e:	d106      	bne.n	800706e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2200      	movs	r2, #0
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff fa77 	bl	800655c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2101      	movs	r1, #1
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff fa5b 	bl	8006530 <LL_ADC_GetOffsetChannel>
 800707a:	4603      	mov	r3, r0
 800707c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <HAL_ADC_ConfigChannel+0x222>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2101      	movs	r1, #1
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fa50 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8007090:	4603      	mov	r3, r0
 8007092:	0e9b      	lsrs	r3, r3, #26
 8007094:	f003 021f 	and.w	r2, r3, #31
 8007098:	e01e      	b.n	80070d8 <HAL_ADC_ConfigChannel+0x260>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2101      	movs	r1, #1
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fa45 	bl	8006530 <LL_ADC_GetOffsetChannel>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070b0:	fa93 f3a3 	rbit	r3, r3
 80070b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80070b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80070c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80070c8:	2320      	movs	r3, #32
 80070ca:	e004      	b.n	80070d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80070cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070d0:	fab3 f383 	clz	r3, r3
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <HAL_ADC_ConfigChannel+0x278>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	0e9b      	lsrs	r3, r3, #26
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	e018      	b.n	8007122 <HAL_ADC_ConfigChannel+0x2aa>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070fc:	fa93 f3a3 	rbit	r3, r3
 8007100:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800710c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007114:	2320      	movs	r3, #32
 8007116:	e004      	b.n	8007122 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800711c:	fab3 f383 	clz	r3, r3
 8007120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007122:	429a      	cmp	r2, r3
 8007124:	d106      	bne.n	8007134 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2200      	movs	r2, #0
 800712c:	2101      	movs	r1, #1
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fa14 	bl	800655c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2102      	movs	r1, #2
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff f9f8 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8007140:	4603      	mov	r3, r0
 8007142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <HAL_ADC_ConfigChannel+0x2e8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2102      	movs	r1, #2
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff f9ed 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8007156:	4603      	mov	r3, r0
 8007158:	0e9b      	lsrs	r3, r3, #26
 800715a:	f003 021f 	and.w	r2, r3, #31
 800715e:	e01e      	b.n	800719e <HAL_ADC_ConfigChannel+0x326>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2102      	movs	r1, #2
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff f9e2 	bl	8006530 <LL_ADC_GetOffsetChannel>
 800716c:	4603      	mov	r3, r0
 800716e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007176:	fa93 f3a3 	rbit	r3, r3
 800717a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800717e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800718e:	2320      	movs	r3, #32
 8007190:	e004      	b.n	800719c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8007192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007196:	fab3 f383 	clz	r3, r3
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <HAL_ADC_ConfigChannel+0x33e>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	0e9b      	lsrs	r3, r3, #26
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	e016      	b.n	80071e4 <HAL_ADC_ConfigChannel+0x36c>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071c2:	fa93 f3a3 	rbit	r3, r3
 80071c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80071c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80071ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80071d6:	2320      	movs	r3, #32
 80071d8:	e004      	b.n	80071e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80071da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071de:	fab3 f383 	clz	r3, r3
 80071e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d106      	bne.n	80071f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2102      	movs	r1, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff f9b3 	bl	800655c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2103      	movs	r1, #3
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff f997 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8007202:	4603      	mov	r3, r0
 8007204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <HAL_ADC_ConfigChannel+0x3aa>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2103      	movs	r1, #3
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff f98c 	bl	8006530 <LL_ADC_GetOffsetChannel>
 8007218:	4603      	mov	r3, r0
 800721a:	0e9b      	lsrs	r3, r3, #26
 800721c:	f003 021f 	and.w	r2, r3, #31
 8007220:	e017      	b.n	8007252 <HAL_ADC_ConfigChannel+0x3da>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2103      	movs	r1, #3
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff f981 	bl	8006530 <LL_ADC_GetOffsetChannel>
 800722e:	4603      	mov	r3, r0
 8007230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007234:	fa93 f3a3 	rbit	r3, r3
 8007238:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800723a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800723c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800723e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007244:	2320      	movs	r3, #32
 8007246:	e003      	b.n	8007250 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	fab3 f383 	clz	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <HAL_ADC_ConfigChannel+0x3f2>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	0e9b      	lsrs	r3, r3, #26
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	e011      	b.n	800728e <HAL_ADC_ConfigChannel+0x416>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007272:	fa93 f3a3 	rbit	r3, r3
 8007276:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800727a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800727c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007282:	2320      	movs	r3, #32
 8007284:	e003      	b.n	800728e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007288:	fab3 f383 	clz	r3, r3
 800728c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800728e:	429a      	cmp	r2, r3
 8007290:	d106      	bne.n	80072a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2200      	movs	r2, #0
 8007298:	2103      	movs	r1, #3
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff f95e 	bl	800655c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff fad3 	bl	8006850 <LL_ADC_IsEnabled>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 813d 	bne.w	800752c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	461a      	mov	r2, r3
 80072c0:	f7ff fa1a 	bl	80066f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	4aa2      	ldr	r2, [pc, #648]	; (8007554 <HAL_ADC_ConfigChannel+0x6dc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	f040 812e 	bne.w	800752c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <HAL_ADC_ConfigChannel+0x480>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	0e9b      	lsrs	r3, r3, #26
 80072e6:	3301      	adds	r3, #1
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	2b09      	cmp	r3, #9
 80072ee:	bf94      	ite	ls
 80072f0:	2301      	movls	r3, #1
 80072f2:	2300      	movhi	r3, #0
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	e019      	b.n	800732c <HAL_ADC_ConfigChannel+0x4b4>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007300:	fa93 f3a3 	rbit	r3, r3
 8007304:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007308:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800730a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007310:	2320      	movs	r3, #32
 8007312:	e003      	b.n	800731c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007316:	fab3 f383 	clz	r3, r3
 800731a:	b2db      	uxtb	r3, r3
 800731c:	3301      	adds	r3, #1
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2b09      	cmp	r3, #9
 8007324:	bf94      	ite	ls
 8007326:	2301      	movls	r3, #1
 8007328:	2300      	movhi	r3, #0
 800732a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800732c:	2b00      	cmp	r3, #0
 800732e:	d079      	beq.n	8007424 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007338:	2b00      	cmp	r3, #0
 800733a:	d107      	bne.n	800734c <HAL_ADC_ConfigChannel+0x4d4>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	0e9b      	lsrs	r3, r3, #26
 8007342:	3301      	adds	r3, #1
 8007344:	069b      	lsls	r3, r3, #26
 8007346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800734a:	e015      	b.n	8007378 <HAL_ADC_ConfigChannel+0x500>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007354:	fa93 f3a3 	rbit	r3, r3
 8007358:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800735a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800735e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007364:	2320      	movs	r3, #32
 8007366:	e003      	b.n	8007370 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800736a:	fab3 f383 	clz	r3, r3
 800736e:	b2db      	uxtb	r3, r3
 8007370:	3301      	adds	r3, #1
 8007372:	069b      	lsls	r3, r3, #26
 8007374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_ADC_ConfigChannel+0x520>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	0e9b      	lsrs	r3, r3, #26
 800738a:	3301      	adds	r3, #1
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	e017      	b.n	80073c8 <HAL_ADC_ConfigChannel+0x550>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073a0:	fa93 f3a3 	rbit	r3, r3
 80073a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80073a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80073aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80073b0:	2320      	movs	r3, #32
 80073b2:	e003      	b.n	80073bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80073b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b6:	fab3 f383 	clz	r3, r3
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	3301      	adds	r3, #1
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2101      	movs	r1, #1
 80073c4:	fa01 f303 	lsl.w	r3, r1, r3
 80073c8:	ea42 0103 	orr.w	r1, r2, r3
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <HAL_ADC_ConfigChannel+0x576>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	0e9b      	lsrs	r3, r3, #26
 80073de:	3301      	adds	r3, #1
 80073e0:	f003 021f 	and.w	r2, r3, #31
 80073e4:	4613      	mov	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4413      	add	r3, r2
 80073ea:	051b      	lsls	r3, r3, #20
 80073ec:	e018      	b.n	8007420 <HAL_ADC_ConfigChannel+0x5a8>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	fa93 f3a3 	rbit	r3, r3
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007406:	2320      	movs	r3, #32
 8007408:	e003      	b.n	8007412 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800740a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740c:	fab3 f383 	clz	r3, r3
 8007410:	b2db      	uxtb	r3, r3
 8007412:	3301      	adds	r3, #1
 8007414:	f003 021f 	and.w	r2, r3, #31
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007420:	430b      	orrs	r3, r1
 8007422:	e07e      	b.n	8007522 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800742c:	2b00      	cmp	r3, #0
 800742e:	d107      	bne.n	8007440 <HAL_ADC_ConfigChannel+0x5c8>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	0e9b      	lsrs	r3, r3, #26
 8007436:	3301      	adds	r3, #1
 8007438:	069b      	lsls	r3, r3, #26
 800743a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800743e:	e015      	b.n	800746c <HAL_ADC_ConfigChannel+0x5f4>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	fa93 f3a3 	rbit	r3, r3
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007458:	2320      	movs	r3, #32
 800745a:	e003      	b.n	8007464 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	fab3 f383 	clz	r3, r3
 8007462:	b2db      	uxtb	r3, r3
 8007464:	3301      	adds	r3, #1
 8007466:	069b      	lsls	r3, r3, #26
 8007468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007474:	2b00      	cmp	r3, #0
 8007476:	d109      	bne.n	800748c <HAL_ADC_ConfigChannel+0x614>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	0e9b      	lsrs	r3, r3, #26
 800747e:	3301      	adds	r3, #1
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f303 	lsl.w	r3, r1, r3
 800748a:	e017      	b.n	80074bc <HAL_ADC_ConfigChannel+0x644>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	fa93 f3a3 	rbit	r3, r3
 8007498:	61fb      	str	r3, [r7, #28]
  return result;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80074a4:	2320      	movs	r3, #32
 80074a6:	e003      	b.n	80074b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	fab3 f383 	clz	r3, r3
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	3301      	adds	r3, #1
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	2101      	movs	r1, #1
 80074b8:	fa01 f303 	lsl.w	r3, r1, r3
 80074bc:	ea42 0103 	orr.w	r1, r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <HAL_ADC_ConfigChannel+0x670>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	0e9b      	lsrs	r3, r3, #26
 80074d2:	3301      	adds	r3, #1
 80074d4:	f003 021f 	and.w	r2, r3, #31
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	3b1e      	subs	r3, #30
 80074e0:	051b      	lsls	r3, r3, #20
 80074e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074e6:	e01b      	b.n	8007520 <HAL_ADC_ConfigChannel+0x6a8>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	fa93 f3a3 	rbit	r3, r3
 80074f4:	613b      	str	r3, [r7, #16]
  return result;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007500:	2320      	movs	r3, #32
 8007502:	e003      	b.n	800750c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	fab3 f383 	clz	r3, r3
 800750a:	b2db      	uxtb	r3, r3
 800750c:	3301      	adds	r3, #1
 800750e:	f003 021f 	and.w	r2, r3, #31
 8007512:	4613      	mov	r3, r2
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4413      	add	r3, r2
 8007518:	3b1e      	subs	r3, #30
 800751a:	051b      	lsls	r3, r3, #20
 800751c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007520:	430b      	orrs	r3, r1
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	6892      	ldr	r2, [r2, #8]
 8007526:	4619      	mov	r1, r3
 8007528:	f7ff f8bb 	bl	80066a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	4b09      	ldr	r3, [pc, #36]	; (8007558 <HAL_ADC_ConfigChannel+0x6e0>)
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80be 	beq.w	80076b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007542:	d004      	beq.n	800754e <HAL_ADC_ConfigChannel+0x6d6>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a04      	ldr	r2, [pc, #16]	; (800755c <HAL_ADC_ConfigChannel+0x6e4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d10a      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x6ec>
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <HAL_ADC_ConfigChannel+0x6e8>)
 8007550:	e009      	b.n	8007566 <HAL_ADC_ConfigChannel+0x6ee>
 8007552:	bf00      	nop
 8007554:	407f0000 	.word	0x407f0000
 8007558:	80080000 	.word	0x80080000
 800755c:	50000100 	.word	0x50000100
 8007560:	50000300 	.word	0x50000300
 8007564:	4b59      	ldr	r3, [pc, #356]	; (80076cc <HAL_ADC_ConfigChannel+0x854>)
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe ffb0 	bl	80064cc <LL_ADC_GetCommonPathInternalCh>
 800756c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a56      	ldr	r2, [pc, #344]	; (80076d0 <HAL_ADC_ConfigChannel+0x858>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_ADC_ConfigChannel+0x70c>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a55      	ldr	r2, [pc, #340]	; (80076d4 <HAL_ADC_ConfigChannel+0x85c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d13a      	bne.n	80075fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d134      	bne.n	80075fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007598:	d005      	beq.n	80075a6 <HAL_ADC_ConfigChannel+0x72e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a4e      	ldr	r2, [pc, #312]	; (80076d8 <HAL_ADC_ConfigChannel+0x860>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	f040 8085 	bne.w	80076b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ae:	d004      	beq.n	80075ba <HAL_ADC_ConfigChannel+0x742>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a49      	ldr	r2, [pc, #292]	; (80076dc <HAL_ADC_ConfigChannel+0x864>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d101      	bne.n	80075be <HAL_ADC_ConfigChannel+0x746>
 80075ba:	4a49      	ldr	r2, [pc, #292]	; (80076e0 <HAL_ADC_ConfigChannel+0x868>)
 80075bc:	e000      	b.n	80075c0 <HAL_ADC_ConfigChannel+0x748>
 80075be:	4a43      	ldr	r2, [pc, #268]	; (80076cc <HAL_ADC_ConfigChannel+0x854>)
 80075c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7fe ff6b 	bl	80064a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80075d0:	4b44      	ldr	r3, [pc, #272]	; (80076e4 <HAL_ADC_ConfigChannel+0x86c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	099b      	lsrs	r3, r3, #6
 80075d6:	4a44      	ldr	r2, [pc, #272]	; (80076e8 <HAL_ADC_ConfigChannel+0x870>)
 80075d8:	fba2 2303 	umull	r2, r3, r2, r3
 80075dc:	099b      	lsrs	r3, r3, #6
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	4613      	mov	r3, r2
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80075ea:	e002      	b.n	80075f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f9      	bne.n	80075ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075f8:	e05a      	b.n	80076b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a3b      	ldr	r2, [pc, #236]	; (80076ec <HAL_ADC_ConfigChannel+0x874>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d125      	bne.n	8007650 <HAL_ADC_ConfigChannel+0x7d8>
 8007604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11f      	bne.n	8007650 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a31      	ldr	r2, [pc, #196]	; (80076dc <HAL_ADC_ConfigChannel+0x864>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d104      	bne.n	8007624 <HAL_ADC_ConfigChannel+0x7ac>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a34      	ldr	r2, [pc, #208]	; (80076f0 <HAL_ADC_ConfigChannel+0x878>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d047      	beq.n	80076b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762c:	d004      	beq.n	8007638 <HAL_ADC_ConfigChannel+0x7c0>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2a      	ldr	r2, [pc, #168]	; (80076dc <HAL_ADC_ConfigChannel+0x864>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d101      	bne.n	800763c <HAL_ADC_ConfigChannel+0x7c4>
 8007638:	4a29      	ldr	r2, [pc, #164]	; (80076e0 <HAL_ADC_ConfigChannel+0x868>)
 800763a:	e000      	b.n	800763e <HAL_ADC_ConfigChannel+0x7c6>
 800763c:	4a23      	ldr	r2, [pc, #140]	; (80076cc <HAL_ADC_ConfigChannel+0x854>)
 800763e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f7fe ff2c 	bl	80064a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800764e:	e031      	b.n	80076b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <HAL_ADC_ConfigChannel+0x87c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d12d      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800765a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800765e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d127      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <HAL_ADC_ConfigChannel+0x864>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d022      	beq.n	80076b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007678:	d004      	beq.n	8007684 <HAL_ADC_ConfigChannel+0x80c>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a17      	ldr	r2, [pc, #92]	; (80076dc <HAL_ADC_ConfigChannel+0x864>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d101      	bne.n	8007688 <HAL_ADC_ConfigChannel+0x810>
 8007684:	4a16      	ldr	r2, [pc, #88]	; (80076e0 <HAL_ADC_ConfigChannel+0x868>)
 8007686:	e000      	b.n	800768a <HAL_ADC_ConfigChannel+0x812>
 8007688:	4a10      	ldr	r2, [pc, #64]	; (80076cc <HAL_ADC_ConfigChannel+0x854>)
 800768a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800768e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f7fe ff06 	bl	80064a6 <LL_ADC_SetCommonPathInternalCh>
 800769a:	e00c      	b.n	80076b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80076ae:	e002      	b.n	80076b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80076be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	37d8      	adds	r7, #216	; 0xd8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	50000700 	.word	0x50000700
 80076d0:	c3210000 	.word	0xc3210000
 80076d4:	90c00010 	.word	0x90c00010
 80076d8:	50000600 	.word	0x50000600
 80076dc:	50000100 	.word	0x50000100
 80076e0:	50000300 	.word	0x50000300
 80076e4:	20000000 	.word	0x20000000
 80076e8:	053e2d63 	.word	0x053e2d63
 80076ec:	c7520000 	.word	0xc7520000
 80076f0:	50000500 	.word	0x50000500
 80076f4:	cb840000 	.word	0xcb840000

080076f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff f8a3 	bl	8006850 <LL_ADC_IsEnabled>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d14d      	bne.n	80077ac <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	4b28      	ldr	r3, [pc, #160]	; (80077b8 <ADC_Enable+0xc0>)
 8007718:	4013      	ands	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007722:	f043 0210 	orr.w	r2, r3, #16
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e039      	b.n	80077ae <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff f85e 	bl	8006800 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007744:	f7fe fe6e 	bl	8006424 <HAL_GetTick>
 8007748:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800774a:	e028      	b.n	800779e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff f87d 	bl	8006850 <LL_ADC_IsEnabled>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff f84d 	bl	8006800 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007766:	f7fe fe5d 	bl	8006424 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d914      	bls.n	800779e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b01      	cmp	r3, #1
 8007780:	d00d      	beq.n	800779e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007786:	f043 0210 	orr.w	r2, r3, #16
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007792:	f043 0201 	orr.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e007      	b.n	80077ae <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d1cf      	bne.n	800774c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	8000003f 	.word	0x8000003f

080077bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff f854 	bl	8006876 <LL_ADC_IsDisableOngoing>
 80077ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff f83b 	bl	8006850 <LL_ADC_IsEnabled>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d047      	beq.n	8007870 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d144      	bne.n	8007870 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 030d 	and.w	r3, r3, #13
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d10c      	bne.n	800780e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff f815 	bl	8006828 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2203      	movs	r2, #3
 8007804:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007806:	f7fe fe0d 	bl	8006424 <HAL_GetTick>
 800780a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800780c:	e029      	b.n	8007862 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007812:	f043 0210 	orr.w	r2, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e023      	b.n	8007872 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800782a:	f7fe fdfb 	bl	8006424 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d914      	bls.n	8007862 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00d      	beq.n	8007862 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800784a:	f043 0210 	orr.w	r2, r3, #16
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007856:	f043 0201 	orr.w	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e007      	b.n	8007872 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1dc      	bne.n	800782a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007890:	2b00      	cmp	r3, #0
 8007892:	d14b      	bne.n	800792c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007898:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d021      	beq.n	80078f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe feb6 	bl	8006624 <LL_ADC_REG_IsTriggerSourceSWStart>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d032      	beq.n	8007924 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d12b      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11f      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e8:	f043 0201 	orr.w	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80078f0:	e018      	b.n	8007924 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d111      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791c:	f043 0201 	orr.w	r2, r3, #1
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff fa89 	bl	8006e3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800792a:	e00e      	b.n	800794a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fa93 	bl	8006e64 <HAL_ADC_ErrorCallback>
}
 800793e:	e004      	b.n	800794a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff fa75 	bl	8006e50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007980:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798c:	f043 0204 	orr.w	r2, r3, #4
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fa65 	bl	8006e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <LL_ADC_IsEnabled>:
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <LL_ADC_IsEnabled+0x18>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <LL_ADC_IsEnabled+0x1a>
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <LL_ADC_StartCalibration>:
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80079da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	609a      	str	r2, [r3, #8]
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <LL_ADC_IsCalibrationOnGoing>:
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a0e:	d101      	bne.n	8007a14 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <LL_ADC_REG_IsConversionOngoing>:
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d101      	bne.n	8007a3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_ADCEx_Calibration_Start+0x1c>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e04d      	b.n	8007b00 <HAL_ADCEx_Calibration_Start+0xb8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff fea5 	bl	80077bc <ADC_Disable>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d136      	bne.n	8007aea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a84:	f023 0302 	bic.w	r3, r3, #2
 8007a88:	f043 0202 	orr.w	r2, r3, #2
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff96 	bl	80079c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007a9c:	e014      	b.n	8007ac8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d90d      	bls.n	8007ac8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab0:	f023 0312 	bic.w	r3, r3, #18
 8007ab4:	f043 0210 	orr.w	r2, r3, #16
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e01b      	b.n	8007b00 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff ff94 	bl	80079fa <LL_ADC_IsCalibrationOnGoing>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e2      	bne.n	8007a9e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	f043 0201 	orr.w	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ae8:	e005      	b.n	8007af6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aee:	f043 0210 	orr.w	r2, r3, #16
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	0004de01 	.word	0x0004de01

08007b0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b0a1      	sub	sp, #132	; 0x84
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e0e7      	b.n	8007cfa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007b32:	2300      	movs	r3, #0
 8007b34:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007b36:	2300      	movs	r3, #0
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b42:	d102      	bne.n	8007b4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007b44:	4b6f      	ldr	r3, [pc, #444]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	e009      	b.n	8007b5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a6e      	ldr	r2, [pc, #440]	; (8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d102      	bne.n	8007b5a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007b54:	4b6d      	ldr	r3, [pc, #436]	; (8007d0c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007b56:	60bb      	str	r3, [r7, #8]
 8007b58:	e001      	b.n	8007b5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b68:	f043 0220 	orr.w	r2, r3, #32
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0be      	b.n	8007cfa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff ff4f 	bl	8007a22 <LL_ADC_REG_IsConversionOngoing>
 8007b84:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff ff49 	bl	8007a22 <LL_ADC_REG_IsConversionOngoing>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 80a0 	bne.w	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 809c 	bne.w	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba8:	d004      	beq.n	8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a55      	ldr	r2, [pc, #340]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d101      	bne.n	8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007bb4:	4b56      	ldr	r3, [pc, #344]	; (8007d10 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007bb6:	e000      	b.n	8007bba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007bb8:	4b56      	ldr	r3, [pc, #344]	; (8007d14 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007bba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d04b      	beq.n	8007c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	6859      	ldr	r1, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bd6:	035b      	lsls	r3, r3, #13
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007be8:	d004      	beq.n	8007bf4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a45      	ldr	r2, [pc, #276]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10f      	bne.n	8007c14 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007bf4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007bf8:	f7ff fed3 	bl	80079a2 <LL_ADC_IsEnabled>
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4841      	ldr	r0, [pc, #260]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007c00:	f7ff fecf 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4323      	orrs	r3, r4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	e012      	b.n	8007c3a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007c14:	483c      	ldr	r0, [pc, #240]	; (8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007c16:	f7ff fec4 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	483b      	ldr	r0, [pc, #236]	; (8007d0c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007c1e:	f7ff fec0 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c22:	4603      	mov	r3, r0
 8007c24:	431c      	orrs	r4, r3
 8007c26:	483c      	ldr	r0, [pc, #240]	; (8007d18 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007c28:	f7ff febb 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	4323      	orrs	r3, r4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d056      	beq.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007c46:	f023 030f 	bic.w	r3, r3, #15
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	6811      	ldr	r1, [r2, #0]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	6892      	ldr	r2, [r2, #8]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	431a      	orrs	r2, r3
 8007c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c58:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007c5a:	e047      	b.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c70:	d004      	beq.n	8007c7c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a23      	ldr	r2, [pc, #140]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d10f      	bne.n	8007c9c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007c7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007c80:	f7ff fe8f 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c84:	4604      	mov	r4, r0
 8007c86:	481f      	ldr	r0, [pc, #124]	; (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007c88:	f7ff fe8b 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4323      	orrs	r3, r4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	e012      	b.n	8007cc2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007c9c:	481a      	ldr	r0, [pc, #104]	; (8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007c9e:	f7ff fe80 	bl	80079a2 <LL_ADC_IsEnabled>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4819      	ldr	r0, [pc, #100]	; (8007d0c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007ca6:	f7ff fe7c 	bl	80079a2 <LL_ADC_IsEnabled>
 8007caa:	4603      	mov	r3, r0
 8007cac:	431c      	orrs	r4, r3
 8007cae:	481a      	ldr	r0, [pc, #104]	; (8007d18 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007cb0:	f7ff fe77 	bl	80079a2 <LL_ADC_IsEnabled>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	4323      	orrs	r3, r4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d012      	beq.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007cce:	f023 030f 	bic.w	r3, r3, #15
 8007cd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007cd4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007cd6:	e009      	b.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007cea:	e000      	b.n	8007cee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007cec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007cf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3784      	adds	r7, #132	; 0x84
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	50000100 	.word	0x50000100
 8007d08:	50000400 	.word	0x50000400
 8007d0c:	50000500 	.word	0x50000500
 8007d10:	50000300 	.word	0x50000300
 8007d14:	50000700 	.word	0x50000700
 8007d18:	50000600 	.word	0x50000600

08007d1c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <LL_EXTI_EnableIT_0_31+0x20>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4904      	ldr	r1, [pc, #16]	; (8007d3c <LL_EXTI_EnableIT_0_31+0x20>)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	600b      	str	r3, [r1, #0]
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	40010400 	.word	0x40010400

08007d40 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <LL_EXTI_EnableIT_32_63+0x20>)
 8007d4a:	6a1a      	ldr	r2, [r3, #32]
 8007d4c:	4904      	ldr	r1, [pc, #16]	; (8007d60 <LL_EXTI_EnableIT_32_63+0x20>)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	620b      	str	r3, [r1, #32]
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	40010400 	.word	0x40010400

08007d64 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <LL_EXTI_DisableIT_0_31+0x24>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	43db      	mvns	r3, r3
 8007d74:	4904      	ldr	r1, [pc, #16]	; (8007d88 <LL_EXTI_DisableIT_0_31+0x24>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	600b      	str	r3, [r1, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010400 	.word	0x40010400

08007d8c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <LL_EXTI_DisableIT_32_63+0x24>)
 8007d96:	6a1a      	ldr	r2, [r3, #32]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	43db      	mvns	r3, r3
 8007d9c:	4904      	ldr	r1, [pc, #16]	; (8007db0 <LL_EXTI_DisableIT_32_63+0x24>)
 8007d9e:	4013      	ands	r3, r2
 8007da0:	620b      	str	r3, [r1, #32]
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40010400 	.word	0x40010400

08007db4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	4904      	ldr	r1, [pc, #16]	; (8007dd4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	604b      	str	r3, [r1, #4]

}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	40010400 	.word	0x40010400

08007dd8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de4:	4904      	ldr	r1, [pc, #16]	; (8007df8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	40010400 	.word	0x40010400

08007dfc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	4904      	ldr	r1, [pc, #16]	; (8007e20 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	604b      	str	r3, [r1, #4]
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40010400 	.word	0x40010400

08007e24 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	43db      	mvns	r3, r3
 8007e34:	4904      	ldr	r1, [pc, #16]	; (8007e48 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40010400 	.word	0x40010400

08007e4c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	4904      	ldr	r1, [pc, #16]	; (8007e6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	608b      	str	r3, [r1, #8]

}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	40010400 	.word	0x40010400

08007e70 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e7c:	4904      	ldr	r1, [pc, #16]	; (8007e90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	40010400 	.word	0x40010400

08007e94 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	43db      	mvns	r3, r3
 8007ea4:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	608b      	str	r3, [r1, #8]

}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40010400 	.word	0x40010400

08007ebc <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	43db      	mvns	r3, r3
 8007ecc:	4904      	ldr	r1, [pc, #16]	; (8007ee0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007ece:	4013      	ands	r3, r2
 8007ed0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40010400 	.word	0x40010400

08007ee4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	4904      	ldr	r1, [pc, #16]	; (8007f04 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60cb      	str	r3, [r1, #12]
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	40010400 	.word	0x40010400

08007f08 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	4904      	ldr	r1, [pc, #16]	; (8007f28 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	40010400 	.word	0x40010400

08007f2c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007f34:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	43db      	mvns	r3, r3
 8007f3c:	4904      	ldr	r1, [pc, #16]	; (8007f50 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	60cb      	str	r3, [r1, #12]
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	40010400 	.word	0x40010400

08007f54 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	43db      	mvns	r3, r3
 8007f64:	4904      	ldr	r1, [pc, #16]	; (8007f78 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010400 	.word	0x40010400

08007f7c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007f84:	4a04      	ldr	r2, [pc, #16]	; (8007f98 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6153      	str	r3, [r2, #20]
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40010400 	.word	0x40010400

08007f9c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8007fa4:	4a04      	ldr	r2, [pc, #16]	; (8007fb8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010400 	.word	0x40010400

08007fbc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d102      	bne.n	8007fd8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	77fb      	strb	r3, [r7, #31]
 8007fd6:	e181      	b.n	80082dc <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe6:	d102      	bne.n	8007fee <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e176      	b.n	80082dc <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7f5b      	ldrb	r3, [r3, #29]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d108      	bne.n	800800a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7fd fb41 	bl	800568c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008014:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4b90      	ldr	r3, [pc, #576]	; (800827c <HAL_COMP_Init+0x2c0>)
 800803c:	4013      	ands	r3, r2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	6979      	ldr	r1, [r7, #20]
 8008044:	430b      	orrs	r3, r1
 8008046:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d016      	beq.n	8008084 <HAL_COMP_Init+0xc8>
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d113      	bne.n	8008084 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800805c:	4b88      	ldr	r3, [pc, #544]	; (8008280 <HAL_COMP_Init+0x2c4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	099b      	lsrs	r3, r3, #6
 8008062:	4a88      	ldr	r2, [pc, #544]	; (8008284 <HAL_COMP_Init+0x2c8>)
 8008064:	fba2 2303 	umull	r2, r3, r2, r3
 8008068:	099b      	lsrs	r3, r3, #6
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008076:	e002      	b.n	800807e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3b01      	subs	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1f9      	bne.n	8008078 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a7f      	ldr	r2, [pc, #508]	; (8008288 <HAL_COMP_Init+0x2cc>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d028      	beq.n	80080e0 <HAL_COMP_Init+0x124>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a7e      	ldr	r2, [pc, #504]	; (800828c <HAL_COMP_Init+0x2d0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d020      	beq.n	80080da <HAL_COMP_Init+0x11e>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a7c      	ldr	r2, [pc, #496]	; (8008290 <HAL_COMP_Init+0x2d4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d018      	beq.n	80080d4 <HAL_COMP_Init+0x118>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a7b      	ldr	r2, [pc, #492]	; (8008294 <HAL_COMP_Init+0x2d8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d010      	beq.n	80080ce <HAL_COMP_Init+0x112>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a79      	ldr	r2, [pc, #484]	; (8008298 <HAL_COMP_Init+0x2dc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d008      	beq.n	80080c8 <HAL_COMP_Init+0x10c>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a78      	ldr	r2, [pc, #480]	; (800829c <HAL_COMP_Init+0x2e0>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d101      	bne.n	80080c4 <HAL_COMP_Init+0x108>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e00f      	b.n	80080e4 <HAL_COMP_Init+0x128>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e00d      	b.n	80080e4 <HAL_COMP_Init+0x128>
 80080c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080cc:	e00a      	b.n	80080e4 <HAL_COMP_Init+0x128>
 80080ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080d2:	e007      	b.n	80080e4 <HAL_COMP_Init+0x128>
 80080d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80080d8:	e004      	b.n	80080e4 <HAL_COMP_Init+0x128>
 80080da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080de:	e001      	b.n	80080e4 <HAL_COMP_Init+0x128>
 80080e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80080e4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80b6 	beq.w	8008260 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d011      	beq.n	8008124 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a65      	ldr	r2, [pc, #404]	; (800829c <HAL_COMP_Init+0x2e0>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <HAL_COMP_Init+0x158>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a64      	ldr	r2, [pc, #400]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d103      	bne.n	800811c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8008114:	6938      	ldr	r0, [r7, #16]
 8008116:	f7ff feab 	bl	8007e70 <LL_EXTI_EnableRisingTrig_32_63>
 800811a:	e014      	b.n	8008146 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800811c:	6938      	ldr	r0, [r7, #16]
 800811e:	f7ff fe95 	bl	8007e4c <LL_EXTI_EnableRisingTrig_0_31>
 8008122:	e010      	b.n	8008146 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a5c      	ldr	r2, [pc, #368]	; (800829c <HAL_COMP_Init+0x2e0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_COMP_Init+0x17c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a5b      	ldr	r2, [pc, #364]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d103      	bne.n	8008140 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8008138:	6938      	ldr	r0, [r7, #16]
 800813a:	f7ff febf 	bl	8007ebc <LL_EXTI_DisableRisingTrig_32_63>
 800813e:	e002      	b.n	8008146 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8008140:	6938      	ldr	r0, [r7, #16]
 8008142:	f7ff fea7 	bl	8007e94 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a51      	ldr	r2, [pc, #324]	; (800829c <HAL_COMP_Init+0x2e0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_COMP_Init+0x1aa>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a4f      	ldr	r2, [pc, #316]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d103      	bne.n	800816e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8008166:	6938      	ldr	r0, [r7, #16]
 8008168:	f7ff fece 	bl	8007f08 <LL_EXTI_EnableFallingTrig_32_63>
 800816c:	e014      	b.n	8008198 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800816e:	6938      	ldr	r0, [r7, #16]
 8008170:	f7ff feb8 	bl	8007ee4 <LL_EXTI_EnableFallingTrig_0_31>
 8008174:	e010      	b.n	8008198 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a48      	ldr	r2, [pc, #288]	; (800829c <HAL_COMP_Init+0x2e0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d004      	beq.n	800818a <HAL_COMP_Init+0x1ce>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a46      	ldr	r2, [pc, #280]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d103      	bne.n	8008192 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800818a:	6938      	ldr	r0, [r7, #16]
 800818c:	f7ff fee2 	bl	8007f54 <LL_EXTI_DisableFallingTrig_32_63>
 8008190:	e002      	b.n	8008198 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8008192:	6938      	ldr	r0, [r7, #16]
 8008194:	f7ff feca 	bl	8007f2c <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a3f      	ldr	r2, [pc, #252]	; (800829c <HAL_COMP_Init+0x2e0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_COMP_Init+0x1f0>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a3e      	ldr	r2, [pc, #248]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d103      	bne.n	80081b4 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80081ac:	6938      	ldr	r0, [r7, #16]
 80081ae:	f7ff fef5 	bl	8007f9c <LL_EXTI_ClearFlag_32_63>
 80081b2:	e002      	b.n	80081ba <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80081b4:	6938      	ldr	r0, [r7, #16]
 80081b6:	f7ff fee1 	bl	8007f7c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d011      	beq.n	80081ea <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a34      	ldr	r2, [pc, #208]	; (800829c <HAL_COMP_Init+0x2e0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d004      	beq.n	80081da <HAL_COMP_Init+0x21e>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a32      	ldr	r2, [pc, #200]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d103      	bne.n	80081e2 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f7ff fdfc 	bl	8007dd8 <LL_EXTI_EnableEvent_32_63>
 80081e0:	e014      	b.n	800820c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80081e2:	6938      	ldr	r0, [r7, #16]
 80081e4:	f7ff fde6 	bl	8007db4 <LL_EXTI_EnableEvent_0_31>
 80081e8:	e010      	b.n	800820c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a2b      	ldr	r2, [pc, #172]	; (800829c <HAL_COMP_Init+0x2e0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d004      	beq.n	80081fe <HAL_COMP_Init+0x242>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d103      	bne.n	8008206 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80081fe:	6938      	ldr	r0, [r7, #16]
 8008200:	f7ff fe10 	bl	8007e24 <LL_EXTI_DisableEvent_32_63>
 8008204:	e002      	b.n	800820c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8008206:	6938      	ldr	r0, [r7, #16]
 8008208:	f7ff fdf8 	bl	8007dfc <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d011      	beq.n	800823c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a1f      	ldr	r2, [pc, #124]	; (800829c <HAL_COMP_Init+0x2e0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d004      	beq.n	800822c <HAL_COMP_Init+0x270>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a1e      	ldr	r2, [pc, #120]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d103      	bne.n	8008234 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800822c:	6938      	ldr	r0, [r7, #16]
 800822e:	f7ff fd87 	bl	8007d40 <LL_EXTI_EnableIT_32_63>
 8008232:	e04b      	b.n	80082cc <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8008234:	6938      	ldr	r0, [r7, #16]
 8008236:	f7ff fd71 	bl	8007d1c <LL_EXTI_EnableIT_0_31>
 800823a:	e047      	b.n	80082cc <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a16      	ldr	r2, [pc, #88]	; (800829c <HAL_COMP_Init+0x2e0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d004      	beq.n	8008250 <HAL_COMP_Init+0x294>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a15      	ldr	r2, [pc, #84]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d103      	bne.n	8008258 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8008250:	6938      	ldr	r0, [r7, #16]
 8008252:	f7ff fd9b 	bl	8007d8c <LL_EXTI_DisableIT_32_63>
 8008256:	e039      	b.n	80082cc <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8008258:	6938      	ldr	r0, [r7, #16]
 800825a:	f7ff fd83 	bl	8007d64 <LL_EXTI_DisableIT_0_31>
 800825e:	e035      	b.n	80082cc <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a0d      	ldr	r2, [pc, #52]	; (800829c <HAL_COMP_Init+0x2e0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <HAL_COMP_Init+0x2b8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a0c      	ldr	r2, [pc, #48]	; (80082a0 <HAL_COMP_Init+0x2e4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d117      	bne.n	80082a4 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8008274:	6938      	ldr	r0, [r7, #16]
 8008276:	f7ff fdd5 	bl	8007e24 <LL_EXTI_DisableEvent_32_63>
 800827a:	e016      	b.n	80082aa <HAL_COMP_Init+0x2ee>
 800827c:	ff007e0f 	.word	0xff007e0f
 8008280:	20000000 	.word	0x20000000
 8008284:	053e2d63 	.word	0x053e2d63
 8008288:	40010200 	.word	0x40010200
 800828c:	40010204 	.word	0x40010204
 8008290:	40010208 	.word	0x40010208
 8008294:	4001020c 	.word	0x4001020c
 8008298:	40010210 	.word	0x40010210
 800829c:	40010214 	.word	0x40010214
 80082a0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80082a4:	6938      	ldr	r0, [r7, #16]
 80082a6:	f7ff fda9 	bl	8007dfc <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a0e      	ldr	r2, [pc, #56]	; (80082e8 <HAL_COMP_Init+0x32c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d004      	beq.n	80082be <HAL_COMP_Init+0x302>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a0c      	ldr	r2, [pc, #48]	; (80082ec <HAL_COMP_Init+0x330>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d103      	bne.n	80082c6 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80082be:	6938      	ldr	r0, [r7, #16]
 80082c0:	f7ff fd64 	bl	8007d8c <LL_EXTI_DisableIT_32_63>
 80082c4:	e002      	b.n	80082cc <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80082c6:	6938      	ldr	r0, [r7, #16]
 80082c8:	f7ff fd4c 	bl	8007d64 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7f5b      	ldrb	r3, [r3, #29]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80082dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40010214 	.word	0x40010214
 80082ec:	40010218 	.word	0x40010218

080082f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008300:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <__NVIC_SetPriorityGrouping+0x44>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800830c:	4013      	ands	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800831c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008322:	4a04      	ldr	r2, [pc, #16]	; (8008334 <__NVIC_SetPriorityGrouping+0x44>)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	60d3      	str	r3, [r2, #12]
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800833c:	4b04      	ldr	r3, [pc, #16]	; (8008350 <__NVIC_GetPriorityGrouping+0x18>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f003 0307 	and.w	r3, r3, #7
}
 8008346:	4618      	mov	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	e000ed00 	.word	0xe000ed00

08008354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800835e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008362:	2b00      	cmp	r3, #0
 8008364:	db0b      	blt.n	800837e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	f003 021f 	and.w	r2, r3, #31
 800836c:	4907      	ldr	r1, [pc, #28]	; (800838c <__NVIC_EnableIRQ+0x38>)
 800836e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	2001      	movs	r0, #1
 8008376:	fa00 f202 	lsl.w	r2, r0, r2
 800837a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e100 	.word	0xe000e100

08008390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800839c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	db0a      	blt.n	80083ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	490c      	ldr	r1, [pc, #48]	; (80083dc <__NVIC_SetPriority+0x4c>)
 80083aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ae:	0112      	lsls	r2, r2, #4
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	440b      	add	r3, r1
 80083b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80083b8:	e00a      	b.n	80083d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	4908      	ldr	r1, [pc, #32]	; (80083e0 <__NVIC_SetPriority+0x50>)
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	3b04      	subs	r3, #4
 80083c8:	0112      	lsls	r2, r2, #4
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	440b      	add	r3, r1
 80083ce:	761a      	strb	r2, [r3, #24]
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	e000e100 	.word	0xe000e100
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b089      	sub	sp, #36	; 0x24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f1c3 0307 	rsb	r3, r3, #7
 80083fe:	2b04      	cmp	r3, #4
 8008400:	bf28      	it	cs
 8008402:	2304      	movcs	r3, #4
 8008404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	3304      	adds	r3, #4
 800840a:	2b06      	cmp	r3, #6
 800840c:	d902      	bls.n	8008414 <NVIC_EncodePriority+0x30>
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	3b03      	subs	r3, #3
 8008412:	e000      	b.n	8008416 <NVIC_EncodePriority+0x32>
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008418:	f04f 32ff 	mov.w	r2, #4294967295
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	43da      	mvns	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	401a      	ands	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800842c:	f04f 31ff 	mov.w	r1, #4294967295
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	fa01 f303 	lsl.w	r3, r1, r3
 8008436:	43d9      	mvns	r1, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800843c:	4313      	orrs	r3, r2
         );
}
 800843e:	4618      	mov	r0, r3
 8008440:	3724      	adds	r7, #36	; 0x24
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3b01      	subs	r3, #1
 8008458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800845c:	d301      	bcc.n	8008462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800845e:	2301      	movs	r3, #1
 8008460:	e00f      	b.n	8008482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008462:	4a0a      	ldr	r2, [pc, #40]	; (800848c <SysTick_Config+0x40>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3b01      	subs	r3, #1
 8008468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800846a:	210f      	movs	r1, #15
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	f7ff ff8e 	bl	8008390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <SysTick_Config+0x40>)
 8008476:	2200      	movs	r2, #0
 8008478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800847a:	4b04      	ldr	r3, [pc, #16]	; (800848c <SysTick_Config+0x40>)
 800847c:	2207      	movs	r2, #7
 800847e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	e000e010 	.word	0xe000e010

08008490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff29 	bl	80082f0 <__NVIC_SetPriorityGrouping>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	4603      	mov	r3, r0
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80084b4:	f7ff ff40 	bl	8008338 <__NVIC_GetPriorityGrouping>
 80084b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	6978      	ldr	r0, [r7, #20]
 80084c0:	f7ff ff90 	bl	80083e4 <NVIC_EncodePriority>
 80084c4:	4602      	mov	r2, r0
 80084c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff ff5f 	bl	8008390 <__NVIC_SetPriority>
}
 80084d2:	bf00      	nop
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	4603      	mov	r3, r0
 80084e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff ff33 	bl	8008354 <__NVIC_EnableIRQ>
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff ffa4 	bl	800844c <SysTick_Config>
 8008504:	4603      	mov	r3, r0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e014      	b.n	800854a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	791b      	ldrb	r3, [r3, #4]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7fd f941 	bl	80057b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	795b      	ldrb	r3, [r3, #5]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d101      	bne.n	800856c <HAL_DAC_ConfigChannel+0x18>
 8008568:	2302      	movs	r3, #2
 800856a:	e192      	b.n	8008892 <HAL_DAC_ConfigChannel+0x33e>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2202      	movs	r2, #2
 8008576:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b04      	cmp	r3, #4
 800857e:	d174      	bne.n	800866a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008580:	f7fd ff50 	bl	8006424 <HAL_GetTick>
 8008584:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d134      	bne.n	80085f6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800858c:	e011      	b.n	80085b2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800858e:	f7fd ff49 	bl	8006424 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b01      	cmp	r3, #1
 800859a:	d90a      	bls.n	80085b2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	f043 0208 	orr.w	r2, r3, #8
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2203      	movs	r2, #3
 80085ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e16f      	b.n	8008892 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e6      	bne.n	800858e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80085c0:	2001      	movs	r0, #1
 80085c2:	f7fd ff3b 	bl	800643c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085ce:	641a      	str	r2, [r3, #64]	; 0x40
 80085d0:	e01e      	b.n	8008610 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80085d2:	f7fd ff27 	bl	8006424 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d90a      	bls.n	80085f6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	f043 0208 	orr.w	r2, r3, #8
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2203      	movs	r2, #3
 80085f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e14d      	b.n	8008892 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dbe8      	blt.n	80085d2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8008600:	2001      	movs	r0, #1
 8008602:	f7fd ff1b 	bl	800643c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800860e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008620:	fa01 f303 	lsl.w	r3, r1, r3
 8008624:	43db      	mvns	r3, r3
 8008626:	ea02 0103 	and.w	r1, r2, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	409a      	lsls	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	21ff      	movs	r1, #255	; 0xff
 800864c:	fa01 f303 	lsl.w	r3, r1, r3
 8008650:	43db      	mvns	r3, r3
 8008652:	ea02 0103 	and.w	r1, r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f003 0310 	and.w	r3, r3, #16
 8008660:	409a      	lsls	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d11d      	bne.n	80086ae <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	221f      	movs	r2, #31
 8008682:	fa02 f303 	lsl.w	r3, r2, r3
 8008686:	43db      	mvns	r3, r3
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	4013      	ands	r3, r2
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	fa02 f303 	lsl.w	r3, r2, r3
 80086a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a2:	4313      	orrs	r3, r2
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2207      	movs	r2, #7
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43db      	mvns	r3, r3
 80086c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c6:	4013      	ands	r3, r2
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d102      	bne.n	80086d8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	e00f      	b.n	80086f8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d102      	bne.n	80086e6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80086e0:	2301      	movs	r3, #1
 80086e2:	623b      	str	r3, [r7, #32]
 80086e4:	e008      	b.n	80086f8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80086ee:	2301      	movs	r3, #1
 80086f0:	623b      	str	r3, [r7, #32]
 80086f2:	e001      	b.n	80086f8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	6a3a      	ldr	r2, [r7, #32]
 8008704:	4313      	orrs	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f003 0310 	and.w	r3, r3, #16
 800870e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	43db      	mvns	r3, r3
 8008718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871a:	4013      	ands	r3, r2
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	791b      	ldrb	r3, [r3, #4]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d102      	bne.n	800872c <HAL_DAC_ConfigChannel+0x1d8>
 8008726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800872a:	e000      	b.n	800872e <HAL_DAC_ConfigChannel+0x1da>
 800872c:	2300      	movs	r3, #0
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	4313      	orrs	r3, r2
 8008732:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f003 0310 	and.w	r3, r3, #16
 800873a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	43db      	mvns	r3, r3
 8008744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008746:	4013      	ands	r3, r2
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	795b      	ldrb	r3, [r3, #5]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d102      	bne.n	8008758 <HAL_DAC_ConfigChannel+0x204>
 8008752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008756:	e000      	b.n	800875a <HAL_DAC_ConfigChannel+0x206>
 8008758:	2300      	movs	r3, #0
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	4313      	orrs	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d114      	bne.n	800879a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008770:	f004 feb2 	bl	800d4d8 <HAL_RCC_GetHCLKFreq>
 8008774:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4a48      	ldr	r2, [pc, #288]	; (800889c <HAL_DAC_ConfigChannel+0x348>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d904      	bls.n	8008788 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
 8008786:	e00f      	b.n	80087a8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	4a45      	ldr	r2, [pc, #276]	; (80088a0 <HAL_DAC_ConfigChannel+0x34c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d90a      	bls.n	80087a6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
 8008798:	e006      	b.n	80087a8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a0:	4313      	orrs	r3, r2
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
 80087a4:	e000      	b.n	80087a8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80087a6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	fa02 f303 	lsl.w	r3, r2, r3
 80087b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b6:	4313      	orrs	r3, r2
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6819      	ldr	r1, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f003 0310 	and.w	r3, r3, #16
 80087ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80087d2:	fa02 f303 	lsl.w	r3, r2, r3
 80087d6:	43da      	mvns	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	400a      	ands	r2, r1
 80087de:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	43db      	mvns	r3, r3
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	4013      	ands	r3, r2
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f003 0310 	and.w	r3, r3, #16
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	fa02 f303 	lsl.w	r3, r2, r3
 8008810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008812:	4313      	orrs	r3, r2
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6819      	ldr	r1, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f003 0310 	and.w	r3, r3, #16
 800882a:	22c0      	movs	r2, #192	; 0xc0
 800882c:	fa02 f303 	lsl.w	r3, r2, r3
 8008830:	43da      	mvns	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	400a      	ands	r2, r1
 8008838:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	4313      	orrs	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008868:	fa01 f303 	lsl.w	r3, r1, r3
 800886c:	43db      	mvns	r3, r3
 800886e:	ea02 0103 	and.w	r1, r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	409a      	lsls	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3728      	adds	r7, #40	; 0x28
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	09896800 	.word	0x09896800
 80088a0:	04c4b400 	.word	0x04c4b400

080088a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e08d      	b.n	80089d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	4b47      	ldr	r3, [pc, #284]	; (80089dc <HAL_DMA_Init+0x138>)
 80088be:	429a      	cmp	r2, r3
 80088c0:	d80f      	bhi.n	80088e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	4b45      	ldr	r3, [pc, #276]	; (80089e0 <HAL_DMA_Init+0x13c>)
 80088ca:	4413      	add	r3, r2
 80088cc:	4a45      	ldr	r2, [pc, #276]	; (80089e4 <HAL_DMA_Init+0x140>)
 80088ce:	fba2 2303 	umull	r2, r3, r2, r3
 80088d2:	091b      	lsrs	r3, r3, #4
 80088d4:	009a      	lsls	r2, r3, #2
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a42      	ldr	r2, [pc, #264]	; (80089e8 <HAL_DMA_Init+0x144>)
 80088de:	641a      	str	r2, [r3, #64]	; 0x40
 80088e0:	e00e      	b.n	8008900 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	4b40      	ldr	r3, [pc, #256]	; (80089ec <HAL_DMA_Init+0x148>)
 80088ea:	4413      	add	r3, r2
 80088ec:	4a3d      	ldr	r2, [pc, #244]	; (80089e4 <HAL_DMA_Init+0x140>)
 80088ee:	fba2 2303 	umull	r2, r3, r2, r3
 80088f2:	091b      	lsrs	r3, r3, #4
 80088f4:	009a      	lsls	r2, r3, #2
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a3c      	ldr	r2, [pc, #240]	; (80089f0 <HAL_DMA_Init+0x14c>)
 80088fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800893c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fa84 	bl	8008e60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008960:	d102      	bne.n	8008968 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800897c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d010      	beq.n	80089a8 <HAL_DMA_Init+0x104>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b04      	cmp	r3, #4
 800898c:	d80c      	bhi.n	80089a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 faa4 	bl	8008edc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80089a4:	605a      	str	r2, [r3, #4]
 80089a6:	e008      	b.n	80089ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	40020407 	.word	0x40020407
 80089e0:	bffdfff8 	.word	0xbffdfff8
 80089e4:	cccccccd 	.word	0xcccccccd
 80089e8:	40020000 	.word	0x40020000
 80089ec:	bffdfbf8 	.word	0xbffdfbf8
 80089f0:	40020400 	.word	0x40020400

080089f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_DMA_Start_IT+0x20>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e066      	b.n	8008ae2 <HAL_DMA_Start_IT+0xee>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d155      	bne.n	8008ad4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0201 	bic.w	r2, r2, #1
 8008a44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f9c9 	bl	8008de4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 020e 	orr.w	r2, r2, #14
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e00f      	b.n	8008a8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0204 	bic.w	r2, r2, #4
 8008a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 020a 	orr.w	r2, r2, #10
 8008a8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aa8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ac0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0201 	orr.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	e005      	b.n	8008ae0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008adc:	2302      	movs	r3, #2
 8008ade:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d005      	beq.n	8008b0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2204      	movs	r2, #4
 8008b06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
 8008b0c:	e037      	b.n	8008b7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 020e 	bic.w	r2, r2, #14
 8008b1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0201 	bic.w	r2, r2, #1
 8008b3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b42:	f003 021f 	and.w	r2, r3, #31
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00c      	beq.n	8008b7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008b7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d00d      	beq.n	8008bd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	e047      	b.n	8008c60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 020e 	bic.w	r2, r2, #14
 8008bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0201 	bic.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c04:	f003 021f 	and.w	r2, r3, #31
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8008c12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00c      	beq.n	8008c40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008c3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	4798      	blx	r3
    }
  }
  return status;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	2204      	movs	r2, #4
 8008c8c:	409a      	lsls	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4013      	ands	r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d026      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x7a>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d021      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d107      	bne.n	8008cbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0204 	bic.w	r2, r2, #4
 8008cbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc2:	f003 021f 	and.w	r2, r3, #31
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	2104      	movs	r1, #4
 8008ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8008cd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d071      	beq.n	8008dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008ce2:	e06c      	b.n	8008dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	2202      	movs	r2, #2
 8008cee:	409a      	lsls	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d02e      	beq.n	8008d56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d029      	beq.n	8008d56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10b      	bne.n	8008d28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 020a 	bic.w	r2, r2, #10
 8008d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2c:	f003 021f 	and.w	r2, r3, #31
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	2102      	movs	r1, #2
 8008d36:	fa01 f202 	lsl.w	r2, r1, r2
 8008d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d038      	beq.n	8008dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008d54:	e033      	b.n	8008dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2208      	movs	r2, #8
 8008d60:	409a      	lsls	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4013      	ands	r3, r2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d02a      	beq.n	8008dc0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d025      	beq.n	8008dc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 020e 	bic.w	r2, r2, #14
 8008d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d88:	f003 021f 	and.w	r2, r3, #31
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d90:	2101      	movs	r1, #1
 8008d92:	fa01 f202 	lsl.w	r2, r1, r2
 8008d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d004      	beq.n	8008dc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
}
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008dd6:	b2db      	uxtb	r3, r3
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008dfa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d004      	beq.n	8008e0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008e0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e12:	f003 021f 	and.w	r2, r3, #31
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8008e20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d108      	bne.n	8008e44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008e42:	e007      	b.n	8008e54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	60da      	str	r2, [r3, #12]
}
 8008e54:	bf00      	nop
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4b16      	ldr	r3, [pc, #88]	; (8008ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d802      	bhi.n	8008e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008e74:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	e001      	b.n	8008e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008e7a:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008e7c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	3b08      	subs	r3, #8
 8008e8a:	4a12      	ldr	r2, [pc, #72]	; (8008ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e90:	091b      	lsrs	r3, r3, #4
 8008e92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e98:	089b      	lsrs	r3, r3, #2
 8008e9a:	009a      	lsls	r2, r3, #2
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a0b      	ldr	r2, [pc, #44]	; (8008ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f003 031f 	and.w	r3, r3, #31
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	409a      	lsls	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	40020407 	.word	0x40020407
 8008ecc:	40020800 	.word	0x40020800
 8008ed0:	40020820 	.word	0x40020820
 8008ed4:	cccccccd 	.word	0xcccccccd
 8008ed8:	40020880 	.word	0x40020880

08008edc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a08      	ldr	r2, [pc, #32]	; (8008f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008efe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	2201      	movs	r2, #1
 8008f0a:	409a      	lsls	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008f10:	bf00      	nop
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	1000823f 	.word	0x1000823f
 8008f20:	40020940 	.word	0x40020940

08008f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008f32:	e15a      	b.n	80091ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	2101      	movs	r1, #1
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f40:	4013      	ands	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 814c 	beq.w	80091e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d005      	beq.n	8008f64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d130      	bne.n	8008fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	2203      	movs	r2, #3
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	43db      	mvns	r3, r3
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	091b      	lsrs	r3, r3, #4
 8008fb0:	f003 0201 	and.w	r2, r3, #1
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f003 0303 	and.w	r3, r3, #3
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d017      	beq.n	8009002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	2203      	movs	r2, #3
 8008fde:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe2:	43db      	mvns	r3, r3
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	2b02      	cmp	r3, #2
 800900c:	d123      	bne.n	8009056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	08da      	lsrs	r2, r3, #3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3208      	adds	r2, #8
 8009016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	220f      	movs	r2, #15
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43db      	mvns	r3, r3
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4013      	ands	r3, r2
 8009030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	691a      	ldr	r2, [r3, #16]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	fa02 f303 	lsl.w	r3, r2, r3
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	08da      	lsrs	r2, r3, #3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3208      	adds	r2, #8
 8009050:	6939      	ldr	r1, [r7, #16]
 8009052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	2203      	movs	r2, #3
 8009062:	fa02 f303 	lsl.w	r3, r2, r3
 8009066:	43db      	mvns	r3, r3
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4013      	ands	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f003 0203 	and.w	r2, r3, #3
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80a6 	beq.w	80091e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009098:	4b5b      	ldr	r3, [pc, #364]	; (8009208 <HAL_GPIO_Init+0x2e4>)
 800909a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800909c:	4a5a      	ldr	r2, [pc, #360]	; (8009208 <HAL_GPIO_Init+0x2e4>)
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	6613      	str	r3, [r2, #96]	; 0x60
 80090a4:	4b58      	ldr	r3, [pc, #352]	; (8009208 <HAL_GPIO_Init+0x2e4>)
 80090a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	60bb      	str	r3, [r7, #8]
 80090ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090b0:	4a56      	ldr	r2, [pc, #344]	; (800920c <HAL_GPIO_Init+0x2e8>)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	3302      	adds	r3, #2
 80090b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f003 0303 	and.w	r3, r3, #3
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	220f      	movs	r2, #15
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	43db      	mvns	r3, r3
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	4013      	ands	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80090da:	d01f      	beq.n	800911c <HAL_GPIO_Init+0x1f8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a4c      	ldr	r2, [pc, #304]	; (8009210 <HAL_GPIO_Init+0x2ec>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d019      	beq.n	8009118 <HAL_GPIO_Init+0x1f4>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a4b      	ldr	r2, [pc, #300]	; (8009214 <HAL_GPIO_Init+0x2f0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <HAL_GPIO_Init+0x1f0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a4a      	ldr	r2, [pc, #296]	; (8009218 <HAL_GPIO_Init+0x2f4>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00d      	beq.n	8009110 <HAL_GPIO_Init+0x1ec>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a49      	ldr	r2, [pc, #292]	; (800921c <HAL_GPIO_Init+0x2f8>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <HAL_GPIO_Init+0x1e8>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a48      	ldr	r2, [pc, #288]	; (8009220 <HAL_GPIO_Init+0x2fc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d101      	bne.n	8009108 <HAL_GPIO_Init+0x1e4>
 8009104:	2305      	movs	r3, #5
 8009106:	e00a      	b.n	800911e <HAL_GPIO_Init+0x1fa>
 8009108:	2306      	movs	r3, #6
 800910a:	e008      	b.n	800911e <HAL_GPIO_Init+0x1fa>
 800910c:	2304      	movs	r3, #4
 800910e:	e006      	b.n	800911e <HAL_GPIO_Init+0x1fa>
 8009110:	2303      	movs	r3, #3
 8009112:	e004      	b.n	800911e <HAL_GPIO_Init+0x1fa>
 8009114:	2302      	movs	r3, #2
 8009116:	e002      	b.n	800911e <HAL_GPIO_Init+0x1fa>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <HAL_GPIO_Init+0x1fa>
 800911c:	2300      	movs	r3, #0
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	f002 0203 	and.w	r2, r2, #3
 8009124:	0092      	lsls	r2, r2, #2
 8009126:	4093      	lsls	r3, r2
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800912e:	4937      	ldr	r1, [pc, #220]	; (800920c <HAL_GPIO_Init+0x2e8>)
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	089b      	lsrs	r3, r3, #2
 8009134:	3302      	adds	r3, #2
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800913c:	4b39      	ldr	r3, [pc, #228]	; (8009224 <HAL_GPIO_Init+0x300>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	43db      	mvns	r3, r3
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	4013      	ands	r3, r2
 800914a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d003      	beq.n	8009160 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009160:	4a30      	ldr	r2, [pc, #192]	; (8009224 <HAL_GPIO_Init+0x300>)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009166:	4b2f      	ldr	r3, [pc, #188]	; (8009224 <HAL_GPIO_Init+0x300>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	43db      	mvns	r3, r3
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4013      	ands	r3, r2
 8009174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800918a:	4a26      	ldr	r2, [pc, #152]	; (8009224 <HAL_GPIO_Init+0x300>)
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009190:	4b24      	ldr	r3, [pc, #144]	; (8009224 <HAL_GPIO_Init+0x300>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	43db      	mvns	r3, r3
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	4013      	ands	r3, r2
 800919e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80091b4:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <HAL_GPIO_Init+0x300>)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80091ba:	4b1a      	ldr	r3, [pc, #104]	; (8009224 <HAL_GPIO_Init+0x300>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	43db      	mvns	r3, r3
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4013      	ands	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80091de:	4a11      	ldr	r2, [pc, #68]	; (8009224 <HAL_GPIO_Init+0x300>)
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	3301      	adds	r3, #1
 80091e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f47f ae9d 	bne.w	8008f34 <HAL_GPIO_Init+0x10>
  }
}
 80091fa:	bf00      	nop
 80091fc:	bf00      	nop
 80091fe:	371c      	adds	r7, #28
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	40021000 	.word	0x40021000
 800920c:	40010000 	.word	0x40010000
 8009210:	48000400 	.word	0x48000400
 8009214:	48000800 	.word	0x48000800
 8009218:	48000c00 	.word	0x48000c00
 800921c:	48001000 	.word	0x48001000
 8009220:	48001400 	.word	0x48001400
 8009224:	40010400 	.word	0x40010400

08009228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	807b      	strh	r3, [r7, #2]
 8009234:	4613      	mov	r3, r2
 8009236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009238:	787b      	ldrb	r3, [r7, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800923e:	887a      	ldrh	r2, [r7, #2]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009244:	e002      	b.n	800924c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009246:	887a      	ldrh	r2, [r7, #2]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800926a:	887a      	ldrh	r2, [r7, #2]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4013      	ands	r3, r2
 8009270:	041a      	lsls	r2, r3, #16
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	43d9      	mvns	r1, r3
 8009276:	887b      	ldrh	r3, [r7, #2]
 8009278:	400b      	ands	r3, r1
 800927a:	431a      	orrs	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]
}
 8009280:	bf00      	nop
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e081      	b.n	80093a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d106      	bne.n	80092b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7fc fadc 	bl	8005870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2224      	movs	r2, #36	; 0x24
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0201 	bic.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80092dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d107      	bne.n	8009306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009302:	609a      	str	r2, [r3, #8]
 8009304:	e006      	b.n	8009314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d104      	bne.n	8009326 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	69d9      	ldr	r1, [r3, #28]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1a      	ldr	r2, [r3, #32]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0201 	orr.w	r2, r2, #1
 8009382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	607a      	str	r2, [r7, #4]
 80093b6:	461a      	mov	r2, r3
 80093b8:	460b      	mov	r3, r1
 80093ba:	817b      	strh	r3, [r7, #10]
 80093bc:	4613      	mov	r3, r2
 80093be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	f040 80da 	bne.w	8009582 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d101      	bne.n	80093dc <HAL_I2C_Master_Transmit+0x30>
 80093d8:	2302      	movs	r3, #2
 80093da:	e0d3      	b.n	8009584 <HAL_I2C_Master_Transmit+0x1d8>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093e4:	f7fd f81e 	bl	8006424 <HAL_GetTick>
 80093e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2319      	movs	r3, #25
 80093f0:	2201      	movs	r2, #1
 80093f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f001 f8e9 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e0be      	b.n	8009584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2221      	movs	r2, #33	; 0x21
 800940a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2210      	movs	r2, #16
 8009412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	893a      	ldrh	r2, [r7, #8]
 8009426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009432:	b29b      	uxth	r3, r3
 8009434:	2bff      	cmp	r3, #255	; 0xff
 8009436:	d90e      	bls.n	8009456 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	22ff      	movs	r2, #255	; 0xff
 800943c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009442:	b2da      	uxtb	r2, r3
 8009444:	8979      	ldrh	r1, [r7, #10]
 8009446:	4b51      	ldr	r3, [pc, #324]	; (800958c <HAL_I2C_Master_Transmit+0x1e0>)
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f001 fa66 	bl	800a920 <I2C_TransferConfig>
 8009454:	e06c      	b.n	8009530 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009464:	b2da      	uxtb	r2, r3
 8009466:	8979      	ldrh	r1, [r7, #10]
 8009468:	4b48      	ldr	r3, [pc, #288]	; (800958c <HAL_I2C_Master_Transmit+0x1e0>)
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 fa55 	bl	800a920 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009476:	e05b      	b.n	8009530 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	6a39      	ldr	r1, [r7, #32]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f001 f8e6 	bl	800a64e <I2C_WaitOnTXISFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e07b      	b.n	8009584 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	781a      	ldrb	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	3b01      	subs	r3, #1
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d034      	beq.n	8009530 <HAL_I2C_Master_Transmit+0x184>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d130      	bne.n	8009530 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	6a3b      	ldr	r3, [r7, #32]
 80094d4:	2200      	movs	r2, #0
 80094d6:	2180      	movs	r1, #128	; 0x80
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f001 f878 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e04d      	b.n	8009584 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	2bff      	cmp	r3, #255	; 0xff
 80094f0:	d90e      	bls.n	8009510 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	22ff      	movs	r2, #255	; 0xff
 80094f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	8979      	ldrh	r1, [r7, #10]
 8009500:	2300      	movs	r3, #0
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f001 fa09 	bl	800a920 <I2C_TransferConfig>
 800950e:	e00f      	b.n	8009530 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951e:	b2da      	uxtb	r2, r3
 8009520:	8979      	ldrh	r1, [r7, #10]
 8009522:	2300      	movs	r3, #0
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f001 f9f8 	bl	800a920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d19e      	bne.n	8009478 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	6a39      	ldr	r1, [r7, #32]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f001 f8c5 	bl	800a6ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e01a      	b.n	8009584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2220      	movs	r2, #32
 8009554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6859      	ldr	r1, [r3, #4]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <HAL_I2C_Master_Transmit+0x1e4>)
 8009562:	400b      	ands	r3, r1
 8009564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2220      	movs	r2, #32
 800956a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	e000      	b.n	8009584 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009582:	2302      	movs	r3, #2
  }
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	80002000 	.word	0x80002000
 8009590:	fe00e800 	.word	0xfe00e800

08009594 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af02      	add	r7, sp, #8
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	4608      	mov	r0, r1
 800959e:	4611      	mov	r1, r2
 80095a0:	461a      	mov	r2, r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	817b      	strh	r3, [r7, #10]
 80095a6:	460b      	mov	r3, r1
 80095a8:	813b      	strh	r3, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	f040 80f9 	bne.w	80097ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <HAL_I2C_Mem_Write+0x34>
 80095c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d105      	bne.n	80095d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0ed      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_I2C_Mem_Write+0x4e>
 80095de:	2302      	movs	r3, #2
 80095e0:	e0e6      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80095ea:	f7fc ff1b 	bl	8006424 <HAL_GetTick>
 80095ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2319      	movs	r3, #25
 80095f6:	2201      	movs	r2, #1
 80095f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 ffe6 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e0d1      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2221      	movs	r2, #33	; 0x21
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2240      	movs	r2, #64	; 0x40
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a3a      	ldr	r2, [r7, #32]
 8009626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800962c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009634:	88f8      	ldrh	r0, [r7, #6]
 8009636:	893a      	ldrh	r2, [r7, #8]
 8009638:	8979      	ldrh	r1, [r7, #10]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	4603      	mov	r3, r0
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fb9f 	bl	8009d88 <I2C_RequestMemoryWrite>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e0a9      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009660:	b29b      	uxth	r3, r3
 8009662:	2bff      	cmp	r3, #255	; 0xff
 8009664:	d90e      	bls.n	8009684 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	22ff      	movs	r2, #255	; 0xff
 800966a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009670:	b2da      	uxtb	r2, r3
 8009672:	8979      	ldrh	r1, [r7, #10]
 8009674:	2300      	movs	r3, #0
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f001 f94f 	bl	800a920 <I2C_TransferConfig>
 8009682:	e00f      	b.n	80096a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009692:	b2da      	uxtb	r2, r3
 8009694:	8979      	ldrh	r1, [r7, #10]
 8009696:	2300      	movs	r3, #0
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f001 f93e 	bl	800a920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 ffd0 	bl	800a64e <I2C_WaitOnTXISFlagUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e07b      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	3b01      	subs	r3, #1
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d034      	beq.n	800975c <HAL_I2C_Mem_Write+0x1c8>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d130      	bne.n	800975c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	2200      	movs	r2, #0
 8009702:	2180      	movs	r1, #128	; 0x80
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 ff62 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e04d      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009718:	b29b      	uxth	r3, r3
 800971a:	2bff      	cmp	r3, #255	; 0xff
 800971c:	d90e      	bls.n	800973c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	22ff      	movs	r2, #255	; 0xff
 8009722:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009728:	b2da      	uxtb	r2, r3
 800972a:	8979      	ldrh	r1, [r7, #10]
 800972c:	2300      	movs	r3, #0
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f001 f8f3 	bl	800a920 <I2C_TransferConfig>
 800973a:	e00f      	b.n	800975c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974a:	b2da      	uxtb	r2, r3
 800974c:	8979      	ldrh	r1, [r7, #10]
 800974e:	2300      	movs	r3, #0
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f001 f8e2 	bl	800a920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d19e      	bne.n	80096a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 ffaf 	bl	800a6ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e01a      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2220      	movs	r2, #32
 8009780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <HAL_I2C_Mem_Write+0x224>)
 800978e:	400b      	ands	r3, r1
 8009790:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e000      	b.n	80097b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80097ae:	2302      	movs	r3, #2
  }
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	fe00e800 	.word	0xfe00e800

080097bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	4608      	mov	r0, r1
 80097c6:	4611      	mov	r1, r2
 80097c8:	461a      	mov	r2, r3
 80097ca:	4603      	mov	r3, r0
 80097cc:	817b      	strh	r3, [r7, #10]
 80097ce:	460b      	mov	r3, r1
 80097d0:	813b      	strh	r3, [r7, #8]
 80097d2:	4613      	mov	r3, r2
 80097d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b20      	cmp	r3, #32
 80097e0:	f040 80fd 	bne.w	80099de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <HAL_I2C_Mem_Read+0x34>
 80097ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d105      	bne.n	80097fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0f1      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <HAL_I2C_Mem_Read+0x4e>
 8009806:	2302      	movs	r3, #2
 8009808:	e0ea      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009812:	f7fc fe07 	bl	8006424 <HAL_GetTick>
 8009816:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	2319      	movs	r3, #25
 800981e:	2201      	movs	r2, #1
 8009820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 fed2 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e0d5      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2222      	movs	r2, #34	; 0x22
 8009838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2240      	movs	r2, #64	; 0x40
 8009840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a3a      	ldr	r2, [r7, #32]
 800984e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800985c:	88f8      	ldrh	r0, [r7, #6]
 800985e:	893a      	ldrh	r2, [r7, #8]
 8009860:	8979      	ldrh	r1, [r7, #10]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	4603      	mov	r3, r0
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 fadf 	bl	8009e30 <I2C_RequestMemoryRead>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e0ad      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009888:	b29b      	uxth	r3, r3
 800988a:	2bff      	cmp	r3, #255	; 0xff
 800988c:	d90e      	bls.n	80098ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	22ff      	movs	r2, #255	; 0xff
 8009892:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009898:	b2da      	uxtb	r2, r3
 800989a:	8979      	ldrh	r1, [r7, #10]
 800989c:	4b52      	ldr	r3, [pc, #328]	; (80099e8 <HAL_I2C_Mem_Read+0x22c>)
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f001 f83b 	bl	800a920 <I2C_TransferConfig>
 80098aa:	e00f      	b.n	80098cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	8979      	ldrh	r1, [r7, #10]
 80098be:	4b4a      	ldr	r3, [pc, #296]	; (80099e8 <HAL_I2C_Mem_Read+0x22c>)
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f001 f82a 	bl	800a920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	2200      	movs	r2, #0
 80098d4:	2104      	movs	r1, #4
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fe79 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e07c      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009902:	3b01      	subs	r3, #1
 8009904:	b29a      	uxth	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990e:	b29b      	uxth	r3, r3
 8009910:	3b01      	subs	r3, #1
 8009912:	b29a      	uxth	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991c:	b29b      	uxth	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d034      	beq.n	800998c <HAL_I2C_Mem_Read+0x1d0>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d130      	bne.n	800998c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	2200      	movs	r2, #0
 8009932:	2180      	movs	r1, #128	; 0x80
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fe4a 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e04d      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009948:	b29b      	uxth	r3, r3
 800994a:	2bff      	cmp	r3, #255	; 0xff
 800994c:	d90e      	bls.n	800996c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	22ff      	movs	r2, #255	; 0xff
 8009952:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009958:	b2da      	uxtb	r2, r3
 800995a:	8979      	ldrh	r1, [r7, #10]
 800995c:	2300      	movs	r3, #0
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 ffdb 	bl	800a920 <I2C_TransferConfig>
 800996a:	e00f      	b.n	800998c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009970:	b29a      	uxth	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997a:	b2da      	uxtb	r2, r3
 800997c:	8979      	ldrh	r1, [r7, #10]
 800997e:	2300      	movs	r3, #0
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 ffca 	bl	800a920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009990:	b29b      	uxth	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d19a      	bne.n	80098cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 fe97 	bl	800a6ce <I2C_WaitOnSTOPFlagUntilTimeout>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e01a      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2220      	movs	r2, #32
 80099b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6859      	ldr	r1, [r3, #4]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <HAL_I2C_Mem_Read+0x230>)
 80099be:	400b      	ands	r3, r1
 80099c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	e000      	b.n	80099e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80099de:	2302      	movs	r3, #2
  }
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	80002400 	.word	0x80002400
 80099ec:	fe00e800 	.word	0xfe00e800

080099f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	4798      	blx	r3
  }
}
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	0a1b      	lsrs	r3, r3, #8
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d010      	beq.n	8009a6a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	09db      	lsrs	r3, r3, #7
 8009a4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00a      	beq.n	8009a6a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a58:	f043 0201 	orr.w	r2, r3, #1
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	0a9b      	lsrs	r3, r3, #10
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d010      	beq.n	8009a98 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	09db      	lsrs	r3, r3, #7
 8009a7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00a      	beq.n	8009a98 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a86:	f043 0208 	orr.w	r2, r3, #8
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a96:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	0a5b      	lsrs	r3, r3, #9
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d010      	beq.n	8009ac6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	09db      	lsrs	r3, r3, #7
 8009aa8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab4:	f043 0202 	orr.w	r2, r3, #2
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ac4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f003 030b 	and.w	r3, r3, #11
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc3f 	bl	800a35c <I2C_ITError>
  }
}
 8009ade:	bf00      	nop
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009aee:	bf00      	nop
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009b02:	bf00      	nop
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b083      	sub	sp, #12
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70fb      	strb	r3, [r7, #3]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b083      	sub	sp, #12
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b74:	b2db      	uxtb	r3, r3
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b086      	sub	sp, #24
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d101      	bne.n	8009ba6 <I2C_Slave_ISR_IT+0x24>
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	e0ec      	b.n	8009d80 <I2C_Slave_ISR_IT+0x1fe>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	095b      	lsrs	r3, r3, #5
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d009      	beq.n	8009bce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009bc6:	6939      	ldr	r1, [r7, #16]
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 fa67 	bl	800a09c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	091b      	lsrs	r3, r3, #4
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d04d      	beq.n	8009c76 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	091b      	lsrs	r3, r3, #4
 8009bde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d047      	beq.n	8009c76 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d128      	bne.n	8009c42 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b28      	cmp	r3, #40	; 0x28
 8009bfa:	d108      	bne.n	8009c0e <I2C_Slave_ISR_IT+0x8c>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c02:	d104      	bne.n	8009c0e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009c04:	6939      	ldr	r1, [r7, #16]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 fb52 	bl	800a2b0 <I2C_ITListenCplt>
 8009c0c:	e032      	b.n	8009c74 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b29      	cmp	r3, #41	; 0x29
 8009c18:	d10e      	bne.n	8009c38 <I2C_Slave_ISR_IT+0xb6>
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c20:	d00a      	beq.n	8009c38 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2210      	movs	r2, #16
 8009c28:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 fc8d 	bl	800a54a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f9d5 	bl	8009fe0 <I2C_ITSlaveSeqCplt>
 8009c36:	e01d      	b.n	8009c74 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009c40:	e096      	b.n	8009d70 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2210      	movs	r2, #16
 8009c48:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4e:	f043 0204 	orr.w	r2, r3, #4
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d004      	beq.n	8009c66 <I2C_Slave_ISR_IT+0xe4>
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c62:	f040 8085 	bne.w	8009d70 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 fb75 	bl	800a35c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009c72:	e07d      	b.n	8009d70 <I2C_Slave_ISR_IT+0x1ee>
 8009c74:	e07c      	b.n	8009d70 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	089b      	lsrs	r3, r3, #2
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d030      	beq.n	8009ce4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	089b      	lsrs	r3, r3, #2
 8009c86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02a      	beq.n	8009ce4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d018      	beq.n	8009cca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	b2d2      	uxtb	r2, r2
 8009ca4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d14f      	bne.n	8009d74 <I2C_Slave_ISR_IT+0x1f2>
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cda:	d04b      	beq.n	8009d74 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 f97f 	bl	8009fe0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009ce2:	e047      	b.n	8009d74 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	08db      	lsrs	r3, r3, #3
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00a      	beq.n	8009d06 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	08db      	lsrs	r3, r3, #3
 8009cf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d004      	beq.n	8009d06 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009cfc:	6939      	ldr	r1, [r7, #16]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f8ea 	bl	8009ed8 <I2C_ITAddrCplt>
 8009d04:	e037      	b.n	8009d76 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	085b      	lsrs	r3, r3, #1
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d031      	beq.n	8009d76 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	085b      	lsrs	r3, r3, #1
 8009d16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d02b      	beq.n	8009d76 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d018      	beq.n	8009d5a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	781a      	ldrb	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	3b01      	subs	r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	851a      	strh	r2, [r3, #40]	; 0x28
 8009d58:	e00d      	b.n	8009d76 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d60:	d002      	beq.n	8009d68 <I2C_Slave_ISR_IT+0x1e6>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f939 	bl	8009fe0 <I2C_ITSlaveSeqCplt>
 8009d6e:	e002      	b.n	8009d76 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009d70:	bf00      	nop
 8009d72:	e000      	b.n	8009d76 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009d74:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	4608      	mov	r0, r1
 8009d92:	4611      	mov	r1, r2
 8009d94:	461a      	mov	r2, r3
 8009d96:	4603      	mov	r3, r0
 8009d98:	817b      	strh	r3, [r7, #10]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	813b      	strh	r3, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009da2:	88fb      	ldrh	r3, [r7, #6]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	8979      	ldrh	r1, [r7, #10]
 8009da8:	4b20      	ldr	r3, [pc, #128]	; (8009e2c <I2C_RequestMemoryWrite+0xa4>)
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fdb5 	bl	800a920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009db6:	69fa      	ldr	r2, [r7, #28]
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fc47 	bl	800a64e <I2C_WaitOnTXISFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e02c      	b.n	8009e24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d105      	bne.n	8009ddc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dd0:	893b      	ldrh	r3, [r7, #8]
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	629a      	str	r2, [r3, #40]	; 0x28
 8009dda:	e015      	b.n	8009e08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ddc:	893b      	ldrh	r3, [r7, #8]
 8009dde:	0a1b      	lsrs	r3, r3, #8
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dea:	69fa      	ldr	r2, [r7, #28]
 8009dec:	69b9      	ldr	r1, [r7, #24]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 fc2d 	bl	800a64e <I2C_WaitOnTXISFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e012      	b.n	8009e24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2180      	movs	r1, #128	; 0x80
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fbdb 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	80002000 	.word	0x80002000

08009e30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	4608      	mov	r0, r1
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	817b      	strh	r3, [r7, #10]
 8009e42:	460b      	mov	r3, r1
 8009e44:	813b      	strh	r3, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e4a:	88fb      	ldrh	r3, [r7, #6]
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	8979      	ldrh	r1, [r7, #10]
 8009e50:	4b20      	ldr	r3, [pc, #128]	; (8009ed4 <I2C_RequestMemoryRead+0xa4>)
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 fd62 	bl	800a920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e5c:	69fa      	ldr	r2, [r7, #28]
 8009e5e:	69b9      	ldr	r1, [r7, #24]
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 fbf4 	bl	800a64e <I2C_WaitOnTXISFlagUntilTimeout>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e02c      	b.n	8009eca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e70:	88fb      	ldrh	r3, [r7, #6]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d105      	bne.n	8009e82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e76:	893b      	ldrh	r3, [r7, #8]
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8009e80:	e015      	b.n	8009eae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e82:	893b      	ldrh	r3, [r7, #8]
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	69b9      	ldr	r1, [r7, #24]
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 fbda 	bl	800a64e <I2C_WaitOnTXISFlagUntilTimeout>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e012      	b.n	8009eca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ea4:	893b      	ldrh	r3, [r7, #8]
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2140      	movs	r1, #64	; 0x40
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 fb88 	bl	800a5ce <I2C_WaitOnFlagUntilTimeout>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	80002000 	.word	0x80002000

08009ed8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009eee:	2b28      	cmp	r3, #40	; 0x28
 8009ef0:	d16a      	bne.n	8009fc8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	0c1b      	lsrs	r3, r3, #16
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	0c1b      	lsrs	r3, r3, #16
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009f10:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f1e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009f2c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d138      	bne.n	8009fa8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009f36:	897b      	ldrh	r3, [r7, #10]
 8009f38:	09db      	lsrs	r3, r3, #7
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	89bb      	ldrh	r3, [r7, #12]
 8009f3e:	4053      	eors	r3, r2
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	f003 0306 	and.w	r3, r3, #6
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d11c      	bne.n	8009f84 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009f4a:	897b      	ldrh	r3, [r7, #10]
 8009f4c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d13b      	bne.n	8009fd8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009f76:	89ba      	ldrh	r2, [r7, #12]
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff fdc6 	bl	8009b0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009f82:	e029      	b.n	8009fd8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009f84:	893b      	ldrh	r3, [r7, #8]
 8009f86:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fcf9 	bl	800a984 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009f9a:	89ba      	ldrh	r2, [r7, #12]
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff fdb4 	bl	8009b0e <HAL_I2C_AddrCallback>
}
 8009fa6:	e017      	b.n	8009fd8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fce9 	bl	800a984 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009fba:	89ba      	ldrh	r2, [r7, #12]
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff fda4 	bl	8009b0e <HAL_I2C_AddrCallback>
}
 8009fc6:	e007      	b.n	8009fd8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2208      	movs	r2, #8
 8009fce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009fd8:	bf00      	nop
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	0b9b      	lsrs	r3, r3, #14
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b00      	cmp	r3, #0
 800a002:	d008      	beq.n	800a016 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	e00d      	b.n	800a032 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	0bdb      	lsrs	r3, r3, #15
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a030:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b29      	cmp	r3, #41	; 0x29
 800a03c:	d112      	bne.n	800a064 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2228      	movs	r2, #40	; 0x28
 800a042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2221      	movs	r2, #33	; 0x21
 800a04a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a04c:	2101      	movs	r1, #1
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fc98 	bl	800a984 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff fd42 	bl	8009ae6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a062:	e017      	b.n	800a094 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b2a      	cmp	r3, #42	; 0x2a
 800a06e:	d111      	bne.n	800a094 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2228      	movs	r2, #40	; 0x28
 800a074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2222      	movs	r2, #34	; 0x22
 800a07c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a07e:	2102      	movs	r1, #2
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fc7f 	bl	800a984 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7ff fd33 	bl	8009afa <HAL_I2C_SlaveRxCpltCallback>
}
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0b8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	2b21      	cmp	r3, #33	; 0x21
 800a0c6:	d002      	beq.n	800a0ce <I2C_ITSlaveCplt+0x32>
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b29      	cmp	r3, #41	; 0x29
 800a0cc:	d108      	bne.n	800a0e0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a0ce:	f248 0101 	movw	r1, #32769	; 0x8001
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fc56 	bl	800a984 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2221      	movs	r2, #33	; 0x21
 800a0dc:	631a      	str	r2, [r3, #48]	; 0x30
 800a0de:	e00d      	b.n	800a0fc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b22      	cmp	r3, #34	; 0x22
 800a0e4:	d002      	beq.n	800a0ec <I2C_ITSlaveCplt+0x50>
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ea:	d107      	bne.n	800a0fc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a0ec:	f248 0102 	movw	r1, #32770	; 0x8002
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fc47 	bl	800a984 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2222      	movs	r2, #34	; 0x22
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a10a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6859      	ldr	r1, [r3, #4]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	4b64      	ldr	r3, [pc, #400]	; (800a2a8 <I2C_ITSlaveCplt+0x20c>)
 800a118:	400b      	ands	r3, r1
 800a11a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa14 	bl	800a54a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	0b9b      	lsrs	r3, r3, #14
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d013      	beq.n	800a156 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a13c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	d020      	beq.n	800a188 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b29a      	uxth	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a154:	e018      	b.n	800a188 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	0bdb      	lsrs	r3, r3, #15
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d012      	beq.n	800a188 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a170:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a176:	2b00      	cmp	r3, #0
 800a178:	d006      	beq.n	800a188 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	089b      	lsrs	r3, r3, #2
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d020      	beq.n	800a1d6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f023 0304 	bic.w	r3, r3, #4
 800a19a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00c      	beq.n	800a1d6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e4:	f043 0204 	orr.w	r2, r3, #4
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d010      	beq.n	800a224 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f8a7 	bl	800a35c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b28      	cmp	r3, #40	; 0x28
 800a218:	d141      	bne.n	800a29e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a21a:	6979      	ldr	r1, [r7, #20]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f847 	bl	800a2b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a222:	e03c      	b.n	800a29e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a22c:	d014      	beq.n	800a258 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff fed6 	bl	8009fe0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a1d      	ldr	r2, [pc, #116]	; (800a2ac <I2C_ITSlaveCplt+0x210>)
 800a238:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fc6a 	bl	8009b2a <HAL_I2C_ListenCpltCallback>
}
 800a256:	e022      	b.n	800a29e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b22      	cmp	r3, #34	; 0x22
 800a262:	d10e      	bne.n	800a282 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fc3d 	bl	8009afa <HAL_I2C_SlaveRxCpltCallback>
}
 800a280:	e00d      	b.n	800a29e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2220      	movs	r2, #32
 800a286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fc24 	bl	8009ae6 <HAL_I2C_SlaveTxCpltCallback>
}
 800a29e:	bf00      	nop
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	fe00e800 	.word	0xfe00e800
 800a2ac:	ffff0000 	.word	0xffff0000

0800a2b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a26      	ldr	r2, [pc, #152]	; (800a358 <I2C_ITListenCplt+0xa8>)
 800a2be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	089b      	lsrs	r3, r3, #2
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d022      	beq.n	800a32e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a304:	2b00      	cmp	r3, #0
 800a306:	d012      	beq.n	800a32e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a30c:	3b01      	subs	r3, #1
 800a30e:	b29a      	uxth	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a318:	b29b      	uxth	r3, r3
 800a31a:	3b01      	subs	r3, #1
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a326:	f043 0204 	orr.w	r2, r3, #4
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a32e:	f248 0103 	movw	r1, #32771	; 0x8003
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fb26 	bl	800a984 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2210      	movs	r2, #16
 800a33e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff fbee 	bl	8009b2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	ffff0000 	.word	0xffff0000

0800a35c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a36c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a5d      	ldr	r2, [pc, #372]	; (800a4f0 <I2C_ITError+0x194>)
 800a37a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	2b28      	cmp	r3, #40	; 0x28
 800a392:	d005      	beq.n	800a3a0 <I2C_ITError+0x44>
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	2b29      	cmp	r3, #41	; 0x29
 800a398:	d002      	beq.n	800a3a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	2b2a      	cmp	r3, #42	; 0x2a
 800a39e:	d10b      	bne.n	800a3b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a3a0:	2103      	movs	r1, #3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 faee 	bl	800a984 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2228      	movs	r2, #40	; 0x28
 800a3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a50      	ldr	r2, [pc, #320]	; (800a4f4 <I2C_ITError+0x198>)
 800a3b4:	635a      	str	r2, [r3, #52]	; 0x34
 800a3b6:	e011      	b.n	800a3dc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a3b8:	f248 0103 	movw	r1, #32771	; 0x8003
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fae1 	bl	800a984 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b60      	cmp	r3, #96	; 0x60
 800a3cc:	d003      	beq.n	800a3d6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d039      	beq.n	800a45e <I2C_ITError+0x102>
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b11      	cmp	r3, #17
 800a3ee:	d002      	beq.n	800a3f6 <I2C_ITError+0x9a>
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b21      	cmp	r3, #33	; 0x21
 800a3f4:	d133      	bne.n	800a45e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a404:	d107      	bne.n	800a416 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a414:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fe fcd4 	bl	8008dc8 <HAL_DMA_GetState>
 800a420:	4603      	mov	r3, r0
 800a422:	2b01      	cmp	r3, #1
 800a424:	d017      	beq.n	800a456 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42a:	4a33      	ldr	r2, [pc, #204]	; (800a4f8 <I2C_ITError+0x19c>)
 800a42c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe fbae 	bl	8008b9c <HAL_DMA_Abort_IT>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d04d      	beq.n	800a4e2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a454:	e045      	b.n	800a4e2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f850 	bl	800a4fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a45c:	e041      	b.n	800a4e2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a462:	2b00      	cmp	r3, #0
 800a464:	d039      	beq.n	800a4da <I2C_ITError+0x17e>
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b12      	cmp	r3, #18
 800a46a:	d002      	beq.n	800a472 <I2C_ITError+0x116>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b22      	cmp	r3, #34	; 0x22
 800a470:	d133      	bne.n	800a4da <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a47c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a480:	d107      	bne.n	800a492 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a490:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fc96 	bl	8008dc8 <HAL_DMA_GetState>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d017      	beq.n	800a4d2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	4a14      	ldr	r2, [pc, #80]	; (800a4f8 <I2C_ITError+0x19c>)
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fb70 	bl	8008b9c <HAL_DMA_Abort_IT>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d011      	beq.n	800a4e6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a4d0:	e009      	b.n	800a4e6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f812 	bl	800a4fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a4d8:	e005      	b.n	800a4e6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f80e 	bl	800a4fc <I2C_TreatErrorCallback>
  }
}
 800a4e0:	e002      	b.n	800a4e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a4e2:	bf00      	nop
 800a4e4:	e000      	b.n	800a4e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a4e6:	bf00      	nop
}
 800a4e8:	bf00      	nop
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	ffff0000 	.word	0xffff0000
 800a4f4:	08009b83 	.word	0x08009b83
 800a4f8:	0800a593 	.word	0x0800a593

0800a4fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b60      	cmp	r3, #96	; 0x60
 800a50e:	d10e      	bne.n	800a52e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff fb13 	bl	8009b52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a52c:	e009      	b.n	800a542 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff fafe 	bl	8009b3e <HAL_I2C_ErrorCallback>
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d103      	bne.n	800a568 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2200      	movs	r2, #0
 800a566:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b01      	cmp	r3, #1
 800a574:	d007      	beq.n	800a586 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	699a      	ldr	r2, [r3, #24]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0201 	orr.w	r2, r2, #1
 800a584:	619a      	str	r2, [r3, #24]
  }
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5bc:	2200      	movs	r2, #0
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f7ff ff9b 	bl	800a4fc <I2C_TreatErrorCallback>
}
 800a5c6:	bf00      	nop
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	603b      	str	r3, [r7, #0]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5de:	e022      	b.n	800a626 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d01e      	beq.n	800a626 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e8:	f7fb ff1c 	bl	8006424 <HAL_GetTick>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d302      	bcc.n	800a5fe <I2C_WaitOnFlagUntilTimeout+0x30>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d113      	bne.n	800a626 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a602:	f043 0220 	orr.w	r2, r3, #32
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e00f      	b.n	800a646 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	699a      	ldr	r2, [r3, #24]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4013      	ands	r3, r2
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	429a      	cmp	r2, r3
 800a634:	bf0c      	ite	eq
 800a636:	2301      	moveq	r3, #1
 800a638:	2300      	movne	r3, #0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	429a      	cmp	r2, r3
 800a642:	d0cd      	beq.n	800a5e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a65a:	e02c      	b.n	800a6b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 f871 	bl	800a748 <I2C_IsErrorOccurred>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e02a      	b.n	800a6c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a676:	d01e      	beq.n	800a6b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a678:	f7fb fed4 	bl	8006424 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	429a      	cmp	r2, r3
 800a686:	d302      	bcc.n	800a68e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d113      	bne.n	800a6b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a692:	f043 0220 	orr.w	r2, r3, #32
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2220      	movs	r2, #32
 800a69e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e007      	b.n	800a6c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	f003 0302 	and.w	r3, r3, #2
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d1cb      	bne.n	800a65c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6da:	e028      	b.n	800a72e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f831 	bl	800a748 <I2C_IsErrorOccurred>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e026      	b.n	800a73e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f0:	f7fb fe98 	bl	8006424 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d302      	bcc.n	800a706 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d113      	bne.n	800a72e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70a:	f043 0220 	orr.w	r2, r3, #32
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e007      	b.n	800a73e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	f003 0320 	and.w	r3, r3, #32
 800a738:	2b20      	cmp	r3, #32
 800a73a:	d1cf      	bne.n	800a6dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08a      	sub	sp, #40	; 0x28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	f003 0310 	and.w	r3, r3, #16
 800a770:	2b00      	cmp	r3, #0
 800a772:	d075      	beq.n	800a860 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2210      	movs	r2, #16
 800a77a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a77c:	e056      	b.n	800a82c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d052      	beq.n	800a82c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a786:	f7fb fe4d 	bl	8006424 <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d302      	bcc.n	800a79c <I2C_IsErrorOccurred+0x54>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d147      	bne.n	800a82c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7be:	d12e      	bne.n	800a81e <I2C_IsErrorOccurred+0xd6>
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7c6:	d02a      	beq.n	800a81e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a7c8:	7cfb      	ldrb	r3, [r7, #19]
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	d027      	beq.n	800a81e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a7de:	f7fb fe21 	bl	8006424 <HAL_GetTick>
 800a7e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7e4:	e01b      	b.n	800a81e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a7e6:	f7fb fe1d 	bl	8006424 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b19      	cmp	r3, #25
 800a7f2:	d914      	bls.n	800a81e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f8:	f043 0220 	orr.w	r2, r3, #32
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	f003 0320 	and.w	r3, r3, #32
 800a828:	2b20      	cmp	r3, #32
 800a82a:	d1dc      	bne.n	800a7e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b20      	cmp	r3, #32
 800a838:	d003      	beq.n	800a842 <I2C_IsErrorOccurred+0xfa>
 800a83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d09d      	beq.n	800a77e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a846:	2b00      	cmp	r3, #0
 800a848:	d103      	bne.n	800a852 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2220      	movs	r2, #32
 800a850:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a852:	6a3b      	ldr	r3, [r7, #32]
 800a854:	f043 0304 	orr.w	r3, r3, #4
 800a858:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00b      	beq.n	800a88a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	f043 0301 	orr.w	r3, r3, #1
 800a878:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	f043 0308 	orr.w	r3, r3, #8
 800a89a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a8a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00b      	beq.n	800a8ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	f043 0302 	orr.w	r3, r3, #2
 800a8bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a8ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d01c      	beq.n	800a910 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f7ff fe37 	bl	800a54a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6859      	ldr	r1, [r3, #4]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	; (800a91c <I2C_IsErrorOccurred+0x1d4>)
 800a8e8:	400b      	ands	r3, r1
 800a8ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a914:	4618      	mov	r0, r3
 800a916:	3728      	adds	r7, #40	; 0x28
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	fe00e800 	.word	0xfe00e800

0800a920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	460b      	mov	r3, r1
 800a92c:	817b      	strh	r3, [r7, #10]
 800a92e:	4613      	mov	r3, r2
 800a930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a932:	897b      	ldrh	r3, [r7, #10]
 800a934:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a938:	7a7b      	ldrb	r3, [r7, #9]
 800a93a:	041b      	lsls	r3, r3, #16
 800a93c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a940:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	4313      	orrs	r3, r2
 800a94a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a94e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	0d5b      	lsrs	r3, r3, #21
 800a95a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a95e:	4b08      	ldr	r3, [pc, #32]	; (800a980 <I2C_TransferConfig+0x60>)
 800a960:	430b      	orrs	r3, r1
 800a962:	43db      	mvns	r3, r3
 800a964:	ea02 0103 	and.w	r1, r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	430a      	orrs	r2, r1
 800a970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a972:	bf00      	nop
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	03ff63ff 	.word	0x03ff63ff

0800a984 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a994:	887b      	ldrh	r3, [r7, #2]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00f      	beq.n	800a9be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a9a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a9b2:	2b28      	cmp	r3, #40	; 0x28
 800a9b4:	d003      	beq.n	800a9be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a9bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a9be:	887b      	ldrh	r3, [r7, #2]
 800a9c0:	f003 0302 	and.w	r3, r3, #2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00f      	beq.n	800a9e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a9ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a9dc:	2b28      	cmp	r3, #40	; 0x28
 800a9de:	d003      	beq.n	800a9e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a9e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a9e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	da03      	bge.n	800a9f8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a9f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a9f8:	887b      	ldrh	r3, [r7, #2]
 800a9fa:	2b10      	cmp	r3, #16
 800a9fc:	d103      	bne.n	800aa06 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800aa04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aa06:	887b      	ldrh	r3, [r7, #2]
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d103      	bne.n	800aa14 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f043 0320 	orr.w	r3, r3, #32
 800aa12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800aa14:	887b      	ldrh	r3, [r7, #2]
 800aa16:	2b40      	cmp	r3, #64	; 0x40
 800aa18:	d103      	bne.n	800aa22 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa20:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6819      	ldr	r1, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	43da      	mvns	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	400a      	ands	r2, r1
 800aa32:	601a      	str	r2, [r3, #0]
}
 800aa34:	bf00      	nop
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b20      	cmp	r3, #32
 800aa54:	d138      	bne.n	800aac8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d101      	bne.n	800aa64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa60:	2302      	movs	r3, #2
 800aa62:	e032      	b.n	800aaca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2224      	movs	r2, #36	; 0x24
 800aa70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6819      	ldr	r1, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f042 0201 	orr.w	r2, r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	e000      	b.n	800aaca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aac8:	2302      	movs	r3, #2
  }
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b20      	cmp	r3, #32
 800aaea:	d139      	bne.n	800ab60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e033      	b.n	800ab62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2224      	movs	r2, #36	; 0x24
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f022 0201 	bic.w	r2, r2, #1
 800ab18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ab28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2220      	movs	r2, #32
 800ab50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	e000      	b.n	800ab62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab60:	2302      	movs	r3, #2
  }
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
	...

0800ab70 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e0bb      	b.n	800acfe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b05      	cmp	r3, #5
 800ab90:	d101      	bne.n	800ab96 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e0b3      	b.n	800acfe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d101      	bne.n	800aba6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e0ab      	b.n	800acfe <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aba6:	4b58      	ldr	r3, [pc, #352]	; (800ad08 <HAL_OPAMP_Init+0x198>)
 800aba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abaa:	4a57      	ldr	r2, [pc, #348]	; (800ad08 <HAL_OPAMP_Init+0x198>)
 800abac:	f043 0301 	orr.w	r3, r3, #1
 800abb0:	6613      	str	r3, [r2, #96]	; 0x60
 800abb2:	4b55      	ldr	r3, [pc, #340]	; (800ad08 <HAL_OPAMP_Init+0x198>)
 800abb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	60bb      	str	r3, [r7, #8]
 800abbc:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7fa feb4 	bl	8005940 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	2b40      	cmp	r3, #64	; 0x40
 800abde:	d003      	beq.n	800abe8 <HAL_OPAMP_Init+0x78>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	2b60      	cmp	r3, #96	; 0x60
 800abe6:	d133      	bne.n	800ac50 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f023 0110 	bic.w	r1, r3, #16
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	4b41      	ldr	r3, [pc, #260]	; (800ad0c <HAL_OPAMP_Init+0x19c>)
 800ac06:	4013      	ands	r3, r2
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6851      	ldr	r1, [r2, #4]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	6892      	ldr	r2, [r2, #8]
 800ac10:	4311      	orrs	r1, r2
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6912      	ldr	r2, [r2, #16]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	7d09      	ldrb	r1, [r1, #20]
 800ac1c:	2901      	cmp	r1, #1
 800ac1e:	d102      	bne.n	800ac26 <HAL_OPAMP_Init+0xb6>
 800ac20:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac24:	e000      	b.n	800ac28 <HAL_OPAMP_Init+0xb8>
 800ac26:	2100      	movs	r1, #0
 800ac28:	4311      	orrs	r1, r2
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac2e:	4311      	orrs	r1, r2
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ac34:	4311      	orrs	r1, r2
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac3a:	04d2      	lsls	r2, r2, #19
 800ac3c:	4311      	orrs	r1, r2
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac42:	0612      	lsls	r2, r2, #24
 800ac44:	4311      	orrs	r1, r2
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6812      	ldr	r2, [r2, #0]
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	e035      	b.n	800acbc <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f023 0110 	bic.w	r1, r3, #16
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	430a      	orrs	r2, r1
 800ac64:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <HAL_OPAMP_Init+0x19c>)
 800ac6e:	4013      	ands	r3, r2
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6851      	ldr	r1, [r2, #4]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6892      	ldr	r2, [r2, #8]
 800ac78:	4311      	orrs	r1, r2
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	68d2      	ldr	r2, [r2, #12]
 800ac7e:	4311      	orrs	r1, r2
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	6912      	ldr	r2, [r2, #16]
 800ac84:	430a      	orrs	r2, r1
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	7d09      	ldrb	r1, [r1, #20]
 800ac8a:	2901      	cmp	r1, #1
 800ac8c:	d102      	bne.n	800ac94 <HAL_OPAMP_Init+0x124>
 800ac8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac92:	e000      	b.n	800ac96 <HAL_OPAMP_Init+0x126>
 800ac94:	2100      	movs	r1, #0
 800ac96:	4311      	orrs	r1, r2
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac9c:	4311      	orrs	r1, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aca2:	4311      	orrs	r1, r2
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aca8:	04d2      	lsls	r2, r2, #19
 800acaa:	4311      	orrs	r1, r2
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800acb0:	0612      	lsls	r2, r2, #24
 800acb2:	4311      	orrs	r1, r2
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6812      	ldr	r2, [r2, #0]
 800acb8:	430b      	orrs	r3, r1
 800acba:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	db10      	blt.n	800ace8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	699a      	ldr	r2, [r3, #24]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	431a      	orrs	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	430a      	orrs	r2, r1
 800ace6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d103      	bne.n	800acfc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	40021000 	.word	0x40021000
 800ad0c:	e0003e11 	.word	0xe0003e11

0800ad10 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	73fb      	strb	r3, [r7, #15]
 800ad26:	e01d      	b.n	800ad64 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b05      	cmp	r3, #5
 800ad32:	d102      	bne.n	800ad3a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	73fb      	strb	r3, [r7, #15]
 800ad38:	e014      	b.n	800ad64 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d10c      	bne.n	800ad60 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f042 0201 	orr.w	r2, r2, #1
 800ad54:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2204      	movs	r2, #4
 800ad5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ad5e:	e001      	b.n	800ad64 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	75fb      	strb	r3, [r7, #23]
 800ad88:	e113      	b.n	800afb2 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b05      	cmp	r3, #5
 800ad94:	d102      	bne.n	800ad9c <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	75fb      	strb	r3, [r7, #23]
 800ad9a:	e10a      	b.n	800afb2 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	f040 8102 	bne.w	800afae <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f042 0202 	orr.w	r2, r2, #2
 800adb8:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f042 0210 	orr.w	r2, r2, #16
 800adc8:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800add8:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800ade8:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f042 0201 	orr.w	r2, r2, #1
 800adf8:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 800adfa:	2310      	movs	r3, #16
 800adfc:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 800adfe:	2308      	movs	r3, #8
 800ae00:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800ae02:	e020      	b.n	800ae46 <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	061a      	lsls	r2, r3, #24
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800ae1a:	2002      	movs	r0, #2
 800ae1c:	f7fb fb0e 	bl	800643c <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d004      	beq.n	800ae38 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4413      	add	r3, r2
 800ae34:	613b      	str	r3, [r7, #16]
 800ae36:	e003      	b.n	800ae40 <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	085b      	lsrs	r3, r3, #1
 800ae44:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1db      	bne.n	800ae04 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	061a      	lsls	r2, r3, #24
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800ae62:	2002      	movs	r0, #2
 800ae64:	f7fb faea 	bl	800643c <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00d      	beq.n	800ae92 <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	061a      	lsls	r2, r3, #24
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aea4:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 800aea6:	2310      	movs	r3, #16
 800aea8:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 800aeaa:	2308      	movs	r3, #8
 800aeac:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800aeae:	e020      	b.n	800aef2 <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	04da      	lsls	r2, r3, #19
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800aec6:	2002      	movs	r0, #2
 800aec8:	f7fb fab8 	bl	800643c <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d004      	beq.n	800aee4 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	4413      	add	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e003      	b.n	800aeec <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	085b      	lsrs	r3, r3, #1
 800aef0:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1db      	bne.n	800aeb0 <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	04da      	lsls	r2, r3, #19
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800af0e:	2002      	movs	r0, #2
 800af10:	f7fb fa94 	bl	800643c <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00d      	beq.n	800af3e <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	04da      	lsls	r2, r3, #19
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af4c:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f022 0201 	bic.w	r2, r2, #1
 800af5c:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f022 0202 	bic.w	r2, r2, #2
 800af6c:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2210      	movs	r2, #16
 800af7e:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	04da      	lsls	r2, r3, #19
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	430a      	orrs	r2, r1
 800af94:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	061a      	lsls	r2, r3, #24
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	e001      	b.n	800afb2 <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800afb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afbe:	b08b      	sub	sp, #44	; 0x2c
 800afc0:	af06      	add	r7, sp, #24
 800afc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e0d7      	b.n	800b17e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d106      	bne.n	800afe8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f009 fe18 	bl	8014c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2203      	movs	r2, #3
 800afec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f005 fcd4 	bl	80109a2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]
 800affe:	e04c      	b.n	800b09a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	4613      	mov	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	440b      	add	r3, r1
 800b010:	3301      	adds	r3, #1
 800b012:	2201      	movs	r2, #1
 800b014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b016:	7bfb      	ldrb	r3, [r7, #15]
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	440b      	add	r3, r1
 800b026:	7bfa      	ldrb	r2, [r7, #15]
 800b028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b02a:	7bfa      	ldrb	r2, [r7, #15]
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	b298      	uxth	r0, r3
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	440b      	add	r3, r1
 800b03c:	3336      	adds	r3, #54	; 0x36
 800b03e:	4602      	mov	r2, r0
 800b040:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	440b      	add	r3, r1
 800b052:	3303      	adds	r3, #3
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b058:	7bfa      	ldrb	r2, [r7, #15]
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	440b      	add	r3, r1
 800b066:	3338      	adds	r3, #56	; 0x38
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b06c:	7bfa      	ldrb	r2, [r7, #15]
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	440b      	add	r3, r1
 800b07a:	333c      	adds	r3, #60	; 0x3c
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b080:	7bfa      	ldrb	r2, [r7, #15]
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	4613      	mov	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	440b      	add	r3, r1
 800b08e:	3340      	adds	r3, #64	; 0x40
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	3301      	adds	r3, #1
 800b098:	73fb      	strb	r3, [r7, #15]
 800b09a:	7bfa      	ldrb	r2, [r7, #15]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d3ad      	bcc.n	800b000 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
 800b0a8:	e044      	b.n	800b134 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b0aa:	7bfa      	ldrb	r2, [r7, #15]
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	440b      	add	r3, r1
 800b0b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 800b0bc:	2200      	movs	r2, #0
 800b0be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b0c0:	7bfa      	ldrb	r2, [r7, #15]
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	00db      	lsls	r3, r3, #3
 800b0cc:	440b      	add	r3, r1
 800b0ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b0d2:	7bfa      	ldrb	r2, [r7, #15]
 800b0d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b0d6:	7bfa      	ldrb	r2, [r7, #15]
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	440b      	add	r3, r1
 800b0e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b0ec:	7bfa      	ldrb	r2, [r7, #15]
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	00db      	lsls	r3, r3, #3
 800b0f8:	440b      	add	r3, r1
 800b0fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b102:	7bfa      	ldrb	r2, [r7, #15]
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	00db      	lsls	r3, r3, #3
 800b10e:	440b      	add	r3, r1
 800b110:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b118:	7bfa      	ldrb	r2, [r7, #15]
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	440b      	add	r3, r1
 800b126:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	3301      	adds	r3, #1
 800b132:	73fb      	strb	r3, [r7, #15]
 800b134:	7bfa      	ldrb	r2, [r7, #15]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d3b5      	bcc.n	800b0aa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	603b      	str	r3, [r7, #0]
 800b144:	687e      	ldr	r6, [r7, #4]
 800b146:	466d      	mov	r5, sp
 800b148:	f106 0410 	add.w	r4, r6, #16
 800b14c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b14e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	1d33      	adds	r3, r6, #4
 800b156:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b158:	6838      	ldr	r0, [r7, #0]
 800b15a:	f005 fc3d 	bl	80109d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d102      	bne.n	800b17c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f001 fc29 	bl	800c9ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b186 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b194:	2b01      	cmp	r3, #1
 800b196:	d101      	bne.n	800b19c <HAL_PCD_Start+0x16>
 800b198:	2302      	movs	r3, #2
 800b19a:	e012      	b.n	800b1c2 <HAL_PCD_Start+0x3c>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f005 fbe3 	bl	8010974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f007 fdfc 	bl	8012db0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f007 fe01 	bl	8012dde <USB_ReadInterrupts>
 800b1dc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d003      	beq.n	800b1f0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fb26 	bl	800b83a <PCD_EP_ISR_Handler>

    return;
 800b1ee:	e110      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d013      	beq.n	800b222 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b202:	b29a      	uxth	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b20c:	b292      	uxth	r2, r2
 800b20e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f009 fd91 	bl	8014d3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b218:	2100      	movs	r1, #0
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f8fc 	bl	800b418 <HAL_PCD_SetAddress>

    return;
 800b220:	e0f7      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00c      	beq.n	800b246 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b23e:	b292      	uxth	r2, r2
 800b240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b244:	e0e5      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00c      	beq.n	800b26a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b258:	b29a      	uxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b262:	b292      	uxth	r2, r2
 800b264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b268:	e0d3      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d034      	beq.n	800b2de <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 0204 	bic.w	r2, r2, #4
 800b286:	b292      	uxth	r2, r2
 800b288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b294:	b29a      	uxth	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0208 	bic.w	r2, r2, #8
 800b29e:	b292      	uxth	r2, r2
 800b2a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d107      	bne.n	800b2be <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f009 ff33 	bl	8015124 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f009 fd74 	bl	8014dac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b2d6:	b292      	uxth	r2, r2
 800b2d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b2dc:	e099      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d027      	beq.n	800b338 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f042 0208 	orr.w	r2, r2, #8
 800b2fa:	b292      	uxth	r2, r2
 800b2fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b308:	b29a      	uxth	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b312:	b292      	uxth	r2, r2
 800b314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b320:	b29a      	uxth	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f042 0204 	orr.w	r2, r2, #4
 800b32a:	b292      	uxth	r2, r2
 800b32c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f009 fd21 	bl	8014d78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b336:	e06c      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d040      	beq.n	800b3c4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b354:	b292      	uxth	r2, r2
 800b356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d12b      	bne.n	800b3bc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f042 0204 	orr.w	r2, r2, #4
 800b376:	b292      	uxth	r2, r2
 800b378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f042 0208 	orr.w	r2, r2, #8
 800b38e:	b292      	uxth	r2, r2
 800b390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	089b      	lsrs	r3, r3, #2
 800b3a8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f009 feb5 	bl	8015124 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b3ba:	e02a      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f009 fcdb 	bl	8014d78 <HAL_PCD_SuspendCallback>
    return;
 800b3c2:	e026      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00f      	beq.n	800b3ee <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b3e0:	b292      	uxth	r2, r2
 800b3e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f009 fc99 	bl	8014d1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b3ec:	e011      	b.n	800b412 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00c      	beq.n	800b412 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b400:	b29a      	uxth	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b40a:	b292      	uxth	r2, r2
 800b40c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b410:	bf00      	nop
  }
}
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d101      	bne.n	800b432 <HAL_PCD_SetAddress+0x1a>
 800b42e:	2302      	movs	r3, #2
 800b430:	e013      	b.n	800b45a <HAL_PCD_SetAddress+0x42>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	78fa      	ldrb	r2, [r7, #3]
 800b43e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	78fa      	ldrb	r2, [r7, #3]
 800b448:	4611      	mov	r1, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f007 fc9c 	bl	8012d88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	4608      	mov	r0, r1
 800b46c:	4611      	mov	r1, r2
 800b46e:	461a      	mov	r2, r3
 800b470:	4603      	mov	r3, r0
 800b472:	70fb      	strb	r3, [r7, #3]
 800b474:	460b      	mov	r3, r1
 800b476:	803b      	strh	r3, [r7, #0]
 800b478:	4613      	mov	r3, r2
 800b47a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b484:	2b00      	cmp	r3, #0
 800b486:	da0e      	bge.n	800b4a6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b488:	78fb      	ldrb	r3, [r7, #3]
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	4613      	mov	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	00db      	lsls	r3, r3, #3
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	4413      	add	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	705a      	strb	r2, [r3, #1]
 800b4a4:	e00e      	b.n	800b4c4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	f003 0207 	and.w	r2, r3, #7
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	f003 0307 	and.w	r3, r3, #7
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b4d0:	883a      	ldrh	r2, [r7, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	78ba      	ldrb	r2, [r7, #2]
 800b4da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	785b      	ldrb	r3, [r3, #1]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d004      	beq.n	800b4ee <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b4ee:	78bb      	ldrb	r3, [r7, #2]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d102      	bne.n	800b4fa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <HAL_PCD_EP_Open+0xa6>
 800b504:	2302      	movs	r3, #2
 800b506:	e00e      	b.n	800b526 <HAL_PCD_EP_Open+0xc4>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68f9      	ldr	r1, [r7, #12]
 800b516:	4618      	mov	r0, r3
 800b518:	f005 fa80 	bl	8010a1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b524:	7afb      	ldrb	r3, [r7, #11]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	460b      	mov	r3, r1
 800b538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b53a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	da0e      	bge.n	800b560 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	f003 0307 	and.w	r3, r3, #7
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	00db      	lsls	r3, r3, #3
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	4413      	add	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2201      	movs	r2, #1
 800b55c:	705a      	strb	r2, [r3, #1]
 800b55e:	e00e      	b.n	800b57e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	f003 0207 	and.w	r2, r3, #7
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	00db      	lsls	r3, r3, #3
 800b56e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	4413      	add	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	b2da      	uxtb	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_PCD_EP_Close+0x6a>
 800b594:	2302      	movs	r3, #2
 800b596:	e00e      	b.n	800b5b6 <HAL_PCD_EP_Close+0x88>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68f9      	ldr	r1, [r7, #12]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f005 fdcc 	bl	8011144 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b086      	sub	sp, #24
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	60f8      	str	r0, [r7, #12]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5ce:	7afb      	ldrb	r3, [r7, #11]
 800b5d0:	f003 0207 	and.w	r2, r3, #7
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5fe:	7afb      	ldrb	r3, [r7, #11]
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	b2da      	uxtb	r2, r3
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b60a:	7afb      	ldrb	r3, [r7, #11]
 800b60c:	f003 0307 	and.w	r3, r3, #7
 800b610:	2b00      	cmp	r3, #0
 800b612:	d106      	bne.n	800b622 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6979      	ldr	r1, [r7, #20]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f005 ff7f 	bl	801151e <USB_EPStartXfer>
 800b620:	e005      	b.n	800b62e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6979      	ldr	r1, [r7, #20]
 800b628:	4618      	mov	r0, r3
 800b62a:	f005 ff78 	bl	801151e <USB_EPStartXfer>
  }

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	f003 0207 	and.w	r2, r3, #7
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	00db      	lsls	r3, r3, #3
 800b654:	440b      	add	r3, r1
 800b656:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b65a:	681b      	ldr	r3, [r3, #0]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	607a      	str	r2, [r7, #4]
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	460b      	mov	r3, r1
 800b676:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	f003 0307 	and.w	r3, r3, #7
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	4413      	add	r3, r2
 800b68c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6b4:	7afb      	ldrb	r3, [r7, #11]
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b6c0:	7afb      	ldrb	r3, [r7, #11]
 800b6c2:	f003 0307 	and.w	r3, r3, #7
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d106      	bne.n	800b6d8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6979      	ldr	r1, [r7, #20]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f005 ff24 	bl	801151e <USB_EPStartXfer>
 800b6d6:	e005      	b.n	800b6e4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6979      	ldr	r1, [r7, #20]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f005 ff1d 	bl	801151e <USB_EPStartXfer>
  }

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	f003 0207 	and.w	r2, r3, #7
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	429a      	cmp	r2, r3
 800b706:	d901      	bls.n	800b70c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e03e      	b.n	800b78a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b70c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b710:	2b00      	cmp	r3, #0
 800b712:	da0e      	bge.n	800b732 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b714:	78fb      	ldrb	r3, [r7, #3]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	4413      	add	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2201      	movs	r2, #1
 800b72e:	705a      	strb	r2, [r3, #1]
 800b730:	e00c      	b.n	800b74c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b732:	78fa      	ldrb	r2, [r7, #3]
 800b734:	4613      	mov	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	4413      	add	r3, r2
 800b744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2201      	movs	r2, #1
 800b750:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	f003 0307 	and.w	r3, r3, #7
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_PCD_EP_SetStall+0x7e>
 800b768:	2302      	movs	r3, #2
 800b76a:	e00e      	b.n	800b78a <HAL_PCD_EP_SetStall+0x9c>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68f9      	ldr	r1, [r7, #12]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f007 fa05 	bl	8012b8a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b79e:	78fb      	ldrb	r3, [r7, #3]
 800b7a0:	f003 020f 	and.w	r2, r3, #15
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d901      	bls.n	800b7b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e040      	b.n	800b832 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b7b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da0e      	bge.n	800b7d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7b8:	78fb      	ldrb	r3, [r7, #3]
 800b7ba:	f003 0307 	and.w	r3, r3, #7
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	705a      	strb	r2, [r3, #1]
 800b7d4:	e00e      	b.n	800b7f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	f003 0207 	and.w	r2, r3, #7
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7fa:	78fb      	ldrb	r3, [r7, #3]
 800b7fc:	f003 0307 	and.w	r3, r3, #7
 800b800:	b2da      	uxtb	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d101      	bne.n	800b814 <HAL_PCD_EP_ClrStall+0x82>
 800b810:	2302      	movs	r3, #2
 800b812:	e00e      	b.n	800b832 <HAL_PCD_EP_ClrStall+0xa0>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68f9      	ldr	r1, [r7, #12]
 800b822:	4618      	mov	r0, r3
 800b824:	f007 fa02 	bl	8012c2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b096      	sub	sp, #88	; 0x58
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b842:	e39c      	b.n	800bf7e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b84c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b850:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b854:	b2db      	uxtb	r3, r3
 800b856:	f003 030f 	and.w	r3, r3, #15
 800b85a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b85e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b862:	2b00      	cmp	r3, #0
 800b864:	f040 815e 	bne.w	800bb24 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b868:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b86c:	f003 0310 	and.w	r3, r3, #16
 800b870:	2b00      	cmp	r3, #0
 800b872:	d150      	bne.n	800b916 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	881b      	ldrh	r3, [r3, #0]
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b884:	81fb      	strh	r3, [r7, #14]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	89fb      	ldrh	r3, [r7, #14]
 800b88c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b894:	b29b      	uxth	r3, r3
 800b896:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3328      	adds	r3, #40	; 0x28
 800b89c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	00db      	lsls	r3, r3, #3
 800b8b0:	4413      	add	r3, r2
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	6812      	ldr	r2, [r2, #0]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8bc:	881b      	ldrh	r3, [r3, #0]
 800b8be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c8:	695a      	ldr	r2, [r3, #20]
 800b8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	441a      	add	r2, r3
 800b8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f009 fa07 	bl	8014cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 834a 	beq.w	800bf7e <PCD_EP_ISR_Handler+0x744>
 800b8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f040 8345 	bne.w	800bf7e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b900:	b2da      	uxtb	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	b292      	uxth	r2, r2
 800b908:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b914:	e333      	b.n	800bf7e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b91c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b928:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b92c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b930:	2b00      	cmp	r3, #0
 800b932:	d032      	beq.n	800b99a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	4413      	add	r3, r2
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	6812      	ldr	r2, [r2, #0]
 800b94c:	4413      	add	r3, r2
 800b94e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6818      	ldr	r0, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b968:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b96a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f007 fa87 	bl	8012e82 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b980:	4013      	ands	r3, r2
 800b982:	823b      	strh	r3, [r7, #16]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	8a3a      	ldrh	r2, [r7, #16]
 800b98a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b98e:	b292      	uxth	r2, r2
 800b990:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f009 f97c 	bl	8014c90 <HAL_PCD_SetupStageCallback>
 800b998:	e2f1      	b.n	800bf7e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b99a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f280 82ed 	bge.w	800bf7e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	83fb      	strh	r3, [r7, #30]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	8bfa      	ldrh	r2, [r7, #30]
 800b9ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9be:	b292      	uxth	r2, r2
 800b9c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	4413      	add	r3, r2
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	6812      	ldr	r2, [r2, #0]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9e0:	881b      	ldrh	r3, [r3, #0]
 800b9e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d019      	beq.n	800ba26 <PCD_EP_ISR_Handler+0x1ec>
 800b9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d015      	beq.n	800ba26 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba00:	6959      	ldr	r1, [r3, #20]
 800ba02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ba06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	f007 fa39 	bl	8012e82 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ba10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba12:	695a      	ldr	r2, [r3, #20]
 800ba14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	441a      	add	r2, r3
 800ba1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ba1e:	2100      	movs	r1, #0
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f009 f947 	bl	8014cb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	881b      	ldrh	r3, [r3, #0]
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f040 82a3 	bne.w	800bf7e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	61bb      	str	r3, [r7, #24]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	461a      	mov	r2, r3
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	61bb      	str	r3, [r7, #24]
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba56:	617b      	str	r3, [r7, #20]
 800ba58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	2b3e      	cmp	r3, #62	; 0x3e
 800ba5e:	d918      	bls.n	800ba92 <PCD_EP_ISR_Handler+0x258>
 800ba60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	095b      	lsrs	r3, r3, #5
 800ba66:	647b      	str	r3, [r7, #68]	; 0x44
 800ba68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	f003 031f 	and.w	r3, r3, #31
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <PCD_EP_ISR_Handler+0x240>
 800ba74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba76:	3b01      	subs	r3, #1
 800ba78:	647b      	str	r3, [r7, #68]	; 0x44
 800ba7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	029b      	lsls	r3, r3, #10
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	801a      	strh	r2, [r3, #0]
 800ba90:	e029      	b.n	800bae6 <PCD_EP_ISR_Handler+0x2ac>
 800ba92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d112      	bne.n	800bac0 <PCD_EP_ISR_Handler+0x286>
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	801a      	strh	r2, [r3, #0]
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bab8:	b29a      	uxth	r2, r3
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	801a      	strh	r2, [r3, #0]
 800babe:	e012      	b.n	800bae6 <PCD_EP_ISR_Handler+0x2ac>
 800bac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	085b      	lsrs	r3, r3, #1
 800bac6:	647b      	str	r3, [r7, #68]	; 0x44
 800bac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <PCD_EP_ISR_Handler+0x2a0>
 800bad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bad6:	3301      	adds	r3, #1
 800bad8:	647b      	str	r3, [r7, #68]	; 0x44
 800bada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800badc:	b29b      	uxth	r3, r3
 800bade:	029b      	lsls	r3, r3, #10
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	b29b      	uxth	r3, r3
 800baee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800baf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf6:	827b      	strh	r3, [r7, #18]
 800baf8:	8a7b      	ldrh	r3, [r7, #18]
 800bafa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bafe:	827b      	strh	r3, [r7, #18]
 800bb00:	8a7b      	ldrh	r3, [r7, #18]
 800bb02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bb06:	827b      	strh	r3, [r7, #18]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	8a7b      	ldrh	r3, [r7, #18]
 800bb0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	8013      	strh	r3, [r2, #0]
 800bb22:	e22c      	b.n	800bf7e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	461a      	mov	r2, r3
 800bb2a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	4413      	add	r3, r2
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bb38:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f280 80f6 	bge.w	800bd2e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bb58:	4013      	ands	r3, r2
 800bb5a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800bb70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb74:	b292      	uxth	r2, r2
 800bb76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800bb78:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800bb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb90:	7b1b      	ldrb	r3, [r3, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d123      	bne.n	800bbde <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	4413      	add	r3, r2
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	6812      	ldr	r2, [r2, #0]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800bbbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 808e 	beq.w	800bce4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbce:	6959      	ldr	r1, [r3, #20]
 800bbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd2:	88da      	ldrh	r2, [r3, #6]
 800bbd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bbd8:	f007 f953 	bl	8012e82 <USB_ReadPMA>
 800bbdc:	e082      	b.n	800bce4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe0:	78db      	ldrb	r3, [r3, #3]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d10a      	bne.n	800bbfc <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800bbe6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bbea:	461a      	mov	r2, r3
 800bbec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f9d3 	bl	800bf9a <HAL_PCD_EP_DB_Receive>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bbfa:	e073      	b.n	800bce4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	461a      	mov	r2, r3
 800bc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc16:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	441a      	add	r2, r3
 800bc28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bc2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d022      	beq.n	800bca0 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	461a      	mov	r2, r3
 800bc66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	6812      	ldr	r2, [r2, #0]
 800bc72:	4413      	add	r3, r2
 800bc74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800bc82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d02c      	beq.n	800bce4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc90:	6959      	ldr	r1, [r3, #20]
 800bc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc94:	891a      	ldrh	r2, [r3, #8]
 800bc96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bc9a:	f007 f8f2 	bl	8012e82 <USB_ReadPMA>
 800bc9e:	e021      	b.n	800bce4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	461a      	mov	r2, r3
 800bcac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	4413      	add	r3, r2
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	6812      	ldr	r2, [r2, #0]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800bcc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d009      	beq.n	800bce4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd6:	6959      	ldr	r1, [r3, #20]
 800bcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcda:	895a      	ldrh	r2, [r3, #10]
 800bcdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bce0:	f007 f8cf 	bl	8012e82 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800bce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce6:	69da      	ldr	r2, [r3, #28]
 800bce8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bcec:	441a      	add	r2, r3
 800bcee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf4:	695a      	ldr	r2, [r3, #20]
 800bcf6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bcfa:	441a      	add	r2, r3
 800bcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d005      	beq.n	800bd14 <PCD_EP_ISR_Handler+0x4da>
 800bd08:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800bd0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d206      	bcs.n	800bd22 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800bd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f008 ffca 	bl	8014cb4 <HAL_PCD_DataOutStageCallback>
 800bd20:	e005      	b.n	800bd2e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f005 fbf8 	bl	801151e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bd2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bd32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 8121 	beq.w	800bf7e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800bd3c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	461a      	mov	r2, r3
 800bd56:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bd66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	461a      	mov	r2, r3
 800bd74:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	441a      	add	r2, r3
 800bd7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800bd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd8e:	78db      	ldrb	r3, [r3, #3]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	f000 80a2 	beq.w	800beda <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800bd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd98:	2200      	movs	r2, #0
 800bd9a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bd9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd9e:	7b1b      	ldrb	r3, [r3, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 8093 	beq.w	800becc <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bda6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bdaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d046      	beq.n	800be40 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bdb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb4:	785b      	ldrb	r3, [r3, #1]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d126      	bne.n	800be08 <PCD_EP_ISR_Handler+0x5ce>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	461a      	mov	r2, r3
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	4413      	add	r3, r2
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	00da      	lsls	r2, r3, #3
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	4413      	add	r3, r2
 800bddc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bde0:	623b      	str	r3, [r7, #32]
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	881b      	ldrh	r3, [r3, #0]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	801a      	strh	r2, [r3, #0]
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be00:	b29a      	uxth	r2, r3
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	801a      	strh	r2, [r3, #0]
 800be06:	e061      	b.n	800becc <PCD_EP_ISR_Handler+0x692>
 800be08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0a:	785b      	ldrb	r3, [r3, #1]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d15d      	bne.n	800becc <PCD_EP_ISR_Handler+0x692>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be1e:	b29b      	uxth	r3, r3
 800be20:	461a      	mov	r2, r3
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	4413      	add	r3, r2
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	00da      	lsls	r2, r3, #3
 800be2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be30:	4413      	add	r3, r2
 800be32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be36:	62bb      	str	r3, [r7, #40]	; 0x28
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	2200      	movs	r2, #0
 800be3c:	801a      	strh	r2, [r3, #0]
 800be3e:	e045      	b.n	800becc <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d126      	bne.n	800be9c <PCD_EP_ISR_Handler+0x662>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	637b      	str	r3, [r7, #52]	; 0x34
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	461a      	mov	r2, r3
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	4413      	add	r3, r2
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
 800be66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	00da      	lsls	r2, r3, #3
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	4413      	add	r3, r2
 800be70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be74:	633b      	str	r3, [r7, #48]	; 0x30
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be80:	b29a      	uxth	r2, r3
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	801a      	strh	r2, [r3, #0]
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be94:	b29a      	uxth	r2, r3
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	801a      	strh	r2, [r3, #0]
 800be9a:	e017      	b.n	800becc <PCD_EP_ISR_Handler+0x692>
 800be9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d113      	bne.n	800becc <PCD_EP_ISR_Handler+0x692>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beac:	b29b      	uxth	r3, r3
 800beae:	461a      	mov	r2, r3
 800beb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb2:	4413      	add	r3, r2
 800beb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	00da      	lsls	r2, r3, #3
 800bebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebe:	4413      	add	r3, r2
 800bec0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bec4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec8:	2200      	movs	r2, #0
 800beca:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800becc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f008 ff09 	bl	8014cea <HAL_PCD_DataInStageCallback>
 800bed8:	e051      	b.n	800bf7e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800beda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d144      	bne.n	800bf70 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beee:	b29b      	uxth	r3, r3
 800bef0:	461a      	mov	r2, r3
 800bef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	4413      	add	r3, r2
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	6812      	ldr	r2, [r2, #0]
 800befe:	4413      	add	r3, r2
 800bf00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf04:	881b      	ldrh	r3, [r3, #0]
 800bf06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800bf0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf10:	699a      	ldr	r2, [r3, #24]
 800bf12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d907      	bls.n	800bf2a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800bf1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1c:	699a      	ldr	r2, [r3, #24]
 800bf1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf22:	1ad2      	subs	r2, r2, r3
 800bf24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf26:	619a      	str	r2, [r3, #24]
 800bf28:	e002      	b.n	800bf30 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800bf2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bf30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d106      	bne.n	800bf46 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bf38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f008 fed3 	bl	8014cea <HAL_PCD_DataInStageCallback>
 800bf44:	e01b      	b.n	800bf7e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800bf46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf48:	695a      	ldr	r2, [r3, #20]
 800bf4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf4e:	441a      	add	r2, r3
 800bf50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf52:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800bf54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf56:	69da      	ldr	r2, [r3, #28]
 800bf58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf5c:	441a      	add	r2, r3
 800bf5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf60:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f005 fad8 	bl	801151e <USB_EPStartXfer>
 800bf6e:	e006      	b.n	800bf7e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bf70:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bf74:	461a      	mov	r2, r3
 800bf76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f917 	bl	800c1ac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	b21b      	sxth	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f6ff ac5a 	blt.w	800b844 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3758      	adds	r7, #88	; 0x58
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b088      	sub	sp, #32
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	60f8      	str	r0, [r7, #12]
 800bfa2:	60b9      	str	r1, [r7, #8]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bfa8:	88fb      	ldrh	r3, [r7, #6]
 800bfaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d07c      	beq.n	800c0ac <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4413      	add	r3, r2
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	8b7b      	ldrh	r3, [r7, #26]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d306      	bcc.n	800bff0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	8b7b      	ldrh	r3, [r7, #26]
 800bfe8:	1ad2      	subs	r2, r2, r3
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	619a      	str	r2, [r3, #24]
 800bfee:	e002      	b.n	800bff6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2200      	movs	r2, #0
 800bff4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d123      	bne.n	800c046 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	b29b      	uxth	r3, r3
 800c010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c018:	833b      	strh	r3, [r7, #24]
 800c01a:	8b3b      	ldrh	r3, [r7, #24]
 800c01c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c020:	833b      	strh	r3, [r7, #24]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	441a      	add	r2, r3
 800c030:	8b3b      	ldrh	r3, [r7, #24]
 800c032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c03a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c042:	b29b      	uxth	r3, r3
 800c044:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c046:	88fb      	ldrh	r3, [r7, #6]
 800c048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d01f      	beq.n	800c090 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	461a      	mov	r2, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c06a:	82fb      	strh	r3, [r7, #22]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	461a      	mov	r2, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	441a      	add	r2, r3
 800c07a:	8afb      	ldrh	r3, [r7, #22]
 800c07c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c090:	8b7b      	ldrh	r3, [r7, #26]
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 8085 	beq.w	800c1a2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6818      	ldr	r0, [r3, #0]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	6959      	ldr	r1, [r3, #20]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	891a      	ldrh	r2, [r3, #8]
 800c0a4:	8b7b      	ldrh	r3, [r7, #26]
 800c0a6:	f006 feec 	bl	8012e82 <USB_ReadPMA>
 800c0aa:	e07a      	b.n	800c1a2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	00db      	lsls	r3, r3, #3
 800c0be:	4413      	add	r3, r2
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	6812      	ldr	r2, [r2, #0]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	8b7b      	ldrh	r3, [r7, #26]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d306      	bcc.n	800c0ea <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	699a      	ldr	r2, [r3, #24]
 800c0e0:	8b7b      	ldrh	r3, [r7, #26]
 800c0e2:	1ad2      	subs	r2, r2, r3
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	619a      	str	r2, [r3, #24]
 800c0e8:	e002      	b.n	800c0f0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d123      	bne.n	800c140 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c112:	83fb      	strh	r3, [r7, #30]
 800c114:	8bfb      	ldrh	r3, [r7, #30]
 800c116:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c11a:	83fb      	strh	r3, [r7, #30]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	461a      	mov	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	441a      	add	r2, r3
 800c12a:	8bfb      	ldrh	r3, [r7, #30]
 800c12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c140:	88fb      	ldrh	r3, [r7, #6]
 800c142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c146:	2b00      	cmp	r3, #0
 800c148:	d11f      	bne.n	800c18a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c164:	83bb      	strh	r3, [r7, #28]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	441a      	add	r2, r3
 800c174:	8bbb      	ldrh	r3, [r7, #28]
 800c176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c186:	b29b      	uxth	r3, r3
 800c188:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c18a:	8b7b      	ldrh	r3, [r7, #26]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d008      	beq.n	800c1a2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6818      	ldr	r0, [r3, #0]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	6959      	ldr	r1, [r3, #20]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	895a      	ldrh	r2, [r3, #10]
 800c19c:	8b7b      	ldrh	r3, [r7, #26]
 800c19e:	f006 fe70 	bl	8012e82 <USB_ReadPMA>
    }
  }

  return count;
 800c1a2:	8b7b      	ldrh	r3, [r7, #26]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3720      	adds	r7, #32
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b0a2      	sub	sp, #136	; 0x88
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c1ba:	88fb      	ldrh	r3, [r7, #6]
 800c1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 81c5 	beq.w	800c550 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	4413      	add	r3, r2
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	6812      	ldr	r2, [r2, #0]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d907      	bls.n	800c20a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	699a      	ldr	r2, [r3, #24]
 800c1fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c202:	1ad2      	subs	r2, r2, r3
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	619a      	str	r2, [r3, #24]
 800c208:	e002      	b.n	800c210 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2200      	movs	r2, #0
 800c20e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	2b00      	cmp	r3, #0
 800c216:	f040 80b9 	bne.w	800c38c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	785b      	ldrb	r3, [r3, #1]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d126      	bne.n	800c270 <HAL_PCD_EP_DB_Transmit+0xc4>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	62bb      	str	r3, [r7, #40]	; 0x28
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c230:	b29b      	uxth	r3, r3
 800c232:	461a      	mov	r2, r3
 800c234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c236:	4413      	add	r3, r2
 800c238:	62bb      	str	r3, [r7, #40]	; 0x28
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	00da      	lsls	r2, r3, #3
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	4413      	add	r3, r2
 800c244:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c248:	627b      	str	r3, [r7, #36]	; 0x24
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c254:	b29a      	uxth	r2, r3
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	801a      	strh	r2, [r3, #0]
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c268:	b29a      	uxth	r2, r3
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	801a      	strh	r2, [r3, #0]
 800c26e:	e01a      	b.n	800c2a6 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	785b      	ldrb	r3, [r3, #1]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d116      	bne.n	800c2a6 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	633b      	str	r3, [r7, #48]	; 0x30
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c286:	b29b      	uxth	r3, r3
 800c288:	461a      	mov	r2, r3
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	4413      	add	r3, r2
 800c28e:	633b      	str	r3, [r7, #48]	; 0x30
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	00da      	lsls	r2, r3, #3
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	4413      	add	r3, r2
 800c29a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c29e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	623b      	str	r3, [r7, #32]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	785b      	ldrb	r3, [r3, #1]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d126      	bne.n	800c302 <HAL_PCD_EP_DB_Transmit+0x156>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	61bb      	str	r3, [r7, #24]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	61bb      	str	r3, [r7, #24]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	00da      	lsls	r2, r3, #3
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	881b      	ldrh	r3, [r3, #0]
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	801a      	strh	r2, [r3, #0]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	801a      	strh	r2, [r3, #0]
 800c300:	e017      	b.n	800c332 <HAL_PCD_EP_DB_Transmit+0x186>
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	785b      	ldrb	r3, [r3, #1]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d113      	bne.n	800c332 <HAL_PCD_EP_DB_Transmit+0x186>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c312:	b29b      	uxth	r3, r3
 800c314:	461a      	mov	r2, r3
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	4413      	add	r3, r2
 800c31a:	623b      	str	r3, [r7, #32]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	00da      	lsls	r2, r3, #3
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	4413      	add	r3, r2
 800c326:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c32a:	61fb      	str	r3, [r7, #28]
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	2200      	movs	r2, #0
 800c330:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	4619      	mov	r1, r3
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f008 fcd6 	bl	8014cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 82d2 	beq.w	800c8ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c364:	827b      	strh	r3, [r7, #18]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	461a      	mov	r2, r3
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	441a      	add	r2, r3
 800c374:	8a7b      	ldrh	r3, [r7, #18]
 800c376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c37a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c37e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c386:	b29b      	uxth	r3, r3
 800c388:	8013      	strh	r3, [r2, #0]
 800c38a:	e2b0      	b.n	800c8ee <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c38c:	88fb      	ldrh	r3, [r7, #6]
 800c38e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d021      	beq.n	800c3da <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	441a      	add	r2, r3
 800c3c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c3c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	f040 8284 	bne.w	800c8ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	695a      	ldr	r2, [r3, #20]
 800c3ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c3ee:	441a      	add	r2, r3
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	69da      	ldr	r2, [r3, #28]
 800c3f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c3fc:	441a      	add	r2, r3
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	6a1a      	ldr	r2, [r3, #32]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d309      	bcc.n	800c422 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	6a1a      	ldr	r2, [r3, #32]
 800c418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c41a:	1ad2      	subs	r2, r2, r3
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	621a      	str	r2, [r3, #32]
 800c420:	e015      	b.n	800c44e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d107      	bne.n	800c43a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800c42a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c42e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c438:	e009      	b.n	800c44e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2200      	movs	r2, #0
 800c44c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	785b      	ldrb	r3, [r3, #1]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d155      	bne.n	800c502 <HAL_PCD_EP_DB_Transmit+0x356>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c464:	b29b      	uxth	r3, r3
 800c466:	461a      	mov	r2, r3
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	4413      	add	r3, r2
 800c46c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	00da      	lsls	r2, r3, #3
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	4413      	add	r3, r2
 800c478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
 800c47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c480:	2b3e      	cmp	r3, #62	; 0x3e
 800c482:	d916      	bls.n	800c4b2 <HAL_PCD_EP_DB_Transmit+0x306>
 800c484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c486:	095b      	lsrs	r3, r3, #5
 800c488:	64bb      	str	r3, [r7, #72]	; 0x48
 800c48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c48c:	f003 031f 	and.w	r3, r3, #31
 800c490:	2b00      	cmp	r3, #0
 800c492:	d102      	bne.n	800c49a <HAL_PCD_EP_DB_Transmit+0x2ee>
 800c494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c496:	3b01      	subs	r3, #1
 800c498:	64bb      	str	r3, [r7, #72]	; 0x48
 800c49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	029b      	lsls	r3, r3, #10
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	801a      	strh	r2, [r3, #0]
 800c4b0:	e043      	b.n	800c53a <HAL_PCD_EP_DB_Transmit+0x38e>
 800c4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d112      	bne.n	800c4de <HAL_PCD_EP_DB_Transmit+0x332>
 800c4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	801a      	strh	r2, [r3, #0]
 800c4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4da:	801a      	strh	r2, [r3, #0]
 800c4dc:	e02d      	b.n	800c53a <HAL_PCD_EP_DB_Transmit+0x38e>
 800c4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4e0:	085b      	lsrs	r3, r3, #1
 800c4e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d002      	beq.n	800c4f4 <HAL_PCD_EP_DB_Transmit+0x348>
 800c4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	029b      	lsls	r3, r3, #10
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fe:	801a      	strh	r2, [r3, #0]
 800c500:	e01b      	b.n	800c53a <HAL_PCD_EP_DB_Transmit+0x38e>
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	785b      	ldrb	r3, [r3, #1]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d117      	bne.n	800c53a <HAL_PCD_EP_DB_Transmit+0x38e>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	643b      	str	r3, [r7, #64]	; 0x40
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c518:	b29b      	uxth	r3, r3
 800c51a:	461a      	mov	r2, r3
 800c51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51e:	4413      	add	r3, r2
 800c520:	643b      	str	r3, [r7, #64]	; 0x40
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	00da      	lsls	r2, r3, #3
 800c528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c52a:	4413      	add	r3, r2
 800c52c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c534:	b29a      	uxth	r2, r3
 800c536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c538:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	6959      	ldr	r1, [r3, #20]
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	891a      	ldrh	r2, [r3, #8]
 800c546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c548:	b29b      	uxth	r3, r3
 800c54a:	f006 fc58 	bl	8012dfe <USB_WritePMA>
 800c54e:	e1ce      	b.n	800c8ee <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c558:	b29b      	uxth	r3, r3
 800c55a:	461a      	mov	r2, r3
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	4413      	add	r3, r2
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	6812      	ldr	r2, [r2, #0]
 800c568:	4413      	add	r3, r2
 800c56a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c574:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	699a      	ldr	r2, [r3, #24]
 800c57c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c580:	429a      	cmp	r2, r3
 800c582:	d307      	bcc.n	800c594 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	699a      	ldr	r2, [r3, #24]
 800c588:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c58c:	1ad2      	subs	r2, r2, r3
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	619a      	str	r2, [r3, #24]
 800c592:	e002      	b.n	800c59a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2200      	movs	r2, #0
 800c598:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f040 80c4 	bne.w	800c72c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	785b      	ldrb	r3, [r3, #1]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d126      	bne.n	800c5fa <HAL_PCD_EP_DB_Transmit+0x44e>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	461a      	mov	r2, r3
 800c5be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5c0:	4413      	add	r3, r2
 800c5c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	00da      	lsls	r2, r3, #3
 800c5ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5cc:	4413      	add	r3, r2
 800c5ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c5d2:	667b      	str	r3, [r7, #100]	; 0x64
 800c5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5d6:	881b      	ldrh	r3, [r3, #0]
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e2:	801a      	strh	r2, [r3, #0]
 800c5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e6:	881b      	ldrh	r3, [r3, #0]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5f6:	801a      	strh	r2, [r3, #0]
 800c5f8:	e01a      	b.n	800c630 <HAL_PCD_EP_DB_Transmit+0x484>
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	785b      	ldrb	r3, [r3, #1]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d116      	bne.n	800c630 <HAL_PCD_EP_DB_Transmit+0x484>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	673b      	str	r3, [r7, #112]	; 0x70
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c610:	b29b      	uxth	r3, r3
 800c612:	461a      	mov	r2, r3
 800c614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c616:	4413      	add	r3, r2
 800c618:	673b      	str	r3, [r7, #112]	; 0x70
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	00da      	lsls	r2, r3, #3
 800c620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c622:	4413      	add	r3, r2
 800c624:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c62a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c62c:	2200      	movs	r2, #0
 800c62e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	785b      	ldrb	r3, [r3, #1]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d12f      	bne.n	800c69e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c64e:	b29b      	uxth	r3, r3
 800c650:	461a      	mov	r2, r3
 800c652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c656:	4413      	add	r3, r2
 800c658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	00da      	lsls	r2, r3, #3
 800c662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c666:	4413      	add	r3, r2
 800c668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c66c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c670:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	b29b      	uxth	r3, r3
 800c678:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c682:	801a      	strh	r2, [r3, #0]
 800c684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c694:	b29a      	uxth	r2, r3
 800c696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c69a:	801a      	strh	r2, [r3, #0]
 800c69c:	e017      	b.n	800c6ce <HAL_PCD_EP_DB_Transmit+0x522>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	785b      	ldrb	r3, [r3, #1]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d113      	bne.n	800c6ce <HAL_PCD_EP_DB_Transmit+0x522>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c6b4:	4413      	add	r3, r2
 800c6b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	00da      	lsls	r2, r3, #3
 800c6be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6c6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c6c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f008 fb08 	bl	8014cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c6da:	88fb      	ldrh	r3, [r7, #6]
 800c6dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f040 8104 	bne.w	800c8ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	4413      	add	r3, r2
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c700:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	461a      	mov	r2, r3
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	441a      	add	r2, r3
 800c712:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c71a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c71e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c726:	b29b      	uxth	r3, r3
 800c728:	8013      	strh	r3, [r2, #0]
 800c72a:	e0e0      	b.n	800c8ee <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c72c:	88fb      	ldrh	r3, [r7, #6]
 800c72e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c732:	2b00      	cmp	r3, #0
 800c734:	d121      	bne.n	800c77a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	b29b      	uxth	r3, r3
 800c748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c74c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c750:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	461a      	mov	r2, r3
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	441a      	add	r2, r3
 800c762:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c76a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c76e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c776:	b29b      	uxth	r3, r3
 800c778:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c780:	2b01      	cmp	r3, #1
 800c782:	f040 80b4 	bne.w	800c8ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	695a      	ldr	r2, [r3, #20]
 800c78a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c78e:	441a      	add	r2, r3
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	69da      	ldr	r2, [r3, #28]
 800c798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c79c:	441a      	add	r2, r3
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6a1a      	ldr	r2, [r3, #32]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d309      	bcc.n	800c7c2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	6a1a      	ldr	r2, [r3, #32]
 800c7b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ba:	1ad2      	subs	r2, r2, r3
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	621a      	str	r2, [r3, #32]
 800c7c0:	e015      	b.n	800c7ee <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d107      	bne.n	800c7da <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800c7ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c7d8:	e009      	b.n	800c7ee <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	663b      	str	r3, [r7, #96]	; 0x60
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d155      	bne.n	800c8a8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	65bb      	str	r3, [r7, #88]	; 0x58
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	461a      	mov	r2, r3
 800c80e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c810:	4413      	add	r3, r2
 800c812:	65bb      	str	r3, [r7, #88]	; 0x58
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	00da      	lsls	r2, r3, #3
 800c81a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c81c:	4413      	add	r3, r2
 800c81e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c822:	657b      	str	r3, [r7, #84]	; 0x54
 800c824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c826:	2b3e      	cmp	r3, #62	; 0x3e
 800c828:	d916      	bls.n	800c858 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c82c:	095b      	lsrs	r3, r3, #5
 800c82e:	677b      	str	r3, [r7, #116]	; 0x74
 800c830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c832:	f003 031f 	and.w	r3, r3, #31
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <HAL_PCD_EP_DB_Transmit+0x694>
 800c83a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c83c:	3b01      	subs	r3, #1
 800c83e:	677b      	str	r3, [r7, #116]	; 0x74
 800c840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c842:	b29b      	uxth	r3, r3
 800c844:	029b      	lsls	r3, r3, #10
 800c846:	b29b      	uxth	r3, r3
 800c848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c84c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c850:	b29a      	uxth	r2, r3
 800c852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c854:	801a      	strh	r2, [r3, #0]
 800c856:	e040      	b.n	800c8da <HAL_PCD_EP_DB_Transmit+0x72e>
 800c858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d112      	bne.n	800c884 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800c85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	b29b      	uxth	r3, r3
 800c864:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c868:	b29a      	uxth	r2, r3
 800c86a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c86c:	801a      	strh	r2, [r3, #0]
 800c86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	b29b      	uxth	r3, r3
 800c874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c880:	801a      	strh	r2, [r3, #0]
 800c882:	e02a      	b.n	800c8da <HAL_PCD_EP_DB_Transmit+0x72e>
 800c884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c886:	085b      	lsrs	r3, r3, #1
 800c888:	677b      	str	r3, [r7, #116]	; 0x74
 800c88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <HAL_PCD_EP_DB_Transmit+0x6ee>
 800c894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c896:	3301      	adds	r3, #1
 800c898:	677b      	str	r3, [r7, #116]	; 0x74
 800c89a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	029b      	lsls	r3, r3, #10
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a4:	801a      	strh	r2, [r3, #0]
 800c8a6:	e018      	b.n	800c8da <HAL_PCD_EP_DB_Transmit+0x72e>
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d114      	bne.n	800c8da <HAL_PCD_EP_DB_Transmit+0x72e>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8be:	4413      	add	r3, r2
 800c8c0:	663b      	str	r3, [r7, #96]	; 0x60
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	00da      	lsls	r2, r3, #3
 800c8c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6818      	ldr	r0, [r3, #0]
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	6959      	ldr	r1, [r3, #20]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	895a      	ldrh	r2, [r3, #10]
 800c8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	f006 fa88 	bl	8012dfe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c908:	823b      	strh	r3, [r7, #16]
 800c90a:	8a3b      	ldrh	r3, [r7, #16]
 800c90c:	f083 0310 	eor.w	r3, r3, #16
 800c910:	823b      	strh	r3, [r7, #16]
 800c912:	8a3b      	ldrh	r3, [r7, #16]
 800c914:	f083 0320 	eor.w	r3, r3, #32
 800c918:	823b      	strh	r3, [r7, #16]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	441a      	add	r2, r3
 800c928:	8a3b      	ldrh	r3, [r7, #16]
 800c92a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c92e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	3788      	adds	r7, #136	; 0x88
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c948:	b480      	push	{r7}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	460b      	mov	r3, r1
 800c954:	817b      	strh	r3, [r7, #10]
 800c956:	4613      	mov	r3, r2
 800c958:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c95a:	897b      	ldrh	r3, [r7, #10]
 800c95c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c960:	b29b      	uxth	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00b      	beq.n	800c97e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c966:	897b      	ldrh	r3, [r7, #10]
 800c968:	f003 0307 	and.w	r3, r3, #7
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	4613      	mov	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	4413      	add	r3, r2
 800c97a:	617b      	str	r3, [r7, #20]
 800c97c:	e009      	b.n	800c992 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c97e:	897a      	ldrh	r2, [r7, #10]
 800c980:	4613      	mov	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	4413      	add	r3, r2
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4413      	add	r3, r2
 800c990:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c992:	893b      	ldrh	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d107      	bne.n	800c9a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2200      	movs	r2, #0
 800c99c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	80da      	strh	r2, [r3, #6]
 800c9a6:	e00b      	b.n	800c9c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	0c1b      	lsrs	r3, r3, #16
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	371c      	adds	r7, #28
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b085      	sub	sp, #20
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	f043 0301 	orr.w	r3, r3, #1
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	f043 0302 	orr.w	r3, r3, #2
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3714      	adds	r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
	...

0800ca24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d141      	bne.n	800cab6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ca32:	4b4b      	ldr	r3, [pc, #300]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca3e:	d131      	bne.n	800caa4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ca40:	4b47      	ldr	r3, [pc, #284]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca46:	4a46      	ldr	r2, [pc, #280]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ca50:	4b43      	ldr	r3, [pc, #268]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ca58:	4a41      	ldr	r2, [pc, #260]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ca60:	4b40      	ldr	r3, [pc, #256]	; (800cb64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2232      	movs	r2, #50	; 0x32
 800ca66:	fb02 f303 	mul.w	r3, r2, r3
 800ca6a:	4a3f      	ldr	r2, [pc, #252]	; (800cb68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ca6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca70:	0c9b      	lsrs	r3, r3, #18
 800ca72:	3301      	adds	r3, #1
 800ca74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca76:	e002      	b.n	800ca7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca7e:	4b38      	ldr	r3, [pc, #224]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca8a:	d102      	bne.n	800ca92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1f2      	bne.n	800ca78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ca92:	4b33      	ldr	r3, [pc, #204]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca9e:	d158      	bne.n	800cb52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800caa0:	2303      	movs	r3, #3
 800caa2:	e057      	b.n	800cb54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800caa4:	4b2e      	ldr	r3, [pc, #184]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caaa:	4a2d      	ldr	r2, [pc, #180]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cab4:	e04d      	b.n	800cb52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cabc:	d141      	bne.n	800cb42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cabe:	4b28      	ldr	r3, [pc, #160]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caca:	d131      	bne.n	800cb30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cacc:	4b24      	ldr	r3, [pc, #144]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cad2:	4a23      	ldr	r2, [pc, #140]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cadc:	4b20      	ldr	r3, [pc, #128]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cae4:	4a1e      	ldr	r2, [pc, #120]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800caea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800caec:	4b1d      	ldr	r3, [pc, #116]	; (800cb64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2232      	movs	r2, #50	; 0x32
 800caf2:	fb02 f303 	mul.w	r3, r2, r3
 800caf6:	4a1c      	ldr	r2, [pc, #112]	; (800cb68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800caf8:	fba2 2303 	umull	r2, r3, r2, r3
 800cafc:	0c9b      	lsrs	r3, r3, #18
 800cafe:	3301      	adds	r3, #1
 800cb00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb02:	e002      	b.n	800cb0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3b01      	subs	r3, #1
 800cb08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb0a:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb16:	d102      	bne.n	800cb1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f2      	bne.n	800cb04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cb1e:	4b10      	ldr	r3, [pc, #64]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb2a:	d112      	bne.n	800cb52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e011      	b.n	800cb54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb30:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb36:	4a0a      	ldr	r2, [pc, #40]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cb40:	e007      	b.n	800cb52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cb4a:	4a05      	ldr	r2, [pc, #20]	; (800cb60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	40007000 	.word	0x40007000
 800cb64:	20000000 	.word	0x20000000
 800cb68:	431bde83 	.word	0x431bde83

0800cb6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e306      	b.n	800d18c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d075      	beq.n	800cc76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb8a:	4b97      	ldr	r3, [pc, #604]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f003 030c 	and.w	r3, r3, #12
 800cb92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cb94:	4b94      	ldr	r3, [pc, #592]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f003 0303 	and.w	r3, r3, #3
 800cb9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	2b0c      	cmp	r3, #12
 800cba2:	d102      	bne.n	800cbaa <HAL_RCC_OscConfig+0x3e>
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d002      	beq.n	800cbb0 <HAL_RCC_OscConfig+0x44>
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d10b      	bne.n	800cbc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbb0:	4b8d      	ldr	r3, [pc, #564]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d05b      	beq.n	800cc74 <HAL_RCC_OscConfig+0x108>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d157      	bne.n	800cc74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e2e1      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd0:	d106      	bne.n	800cbe0 <HAL_RCC_OscConfig+0x74>
 800cbd2:	4b85      	ldr	r3, [pc, #532]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a84      	ldr	r2, [pc, #528]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cbd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	e01d      	b.n	800cc1c <HAL_RCC_OscConfig+0xb0>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbe8:	d10c      	bne.n	800cc04 <HAL_RCC_OscConfig+0x98>
 800cbea:	4b7f      	ldr	r3, [pc, #508]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a7e      	ldr	r2, [pc, #504]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cbf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	4b7c      	ldr	r3, [pc, #496]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a7b      	ldr	r2, [pc, #492]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cbfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc00:	6013      	str	r3, [r2, #0]
 800cc02:	e00b      	b.n	800cc1c <HAL_RCC_OscConfig+0xb0>
 800cc04:	4b78      	ldr	r3, [pc, #480]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a77      	ldr	r2, [pc, #476]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	4b75      	ldr	r3, [pc, #468]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a74      	ldr	r2, [pc, #464]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d013      	beq.n	800cc4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc24:	f7f9 fbfe 	bl	8006424 <HAL_GetTick>
 800cc28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc2a:	e008      	b.n	800cc3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc2c:	f7f9 fbfa 	bl	8006424 <HAL_GetTick>
 800cc30:	4602      	mov	r2, r0
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	2b64      	cmp	r3, #100	; 0x64
 800cc38:	d901      	bls.n	800cc3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e2a6      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc3e:	4b6a      	ldr	r3, [pc, #424]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0f0      	beq.n	800cc2c <HAL_RCC_OscConfig+0xc0>
 800cc4a:	e014      	b.n	800cc76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc4c:	f7f9 fbea 	bl	8006424 <HAL_GetTick>
 800cc50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc52:	e008      	b.n	800cc66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc54:	f7f9 fbe6 	bl	8006424 <HAL_GetTick>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	2b64      	cmp	r3, #100	; 0x64
 800cc60:	d901      	bls.n	800cc66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc62:	2303      	movs	r3, #3
 800cc64:	e292      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc66:	4b60      	ldr	r3, [pc, #384]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1f0      	bne.n	800cc54 <HAL_RCC_OscConfig+0xe8>
 800cc72:	e000      	b.n	800cc76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0302 	and.w	r3, r3, #2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d075      	beq.n	800cd6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc82:	4b59      	ldr	r3, [pc, #356]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f003 030c 	and.w	r3, r3, #12
 800cc8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cc8c:	4b56      	ldr	r3, [pc, #344]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f003 0303 	and.w	r3, r3, #3
 800cc94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	2b0c      	cmp	r3, #12
 800cc9a:	d102      	bne.n	800cca2 <HAL_RCC_OscConfig+0x136>
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	d002      	beq.n	800cca8 <HAL_RCC_OscConfig+0x13c>
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b04      	cmp	r3, #4
 800cca6:	d11f      	bne.n	800cce8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cca8:	4b4f      	ldr	r3, [pc, #316]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <HAL_RCC_OscConfig+0x154>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e265      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccc0:	4b49      	ldr	r3, [pc, #292]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	061b      	lsls	r3, r3, #24
 800ccce:	4946      	ldr	r1, [pc, #280]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ccd4:	4b45      	ldr	r3, [pc, #276]	; (800cdec <HAL_RCC_OscConfig+0x280>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7f9 fb57 	bl	800638c <HAL_InitTick>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d043      	beq.n	800cd6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e251      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d023      	beq.n	800cd38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ccf0:	4b3d      	ldr	r3, [pc, #244]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a3c      	ldr	r2, [pc, #240]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800ccf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccfc:	f7f9 fb92 	bl	8006424 <HAL_GetTick>
 800cd00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd02:	e008      	b.n	800cd16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd04:	f7f9 fb8e 	bl	8006424 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d901      	bls.n	800cd16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cd12:	2303      	movs	r3, #3
 800cd14:	e23a      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd16:	4b34      	ldr	r3, [pc, #208]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0f0      	beq.n	800cd04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd22:	4b31      	ldr	r3, [pc, #196]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	061b      	lsls	r3, r3, #24
 800cd30:	492d      	ldr	r1, [pc, #180]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd32:	4313      	orrs	r3, r2
 800cd34:	604b      	str	r3, [r1, #4]
 800cd36:	e01a      	b.n	800cd6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd38:	4b2b      	ldr	r3, [pc, #172]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a2a      	ldr	r2, [pc, #168]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd44:	f7f9 fb6e 	bl	8006424 <HAL_GetTick>
 800cd48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd4a:	e008      	b.n	800cd5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd4c:	f7f9 fb6a 	bl	8006424 <HAL_GetTick>
 800cd50:	4602      	mov	r2, r0
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d901      	bls.n	800cd5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e216      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd5e:	4b22      	ldr	r3, [pc, #136]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1f0      	bne.n	800cd4c <HAL_RCC_OscConfig+0x1e0>
 800cd6a:	e000      	b.n	800cd6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 0308 	and.w	r3, r3, #8
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d041      	beq.n	800cdfe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01c      	beq.n	800cdbc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd82:	4b19      	ldr	r3, [pc, #100]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd88:	4a17      	ldr	r2, [pc, #92]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cd8a:	f043 0301 	orr.w	r3, r3, #1
 800cd8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd92:	f7f9 fb47 	bl	8006424 <HAL_GetTick>
 800cd96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cd98:	e008      	b.n	800cdac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd9a:	f7f9 fb43 	bl	8006424 <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d901      	bls.n	800cdac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e1ef      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cdac:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cdae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d0ef      	beq.n	800cd9a <HAL_RCC_OscConfig+0x22e>
 800cdba:	e020      	b.n	800cdfe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cdbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdc2:	4a09      	ldr	r2, [pc, #36]	; (800cde8 <HAL_RCC_OscConfig+0x27c>)
 800cdc4:	f023 0301 	bic.w	r3, r3, #1
 800cdc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdcc:	f7f9 fb2a 	bl	8006424 <HAL_GetTick>
 800cdd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cdd2:	e00d      	b.n	800cdf0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdd4:	f7f9 fb26 	bl	8006424 <HAL_GetTick>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d906      	bls.n	800cdf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cde2:	2303      	movs	r3, #3
 800cde4:	e1d2      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
 800cde6:	bf00      	nop
 800cde8:	40021000 	.word	0x40021000
 800cdec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cdf0:	4b8c      	ldr	r3, [pc, #560]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cdf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1ea      	bne.n	800cdd4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 0304 	and.w	r3, r3, #4
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 80a6 	beq.w	800cf58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ce10:	4b84      	ldr	r3, [pc, #528]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ce12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <HAL_RCC_OscConfig+0x2b4>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e000      	b.n	800ce22 <HAL_RCC_OscConfig+0x2b6>
 800ce20:	2300      	movs	r3, #0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00d      	beq.n	800ce42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce26:	4b7f      	ldr	r3, [pc, #508]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ce28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce2a:	4a7e      	ldr	r2, [pc, #504]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ce2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce30:	6593      	str	r3, [r2, #88]	; 0x58
 800ce32:	4b7c      	ldr	r3, [pc, #496]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ce34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce42:	4b79      	ldr	r3, [pc, #484]	; (800d028 <HAL_RCC_OscConfig+0x4bc>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d118      	bne.n	800ce80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce4e:	4b76      	ldr	r3, [pc, #472]	; (800d028 <HAL_RCC_OscConfig+0x4bc>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a75      	ldr	r2, [pc, #468]	; (800d028 <HAL_RCC_OscConfig+0x4bc>)
 800ce54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce5a:	f7f9 fae3 	bl	8006424 <HAL_GetTick>
 800ce5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce60:	e008      	b.n	800ce74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce62:	f7f9 fadf 	bl	8006424 <HAL_GetTick>
 800ce66:	4602      	mov	r2, r0
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d901      	bls.n	800ce74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e18b      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce74:	4b6c      	ldr	r3, [pc, #432]	; (800d028 <HAL_RCC_OscConfig+0x4bc>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d0f0      	beq.n	800ce62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d108      	bne.n	800ce9a <HAL_RCC_OscConfig+0x32e>
 800ce88:	4b66      	ldr	r3, [pc, #408]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ce8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce8e:	4a65      	ldr	r2, [pc, #404]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ce90:	f043 0301 	orr.w	r3, r3, #1
 800ce94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ce98:	e024      	b.n	800cee4 <HAL_RCC_OscConfig+0x378>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	2b05      	cmp	r3, #5
 800cea0:	d110      	bne.n	800cec4 <HAL_RCC_OscConfig+0x358>
 800cea2:	4b60      	ldr	r3, [pc, #384]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cea8:	4a5e      	ldr	r2, [pc, #376]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ceaa:	f043 0304 	orr.w	r3, r3, #4
 800ceae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ceb2:	4b5c      	ldr	r3, [pc, #368]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ceb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceb8:	4a5a      	ldr	r2, [pc, #360]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ceba:	f043 0301 	orr.w	r3, r3, #1
 800cebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cec2:	e00f      	b.n	800cee4 <HAL_RCC_OscConfig+0x378>
 800cec4:	4b57      	ldr	r3, [pc, #348]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceca:	4a56      	ldr	r2, [pc, #344]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cecc:	f023 0301 	bic.w	r3, r3, #1
 800ced0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ced4:	4b53      	ldr	r3, [pc, #332]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800ced6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceda:	4a52      	ldr	r2, [pc, #328]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cedc:	f023 0304 	bic.w	r3, r3, #4
 800cee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d016      	beq.n	800cf1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceec:	f7f9 fa9a 	bl	8006424 <HAL_GetTick>
 800cef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cef2:	e00a      	b.n	800cf0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cef4:	f7f9 fa96 	bl	8006424 <HAL_GetTick>
 800cef8:	4602      	mov	r2, r0
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d901      	bls.n	800cf0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e140      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf0a:	4b46      	ldr	r3, [pc, #280]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cf0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf10:	f003 0302 	and.w	r3, r3, #2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0ed      	beq.n	800cef4 <HAL_RCC_OscConfig+0x388>
 800cf18:	e015      	b.n	800cf46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf1a:	f7f9 fa83 	bl	8006424 <HAL_GetTick>
 800cf1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf20:	e00a      	b.n	800cf38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf22:	f7f9 fa7f 	bl	8006424 <HAL_GetTick>
 800cf26:	4602      	mov	r2, r0
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d901      	bls.n	800cf38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cf34:	2303      	movs	r3, #3
 800cf36:	e129      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf38:	4b3a      	ldr	r3, [pc, #232]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cf3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf3e:	f003 0302 	and.w	r3, r3, #2
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1ed      	bne.n	800cf22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cf46:	7ffb      	ldrb	r3, [r7, #31]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d105      	bne.n	800cf58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf4c:	4b35      	ldr	r3, [pc, #212]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cf4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf50:	4a34      	ldr	r2, [pc, #208]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cf52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 0320 	and.w	r3, r3, #32
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d03c      	beq.n	800cfde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d01c      	beq.n	800cfa6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cf6c:	4b2d      	ldr	r3, [pc, #180]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cf6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cf72:	4a2c      	ldr	r2, [pc, #176]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cf74:	f043 0301 	orr.w	r3, r3, #1
 800cf78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf7c:	f7f9 fa52 	bl	8006424 <HAL_GetTick>
 800cf80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cf82:	e008      	b.n	800cf96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cf84:	f7f9 fa4e 	bl	8006424 <HAL_GetTick>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d901      	bls.n	800cf96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e0fa      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cf96:	4b23      	ldr	r3, [pc, #140]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cf98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cf9c:	f003 0302 	and.w	r3, r3, #2
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0ef      	beq.n	800cf84 <HAL_RCC_OscConfig+0x418>
 800cfa4:	e01b      	b.n	800cfde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cfa6:	4b1f      	ldr	r3, [pc, #124]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cfa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfac:	4a1d      	ldr	r2, [pc, #116]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cfae:	f023 0301 	bic.w	r3, r3, #1
 800cfb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfb6:	f7f9 fa35 	bl	8006424 <HAL_GetTick>
 800cfba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cfbc:	e008      	b.n	800cfd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cfbe:	f7f9 fa31 	bl	8006424 <HAL_GetTick>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d901      	bls.n	800cfd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e0dd      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cfd0:	4b14      	ldr	r3, [pc, #80]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cfd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfd6:	f003 0302 	and.w	r3, r3, #2
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1ef      	bne.n	800cfbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	69db      	ldr	r3, [r3, #28]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f000 80d1 	beq.w	800d18a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cfe8:	4b0e      	ldr	r3, [pc, #56]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	f003 030c 	and.w	r3, r3, #12
 800cff0:	2b0c      	cmp	r3, #12
 800cff2:	f000 808b 	beq.w	800d10c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d15e      	bne.n	800d0bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cffe:	4b09      	ldr	r3, [pc, #36]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a08      	ldr	r2, [pc, #32]	; (800d024 <HAL_RCC_OscConfig+0x4b8>)
 800d004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d00a:	f7f9 fa0b 	bl	8006424 <HAL_GetTick>
 800d00e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d010:	e00c      	b.n	800d02c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d012:	f7f9 fa07 	bl	8006424 <HAL_GetTick>
 800d016:	4602      	mov	r2, r0
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d905      	bls.n	800d02c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d020:	2303      	movs	r3, #3
 800d022:	e0b3      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
 800d024:	40021000 	.word	0x40021000
 800d028:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d02c:	4b59      	ldr	r3, [pc, #356]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1ec      	bne.n	800d012 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d038:	4b56      	ldr	r3, [pc, #344]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	4b56      	ldr	r3, [pc, #344]	; (800d198 <HAL_RCC_OscConfig+0x62c>)
 800d03e:	4013      	ands	r3, r2
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	6a11      	ldr	r1, [r2, #32]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d048:	3a01      	subs	r2, #1
 800d04a:	0112      	lsls	r2, r2, #4
 800d04c:	4311      	orrs	r1, r2
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d052:	0212      	lsls	r2, r2, #8
 800d054:	4311      	orrs	r1, r2
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d05a:	0852      	lsrs	r2, r2, #1
 800d05c:	3a01      	subs	r2, #1
 800d05e:	0552      	lsls	r2, r2, #21
 800d060:	4311      	orrs	r1, r2
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d066:	0852      	lsrs	r2, r2, #1
 800d068:	3a01      	subs	r2, #1
 800d06a:	0652      	lsls	r2, r2, #25
 800d06c:	4311      	orrs	r1, r2
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d072:	06d2      	lsls	r2, r2, #27
 800d074:	430a      	orrs	r2, r1
 800d076:	4947      	ldr	r1, [pc, #284]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d078:	4313      	orrs	r3, r2
 800d07a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d07c:	4b45      	ldr	r3, [pc, #276]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a44      	ldr	r2, [pc, #272]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d086:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d088:	4b42      	ldr	r3, [pc, #264]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	4a41      	ldr	r2, [pc, #260]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d08e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d092:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d094:	f7f9 f9c6 	bl	8006424 <HAL_GetTick>
 800d098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d09a:	e008      	b.n	800d0ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d09c:	f7f9 f9c2 	bl	8006424 <HAL_GetTick>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d901      	bls.n	800d0ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	e06e      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0ae:	4b39      	ldr	r3, [pc, #228]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d0f0      	beq.n	800d09c <HAL_RCC_OscConfig+0x530>
 800d0ba:	e066      	b.n	800d18a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0bc:	4b35      	ldr	r3, [pc, #212]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a34      	ldr	r2, [pc, #208]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d0c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d0c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d0c8:	4b32      	ldr	r3, [pc, #200]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	4a31      	ldr	r2, [pc, #196]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d0ce:	f023 0303 	bic.w	r3, r3, #3
 800d0d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d0d4:	4b2f      	ldr	r3, [pc, #188]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	4a2e      	ldr	r2, [pc, #184]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d0da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d0de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0e4:	f7f9 f99e 	bl	8006424 <HAL_GetTick>
 800d0e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d0ea:	e008      	b.n	800d0fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0ec:	f7f9 f99a 	bl	8006424 <HAL_GetTick>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d901      	bls.n	800d0fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e046      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d0fe:	4b25      	ldr	r3, [pc, #148]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1f0      	bne.n	800d0ec <HAL_RCC_OscConfig+0x580>
 800d10a:	e03e      	b.n	800d18a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	69db      	ldr	r3, [r3, #28]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d101      	bne.n	800d118 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	e039      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d118:	4b1e      	ldr	r3, [pc, #120]	; (800d194 <HAL_RCC_OscConfig+0x628>)
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	f003 0203 	and.w	r2, r3, #3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d12c      	bne.n	800d186 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d136:	3b01      	subs	r3, #1
 800d138:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d123      	bne.n	800d186 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d148:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d11b      	bne.n	800d186 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d158:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d113      	bne.n	800d186 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d168:	085b      	lsrs	r3, r3, #1
 800d16a:	3b01      	subs	r3, #1
 800d16c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d16e:	429a      	cmp	r2, r3
 800d170:	d109      	bne.n	800d186 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d17c:	085b      	lsrs	r3, r3, #1
 800d17e:	3b01      	subs	r3, #1
 800d180:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d182:	429a      	cmp	r2, r3
 800d184:	d001      	beq.n	800d18a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3720      	adds	r7, #32
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	40021000 	.word	0x40021000
 800d198:	019f800c 	.word	0x019f800c

0800d19c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	e11e      	b.n	800d3f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d1b4:	4b91      	ldr	r3, [pc, #580]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f003 030f 	and.w	r3, r3, #15
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d910      	bls.n	800d1e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1c2:	4b8e      	ldr	r3, [pc, #568]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f023 020f 	bic.w	r2, r3, #15
 800d1ca:	498c      	ldr	r1, [pc, #560]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1d2:	4b8a      	ldr	r3, [pc, #552]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 030f 	and.w	r3, r3, #15
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d001      	beq.n	800d1e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e106      	b.n	800d3f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d073      	beq.n	800d2d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	d129      	bne.n	800d24c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1f8:	4b81      	ldr	r3, [pc, #516]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d101      	bne.n	800d208 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e0f4      	b.n	800d3f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d208:	f000 f99e 	bl	800d548 <RCC_GetSysClockFreqFromPLLSource>
 800d20c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	4a7c      	ldr	r2, [pc, #496]	; (800d404 <HAL_RCC_ClockConfig+0x268>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d93f      	bls.n	800d296 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d216:	4b7a      	ldr	r3, [pc, #488]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d009      	beq.n	800d236 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d033      	beq.n	800d296 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d232:	2b00      	cmp	r3, #0
 800d234:	d12f      	bne.n	800d296 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d236:	4b72      	ldr	r3, [pc, #456]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d23e:	4a70      	ldr	r2, [pc, #448]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d244:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d246:	2380      	movs	r3, #128	; 0x80
 800d248:	617b      	str	r3, [r7, #20]
 800d24a:	e024      	b.n	800d296 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	2b02      	cmp	r3, #2
 800d252:	d107      	bne.n	800d264 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d254:	4b6a      	ldr	r3, [pc, #424]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d109      	bne.n	800d274 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	e0c6      	b.n	800d3f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d264:	4b66      	ldr	r3, [pc, #408]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e0be      	b.n	800d3f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d274:	f000 f8ce 	bl	800d414 <HAL_RCC_GetSysClockFreq>
 800d278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	4a61      	ldr	r2, [pc, #388]	; (800d404 <HAL_RCC_ClockConfig+0x268>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d909      	bls.n	800d296 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d282:	4b5f      	ldr	r3, [pc, #380]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d28a:	4a5d      	ldr	r2, [pc, #372]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d290:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d292:	2380      	movs	r3, #128	; 0x80
 800d294:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d296:	4b5a      	ldr	r3, [pc, #360]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	f023 0203 	bic.w	r2, r3, #3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	4957      	ldr	r1, [pc, #348]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2a8:	f7f9 f8bc 	bl	8006424 <HAL_GetTick>
 800d2ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2ae:	e00a      	b.n	800d2c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2b0:	f7f9 f8b8 	bl	8006424 <HAL_GetTick>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d901      	bls.n	800d2c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d2c2:	2303      	movs	r3, #3
 800d2c4:	e095      	b.n	800d3f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2c6:	4b4e      	ldr	r3, [pc, #312]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	f003 020c 	and.w	r2, r3, #12
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d1eb      	bne.n	800d2b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 0302 	and.w	r3, r3, #2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d023      	beq.n	800d32c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f003 0304 	and.w	r3, r3, #4
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d005      	beq.n	800d2fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d2f0:	4b43      	ldr	r3, [pc, #268]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	4a42      	ldr	r2, [pc, #264]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d2f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d2fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 0308 	and.w	r3, r3, #8
 800d304:	2b00      	cmp	r3, #0
 800d306:	d007      	beq.n	800d318 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d308:	4b3d      	ldr	r3, [pc, #244]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d310:	4a3b      	ldr	r2, [pc, #236]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d316:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d318:	4b39      	ldr	r3, [pc, #228]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	4936      	ldr	r1, [pc, #216]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d326:	4313      	orrs	r3, r2
 800d328:	608b      	str	r3, [r1, #8]
 800d32a:	e008      	b.n	800d33e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2b80      	cmp	r3, #128	; 0x80
 800d330:	d105      	bne.n	800d33e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d332:	4b33      	ldr	r3, [pc, #204]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	4a32      	ldr	r2, [pc, #200]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d338:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d33c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d33e:	4b2f      	ldr	r3, [pc, #188]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f003 030f 	and.w	r3, r3, #15
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d21d      	bcs.n	800d388 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d34c:	4b2b      	ldr	r3, [pc, #172]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f023 020f 	bic.w	r2, r3, #15
 800d354:	4929      	ldr	r1, [pc, #164]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	4313      	orrs	r3, r2
 800d35a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d35c:	f7f9 f862 	bl	8006424 <HAL_GetTick>
 800d360:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d362:	e00a      	b.n	800d37a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d364:	f7f9 f85e 	bl	8006424 <HAL_GetTick>
 800d368:	4602      	mov	r2, r0
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d372:	4293      	cmp	r3, r2
 800d374:	d901      	bls.n	800d37a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e03b      	b.n	800d3f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d37a:	4b20      	ldr	r3, [pc, #128]	; (800d3fc <HAL_RCC_ClockConfig+0x260>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	429a      	cmp	r2, r3
 800d386:	d1ed      	bne.n	800d364 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f003 0304 	and.w	r3, r3, #4
 800d390:	2b00      	cmp	r3, #0
 800d392:	d008      	beq.n	800d3a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d394:	4b1a      	ldr	r3, [pc, #104]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	4917      	ldr	r1, [pc, #92]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f003 0308 	and.w	r3, r3, #8
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d009      	beq.n	800d3c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d3b2:	4b13      	ldr	r3, [pc, #76]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	691b      	ldr	r3, [r3, #16]
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	490f      	ldr	r1, [pc, #60]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d3c6:	f000 f825 	bl	800d414 <HAL_RCC_GetSysClockFreq>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <HAL_RCC_ClockConfig+0x264>)
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	091b      	lsrs	r3, r3, #4
 800d3d2:	f003 030f 	and.w	r3, r3, #15
 800d3d6:	490c      	ldr	r1, [pc, #48]	; (800d408 <HAL_RCC_ClockConfig+0x26c>)
 800d3d8:	5ccb      	ldrb	r3, [r1, r3]
 800d3da:	f003 031f 	and.w	r3, r3, #31
 800d3de:	fa22 f303 	lsr.w	r3, r2, r3
 800d3e2:	4a0a      	ldr	r2, [pc, #40]	; (800d40c <HAL_RCC_ClockConfig+0x270>)
 800d3e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d3e6:	4b0a      	ldr	r3, [pc, #40]	; (800d410 <HAL_RCC_ClockConfig+0x274>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7f8 ffce 	bl	800638c <HAL_InitTick>
 800d3f0:	4603      	mov	r3, r0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	40022000 	.word	0x40022000
 800d400:	40021000 	.word	0x40021000
 800d404:	04c4b400 	.word	0x04c4b400
 800d408:	08018434 	.word	0x08018434
 800d40c:	20000000 	.word	0x20000000
 800d410:	20000004 	.word	0x20000004

0800d414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d414:	b480      	push	{r7}
 800d416:	b087      	sub	sp, #28
 800d418:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d41a:	4b2c      	ldr	r3, [pc, #176]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	f003 030c 	and.w	r3, r3, #12
 800d422:	2b04      	cmp	r3, #4
 800d424:	d102      	bne.n	800d42c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d426:	4b2a      	ldr	r3, [pc, #168]	; (800d4d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d428:	613b      	str	r3, [r7, #16]
 800d42a:	e047      	b.n	800d4bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d42c:	4b27      	ldr	r3, [pc, #156]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	f003 030c 	and.w	r3, r3, #12
 800d434:	2b08      	cmp	r3, #8
 800d436:	d102      	bne.n	800d43e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d438:	4b26      	ldr	r3, [pc, #152]	; (800d4d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d43a:	613b      	str	r3, [r7, #16]
 800d43c:	e03e      	b.n	800d4bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d43e:	4b23      	ldr	r3, [pc, #140]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f003 030c 	and.w	r3, r3, #12
 800d446:	2b0c      	cmp	r3, #12
 800d448:	d136      	bne.n	800d4b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d44a:	4b20      	ldr	r3, [pc, #128]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	f003 0303 	and.w	r3, r3, #3
 800d452:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d454:	4b1d      	ldr	r3, [pc, #116]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	091b      	lsrs	r3, r3, #4
 800d45a:	f003 030f 	and.w	r3, r3, #15
 800d45e:	3301      	adds	r3, #1
 800d460:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b03      	cmp	r3, #3
 800d466:	d10c      	bne.n	800d482 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d468:	4a1a      	ldr	r2, [pc, #104]	; (800d4d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d470:	4a16      	ldr	r2, [pc, #88]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d472:	68d2      	ldr	r2, [r2, #12]
 800d474:	0a12      	lsrs	r2, r2, #8
 800d476:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d47a:	fb02 f303 	mul.w	r3, r2, r3
 800d47e:	617b      	str	r3, [r7, #20]
      break;
 800d480:	e00c      	b.n	800d49c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d482:	4a13      	ldr	r2, [pc, #76]	; (800d4d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48a:	4a10      	ldr	r2, [pc, #64]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d48c:	68d2      	ldr	r2, [r2, #12]
 800d48e:	0a12      	lsrs	r2, r2, #8
 800d490:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d494:	fb02 f303 	mul.w	r3, r2, r3
 800d498:	617b      	str	r3, [r7, #20]
      break;
 800d49a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d49c:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	0e5b      	lsrs	r3, r3, #25
 800d4a2:	f003 0303 	and.w	r3, r3, #3
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b4:	613b      	str	r3, [r7, #16]
 800d4b6:	e001      	b.n	800d4bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d4bc:	693b      	ldr	r3, [r7, #16]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	371c      	adds	r7, #28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	40021000 	.word	0x40021000
 800d4d0:	00f42400 	.word	0x00f42400
 800d4d4:	007a1200 	.word	0x007a1200

0800d4d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d4dc:	4b03      	ldr	r3, [pc, #12]	; (800d4ec <HAL_RCC_GetHCLKFreq+0x14>)
 800d4de:	681b      	ldr	r3, [r3, #0]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop
 800d4ec:	20000000 	.word	0x20000000

0800d4f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d4f4:	f7ff fff0 	bl	800d4d8 <HAL_RCC_GetHCLKFreq>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	4b06      	ldr	r3, [pc, #24]	; (800d514 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	0a1b      	lsrs	r3, r3, #8
 800d500:	f003 0307 	and.w	r3, r3, #7
 800d504:	4904      	ldr	r1, [pc, #16]	; (800d518 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d506:	5ccb      	ldrb	r3, [r1, r3]
 800d508:	f003 031f 	and.w	r3, r3, #31
 800d50c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d510:	4618      	mov	r0, r3
 800d512:	bd80      	pop	{r7, pc}
 800d514:	40021000 	.word	0x40021000
 800d518:	08018444 	.word	0x08018444

0800d51c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d520:	f7ff ffda 	bl	800d4d8 <HAL_RCC_GetHCLKFreq>
 800d524:	4602      	mov	r2, r0
 800d526:	4b06      	ldr	r3, [pc, #24]	; (800d540 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	0adb      	lsrs	r3, r3, #11
 800d52c:	f003 0307 	and.w	r3, r3, #7
 800d530:	4904      	ldr	r1, [pc, #16]	; (800d544 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d532:	5ccb      	ldrb	r3, [r1, r3]
 800d534:	f003 031f 	and.w	r3, r3, #31
 800d538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	40021000 	.word	0x40021000
 800d544:	08018444 	.word	0x08018444

0800d548 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d54e:	4b1e      	ldr	r3, [pc, #120]	; (800d5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	f003 0303 	and.w	r3, r3, #3
 800d556:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d558:	4b1b      	ldr	r3, [pc, #108]	; (800d5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	091b      	lsrs	r3, r3, #4
 800d55e:	f003 030f 	and.w	r3, r3, #15
 800d562:	3301      	adds	r3, #1
 800d564:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d10c      	bne.n	800d586 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d56c:	4a17      	ldr	r2, [pc, #92]	; (800d5cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	fbb2 f3f3 	udiv	r3, r2, r3
 800d574:	4a14      	ldr	r2, [pc, #80]	; (800d5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d576:	68d2      	ldr	r2, [r2, #12]
 800d578:	0a12      	lsrs	r2, r2, #8
 800d57a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d57e:	fb02 f303 	mul.w	r3, r2, r3
 800d582:	617b      	str	r3, [r7, #20]
    break;
 800d584:	e00c      	b.n	800d5a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d586:	4a12      	ldr	r2, [pc, #72]	; (800d5d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d58e:	4a0e      	ldr	r2, [pc, #56]	; (800d5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d590:	68d2      	ldr	r2, [r2, #12]
 800d592:	0a12      	lsrs	r2, r2, #8
 800d594:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d598:	fb02 f303 	mul.w	r3, r2, r3
 800d59c:	617b      	str	r3, [r7, #20]
    break;
 800d59e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d5a0:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	0e5b      	lsrs	r3, r3, #25
 800d5a6:	f003 0303 	and.w	r3, r3, #3
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d5ba:	687b      	ldr	r3, [r7, #4]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	371c      	adds	r7, #28
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	40021000 	.word	0x40021000
 800d5cc:	007a1200 	.word	0x007a1200
 800d5d0:	00f42400 	.word	0x00f42400

0800d5d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d5dc:	2300      	movs	r3, #0
 800d5de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 8098 	beq.w	800d722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d5f6:	4b43      	ldr	r3, [pc, #268]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10d      	bne.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d602:	4b40      	ldr	r3, [pc, #256]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d606:	4a3f      	ldr	r2, [pc, #252]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d60c:	6593      	str	r3, [r2, #88]	; 0x58
 800d60e:	4b3d      	ldr	r3, [pc, #244]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d616:	60bb      	str	r3, [r7, #8]
 800d618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d61a:	2301      	movs	r3, #1
 800d61c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d61e:	4b3a      	ldr	r3, [pc, #232]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a39      	ldr	r2, [pc, #228]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d62a:	f7f8 fefb 	bl	8006424 <HAL_GetTick>
 800d62e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d630:	e009      	b.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d632:	f7f8 fef7 	bl	8006424 <HAL_GetTick>
 800d636:	4602      	mov	r2, r0
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d902      	bls.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d640:	2303      	movs	r3, #3
 800d642:	74fb      	strb	r3, [r7, #19]
        break;
 800d644:	e005      	b.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d646:	4b30      	ldr	r3, [pc, #192]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d0ef      	beq.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d652:	7cfb      	ldrb	r3, [r7, #19]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d159      	bne.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d658:	4b2a      	ldr	r3, [pc, #168]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d662:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d01e      	beq.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d66e:	697a      	ldr	r2, [r7, #20]
 800d670:	429a      	cmp	r2, r3
 800d672:	d019      	beq.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d674:	4b23      	ldr	r3, [pc, #140]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d67a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d67e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d680:	4b20      	ldr	r3, [pc, #128]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d686:	4a1f      	ldr	r2, [pc, #124]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d68c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d690:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d696:	4a1b      	ldr	r2, [pc, #108]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d69c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d6a0:	4a18      	ldr	r2, [pc, #96]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d016      	beq.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6b2:	f7f8 feb7 	bl	8006424 <HAL_GetTick>
 800d6b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d6b8:	e00b      	b.n	800d6d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6ba:	f7f8 feb3 	bl	8006424 <HAL_GetTick>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d902      	bls.n	800d6d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	74fb      	strb	r3, [r7, #19]
            break;
 800d6d0:	e006      	b.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d6d2:	4b0c      	ldr	r3, [pc, #48]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6d8:	f003 0302 	and.w	r3, r3, #2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d0ec      	beq.n	800d6ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d6e0:	7cfb      	ldrb	r3, [r7, #19]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10b      	bne.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d6e6:	4b07      	ldr	r3, [pc, #28]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f4:	4903      	ldr	r1, [pc, #12]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d6fc:	e008      	b.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d6fe:	7cfb      	ldrb	r3, [r7, #19]
 800d700:	74bb      	strb	r3, [r7, #18]
 800d702:	e005      	b.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d704:	40021000 	.word	0x40021000
 800d708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d70c:	7cfb      	ldrb	r3, [r7, #19]
 800d70e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d710:	7c7b      	ldrb	r3, [r7, #17]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d105      	bne.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d716:	4ba7      	ldr	r3, [pc, #668]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d71a:	4aa6      	ldr	r2, [pc, #664]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d71c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00a      	beq.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d72e:	4ba1      	ldr	r3, [pc, #644]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d734:	f023 0203 	bic.w	r2, r3, #3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	499d      	ldr	r1, [pc, #628]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d73e:	4313      	orrs	r3, r2
 800d740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f003 0302 	and.w	r3, r3, #2
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00a      	beq.n	800d766 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d750:	4b98      	ldr	r3, [pc, #608]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d756:	f023 020c 	bic.w	r2, r3, #12
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	4995      	ldr	r1, [pc, #596]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d760:	4313      	orrs	r3, r2
 800d762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f003 0304 	and.w	r3, r3, #4
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00a      	beq.n	800d788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d772:	4b90      	ldr	r3, [pc, #576]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	498c      	ldr	r1, [pc, #560]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d782:	4313      	orrs	r3, r2
 800d784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f003 0308 	and.w	r3, r3, #8
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00a      	beq.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d794:	4b87      	ldr	r3, [pc, #540]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d79a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	4984      	ldr	r1, [pc, #528]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 0310 	and.w	r3, r3, #16
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00a      	beq.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d7b6:	4b7f      	ldr	r3, [pc, #508]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	695b      	ldr	r3, [r3, #20]
 800d7c4:	497b      	ldr	r1, [pc, #492]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f003 0320 	and.w	r3, r3, #32
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00a      	beq.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d7d8:	4b76      	ldr	r3, [pc, #472]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	4973      	ldr	r1, [pc, #460]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d7fa:	4b6e      	ldr	r3, [pc, #440]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d800:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	69db      	ldr	r3, [r3, #28]
 800d808:	496a      	ldr	r1, [pc, #424]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00a      	beq.n	800d832 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d81c:	4b65      	ldr	r3, [pc, #404]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d822:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	4962      	ldr	r1, [pc, #392]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d82c:	4313      	orrs	r3, r2
 800d82e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00a      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d83e:	4b5d      	ldr	r3, [pc, #372]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84c:	4959      	ldr	r1, [pc, #356]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d84e:	4313      	orrs	r3, r2
 800d850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00a      	beq.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d860:	4b54      	ldr	r3, [pc, #336]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d866:	f023 0203 	bic.w	r2, r3, #3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86e:	4951      	ldr	r1, [pc, #324]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d870:	4313      	orrs	r3, r2
 800d872:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00a      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d882:	4b4c      	ldr	r3, [pc, #304]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	4948      	ldr	r1, [pc, #288]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d892:	4313      	orrs	r3, r2
 800d894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d015      	beq.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d8a4:	4b43      	ldr	r3, [pc, #268]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b2:	4940      	ldr	r1, [pc, #256]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8c2:	d105      	bne.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8c4:	4b3b      	ldr	r3, [pc, #236]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	4a3a      	ldr	r2, [pc, #232]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d015      	beq.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d8dc:	4b35      	ldr	r3, [pc, #212]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ea:	4932      	ldr	r1, [pc, #200]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d8fa:	d105      	bne.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8fc:	4b2d      	ldr	r3, [pc, #180]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	4a2c      	ldr	r2, [pc, #176]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d906:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d015      	beq.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d914:	4b27      	ldr	r3, [pc, #156]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d91a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d922:	4924      	ldr	r1, [pc, #144]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d924:	4313      	orrs	r3, r2
 800d926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d932:	d105      	bne.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d934:	4b1f      	ldr	r3, [pc, #124]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	4a1e      	ldr	r2, [pc, #120]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d93e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d015      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d94c:	4b19      	ldr	r3, [pc, #100]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d95a:	4916      	ldr	r1, [pc, #88]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d96a:	d105      	bne.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d96c:	4b11      	ldr	r3, [pc, #68]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	4a10      	ldr	r2, [pc, #64]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d976:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d019      	beq.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d984:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d98a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	4908      	ldr	r1, [pc, #32]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d994:	4313      	orrs	r3, r2
 800d996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d9a2:	d109      	bne.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9a4:	4b03      	ldr	r3, [pc, #12]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	4a02      	ldr	r2, [pc, #8]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9ae:	60d3      	str	r3, [r2, #12]
 800d9b0:	e002      	b.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d9b2:	bf00      	nop
 800d9b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d015      	beq.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d9c4:	4b29      	ldr	r3, [pc, #164]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9d2:	4926      	ldr	r1, [pc, #152]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9e2:	d105      	bne.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d9e4:	4b21      	ldr	r3, [pc, #132]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	4a20      	ldr	r2, [pc, #128]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d015      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d9fc:	4b1b      	ldr	r3, [pc, #108]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da02:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da0a:	4918      	ldr	r1, [pc, #96]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da0c:	4313      	orrs	r3, r2
 800da0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da1a:	d105      	bne.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800da1c:	4b13      	ldr	r3, [pc, #76]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	4a12      	ldr	r2, [pc, #72]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d015      	beq.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800da34:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da42:	490a      	ldr	r1, [pc, #40]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da44:	4313      	orrs	r3, r2
 800da46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da52:	d105      	bne.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da54:	4b05      	ldr	r3, [pc, #20]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	4a04      	ldr	r2, [pc, #16]	; (800da6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800da60:	7cbb      	ldrb	r3, [r7, #18]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	40021000 	.word	0x40021000

0800da70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d101      	bne.n	800da82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	e049      	b.n	800db16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d106      	bne.n	800da9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7f8 f80a 	bl	8005ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2202      	movs	r2, #2
 800daa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3304      	adds	r3, #4
 800daac:	4619      	mov	r1, r3
 800daae:	4610      	mov	r0, r2
 800dab0:	f000 fbc8 	bl	800e244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	e049      	b.n	800dbc4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db36:	b2db      	uxtb	r3, r3
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d106      	bne.n	800db4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7f8 f835 	bl	8005bb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2202      	movs	r2, #2
 800db4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	3304      	adds	r3, #4
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f000 fb71 	bl	800e244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2201      	movs	r2, #1
 800db9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d109      	bne.n	800dbf0 <HAL_TIM_PWM_Start+0x24>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	bf14      	ite	ne
 800dbe8:	2301      	movne	r3, #1
 800dbea:	2300      	moveq	r3, #0
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	e03c      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	2b04      	cmp	r3, #4
 800dbf4:	d109      	bne.n	800dc0a <HAL_TIM_PWM_Start+0x3e>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	bf14      	ite	ne
 800dc02:	2301      	movne	r3, #1
 800dc04:	2300      	moveq	r3, #0
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	e02f      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2b08      	cmp	r3, #8
 800dc0e:	d109      	bne.n	800dc24 <HAL_TIM_PWM_Start+0x58>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	bf14      	ite	ne
 800dc1c:	2301      	movne	r3, #1
 800dc1e:	2300      	moveq	r3, #0
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	e022      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	2b0c      	cmp	r3, #12
 800dc28:	d109      	bne.n	800dc3e <HAL_TIM_PWM_Start+0x72>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	bf14      	ite	ne
 800dc36:	2301      	movne	r3, #1
 800dc38:	2300      	moveq	r3, #0
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	e015      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b10      	cmp	r3, #16
 800dc42:	d109      	bne.n	800dc58 <HAL_TIM_PWM_Start+0x8c>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	bf14      	ite	ne
 800dc50:	2301      	movne	r3, #1
 800dc52:	2300      	moveq	r3, #0
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	e008      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	bf14      	ite	ne
 800dc64:	2301      	movne	r3, #1
 800dc66:	2300      	moveq	r3, #0
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e0a6      	b.n	800ddc0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d104      	bne.n	800dc82 <HAL_TIM_PWM_Start+0xb6>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2202      	movs	r2, #2
 800dc7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc80:	e023      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	2b04      	cmp	r3, #4
 800dc86:	d104      	bne.n	800dc92 <HAL_TIM_PWM_Start+0xc6>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2202      	movs	r2, #2
 800dc8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc90:	e01b      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b08      	cmp	r3, #8
 800dc96:	d104      	bne.n	800dca2 <HAL_TIM_PWM_Start+0xd6>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2202      	movs	r2, #2
 800dc9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dca0:	e013      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b0c      	cmp	r3, #12
 800dca6:	d104      	bne.n	800dcb2 <HAL_TIM_PWM_Start+0xe6>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2202      	movs	r2, #2
 800dcac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcb0:	e00b      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b10      	cmp	r3, #16
 800dcb6:	d104      	bne.n	800dcc2 <HAL_TIM_PWM_Start+0xf6>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2202      	movs	r2, #2
 800dcbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcc0:	e003      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 ff24 	bl	800eb20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a3a      	ldr	r2, [pc, #232]	; (800ddc8 <HAL_TIM_PWM_Start+0x1fc>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d018      	beq.n	800dd14 <HAL_TIM_PWM_Start+0x148>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a39      	ldr	r2, [pc, #228]	; (800ddcc <HAL_TIM_PWM_Start+0x200>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d013      	beq.n	800dd14 <HAL_TIM_PWM_Start+0x148>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a37      	ldr	r2, [pc, #220]	; (800ddd0 <HAL_TIM_PWM_Start+0x204>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d00e      	beq.n	800dd14 <HAL_TIM_PWM_Start+0x148>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a36      	ldr	r2, [pc, #216]	; (800ddd4 <HAL_TIM_PWM_Start+0x208>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d009      	beq.n	800dd14 <HAL_TIM_PWM_Start+0x148>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a34      	ldr	r2, [pc, #208]	; (800ddd8 <HAL_TIM_PWM_Start+0x20c>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d004      	beq.n	800dd14 <HAL_TIM_PWM_Start+0x148>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a33      	ldr	r2, [pc, #204]	; (800dddc <HAL_TIM_PWM_Start+0x210>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d101      	bne.n	800dd18 <HAL_TIM_PWM_Start+0x14c>
 800dd14:	2301      	movs	r3, #1
 800dd16:	e000      	b.n	800dd1a <HAL_TIM_PWM_Start+0x14e>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d007      	beq.n	800dd2e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a25      	ldr	r2, [pc, #148]	; (800ddc8 <HAL_TIM_PWM_Start+0x1fc>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d022      	beq.n	800dd7e <HAL_TIM_PWM_Start+0x1b2>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd40:	d01d      	beq.n	800dd7e <HAL_TIM_PWM_Start+0x1b2>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a26      	ldr	r2, [pc, #152]	; (800dde0 <HAL_TIM_PWM_Start+0x214>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d018      	beq.n	800dd7e <HAL_TIM_PWM_Start+0x1b2>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a24      	ldr	r2, [pc, #144]	; (800dde4 <HAL_TIM_PWM_Start+0x218>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d013      	beq.n	800dd7e <HAL_TIM_PWM_Start+0x1b2>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a23      	ldr	r2, [pc, #140]	; (800dde8 <HAL_TIM_PWM_Start+0x21c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d00e      	beq.n	800dd7e <HAL_TIM_PWM_Start+0x1b2>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a19      	ldr	r2, [pc, #100]	; (800ddcc <HAL_TIM_PWM_Start+0x200>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d009      	beq.n	800dd7e <HAL_TIM_PWM_Start+0x1b2>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a18      	ldr	r2, [pc, #96]	; (800ddd0 <HAL_TIM_PWM_Start+0x204>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d004      	beq.n	800dd7e <HAL_TIM_PWM_Start+0x1b2>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a18      	ldr	r2, [pc, #96]	; (800dddc <HAL_TIM_PWM_Start+0x210>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d115      	bne.n	800ddaa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	689a      	ldr	r2, [r3, #8]
 800dd84:	4b19      	ldr	r3, [pc, #100]	; (800ddec <HAL_TIM_PWM_Start+0x220>)
 800dd86:	4013      	ands	r3, r2
 800dd88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2b06      	cmp	r3, #6
 800dd8e:	d015      	beq.n	800ddbc <HAL_TIM_PWM_Start+0x1f0>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd96:	d011      	beq.n	800ddbc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f042 0201 	orr.w	r2, r2, #1
 800dda6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dda8:	e008      	b.n	800ddbc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f042 0201 	orr.w	r2, r2, #1
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	e000      	b.n	800ddbe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	40012c00 	.word	0x40012c00
 800ddcc:	40013400 	.word	0x40013400
 800ddd0:	40014000 	.word	0x40014000
 800ddd4:	40014400 	.word	0x40014400
 800ddd8:	40014800 	.word	0x40014800
 800dddc:	40015000 	.word	0x40015000
 800dde0:	40000400 	.word	0x40000400
 800dde4:	40000800 	.word	0x40000800
 800dde8:	40000c00 	.word	0x40000c00
 800ddec:	00010007 	.word	0x00010007

0800ddf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de06:	2b01      	cmp	r3, #1
 800de08:	d101      	bne.n	800de0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de0a:	2302      	movs	r3, #2
 800de0c:	e0ff      	b.n	800e00e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2b14      	cmp	r3, #20
 800de1a:	f200 80f0 	bhi.w	800dffe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800de1e:	a201      	add	r2, pc, #4	; (adr r2, 800de24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800de20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de24:	0800de79 	.word	0x0800de79
 800de28:	0800dfff 	.word	0x0800dfff
 800de2c:	0800dfff 	.word	0x0800dfff
 800de30:	0800dfff 	.word	0x0800dfff
 800de34:	0800deb9 	.word	0x0800deb9
 800de38:	0800dfff 	.word	0x0800dfff
 800de3c:	0800dfff 	.word	0x0800dfff
 800de40:	0800dfff 	.word	0x0800dfff
 800de44:	0800defb 	.word	0x0800defb
 800de48:	0800dfff 	.word	0x0800dfff
 800de4c:	0800dfff 	.word	0x0800dfff
 800de50:	0800dfff 	.word	0x0800dfff
 800de54:	0800df3b 	.word	0x0800df3b
 800de58:	0800dfff 	.word	0x0800dfff
 800de5c:	0800dfff 	.word	0x0800dfff
 800de60:	0800dfff 	.word	0x0800dfff
 800de64:	0800df7d 	.word	0x0800df7d
 800de68:	0800dfff 	.word	0x0800dfff
 800de6c:	0800dfff 	.word	0x0800dfff
 800de70:	0800dfff 	.word	0x0800dfff
 800de74:	0800dfbd 	.word	0x0800dfbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	68b9      	ldr	r1, [r7, #8]
 800de7e:	4618      	mov	r0, r3
 800de80:	f000 fa88 	bl	800e394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	699a      	ldr	r2, [r3, #24]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f042 0208 	orr.w	r2, r2, #8
 800de92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	699a      	ldr	r2, [r3, #24]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f022 0204 	bic.w	r2, r2, #4
 800dea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	6999      	ldr	r1, [r3, #24]
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	691a      	ldr	r2, [r3, #16]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	430a      	orrs	r2, r1
 800deb4:	619a      	str	r2, [r3, #24]
      break;
 800deb6:	e0a5      	b.n	800e004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68b9      	ldr	r1, [r7, #8]
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 fb02 	bl	800e4c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	699a      	ldr	r2, [r3, #24]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ded2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	699a      	ldr	r2, [r3, #24]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6999      	ldr	r1, [r3, #24]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	021a      	lsls	r2, r3, #8
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	430a      	orrs	r2, r1
 800def6:	619a      	str	r2, [r3, #24]
      break;
 800def8:	e084      	b.n	800e004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	68b9      	ldr	r1, [r7, #8]
 800df00:	4618      	mov	r0, r3
 800df02:	f000 fb75 	bl	800e5f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	69da      	ldr	r2, [r3, #28]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f042 0208 	orr.w	r2, r2, #8
 800df14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	69da      	ldr	r2, [r3, #28]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f022 0204 	bic.w	r2, r2, #4
 800df24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	69d9      	ldr	r1, [r3, #28]
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	691a      	ldr	r2, [r3, #16]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	430a      	orrs	r2, r1
 800df36:	61da      	str	r2, [r3, #28]
      break;
 800df38:	e064      	b.n	800e004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	68b9      	ldr	r1, [r7, #8]
 800df40:	4618      	mov	r0, r3
 800df42:	f000 fbe7 	bl	800e714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	69da      	ldr	r2, [r3, #28]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	69da      	ldr	r2, [r3, #28]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	69d9      	ldr	r1, [r3, #28]
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	021a      	lsls	r2, r3, #8
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	430a      	orrs	r2, r1
 800df78:	61da      	str	r2, [r3, #28]
      break;
 800df7a:	e043      	b.n	800e004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68b9      	ldr	r1, [r7, #8]
 800df82:	4618      	mov	r0, r3
 800df84:	f000 fc5a 	bl	800e83c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f042 0208 	orr.w	r2, r2, #8
 800df96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f022 0204 	bic.w	r2, r2, #4
 800dfa6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	691a      	ldr	r2, [r3, #16]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dfba:	e023      	b.n	800e004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f000 fca4 	bl	800e910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfe6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	021a      	lsls	r2, r3, #8
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	430a      	orrs	r2, r1
 800dffa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dffc:	e002      	b.n	800e004 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	75fb      	strb	r3, [r7, #23]
      break;
 800e002:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3718      	adds	r7, #24
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop

0800e018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d101      	bne.n	800e034 <HAL_TIM_ConfigClockSource+0x1c>
 800e030:	2302      	movs	r3, #2
 800e032:	e0f6      	b.n	800e222 <HAL_TIM_ConfigClockSource+0x20a>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2202      	movs	r2, #2
 800e040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e05e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a6f      	ldr	r2, [pc, #444]	; (800e22c <HAL_TIM_ConfigClockSource+0x214>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	f000 80c1 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e074:	4a6d      	ldr	r2, [pc, #436]	; (800e22c <HAL_TIM_ConfigClockSource+0x214>)
 800e076:	4293      	cmp	r3, r2
 800e078:	f200 80c6 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e07c:	4a6c      	ldr	r2, [pc, #432]	; (800e230 <HAL_TIM_ConfigClockSource+0x218>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	f000 80b9 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e084:	4a6a      	ldr	r2, [pc, #424]	; (800e230 <HAL_TIM_ConfigClockSource+0x218>)
 800e086:	4293      	cmp	r3, r2
 800e088:	f200 80be 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e08c:	4a69      	ldr	r2, [pc, #420]	; (800e234 <HAL_TIM_ConfigClockSource+0x21c>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	f000 80b1 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e094:	4a67      	ldr	r2, [pc, #412]	; (800e234 <HAL_TIM_ConfigClockSource+0x21c>)
 800e096:	4293      	cmp	r3, r2
 800e098:	f200 80b6 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e09c:	4a66      	ldr	r2, [pc, #408]	; (800e238 <HAL_TIM_ConfigClockSource+0x220>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	f000 80a9 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e0a4:	4a64      	ldr	r2, [pc, #400]	; (800e238 <HAL_TIM_ConfigClockSource+0x220>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	f200 80ae 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0ac:	4a63      	ldr	r2, [pc, #396]	; (800e23c <HAL_TIM_ConfigClockSource+0x224>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	f000 80a1 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e0b4:	4a61      	ldr	r2, [pc, #388]	; (800e23c <HAL_TIM_ConfigClockSource+0x224>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	f200 80a6 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0bc:	4a60      	ldr	r2, [pc, #384]	; (800e240 <HAL_TIM_ConfigClockSource+0x228>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	f000 8099 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e0c4:	4a5e      	ldr	r2, [pc, #376]	; (800e240 <HAL_TIM_ConfigClockSource+0x228>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	f200 809e 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e0d0:	f000 8091 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e0d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e0d8:	f200 8096 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0e0:	f000 8089 	beq.w	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e0e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0e8:	f200 808e 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0f0:	d03e      	beq.n	800e170 <HAL_TIM_ConfigClockSource+0x158>
 800e0f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0f6:	f200 8087 	bhi.w	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0fe:	f000 8086 	beq.w	800e20e <HAL_TIM_ConfigClockSource+0x1f6>
 800e102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e106:	d87f      	bhi.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e108:	2b70      	cmp	r3, #112	; 0x70
 800e10a:	d01a      	beq.n	800e142 <HAL_TIM_ConfigClockSource+0x12a>
 800e10c:	2b70      	cmp	r3, #112	; 0x70
 800e10e:	d87b      	bhi.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e110:	2b60      	cmp	r3, #96	; 0x60
 800e112:	d050      	beq.n	800e1b6 <HAL_TIM_ConfigClockSource+0x19e>
 800e114:	2b60      	cmp	r3, #96	; 0x60
 800e116:	d877      	bhi.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e118:	2b50      	cmp	r3, #80	; 0x50
 800e11a:	d03c      	beq.n	800e196 <HAL_TIM_ConfigClockSource+0x17e>
 800e11c:	2b50      	cmp	r3, #80	; 0x50
 800e11e:	d873      	bhi.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e120:	2b40      	cmp	r3, #64	; 0x40
 800e122:	d058      	beq.n	800e1d6 <HAL_TIM_ConfigClockSource+0x1be>
 800e124:	2b40      	cmp	r3, #64	; 0x40
 800e126:	d86f      	bhi.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e128:	2b30      	cmp	r3, #48	; 0x30
 800e12a:	d064      	beq.n	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e12c:	2b30      	cmp	r3, #48	; 0x30
 800e12e:	d86b      	bhi.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e130:	2b20      	cmp	r3, #32
 800e132:	d060      	beq.n	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e134:	2b20      	cmp	r3, #32
 800e136:	d867      	bhi.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d05c      	beq.n	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e13c:	2b10      	cmp	r3, #16
 800e13e:	d05a      	beq.n	800e1f6 <HAL_TIM_ConfigClockSource+0x1de>
 800e140:	e062      	b.n	800e208 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6818      	ldr	r0, [r3, #0]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	6899      	ldr	r1, [r3, #8]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	685a      	ldr	r2, [r3, #4]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	f000 fcc5 	bl	800eae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	609a      	str	r2, [r3, #8]
      break;
 800e16e:	e04f      	b.n	800e210 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6818      	ldr	r0, [r3, #0]
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	6899      	ldr	r1, [r3, #8]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	f000 fcae 	bl	800eae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689a      	ldr	r2, [r3, #8]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e192:	609a      	str	r2, [r3, #8]
      break;
 800e194:	e03c      	b.n	800e210 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	6859      	ldr	r1, [r3, #4]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	f000 fc20 	bl	800e9e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2150      	movs	r1, #80	; 0x50
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 fc79 	bl	800eaa6 <TIM_ITRx_SetConfig>
      break;
 800e1b4:	e02c      	b.n	800e210 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6818      	ldr	r0, [r3, #0]
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	6859      	ldr	r1, [r3, #4]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	f000 fc3f 	bl	800ea46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2160      	movs	r1, #96	; 0x60
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f000 fc69 	bl	800eaa6 <TIM_ITRx_SetConfig>
      break;
 800e1d4:	e01c      	b.n	800e210 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6818      	ldr	r0, [r3, #0]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	6859      	ldr	r1, [r3, #4]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	f000 fc00 	bl	800e9e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2140      	movs	r1, #64	; 0x40
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f000 fc59 	bl	800eaa6 <TIM_ITRx_SetConfig>
      break;
 800e1f4:	e00c      	b.n	800e210 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4619      	mov	r1, r3
 800e200:	4610      	mov	r0, r2
 800e202:	f000 fc50 	bl	800eaa6 <TIM_ITRx_SetConfig>
      break;
 800e206:	e003      	b.n	800e210 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e208:	2301      	movs	r3, #1
 800e20a:	73fb      	strb	r3, [r7, #15]
      break;
 800e20c:	e000      	b.n	800e210 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e20e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e220:	7bfb      	ldrb	r3, [r7, #15]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	00100070 	.word	0x00100070
 800e230:	00100060 	.word	0x00100060
 800e234:	00100050 	.word	0x00100050
 800e238:	00100040 	.word	0x00100040
 800e23c:	00100030 	.word	0x00100030
 800e240:	00100020 	.word	0x00100020

0800e244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4a46      	ldr	r2, [pc, #280]	; (800e370 <TIM_Base_SetConfig+0x12c>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d017      	beq.n	800e28c <TIM_Base_SetConfig+0x48>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e262:	d013      	beq.n	800e28c <TIM_Base_SetConfig+0x48>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a43      	ldr	r2, [pc, #268]	; (800e374 <TIM_Base_SetConfig+0x130>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d00f      	beq.n	800e28c <TIM_Base_SetConfig+0x48>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4a42      	ldr	r2, [pc, #264]	; (800e378 <TIM_Base_SetConfig+0x134>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d00b      	beq.n	800e28c <TIM_Base_SetConfig+0x48>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a41      	ldr	r2, [pc, #260]	; (800e37c <TIM_Base_SetConfig+0x138>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d007      	beq.n	800e28c <TIM_Base_SetConfig+0x48>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a40      	ldr	r2, [pc, #256]	; (800e380 <TIM_Base_SetConfig+0x13c>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d003      	beq.n	800e28c <TIM_Base_SetConfig+0x48>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4a3f      	ldr	r2, [pc, #252]	; (800e384 <TIM_Base_SetConfig+0x140>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d108      	bne.n	800e29e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4a33      	ldr	r2, [pc, #204]	; (800e370 <TIM_Base_SetConfig+0x12c>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d023      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ac:	d01f      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4a30      	ldr	r2, [pc, #192]	; (800e374 <TIM_Base_SetConfig+0x130>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d01b      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4a2f      	ldr	r2, [pc, #188]	; (800e378 <TIM_Base_SetConfig+0x134>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d017      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4a2e      	ldr	r2, [pc, #184]	; (800e37c <TIM_Base_SetConfig+0x138>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d013      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4a2d      	ldr	r2, [pc, #180]	; (800e380 <TIM_Base_SetConfig+0x13c>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d00f      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4a2d      	ldr	r2, [pc, #180]	; (800e388 <TIM_Base_SetConfig+0x144>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d00b      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4a2c      	ldr	r2, [pc, #176]	; (800e38c <TIM_Base_SetConfig+0x148>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d007      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	4a2b      	ldr	r2, [pc, #172]	; (800e390 <TIM_Base_SetConfig+0x14c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d003      	beq.n	800e2ee <TIM_Base_SetConfig+0xaa>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4a26      	ldr	r2, [pc, #152]	; (800e384 <TIM_Base_SetConfig+0x140>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d108      	bne.n	800e300 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	695b      	ldr	r3, [r3, #20]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	689a      	ldr	r2, [r3, #8]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a12      	ldr	r2, [pc, #72]	; (800e370 <TIM_Base_SetConfig+0x12c>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d013      	beq.n	800e354 <TIM_Base_SetConfig+0x110>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a14      	ldr	r2, [pc, #80]	; (800e380 <TIM_Base_SetConfig+0x13c>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d00f      	beq.n	800e354 <TIM_Base_SetConfig+0x110>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	4a14      	ldr	r2, [pc, #80]	; (800e388 <TIM_Base_SetConfig+0x144>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d00b      	beq.n	800e354 <TIM_Base_SetConfig+0x110>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a13      	ldr	r2, [pc, #76]	; (800e38c <TIM_Base_SetConfig+0x148>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d007      	beq.n	800e354 <TIM_Base_SetConfig+0x110>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a12      	ldr	r2, [pc, #72]	; (800e390 <TIM_Base_SetConfig+0x14c>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d003      	beq.n	800e354 <TIM_Base_SetConfig+0x110>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4a0d      	ldr	r2, [pc, #52]	; (800e384 <TIM_Base_SetConfig+0x140>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d103      	bne.n	800e35c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2201      	movs	r2, #1
 800e360:	615a      	str	r2, [r3, #20]
}
 800e362:	bf00      	nop
 800e364:	3714      	adds	r7, #20
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	40012c00 	.word	0x40012c00
 800e374:	40000400 	.word	0x40000400
 800e378:	40000800 	.word	0x40000800
 800e37c:	40000c00 	.word	0x40000c00
 800e380:	40013400 	.word	0x40013400
 800e384:	40015000 	.word	0x40015000
 800e388:	40014000 	.word	0x40014000
 800e38c:	40014400 	.word	0x40014400
 800e390:	40014800 	.word	0x40014800

0800e394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e394:	b480      	push	{r7}
 800e396:	b087      	sub	sp, #28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	f023 0201 	bic.w	r2, r3, #1
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f023 0303 	bic.w	r3, r3, #3
 800e3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	f023 0302 	bic.w	r3, r3, #2
 800e3e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	4a30      	ldr	r2, [pc, #192]	; (800e4b0 <TIM_OC1_SetConfig+0x11c>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d013      	beq.n	800e41c <TIM_OC1_SetConfig+0x88>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4a2f      	ldr	r2, [pc, #188]	; (800e4b4 <TIM_OC1_SetConfig+0x120>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d00f      	beq.n	800e41c <TIM_OC1_SetConfig+0x88>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	4a2e      	ldr	r2, [pc, #184]	; (800e4b8 <TIM_OC1_SetConfig+0x124>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d00b      	beq.n	800e41c <TIM_OC1_SetConfig+0x88>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	4a2d      	ldr	r2, [pc, #180]	; (800e4bc <TIM_OC1_SetConfig+0x128>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d007      	beq.n	800e41c <TIM_OC1_SetConfig+0x88>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4a2c      	ldr	r2, [pc, #176]	; (800e4c0 <TIM_OC1_SetConfig+0x12c>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d003      	beq.n	800e41c <TIM_OC1_SetConfig+0x88>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	4a2b      	ldr	r2, [pc, #172]	; (800e4c4 <TIM_OC1_SetConfig+0x130>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d10c      	bne.n	800e436 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	f023 0308 	bic.w	r3, r3, #8
 800e422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f023 0304 	bic.w	r3, r3, #4
 800e434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4a1d      	ldr	r2, [pc, #116]	; (800e4b0 <TIM_OC1_SetConfig+0x11c>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d013      	beq.n	800e466 <TIM_OC1_SetConfig+0xd2>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4a1c      	ldr	r2, [pc, #112]	; (800e4b4 <TIM_OC1_SetConfig+0x120>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d00f      	beq.n	800e466 <TIM_OC1_SetConfig+0xd2>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4a1b      	ldr	r2, [pc, #108]	; (800e4b8 <TIM_OC1_SetConfig+0x124>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d00b      	beq.n	800e466 <TIM_OC1_SetConfig+0xd2>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a1a      	ldr	r2, [pc, #104]	; (800e4bc <TIM_OC1_SetConfig+0x128>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d007      	beq.n	800e466 <TIM_OC1_SetConfig+0xd2>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	4a19      	ldr	r2, [pc, #100]	; (800e4c0 <TIM_OC1_SetConfig+0x12c>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d003      	beq.n	800e466 <TIM_OC1_SetConfig+0xd2>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	4a18      	ldr	r2, [pc, #96]	; (800e4c4 <TIM_OC1_SetConfig+0x130>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d111      	bne.n	800e48a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e46c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	693a      	ldr	r2, [r7, #16]
 800e486:	4313      	orrs	r3, r2
 800e488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	68fa      	ldr	r2, [r7, #12]
 800e494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	685a      	ldr	r2, [r3, #4]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	621a      	str	r2, [r3, #32]
}
 800e4a4:	bf00      	nop
 800e4a6:	371c      	adds	r7, #28
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr
 800e4b0:	40012c00 	.word	0x40012c00
 800e4b4:	40013400 	.word	0x40013400
 800e4b8:	40014000 	.word	0x40014000
 800e4bc:	40014400 	.word	0x40014400
 800e4c0:	40014800 	.word	0x40014800
 800e4c4:	40015000 	.word	0x40015000

0800e4c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b087      	sub	sp, #28
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a1b      	ldr	r3, [r3, #32]
 800e4d6:	f023 0210 	bic.w	r2, r3, #16
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6a1b      	ldr	r3, [r3, #32]
 800e4e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	021b      	lsls	r3, r3, #8
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	4313      	orrs	r3, r2
 800e50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f023 0320 	bic.w	r3, r3, #32
 800e516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	011b      	lsls	r3, r3, #4
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	4313      	orrs	r3, r2
 800e522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4a2c      	ldr	r2, [pc, #176]	; (800e5d8 <TIM_OC2_SetConfig+0x110>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d007      	beq.n	800e53c <TIM_OC2_SetConfig+0x74>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a2b      	ldr	r2, [pc, #172]	; (800e5dc <TIM_OC2_SetConfig+0x114>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d003      	beq.n	800e53c <TIM_OC2_SetConfig+0x74>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a2a      	ldr	r2, [pc, #168]	; (800e5e0 <TIM_OC2_SetConfig+0x118>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d10d      	bne.n	800e558 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	011b      	lsls	r3, r3, #4
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	4313      	orrs	r3, r2
 800e54e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a1f      	ldr	r2, [pc, #124]	; (800e5d8 <TIM_OC2_SetConfig+0x110>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d013      	beq.n	800e588 <TIM_OC2_SetConfig+0xc0>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a1e      	ldr	r2, [pc, #120]	; (800e5dc <TIM_OC2_SetConfig+0x114>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d00f      	beq.n	800e588 <TIM_OC2_SetConfig+0xc0>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a1e      	ldr	r2, [pc, #120]	; (800e5e4 <TIM_OC2_SetConfig+0x11c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d00b      	beq.n	800e588 <TIM_OC2_SetConfig+0xc0>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4a1d      	ldr	r2, [pc, #116]	; (800e5e8 <TIM_OC2_SetConfig+0x120>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d007      	beq.n	800e588 <TIM_OC2_SetConfig+0xc0>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4a1c      	ldr	r2, [pc, #112]	; (800e5ec <TIM_OC2_SetConfig+0x124>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d003      	beq.n	800e588 <TIM_OC2_SetConfig+0xc0>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4a17      	ldr	r2, [pc, #92]	; (800e5e0 <TIM_OC2_SetConfig+0x118>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d113      	bne.n	800e5b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e58e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	695b      	ldr	r3, [r3, #20]
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	699b      	ldr	r3, [r3, #24]
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	693a      	ldr	r2, [r7, #16]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	693a      	ldr	r2, [r7, #16]
 800e5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	68fa      	ldr	r2, [r7, #12]
 800e5ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	621a      	str	r2, [r3, #32]
}
 800e5ca:	bf00      	nop
 800e5cc:	371c      	adds	r7, #28
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	40012c00 	.word	0x40012c00
 800e5dc:	40013400 	.word	0x40013400
 800e5e0:	40015000 	.word	0x40015000
 800e5e4:	40014000 	.word	0x40014000
 800e5e8:	40014400 	.word	0x40014400
 800e5ec:	40014800 	.word	0x40014800

0800e5f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b087      	sub	sp, #28
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6a1b      	ldr	r3, [r3, #32]
 800e5fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a1b      	ldr	r3, [r3, #32]
 800e60a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	69db      	ldr	r3, [r3, #28]
 800e616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f023 0303 	bic.w	r3, r3, #3
 800e62a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	4313      	orrs	r3, r2
 800e634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e63c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	021b      	lsls	r3, r3, #8
 800e644:	697a      	ldr	r2, [r7, #20]
 800e646:	4313      	orrs	r3, r2
 800e648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a2b      	ldr	r2, [pc, #172]	; (800e6fc <TIM_OC3_SetConfig+0x10c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d007      	beq.n	800e662 <TIM_OC3_SetConfig+0x72>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a2a      	ldr	r2, [pc, #168]	; (800e700 <TIM_OC3_SetConfig+0x110>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d003      	beq.n	800e662 <TIM_OC3_SetConfig+0x72>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4a29      	ldr	r2, [pc, #164]	; (800e704 <TIM_OC3_SetConfig+0x114>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d10d      	bne.n	800e67e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	021b      	lsls	r3, r3, #8
 800e670:	697a      	ldr	r2, [r7, #20]
 800e672:	4313      	orrs	r3, r2
 800e674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e67c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a1e      	ldr	r2, [pc, #120]	; (800e6fc <TIM_OC3_SetConfig+0x10c>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d013      	beq.n	800e6ae <TIM_OC3_SetConfig+0xbe>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a1d      	ldr	r2, [pc, #116]	; (800e700 <TIM_OC3_SetConfig+0x110>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d00f      	beq.n	800e6ae <TIM_OC3_SetConfig+0xbe>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a1d      	ldr	r2, [pc, #116]	; (800e708 <TIM_OC3_SetConfig+0x118>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d00b      	beq.n	800e6ae <TIM_OC3_SetConfig+0xbe>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4a1c      	ldr	r2, [pc, #112]	; (800e70c <TIM_OC3_SetConfig+0x11c>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d007      	beq.n	800e6ae <TIM_OC3_SetConfig+0xbe>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a1b      	ldr	r2, [pc, #108]	; (800e710 <TIM_OC3_SetConfig+0x120>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d003      	beq.n	800e6ae <TIM_OC3_SetConfig+0xbe>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a16      	ldr	r2, [pc, #88]	; (800e704 <TIM_OC3_SetConfig+0x114>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d113      	bne.n	800e6d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e6bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	695b      	ldr	r3, [r3, #20]
 800e6c2:	011b      	lsls	r3, r3, #4
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	011b      	lsls	r3, r3, #4
 800e6d0:	693a      	ldr	r2, [r7, #16]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	697a      	ldr	r2, [r7, #20]
 800e6ee:	621a      	str	r2, [r3, #32]
}
 800e6f0:	bf00      	nop
 800e6f2:	371c      	adds	r7, #28
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	40012c00 	.word	0x40012c00
 800e700:	40013400 	.word	0x40013400
 800e704:	40015000 	.word	0x40015000
 800e708:	40014000 	.word	0x40014000
 800e70c:	40014400 	.word	0x40014400
 800e710:	40014800 	.word	0x40014800

0800e714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e714:	b480      	push	{r7}
 800e716:	b087      	sub	sp, #28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69db      	ldr	r3, [r3, #28]
 800e73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e74e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	021b      	lsls	r3, r3, #8
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	4313      	orrs	r3, r2
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	031b      	lsls	r3, r3, #12
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a2c      	ldr	r2, [pc, #176]	; (800e824 <TIM_OC4_SetConfig+0x110>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d007      	beq.n	800e788 <TIM_OC4_SetConfig+0x74>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	4a2b      	ldr	r2, [pc, #172]	; (800e828 <TIM_OC4_SetConfig+0x114>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d003      	beq.n	800e788 <TIM_OC4_SetConfig+0x74>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4a2a      	ldr	r2, [pc, #168]	; (800e82c <TIM_OC4_SetConfig+0x118>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d10d      	bne.n	800e7a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e78e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	031b      	lsls	r3, r3, #12
 800e796:	697a      	ldr	r2, [r7, #20]
 800e798:	4313      	orrs	r3, r2
 800e79a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a1f      	ldr	r2, [pc, #124]	; (800e824 <TIM_OC4_SetConfig+0x110>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d013      	beq.n	800e7d4 <TIM_OC4_SetConfig+0xc0>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a1e      	ldr	r2, [pc, #120]	; (800e828 <TIM_OC4_SetConfig+0x114>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d00f      	beq.n	800e7d4 <TIM_OC4_SetConfig+0xc0>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4a1e      	ldr	r2, [pc, #120]	; (800e830 <TIM_OC4_SetConfig+0x11c>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d00b      	beq.n	800e7d4 <TIM_OC4_SetConfig+0xc0>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a1d      	ldr	r2, [pc, #116]	; (800e834 <TIM_OC4_SetConfig+0x120>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d007      	beq.n	800e7d4 <TIM_OC4_SetConfig+0xc0>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a1c      	ldr	r2, [pc, #112]	; (800e838 <TIM_OC4_SetConfig+0x124>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d003      	beq.n	800e7d4 <TIM_OC4_SetConfig+0xc0>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4a17      	ldr	r2, [pc, #92]	; (800e82c <TIM_OC4_SetConfig+0x118>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d113      	bne.n	800e7fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e7e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	695b      	ldr	r3, [r3, #20]
 800e7e8:	019b      	lsls	r3, r3, #6
 800e7ea:	693a      	ldr	r2, [r7, #16]
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	019b      	lsls	r3, r3, #6
 800e7f6:	693a      	ldr	r2, [r7, #16]
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	693a      	ldr	r2, [r7, #16]
 800e800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	697a      	ldr	r2, [r7, #20]
 800e814:	621a      	str	r2, [r3, #32]
}
 800e816:	bf00      	nop
 800e818:	371c      	adds	r7, #28
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	40012c00 	.word	0x40012c00
 800e828:	40013400 	.word	0x40013400
 800e82c:	40015000 	.word	0x40015000
 800e830:	40014000 	.word	0x40014000
 800e834:	40014400 	.word	0x40014400
 800e838:	40014800 	.word	0x40014800

0800e83c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b087      	sub	sp, #28
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6a1b      	ldr	r3, [r3, #32]
 800e84a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	4313      	orrs	r3, r2
 800e878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e880:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	041b      	lsls	r3, r3, #16
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4a19      	ldr	r2, [pc, #100]	; (800e8f8 <TIM_OC5_SetConfig+0xbc>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d013      	beq.n	800e8be <TIM_OC5_SetConfig+0x82>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4a18      	ldr	r2, [pc, #96]	; (800e8fc <TIM_OC5_SetConfig+0xc0>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d00f      	beq.n	800e8be <TIM_OC5_SetConfig+0x82>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a17      	ldr	r2, [pc, #92]	; (800e900 <TIM_OC5_SetConfig+0xc4>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d00b      	beq.n	800e8be <TIM_OC5_SetConfig+0x82>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a16      	ldr	r2, [pc, #88]	; (800e904 <TIM_OC5_SetConfig+0xc8>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d007      	beq.n	800e8be <TIM_OC5_SetConfig+0x82>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4a15      	ldr	r2, [pc, #84]	; (800e908 <TIM_OC5_SetConfig+0xcc>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d003      	beq.n	800e8be <TIM_OC5_SetConfig+0x82>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a14      	ldr	r2, [pc, #80]	; (800e90c <TIM_OC5_SetConfig+0xd0>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d109      	bne.n	800e8d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	695b      	ldr	r3, [r3, #20]
 800e8ca:	021b      	lsls	r3, r3, #8
 800e8cc:	697a      	ldr	r2, [r7, #20]
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	697a      	ldr	r2, [r7, #20]
 800e8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	693a      	ldr	r2, [r7, #16]
 800e8ea:	621a      	str	r2, [r3, #32]
}
 800e8ec:	bf00      	nop
 800e8ee:	371c      	adds	r7, #28
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	40012c00 	.word	0x40012c00
 800e8fc:	40013400 	.word	0x40013400
 800e900:	40014000 	.word	0x40014000
 800e904:	40014400 	.word	0x40014400
 800e908:	40014800 	.word	0x40014800
 800e90c:	40015000 	.word	0x40015000

0800e910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e910:	b480      	push	{r7}
 800e912:	b087      	sub	sp, #28
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a1b      	ldr	r3, [r3, #32]
 800e91e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a1b      	ldr	r3, [r3, #32]
 800e92a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e93e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	021b      	lsls	r3, r3, #8
 800e94a:	68fa      	ldr	r2, [r7, #12]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	051b      	lsls	r3, r3, #20
 800e95e:	693a      	ldr	r2, [r7, #16]
 800e960:	4313      	orrs	r3, r2
 800e962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a1a      	ldr	r2, [pc, #104]	; (800e9d0 <TIM_OC6_SetConfig+0xc0>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d013      	beq.n	800e994 <TIM_OC6_SetConfig+0x84>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4a19      	ldr	r2, [pc, #100]	; (800e9d4 <TIM_OC6_SetConfig+0xc4>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d00f      	beq.n	800e994 <TIM_OC6_SetConfig+0x84>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a18      	ldr	r2, [pc, #96]	; (800e9d8 <TIM_OC6_SetConfig+0xc8>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d00b      	beq.n	800e994 <TIM_OC6_SetConfig+0x84>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4a17      	ldr	r2, [pc, #92]	; (800e9dc <TIM_OC6_SetConfig+0xcc>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d007      	beq.n	800e994 <TIM_OC6_SetConfig+0x84>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a16      	ldr	r2, [pc, #88]	; (800e9e0 <TIM_OC6_SetConfig+0xd0>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d003      	beq.n	800e994 <TIM_OC6_SetConfig+0x84>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4a15      	ldr	r2, [pc, #84]	; (800e9e4 <TIM_OC6_SetConfig+0xd4>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d109      	bne.n	800e9a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e99a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	695b      	ldr	r3, [r3, #20]
 800e9a0:	029b      	lsls	r3, r3, #10
 800e9a2:	697a      	ldr	r2, [r7, #20]
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	685a      	ldr	r2, [r3, #4]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	621a      	str	r2, [r3, #32]
}
 800e9c2:	bf00      	nop
 800e9c4:	371c      	adds	r7, #28
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop
 800e9d0:	40012c00 	.word	0x40012c00
 800e9d4:	40013400 	.word	0x40013400
 800e9d8:	40014000 	.word	0x40014000
 800e9dc:	40014400 	.word	0x40014400
 800e9e0:	40014800 	.word	0x40014800
 800e9e4:	40015000 	.word	0x40015000

0800e9e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b087      	sub	sp, #28
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6a1b      	ldr	r3, [r3, #32]
 800e9f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	f023 0201 	bic.w	r2, r3, #1
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	699b      	ldr	r3, [r3, #24]
 800ea0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ea12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	011b      	lsls	r3, r3, #4
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	f023 030a 	bic.w	r3, r3, #10
 800ea24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	693a      	ldr	r2, [r7, #16]
 800ea32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	621a      	str	r2, [r3, #32]
}
 800ea3a:	bf00      	nop
 800ea3c:	371c      	adds	r7, #28
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr

0800ea46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea46:	b480      	push	{r7}
 800ea48:	b087      	sub	sp, #28
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	60f8      	str	r0, [r7, #12]
 800ea4e:	60b9      	str	r1, [r7, #8]
 800ea50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	f023 0210 	bic.w	r2, r3, #16
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ea70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	031b      	lsls	r3, r3, #12
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ea82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	011b      	lsls	r3, r3, #4
 800ea88:	693a      	ldr	r2, [r7, #16]
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	621a      	str	r2, [r3, #32]
}
 800ea9a:	bf00      	nop
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b085      	sub	sp, #20
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800eabc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	4313      	orrs	r3, r2
 800eac8:	f043 0307 	orr.w	r3, r3, #7
 800eacc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	609a      	str	r2, [r3, #8]
}
 800ead4:	bf00      	nop
 800ead6:	3714      	adds	r7, #20
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b087      	sub	sp, #28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eafa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	021a      	lsls	r2, r3, #8
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	431a      	orrs	r2, r3
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	697a      	ldr	r2, [r7, #20]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	697a      	ldr	r2, [r7, #20]
 800eb12:	609a      	str	r2, [r3, #8]
}
 800eb14:	bf00      	nop
 800eb16:	371c      	adds	r7, #28
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b087      	sub	sp, #28
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	f003 031f 	and.w	r3, r3, #31
 800eb32:	2201      	movs	r2, #1
 800eb34:	fa02 f303 	lsl.w	r3, r2, r3
 800eb38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6a1a      	ldr	r2, [r3, #32]
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	43db      	mvns	r3, r3
 800eb42:	401a      	ands	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6a1a      	ldr	r2, [r3, #32]
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	f003 031f 	and.w	r3, r3, #31
 800eb52:	6879      	ldr	r1, [r7, #4]
 800eb54:	fa01 f303 	lsl.w	r3, r1, r3
 800eb58:	431a      	orrs	r2, r3
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	621a      	str	r2, [r3, #32]
}
 800eb5e:	bf00      	nop
 800eb60:	371c      	adds	r7, #28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
	...

0800eb6c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d109      	bne.n	800eb90 <HAL_TIMEx_PWMN_Start+0x24>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	bf14      	ite	ne
 800eb88:	2301      	movne	r3, #1
 800eb8a:	2300      	moveq	r3, #0
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	e022      	b.n	800ebd6 <HAL_TIMEx_PWMN_Start+0x6a>
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	2b04      	cmp	r3, #4
 800eb94:	d109      	bne.n	800ebaa <HAL_TIMEx_PWMN_Start+0x3e>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	bf14      	ite	ne
 800eba2:	2301      	movne	r3, #1
 800eba4:	2300      	moveq	r3, #0
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	e015      	b.n	800ebd6 <HAL_TIMEx_PWMN_Start+0x6a>
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2b08      	cmp	r3, #8
 800ebae:	d109      	bne.n	800ebc4 <HAL_TIMEx_PWMN_Start+0x58>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	bf14      	ite	ne
 800ebbc:	2301      	movne	r3, #1
 800ebbe:	2300      	moveq	r3, #0
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	e008      	b.n	800ebd6 <HAL_TIMEx_PWMN_Start+0x6a>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	bf14      	ite	ne
 800ebd0:	2301      	movne	r3, #1
 800ebd2:	2300      	moveq	r3, #0
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e073      	b.n	800ecc6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d104      	bne.n	800ebee <HAL_TIMEx_PWMN_Start+0x82>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebec:	e013      	b.n	800ec16 <HAL_TIMEx_PWMN_Start+0xaa>
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	2b04      	cmp	r3, #4
 800ebf2:	d104      	bne.n	800ebfe <HAL_TIMEx_PWMN_Start+0x92>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2202      	movs	r2, #2
 800ebf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebfc:	e00b      	b.n	800ec16 <HAL_TIMEx_PWMN_Start+0xaa>
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b08      	cmp	r3, #8
 800ec02:	d104      	bne.n	800ec0e <HAL_TIMEx_PWMN_Start+0xa2>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2202      	movs	r2, #2
 800ec08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec0c:	e003      	b.n	800ec16 <HAL_TIMEx_PWMN_Start+0xaa>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2202      	movs	r2, #2
 800ec12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	6839      	ldr	r1, [r7, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 f9ae 	bl	800ef80 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a25      	ldr	r2, [pc, #148]	; (800ecd0 <HAL_TIMEx_PWMN_Start+0x164>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d022      	beq.n	800ec84 <HAL_TIMEx_PWMN_Start+0x118>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec46:	d01d      	beq.n	800ec84 <HAL_TIMEx_PWMN_Start+0x118>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a21      	ldr	r2, [pc, #132]	; (800ecd4 <HAL_TIMEx_PWMN_Start+0x168>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d018      	beq.n	800ec84 <HAL_TIMEx_PWMN_Start+0x118>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a20      	ldr	r2, [pc, #128]	; (800ecd8 <HAL_TIMEx_PWMN_Start+0x16c>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d013      	beq.n	800ec84 <HAL_TIMEx_PWMN_Start+0x118>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a1e      	ldr	r2, [pc, #120]	; (800ecdc <HAL_TIMEx_PWMN_Start+0x170>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d00e      	beq.n	800ec84 <HAL_TIMEx_PWMN_Start+0x118>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a1d      	ldr	r2, [pc, #116]	; (800ece0 <HAL_TIMEx_PWMN_Start+0x174>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d009      	beq.n	800ec84 <HAL_TIMEx_PWMN_Start+0x118>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a1b      	ldr	r2, [pc, #108]	; (800ece4 <HAL_TIMEx_PWMN_Start+0x178>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d004      	beq.n	800ec84 <HAL_TIMEx_PWMN_Start+0x118>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4a1a      	ldr	r2, [pc, #104]	; (800ece8 <HAL_TIMEx_PWMN_Start+0x17c>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d115      	bne.n	800ecb0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	689a      	ldr	r2, [r3, #8]
 800ec8a:	4b18      	ldr	r3, [pc, #96]	; (800ecec <HAL_TIMEx_PWMN_Start+0x180>)
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2b06      	cmp	r3, #6
 800ec94:	d015      	beq.n	800ecc2 <HAL_TIMEx_PWMN_Start+0x156>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec9c:	d011      	beq.n	800ecc2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f042 0201 	orr.w	r2, r2, #1
 800ecac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecae:	e008      	b.n	800ecc2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f042 0201 	orr.w	r2, r2, #1
 800ecbe:	601a      	str	r2, [r3, #0]
 800ecc0:	e000      	b.n	800ecc4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	40012c00 	.word	0x40012c00
 800ecd4:	40000400 	.word	0x40000400
 800ecd8:	40000800 	.word	0x40000800
 800ecdc:	40000c00 	.word	0x40000c00
 800ece0:	40013400 	.word	0x40013400
 800ece4:	40014000 	.word	0x40014000
 800ece8:	40015000 	.word	0x40015000
 800ecec:	00010007 	.word	0x00010007

0800ecf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d101      	bne.n	800ed08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed04:	2302      	movs	r3, #2
 800ed06:	e074      	b.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2202      	movs	r2, #2
 800ed14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a34      	ldr	r2, [pc, #208]	; (800ee00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d009      	beq.n	800ed46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a33      	ldr	r2, [pc, #204]	; (800ee04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d004      	beq.n	800ed46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a31      	ldr	r2, [pc, #196]	; (800ee08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d108      	bne.n	800ed58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ed4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ed5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a21      	ldr	r2, [pc, #132]	; (800ee00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d022      	beq.n	800edc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed88:	d01d      	beq.n	800edc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a1f      	ldr	r2, [pc, #124]	; (800ee0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d018      	beq.n	800edc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a1d      	ldr	r2, [pc, #116]	; (800ee10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d013      	beq.n	800edc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a1c      	ldr	r2, [pc, #112]	; (800ee14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d00e      	beq.n	800edc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a15      	ldr	r2, [pc, #84]	; (800ee04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d009      	beq.n	800edc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4a18      	ldr	r2, [pc, #96]	; (800ee18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d004      	beq.n	800edc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a11      	ldr	r2, [pc, #68]	; (800ee08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d10c      	bne.n	800ede0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	68ba      	ldr	r2, [r7, #8]
 800edde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3714      	adds	r7, #20
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	40012c00 	.word	0x40012c00
 800ee04:	40013400 	.word	0x40013400
 800ee08:	40015000 	.word	0x40015000
 800ee0c:	40000400 	.word	0x40000400
 800ee10:	40000800 	.word	0x40000800
 800ee14:	40000c00 	.word	0x40000c00
 800ee18:	40014000 	.word	0x40014000

0800ee1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ee26:	2300      	movs	r3, #0
 800ee28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d101      	bne.n	800ee38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ee34:	2302      	movs	r3, #2
 800ee36:	e096      	b.n	800ef66 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	4313      	orrs	r3, r2
 800ee68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4313      	orrs	r3, r2
 800ee76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	695b      	ldr	r3, [r3, #20]
 800ee90:	4313      	orrs	r3, r2
 800ee92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	699b      	ldr	r3, [r3, #24]
 800eeac:	041b      	lsls	r3, r3, #16
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a2f      	ldr	r2, [pc, #188]	; (800ef74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d009      	beq.n	800eed0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a2d      	ldr	r2, [pc, #180]	; (800ef78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d004      	beq.n	800eed0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a2c      	ldr	r2, [pc, #176]	; (800ef7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d106      	bne.n	800eede <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	4313      	orrs	r3, r2
 800eedc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a24      	ldr	r2, [pc, #144]	; (800ef74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d009      	beq.n	800eefc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a22      	ldr	r2, [pc, #136]	; (800ef78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d004      	beq.n	800eefc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a21      	ldr	r2, [pc, #132]	; (800ef7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d12b      	bne.n	800ef54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef06:	051b      	lsls	r3, r3, #20
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	6a1b      	ldr	r3, [r3, #32]
 800ef16:	4313      	orrs	r3, r2
 800ef18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef24:	4313      	orrs	r3, r2
 800ef26:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a11      	ldr	r2, [pc, #68]	; (800ef74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d009      	beq.n	800ef46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a10      	ldr	r2, [pc, #64]	; (800ef78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d004      	beq.n	800ef46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a0e      	ldr	r2, [pc, #56]	; (800ef7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d106      	bne.n	800ef54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef50:	4313      	orrs	r3, r2
 800ef52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3714      	adds	r7, #20
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	40012c00 	.word	0x40012c00
 800ef78:	40013400 	.word	0x40013400
 800ef7c:	40015000 	.word	0x40015000

0800ef80 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	f003 031f 	and.w	r3, r3, #31
 800ef92:	2204      	movs	r2, #4
 800ef94:	fa02 f303 	lsl.w	r3, r2, r3
 800ef98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6a1a      	ldr	r2, [r3, #32]
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	43db      	mvns	r3, r3
 800efa2:	401a      	ands	r2, r3
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6a1a      	ldr	r2, [r3, #32]
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	f003 031f 	and.w	r3, r3, #31
 800efb2:	6879      	ldr	r1, [r7, #4]
 800efb4:	fa01 f303 	lsl.w	r3, r1, r3
 800efb8:	431a      	orrs	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	621a      	str	r2, [r3, #32]
}
 800efbe:	bf00      	nop
 800efc0:	371c      	adds	r7, #28
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b082      	sub	sp, #8
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	e042      	b.n	800f062 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d106      	bne.n	800eff4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7f6 feec 	bl	8005dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2224      	movs	r2, #36	; 0x24
 800eff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f022 0201 	bic.w	r2, r2, #1
 800f00a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fc03 	bl	800f818 <UART_SetConfig>
 800f012:	4603      	mov	r3, r0
 800f014:	2b01      	cmp	r3, #1
 800f016:	d101      	bne.n	800f01c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	e022      	b.n	800f062 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fef3 	bl	800fe10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	685a      	ldr	r2, [r3, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	689a      	ldr	r2, [r3, #8]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f048:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f042 0201 	orr.w	r2, r2, #1
 800f058:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 ff7a 	bl	800ff54 <UART_CheckIdleState>
 800f060:	4603      	mov	r3, r0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b08a      	sub	sp, #40	; 0x28
 800f06e:	af02      	add	r7, sp, #8
 800f070:	60f8      	str	r0, [r7, #12]
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	603b      	str	r3, [r7, #0]
 800f076:	4613      	mov	r3, r2
 800f078:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f080:	2b20      	cmp	r3, #32
 800f082:	f040 8083 	bne.w	800f18c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d002      	beq.n	800f092 <HAL_UART_Transmit+0x28>
 800f08c:	88fb      	ldrh	r3, [r7, #6]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d101      	bne.n	800f096 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f092:	2301      	movs	r3, #1
 800f094:	e07b      	b.n	800f18e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d101      	bne.n	800f0a4 <HAL_UART_Transmit+0x3a>
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	e074      	b.n	800f18e <HAL_UART_Transmit+0x124>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2221      	movs	r2, #33	; 0x21
 800f0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f0bc:	f7f7 f9b2 	bl	8006424 <HAL_GetTick>
 800f0c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	88fa      	ldrh	r2, [r7, #6]
 800f0c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	88fa      	ldrh	r2, [r7, #6]
 800f0ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0da:	d108      	bne.n	800f0ee <HAL_UART_Transmit+0x84>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d104      	bne.n	800f0ee <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	61bb      	str	r3, [r7, #24]
 800f0ec:	e003      	b.n	800f0f6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f0fe:	e02c      	b.n	800f15a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2200      	movs	r2, #0
 800f108:	2180      	movs	r1, #128	; 0x80
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f000 ff6d 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	d001      	beq.n	800f11a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f116:	2303      	movs	r3, #3
 800f118:	e039      	b.n	800f18e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10b      	bne.n	800f138 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	461a      	mov	r2, r3
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f12e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	3302      	adds	r3, #2
 800f134:	61bb      	str	r3, [r7, #24]
 800f136:	e007      	b.n	800f148 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	781a      	ldrb	r2, [r3, #0]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	3301      	adds	r3, #1
 800f146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f14e:	b29b      	uxth	r3, r3
 800f150:	3b01      	subs	r3, #1
 800f152:	b29a      	uxth	r2, r3
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f160:	b29b      	uxth	r3, r3
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1cc      	bne.n	800f100 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2200      	movs	r2, #0
 800f16e:	2140      	movs	r1, #64	; 0x40
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f000 ff3a 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e006      	b.n	800f18e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2220      	movs	r2, #32
 800f184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	e000      	b.n	800f18e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f18c:	2302      	movs	r3, #2
  }
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3720      	adds	r7, #32
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
	...

0800f198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b0ba      	sub	sp, #232	; 0xe8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f1be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f1c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800f1c6:	4013      	ands	r3, r2
 800f1c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f1cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d11b      	bne.n	800f20c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1d8:	f003 0320 	and.w	r3, r3, #32
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d015      	beq.n	800f20c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1e4:	f003 0320 	and.w	r3, r3, #32
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d105      	bne.n	800f1f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d009      	beq.n	800f20c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f000 82d6 	beq.w	800f7ae <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	4798      	blx	r3
      }
      return;
 800f20a:	e2d0      	b.n	800f7ae <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f20c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 811f 	beq.w	800f454 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f216:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f21a:	4b8b      	ldr	r3, [pc, #556]	; (800f448 <HAL_UART_IRQHandler+0x2b0>)
 800f21c:	4013      	ands	r3, r2
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f222:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f226:	4b89      	ldr	r3, [pc, #548]	; (800f44c <HAL_UART_IRQHandler+0x2b4>)
 800f228:	4013      	ands	r3, r2
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f000 8112 	beq.w	800f454 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f234:	f003 0301 	and.w	r3, r3, #1
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d011      	beq.n	800f260 <HAL_UART_IRQHandler+0xc8>
 800f23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00b      	beq.n	800f260 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2201      	movs	r2, #1
 800f24e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f256:	f043 0201 	orr.w	r2, r3, #1
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f264:	f003 0302 	and.w	r3, r3, #2
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d011      	beq.n	800f290 <HAL_UART_IRQHandler+0xf8>
 800f26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f270:	f003 0301 	and.w	r3, r3, #1
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00b      	beq.n	800f290 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2202      	movs	r2, #2
 800f27e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f286:	f043 0204 	orr.w	r2, r3, #4
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f294:	f003 0304 	and.w	r3, r3, #4
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d011      	beq.n	800f2c0 <HAL_UART_IRQHandler+0x128>
 800f29c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00b      	beq.n	800f2c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2204      	movs	r2, #4
 800f2ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2b6:	f043 0202 	orr.w	r2, r3, #2
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2c4:	f003 0308 	and.w	r3, r3, #8
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d017      	beq.n	800f2fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2d0:	f003 0320 	and.w	r3, r3, #32
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d105      	bne.n	800f2e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f2d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f2dc:	4b5a      	ldr	r3, [pc, #360]	; (800f448 <HAL_UART_IRQHandler+0x2b0>)
 800f2de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00b      	beq.n	800f2fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2208      	movs	r2, #8
 800f2ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2f2:	f043 0208 	orr.w	r2, r3, #8
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f304:	2b00      	cmp	r3, #0
 800f306:	d012      	beq.n	800f32e <HAL_UART_IRQHandler+0x196>
 800f308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f30c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00c      	beq.n	800f32e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f31c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f324:	f043 0220 	orr.w	r2, r3, #32
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 823c 	beq.w	800f7b2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f33e:	f003 0320 	and.w	r3, r3, #32
 800f342:	2b00      	cmp	r3, #0
 800f344:	d013      	beq.n	800f36e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f34a:	f003 0320 	and.w	r3, r3, #32
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d105      	bne.n	800f35e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d007      	beq.n	800f36e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f362:	2b00      	cmp	r3, #0
 800f364:	d003      	beq.n	800f36e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f374:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f382:	2b40      	cmp	r3, #64	; 0x40
 800f384:	d005      	beq.n	800f392 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f38a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d04f      	beq.n	800f432 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 ffdb 	bl	801034e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a2:	2b40      	cmp	r3, #64	; 0x40
 800f3a4:	d141      	bne.n	800f42a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3b4:	e853 3f00 	ldrex	r3, [r3]
 800f3b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f3bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	3308      	adds	r3, #8
 800f3ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f3d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f3d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f3de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f3e2:	e841 2300 	strex	r3, r2, [r1]
 800f3e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f3ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1d9      	bne.n	800f3a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d013      	beq.n	800f422 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3fe:	4a14      	ldr	r2, [pc, #80]	; (800f450 <HAL_UART_IRQHandler+0x2b8>)
 800f400:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f406:	4618      	mov	r0, r3
 800f408:	f7f9 fbc8 	bl	8008b9c <HAL_DMA_Abort_IT>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d017      	beq.n	800f442 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f41c:	4610      	mov	r0, r2
 800f41e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f420:	e00f      	b.n	800f442 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f9ee 	bl	800f804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f428:	e00b      	b.n	800f442 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f9ea 	bl	800f804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f430:	e007      	b.n	800f442 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 f9e6 	bl	800f804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f440:	e1b7      	b.n	800f7b2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f442:	bf00      	nop
    return;
 800f444:	e1b5      	b.n	800f7b2 <HAL_UART_IRQHandler+0x61a>
 800f446:	bf00      	nop
 800f448:	10000001 	.word	0x10000001
 800f44c:	04000120 	.word	0x04000120
 800f450:	080105f9 	.word	0x080105f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f458:	2b01      	cmp	r3, #1
 800f45a:	f040 814a 	bne.w	800f6f2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f462:	f003 0310 	and.w	r3, r3, #16
 800f466:	2b00      	cmp	r3, #0
 800f468:	f000 8143 	beq.w	800f6f2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f470:	f003 0310 	and.w	r3, r3, #16
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 813c 	beq.w	800f6f2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2210      	movs	r2, #16
 800f480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f48c:	2b40      	cmp	r3, #64	; 0x40
 800f48e:	f040 80b5 	bne.w	800f5fc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f49e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f000 8187 	beq.w	800f7b6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	f080 817f 	bcs.w	800f7b6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f4be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f003 0320 	and.w	r3, r3, #32
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f040 8086 	bne.w	800f5e0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4e0:	e853 3f00 	ldrex	r3, [r3]
 800f4e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f502:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f50a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f50e:	e841 2300 	strex	r3, r2, [r1]
 800f512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1da      	bne.n	800f4d4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3308      	adds	r3, #8
 800f524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f528:	e853 3f00 	ldrex	r3, [r3]
 800f52c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f52e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f530:	f023 0301 	bic.w	r3, r3, #1
 800f534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3308      	adds	r3, #8
 800f53e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f54a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f54e:	e841 2300 	strex	r3, r2, [r1]
 800f552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e1      	bne.n	800f51e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	3308      	adds	r3, #8
 800f560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f564:	e853 3f00 	ldrex	r3, [r3]
 800f568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f56a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	3308      	adds	r3, #8
 800f57a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f57e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f586:	e841 2300 	strex	r3, r2, [r1]
 800f58a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1e3      	bne.n	800f55a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2220      	movs	r2, #32
 800f596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5a8:	e853 3f00 	ldrex	r3, [r3]
 800f5ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f5ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5b0:	f023 0310 	bic.w	r3, r3, #16
 800f5b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5ca:	e841 2300 	strex	r3, r2, [r1]
 800f5ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d1e4      	bne.n	800f5a0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f9 fa85 	bl	8008aea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7f4 f835 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f5fa:	e0dc      	b.n	800f7b6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f608:	b29b      	uxth	r3, r3
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f616:	b29b      	uxth	r3, r3
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 80ce 	beq.w	800f7ba <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800f61e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 80c9 	beq.w	800f7ba <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	e853 3f00 	ldrex	r3, [r3]
 800f634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f63c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	461a      	mov	r2, r3
 800f646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f64a:	647b      	str	r3, [r7, #68]	; 0x44
 800f64c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f652:	e841 2300 	strex	r3, r2, [r1]
 800f656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1e4      	bne.n	800f628 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3308      	adds	r3, #8
 800f664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	e853 3f00 	ldrex	r3, [r3]
 800f66c:	623b      	str	r3, [r7, #32]
   return(result);
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f674:	f023 0301 	bic.w	r3, r3, #1
 800f678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	3308      	adds	r3, #8
 800f682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f686:	633a      	str	r2, [r7, #48]	; 0x30
 800f688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f68e:	e841 2300 	strex	r3, r2, [r1]
 800f692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1e1      	bne.n	800f65e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2220      	movs	r2, #32
 800f69e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	e853 3f00 	ldrex	r3, [r3]
 800f6ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f023 0310 	bic.w	r3, r3, #16
 800f6c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f6d0:	61fb      	str	r3, [r7, #28]
 800f6d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d4:	69b9      	ldr	r1, [r7, #24]
 800f6d6:	69fa      	ldr	r2, [r7, #28]
 800f6d8:	e841 2300 	strex	r3, r2, [r1]
 800f6dc:	617b      	str	r3, [r7, #20]
   return(result);
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d1e4      	bne.n	800f6ae <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f6e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f7f3 ffba 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f6f0:	e063      	b.n	800f7ba <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00e      	beq.n	800f71c <HAL_UART_IRQHandler+0x584>
 800f6fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f706:	2b00      	cmp	r3, #0
 800f708:	d008      	beq.n	800f71c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f712:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 ffb0 	bl	801067a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f71a:	e051      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f724:	2b00      	cmp	r3, #0
 800f726:	d014      	beq.n	800f752 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f72c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f730:	2b00      	cmp	r3, #0
 800f732:	d105      	bne.n	800f740 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d008      	beq.n	800f752 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f744:	2b00      	cmp	r3, #0
 800f746:	d03a      	beq.n	800f7be <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	4798      	blx	r3
    }
    return;
 800f750:	e035      	b.n	800f7be <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d009      	beq.n	800f772 <HAL_UART_IRQHandler+0x5da>
 800f75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f766:	2b00      	cmp	r3, #0
 800f768:	d003      	beq.n	800f772 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 ff5a 	bl	8010624 <UART_EndTransmit_IT>
    return;
 800f770:	e026      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d009      	beq.n	800f792 <HAL_UART_IRQHandler+0x5fa>
 800f77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f782:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 ff89 	bl	80106a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f790:	e016      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d010      	beq.n	800f7c0 <HAL_UART_IRQHandler+0x628>
 800f79e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	da0c      	bge.n	800f7c0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 ff71 	bl	801068e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7ac:	e008      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
      return;
 800f7ae:	bf00      	nop
 800f7b0:	e006      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
    return;
 800f7b2:	bf00      	nop
 800f7b4:	e004      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
      return;
 800f7b6:	bf00      	nop
 800f7b8:	e002      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
      return;
 800f7ba:	bf00      	nop
 800f7bc:	e000      	b.n	800f7c0 <HAL_UART_IRQHandler+0x628>
    return;
 800f7be:	bf00      	nop
  }
}
 800f7c0:	37e8      	adds	r7, #232	; 0xe8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop

0800f7c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f80c:	bf00      	nop
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f81c:	b08c      	sub	sp, #48	; 0x30
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	689a      	ldr	r2, [r3, #8]
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	431a      	orrs	r2, r3
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	695b      	ldr	r3, [r3, #20]
 800f836:	431a      	orrs	r2, r3
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	69db      	ldr	r3, [r3, #28]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	4baa      	ldr	r3, [pc, #680]	; (800faf0 <UART_SetConfig+0x2d8>)
 800f848:	4013      	ands	r3, r2
 800f84a:	697a      	ldr	r2, [r7, #20]
 800f84c:	6812      	ldr	r2, [r2, #0]
 800f84e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f850:	430b      	orrs	r3, r1
 800f852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	68da      	ldr	r2, [r3, #12]
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	430a      	orrs	r2, r1
 800f868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a9f      	ldr	r2, [pc, #636]	; (800faf4 <UART_SetConfig+0x2dc>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d004      	beq.n	800f884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f880:	4313      	orrs	r3, r2
 800f882:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f88e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f892:	697a      	ldr	r2, [r7, #20]
 800f894:	6812      	ldr	r2, [r2, #0]
 800f896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f898:	430b      	orrs	r3, r1
 800f89a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a2:	f023 010f 	bic.w	r1, r3, #15
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	430a      	orrs	r2, r1
 800f8b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a90      	ldr	r2, [pc, #576]	; (800faf8 <UART_SetConfig+0x2e0>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d125      	bne.n	800f908 <UART_SetConfig+0xf0>
 800f8bc:	4b8f      	ldr	r3, [pc, #572]	; (800fafc <UART_SetConfig+0x2e4>)
 800f8be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8c2:	f003 0303 	and.w	r3, r3, #3
 800f8c6:	2b03      	cmp	r3, #3
 800f8c8:	d81a      	bhi.n	800f900 <UART_SetConfig+0xe8>
 800f8ca:	a201      	add	r2, pc, #4	; (adr r2, 800f8d0 <UART_SetConfig+0xb8>)
 800f8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d0:	0800f8e1 	.word	0x0800f8e1
 800f8d4:	0800f8f1 	.word	0x0800f8f1
 800f8d8:	0800f8e9 	.word	0x0800f8e9
 800f8dc:	0800f8f9 	.word	0x0800f8f9
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8e6:	e116      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8ee:	e112      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f8f0:	2304      	movs	r3, #4
 800f8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8f6:	e10e      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f8f8:	2308      	movs	r3, #8
 800f8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8fe:	e10a      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f900:	2310      	movs	r3, #16
 800f902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f906:	e106      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a7c      	ldr	r2, [pc, #496]	; (800fb00 <UART_SetConfig+0x2e8>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d138      	bne.n	800f984 <UART_SetConfig+0x16c>
 800f912:	4b7a      	ldr	r3, [pc, #488]	; (800fafc <UART_SetConfig+0x2e4>)
 800f914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f918:	f003 030c 	and.w	r3, r3, #12
 800f91c:	2b0c      	cmp	r3, #12
 800f91e:	d82d      	bhi.n	800f97c <UART_SetConfig+0x164>
 800f920:	a201      	add	r2, pc, #4	; (adr r2, 800f928 <UART_SetConfig+0x110>)
 800f922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f926:	bf00      	nop
 800f928:	0800f95d 	.word	0x0800f95d
 800f92c:	0800f97d 	.word	0x0800f97d
 800f930:	0800f97d 	.word	0x0800f97d
 800f934:	0800f97d 	.word	0x0800f97d
 800f938:	0800f96d 	.word	0x0800f96d
 800f93c:	0800f97d 	.word	0x0800f97d
 800f940:	0800f97d 	.word	0x0800f97d
 800f944:	0800f97d 	.word	0x0800f97d
 800f948:	0800f965 	.word	0x0800f965
 800f94c:	0800f97d 	.word	0x0800f97d
 800f950:	0800f97d 	.word	0x0800f97d
 800f954:	0800f97d 	.word	0x0800f97d
 800f958:	0800f975 	.word	0x0800f975
 800f95c:	2300      	movs	r3, #0
 800f95e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f962:	e0d8      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f964:	2302      	movs	r3, #2
 800f966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f96a:	e0d4      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f96c:	2304      	movs	r3, #4
 800f96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f972:	e0d0      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f974:	2308      	movs	r3, #8
 800f976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f97a:	e0cc      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f97c:	2310      	movs	r3, #16
 800f97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f982:	e0c8      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a5e      	ldr	r2, [pc, #376]	; (800fb04 <UART_SetConfig+0x2ec>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d125      	bne.n	800f9da <UART_SetConfig+0x1c2>
 800f98e:	4b5b      	ldr	r3, [pc, #364]	; (800fafc <UART_SetConfig+0x2e4>)
 800f990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f994:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f998:	2b30      	cmp	r3, #48	; 0x30
 800f99a:	d016      	beq.n	800f9ca <UART_SetConfig+0x1b2>
 800f99c:	2b30      	cmp	r3, #48	; 0x30
 800f99e:	d818      	bhi.n	800f9d2 <UART_SetConfig+0x1ba>
 800f9a0:	2b20      	cmp	r3, #32
 800f9a2:	d00a      	beq.n	800f9ba <UART_SetConfig+0x1a2>
 800f9a4:	2b20      	cmp	r3, #32
 800f9a6:	d814      	bhi.n	800f9d2 <UART_SetConfig+0x1ba>
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d002      	beq.n	800f9b2 <UART_SetConfig+0x19a>
 800f9ac:	2b10      	cmp	r3, #16
 800f9ae:	d008      	beq.n	800f9c2 <UART_SetConfig+0x1aa>
 800f9b0:	e00f      	b.n	800f9d2 <UART_SetConfig+0x1ba>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9b8:	e0ad      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9c0:	e0a9      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f9c2:	2304      	movs	r3, #4
 800f9c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9c8:	e0a5      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f9ca:	2308      	movs	r3, #8
 800f9cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9d0:	e0a1      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f9d2:	2310      	movs	r3, #16
 800f9d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9d8:	e09d      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a4a      	ldr	r2, [pc, #296]	; (800fb08 <UART_SetConfig+0x2f0>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d125      	bne.n	800fa30 <UART_SetConfig+0x218>
 800f9e4:	4b45      	ldr	r3, [pc, #276]	; (800fafc <UART_SetConfig+0x2e4>)
 800f9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f9ee:	2bc0      	cmp	r3, #192	; 0xc0
 800f9f0:	d016      	beq.n	800fa20 <UART_SetConfig+0x208>
 800f9f2:	2bc0      	cmp	r3, #192	; 0xc0
 800f9f4:	d818      	bhi.n	800fa28 <UART_SetConfig+0x210>
 800f9f6:	2b80      	cmp	r3, #128	; 0x80
 800f9f8:	d00a      	beq.n	800fa10 <UART_SetConfig+0x1f8>
 800f9fa:	2b80      	cmp	r3, #128	; 0x80
 800f9fc:	d814      	bhi.n	800fa28 <UART_SetConfig+0x210>
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d002      	beq.n	800fa08 <UART_SetConfig+0x1f0>
 800fa02:	2b40      	cmp	r3, #64	; 0x40
 800fa04:	d008      	beq.n	800fa18 <UART_SetConfig+0x200>
 800fa06:	e00f      	b.n	800fa28 <UART_SetConfig+0x210>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa0e:	e082      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa10:	2302      	movs	r3, #2
 800fa12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa16:	e07e      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa18:	2304      	movs	r3, #4
 800fa1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa1e:	e07a      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa20:	2308      	movs	r3, #8
 800fa22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa26:	e076      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa28:	2310      	movs	r3, #16
 800fa2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa2e:	e072      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a35      	ldr	r2, [pc, #212]	; (800fb0c <UART_SetConfig+0x2f4>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d12a      	bne.n	800fa90 <UART_SetConfig+0x278>
 800fa3a:	4b30      	ldr	r3, [pc, #192]	; (800fafc <UART_SetConfig+0x2e4>)
 800fa3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa48:	d01a      	beq.n	800fa80 <UART_SetConfig+0x268>
 800fa4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa4e:	d81b      	bhi.n	800fa88 <UART_SetConfig+0x270>
 800fa50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa54:	d00c      	beq.n	800fa70 <UART_SetConfig+0x258>
 800fa56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa5a:	d815      	bhi.n	800fa88 <UART_SetConfig+0x270>
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d003      	beq.n	800fa68 <UART_SetConfig+0x250>
 800fa60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa64:	d008      	beq.n	800fa78 <UART_SetConfig+0x260>
 800fa66:	e00f      	b.n	800fa88 <UART_SetConfig+0x270>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa6e:	e052      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa70:	2302      	movs	r3, #2
 800fa72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa76:	e04e      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa78:	2304      	movs	r3, #4
 800fa7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa7e:	e04a      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa80:	2308      	movs	r3, #8
 800fa82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa86:	e046      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa88:	2310      	movs	r3, #16
 800fa8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa8e:	e042      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4a17      	ldr	r2, [pc, #92]	; (800faf4 <UART_SetConfig+0x2dc>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d13a      	bne.n	800fb10 <UART_SetConfig+0x2f8>
 800fa9a:	4b18      	ldr	r3, [pc, #96]	; (800fafc <UART_SetConfig+0x2e4>)
 800fa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800faa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800faa8:	d01a      	beq.n	800fae0 <UART_SetConfig+0x2c8>
 800faaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800faae:	d81b      	bhi.n	800fae8 <UART_SetConfig+0x2d0>
 800fab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fab4:	d00c      	beq.n	800fad0 <UART_SetConfig+0x2b8>
 800fab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800faba:	d815      	bhi.n	800fae8 <UART_SetConfig+0x2d0>
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d003      	beq.n	800fac8 <UART_SetConfig+0x2b0>
 800fac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fac4:	d008      	beq.n	800fad8 <UART_SetConfig+0x2c0>
 800fac6:	e00f      	b.n	800fae8 <UART_SetConfig+0x2d0>
 800fac8:	2300      	movs	r3, #0
 800faca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800face:	e022      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fad0:	2302      	movs	r3, #2
 800fad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fad6:	e01e      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fad8:	2304      	movs	r3, #4
 800fada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fade:	e01a      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fae0:	2308      	movs	r3, #8
 800fae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fae6:	e016      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800fae8:	2310      	movs	r3, #16
 800faea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800faee:	e012      	b.n	800fb16 <UART_SetConfig+0x2fe>
 800faf0:	cfff69f3 	.word	0xcfff69f3
 800faf4:	40008000 	.word	0x40008000
 800faf8:	40013800 	.word	0x40013800
 800fafc:	40021000 	.word	0x40021000
 800fb00:	40004400 	.word	0x40004400
 800fb04:	40004800 	.word	0x40004800
 800fb08:	40004c00 	.word	0x40004c00
 800fb0c:	40005000 	.word	0x40005000
 800fb10:	2310      	movs	r3, #16
 800fb12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4aae      	ldr	r2, [pc, #696]	; (800fdd4 <UART_SetConfig+0x5bc>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	f040 8097 	bne.w	800fc50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb26:	2b08      	cmp	r3, #8
 800fb28:	d823      	bhi.n	800fb72 <UART_SetConfig+0x35a>
 800fb2a:	a201      	add	r2, pc, #4	; (adr r2, 800fb30 <UART_SetConfig+0x318>)
 800fb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb30:	0800fb55 	.word	0x0800fb55
 800fb34:	0800fb73 	.word	0x0800fb73
 800fb38:	0800fb5d 	.word	0x0800fb5d
 800fb3c:	0800fb73 	.word	0x0800fb73
 800fb40:	0800fb63 	.word	0x0800fb63
 800fb44:	0800fb73 	.word	0x0800fb73
 800fb48:	0800fb73 	.word	0x0800fb73
 800fb4c:	0800fb73 	.word	0x0800fb73
 800fb50:	0800fb6b 	.word	0x0800fb6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb54:	f7fd fccc 	bl	800d4f0 <HAL_RCC_GetPCLK1Freq>
 800fb58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fb5a:	e010      	b.n	800fb7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fb5c:	4b9e      	ldr	r3, [pc, #632]	; (800fdd8 <UART_SetConfig+0x5c0>)
 800fb5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fb60:	e00d      	b.n	800fb7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fb62:	f7fd fc57 	bl	800d414 <HAL_RCC_GetSysClockFreq>
 800fb66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fb68:	e009      	b.n	800fb7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fb70:	e005      	b.n	800fb7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800fb72:	2300      	movs	r3, #0
 800fb74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fb76:	2301      	movs	r3, #1
 800fb78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fb7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f000 8130 	beq.w	800fde6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8a:	4a94      	ldr	r2, [pc, #592]	; (800fddc <UART_SetConfig+0x5c4>)
 800fb8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb90:	461a      	mov	r2, r3
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	685a      	ldr	r2, [r3, #4]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	005b      	lsls	r3, r3, #1
 800fba2:	4413      	add	r3, r2
 800fba4:	69ba      	ldr	r2, [r7, #24]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d305      	bcc.n	800fbb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbb0:	69ba      	ldr	r2, [r7, #24]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d903      	bls.n	800fbbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fbbc:	e113      	b.n	800fde6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	60bb      	str	r3, [r7, #8]
 800fbc4:	60fa      	str	r2, [r7, #12]
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbca:	4a84      	ldr	r2, [pc, #528]	; (800fddc <UART_SetConfig+0x5c4>)
 800fbcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	603b      	str	r3, [r7, #0]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fbe0:	f7f1 f80a 	bl	8000bf8 <__aeabi_uldivmod>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	4610      	mov	r0, r2
 800fbea:	4619      	mov	r1, r3
 800fbec:	f04f 0200 	mov.w	r2, #0
 800fbf0:	f04f 0300 	mov.w	r3, #0
 800fbf4:	020b      	lsls	r3, r1, #8
 800fbf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fbfa:	0202      	lsls	r2, r0, #8
 800fbfc:	6979      	ldr	r1, [r7, #20]
 800fbfe:	6849      	ldr	r1, [r1, #4]
 800fc00:	0849      	lsrs	r1, r1, #1
 800fc02:	2000      	movs	r0, #0
 800fc04:	460c      	mov	r4, r1
 800fc06:	4605      	mov	r5, r0
 800fc08:	eb12 0804 	adds.w	r8, r2, r4
 800fc0c:	eb43 0905 	adc.w	r9, r3, r5
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	2200      	movs	r2, #0
 800fc16:	469a      	mov	sl, r3
 800fc18:	4693      	mov	fp, r2
 800fc1a:	4652      	mov	r2, sl
 800fc1c:	465b      	mov	r3, fp
 800fc1e:	4640      	mov	r0, r8
 800fc20:	4649      	mov	r1, r9
 800fc22:	f7f0 ffe9 	bl	8000bf8 <__aeabi_uldivmod>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4613      	mov	r3, r2
 800fc2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc2e:	6a3b      	ldr	r3, [r7, #32]
 800fc30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc34:	d308      	bcc.n	800fc48 <UART_SetConfig+0x430>
 800fc36:	6a3b      	ldr	r3, [r7, #32]
 800fc38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc3c:	d204      	bcs.n	800fc48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6a3a      	ldr	r2, [r7, #32]
 800fc44:	60da      	str	r2, [r3, #12]
 800fc46:	e0ce      	b.n	800fde6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fc4e:	e0ca      	b.n	800fde6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	69db      	ldr	r3, [r3, #28]
 800fc54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc58:	d166      	bne.n	800fd28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800fc5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc5e:	2b08      	cmp	r3, #8
 800fc60:	d827      	bhi.n	800fcb2 <UART_SetConfig+0x49a>
 800fc62:	a201      	add	r2, pc, #4	; (adr r2, 800fc68 <UART_SetConfig+0x450>)
 800fc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc68:	0800fc8d 	.word	0x0800fc8d
 800fc6c:	0800fc95 	.word	0x0800fc95
 800fc70:	0800fc9d 	.word	0x0800fc9d
 800fc74:	0800fcb3 	.word	0x0800fcb3
 800fc78:	0800fca3 	.word	0x0800fca3
 800fc7c:	0800fcb3 	.word	0x0800fcb3
 800fc80:	0800fcb3 	.word	0x0800fcb3
 800fc84:	0800fcb3 	.word	0x0800fcb3
 800fc88:	0800fcab 	.word	0x0800fcab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc8c:	f7fd fc30 	bl	800d4f0 <HAL_RCC_GetPCLK1Freq>
 800fc90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fc92:	e014      	b.n	800fcbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc94:	f7fd fc42 	bl	800d51c <HAL_RCC_GetPCLK2Freq>
 800fc98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fc9a:	e010      	b.n	800fcbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fc9c:	4b4e      	ldr	r3, [pc, #312]	; (800fdd8 <UART_SetConfig+0x5c0>)
 800fc9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fca0:	e00d      	b.n	800fcbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fca2:	f7fd fbb7 	bl	800d414 <HAL_RCC_GetSysClockFreq>
 800fca6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fca8:	e009      	b.n	800fcbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fcb0:	e005      	b.n	800fcbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fcbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f000 8090 	beq.w	800fde6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcca:	4a44      	ldr	r2, [pc, #272]	; (800fddc <UART_SetConfig+0x5c4>)
 800fccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcd8:	005a      	lsls	r2, r3, #1
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	085b      	lsrs	r3, r3, #1
 800fce0:	441a      	add	r2, r3
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	2b0f      	cmp	r3, #15
 800fcf0:	d916      	bls.n	800fd20 <UART_SetConfig+0x508>
 800fcf2:	6a3b      	ldr	r3, [r7, #32]
 800fcf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcf8:	d212      	bcs.n	800fd20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fcfa:	6a3b      	ldr	r3, [r7, #32]
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	f023 030f 	bic.w	r3, r3, #15
 800fd02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	085b      	lsrs	r3, r3, #1
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	f003 0307 	and.w	r3, r3, #7
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	8bfb      	ldrh	r3, [r7, #30]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	8bfa      	ldrh	r2, [r7, #30]
 800fd1c:	60da      	str	r2, [r3, #12]
 800fd1e:	e062      	b.n	800fde6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800fd20:	2301      	movs	r3, #1
 800fd22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fd26:	e05e      	b.n	800fde6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd2c:	2b08      	cmp	r3, #8
 800fd2e:	d828      	bhi.n	800fd82 <UART_SetConfig+0x56a>
 800fd30:	a201      	add	r2, pc, #4	; (adr r2, 800fd38 <UART_SetConfig+0x520>)
 800fd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd36:	bf00      	nop
 800fd38:	0800fd5d 	.word	0x0800fd5d
 800fd3c:	0800fd65 	.word	0x0800fd65
 800fd40:	0800fd6d 	.word	0x0800fd6d
 800fd44:	0800fd83 	.word	0x0800fd83
 800fd48:	0800fd73 	.word	0x0800fd73
 800fd4c:	0800fd83 	.word	0x0800fd83
 800fd50:	0800fd83 	.word	0x0800fd83
 800fd54:	0800fd83 	.word	0x0800fd83
 800fd58:	0800fd7b 	.word	0x0800fd7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd5c:	f7fd fbc8 	bl	800d4f0 <HAL_RCC_GetPCLK1Freq>
 800fd60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fd62:	e014      	b.n	800fd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd64:	f7fd fbda 	bl	800d51c <HAL_RCC_GetPCLK2Freq>
 800fd68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fd6a:	e010      	b.n	800fd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fd6c:	4b1a      	ldr	r3, [pc, #104]	; (800fdd8 <UART_SetConfig+0x5c0>)
 800fd6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fd70:	e00d      	b.n	800fd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd72:	f7fd fb4f 	bl	800d414 <HAL_RCC_GetSysClockFreq>
 800fd76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fd78:	e009      	b.n	800fd8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fd80:	e005      	b.n	800fd8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800fd82:	2300      	movs	r3, #0
 800fd84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fd8c:	bf00      	nop
    }

    if (pclk != 0U)
 800fd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d028      	beq.n	800fde6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd98:	4a10      	ldr	r2, [pc, #64]	; (800fddc <UART_SetConfig+0x5c4>)
 800fd9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	085b      	lsrs	r3, r3, #1
 800fdac:	441a      	add	r2, r3
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdb8:	6a3b      	ldr	r3, [r7, #32]
 800fdba:	2b0f      	cmp	r3, #15
 800fdbc:	d910      	bls.n	800fde0 <UART_SetConfig+0x5c8>
 800fdbe:	6a3b      	ldr	r3, [r7, #32]
 800fdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdc4:	d20c      	bcs.n	800fde0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fdc6:	6a3b      	ldr	r3, [r7, #32]
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	60da      	str	r2, [r3, #12]
 800fdd0:	e009      	b.n	800fde6 <UART_SetConfig+0x5ce>
 800fdd2:	bf00      	nop
 800fdd4:	40008000 	.word	0x40008000
 800fdd8:	00f42400 	.word	0x00f42400
 800fddc:	0801844c 	.word	0x0801844c
      }
      else
      {
        ret = HAL_ERROR;
 800fde0:	2301      	movs	r3, #1
 800fde2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	2201      	movs	r2, #1
 800fdea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fe02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3730      	adds	r7, #48	; 0x30
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fe10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1c:	f003 0301 	and.w	r3, r3, #1
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00a      	beq.n	800fe3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	430a      	orrs	r2, r1
 800fe38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe3e:	f003 0302 	and.w	r3, r3, #2
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d00a      	beq.n	800fe5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	430a      	orrs	r2, r1
 800fe5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe60:	f003 0304 	and.w	r3, r3, #4
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00a      	beq.n	800fe7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	430a      	orrs	r2, r1
 800fe7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe82:	f003 0308 	and.w	r3, r3, #8
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00a      	beq.n	800fea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	430a      	orrs	r2, r1
 800fe9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea4:	f003 0310 	and.w	r3, r3, #16
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00a      	beq.n	800fec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	430a      	orrs	r2, r1
 800fec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec6:	f003 0320 	and.w	r3, r3, #32
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d00a      	beq.n	800fee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	430a      	orrs	r2, r1
 800fee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feec:	2b00      	cmp	r3, #0
 800feee:	d01a      	beq.n	800ff26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	430a      	orrs	r2, r1
 800ff04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff0e:	d10a      	bne.n	800ff26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00a      	beq.n	800ff48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	430a      	orrs	r2, r1
 800ff46:	605a      	str	r2, [r3, #4]
  }
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af02      	add	r7, sp, #8
 800ff5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff64:	f7f6 fa5e 	bl	8006424 <HAL_GetTick>
 800ff68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f003 0308 	and.w	r3, r3, #8
 800ff74:	2b08      	cmp	r3, #8
 800ff76:	d10e      	bne.n	800ff96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2200      	movs	r2, #0
 800ff82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 f82f 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d001      	beq.n	800ff96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e025      	b.n	800ffe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f003 0304 	and.w	r3, r3, #4
 800ffa0:	2b04      	cmp	r3, #4
 800ffa2:	d10e      	bne.n	800ffc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2200      	movs	r2, #0
 800ffae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 f819 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d001      	beq.n	800ffc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffbe:	2303      	movs	r3, #3
 800ffc0:	e00f      	b.n	800ffe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2220      	movs	r2, #32
 800ffc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2220      	movs	r2, #32
 800ffce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ffe0:	2300      	movs	r3, #0
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b09c      	sub	sp, #112	; 0x70
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	60b9      	str	r1, [r7, #8]
 800fff4:	603b      	str	r3, [r7, #0]
 800fff6:	4613      	mov	r3, r2
 800fff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fffa:	e0a9      	b.n	8010150 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010002:	f000 80a5 	beq.w	8010150 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010006:	f7f6 fa0d 	bl	8006424 <HAL_GetTick>
 801000a:	4602      	mov	r2, r0
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010012:	429a      	cmp	r2, r3
 8010014:	d302      	bcc.n	801001c <UART_WaitOnFlagUntilTimeout+0x32>
 8010016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010018:	2b00      	cmp	r3, #0
 801001a:	d140      	bne.n	801009e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010024:	e853 3f00 	ldrex	r3, [r3]
 8010028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801002a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801002c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010030:	667b      	str	r3, [r7, #100]	; 0x64
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	461a      	mov	r2, r3
 8010038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801003a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801003c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010042:	e841 2300 	strex	r3, r2, [r1]
 8010046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801004a:	2b00      	cmp	r3, #0
 801004c:	d1e6      	bne.n	801001c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	3308      	adds	r3, #8
 8010054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010058:	e853 3f00 	ldrex	r3, [r3]
 801005c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801005e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010060:	f023 0301 	bic.w	r3, r3, #1
 8010064:	663b      	str	r3, [r7, #96]	; 0x60
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	3308      	adds	r3, #8
 801006c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801006e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010076:	e841 2300 	strex	r3, r2, [r1]
 801007a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801007c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1e5      	bne.n	801004e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2220      	movs	r2, #32
 8010086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2220      	movs	r2, #32
 801008e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2200      	movs	r2, #0
 8010096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801009a:	2303      	movs	r3, #3
 801009c:	e069      	b.n	8010172 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f003 0304 	and.w	r3, r3, #4
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d051      	beq.n	8010150 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	69db      	ldr	r3, [r3, #28]
 80100b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100ba:	d149      	bne.n	8010150 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	e853 3f00 	ldrex	r3, [r3]
 80100d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	461a      	mov	r2, r3
 80100e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100e4:	637b      	str	r3, [r7, #52]	; 0x34
 80100e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ec:	e841 2300 	strex	r3, r2, [r1]
 80100f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80100f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d1e6      	bne.n	80100c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	3308      	adds	r3, #8
 80100fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	e853 3f00 	ldrex	r3, [r3]
 8010106:	613b      	str	r3, [r7, #16]
   return(result);
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	f023 0301 	bic.w	r3, r3, #1
 801010e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	3308      	adds	r3, #8
 8010116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010118:	623a      	str	r2, [r7, #32]
 801011a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801011c:	69f9      	ldr	r1, [r7, #28]
 801011e:	6a3a      	ldr	r2, [r7, #32]
 8010120:	e841 2300 	strex	r3, r2, [r1]
 8010124:	61bb      	str	r3, [r7, #24]
   return(result);
 8010126:	69bb      	ldr	r3, [r7, #24]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1e5      	bne.n	80100f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2220      	movs	r2, #32
 8010130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2220      	movs	r2, #32
 8010138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2220      	movs	r2, #32
 8010140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2200      	movs	r2, #0
 8010148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801014c:	2303      	movs	r3, #3
 801014e:	e010      	b.n	8010172 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	69da      	ldr	r2, [r3, #28]
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	4013      	ands	r3, r2
 801015a:	68ba      	ldr	r2, [r7, #8]
 801015c:	429a      	cmp	r2, r3
 801015e:	bf0c      	ite	eq
 8010160:	2301      	moveq	r3, #1
 8010162:	2300      	movne	r3, #0
 8010164:	b2db      	uxtb	r3, r3
 8010166:	461a      	mov	r2, r3
 8010168:	79fb      	ldrb	r3, [r7, #7]
 801016a:	429a      	cmp	r2, r3
 801016c:	f43f af46 	beq.w	800fffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010170:	2300      	movs	r3, #0
}
 8010172:	4618      	mov	r0, r3
 8010174:	3770      	adds	r7, #112	; 0x70
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
	...

0801017c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b096      	sub	sp, #88	; 0x58
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	4613      	mov	r3, r2
 8010188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	88fa      	ldrh	r2, [r7, #6]
 8010194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2222      	movs	r2, #34	; 0x22
 80101a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d02c      	beq.n	801020a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101b4:	4a42      	ldr	r2, [pc, #264]	; (80102c0 <UART_Start_Receive_DMA+0x144>)
 80101b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101bc:	4a41      	ldr	r2, [pc, #260]	; (80102c4 <UART_Start_Receive_DMA+0x148>)
 80101be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101c4:	4a40      	ldr	r2, [pc, #256]	; (80102c8 <UART_Start_Receive_DMA+0x14c>)
 80101c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101cc:	2200      	movs	r2, #0
 80101ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3324      	adds	r3, #36	; 0x24
 80101da:	4619      	mov	r1, r3
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101e0:	461a      	mov	r2, r3
 80101e2:	88fb      	ldrh	r3, [r7, #6]
 80101e4:	f7f8 fc06 	bl	80089f4 <HAL_DMA_Start_IT>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00d      	beq.n	801020a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2210      	movs	r2, #16
 80101f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2220      	movs	r2, #32
 8010202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	e055      	b.n	80102b6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2200      	movs	r2, #0
 801020e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d018      	beq.n	801024c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010222:	e853 3f00 	ldrex	r3, [r3]
 8010226:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801022e:	657b      	str	r3, [r7, #84]	; 0x54
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	461a      	mov	r2, r3
 8010236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010238:	64bb      	str	r3, [r7, #72]	; 0x48
 801023a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801023e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010240:	e841 2300 	strex	r3, r2, [r1]
 8010244:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1e6      	bne.n	801021a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	3308      	adds	r3, #8
 8010252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010256:	e853 3f00 	ldrex	r3, [r3]
 801025a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025e:	f043 0301 	orr.w	r3, r3, #1
 8010262:	653b      	str	r3, [r7, #80]	; 0x50
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	3308      	adds	r3, #8
 801026a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801026c:	637a      	str	r2, [r7, #52]	; 0x34
 801026e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010274:	e841 2300 	strex	r3, r2, [r1]
 8010278:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801027a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1e5      	bne.n	801024c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	3308      	adds	r3, #8
 8010286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	e853 3f00 	ldrex	r3, [r3]
 801028e:	613b      	str	r3, [r7, #16]
   return(result);
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	3308      	adds	r3, #8
 801029e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102a0:	623a      	str	r2, [r7, #32]
 80102a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a4:	69f9      	ldr	r1, [r7, #28]
 80102a6:	6a3a      	ldr	r2, [r7, #32]
 80102a8:	e841 2300 	strex	r3, r2, [r1]
 80102ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d1e5      	bne.n	8010280 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3758      	adds	r7, #88	; 0x58
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	0801041b 	.word	0x0801041b
 80102c4:	08010541 	.word	0x08010541
 80102c8:	08010579 	.word	0x08010579

080102cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b08f      	sub	sp, #60	; 0x3c
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102da:	6a3b      	ldr	r3, [r7, #32]
 80102dc:	e853 3f00 	ldrex	r3, [r3]
 80102e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80102e8:	637b      	str	r3, [r7, #52]	; 0x34
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80102f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102fa:	e841 2300 	strex	r3, r2, [r1]
 80102fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010302:	2b00      	cmp	r3, #0
 8010304:	d1e6      	bne.n	80102d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	3308      	adds	r3, #8
 801030c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	e853 3f00 	ldrex	r3, [r3]
 8010314:	60bb      	str	r3, [r7, #8]
   return(result);
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801031c:	633b      	str	r3, [r7, #48]	; 0x30
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3308      	adds	r3, #8
 8010324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010326:	61ba      	str	r2, [r7, #24]
 8010328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801032a:	6979      	ldr	r1, [r7, #20]
 801032c:	69ba      	ldr	r2, [r7, #24]
 801032e:	e841 2300 	strex	r3, r2, [r1]
 8010332:	613b      	str	r3, [r7, #16]
   return(result);
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1e5      	bne.n	8010306 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2220      	movs	r2, #32
 801033e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010342:	bf00      	nop
 8010344:	373c      	adds	r7, #60	; 0x3c
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801034e:	b480      	push	{r7}
 8010350:	b095      	sub	sp, #84	; 0x54
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801035e:	e853 3f00 	ldrex	r3, [r3]
 8010362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801036a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	461a      	mov	r2, r3
 8010372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010374:	643b      	str	r3, [r7, #64]	; 0x40
 8010376:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801037a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801037c:	e841 2300 	strex	r3, r2, [r1]
 8010380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1e6      	bne.n	8010356 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3308      	adds	r3, #8
 801038e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010390:	6a3b      	ldr	r3, [r7, #32]
 8010392:	e853 3f00 	ldrex	r3, [r3]
 8010396:	61fb      	str	r3, [r7, #28]
   return(result);
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801039e:	f023 0301 	bic.w	r3, r3, #1
 80103a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	3308      	adds	r3, #8
 80103aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80103ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103b4:	e841 2300 	strex	r3, r2, [r1]
 80103b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1e3      	bne.n	8010388 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	d118      	bne.n	80103fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	e853 3f00 	ldrex	r3, [r3]
 80103d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	f023 0310 	bic.w	r3, r3, #16
 80103dc:	647b      	str	r3, [r7, #68]	; 0x44
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	461a      	mov	r2, r3
 80103e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103e6:	61bb      	str	r3, [r7, #24]
 80103e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ea:	6979      	ldr	r1, [r7, #20]
 80103ec:	69ba      	ldr	r2, [r7, #24]
 80103ee:	e841 2300 	strex	r3, r2, [r1]
 80103f2:	613b      	str	r3, [r7, #16]
   return(result);
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1e6      	bne.n	80103c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2220      	movs	r2, #32
 80103fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	671a      	str	r2, [r3, #112]	; 0x70
}
 801040e:	bf00      	nop
 8010410:	3754      	adds	r7, #84	; 0x54
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr

0801041a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801041a:	b580      	push	{r7, lr}
 801041c:	b09c      	sub	sp, #112	; 0x70
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010426:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f003 0320 	and.w	r3, r3, #32
 8010432:	2b00      	cmp	r3, #0
 8010434:	d171      	bne.n	801051a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010438:	2200      	movs	r2, #0
 801043a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801043e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010446:	e853 3f00 	ldrex	r3, [r3]
 801044a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801044c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801044e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010452:	66bb      	str	r3, [r7, #104]	; 0x68
 8010454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	461a      	mov	r2, r3
 801045a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801045c:	65bb      	str	r3, [r7, #88]	; 0x58
 801045e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010464:	e841 2300 	strex	r3, r2, [r1]
 8010468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801046a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1e6      	bne.n	801043e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	3308      	adds	r3, #8
 8010476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	e853 3f00 	ldrex	r3, [r3]
 801047e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010482:	f023 0301 	bic.w	r3, r3, #1
 8010486:	667b      	str	r3, [r7, #100]	; 0x64
 8010488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3308      	adds	r3, #8
 801048e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010490:	647a      	str	r2, [r7, #68]	; 0x44
 8010492:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010498:	e841 2300 	strex	r3, r2, [r1]
 801049c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801049e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d1e5      	bne.n	8010470 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	3308      	adds	r3, #8
 80104aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	e853 3f00 	ldrex	r3, [r3]
 80104b2:	623b      	str	r3, [r7, #32]
   return(result);
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104ba:	663b      	str	r3, [r7, #96]	; 0x60
 80104bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	3308      	adds	r3, #8
 80104c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104c4:	633a      	str	r2, [r7, #48]	; 0x30
 80104c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104cc:	e841 2300 	strex	r3, r2, [r1]
 80104d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80104d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1e5      	bne.n	80104a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80104d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104da:	2220      	movs	r2, #32
 80104dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d118      	bne.n	801051a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	e853 3f00 	ldrex	r3, [r3]
 80104f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f023 0310 	bic.w	r3, r3, #16
 80104fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80104fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	461a      	mov	r2, r3
 8010504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010506:	61fb      	str	r3, [r7, #28]
 8010508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801050a:	69b9      	ldr	r1, [r7, #24]
 801050c:	69fa      	ldr	r2, [r7, #28]
 801050e:	e841 2300 	strex	r3, r2, [r1]
 8010512:	617b      	str	r3, [r7, #20]
   return(result);
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1e6      	bne.n	80104e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801051a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801051c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801051e:	2b01      	cmp	r3, #1
 8010520:	d107      	bne.n	8010532 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010528:	4619      	mov	r1, r3
 801052a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801052c:	f7f3 f89a 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010530:	e002      	b.n	8010538 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010532:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010534:	f7ff f952 	bl	800f7dc <HAL_UART_RxCpltCallback>
}
 8010538:	bf00      	nop
 801053a:	3770      	adds	r7, #112	; 0x70
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801054c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010552:	2b01      	cmp	r3, #1
 8010554:	d109      	bne.n	801056a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801055c:	085b      	lsrs	r3, r3, #1
 801055e:	b29b      	uxth	r3, r3
 8010560:	4619      	mov	r1, r3
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f7f3 f87e 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010568:	e002      	b.n	8010570 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f7ff f940 	bl	800f7f0 <HAL_UART_RxHalfCpltCallback>
}
 8010570:	bf00      	nop
 8010572:	3710      	adds	r7, #16
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b086      	sub	sp, #24
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010584:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801058c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010594:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105a0:	2b80      	cmp	r3, #128	; 0x80
 80105a2:	d109      	bne.n	80105b8 <UART_DMAError+0x40>
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	2b21      	cmp	r3, #33	; 0x21
 80105a8:	d106      	bne.n	80105b8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	2200      	movs	r2, #0
 80105ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80105b2:	6978      	ldr	r0, [r7, #20]
 80105b4:	f7ff fe8a 	bl	80102cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	689b      	ldr	r3, [r3, #8]
 80105be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105c2:	2b40      	cmp	r3, #64	; 0x40
 80105c4:	d109      	bne.n	80105da <UART_DMAError+0x62>
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2b22      	cmp	r3, #34	; 0x22
 80105ca:	d106      	bne.n	80105da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	2200      	movs	r2, #0
 80105d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80105d4:	6978      	ldr	r0, [r7, #20]
 80105d6:	f7ff feba 	bl	801034e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105e0:	f043 0210 	orr.w	r2, r3, #16
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105ea:	6978      	ldr	r0, [r7, #20]
 80105ec:	f7ff f90a 	bl	800f804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105f0:	bf00      	nop
 80105f2:	3718      	adds	r7, #24
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010604:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2200      	movs	r2, #0
 801060a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f7ff f8f4 	bl	800f804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801061c:	bf00      	nop
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b088      	sub	sp, #32
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	e853 3f00 	ldrex	r3, [r3]
 8010638:	60bb      	str	r3, [r7, #8]
   return(result);
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010640:	61fb      	str	r3, [r7, #28]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	61bb      	str	r3, [r7, #24]
 801064c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064e:	6979      	ldr	r1, [r7, #20]
 8010650:	69ba      	ldr	r2, [r7, #24]
 8010652:	e841 2300 	strex	r3, r2, [r1]
 8010656:	613b      	str	r3, [r7, #16]
   return(result);
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1e6      	bne.n	801062c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2220      	movs	r2, #32
 8010662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2200      	movs	r2, #0
 801066a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f7ff f8ab 	bl	800f7c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010672:	bf00      	nop
 8010674:	3720      	adds	r7, #32
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801067a:	b480      	push	{r7}
 801067c:	b083      	sub	sp, #12
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010682:	bf00      	nop
 8010684:	370c      	adds	r7, #12
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr

0801068e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801068e:	b480      	push	{r7}
 8010690:	b083      	sub	sp, #12
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr

080106a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80106a2:	b480      	push	{r7}
 80106a4:	b083      	sub	sp, #12
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80106aa:	bf00      	nop
 80106ac:	370c      	adds	r7, #12
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr

080106b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80106b6:	b480      	push	{r7}
 80106b8:	b085      	sub	sp, #20
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d101      	bne.n	80106cc <HAL_UARTEx_DisableFifoMode+0x16>
 80106c8:	2302      	movs	r3, #2
 80106ca:	e027      	b.n	801071c <HAL_UARTEx_DisableFifoMode+0x66>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2201      	movs	r2, #1
 80106d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2224      	movs	r2, #36	; 0x24
 80106d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	f022 0201 	bic.w	r2, r2, #1
 80106f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80106fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2220      	movs	r2, #32
 801070e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3714      	adds	r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010738:	2b01      	cmp	r3, #1
 801073a:	d101      	bne.n	8010740 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801073c:	2302      	movs	r3, #2
 801073e:	e02d      	b.n	801079c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2201      	movs	r2, #1
 8010744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2224      	movs	r2, #36	; 0x24
 801074c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f022 0201 	bic.w	r2, r2, #1
 8010766:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	683a      	ldr	r2, [r7, #0]
 8010778:	430a      	orrs	r2, r1
 801077a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 f8ab 	bl	80108d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	68fa      	ldr	r2, [r7, #12]
 8010788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2220      	movs	r2, #32
 801078e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3710      	adds	r7, #16
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d101      	bne.n	80107bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80107b8:	2302      	movs	r3, #2
 80107ba:	e02d      	b.n	8010818 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2201      	movs	r2, #1
 80107c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2224      	movs	r2, #36	; 0x24
 80107c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f022 0201 	bic.w	r2, r2, #1
 80107e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	689b      	ldr	r3, [r3, #8]
 80107ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	430a      	orrs	r2, r1
 80107f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 f86d 	bl	80108d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2220      	movs	r2, #32
 801080a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3710      	adds	r7, #16
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b08c      	sub	sp, #48	; 0x30
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	4613      	mov	r3, r2
 801082c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010834:	2b20      	cmp	r3, #32
 8010836:	d14a      	bne.n	80108ce <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d002      	beq.n	8010844 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 801083e:	88fb      	ldrh	r3, [r7, #6]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d101      	bne.n	8010848 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010844:	2301      	movs	r3, #1
 8010846:	e043      	b.n	80108d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801084e:	2b01      	cmp	r3, #1
 8010850:	d101      	bne.n	8010856 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010852:	2302      	movs	r3, #2
 8010854:	e03c      	b.n	80108d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	2201      	movs	r2, #1
 801085a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010864:	88fb      	ldrh	r3, [r7, #6]
 8010866:	461a      	mov	r2, r3
 8010868:	68b9      	ldr	r1, [r7, #8]
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f7ff fc86 	bl	801017c <UART_Start_Receive_DMA>
 8010870:	4603      	mov	r3, r0
 8010872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801087a:	2b00      	cmp	r3, #0
 801087c:	d124      	bne.n	80108c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010882:	2b01      	cmp	r3, #1
 8010884:	d11d      	bne.n	80108c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	2210      	movs	r2, #16
 801088c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	e853 3f00 	ldrex	r3, [r3]
 801089a:	617b      	str	r3, [r7, #20]
   return(result);
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	f043 0310 	orr.w	r3, r3, #16
 80108a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	461a      	mov	r2, r3
 80108aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ac:	627b      	str	r3, [r7, #36]	; 0x24
 80108ae:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b0:	6a39      	ldr	r1, [r7, #32]
 80108b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108b4:	e841 2300 	strex	r3, r2, [r1]
 80108b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80108ba:	69fb      	ldr	r3, [r7, #28]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1e6      	bne.n	801088e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80108c0:	e002      	b.n	80108c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80108c2:	2301      	movs	r3, #1
 80108c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80108c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108cc:	e000      	b.n	80108d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80108ce:	2302      	movs	r3, #2
  }
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3730      	adds	r7, #48	; 0x30
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80108d8:	b480      	push	{r7}
 80108da:	b085      	sub	sp, #20
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d108      	bne.n	80108fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2201      	movs	r2, #1
 80108ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2201      	movs	r2, #1
 80108f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80108f8:	e031      	b.n	801095e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80108fa:	2308      	movs	r3, #8
 80108fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80108fe:	2308      	movs	r3, #8
 8010900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	0e5b      	lsrs	r3, r3, #25
 801090a:	b2db      	uxtb	r3, r3
 801090c:	f003 0307 	and.w	r3, r3, #7
 8010910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	0f5b      	lsrs	r3, r3, #29
 801091a:	b2db      	uxtb	r3, r3
 801091c:	f003 0307 	and.w	r3, r3, #7
 8010920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010922:	7bbb      	ldrb	r3, [r7, #14]
 8010924:	7b3a      	ldrb	r2, [r7, #12]
 8010926:	4911      	ldr	r1, [pc, #68]	; (801096c <UARTEx_SetNbDataToProcess+0x94>)
 8010928:	5c8a      	ldrb	r2, [r1, r2]
 801092a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801092e:	7b3a      	ldrb	r2, [r7, #12]
 8010930:	490f      	ldr	r1, [pc, #60]	; (8010970 <UARTEx_SetNbDataToProcess+0x98>)
 8010932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010934:	fb93 f3f2 	sdiv	r3, r3, r2
 8010938:	b29a      	uxth	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010940:	7bfb      	ldrb	r3, [r7, #15]
 8010942:	7b7a      	ldrb	r2, [r7, #13]
 8010944:	4909      	ldr	r1, [pc, #36]	; (801096c <UARTEx_SetNbDataToProcess+0x94>)
 8010946:	5c8a      	ldrb	r2, [r1, r2]
 8010948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801094c:	7b7a      	ldrb	r2, [r7, #13]
 801094e:	4908      	ldr	r1, [pc, #32]	; (8010970 <UARTEx_SetNbDataToProcess+0x98>)
 8010950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010952:	fb93 f3f2 	sdiv	r3, r3, r2
 8010956:	b29a      	uxth	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801095e:	bf00      	nop
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	08018464 	.word	0x08018464
 8010970:	0801846c 	.word	0x0801846c

08010974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010984:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010988:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	b29a      	uxth	r2, r3
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80109a2:	b480      	push	{r7}
 80109a4:	b085      	sub	sp, #20
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80109aa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80109ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	43db      	mvns	r3, r3
 80109be:	b29b      	uxth	r3, r3
 80109c0:	4013      	ands	r3, r2
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80109ca:	2300      	movs	r3, #0
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3714      	adds	r7, #20
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80109d8:	b084      	sub	sp, #16
 80109da:	b480      	push	{r7}
 80109dc:	b083      	sub	sp, #12
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
 80109e2:	f107 0014 	add.w	r0, r7, #20
 80109e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2201      	movs	r2, #1
 80109ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010a0a:	2300      	movs	r3, #0
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	b004      	add	sp, #16
 8010a18:	4770      	bx	lr
	...

08010a1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b09d      	sub	sp, #116	; 0x74
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010a26:	2300      	movs	r3, #0
 8010a28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	881b      	ldrh	r3, [r3, #0]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8010a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	78db      	ldrb	r3, [r3, #3]
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d81f      	bhi.n	8010a8e <USB_ActivateEndpoint+0x72>
 8010a4e:	a201      	add	r2, pc, #4	; (adr r2, 8010a54 <USB_ActivateEndpoint+0x38>)
 8010a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a54:	08010a65 	.word	0x08010a65
 8010a58:	08010a81 	.word	0x08010a81
 8010a5c:	08010a97 	.word	0x08010a97
 8010a60:	08010a73 	.word	0x08010a73
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010a64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010a70:	e012      	b.n	8010a98 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010a72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010a76:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8010a7a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010a7e:	e00b      	b.n	8010a98 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010a80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010a88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010a8c:	e004      	b.n	8010a98 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010a94:	e000      	b.n	8010a98 <USB_ActivateEndpoint+0x7c>
      break;
 8010a96:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	441a      	add	r2, r3
 8010aa2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	4413      	add	r3, r2
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	b21b      	sxth	r3, r3
 8010aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ad2:	b21a      	sxth	r2, r3
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	b21b      	sxth	r3, r3
 8010ada:	4313      	orrs	r3, r2
 8010adc:	b21b      	sxth	r3, r3
 8010ade:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	441a      	add	r2, r3
 8010aec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	7b1b      	ldrb	r3, [r3, #12]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f040 8149 	bne.w	8010da0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	785b      	ldrb	r3, [r3, #1]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f000 8084 	beq.w	8010c20 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	61bb      	str	r3, [r7, #24]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	461a      	mov	r2, r3
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	4413      	add	r3, r2
 8010b2a:	61bb      	str	r3, [r7, #24]
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	00da      	lsls	r2, r3, #3
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	4413      	add	r3, r2
 8010b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010b3a:	617b      	str	r3, [r7, #20]
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	88db      	ldrh	r3, [r3, #6]
 8010b40:	085b      	lsrs	r3, r3, #1
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	005b      	lsls	r3, r3, #1
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	4413      	add	r3, r2
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	827b      	strh	r3, [r7, #18]
 8010b5a:	8a7b      	ldrh	r3, [r7, #18]
 8010b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d01b      	beq.n	8010b9c <USB_ActivateEndpoint+0x180>
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	4413      	add	r3, r2
 8010b6e:	881b      	ldrh	r3, [r3, #0]
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b7a:	823b      	strh	r3, [r7, #16]
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	441a      	add	r2, r3
 8010b86:	8a3b      	ldrh	r3, [r7, #16]
 8010b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	78db      	ldrb	r3, [r3, #3]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d020      	beq.n	8010be6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	4413      	add	r3, r2
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bba:	81bb      	strh	r3, [r7, #12]
 8010bbc:	89bb      	ldrh	r3, [r7, #12]
 8010bbe:	f083 0320 	eor.w	r3, r3, #32
 8010bc2:	81bb      	strh	r3, [r7, #12]
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	441a      	add	r2, r3
 8010bce:	89bb      	ldrh	r3, [r7, #12]
 8010bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	8013      	strh	r3, [r2, #0]
 8010be4:	e2a6      	b.n	8011134 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010be6:	687a      	ldr	r2, [r7, #4]
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	4413      	add	r3, r2
 8010bf0:	881b      	ldrh	r3, [r3, #0]
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bfc:	81fb      	strh	r3, [r7, #14]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	441a      	add	r2, r3
 8010c08:	89fb      	ldrh	r3, [r7, #14]
 8010c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	8013      	strh	r3, [r2, #0]
 8010c1e:	e289      	b.n	8011134 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	633b      	str	r3, [r7, #48]	; 0x30
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c30:	4413      	add	r3, r2
 8010c32:	633b      	str	r3, [r7, #48]	; 0x30
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	00da      	lsls	r2, r3, #3
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3c:	4413      	add	r3, r2
 8010c3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	88db      	ldrh	r3, [r3, #6]
 8010c48:	085b      	lsrs	r3, r3, #1
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	005b      	lsls	r3, r3, #1
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c52:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	461a      	mov	r2, r3
 8010c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c64:	4413      	add	r3, r2
 8010c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	00da      	lsls	r2, r3, #3
 8010c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c70:	4413      	add	r3, r2
 8010c72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010c76:	627b      	str	r3, [r7, #36]	; 0x24
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	691b      	ldr	r3, [r3, #16]
 8010c7c:	2b3e      	cmp	r3, #62	; 0x3e
 8010c7e:	d918      	bls.n	8010cb2 <USB_ActivateEndpoint+0x296>
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	095b      	lsrs	r3, r3, #5
 8010c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	691b      	ldr	r3, [r3, #16]
 8010c8c:	f003 031f 	and.w	r3, r3, #31
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d102      	bne.n	8010c9a <USB_ActivateEndpoint+0x27e>
 8010c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c96:	3b01      	subs	r3, #1
 8010c98:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	029b      	lsls	r3, r3, #10
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	801a      	strh	r2, [r3, #0]
 8010cb0:	e029      	b.n	8010d06 <USB_ActivateEndpoint+0x2ea>
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d112      	bne.n	8010ce0 <USB_ActivateEndpoint+0x2c4>
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	801a      	strh	r2, [r3, #0]
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	881b      	ldrh	r3, [r3, #0]
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	801a      	strh	r2, [r3, #0]
 8010cde:	e012      	b.n	8010d06 <USB_ActivateEndpoint+0x2ea>
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	691b      	ldr	r3, [r3, #16]
 8010ce4:	085b      	lsrs	r3, r3, #1
 8010ce6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	691b      	ldr	r3, [r3, #16]
 8010cec:	f003 0301 	and.w	r3, r3, #1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <USB_ActivateEndpoint+0x2de>
 8010cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	029b      	lsls	r3, r3, #10
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010d06:	687a      	ldr	r2, [r7, #4]
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4413      	add	r3, r2
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	847b      	strh	r3, [r7, #34]	; 0x22
 8010d14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d01b      	beq.n	8010d56 <USB_ActivateEndpoint+0x33a>
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	4413      	add	r3, r2
 8010d28:	881b      	ldrh	r3, [r3, #0]
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d34:	843b      	strh	r3, [r7, #32]
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	441a      	add	r2, r3
 8010d40:	8c3b      	ldrh	r3, [r7, #32]
 8010d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d6c:	83fb      	strh	r3, [r7, #30]
 8010d6e:	8bfb      	ldrh	r3, [r7, #30]
 8010d70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010d74:	83fb      	strh	r3, [r7, #30]
 8010d76:	8bfb      	ldrh	r3, [r7, #30]
 8010d78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010d7c:	83fb      	strh	r3, [r7, #30]
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	441a      	add	r2, r3
 8010d88:	8bfb      	ldrh	r3, [r7, #30]
 8010d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	8013      	strh	r3, [r2, #0]
 8010d9e:	e1c9      	b.n	8011134 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	78db      	ldrb	r3, [r3, #3]
 8010da4:	2b02      	cmp	r3, #2
 8010da6:	d11e      	bne.n	8010de6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	009b      	lsls	r3, r3, #2
 8010db0:	4413      	add	r3, r2
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dbe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	441a      	add	r2, r3
 8010dcc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	8013      	strh	r3, [r2, #0]
 8010de4:	e01d      	b.n	8010e22 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4413      	add	r3, r2
 8010df0:	881b      	ldrh	r3, [r3, #0]
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	441a      	add	r2, r3
 8010e0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	461a      	mov	r2, r3
 8010e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e32:	4413      	add	r3, r2
 8010e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	00da      	lsls	r2, r3, #3
 8010e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e3e:	4413      	add	r3, r2
 8010e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	891b      	ldrh	r3, [r3, #8]
 8010e4a:	085b      	lsrs	r3, r3, #1
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	005b      	lsls	r3, r3, #1
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e54:	801a      	strh	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	657b      	str	r3, [r7, #84]	; 0x54
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	461a      	mov	r2, r3
 8010e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e66:	4413      	add	r3, r2
 8010e68:	657b      	str	r3, [r7, #84]	; 0x54
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	00da      	lsls	r2, r3, #3
 8010e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e72:	4413      	add	r3, r2
 8010e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010e78:	653b      	str	r3, [r7, #80]	; 0x50
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	895b      	ldrh	r3, [r3, #10]
 8010e7e:	085b      	lsrs	r3, r3, #1
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	005b      	lsls	r3, r3, #1
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e88:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	785b      	ldrb	r3, [r3, #1]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f040 8093 	bne.w	8010fba <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	4413      	add	r3, r2
 8010e9e:	881b      	ldrh	r3, [r3, #0]
 8010ea0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010ea4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d01b      	beq.n	8010ee8 <USB_ActivateEndpoint+0x4cc>
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	4413      	add	r3, r2
 8010eba:	881b      	ldrh	r3, [r3, #0]
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ec6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	441a      	add	r2, r3
 8010ed2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4413      	add	r3, r2
 8010ef2:	881b      	ldrh	r3, [r3, #0]
 8010ef4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010ef6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d01b      	beq.n	8010f38 <USB_ActivateEndpoint+0x51c>
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	4413      	add	r3, r2
 8010f0a:	881b      	ldrh	r3, [r3, #0]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f16:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	009b      	lsls	r3, r3, #2
 8010f20:	441a      	add	r2, r3
 8010f22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	881b      	ldrh	r3, [r3, #0]
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f4e:	873b      	strh	r3, [r7, #56]	; 0x38
 8010f50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010f52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010f56:	873b      	strh	r3, [r7, #56]	; 0x38
 8010f58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010f5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010f5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	441a      	add	r2, r3
 8010f6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	4413      	add	r3, r2
 8010f8a:	881b      	ldrh	r3, [r3, #0]
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f96:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	441a      	add	r2, r3
 8010fa2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	8013      	strh	r3, [r2, #0]
 8010fb8:	e0bc      	b.n	8011134 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010fba:	687a      	ldr	r2, [r7, #4]
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	881b      	ldrh	r3, [r3, #0]
 8010fc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010fca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d01d      	beq.n	8011012 <USB_ActivateEndpoint+0x5f6>
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	881b      	ldrh	r3, [r3, #0]
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	441a      	add	r2, r3
 8010ffa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801100a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801100e:	b29b      	uxth	r3, r3
 8011010:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	4413      	add	r3, r2
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011022:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801102a:	2b00      	cmp	r3, #0
 801102c:	d01d      	beq.n	801106a <USB_ActivateEndpoint+0x64e>
 801102e:	687a      	ldr	r2, [r7, #4]
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	4413      	add	r3, r2
 8011038:	881b      	ldrh	r3, [r3, #0]
 801103a:	b29b      	uxth	r3, r3
 801103c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011044:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	441a      	add	r2, r3
 8011052:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801105a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801105e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011066:	b29b      	uxth	r3, r3
 8011068:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	78db      	ldrb	r3, [r3, #3]
 801106e:	2b01      	cmp	r3, #1
 8011070:	d024      	beq.n	80110bc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	4413      	add	r3, r2
 801107c:	881b      	ldrh	r3, [r3, #0]
 801107e:	b29b      	uxth	r3, r3
 8011080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011088:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801108c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011090:	f083 0320 	eor.w	r3, r3, #32
 8011094:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	441a      	add	r2, r3
 80110a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80110a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	8013      	strh	r3, [r2, #0]
 80110ba:	e01d      	b.n	80110f8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	4413      	add	r3, r2
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	009b      	lsls	r3, r3, #2
 80110de:	441a      	add	r2, r3
 80110e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80110e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	4413      	add	r3, r2
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	b29b      	uxth	r3, r3
 8011106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801110a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801110e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	441a      	add	r2, r3
 801111c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011130:	b29b      	uxth	r3, r3
 8011132:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011134:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011138:	4618      	mov	r0, r3
 801113a:	3774      	adds	r7, #116	; 0x74
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011144:	b480      	push	{r7}
 8011146:	b08d      	sub	sp, #52	; 0x34
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	7b1b      	ldrb	r3, [r3, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	f040 808e 	bne.w	8011274 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	785b      	ldrb	r3, [r3, #1]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d044      	beq.n	80111ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4413      	add	r3, r2
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	81bb      	strh	r3, [r7, #12]
 801116e:	89bb      	ldrh	r3, [r7, #12]
 8011170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01b      	beq.n	80111b0 <USB_DeactivateEndpoint+0x6c>
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	4413      	add	r3, r2
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	b29b      	uxth	r3, r3
 8011186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801118a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801118e:	817b      	strh	r3, [r7, #10]
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	441a      	add	r2, r3
 801119a:	897b      	ldrh	r3, [r7, #10]
 801119c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	4413      	add	r3, r2
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	b29b      	uxth	r3, r3
 80111be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111c6:	813b      	strh	r3, [r7, #8]
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	781b      	ldrb	r3, [r3, #0]
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	441a      	add	r2, r3
 80111d2:	893b      	ldrh	r3, [r7, #8]
 80111d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	8013      	strh	r3, [r2, #0]
 80111e8:	e192      	b.n	8011510 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	4413      	add	r3, r2
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	827b      	strh	r3, [r7, #18]
 80111f8:	8a7b      	ldrh	r3, [r7, #18]
 80111fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d01b      	beq.n	801123a <USB_DeactivateEndpoint+0xf6>
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	4413      	add	r3, r2
 801120c:	881b      	ldrh	r3, [r3, #0]
 801120e:	b29b      	uxth	r3, r3
 8011210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011218:	823b      	strh	r3, [r7, #16]
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	441a      	add	r2, r3
 8011224:	8a3b      	ldrh	r3, [r7, #16]
 8011226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801122a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801122e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011236:	b29b      	uxth	r3, r3
 8011238:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	4413      	add	r3, r2
 8011244:	881b      	ldrh	r3, [r3, #0]
 8011246:	b29b      	uxth	r3, r3
 8011248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801124c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011250:	81fb      	strh	r3, [r7, #14]
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	441a      	add	r2, r3
 801125c:	89fb      	ldrh	r3, [r7, #14]
 801125e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801126a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801126e:	b29b      	uxth	r3, r3
 8011270:	8013      	strh	r3, [r2, #0]
 8011272:	e14d      	b.n	8011510 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	785b      	ldrb	r3, [r3, #1]
 8011278:	2b00      	cmp	r3, #0
 801127a:	f040 80a5 	bne.w	80113c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	009b      	lsls	r3, r3, #2
 8011286:	4413      	add	r3, r2
 8011288:	881b      	ldrh	r3, [r3, #0]
 801128a:	843b      	strh	r3, [r7, #32]
 801128c:	8c3b      	ldrh	r3, [r7, #32]
 801128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011292:	2b00      	cmp	r3, #0
 8011294:	d01b      	beq.n	80112ce <USB_DeactivateEndpoint+0x18a>
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	881b      	ldrh	r3, [r3, #0]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112ac:	83fb      	strh	r3, [r7, #30]
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	441a      	add	r2, r3
 80112b8:	8bfb      	ldrh	r3, [r7, #30]
 80112ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80112c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	83bb      	strh	r3, [r7, #28]
 80112dc:	8bbb      	ldrh	r3, [r7, #28]
 80112de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d01b      	beq.n	801131e <USB_DeactivateEndpoint+0x1da>
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	4413      	add	r3, r2
 80112f0:	881b      	ldrh	r3, [r3, #0]
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112fc:	837b      	strh	r3, [r7, #26]
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	441a      	add	r2, r3
 8011308:	8b7b      	ldrh	r3, [r7, #26]
 801130a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801130e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011316:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801131a:	b29b      	uxth	r3, r3
 801131c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	4413      	add	r3, r2
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	b29b      	uxth	r3, r3
 801132c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011334:	833b      	strh	r3, [r7, #24]
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	009b      	lsls	r3, r3, #2
 801133e:	441a      	add	r2, r3
 8011340:	8b3b      	ldrh	r3, [r7, #24]
 8011342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801134a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801134e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011352:	b29b      	uxth	r3, r3
 8011354:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	4413      	add	r3, r2
 8011360:	881b      	ldrh	r3, [r3, #0]
 8011362:	b29b      	uxth	r3, r3
 8011364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801136c:	82fb      	strh	r3, [r7, #22]
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	441a      	add	r2, r3
 8011378:	8afb      	ldrh	r3, [r7, #22]
 801137a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801137e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801138a:	b29b      	uxth	r3, r3
 801138c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	4413      	add	r3, r2
 8011398:	881b      	ldrh	r3, [r3, #0]
 801139a:	b29b      	uxth	r3, r3
 801139c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113a4:	82bb      	strh	r3, [r7, #20]
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	441a      	add	r2, r3
 80113b0:	8abb      	ldrh	r3, [r7, #20]
 80113b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	8013      	strh	r3, [r2, #0]
 80113c6:	e0a3      	b.n	8011510 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4413      	add	r3, r2
 80113d2:	881b      	ldrh	r3, [r3, #0]
 80113d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80113d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d01b      	beq.n	8011418 <USB_DeactivateEndpoint+0x2d4>
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4413      	add	r3, r2
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	441a      	add	r2, r3
 8011402:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801140c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011414:	b29b      	uxth	r3, r3
 8011416:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	4413      	add	r3, r2
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801142c:	2b00      	cmp	r3, #0
 801142e:	d01b      	beq.n	8011468 <USB_DeactivateEndpoint+0x324>
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	b29b      	uxth	r3, r3
 801143e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011446:	853b      	strh	r3, [r7, #40]	; 0x28
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	441a      	add	r2, r3
 8011452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801145c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011464:	b29b      	uxth	r3, r3
 8011466:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011468:	687a      	ldr	r2, [r7, #4]
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	4413      	add	r3, r2
 8011472:	881b      	ldrh	r3, [r3, #0]
 8011474:	b29b      	uxth	r3, r3
 8011476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801147a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801147e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	441a      	add	r2, r3
 801148a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801148c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801149c:	b29b      	uxth	r3, r3
 801149e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	4413      	add	r3, r2
 80114aa:	881b      	ldrh	r3, [r3, #0]
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80114b8:	687a      	ldr	r2, [r7, #4]
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	441a      	add	r2, r3
 80114c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	4413      	add	r3, r2
 80114e2:	881b      	ldrh	r3, [r3, #0]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80114ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	441a      	add	r2, r3
 80114fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801150c:	b29b      	uxth	r3, r3
 801150e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3734      	adds	r7, #52	; 0x34
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801151e:	b580      	push	{r7, lr}
 8011520:	b0c2      	sub	sp, #264	; 0x108
 8011522:	af00      	add	r7, sp, #0
 8011524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801152c:	6018      	str	r0, [r3, #0]
 801152e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011536:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	785b      	ldrb	r3, [r3, #1]
 8011544:	2b01      	cmp	r3, #1
 8011546:	f040 867b 	bne.w	8012240 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801154a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801154e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	699a      	ldr	r2, [r3, #24]
 8011556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801155a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	429a      	cmp	r2, r3
 8011564:	d908      	bls.n	8011578 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801156a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011576:	e007      	b.n	8011588 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801157c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	699b      	ldr	r3, [r3, #24]
 8011584:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801158c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	7b1b      	ldrb	r3, [r3, #12]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d13a      	bne.n	801160e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801159c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	6959      	ldr	r1, [r3, #20]
 80115a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	88da      	ldrh	r2, [r3, #6]
 80115b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80115ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80115be:	6800      	ldr	r0, [r0, #0]
 80115c0:	f001 fc1d 	bl	8012dfe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80115c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	613b      	str	r3, [r7, #16]
 80115d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115de:	b29b      	uxth	r3, r3
 80115e0:	461a      	mov	r2, r3
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	4413      	add	r3, r2
 80115e6:	613b      	str	r3, [r7, #16]
 80115e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	00da      	lsls	r2, r3, #3
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	4413      	add	r3, r2
 80115fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80115fe:	60fb      	str	r3, [r7, #12]
 8011600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011604:	b29a      	uxth	r2, r3
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	801a      	strh	r2, [r3, #0]
 801160a:	f000 bde3 	b.w	80121d4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801160e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	78db      	ldrb	r3, [r3, #3]
 801161a:	2b02      	cmp	r3, #2
 801161c:	f040 843a 	bne.w	8011e94 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	6a1a      	ldr	r2, [r3, #32]
 801162c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	429a      	cmp	r2, r3
 801163a:	f240 83b7 	bls.w	8011dac <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801163e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801164c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	881b      	ldrh	r3, [r3, #0]
 801165a:	b29b      	uxth	r3, r3
 801165c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011664:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801166c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011670:	681a      	ldr	r2, [r3, #0]
 8011672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	009b      	lsls	r3, r3, #2
 8011680:	441a      	add	r2, r3
 8011682:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801168a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801168e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011696:	b29b      	uxth	r3, r3
 8011698:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801169a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801169e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	6a1a      	ldr	r2, [r3, #32]
 80116a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116aa:	1ad2      	subs	r2, r2, r3
 80116ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80116b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	009b      	lsls	r3, r3, #2
 80116d0:	4413      	add	r3, r2
 80116d2:	881b      	ldrh	r3, [r3, #0]
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f000 81b3 	beq.w	8011a46 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80116e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	633b      	str	r3, [r7, #48]	; 0x30
 80116ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	785b      	ldrb	r3, [r3, #1]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d16d      	bne.n	80117d8 <USB_EPStartXfer+0x2ba>
 80116fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	62bb      	str	r3, [r7, #40]	; 0x28
 8011708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801170c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011716:	b29b      	uxth	r3, r3
 8011718:	461a      	mov	r2, r3
 801171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171c:	4413      	add	r3, r2
 801171e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	00da      	lsls	r2, r3, #3
 801172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011730:	4413      	add	r3, r2
 8011732:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011736:	627b      	str	r3, [r7, #36]	; 0x24
 8011738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801173c:	2b3e      	cmp	r3, #62	; 0x3e
 801173e:	d91c      	bls.n	801177a <USB_EPStartXfer+0x25c>
 8011740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011744:	095b      	lsrs	r3, r3, #5
 8011746:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801174a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801174e:	f003 031f 	and.w	r3, r3, #31
 8011752:	2b00      	cmp	r3, #0
 8011754:	d104      	bne.n	8011760 <USB_EPStartXfer+0x242>
 8011756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801175a:	3b01      	subs	r3, #1
 801175c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011760:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011764:	b29b      	uxth	r3, r3
 8011766:	029b      	lsls	r3, r3, #10
 8011768:	b29b      	uxth	r3, r3
 801176a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801176e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011772:	b29a      	uxth	r2, r3
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	801a      	strh	r2, [r3, #0]
 8011778:	e053      	b.n	8011822 <USB_EPStartXfer+0x304>
 801177a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801177e:	2b00      	cmp	r3, #0
 8011780:	d112      	bne.n	80117a8 <USB_EPStartXfer+0x28a>
 8011782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	b29b      	uxth	r3, r3
 8011788:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801178c:	b29a      	uxth	r2, r3
 801178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011790:	801a      	strh	r2, [r3, #0]
 8011792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011794:	881b      	ldrh	r3, [r3, #0]
 8011796:	b29b      	uxth	r3, r3
 8011798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801179c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a4:	801a      	strh	r2, [r3, #0]
 80117a6:	e03c      	b.n	8011822 <USB_EPStartXfer+0x304>
 80117a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117ac:	085b      	lsrs	r3, r3, #1
 80117ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80117b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117b6:	f003 0301 	and.w	r3, r3, #1
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d004      	beq.n	80117c8 <USB_EPStartXfer+0x2aa>
 80117be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80117c2:	3301      	adds	r3, #1
 80117c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80117c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	029b      	lsls	r3, r3, #10
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d4:	801a      	strh	r2, [r3, #0]
 80117d6:	e024      	b.n	8011822 <USB_EPStartXfer+0x304>
 80117d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	785b      	ldrb	r3, [r3, #1]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d11c      	bne.n	8011822 <USB_EPStartXfer+0x304>
 80117e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	461a      	mov	r2, r3
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	4413      	add	r3, r2
 80117fe:	633b      	str	r3, [r7, #48]	; 0x30
 8011800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	00da      	lsls	r2, r3, #3
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	4413      	add	r3, r2
 8011812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801181c:	b29a      	uxth	r2, r3
 801181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	895b      	ldrh	r3, [r3, #10]
 801182e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	6959      	ldr	r1, [r3, #20]
 801183e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011842:	b29b      	uxth	r3, r3
 8011844:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011848:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801184c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011850:	6800      	ldr	r0, [r0, #0]
 8011852:	f001 fad4 	bl	8012dfe <USB_WritePMA>
            ep->xfer_buff += len;
 8011856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801185a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	695a      	ldr	r2, [r3, #20]
 8011862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011866:	441a      	add	r2, r3
 8011868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801186c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	6a1a      	ldr	r2, [r3, #32]
 8011880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	691b      	ldr	r3, [r3, #16]
 801188c:	429a      	cmp	r2, r3
 801188e:	d90f      	bls.n	80118b0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	6a1a      	ldr	r2, [r3, #32]
 801189c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118a0:	1ad2      	subs	r2, r2, r3
 80118a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	621a      	str	r2, [r3, #32]
 80118ae:	e00e      	b.n	80118ce <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80118b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	6a1b      	ldr	r3, [r3, #32]
 80118bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80118c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2200      	movs	r2, #0
 80118cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80118ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	785b      	ldrb	r3, [r3, #1]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d16d      	bne.n	80119ba <USB_EPStartXfer+0x49c>
 80118de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	61bb      	str	r3, [r7, #24]
 80118ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	461a      	mov	r2, r3
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	4413      	add	r3, r2
 8011900:	61bb      	str	r3, [r7, #24]
 8011902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	00da      	lsls	r2, r3, #3
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	4413      	add	r3, r2
 8011914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011918:	617b      	str	r3, [r7, #20]
 801191a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801191e:	2b3e      	cmp	r3, #62	; 0x3e
 8011920:	d91c      	bls.n	801195c <USB_EPStartXfer+0x43e>
 8011922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011926:	095b      	lsrs	r3, r3, #5
 8011928:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801192c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011930:	f003 031f 	and.w	r3, r3, #31
 8011934:	2b00      	cmp	r3, #0
 8011936:	d104      	bne.n	8011942 <USB_EPStartXfer+0x424>
 8011938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801193c:	3b01      	subs	r3, #1
 801193e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011946:	b29b      	uxth	r3, r3
 8011948:	029b      	lsls	r3, r3, #10
 801194a:	b29b      	uxth	r3, r3
 801194c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011954:	b29a      	uxth	r2, r3
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	801a      	strh	r2, [r3, #0]
 801195a:	e059      	b.n	8011a10 <USB_EPStartXfer+0x4f2>
 801195c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011960:	2b00      	cmp	r3, #0
 8011962:	d112      	bne.n	801198a <USB_EPStartXfer+0x46c>
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	b29b      	uxth	r3, r3
 801196a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801196e:	b29a      	uxth	r2, r3
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	801a      	strh	r2, [r3, #0]
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	881b      	ldrh	r3, [r3, #0]
 8011978:	b29b      	uxth	r3, r3
 801197a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801197e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011982:	b29a      	uxth	r2, r3
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	801a      	strh	r2, [r3, #0]
 8011988:	e042      	b.n	8011a10 <USB_EPStartXfer+0x4f2>
 801198a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801198e:	085b      	lsrs	r3, r3, #1
 8011990:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011998:	f003 0301 	and.w	r3, r3, #1
 801199c:	2b00      	cmp	r3, #0
 801199e:	d004      	beq.n	80119aa <USB_EPStartXfer+0x48c>
 80119a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80119a4:	3301      	adds	r3, #1
 80119a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80119aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	029b      	lsls	r3, r3, #10
 80119b2:	b29a      	uxth	r2, r3
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	801a      	strh	r2, [r3, #0]
 80119b8:	e02a      	b.n	8011a10 <USB_EPStartXfer+0x4f2>
 80119ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	785b      	ldrb	r3, [r3, #1]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d122      	bne.n	8011a10 <USB_EPStartXfer+0x4f2>
 80119ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	623b      	str	r3, [r7, #32]
 80119d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	461a      	mov	r2, r3
 80119e8:	6a3b      	ldr	r3, [r7, #32]
 80119ea:	4413      	add	r3, r2
 80119ec:	623b      	str	r3, [r7, #32]
 80119ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	00da      	lsls	r2, r3, #3
 80119fc:	6a3b      	ldr	r3, [r7, #32]
 80119fe:	4413      	add	r3, r2
 8011a00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011a04:	61fb      	str	r3, [r7, #28]
 8011a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	891b      	ldrh	r3, [r3, #8]
 8011a1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	6959      	ldr	r1, [r3, #20]
 8011a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011a36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011a3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011a3e:	6800      	ldr	r0, [r0, #0]
 8011a40:	f001 f9dd 	bl	8012dfe <USB_WritePMA>
 8011a44:	e3c6      	b.n	80121d4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	785b      	ldrb	r3, [r3, #1]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d16d      	bne.n	8011b32 <USB_EPStartXfer+0x614>
 8011a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	461a      	mov	r2, r3
 8011a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a76:	4413      	add	r3, r2
 8011a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	00da      	lsls	r2, r3, #3
 8011a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011a90:	647b      	str	r3, [r7, #68]	; 0x44
 8011a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a96:	2b3e      	cmp	r3, #62	; 0x3e
 8011a98:	d91c      	bls.n	8011ad4 <USB_EPStartXfer+0x5b6>
 8011a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a9e:	095b      	lsrs	r3, r3, #5
 8011aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aa8:	f003 031f 	and.w	r3, r3, #31
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d104      	bne.n	8011aba <USB_EPStartXfer+0x59c>
 8011ab0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	029b      	lsls	r3, r3, #10
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ad0:	801a      	strh	r2, [r3, #0]
 8011ad2:	e059      	b.n	8011b88 <USB_EPStartXfer+0x66a>
 8011ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d112      	bne.n	8011b02 <USB_EPStartXfer+0x5e4>
 8011adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ade:	881b      	ldrh	r3, [r3, #0]
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aea:	801a      	strh	r2, [r3, #0]
 8011aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011afe:	801a      	strh	r2, [r3, #0]
 8011b00:	e042      	b.n	8011b88 <USB_EPStartXfer+0x66a>
 8011b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b06:	085b      	lsrs	r3, r3, #1
 8011b08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b10:	f003 0301 	and.w	r3, r3, #1
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d004      	beq.n	8011b22 <USB_EPStartXfer+0x604>
 8011b18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	029b      	lsls	r3, r3, #10
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b2e:	801a      	strh	r2, [r3, #0]
 8011b30:	e02a      	b.n	8011b88 <USB_EPStartXfer+0x66a>
 8011b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	785b      	ldrb	r3, [r3, #1]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d122      	bne.n	8011b88 <USB_EPStartXfer+0x66a>
 8011b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8011b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	461a      	mov	r2, r3
 8011b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b62:	4413      	add	r3, r2
 8011b64:	653b      	str	r3, [r7, #80]	; 0x50
 8011b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	00da      	lsls	r2, r3, #3
 8011b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b76:	4413      	add	r3, r2
 8011b78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b82:	b29a      	uxth	r2, r3
 8011b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	891b      	ldrh	r3, [r3, #8]
 8011b94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	6959      	ldr	r1, [r3, #20]
 8011ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011bae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011bb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011bb6:	6800      	ldr	r0, [r0, #0]
 8011bb8:	f001 f921 	bl	8012dfe <USB_WritePMA>
            ep->xfer_buff += len;
 8011bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	695a      	ldr	r2, [r3, #20]
 8011bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bcc:	441a      	add	r2, r3
 8011bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	6a1a      	ldr	r2, [r3, #32]
 8011be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	691b      	ldr	r3, [r3, #16]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d90f      	bls.n	8011c16 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8011bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	6a1a      	ldr	r2, [r3, #32]
 8011c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c06:	1ad2      	subs	r2, r2, r3
 8011c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	621a      	str	r2, [r3, #32]
 8011c14:	e00e      	b.n	8011c34 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8011c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	6a1b      	ldr	r3, [r3, #32]
 8011c22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2200      	movs	r2, #0
 8011c32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8011c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	785b      	ldrb	r3, [r3, #1]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d16d      	bne.n	8011d2c <USB_EPStartXfer+0x80e>
 8011c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c70:	4413      	add	r3, r2
 8011c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	00da      	lsls	r2, r3, #3
 8011c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c84:	4413      	add	r3, r2
 8011c86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8011c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c90:	2b3e      	cmp	r3, #62	; 0x3e
 8011c92:	d91c      	bls.n	8011cce <USB_EPStartXfer+0x7b0>
 8011c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c98:	095b      	lsrs	r3, r3, #5
 8011c9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ca2:	f003 031f 	and.w	r3, r3, #31
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d104      	bne.n	8011cb4 <USB_EPStartXfer+0x796>
 8011caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cae:	3b01      	subs	r3, #1
 8011cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	029b      	lsls	r3, r3, #10
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cca:	801a      	strh	r2, [r3, #0]
 8011ccc:	e053      	b.n	8011d76 <USB_EPStartXfer+0x858>
 8011cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d112      	bne.n	8011cfc <USB_EPStartXfer+0x7de>
 8011cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011ce0:	b29a      	uxth	r2, r3
 8011ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ce4:	801a      	strh	r2, [r3, #0]
 8011ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ce8:	881b      	ldrh	r3, [r3, #0]
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cf8:	801a      	strh	r2, [r3, #0]
 8011cfa:	e03c      	b.n	8011d76 <USB_EPStartXfer+0x858>
 8011cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d00:	085b      	lsrs	r3, r3, #1
 8011d02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d0a:	f003 0301 	and.w	r3, r3, #1
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d004      	beq.n	8011d1c <USB_EPStartXfer+0x7fe>
 8011d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d16:	3301      	adds	r3, #1
 8011d18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	029b      	lsls	r3, r3, #10
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d28:	801a      	strh	r2, [r3, #0]
 8011d2a:	e024      	b.n	8011d76 <USB_EPStartXfer+0x858>
 8011d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	785b      	ldrb	r3, [r3, #1]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d11c      	bne.n	8011d76 <USB_EPStartXfer+0x858>
 8011d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d50:	4413      	add	r3, r2
 8011d52:	643b      	str	r3, [r7, #64]	; 0x40
 8011d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	00da      	lsls	r2, r3, #3
 8011d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d64:	4413      	add	r3, r2
 8011d66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	895b      	ldrh	r3, [r3, #10]
 8011d82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	6959      	ldr	r1, [r3, #20]
 8011d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011d9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011da0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011da4:	6800      	ldr	r0, [r0, #0]
 8011da6:	f001 f82a 	bl	8012dfe <USB_WritePMA>
 8011daa:	e213      	b.n	80121d4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	6a1b      	ldr	r3, [r3, #32]
 8011db8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	4413      	add	r3, r2
 8011dd6:	881b      	ldrh	r3, [r3, #0]
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011de2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	441a      	add	r2, r3
 8011e00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	461a      	mov	r2, r3
 8011e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e38:	4413      	add	r3, r2
 8011e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	00da      	lsls	r2, r3, #3
 8011e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e4c:	4413      	add	r3, r2
 8011e4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011e52:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e58:	b29a      	uxth	r2, r3
 8011e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	891b      	ldrh	r3, [r3, #8]
 8011e6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	6959      	ldr	r1, [r3, #20]
 8011e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011e84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011e88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011e8c:	6800      	ldr	r0, [r0, #0]
 8011e8e:	f000 ffb6 	bl	8012dfe <USB_WritePMA>
 8011e92:	e19f      	b.n	80121d4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	6a1a      	ldr	r2, [r3, #32]
 8011ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ea4:	1ad2      	subs	r2, r2, r3
 8011ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	4413      	add	r3, r2
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f000 80bc 	beq.w	8012052 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8011ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	785b      	ldrb	r3, [r3, #1]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d16d      	bne.n	8011fd2 <USB_EPStartXfer+0xab4>
 8011ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8011f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	461a      	mov	r2, r3
 8011f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f16:	4413      	add	r3, r2
 8011f18:	66bb      	str	r3, [r7, #104]	; 0x68
 8011f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	00da      	lsls	r2, r3, #3
 8011f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f2a:	4413      	add	r3, r2
 8011f2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011f30:	667b      	str	r3, [r7, #100]	; 0x64
 8011f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f36:	2b3e      	cmp	r3, #62	; 0x3e
 8011f38:	d91c      	bls.n	8011f74 <USB_EPStartXfer+0xa56>
 8011f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f3e:	095b      	lsrs	r3, r3, #5
 8011f40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f48:	f003 031f 	and.w	r3, r3, #31
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d104      	bne.n	8011f5a <USB_EPStartXfer+0xa3c>
 8011f50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011f54:	3b01      	subs	r3, #1
 8011f56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011f5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	029b      	lsls	r3, r3, #10
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f70:	801a      	strh	r2, [r3, #0]
 8011f72:	e053      	b.n	801201c <USB_EPStartXfer+0xafe>
 8011f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d112      	bne.n	8011fa2 <USB_EPStartXfer+0xa84>
 8011f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f7e:	881b      	ldrh	r3, [r3, #0]
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011f86:	b29a      	uxth	r2, r3
 8011f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f8a:	801a      	strh	r2, [r3, #0]
 8011f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f8e:	881b      	ldrh	r3, [r3, #0]
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f9e:	801a      	strh	r2, [r3, #0]
 8011fa0:	e03c      	b.n	801201c <USB_EPStartXfer+0xafe>
 8011fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fa6:	085b      	lsrs	r3, r3, #1
 8011fa8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fb0:	f003 0301 	and.w	r3, r3, #1
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d004      	beq.n	8011fc2 <USB_EPStartXfer+0xaa4>
 8011fb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	029b      	lsls	r3, r3, #10
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fce:	801a      	strh	r2, [r3, #0]
 8011fd0:	e024      	b.n	801201c <USB_EPStartXfer+0xafe>
 8011fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	785b      	ldrb	r3, [r3, #1]
 8011fde:	2b01      	cmp	r3, #1
 8011fe0:	d11c      	bne.n	801201c <USB_EPStartXfer+0xafe>
 8011fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ff6:	4413      	add	r3, r2
 8011ff8:	673b      	str	r3, [r7, #112]	; 0x70
 8011ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	00da      	lsls	r2, r3, #3
 8012008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801200a:	4413      	add	r3, r2
 801200c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012016:	b29a      	uxth	r2, r3
 8012018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801201a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801201c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	895b      	ldrh	r3, [r3, #10]
 8012028:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801202c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	6959      	ldr	r1, [r3, #20]
 8012038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801203c:	b29b      	uxth	r3, r3
 801203e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012042:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012046:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801204a:	6800      	ldr	r0, [r0, #0]
 801204c:	f000 fed7 	bl	8012dfe <USB_WritePMA>
 8012050:	e0c0      	b.n	80121d4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	785b      	ldrb	r3, [r3, #1]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d16d      	bne.n	801213e <USB_EPStartXfer+0xc20>
 8012062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801206e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801207c:	b29b      	uxth	r3, r3
 801207e:	461a      	mov	r2, r3
 8012080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012082:	4413      	add	r3, r2
 8012084:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801208a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	00da      	lsls	r2, r3, #3
 8012094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012096:	4413      	add	r3, r2
 8012098:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801209c:	67bb      	str	r3, [r7, #120]	; 0x78
 801209e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120a2:	2b3e      	cmp	r3, #62	; 0x3e
 80120a4:	d91c      	bls.n	80120e0 <USB_EPStartXfer+0xbc2>
 80120a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120aa:	095b      	lsrs	r3, r3, #5
 80120ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80120b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120b4:	f003 031f 	and.w	r3, r3, #31
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d104      	bne.n	80120c6 <USB_EPStartXfer+0xba8>
 80120bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80120c0:	3b01      	subs	r3, #1
 80120c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80120c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	029b      	lsls	r3, r3, #10
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120d8:	b29a      	uxth	r2, r3
 80120da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120dc:	801a      	strh	r2, [r3, #0]
 80120de:	e05f      	b.n	80121a0 <USB_EPStartXfer+0xc82>
 80120e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d112      	bne.n	801210e <USB_EPStartXfer+0xbf0>
 80120e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120ea:	881b      	ldrh	r3, [r3, #0]
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120f6:	801a      	strh	r2, [r3, #0]
 80120f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120fa:	881b      	ldrh	r3, [r3, #0]
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012106:	b29a      	uxth	r2, r3
 8012108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801210a:	801a      	strh	r2, [r3, #0]
 801210c:	e048      	b.n	80121a0 <USB_EPStartXfer+0xc82>
 801210e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012112:	085b      	lsrs	r3, r3, #1
 8012114:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801211c:	f003 0301 	and.w	r3, r3, #1
 8012120:	2b00      	cmp	r3, #0
 8012122:	d004      	beq.n	801212e <USB_EPStartXfer+0xc10>
 8012124:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012128:	3301      	adds	r3, #1
 801212a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801212e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012132:	b29b      	uxth	r3, r3
 8012134:	029b      	lsls	r3, r3, #10
 8012136:	b29a      	uxth	r2, r3
 8012138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801213a:	801a      	strh	r2, [r3, #0]
 801213c:	e030      	b.n	80121a0 <USB_EPStartXfer+0xc82>
 801213e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	785b      	ldrb	r3, [r3, #1]
 801214a:	2b01      	cmp	r3, #1
 801214c:	d128      	bne.n	80121a0 <USB_EPStartXfer+0xc82>
 801214e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801215c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801216a:	b29b      	uxth	r3, r3
 801216c:	461a      	mov	r2, r3
 801216e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012172:	4413      	add	r3, r2
 8012174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801217c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	00da      	lsls	r2, r3, #3
 8012186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801218a:	4413      	add	r3, r2
 801218c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012198:	b29a      	uxth	r2, r3
 801219a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801219e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80121a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	891b      	ldrh	r3, [r3, #8]
 80121ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80121b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	6959      	ldr	r1, [r3, #20]
 80121bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80121c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80121ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80121ce:	6800      	ldr	r0, [r0, #0]
 80121d0:	f000 fe15 	bl	8012dfe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80121d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	009b      	lsls	r3, r3, #2
 80121ec:	4413      	add	r3, r2
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80121f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80121fa:	817b      	strh	r3, [r7, #10]
 80121fc:	897b      	ldrh	r3, [r7, #10]
 80121fe:	f083 0310 	eor.w	r3, r3, #16
 8012202:	817b      	strh	r3, [r7, #10]
 8012204:	897b      	ldrh	r3, [r7, #10]
 8012206:	f083 0320 	eor.w	r3, r3, #32
 801220a:	817b      	strh	r3, [r7, #10]
 801220c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801221a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	441a      	add	r2, r3
 8012226:	897b      	ldrh	r3, [r7, #10]
 8012228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801222c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012238:	b29b      	uxth	r3, r3
 801223a:	8013      	strh	r3, [r2, #0]
 801223c:	f000 bc9f 	b.w	8012b7e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	7b1b      	ldrb	r3, [r3, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	f040 80ae 	bne.w	80123ae <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	699a      	ldr	r2, [r3, #24]
 801225e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	429a      	cmp	r2, r3
 801226c:	d917      	bls.n	801229e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 801226e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801227e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	699a      	ldr	r2, [r3, #24]
 801228a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801228e:	1ad2      	subs	r2, r2, r3
 8012290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	619a      	str	r2, [r3, #24]
 801229c:	e00e      	b.n	80122bc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 801229e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	699b      	ldr	r3, [r3, #24]
 80122aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80122ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	2200      	movs	r2, #0
 80122ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80122bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80122ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122d8:	b29b      	uxth	r3, r3
 80122da:	461a      	mov	r2, r3
 80122dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80122e0:	4413      	add	r3, r2
 80122e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80122e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	00da      	lsls	r2, r3, #3
 80122f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80122f8:	4413      	add	r3, r2
 80122fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80122fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012306:	2b3e      	cmp	r3, #62	; 0x3e
 8012308:	d91d      	bls.n	8012346 <USB_EPStartXfer+0xe28>
 801230a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801230e:	095b      	lsrs	r3, r3, #5
 8012310:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012318:	f003 031f 	and.w	r3, r3, #31
 801231c:	2b00      	cmp	r3, #0
 801231e:	d104      	bne.n	801232a <USB_EPStartXfer+0xe0c>
 8012320:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012324:	3b01      	subs	r3, #1
 8012326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801232a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801232e:	b29b      	uxth	r3, r3
 8012330:	029b      	lsls	r3, r3, #10
 8012332:	b29b      	uxth	r3, r3
 8012334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801233c:	b29a      	uxth	r2, r3
 801233e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012342:	801a      	strh	r2, [r3, #0]
 8012344:	e3e1      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
 8012346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801234a:	2b00      	cmp	r3, #0
 801234c:	d116      	bne.n	801237c <USB_EPStartXfer+0xe5e>
 801234e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012352:	881b      	ldrh	r3, [r3, #0]
 8012354:	b29b      	uxth	r3, r3
 8012356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801235a:	b29a      	uxth	r2, r3
 801235c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012360:	801a      	strh	r2, [r3, #0]
 8012362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	b29b      	uxth	r3, r3
 801236a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801236e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012372:	b29a      	uxth	r2, r3
 8012374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012378:	801a      	strh	r2, [r3, #0]
 801237a:	e3c6      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
 801237c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012380:	085b      	lsrs	r3, r3, #1
 8012382:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801238a:	f003 0301 	and.w	r3, r3, #1
 801238e:	2b00      	cmp	r3, #0
 8012390:	d004      	beq.n	801239c <USB_EPStartXfer+0xe7e>
 8012392:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012396:	3301      	adds	r3, #1
 8012398:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801239c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	029b      	lsls	r3, r3, #10
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80123aa:	801a      	strh	r2, [r3, #0]
 80123ac:	e3ad      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80123ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	78db      	ldrb	r3, [r3, #3]
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	f040 8200 	bne.w	80127c0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80123c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	785b      	ldrb	r3, [r3, #1]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f040 8091 	bne.w	80124f4 <USB_EPStartXfer+0xfd6>
 80123d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80123e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	461a      	mov	r2, r3
 80123f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123f6:	4413      	add	r3, r2
 80123f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80123fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	00da      	lsls	r2, r3, #3
 801240a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801240e:	4413      	add	r3, r2
 8012410:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801241c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	691b      	ldr	r3, [r3, #16]
 8012424:	2b3e      	cmp	r3, #62	; 0x3e
 8012426:	d925      	bls.n	8012474 <USB_EPStartXfer+0xf56>
 8012428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801242c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	691b      	ldr	r3, [r3, #16]
 8012434:	095b      	lsrs	r3, r3, #5
 8012436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801243a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801243e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	691b      	ldr	r3, [r3, #16]
 8012446:	f003 031f 	and.w	r3, r3, #31
 801244a:	2b00      	cmp	r3, #0
 801244c:	d104      	bne.n	8012458 <USB_EPStartXfer+0xf3a>
 801244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012452:	3b01      	subs	r3, #1
 8012454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801245c:	b29b      	uxth	r3, r3
 801245e:	029b      	lsls	r3, r3, #10
 8012460:	b29b      	uxth	r3, r3
 8012462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801246a:	b29a      	uxth	r2, r3
 801246c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012470:	801a      	strh	r2, [r3, #0]
 8012472:	e074      	b.n	801255e <USB_EPStartXfer+0x1040>
 8012474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	691b      	ldr	r3, [r3, #16]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d116      	bne.n	80124b2 <USB_EPStartXfer+0xf94>
 8012484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012488:	881b      	ldrh	r3, [r3, #0]
 801248a:	b29b      	uxth	r3, r3
 801248c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012490:	b29a      	uxth	r2, r3
 8012492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012496:	801a      	strh	r2, [r3, #0]
 8012498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80124ae:	801a      	strh	r2, [r3, #0]
 80124b0:	e055      	b.n	801255e <USB_EPStartXfer+0x1040>
 80124b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	691b      	ldr	r3, [r3, #16]
 80124be:	085b      	lsrs	r3, r3, #1
 80124c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80124c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	691b      	ldr	r3, [r3, #16]
 80124d0:	f003 0301 	and.w	r3, r3, #1
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d004      	beq.n	80124e2 <USB_EPStartXfer+0xfc4>
 80124d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80124dc:	3301      	adds	r3, #1
 80124de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80124e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	029b      	lsls	r3, r3, #10
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80124f0:	801a      	strh	r2, [r3, #0]
 80124f2:	e034      	b.n	801255e <USB_EPStartXfer+0x1040>
 80124f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	785b      	ldrb	r3, [r3, #1]
 8012500:	2b01      	cmp	r3, #1
 8012502:	d12c      	bne.n	801255e <USB_EPStartXfer+0x1040>
 8012504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012520:	b29b      	uxth	r3, r3
 8012522:	461a      	mov	r2, r3
 8012524:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012528:	4413      	add	r3, r2
 801252a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801252e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	00da      	lsls	r2, r3, #3
 801253c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012540:	4413      	add	r3, r2
 8012542:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801254a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801254e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	691b      	ldr	r3, [r3, #16]
 8012556:	b29a      	uxth	r2, r3
 8012558:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801255c:	801a      	strh	r2, [r3, #0]
 801255e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801256c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	785b      	ldrb	r3, [r3, #1]
 8012578:	2b00      	cmp	r3, #0
 801257a:	f040 8091 	bne.w	80126a0 <USB_EPStartXfer+0x1182>
 801257e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801258c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801259a:	b29b      	uxth	r3, r3
 801259c:	461a      	mov	r2, r3
 801259e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80125a2:	4413      	add	r3, r2
 80125a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80125a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	00da      	lsls	r2, r3, #3
 80125b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80125ba:	4413      	add	r3, r2
 80125bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80125c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80125c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	691b      	ldr	r3, [r3, #16]
 80125d0:	2b3e      	cmp	r3, #62	; 0x3e
 80125d2:	d925      	bls.n	8012620 <USB_EPStartXfer+0x1102>
 80125d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	691b      	ldr	r3, [r3, #16]
 80125e0:	095b      	lsrs	r3, r3, #5
 80125e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80125e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	f003 031f 	and.w	r3, r3, #31
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d104      	bne.n	8012604 <USB_EPStartXfer+0x10e6>
 80125fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80125fe:	3b01      	subs	r3, #1
 8012600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012608:	b29b      	uxth	r3, r3
 801260a:	029b      	lsls	r3, r3, #10
 801260c:	b29b      	uxth	r3, r3
 801260e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012616:	b29a      	uxth	r2, r3
 8012618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801261c:	801a      	strh	r2, [r3, #0]
 801261e:	e06d      	b.n	80126fc <USB_EPStartXfer+0x11de>
 8012620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	691b      	ldr	r3, [r3, #16]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d116      	bne.n	801265e <USB_EPStartXfer+0x1140>
 8012630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012634:	881b      	ldrh	r3, [r3, #0]
 8012636:	b29b      	uxth	r3, r3
 8012638:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801263c:	b29a      	uxth	r2, r3
 801263e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012642:	801a      	strh	r2, [r3, #0]
 8012644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012648:	881b      	ldrh	r3, [r3, #0]
 801264a:	b29b      	uxth	r3, r3
 801264c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012654:	b29a      	uxth	r2, r3
 8012656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801265a:	801a      	strh	r2, [r3, #0]
 801265c:	e04e      	b.n	80126fc <USB_EPStartXfer+0x11de>
 801265e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	691b      	ldr	r3, [r3, #16]
 801266a:	085b      	lsrs	r3, r3, #1
 801266c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	691b      	ldr	r3, [r3, #16]
 801267c:	f003 0301 	and.w	r3, r3, #1
 8012680:	2b00      	cmp	r3, #0
 8012682:	d004      	beq.n	801268e <USB_EPStartXfer+0x1170>
 8012684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012688:	3301      	adds	r3, #1
 801268a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801268e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012692:	b29b      	uxth	r3, r3
 8012694:	029b      	lsls	r3, r3, #10
 8012696:	b29a      	uxth	r2, r3
 8012698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801269c:	801a      	strh	r2, [r3, #0]
 801269e:	e02d      	b.n	80126fc <USB_EPStartXfer+0x11de>
 80126a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	785b      	ldrb	r3, [r3, #1]
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d125      	bne.n	80126fc <USB_EPStartXfer+0x11de>
 80126b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126be:	b29b      	uxth	r3, r3
 80126c0:	461a      	mov	r2, r3
 80126c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80126c6:	4413      	add	r3, r2
 80126c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80126cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	00da      	lsls	r2, r3, #3
 80126da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80126de:	4413      	add	r3, r2
 80126e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80126e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80126e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	691b      	ldr	r3, [r3, #16]
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80126fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	69db      	ldr	r3, [r3, #28]
 8012708:	2b00      	cmp	r3, #0
 801270a:	f000 81fe 	beq.w	8012b0a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801270e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801271c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801272e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012736:	2b00      	cmp	r3, #0
 8012738:	d005      	beq.n	8012746 <USB_EPStartXfer+0x1228>
 801273a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10d      	bne.n	8012762 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012746:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801274e:	2b00      	cmp	r3, #0
 8012750:	f040 81db 	bne.w	8012b0a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012754:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801275c:	2b00      	cmp	r3, #0
 801275e:	f040 81d4 	bne.w	8012b0a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	4413      	add	r3, r2
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	b29b      	uxth	r3, r3
 8012780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012788:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801278c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801279a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	441a      	add	r2, r3
 80127a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80127aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	8013      	strh	r3, [r2, #0]
 80127be:	e1a4      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80127c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	78db      	ldrb	r3, [r3, #3]
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	f040 819a 	bne.w	8012b06 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80127d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	699a      	ldr	r2, [r3, #24]
 80127de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	691b      	ldr	r3, [r3, #16]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d917      	bls.n	801281e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80127ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	691b      	ldr	r3, [r3, #16]
 80127fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80127fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	699a      	ldr	r2, [r3, #24]
 801280a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801280e:	1ad2      	subs	r2, r2, r3
 8012810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	619a      	str	r2, [r3, #24]
 801281c:	e00e      	b.n	801283c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 801281e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	699b      	ldr	r3, [r3, #24]
 801282a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 801282e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2200      	movs	r2, #0
 801283a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801283c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	785b      	ldrb	r3, [r3, #1]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d178      	bne.n	801293e <USB_EPStartXfer+0x1420>
 801284c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801285a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801285e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012868:	b29b      	uxth	r3, r3
 801286a:	461a      	mov	r2, r3
 801286c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012870:	4413      	add	r3, r2
 8012872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801287a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	00da      	lsls	r2, r3, #3
 8012884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012888:	4413      	add	r3, r2
 801288a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801288e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012896:	2b3e      	cmp	r3, #62	; 0x3e
 8012898:	d91d      	bls.n	80128d6 <USB_EPStartXfer+0x13b8>
 801289a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801289e:	095b      	lsrs	r3, r3, #5
 80128a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80128a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128a8:	f003 031f 	and.w	r3, r3, #31
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d104      	bne.n	80128ba <USB_EPStartXfer+0x139c>
 80128b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80128b4:	3b01      	subs	r3, #1
 80128b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80128ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80128be:	b29b      	uxth	r3, r3
 80128c0:	029b      	lsls	r3, r3, #10
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80128c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80128d2:	801a      	strh	r2, [r3, #0]
 80128d4:	e064      	b.n	80129a0 <USB_EPStartXfer+0x1482>
 80128d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d116      	bne.n	801290c <USB_EPStartXfer+0x13ee>
 80128de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80128e2:	881b      	ldrh	r3, [r3, #0]
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80128f0:	801a      	strh	r2, [r3, #0]
 80128f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80128f6:	881b      	ldrh	r3, [r3, #0]
 80128f8:	b29b      	uxth	r3, r3
 80128fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80128fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012902:	b29a      	uxth	r2, r3
 8012904:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012908:	801a      	strh	r2, [r3, #0]
 801290a:	e049      	b.n	80129a0 <USB_EPStartXfer+0x1482>
 801290c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012910:	085b      	lsrs	r3, r3, #1
 8012912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801291a:	f003 0301 	and.w	r3, r3, #1
 801291e:	2b00      	cmp	r3, #0
 8012920:	d004      	beq.n	801292c <USB_EPStartXfer+0x140e>
 8012922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012926:	3301      	adds	r3, #1
 8012928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801292c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012930:	b29b      	uxth	r3, r3
 8012932:	029b      	lsls	r3, r3, #10
 8012934:	b29a      	uxth	r2, r3
 8012936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801293a:	801a      	strh	r2, [r3, #0]
 801293c:	e030      	b.n	80129a0 <USB_EPStartXfer+0x1482>
 801293e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	785b      	ldrb	r3, [r3, #1]
 801294a:	2b01      	cmp	r3, #1
 801294c:	d128      	bne.n	80129a0 <USB_EPStartXfer+0x1482>
 801294e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801295c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801296a:	b29b      	uxth	r3, r3
 801296c:	461a      	mov	r2, r3
 801296e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012972:	4413      	add	r3, r2
 8012974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801297c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	00da      	lsls	r2, r3, #3
 8012986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801298a:	4413      	add	r3, r2
 801298c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012998:	b29a      	uxth	r2, r3
 801299a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801299e:	801a      	strh	r2, [r3, #0]
 80129a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80129ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	785b      	ldrb	r3, [r3, #1]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d178      	bne.n	8012ab0 <USB_EPStartXfer+0x1592>
 80129be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80129cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80129da:	b29b      	uxth	r3, r3
 80129dc:	461a      	mov	r2, r3
 80129de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80129e2:	4413      	add	r3, r2
 80129e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80129e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	00da      	lsls	r2, r3, #3
 80129f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80129fa:	4413      	add	r3, r2
 80129fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a08:	2b3e      	cmp	r3, #62	; 0x3e
 8012a0a:	d91d      	bls.n	8012a48 <USB_EPStartXfer+0x152a>
 8012a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a10:	095b      	lsrs	r3, r3, #5
 8012a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a1a:	f003 031f 	and.w	r3, r3, #31
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d104      	bne.n	8012a2c <USB_EPStartXfer+0x150e>
 8012a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012a26:	3b01      	subs	r3, #1
 8012a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	029b      	lsls	r3, r3, #10
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a44:	801a      	strh	r2, [r3, #0]
 8012a46:	e060      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
 8012a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d116      	bne.n	8012a7e <USB_EPStartXfer+0x1560>
 8012a50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a54:	881b      	ldrh	r3, [r3, #0]
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a62:	801a      	strh	r2, [r3, #0]
 8012a64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a68:	881b      	ldrh	r3, [r3, #0]
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a7a:	801a      	strh	r2, [r3, #0]
 8012a7c:	e045      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
 8012a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a82:	085b      	lsrs	r3, r3, #1
 8012a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a8c:	f003 0301 	and.w	r3, r3, #1
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d004      	beq.n	8012a9e <USB_EPStartXfer+0x1580>
 8012a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012a98:	3301      	adds	r3, #1
 8012a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	029b      	lsls	r3, r3, #10
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012aac:	801a      	strh	r2, [r3, #0]
 8012aae:	e02c      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
 8012ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	785b      	ldrb	r3, [r3, #1]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d124      	bne.n	8012b0a <USB_EPStartXfer+0x15ec>
 8012ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	00da      	lsls	r2, r3, #3
 8012aea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012aee:	4413      	add	r3, r2
 8012af0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012af4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012afc:	b29a      	uxth	r2, r3
 8012afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012b02:	801a      	strh	r2, [r3, #0]
 8012b04:	e001      	b.n	8012b0a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8012b06:	2301      	movs	r3, #1
 8012b08:	e03a      	b.n	8012b80 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4413      	add	r3, r2
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012b34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012b38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012b3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012b40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012b44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012b48:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b54:	681a      	ldr	r2, [r3, #0]
 8012b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	441a      	add	r2, r3
 8012b66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012b7e:	2300      	movs	r3, #0
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	b085      	sub	sp, #20
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	785b      	ldrb	r3, [r3, #1]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d020      	beq.n	8012bde <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	009b      	lsls	r3, r3, #2
 8012ba4:	4413      	add	r3, r2
 8012ba6:	881b      	ldrh	r3, [r3, #0]
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012bb2:	81bb      	strh	r3, [r7, #12]
 8012bb4:	89bb      	ldrh	r3, [r7, #12]
 8012bb6:	f083 0310 	eor.w	r3, r3, #16
 8012bba:	81bb      	strh	r3, [r7, #12]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	441a      	add	r2, r3
 8012bc6:	89bb      	ldrh	r3, [r7, #12]
 8012bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	8013      	strh	r3, [r2, #0]
 8012bdc:	e01f      	b.n	8012c1e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	009b      	lsls	r3, r3, #2
 8012be6:	4413      	add	r3, r2
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012bf4:	81fb      	strh	r3, [r7, #14]
 8012bf6:	89fb      	ldrh	r3, [r7, #14]
 8012bf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012bfc:	81fb      	strh	r3, [r7, #14]
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	441a      	add	r2, r3
 8012c08:	89fb      	ldrh	r3, [r7, #14]
 8012c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012c1e:	2300      	movs	r3, #0
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3714      	adds	r7, #20
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b087      	sub	sp, #28
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	7b1b      	ldrb	r3, [r3, #12]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	f040 809d 	bne.w	8012d7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	785b      	ldrb	r3, [r3, #1]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d04c      	beq.n	8012ce2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	4413      	add	r3, r2
 8012c52:	881b      	ldrh	r3, [r3, #0]
 8012c54:	823b      	strh	r3, [r7, #16]
 8012c56:	8a3b      	ldrh	r3, [r7, #16]
 8012c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d01b      	beq.n	8012c98 <USB_EPClearStall+0x6c>
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	4413      	add	r3, r2
 8012c6a:	881b      	ldrh	r3, [r3, #0]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c76:	81fb      	strh	r3, [r7, #14]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	441a      	add	r2, r3
 8012c82:	89fb      	ldrh	r3, [r7, #14]
 8012c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	78db      	ldrb	r3, [r3, #3]
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d06c      	beq.n	8012d7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	4413      	add	r3, r2
 8012caa:	881b      	ldrh	r3, [r3, #0]
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012cb6:	81bb      	strh	r3, [r7, #12]
 8012cb8:	89bb      	ldrh	r3, [r7, #12]
 8012cba:	f083 0320 	eor.w	r3, r3, #32
 8012cbe:	81bb      	strh	r3, [r7, #12]
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	009b      	lsls	r3, r3, #2
 8012cc8:	441a      	add	r2, r3
 8012cca:	89bb      	ldrh	r3, [r7, #12]
 8012ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	8013      	strh	r3, [r2, #0]
 8012ce0:	e04b      	b.n	8012d7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012ce2:	687a      	ldr	r2, [r7, #4]
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	009b      	lsls	r3, r3, #2
 8012cea:	4413      	add	r3, r2
 8012cec:	881b      	ldrh	r3, [r3, #0]
 8012cee:	82fb      	strh	r3, [r7, #22]
 8012cf0:	8afb      	ldrh	r3, [r7, #22]
 8012cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d01b      	beq.n	8012d32 <USB_EPClearStall+0x106>
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	4413      	add	r3, r2
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d10:	82bb      	strh	r3, [r7, #20]
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	441a      	add	r2, r3
 8012d1c:	8abb      	ldrh	r3, [r7, #20]
 8012d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d2e:	b29b      	uxth	r3, r3
 8012d30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	4413      	add	r3, r2
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d48:	827b      	strh	r3, [r7, #18]
 8012d4a:	8a7b      	ldrh	r3, [r7, #18]
 8012d4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012d50:	827b      	strh	r3, [r7, #18]
 8012d52:	8a7b      	ldrh	r3, [r7, #18]
 8012d54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012d58:	827b      	strh	r3, [r7, #18]
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	441a      	add	r2, r3
 8012d64:	8a7b      	ldrh	r3, [r7, #18]
 8012d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012d7a:	2300      	movs	r3, #0
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	371c      	adds	r7, #28
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b083      	sub	sp, #12
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012d94:	78fb      	ldrb	r3, [r7, #3]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d103      	bne.n	8012da2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2280      	movs	r2, #128	; 0x80
 8012d9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012da2:	2300      	movs	r3, #0
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	370c      	adds	r7, #12
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr

08012db0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012dc8:	b29a      	uxth	r2, r3
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr

08012dde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8012dde:	b480      	push	{r7}
 8012de0:	b085      	sub	sp, #20
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012df0:	68fb      	ldr	r3, [r7, #12]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3714      	adds	r7, #20
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012dfe:	b480      	push	{r7}
 8012e00:	b08d      	sub	sp, #52	; 0x34
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	60f8      	str	r0, [r7, #12]
 8012e06:	60b9      	str	r1, [r7, #8]
 8012e08:	4611      	mov	r1, r2
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	80fb      	strh	r3, [r7, #6]
 8012e10:	4613      	mov	r3, r2
 8012e12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012e14:	88bb      	ldrh	r3, [r7, #4]
 8012e16:	3301      	adds	r3, #1
 8012e18:	085b      	lsrs	r3, r3, #1
 8012e1a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012e24:	88fa      	ldrh	r2, [r7, #6]
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	4413      	add	r3, r2
 8012e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012e2e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8012e30:	6a3b      	ldr	r3, [r7, #32]
 8012e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e34:	e01b      	b.n	8012e6e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8012e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3e:	3301      	adds	r3, #1
 8012e40:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8012e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	021b      	lsls	r3, r3, #8
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	4313      	orrs	r3, r2
 8012e52:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5e:	3302      	adds	r3, #2
 8012e60:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e64:	3301      	adds	r3, #1
 8012e66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8012e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d1e0      	bne.n	8012e36 <USB_WritePMA+0x38>
  }
}
 8012e74:	bf00      	nop
 8012e76:	bf00      	nop
 8012e78:	3734      	adds	r7, #52	; 0x34
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012e82:	b480      	push	{r7}
 8012e84:	b08b      	sub	sp, #44	; 0x2c
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	60f8      	str	r0, [r7, #12]
 8012e8a:	60b9      	str	r1, [r7, #8]
 8012e8c:	4611      	mov	r1, r2
 8012e8e:	461a      	mov	r2, r3
 8012e90:	460b      	mov	r3, r1
 8012e92:	80fb      	strh	r3, [r7, #6]
 8012e94:	4613      	mov	r3, r2
 8012e96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012e98:	88bb      	ldrh	r3, [r7, #4]
 8012e9a:	085b      	lsrs	r3, r3, #1
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012ea8:	88fa      	ldrh	r2, [r7, #6]
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	4413      	add	r3, r2
 8012eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012eb2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8012eb4:	69bb      	ldr	r3, [r7, #24]
 8012eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8012eb8:	e018      	b.n	8012eec <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8012eba:	6a3b      	ldr	r3, [r7, #32]
 8012ebc:	881b      	ldrh	r3, [r3, #0]
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012ec2:	6a3b      	ldr	r3, [r7, #32]
 8012ec4:	3302      	adds	r3, #2
 8012ec6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	b2da      	uxtb	r2, r3
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	0a1b      	lsrs	r3, r3, #8
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	627b      	str	r3, [r7, #36]	; 0x24
 8012eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d1e3      	bne.n	8012eba <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012ef2:	88bb      	ldrh	r3, [r7, #4]
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d007      	beq.n	8012f0e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8012efe:	6a3b      	ldr	r3, [r7, #32]
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	b2da      	uxtb	r2, r3
 8012f0a:	69fb      	ldr	r3, [r7, #28]
 8012f0c:	701a      	strb	r2, [r3, #0]
  }
}
 8012f0e:	bf00      	nop
 8012f10:	372c      	adds	r7, #44	; 0x2c
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr

08012f1a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b084      	sub	sp, #16
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
 8012f22:	460b      	mov	r3, r1
 8012f24:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012f26:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012f2a:	f002 f931 	bl	8015190 <USBD_static_malloc>
 8012f2e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d105      	bne.n	8012f42 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012f3e:	2302      	movs	r3, #2
 8012f40:	e066      	b.n	8013010 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	68fa      	ldr	r2, [r7, #12]
 8012f46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	7c1b      	ldrb	r3, [r3, #16]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d119      	bne.n	8012f86 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f56:	2202      	movs	r2, #2
 8012f58:	2181      	movs	r1, #129	; 0x81
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f001 ffbd 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2201      	movs	r2, #1
 8012f64:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f6a:	2202      	movs	r2, #2
 8012f6c:	2101      	movs	r1, #1
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f001 ffb3 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2201      	movs	r2, #1
 8012f78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2210      	movs	r2, #16
 8012f80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012f84:	e016      	b.n	8012fb4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012f86:	2340      	movs	r3, #64	; 0x40
 8012f88:	2202      	movs	r2, #2
 8012f8a:	2181      	movs	r1, #129	; 0x81
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f001 ffa4 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2201      	movs	r2, #1
 8012f96:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012f98:	2340      	movs	r3, #64	; 0x40
 8012f9a:	2202      	movs	r2, #2
 8012f9c:	2101      	movs	r1, #1
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f001 ff9b 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2210      	movs	r2, #16
 8012fb0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012fb4:	2308      	movs	r3, #8
 8012fb6:	2203      	movs	r2, #3
 8012fb8:	2182      	movs	r1, #130	; 0x82
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f001 ff8d 	bl	8014eda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	7c1b      	ldrb	r3, [r3, #16]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d109      	bne.n	8012ffe <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ff4:	2101      	movs	r1, #1
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f002 f85f 	bl	80150ba <USBD_LL_PrepareReceive>
 8012ffc:	e007      	b.n	801300e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013004:	2340      	movs	r3, #64	; 0x40
 8013006:	2101      	movs	r1, #1
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f002 f856 	bl	80150ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801300e:	2300      	movs	r3, #0
}
 8013010:	4618      	mov	r0, r3
 8013012:	3710      	adds	r7, #16
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	460b      	mov	r3, r1
 8013022:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013024:	2181      	movs	r1, #129	; 0x81
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f001 ff7d 	bl	8014f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2200      	movs	r2, #0
 8013030:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013032:	2101      	movs	r1, #1
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f001 ff76 	bl	8014f26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	2200      	movs	r2, #0
 801303e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013042:	2182      	movs	r1, #130	; 0x82
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f001 ff6e 	bl	8014f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2200      	movs	r2, #0
 801304e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2200      	movs	r2, #0
 8013056:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00e      	beq.n	8013082 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013074:	4618      	mov	r0, r3
 8013076:	f002 f899 	bl	80151ac <USBD_static_free>
    pdev->pClassData = NULL;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2200      	movs	r2, #0
 801307e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013082:	2300      	movs	r3, #0
}
 8013084:	4618      	mov	r0, r3
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b086      	sub	sp, #24
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801309c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801309e:	2300      	movs	r3, #0
 80130a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80130a2:	2300      	movs	r3, #0
 80130a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80130a6:	2300      	movs	r3, #0
 80130a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d101      	bne.n	80130b4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80130b0:	2303      	movs	r3, #3
 80130b2:	e0af      	b.n	8013214 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d03f      	beq.n	8013140 <USBD_CDC_Setup+0xb4>
 80130c0:	2b20      	cmp	r3, #32
 80130c2:	f040 809f 	bne.w	8013204 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	88db      	ldrh	r3, [r3, #6]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d02e      	beq.n	801312c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	b25b      	sxtb	r3, r3
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	da16      	bge.n	8013106 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130de:	689b      	ldr	r3, [r3, #8]
 80130e0:	683a      	ldr	r2, [r7, #0]
 80130e2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80130e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80130e6:	683a      	ldr	r2, [r7, #0]
 80130e8:	88d2      	ldrh	r2, [r2, #6]
 80130ea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	88db      	ldrh	r3, [r3, #6]
 80130f0:	2b07      	cmp	r3, #7
 80130f2:	bf28      	it	cs
 80130f4:	2307      	movcs	r3, #7
 80130f6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	89fa      	ldrh	r2, [r7, #14]
 80130fc:	4619      	mov	r1, r3
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f001 facf 	bl	80146a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013104:	e085      	b.n	8013212 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	785a      	ldrb	r2, [r3, #1]
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	88db      	ldrh	r3, [r3, #6]
 8013114:	b2da      	uxtb	r2, r3
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801311c:	6939      	ldr	r1, [r7, #16]
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	88db      	ldrh	r3, [r3, #6]
 8013122:	461a      	mov	r2, r3
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f001 fae8 	bl	80146fa <USBD_CtlPrepareRx>
      break;
 801312a:	e072      	b.n	8013212 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	683a      	ldr	r2, [r7, #0]
 8013136:	7850      	ldrb	r0, [r2, #1]
 8013138:	2200      	movs	r2, #0
 801313a:	6839      	ldr	r1, [r7, #0]
 801313c:	4798      	blx	r3
      break;
 801313e:	e068      	b.n	8013212 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	785b      	ldrb	r3, [r3, #1]
 8013144:	2b0b      	cmp	r3, #11
 8013146:	d852      	bhi.n	80131ee <USBD_CDC_Setup+0x162>
 8013148:	a201      	add	r2, pc, #4	; (adr r2, 8013150 <USBD_CDC_Setup+0xc4>)
 801314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801314e:	bf00      	nop
 8013150:	08013181 	.word	0x08013181
 8013154:	080131fd 	.word	0x080131fd
 8013158:	080131ef 	.word	0x080131ef
 801315c:	080131ef 	.word	0x080131ef
 8013160:	080131ef 	.word	0x080131ef
 8013164:	080131ef 	.word	0x080131ef
 8013168:	080131ef 	.word	0x080131ef
 801316c:	080131ef 	.word	0x080131ef
 8013170:	080131ef 	.word	0x080131ef
 8013174:	080131ef 	.word	0x080131ef
 8013178:	080131ab 	.word	0x080131ab
 801317c:	080131d5 	.word	0x080131d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013186:	b2db      	uxtb	r3, r3
 8013188:	2b03      	cmp	r3, #3
 801318a:	d107      	bne.n	801319c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801318c:	f107 030a 	add.w	r3, r7, #10
 8013190:	2202      	movs	r2, #2
 8013192:	4619      	mov	r1, r3
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f001 fa84 	bl	80146a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801319a:	e032      	b.n	8013202 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801319c:	6839      	ldr	r1, [r7, #0]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f001 fa0e 	bl	80145c0 <USBD_CtlError>
            ret = USBD_FAIL;
 80131a4:	2303      	movs	r3, #3
 80131a6:	75fb      	strb	r3, [r7, #23]
          break;
 80131a8:	e02b      	b.n	8013202 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2b03      	cmp	r3, #3
 80131b4:	d107      	bne.n	80131c6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80131b6:	f107 030d 	add.w	r3, r7, #13
 80131ba:	2201      	movs	r2, #1
 80131bc:	4619      	mov	r1, r3
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f001 fa6f 	bl	80146a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80131c4:	e01d      	b.n	8013202 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80131c6:	6839      	ldr	r1, [r7, #0]
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f001 f9f9 	bl	80145c0 <USBD_CtlError>
            ret = USBD_FAIL;
 80131ce:	2303      	movs	r3, #3
 80131d0:	75fb      	strb	r3, [r7, #23]
          break;
 80131d2:	e016      	b.n	8013202 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	2b03      	cmp	r3, #3
 80131de:	d00f      	beq.n	8013200 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80131e0:	6839      	ldr	r1, [r7, #0]
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f001 f9ec 	bl	80145c0 <USBD_CtlError>
            ret = USBD_FAIL;
 80131e8:	2303      	movs	r3, #3
 80131ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80131ec:	e008      	b.n	8013200 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80131ee:	6839      	ldr	r1, [r7, #0]
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f001 f9e5 	bl	80145c0 <USBD_CtlError>
          ret = USBD_FAIL;
 80131f6:	2303      	movs	r3, #3
 80131f8:	75fb      	strb	r3, [r7, #23]
          break;
 80131fa:	e002      	b.n	8013202 <USBD_CDC_Setup+0x176>
          break;
 80131fc:	bf00      	nop
 80131fe:	e008      	b.n	8013212 <USBD_CDC_Setup+0x186>
          break;
 8013200:	bf00      	nop
      }
      break;
 8013202:	e006      	b.n	8013212 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8013204:	6839      	ldr	r1, [r7, #0]
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f001 f9da 	bl	80145c0 <USBD_CtlError>
      ret = USBD_FAIL;
 801320c:	2303      	movs	r3, #3
 801320e:	75fb      	strb	r3, [r7, #23]
      break;
 8013210:	bf00      	nop
  }

  return (uint8_t)ret;
 8013212:	7dfb      	ldrb	r3, [r7, #23]
}
 8013214:	4618      	mov	r0, r3
 8013216:	3718      	adds	r7, #24
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	460b      	mov	r3, r1
 8013226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801322e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013236:	2b00      	cmp	r3, #0
 8013238:	d101      	bne.n	801323e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801323a:	2303      	movs	r3, #3
 801323c:	e04f      	b.n	80132de <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013244:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013246:	78fa      	ldrb	r2, [r7, #3]
 8013248:	6879      	ldr	r1, [r7, #4]
 801324a:	4613      	mov	r3, r2
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	4413      	add	r3, r2
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	440b      	add	r3, r1
 8013254:	3318      	adds	r3, #24
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d029      	beq.n	80132b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801325c:	78fa      	ldrb	r2, [r7, #3]
 801325e:	6879      	ldr	r1, [r7, #4]
 8013260:	4613      	mov	r3, r2
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	4413      	add	r3, r2
 8013266:	009b      	lsls	r3, r3, #2
 8013268:	440b      	add	r3, r1
 801326a:	3318      	adds	r3, #24
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	78f9      	ldrb	r1, [r7, #3]
 8013270:	68f8      	ldr	r0, [r7, #12]
 8013272:	460b      	mov	r3, r1
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	440b      	add	r3, r1
 8013278:	00db      	lsls	r3, r3, #3
 801327a:	4403      	add	r3, r0
 801327c:	3338      	adds	r3, #56	; 0x38
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	fbb2 f1f3 	udiv	r1, r2, r3
 8013284:	fb01 f303 	mul.w	r3, r1, r3
 8013288:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801328a:	2b00      	cmp	r3, #0
 801328c:	d110      	bne.n	80132b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801328e:	78fa      	ldrb	r2, [r7, #3]
 8013290:	6879      	ldr	r1, [r7, #4]
 8013292:	4613      	mov	r3, r2
 8013294:	009b      	lsls	r3, r3, #2
 8013296:	4413      	add	r3, r2
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	440b      	add	r3, r1
 801329c:	3318      	adds	r3, #24
 801329e:	2200      	movs	r2, #0
 80132a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80132a2:	78f9      	ldrb	r1, [r7, #3]
 80132a4:	2300      	movs	r3, #0
 80132a6:	2200      	movs	r2, #0
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f001 fee5 	bl	8015078 <USBD_LL_Transmit>
 80132ae:	e015      	b.n	80132dc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	2200      	movs	r2, #0
 80132b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132be:	691b      	ldr	r3, [r3, #16]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00b      	beq.n	80132dc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132ca:	691b      	ldr	r3, [r3, #16]
 80132cc:	68ba      	ldr	r2, [r7, #8]
 80132ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80132d2:	68ba      	ldr	r2, [r7, #8]
 80132d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80132d8:	78fa      	ldrb	r2, [r7, #3]
 80132da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b084      	sub	sp, #16
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
 80132ee:	460b      	mov	r3, r1
 80132f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013300:	2b00      	cmp	r3, #0
 8013302:	d101      	bne.n	8013308 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013304:	2303      	movs	r3, #3
 8013306:	e015      	b.n	8013334 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013308:	78fb      	ldrb	r3, [r7, #3]
 801330a:	4619      	mov	r1, r3
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f001 fef5 	bl	80150fc <USBD_LL_GetRxDataSize>
 8013312:	4602      	mov	r2, r0
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013320:	68db      	ldr	r3, [r3, #12]
 8013322:	68fa      	ldr	r2, [r7, #12]
 8013324:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013328:	68fa      	ldr	r2, [r7, #12]
 801332a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801332e:	4611      	mov	r1, r2
 8013330:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013332:	2300      	movs	r3, #0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3710      	adds	r7, #16
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801334a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d101      	bne.n	8013356 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013352:	2303      	movs	r3, #3
 8013354:	e01b      	b.n	801338e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d015      	beq.n	801338c <USBD_CDC_EP0_RxReady+0x50>
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013366:	2bff      	cmp	r3, #255	; 0xff
 8013368:	d010      	beq.n	801338c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013370:	689b      	ldr	r3, [r3, #8]
 8013372:	68fa      	ldr	r2, [r7, #12]
 8013374:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013378:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801337a:	68fa      	ldr	r2, [r7, #12]
 801337c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013380:	b292      	uxth	r2, r2
 8013382:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	22ff      	movs	r2, #255	; 0xff
 8013388:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	4618      	mov	r0, r3
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
	...

08013398 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2243      	movs	r2, #67	; 0x43
 80133a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80133a6:	4b03      	ldr	r3, [pc, #12]	; (80133b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	370c      	adds	r7, #12
 80133ac:	46bd      	mov	sp, r7
 80133ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b2:	4770      	bx	lr
 80133b4:	20000094 	.word	0x20000094

080133b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2243      	movs	r2, #67	; 0x43
 80133c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80133c6:	4b03      	ldr	r3, [pc, #12]	; (80133d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr
 80133d4:	20000050 	.word	0x20000050

080133d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2243      	movs	r2, #67	; 0x43
 80133e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80133e6:	4b03      	ldr	r3, [pc, #12]	; (80133f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr
 80133f4:	200000d8 	.word	0x200000d8

080133f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80133f8:	b480      	push	{r7}
 80133fa:	b083      	sub	sp, #12
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	220a      	movs	r2, #10
 8013404:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013406:	4b03      	ldr	r3, [pc, #12]	; (8013414 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013408:	4618      	mov	r0, r3
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr
 8013414:	2000000c 	.word	0x2000000c

08013418 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013418:	b480      	push	{r7}
 801341a:	b083      	sub	sp, #12
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d101      	bne.n	801342c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013428:	2303      	movs	r3, #3
 801342a:	e004      	b.n	8013436 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	683a      	ldr	r2, [r7, #0]
 8013430:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013434:	2300      	movs	r3, #0
}
 8013436:	4618      	mov	r0, r3
 8013438:	370c      	adds	r7, #12
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr

08013442 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013442:	b480      	push	{r7}
 8013444:	b087      	sub	sp, #28
 8013446:	af00      	add	r7, sp, #0
 8013448:	60f8      	str	r0, [r7, #12]
 801344a:	60b9      	str	r1, [r7, #8]
 801344c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013454:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d101      	bne.n	8013460 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801345c:	2303      	movs	r3, #3
 801345e:	e008      	b.n	8013472 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	68ba      	ldr	r2, [r7, #8]
 8013464:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013470:	2300      	movs	r3, #0
}
 8013472:	4618      	mov	r0, r3
 8013474:	371c      	adds	r7, #28
 8013476:	46bd      	mov	sp, r7
 8013478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347c:	4770      	bx	lr

0801347e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801347e:	b480      	push	{r7}
 8013480:	b085      	sub	sp, #20
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
 8013486:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801348e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d101      	bne.n	801349a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013496:	2303      	movs	r3, #3
 8013498:	e004      	b.n	80134a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	683a      	ldr	r2, [r7, #0]
 801349e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80134a2:	2300      	movs	r3, #0
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3714      	adds	r7, #20
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80134c0:	2301      	movs	r3, #1
 80134c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d101      	bne.n	80134d2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80134ce:	2303      	movs	r3, #3
 80134d0:	e01a      	b.n	8013508 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d114      	bne.n	8013506 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	2201      	movs	r2, #1
 80134e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80134fa:	2181      	movs	r1, #129	; 0x81
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f001 fdbb 	bl	8015078 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013502:	2300      	movs	r3, #0
 8013504:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013506:	7bfb      	ldrb	r3, [r7, #15]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3710      	adds	r7, #16
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801351e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013526:	2b00      	cmp	r3, #0
 8013528:	d101      	bne.n	801352e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801352a:	2303      	movs	r3, #3
 801352c:	e016      	b.n	801355c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	7c1b      	ldrb	r3, [r3, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d109      	bne.n	801354a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801353c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013540:	2101      	movs	r1, #1
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f001 fdb9 	bl	80150ba <USBD_LL_PrepareReceive>
 8013548:	e007      	b.n	801355a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013550:	2340      	movs	r3, #64	; 0x40
 8013552:	2101      	movs	r1, #1
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f001 fdb0 	bl	80150ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801355a:	2300      	movs	r3, #0
}
 801355c:	4618      	mov	r0, r3
 801355e:	3710      	adds	r7, #16
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}

08013564 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b086      	sub	sp, #24
 8013568:	af00      	add	r7, sp, #0
 801356a:	60f8      	str	r0, [r7, #12]
 801356c:	60b9      	str	r1, [r7, #8]
 801356e:	4613      	mov	r3, r2
 8013570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013578:	2303      	movs	r3, #3
 801357a:	e01f      	b.n	80135bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	2200      	movs	r2, #0
 8013580:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	2200      	movs	r2, #0
 8013588:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2200      	movs	r2, #0
 8013590:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d003      	beq.n	80135a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	68ba      	ldr	r2, [r7, #8]
 801359e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2201      	movs	r2, #1
 80135a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	79fa      	ldrb	r2, [r7, #7]
 80135ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80135b0:	68f8      	ldr	r0, [r7, #12]
 80135b2:	f001 fc17 	bl	8014de4 <USBD_LL_Init>
 80135b6:	4603      	mov	r3, r0
 80135b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80135ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3718      	adds	r7, #24
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80135ce:	2300      	movs	r3, #0
 80135d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d101      	bne.n	80135dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80135d8:	2303      	movs	r3, #3
 80135da:	e016      	b.n	801360a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	683a      	ldr	r2, [r7, #0]
 80135e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d00b      	beq.n	8013608 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f8:	f107 020e 	add.w	r2, r7, #14
 80135fc:	4610      	mov	r0, r2
 80135fe:	4798      	blx	r3
 8013600:	4602      	mov	r2, r0
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013608:	2300      	movs	r3, #0
}
 801360a:	4618      	mov	r0, r3
 801360c:	3710      	adds	r7, #16
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}

08013612 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013612:	b580      	push	{r7, lr}
 8013614:	b082      	sub	sp, #8
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f001 fc42 	bl	8014ea4 <USBD_LL_Start>
 8013620:	4603      	mov	r3, r0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801362a:	b480      	push	{r7}
 801362c:	b083      	sub	sp, #12
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013632:	2300      	movs	r3, #0
}
 8013634:	4618      	mov	r0, r3
 8013636:	370c      	adds	r7, #12
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr

08013640 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	460b      	mov	r3, r1
 801364a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801364c:	2303      	movs	r3, #3
 801364e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013656:	2b00      	cmp	r3, #0
 8013658:	d009      	beq.n	801366e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	78fa      	ldrb	r2, [r7, #3]
 8013664:	4611      	mov	r1, r2
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	4798      	blx	r3
 801366a:	4603      	mov	r3, r0
 801366c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013670:	4618      	mov	r0, r3
 8013672:	3710      	adds	r7, #16
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	460b      	mov	r3, r1
 8013682:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801368a:	2b00      	cmp	r3, #0
 801368c:	d007      	beq.n	801369e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	78fa      	ldrb	r2, [r7, #3]
 8013698:	4611      	mov	r1, r2
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	4798      	blx	r3
  }

  return USBD_OK;
 801369e:	2300      	movs	r3, #0
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80136b8:	6839      	ldr	r1, [r7, #0]
 80136ba:	4618      	mov	r0, r3
 80136bc:	f000 ff46 	bl	801454c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2201      	movs	r2, #1
 80136c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80136ce:	461a      	mov	r2, r3
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80136dc:	f003 031f 	and.w	r3, r3, #31
 80136e0:	2b02      	cmp	r3, #2
 80136e2:	d01a      	beq.n	801371a <USBD_LL_SetupStage+0x72>
 80136e4:	2b02      	cmp	r3, #2
 80136e6:	d822      	bhi.n	801372e <USBD_LL_SetupStage+0x86>
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d002      	beq.n	80136f2 <USBD_LL_SetupStage+0x4a>
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d00a      	beq.n	8013706 <USBD_LL_SetupStage+0x5e>
 80136f0:	e01d      	b.n	801372e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80136f8:	4619      	mov	r1, r3
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f000 f9ee 	bl	8013adc <USBD_StdDevReq>
 8013700:	4603      	mov	r3, r0
 8013702:	73fb      	strb	r3, [r7, #15]
      break;
 8013704:	e020      	b.n	8013748 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801370c:	4619      	mov	r1, r3
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f000 fa52 	bl	8013bb8 <USBD_StdItfReq>
 8013714:	4603      	mov	r3, r0
 8013716:	73fb      	strb	r3, [r7, #15]
      break;
 8013718:	e016      	b.n	8013748 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013720:	4619      	mov	r1, r3
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f000 fa91 	bl	8013c4a <USBD_StdEPReq>
 8013728:	4603      	mov	r3, r0
 801372a:	73fb      	strb	r3, [r7, #15]
      break;
 801372c:	e00c      	b.n	8013748 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013734:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013738:	b2db      	uxtb	r3, r3
 801373a:	4619      	mov	r1, r3
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f001 fc11 	bl	8014f64 <USBD_LL_StallEP>
 8013742:	4603      	mov	r3, r0
 8013744:	73fb      	strb	r3, [r7, #15]
      break;
 8013746:	bf00      	nop
  }

  return ret;
 8013748:	7bfb      	ldrb	r3, [r7, #15]
}
 801374a:	4618      	mov	r0, r3
 801374c:	3710      	adds	r7, #16
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}

08013752 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013752:	b580      	push	{r7, lr}
 8013754:	b086      	sub	sp, #24
 8013756:	af00      	add	r7, sp, #0
 8013758:	60f8      	str	r0, [r7, #12]
 801375a:	460b      	mov	r3, r1
 801375c:	607a      	str	r2, [r7, #4]
 801375e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013760:	7afb      	ldrb	r3, [r7, #11]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d138      	bne.n	80137d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801376c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013774:	2b03      	cmp	r3, #3
 8013776:	d14a      	bne.n	801380e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	689a      	ldr	r2, [r3, #8]
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	429a      	cmp	r2, r3
 8013782:	d913      	bls.n	80137ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	689a      	ldr	r2, [r3, #8]
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	1ad2      	subs	r2, r2, r3
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	68da      	ldr	r2, [r3, #12]
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	689b      	ldr	r3, [r3, #8]
 801379a:	4293      	cmp	r3, r2
 801379c:	bf28      	it	cs
 801379e:	4613      	movcs	r3, r2
 80137a0:	461a      	mov	r2, r3
 80137a2:	6879      	ldr	r1, [r7, #4]
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f000 ffc5 	bl	8014734 <USBD_CtlContinueRx>
 80137aa:	e030      	b.n	801380e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137b2:	b2db      	uxtb	r3, r3
 80137b4:	2b03      	cmp	r3, #3
 80137b6:	d10b      	bne.n	80137d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137be:	691b      	ldr	r3, [r3, #16]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d005      	beq.n	80137d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137ca:	691b      	ldr	r3, [r3, #16]
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80137d0:	68f8      	ldr	r0, [r7, #12]
 80137d2:	f000 ffc0 	bl	8014756 <USBD_CtlSendStatus>
 80137d6:	e01a      	b.n	801380e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137de:	b2db      	uxtb	r3, r3
 80137e0:	2b03      	cmp	r3, #3
 80137e2:	d114      	bne.n	801380e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137ea:	699b      	ldr	r3, [r3, #24]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d00e      	beq.n	801380e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137f6:	699b      	ldr	r3, [r3, #24]
 80137f8:	7afa      	ldrb	r2, [r7, #11]
 80137fa:	4611      	mov	r1, r2
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	4798      	blx	r3
 8013800:	4603      	mov	r3, r0
 8013802:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013804:	7dfb      	ldrb	r3, [r7, #23]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d001      	beq.n	801380e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801380a:	7dfb      	ldrb	r3, [r7, #23]
 801380c:	e000      	b.n	8013810 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801380e:	2300      	movs	r3, #0
}
 8013810:	4618      	mov	r0, r3
 8013812:	3718      	adds	r7, #24
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}

08013818 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b086      	sub	sp, #24
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	460b      	mov	r3, r1
 8013822:	607a      	str	r2, [r7, #4]
 8013824:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013826:	7afb      	ldrb	r3, [r7, #11]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d16b      	bne.n	8013904 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	3314      	adds	r3, #20
 8013830:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013838:	2b02      	cmp	r3, #2
 801383a:	d156      	bne.n	80138ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	689a      	ldr	r2, [r3, #8]
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	429a      	cmp	r2, r3
 8013846:	d914      	bls.n	8013872 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	689a      	ldr	r2, [r3, #8]
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	1ad2      	subs	r2, r2, r3
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	689b      	ldr	r3, [r3, #8]
 801385a:	461a      	mov	r2, r3
 801385c:	6879      	ldr	r1, [r7, #4]
 801385e:	68f8      	ldr	r0, [r7, #12]
 8013860:	f000 ff3a 	bl	80146d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013864:	2300      	movs	r3, #0
 8013866:	2200      	movs	r2, #0
 8013868:	2100      	movs	r1, #0
 801386a:	68f8      	ldr	r0, [r7, #12]
 801386c:	f001 fc25 	bl	80150ba <USBD_LL_PrepareReceive>
 8013870:	e03b      	b.n	80138ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	68da      	ldr	r2, [r3, #12]
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	689b      	ldr	r3, [r3, #8]
 801387a:	429a      	cmp	r2, r3
 801387c:	d11c      	bne.n	80138b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	685a      	ldr	r2, [r3, #4]
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013886:	429a      	cmp	r2, r3
 8013888:	d316      	bcc.n	80138b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	685a      	ldr	r2, [r3, #4]
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013894:	429a      	cmp	r2, r3
 8013896:	d20f      	bcs.n	80138b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013898:	2200      	movs	r2, #0
 801389a:	2100      	movs	r1, #0
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f000 ff1b 	bl	80146d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2200      	movs	r2, #0
 80138a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80138aa:	2300      	movs	r3, #0
 80138ac:	2200      	movs	r2, #0
 80138ae:	2100      	movs	r1, #0
 80138b0:	68f8      	ldr	r0, [r7, #12]
 80138b2:	f001 fc02 	bl	80150ba <USBD_LL_PrepareReceive>
 80138b6:	e018      	b.n	80138ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	2b03      	cmp	r3, #3
 80138c2:	d10b      	bne.n	80138dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138ca:	68db      	ldr	r3, [r3, #12]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d005      	beq.n	80138dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138d6:	68db      	ldr	r3, [r3, #12]
 80138d8:	68f8      	ldr	r0, [r7, #12]
 80138da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80138dc:	2180      	movs	r1, #128	; 0x80
 80138de:	68f8      	ldr	r0, [r7, #12]
 80138e0:	f001 fb40 	bl	8014f64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f000 ff49 	bl	801477c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d122      	bne.n	801393a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80138f4:	68f8      	ldr	r0, [r7, #12]
 80138f6:	f7ff fe98 	bl	801362a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013902:	e01a      	b.n	801393a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801390a:	b2db      	uxtb	r3, r3
 801390c:	2b03      	cmp	r3, #3
 801390e:	d114      	bne.n	801393a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013916:	695b      	ldr	r3, [r3, #20]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00e      	beq.n	801393a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013922:	695b      	ldr	r3, [r3, #20]
 8013924:	7afa      	ldrb	r2, [r7, #11]
 8013926:	4611      	mov	r1, r2
 8013928:	68f8      	ldr	r0, [r7, #12]
 801392a:	4798      	blx	r3
 801392c:	4603      	mov	r3, r0
 801392e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013930:	7dfb      	ldrb	r3, [r7, #23]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d001      	beq.n	801393a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013936:	7dfb      	ldrb	r3, [r7, #23]
 8013938:	e000      	b.n	801393c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801393a:	2300      	movs	r3, #0
}
 801393c:	4618      	mov	r0, r3
 801393e:	3718      	adds	r7, #24
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2201      	movs	r2, #1
 8013950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2200      	movs	r2, #0
 8013958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2200      	movs	r2, #0
 8013960:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013970:	2b00      	cmp	r3, #0
 8013972:	d101      	bne.n	8013978 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013974:	2303      	movs	r3, #3
 8013976:	e02f      	b.n	80139d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801397e:	2b00      	cmp	r3, #0
 8013980:	d00f      	beq.n	80139a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d009      	beq.n	80139a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	687a      	ldr	r2, [r7, #4]
 8013998:	6852      	ldr	r2, [r2, #4]
 801399a:	b2d2      	uxtb	r2, r2
 801399c:	4611      	mov	r1, r2
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80139a2:	2340      	movs	r3, #64	; 0x40
 80139a4:	2200      	movs	r2, #0
 80139a6:	2100      	movs	r1, #0
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f001 fa96 	bl	8014eda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2201      	movs	r2, #1
 80139b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2240      	movs	r2, #64	; 0x40
 80139ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80139be:	2340      	movs	r3, #64	; 0x40
 80139c0:	2200      	movs	r2, #0
 80139c2:	2180      	movs	r1, #128	; 0x80
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f001 fa88 	bl	8014eda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2201      	movs	r2, #1
 80139ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2240      	movs	r2, #64	; 0x40
 80139d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80139d6:	2300      	movs	r3, #0
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3708      	adds	r7, #8
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}

080139e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b083      	sub	sp, #12
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	460b      	mov	r3, r1
 80139ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	78fa      	ldrb	r2, [r7, #3]
 80139f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80139f2:	2300      	movs	r3, #0
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	370c      	adds	r7, #12
 80139f8:	46bd      	mov	sp, r7
 80139fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fe:	4770      	bx	lr

08013a00 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b083      	sub	sp, #12
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a0e:	b2da      	uxtb	r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2204      	movs	r2, #4
 8013a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013a1e:	2300      	movs	r3, #0
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	370c      	adds	r7, #12
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr

08013a2c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	2b04      	cmp	r3, #4
 8013a3e:	d106      	bne.n	8013a4e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013a4e:	2300      	movs	r3, #0
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr

08013a5c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b082      	sub	sp, #8
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d101      	bne.n	8013a72 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013a6e:	2303      	movs	r3, #3
 8013a70:	e012      	b.n	8013a98 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	2b03      	cmp	r3, #3
 8013a7c:	d10b      	bne.n	8013a96 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a84:	69db      	ldr	r3, [r3, #28]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d005      	beq.n	8013a96 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a90:	69db      	ldr	r3, [r3, #28]
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013a96:	2300      	movs	r3, #0
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3708      	adds	r7, #8
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b087      	sub	sp, #28
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	3301      	adds	r3, #1
 8013ab6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013abe:	8a3b      	ldrh	r3, [r7, #16]
 8013ac0:	021b      	lsls	r3, r3, #8
 8013ac2:	b21a      	sxth	r2, r3
 8013ac4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	b21b      	sxth	r3, r3
 8013acc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013ace:	89fb      	ldrh	r3, [r7, #14]
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	371c      	adds	r7, #28
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013af2:	2b40      	cmp	r3, #64	; 0x40
 8013af4:	d005      	beq.n	8013b02 <USBD_StdDevReq+0x26>
 8013af6:	2b40      	cmp	r3, #64	; 0x40
 8013af8:	d853      	bhi.n	8013ba2 <USBD_StdDevReq+0xc6>
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d00b      	beq.n	8013b16 <USBD_StdDevReq+0x3a>
 8013afe:	2b20      	cmp	r3, #32
 8013b00:	d14f      	bne.n	8013ba2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b08:	689b      	ldr	r3, [r3, #8]
 8013b0a:	6839      	ldr	r1, [r7, #0]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	4798      	blx	r3
 8013b10:	4603      	mov	r3, r0
 8013b12:	73fb      	strb	r3, [r7, #15]
      break;
 8013b14:	e04a      	b.n	8013bac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	785b      	ldrb	r3, [r3, #1]
 8013b1a:	2b09      	cmp	r3, #9
 8013b1c:	d83b      	bhi.n	8013b96 <USBD_StdDevReq+0xba>
 8013b1e:	a201      	add	r2, pc, #4	; (adr r2, 8013b24 <USBD_StdDevReq+0x48>)
 8013b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b24:	08013b79 	.word	0x08013b79
 8013b28:	08013b8d 	.word	0x08013b8d
 8013b2c:	08013b97 	.word	0x08013b97
 8013b30:	08013b83 	.word	0x08013b83
 8013b34:	08013b97 	.word	0x08013b97
 8013b38:	08013b57 	.word	0x08013b57
 8013b3c:	08013b4d 	.word	0x08013b4d
 8013b40:	08013b97 	.word	0x08013b97
 8013b44:	08013b6f 	.word	0x08013b6f
 8013b48:	08013b61 	.word	0x08013b61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013b4c:	6839      	ldr	r1, [r7, #0]
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f000 f9de 	bl	8013f10 <USBD_GetDescriptor>
          break;
 8013b54:	e024      	b.n	8013ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013b56:	6839      	ldr	r1, [r7, #0]
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 fb6d 	bl	8014238 <USBD_SetAddress>
          break;
 8013b5e:	e01f      	b.n	8013ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013b60:	6839      	ldr	r1, [r7, #0]
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f000 fbac 	bl	80142c0 <USBD_SetConfig>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	73fb      	strb	r3, [r7, #15]
          break;
 8013b6c:	e018      	b.n	8013ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013b6e:	6839      	ldr	r1, [r7, #0]
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 fc4b 	bl	801440c <USBD_GetConfig>
          break;
 8013b76:	e013      	b.n	8013ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013b78:	6839      	ldr	r1, [r7, #0]
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 fc7c 	bl	8014478 <USBD_GetStatus>
          break;
 8013b80:	e00e      	b.n	8013ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013b82:	6839      	ldr	r1, [r7, #0]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fcab 	bl	80144e0 <USBD_SetFeature>
          break;
 8013b8a:	e009      	b.n	8013ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013b8c:	6839      	ldr	r1, [r7, #0]
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fcba 	bl	8014508 <USBD_ClrFeature>
          break;
 8013b94:	e004      	b.n	8013ba0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013b96:	6839      	ldr	r1, [r7, #0]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 fd11 	bl	80145c0 <USBD_CtlError>
          break;
 8013b9e:	bf00      	nop
      }
      break;
 8013ba0:	e004      	b.n	8013bac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013ba2:	6839      	ldr	r1, [r7, #0]
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 fd0b 	bl	80145c0 <USBD_CtlError>
      break;
 8013baa:	bf00      	nop
  }

  return ret;
 8013bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3710      	adds	r7, #16
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop

08013bb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013bce:	2b40      	cmp	r3, #64	; 0x40
 8013bd0:	d005      	beq.n	8013bde <USBD_StdItfReq+0x26>
 8013bd2:	2b40      	cmp	r3, #64	; 0x40
 8013bd4:	d82f      	bhi.n	8013c36 <USBD_StdItfReq+0x7e>
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d001      	beq.n	8013bde <USBD_StdItfReq+0x26>
 8013bda:	2b20      	cmp	r3, #32
 8013bdc:	d12b      	bne.n	8013c36 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	3b01      	subs	r3, #1
 8013be8:	2b02      	cmp	r3, #2
 8013bea:	d81d      	bhi.n	8013c28 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	889b      	ldrh	r3, [r3, #4]
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d813      	bhi.n	8013c1e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bfc:	689b      	ldr	r3, [r3, #8]
 8013bfe:	6839      	ldr	r1, [r7, #0]
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	4798      	blx	r3
 8013c04:	4603      	mov	r3, r0
 8013c06:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	88db      	ldrh	r3, [r3, #6]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d110      	bne.n	8013c32 <USBD_StdItfReq+0x7a>
 8013c10:	7bfb      	ldrb	r3, [r7, #15]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d10d      	bne.n	8013c32 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f000 fd9d 	bl	8014756 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013c1c:	e009      	b.n	8013c32 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013c1e:	6839      	ldr	r1, [r7, #0]
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f000 fccd 	bl	80145c0 <USBD_CtlError>
          break;
 8013c26:	e004      	b.n	8013c32 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013c28:	6839      	ldr	r1, [r7, #0]
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f000 fcc8 	bl	80145c0 <USBD_CtlError>
          break;
 8013c30:	e000      	b.n	8013c34 <USBD_StdItfReq+0x7c>
          break;
 8013c32:	bf00      	nop
      }
      break;
 8013c34:	e004      	b.n	8013c40 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013c36:	6839      	ldr	r1, [r7, #0]
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f000 fcc1 	bl	80145c0 <USBD_CtlError>
      break;
 8013c3e:	bf00      	nop
  }

  return ret;
 8013c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3710      	adds	r7, #16
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}

08013c4a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b084      	sub	sp, #16
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
 8013c52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013c54:	2300      	movs	r3, #0
 8013c56:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	889b      	ldrh	r3, [r3, #4]
 8013c5c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013c66:	2b40      	cmp	r3, #64	; 0x40
 8013c68:	d007      	beq.n	8013c7a <USBD_StdEPReq+0x30>
 8013c6a:	2b40      	cmp	r3, #64	; 0x40
 8013c6c:	f200 8145 	bhi.w	8013efa <USBD_StdEPReq+0x2b0>
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d00c      	beq.n	8013c8e <USBD_StdEPReq+0x44>
 8013c74:	2b20      	cmp	r3, #32
 8013c76:	f040 8140 	bne.w	8013efa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	6839      	ldr	r1, [r7, #0]
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	4798      	blx	r3
 8013c88:	4603      	mov	r3, r0
 8013c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8013c8c:	e13a      	b.n	8013f04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	785b      	ldrb	r3, [r3, #1]
 8013c92:	2b03      	cmp	r3, #3
 8013c94:	d007      	beq.n	8013ca6 <USBD_StdEPReq+0x5c>
 8013c96:	2b03      	cmp	r3, #3
 8013c98:	f300 8129 	bgt.w	8013eee <USBD_StdEPReq+0x2a4>
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d07f      	beq.n	8013da0 <USBD_StdEPReq+0x156>
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	d03c      	beq.n	8013d1e <USBD_StdEPReq+0xd4>
 8013ca4:	e123      	b.n	8013eee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cac:	b2db      	uxtb	r3, r3
 8013cae:	2b02      	cmp	r3, #2
 8013cb0:	d002      	beq.n	8013cb8 <USBD_StdEPReq+0x6e>
 8013cb2:	2b03      	cmp	r3, #3
 8013cb4:	d016      	beq.n	8013ce4 <USBD_StdEPReq+0x9a>
 8013cb6:	e02c      	b.n	8013d12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013cb8:	7bbb      	ldrb	r3, [r7, #14]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00d      	beq.n	8013cda <USBD_StdEPReq+0x90>
 8013cbe:	7bbb      	ldrb	r3, [r7, #14]
 8013cc0:	2b80      	cmp	r3, #128	; 0x80
 8013cc2:	d00a      	beq.n	8013cda <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013cc4:	7bbb      	ldrb	r3, [r7, #14]
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f001 f94b 	bl	8014f64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013cce:	2180      	movs	r1, #128	; 0x80
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f001 f947 	bl	8014f64 <USBD_LL_StallEP>
 8013cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013cd8:	e020      	b.n	8013d1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013cda:	6839      	ldr	r1, [r7, #0]
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f000 fc6f 	bl	80145c0 <USBD_CtlError>
              break;
 8013ce2:	e01b      	b.n	8013d1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	885b      	ldrh	r3, [r3, #2]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d10e      	bne.n	8013d0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013cec:	7bbb      	ldrb	r3, [r7, #14]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00b      	beq.n	8013d0a <USBD_StdEPReq+0xc0>
 8013cf2:	7bbb      	ldrb	r3, [r7, #14]
 8013cf4:	2b80      	cmp	r3, #128	; 0x80
 8013cf6:	d008      	beq.n	8013d0a <USBD_StdEPReq+0xc0>
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	88db      	ldrh	r3, [r3, #6]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d104      	bne.n	8013d0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013d00:	7bbb      	ldrb	r3, [r7, #14]
 8013d02:	4619      	mov	r1, r3
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f001 f92d 	bl	8014f64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f000 fd23 	bl	8014756 <USBD_CtlSendStatus>

              break;
 8013d10:	e004      	b.n	8013d1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013d12:	6839      	ldr	r1, [r7, #0]
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f000 fc53 	bl	80145c0 <USBD_CtlError>
              break;
 8013d1a:	bf00      	nop
          }
          break;
 8013d1c:	e0ec      	b.n	8013ef8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	2b02      	cmp	r3, #2
 8013d28:	d002      	beq.n	8013d30 <USBD_StdEPReq+0xe6>
 8013d2a:	2b03      	cmp	r3, #3
 8013d2c:	d016      	beq.n	8013d5c <USBD_StdEPReq+0x112>
 8013d2e:	e030      	b.n	8013d92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013d30:	7bbb      	ldrb	r3, [r7, #14]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d00d      	beq.n	8013d52 <USBD_StdEPReq+0x108>
 8013d36:	7bbb      	ldrb	r3, [r7, #14]
 8013d38:	2b80      	cmp	r3, #128	; 0x80
 8013d3a:	d00a      	beq.n	8013d52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013d3c:	7bbb      	ldrb	r3, [r7, #14]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f001 f90f 	bl	8014f64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d46:	2180      	movs	r1, #128	; 0x80
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f001 f90b 	bl	8014f64 <USBD_LL_StallEP>
 8013d4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013d50:	e025      	b.n	8013d9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013d52:	6839      	ldr	r1, [r7, #0]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f000 fc33 	bl	80145c0 <USBD_CtlError>
              break;
 8013d5a:	e020      	b.n	8013d9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	885b      	ldrh	r3, [r3, #2]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d11b      	bne.n	8013d9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013d64:	7bbb      	ldrb	r3, [r7, #14]
 8013d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d004      	beq.n	8013d78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013d6e:	7bbb      	ldrb	r3, [r7, #14]
 8013d70:	4619      	mov	r1, r3
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f001 f915 	bl	8014fa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f000 fcec 	bl	8014756 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d84:	689b      	ldr	r3, [r3, #8]
 8013d86:	6839      	ldr	r1, [r7, #0]
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	4798      	blx	r3
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013d90:	e004      	b.n	8013d9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013d92:	6839      	ldr	r1, [r7, #0]
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f000 fc13 	bl	80145c0 <USBD_CtlError>
              break;
 8013d9a:	e000      	b.n	8013d9e <USBD_StdEPReq+0x154>
              break;
 8013d9c:	bf00      	nop
          }
          break;
 8013d9e:	e0ab      	b.n	8013ef8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	2b02      	cmp	r3, #2
 8013daa:	d002      	beq.n	8013db2 <USBD_StdEPReq+0x168>
 8013dac:	2b03      	cmp	r3, #3
 8013dae:	d032      	beq.n	8013e16 <USBD_StdEPReq+0x1cc>
 8013db0:	e097      	b.n	8013ee2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013db2:	7bbb      	ldrb	r3, [r7, #14]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d007      	beq.n	8013dc8 <USBD_StdEPReq+0x17e>
 8013db8:	7bbb      	ldrb	r3, [r7, #14]
 8013dba:	2b80      	cmp	r3, #128	; 0x80
 8013dbc:	d004      	beq.n	8013dc8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013dbe:	6839      	ldr	r1, [r7, #0]
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f000 fbfd 	bl	80145c0 <USBD_CtlError>
                break;
 8013dc6:	e091      	b.n	8013eec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	da0b      	bge.n	8013de8 <USBD_StdEPReq+0x19e>
 8013dd0:	7bbb      	ldrb	r3, [r7, #14]
 8013dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	009b      	lsls	r3, r3, #2
 8013dda:	4413      	add	r3, r2
 8013ddc:	009b      	lsls	r3, r3, #2
 8013dde:	3310      	adds	r3, #16
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	4413      	add	r3, r2
 8013de4:	3304      	adds	r3, #4
 8013de6:	e00b      	b.n	8013e00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013de8:	7bbb      	ldrb	r3, [r7, #14]
 8013dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013dee:	4613      	mov	r3, r2
 8013df0:	009b      	lsls	r3, r3, #2
 8013df2:	4413      	add	r3, r2
 8013df4:	009b      	lsls	r3, r3, #2
 8013df6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	3304      	adds	r3, #4
 8013e00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2200      	movs	r2, #0
 8013e06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	2202      	movs	r2, #2
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f000 fc47 	bl	80146a2 <USBD_CtlSendData>
              break;
 8013e14:	e06a      	b.n	8013eec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	da11      	bge.n	8013e42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013e1e:	7bbb      	ldrb	r3, [r7, #14]
 8013e20:	f003 020f 	and.w	r2, r3, #15
 8013e24:	6879      	ldr	r1, [r7, #4]
 8013e26:	4613      	mov	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	4413      	add	r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	440b      	add	r3, r1
 8013e30:	3324      	adds	r3, #36	; 0x24
 8013e32:	881b      	ldrh	r3, [r3, #0]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d117      	bne.n	8013e68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013e38:	6839      	ldr	r1, [r7, #0]
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 fbc0 	bl	80145c0 <USBD_CtlError>
                  break;
 8013e40:	e054      	b.n	8013eec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013e42:	7bbb      	ldrb	r3, [r7, #14]
 8013e44:	f003 020f 	and.w	r2, r3, #15
 8013e48:	6879      	ldr	r1, [r7, #4]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	009b      	lsls	r3, r3, #2
 8013e4e:	4413      	add	r3, r2
 8013e50:	009b      	lsls	r3, r3, #2
 8013e52:	440b      	add	r3, r1
 8013e54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013e58:	881b      	ldrh	r3, [r3, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d104      	bne.n	8013e68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013e5e:	6839      	ldr	r1, [r7, #0]
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f000 fbad 	bl	80145c0 <USBD_CtlError>
                  break;
 8013e66:	e041      	b.n	8013eec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	da0b      	bge.n	8013e88 <USBD_StdEPReq+0x23e>
 8013e70:	7bbb      	ldrb	r3, [r7, #14]
 8013e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e76:	4613      	mov	r3, r2
 8013e78:	009b      	lsls	r3, r3, #2
 8013e7a:	4413      	add	r3, r2
 8013e7c:	009b      	lsls	r3, r3, #2
 8013e7e:	3310      	adds	r3, #16
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	4413      	add	r3, r2
 8013e84:	3304      	adds	r3, #4
 8013e86:	e00b      	b.n	8013ea0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013e88:	7bbb      	ldrb	r3, [r7, #14]
 8013e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e8e:	4613      	mov	r3, r2
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	4413      	add	r3, r2
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	4413      	add	r3, r2
 8013e9e:	3304      	adds	r3, #4
 8013ea0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013ea2:	7bbb      	ldrb	r3, [r7, #14]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d002      	beq.n	8013eae <USBD_StdEPReq+0x264>
 8013ea8:	7bbb      	ldrb	r3, [r7, #14]
 8013eaa:	2b80      	cmp	r3, #128	; 0x80
 8013eac:	d103      	bne.n	8013eb6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	601a      	str	r2, [r3, #0]
 8013eb4:	e00e      	b.n	8013ed4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013eb6:	7bbb      	ldrb	r3, [r7, #14]
 8013eb8:	4619      	mov	r1, r3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f001 f890 	bl	8014fe0 <USBD_LL_IsStallEP>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d003      	beq.n	8013ece <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	2201      	movs	r2, #1
 8013eca:	601a      	str	r2, [r3, #0]
 8013ecc:	e002      	b.n	8013ed4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	2202      	movs	r2, #2
 8013ed8:	4619      	mov	r1, r3
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 fbe1 	bl	80146a2 <USBD_CtlSendData>
              break;
 8013ee0:	e004      	b.n	8013eec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013ee2:	6839      	ldr	r1, [r7, #0]
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f000 fb6b 	bl	80145c0 <USBD_CtlError>
              break;
 8013eea:	bf00      	nop
          }
          break;
 8013eec:	e004      	b.n	8013ef8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013eee:	6839      	ldr	r1, [r7, #0]
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f000 fb65 	bl	80145c0 <USBD_CtlError>
          break;
 8013ef6:	bf00      	nop
      }
      break;
 8013ef8:	e004      	b.n	8013f04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013efa:	6839      	ldr	r1, [r7, #0]
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f000 fb5f 	bl	80145c0 <USBD_CtlError>
      break;
 8013f02:	bf00      	nop
  }

  return ret;
 8013f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3710      	adds	r7, #16
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
	...

08013f10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013f22:	2300      	movs	r3, #0
 8013f24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	885b      	ldrh	r3, [r3, #2]
 8013f2a:	0a1b      	lsrs	r3, r3, #8
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	2b0e      	cmp	r3, #14
 8013f32:	f200 8152 	bhi.w	80141da <USBD_GetDescriptor+0x2ca>
 8013f36:	a201      	add	r2, pc, #4	; (adr r2, 8013f3c <USBD_GetDescriptor+0x2c>)
 8013f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f3c:	08013fad 	.word	0x08013fad
 8013f40:	08013fc5 	.word	0x08013fc5
 8013f44:	08014005 	.word	0x08014005
 8013f48:	080141db 	.word	0x080141db
 8013f4c:	080141db 	.word	0x080141db
 8013f50:	0801417b 	.word	0x0801417b
 8013f54:	080141a7 	.word	0x080141a7
 8013f58:	080141db 	.word	0x080141db
 8013f5c:	080141db 	.word	0x080141db
 8013f60:	080141db 	.word	0x080141db
 8013f64:	080141db 	.word	0x080141db
 8013f68:	080141db 	.word	0x080141db
 8013f6c:	080141db 	.word	0x080141db
 8013f70:	080141db 	.word	0x080141db
 8013f74:	08013f79 	.word	0x08013f79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f7e:	69db      	ldr	r3, [r3, #28]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d00b      	beq.n	8013f9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f8a:	69db      	ldr	r3, [r3, #28]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	7c12      	ldrb	r2, [r2, #16]
 8013f90:	f107 0108 	add.w	r1, r7, #8
 8013f94:	4610      	mov	r0, r2
 8013f96:	4798      	blx	r3
 8013f98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f9a:	e126      	b.n	80141ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f9c:	6839      	ldr	r1, [r7, #0]
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 fb0e 	bl	80145c0 <USBD_CtlError>
        err++;
 8013fa4:	7afb      	ldrb	r3, [r7, #11]
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	72fb      	strb	r3, [r7, #11]
      break;
 8013faa:	e11e      	b.n	80141ea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	687a      	ldr	r2, [r7, #4]
 8013fb6:	7c12      	ldrb	r2, [r2, #16]
 8013fb8:	f107 0108 	add.w	r1, r7, #8
 8013fbc:	4610      	mov	r0, r2
 8013fbe:	4798      	blx	r3
 8013fc0:	60f8      	str	r0, [r7, #12]
      break;
 8013fc2:	e112      	b.n	80141ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	7c1b      	ldrb	r3, [r3, #16]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d10d      	bne.n	8013fe8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fd4:	f107 0208 	add.w	r2, r7, #8
 8013fd8:	4610      	mov	r0, r2
 8013fda:	4798      	blx	r3
 8013fdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	2202      	movs	r2, #2
 8013fe4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013fe6:	e100      	b.n	80141ea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff0:	f107 0208 	add.w	r2, r7, #8
 8013ff4:	4610      	mov	r0, r2
 8013ff6:	4798      	blx	r3
 8013ff8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	2202      	movs	r2, #2
 8014000:	701a      	strb	r2, [r3, #0]
      break;
 8014002:	e0f2      	b.n	80141ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	885b      	ldrh	r3, [r3, #2]
 8014008:	b2db      	uxtb	r3, r3
 801400a:	2b05      	cmp	r3, #5
 801400c:	f200 80ac 	bhi.w	8014168 <USBD_GetDescriptor+0x258>
 8014010:	a201      	add	r2, pc, #4	; (adr r2, 8014018 <USBD_GetDescriptor+0x108>)
 8014012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014016:	bf00      	nop
 8014018:	08014031 	.word	0x08014031
 801401c:	08014065 	.word	0x08014065
 8014020:	08014099 	.word	0x08014099
 8014024:	080140cd 	.word	0x080140cd
 8014028:	08014101 	.word	0x08014101
 801402c:	08014135 	.word	0x08014135
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00b      	beq.n	8014054 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	687a      	ldr	r2, [r7, #4]
 8014046:	7c12      	ldrb	r2, [r2, #16]
 8014048:	f107 0108 	add.w	r1, r7, #8
 801404c:	4610      	mov	r0, r2
 801404e:	4798      	blx	r3
 8014050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014052:	e091      	b.n	8014178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014054:	6839      	ldr	r1, [r7, #0]
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f000 fab2 	bl	80145c0 <USBD_CtlError>
            err++;
 801405c:	7afb      	ldrb	r3, [r7, #11]
 801405e:	3301      	adds	r3, #1
 8014060:	72fb      	strb	r3, [r7, #11]
          break;
 8014062:	e089      	b.n	8014178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801406a:	689b      	ldr	r3, [r3, #8]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d00b      	beq.n	8014088 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014076:	689b      	ldr	r3, [r3, #8]
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	7c12      	ldrb	r2, [r2, #16]
 801407c:	f107 0108 	add.w	r1, r7, #8
 8014080:	4610      	mov	r0, r2
 8014082:	4798      	blx	r3
 8014084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014086:	e077      	b.n	8014178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014088:	6839      	ldr	r1, [r7, #0]
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f000 fa98 	bl	80145c0 <USBD_CtlError>
            err++;
 8014090:	7afb      	ldrb	r3, [r7, #11]
 8014092:	3301      	adds	r3, #1
 8014094:	72fb      	strb	r3, [r7, #11]
          break;
 8014096:	e06f      	b.n	8014178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d00b      	beq.n	80140bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	687a      	ldr	r2, [r7, #4]
 80140ae:	7c12      	ldrb	r2, [r2, #16]
 80140b0:	f107 0108 	add.w	r1, r7, #8
 80140b4:	4610      	mov	r0, r2
 80140b6:	4798      	blx	r3
 80140b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80140ba:	e05d      	b.n	8014178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80140bc:	6839      	ldr	r1, [r7, #0]
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f000 fa7e 	bl	80145c0 <USBD_CtlError>
            err++;
 80140c4:	7afb      	ldrb	r3, [r7, #11]
 80140c6:	3301      	adds	r3, #1
 80140c8:	72fb      	strb	r3, [r7, #11]
          break;
 80140ca:	e055      	b.n	8014178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140d2:	691b      	ldr	r3, [r3, #16]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00b      	beq.n	80140f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140de:	691b      	ldr	r3, [r3, #16]
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	7c12      	ldrb	r2, [r2, #16]
 80140e4:	f107 0108 	add.w	r1, r7, #8
 80140e8:	4610      	mov	r0, r2
 80140ea:	4798      	blx	r3
 80140ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80140ee:	e043      	b.n	8014178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80140f0:	6839      	ldr	r1, [r7, #0]
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 fa64 	bl	80145c0 <USBD_CtlError>
            err++;
 80140f8:	7afb      	ldrb	r3, [r7, #11]
 80140fa:	3301      	adds	r3, #1
 80140fc:	72fb      	strb	r3, [r7, #11]
          break;
 80140fe:	e03b      	b.n	8014178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014106:	695b      	ldr	r3, [r3, #20]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d00b      	beq.n	8014124 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014112:	695b      	ldr	r3, [r3, #20]
 8014114:	687a      	ldr	r2, [r7, #4]
 8014116:	7c12      	ldrb	r2, [r2, #16]
 8014118:	f107 0108 	add.w	r1, r7, #8
 801411c:	4610      	mov	r0, r2
 801411e:	4798      	blx	r3
 8014120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014122:	e029      	b.n	8014178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 fa4a 	bl	80145c0 <USBD_CtlError>
            err++;
 801412c:	7afb      	ldrb	r3, [r7, #11]
 801412e:	3301      	adds	r3, #1
 8014130:	72fb      	strb	r3, [r7, #11]
          break;
 8014132:	e021      	b.n	8014178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801413a:	699b      	ldr	r3, [r3, #24]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d00b      	beq.n	8014158 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014146:	699b      	ldr	r3, [r3, #24]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	7c12      	ldrb	r2, [r2, #16]
 801414c:	f107 0108 	add.w	r1, r7, #8
 8014150:	4610      	mov	r0, r2
 8014152:	4798      	blx	r3
 8014154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014156:	e00f      	b.n	8014178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014158:	6839      	ldr	r1, [r7, #0]
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f000 fa30 	bl	80145c0 <USBD_CtlError>
            err++;
 8014160:	7afb      	ldrb	r3, [r7, #11]
 8014162:	3301      	adds	r3, #1
 8014164:	72fb      	strb	r3, [r7, #11]
          break;
 8014166:	e007      	b.n	8014178 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014168:	6839      	ldr	r1, [r7, #0]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f000 fa28 	bl	80145c0 <USBD_CtlError>
          err++;
 8014170:	7afb      	ldrb	r3, [r7, #11]
 8014172:	3301      	adds	r3, #1
 8014174:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014176:	bf00      	nop
      }
      break;
 8014178:	e037      	b.n	80141ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	7c1b      	ldrb	r3, [r3, #16]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d109      	bne.n	8014196 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801418a:	f107 0208 	add.w	r2, r7, #8
 801418e:	4610      	mov	r0, r2
 8014190:	4798      	blx	r3
 8014192:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014194:	e029      	b.n	80141ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014196:	6839      	ldr	r1, [r7, #0]
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f000 fa11 	bl	80145c0 <USBD_CtlError>
        err++;
 801419e:	7afb      	ldrb	r3, [r7, #11]
 80141a0:	3301      	adds	r3, #1
 80141a2:	72fb      	strb	r3, [r7, #11]
      break;
 80141a4:	e021      	b.n	80141ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	7c1b      	ldrb	r3, [r3, #16]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d10d      	bne.n	80141ca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141b6:	f107 0208 	add.w	r2, r7, #8
 80141ba:	4610      	mov	r0, r2
 80141bc:	4798      	blx	r3
 80141be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	3301      	adds	r3, #1
 80141c4:	2207      	movs	r2, #7
 80141c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80141c8:	e00f      	b.n	80141ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80141ca:	6839      	ldr	r1, [r7, #0]
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 f9f7 	bl	80145c0 <USBD_CtlError>
        err++;
 80141d2:	7afb      	ldrb	r3, [r7, #11]
 80141d4:	3301      	adds	r3, #1
 80141d6:	72fb      	strb	r3, [r7, #11]
      break;
 80141d8:	e007      	b.n	80141ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80141da:	6839      	ldr	r1, [r7, #0]
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f000 f9ef 	bl	80145c0 <USBD_CtlError>
      err++;
 80141e2:	7afb      	ldrb	r3, [r7, #11]
 80141e4:	3301      	adds	r3, #1
 80141e6:	72fb      	strb	r3, [r7, #11]
      break;
 80141e8:	bf00      	nop
  }

  if (err != 0U)
 80141ea:	7afb      	ldrb	r3, [r7, #11]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d11e      	bne.n	801422e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	88db      	ldrh	r3, [r3, #6]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d016      	beq.n	8014226 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80141f8:	893b      	ldrh	r3, [r7, #8]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00e      	beq.n	801421c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	88da      	ldrh	r2, [r3, #6]
 8014202:	893b      	ldrh	r3, [r7, #8]
 8014204:	4293      	cmp	r3, r2
 8014206:	bf28      	it	cs
 8014208:	4613      	movcs	r3, r2
 801420a:	b29b      	uxth	r3, r3
 801420c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801420e:	893b      	ldrh	r3, [r7, #8]
 8014210:	461a      	mov	r2, r3
 8014212:	68f9      	ldr	r1, [r7, #12]
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fa44 	bl	80146a2 <USBD_CtlSendData>
 801421a:	e009      	b.n	8014230 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 f9ce 	bl	80145c0 <USBD_CtlError>
 8014224:	e004      	b.n	8014230 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f000 fa95 	bl	8014756 <USBD_CtlSendStatus>
 801422c:	e000      	b.n	8014230 <USBD_GetDescriptor+0x320>
    return;
 801422e:	bf00      	nop
  }
}
 8014230:	3710      	adds	r7, #16
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop

08014238 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	889b      	ldrh	r3, [r3, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d131      	bne.n	80142ae <USBD_SetAddress+0x76>
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	88db      	ldrh	r3, [r3, #6]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d12d      	bne.n	80142ae <USBD_SetAddress+0x76>
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	885b      	ldrh	r3, [r3, #2]
 8014256:	2b7f      	cmp	r3, #127	; 0x7f
 8014258:	d829      	bhi.n	80142ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	885b      	ldrh	r3, [r3, #2]
 801425e:	b2db      	uxtb	r3, r3
 8014260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014264:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2b03      	cmp	r3, #3
 8014270:	d104      	bne.n	801427c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014272:	6839      	ldr	r1, [r7, #0]
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f000 f9a3 	bl	80145c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801427a:	e01d      	b.n	80142b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	7bfa      	ldrb	r2, [r7, #15]
 8014280:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014284:	7bfb      	ldrb	r3, [r7, #15]
 8014286:	4619      	mov	r1, r3
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f000 fed6 	bl	801503a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 fa61 	bl	8014756 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014294:	7bfb      	ldrb	r3, [r7, #15]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d004      	beq.n	80142a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2202      	movs	r2, #2
 801429e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142a2:	e009      	b.n	80142b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2201      	movs	r2, #1
 80142a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142ac:	e004      	b.n	80142b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80142ae:	6839      	ldr	r1, [r7, #0]
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 f985 	bl	80145c0 <USBD_CtlError>
  }
}
 80142b6:	bf00      	nop
 80142b8:	bf00      	nop
 80142ba:	3710      	adds	r7, #16
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80142ca:	2300      	movs	r3, #0
 80142cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	885b      	ldrh	r3, [r3, #2]
 80142d2:	b2da      	uxtb	r2, r3
 80142d4:	4b4c      	ldr	r3, [pc, #304]	; (8014408 <USBD_SetConfig+0x148>)
 80142d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80142d8:	4b4b      	ldr	r3, [pc, #300]	; (8014408 <USBD_SetConfig+0x148>)
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d905      	bls.n	80142ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80142e0:	6839      	ldr	r1, [r7, #0]
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f000 f96c 	bl	80145c0 <USBD_CtlError>
    return USBD_FAIL;
 80142e8:	2303      	movs	r3, #3
 80142ea:	e088      	b.n	80143fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	2b02      	cmp	r3, #2
 80142f6:	d002      	beq.n	80142fe <USBD_SetConfig+0x3e>
 80142f8:	2b03      	cmp	r3, #3
 80142fa:	d025      	beq.n	8014348 <USBD_SetConfig+0x88>
 80142fc:	e071      	b.n	80143e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80142fe:	4b42      	ldr	r3, [pc, #264]	; (8014408 <USBD_SetConfig+0x148>)
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d01c      	beq.n	8014340 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8014306:	4b40      	ldr	r3, [pc, #256]	; (8014408 <USBD_SetConfig+0x148>)
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	461a      	mov	r2, r3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014310:	4b3d      	ldr	r3, [pc, #244]	; (8014408 <USBD_SetConfig+0x148>)
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	4619      	mov	r1, r3
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7ff f992 	bl	8013640 <USBD_SetClassConfig>
 801431c:	4603      	mov	r3, r0
 801431e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014320:	7bfb      	ldrb	r3, [r7, #15]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d004      	beq.n	8014330 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8014326:	6839      	ldr	r1, [r7, #0]
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f000 f949 	bl	80145c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801432e:	e065      	b.n	80143fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f000 fa10 	bl	8014756 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2203      	movs	r2, #3
 801433a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801433e:	e05d      	b.n	80143fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 fa08 	bl	8014756 <USBD_CtlSendStatus>
      break;
 8014346:	e059      	b.n	80143fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014348:	4b2f      	ldr	r3, [pc, #188]	; (8014408 <USBD_SetConfig+0x148>)
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d112      	bne.n	8014376 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2202      	movs	r2, #2
 8014354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014358:	4b2b      	ldr	r3, [pc, #172]	; (8014408 <USBD_SetConfig+0x148>)
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	461a      	mov	r2, r3
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014362:	4b29      	ldr	r3, [pc, #164]	; (8014408 <USBD_SetConfig+0x148>)
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	4619      	mov	r1, r3
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f7ff f985 	bl	8013678 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f000 f9f1 	bl	8014756 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014374:	e042      	b.n	80143fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014376:	4b24      	ldr	r3, [pc, #144]	; (8014408 <USBD_SetConfig+0x148>)
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	461a      	mov	r2, r3
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	429a      	cmp	r2, r3
 8014382:	d02a      	beq.n	80143da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	b2db      	uxtb	r3, r3
 801438a:	4619      	mov	r1, r3
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f7ff f973 	bl	8013678 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014392:	4b1d      	ldr	r3, [pc, #116]	; (8014408 <USBD_SetConfig+0x148>)
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	461a      	mov	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801439c:	4b1a      	ldr	r3, [pc, #104]	; (8014408 <USBD_SetConfig+0x148>)
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	4619      	mov	r1, r3
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f7ff f94c 	bl	8013640 <USBD_SetClassConfig>
 80143a8:	4603      	mov	r3, r0
 80143aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80143ac:	7bfb      	ldrb	r3, [r7, #15]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d00f      	beq.n	80143d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80143b2:	6839      	ldr	r1, [r7, #0]
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 f903 	bl	80145c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	b2db      	uxtb	r3, r3
 80143c0:	4619      	mov	r1, r3
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f7ff f958 	bl	8013678 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2202      	movs	r2, #2
 80143cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80143d0:	e014      	b.n	80143fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 f9bf 	bl	8014756 <USBD_CtlSendStatus>
      break;
 80143d8:	e010      	b.n	80143fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f000 f9bb 	bl	8014756 <USBD_CtlSendStatus>
      break;
 80143e0:	e00c      	b.n	80143fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80143e2:	6839      	ldr	r1, [r7, #0]
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f000 f8eb 	bl	80145c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80143ea:	4b07      	ldr	r3, [pc, #28]	; (8014408 <USBD_SetConfig+0x148>)
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	4619      	mov	r1, r3
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7ff f941 	bl	8013678 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80143f6:	2303      	movs	r3, #3
 80143f8:	73fb      	strb	r3, [r7, #15]
      break;
 80143fa:	bf00      	nop
  }

  return ret;
 80143fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop
 8014408:	20000aa4 	.word	0x20000aa4

0801440c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	88db      	ldrh	r3, [r3, #6]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d004      	beq.n	8014428 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801441e:	6839      	ldr	r1, [r7, #0]
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f000 f8cd 	bl	80145c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014426:	e023      	b.n	8014470 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801442e:	b2db      	uxtb	r3, r3
 8014430:	2b02      	cmp	r3, #2
 8014432:	dc02      	bgt.n	801443a <USBD_GetConfig+0x2e>
 8014434:	2b00      	cmp	r3, #0
 8014436:	dc03      	bgt.n	8014440 <USBD_GetConfig+0x34>
 8014438:	e015      	b.n	8014466 <USBD_GetConfig+0x5a>
 801443a:	2b03      	cmp	r3, #3
 801443c:	d00b      	beq.n	8014456 <USBD_GetConfig+0x4a>
 801443e:	e012      	b.n	8014466 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2200      	movs	r2, #0
 8014444:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	3308      	adds	r3, #8
 801444a:	2201      	movs	r2, #1
 801444c:	4619      	mov	r1, r3
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 f927 	bl	80146a2 <USBD_CtlSendData>
        break;
 8014454:	e00c      	b.n	8014470 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	3304      	adds	r3, #4
 801445a:	2201      	movs	r2, #1
 801445c:	4619      	mov	r1, r3
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 f91f 	bl	80146a2 <USBD_CtlSendData>
        break;
 8014464:	e004      	b.n	8014470 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014466:	6839      	ldr	r1, [r7, #0]
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f000 f8a9 	bl	80145c0 <USBD_CtlError>
        break;
 801446e:	bf00      	nop
}
 8014470:	bf00      	nop
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014488:	b2db      	uxtb	r3, r3
 801448a:	3b01      	subs	r3, #1
 801448c:	2b02      	cmp	r3, #2
 801448e:	d81e      	bhi.n	80144ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	88db      	ldrh	r3, [r3, #6]
 8014494:	2b02      	cmp	r3, #2
 8014496:	d004      	beq.n	80144a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014498:	6839      	ldr	r1, [r7, #0]
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f000 f890 	bl	80145c0 <USBD_CtlError>
        break;
 80144a0:	e01a      	b.n	80144d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2201      	movs	r2, #1
 80144a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d005      	beq.n	80144be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	68db      	ldr	r3, [r3, #12]
 80144b6:	f043 0202 	orr.w	r2, r3, #2
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	330c      	adds	r3, #12
 80144c2:	2202      	movs	r2, #2
 80144c4:	4619      	mov	r1, r3
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f000 f8eb 	bl	80146a2 <USBD_CtlSendData>
      break;
 80144cc:	e004      	b.n	80144d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 f875 	bl	80145c0 <USBD_CtlError>
      break;
 80144d6:	bf00      	nop
  }
}
 80144d8:	bf00      	nop
 80144da:	3708      	adds	r7, #8
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	885b      	ldrh	r3, [r3, #2]
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d106      	bne.n	8014500 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2201      	movs	r2, #1
 80144f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f000 f92b 	bl	8014756 <USBD_CtlSendStatus>
  }
}
 8014500:	bf00      	nop
 8014502:	3708      	adds	r7, #8
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}

08014508 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b082      	sub	sp, #8
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014518:	b2db      	uxtb	r3, r3
 801451a:	3b01      	subs	r3, #1
 801451c:	2b02      	cmp	r3, #2
 801451e:	d80b      	bhi.n	8014538 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	885b      	ldrh	r3, [r3, #2]
 8014524:	2b01      	cmp	r3, #1
 8014526:	d10c      	bne.n	8014542 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2200      	movs	r2, #0
 801452c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f000 f910 	bl	8014756 <USBD_CtlSendStatus>
      }
      break;
 8014536:	e004      	b.n	8014542 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014538:	6839      	ldr	r1, [r7, #0]
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f000 f840 	bl	80145c0 <USBD_CtlError>
      break;
 8014540:	e000      	b.n	8014544 <USBD_ClrFeature+0x3c>
      break;
 8014542:	bf00      	nop
  }
}
 8014544:	bf00      	nop
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	781a      	ldrb	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	3301      	adds	r3, #1
 8014566:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	781a      	ldrb	r2, [r3, #0]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	3301      	adds	r3, #1
 8014574:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	f7ff fa92 	bl	8013aa0 <SWAPBYTE>
 801457c:	4603      	mov	r3, r0
 801457e:	461a      	mov	r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	3301      	adds	r3, #1
 8014588:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	3301      	adds	r3, #1
 801458e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014590:	68f8      	ldr	r0, [r7, #12]
 8014592:	f7ff fa85 	bl	8013aa0 <SWAPBYTE>
 8014596:	4603      	mov	r3, r0
 8014598:	461a      	mov	r2, r3
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	3301      	adds	r3, #1
 80145a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	3301      	adds	r3, #1
 80145a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80145aa:	68f8      	ldr	r0, [r7, #12]
 80145ac:	f7ff fa78 	bl	8013aa0 <SWAPBYTE>
 80145b0:	4603      	mov	r3, r0
 80145b2:	461a      	mov	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	80da      	strh	r2, [r3, #6]
}
 80145b8:	bf00      	nop
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80145ca:	2180      	movs	r1, #128	; 0x80
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f000 fcc9 	bl	8014f64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80145d2:	2100      	movs	r1, #0
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 fcc5 	bl	8014f64 <USBD_LL_StallEP>
}
 80145da:	bf00      	nop
 80145dc:	3708      	adds	r7, #8
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}

080145e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80145e2:	b580      	push	{r7, lr}
 80145e4:	b086      	sub	sp, #24
 80145e6:	af00      	add	r7, sp, #0
 80145e8:	60f8      	str	r0, [r7, #12]
 80145ea:	60b9      	str	r1, [r7, #8]
 80145ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80145ee:	2300      	movs	r3, #0
 80145f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d036      	beq.n	8014666 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80145fc:	6938      	ldr	r0, [r7, #16]
 80145fe:	f000 f836 	bl	801466e <USBD_GetLen>
 8014602:	4603      	mov	r3, r0
 8014604:	3301      	adds	r3, #1
 8014606:	b29b      	uxth	r3, r3
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	b29a      	uxth	r2, r3
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014610:	7dfb      	ldrb	r3, [r7, #23]
 8014612:	68ba      	ldr	r2, [r7, #8]
 8014614:	4413      	add	r3, r2
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	7812      	ldrb	r2, [r2, #0]
 801461a:	701a      	strb	r2, [r3, #0]
  idx++;
 801461c:	7dfb      	ldrb	r3, [r7, #23]
 801461e:	3301      	adds	r3, #1
 8014620:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014622:	7dfb      	ldrb	r3, [r7, #23]
 8014624:	68ba      	ldr	r2, [r7, #8]
 8014626:	4413      	add	r3, r2
 8014628:	2203      	movs	r2, #3
 801462a:	701a      	strb	r2, [r3, #0]
  idx++;
 801462c:	7dfb      	ldrb	r3, [r7, #23]
 801462e:	3301      	adds	r3, #1
 8014630:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014632:	e013      	b.n	801465c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014634:	7dfb      	ldrb	r3, [r7, #23]
 8014636:	68ba      	ldr	r2, [r7, #8]
 8014638:	4413      	add	r3, r2
 801463a:	693a      	ldr	r2, [r7, #16]
 801463c:	7812      	ldrb	r2, [r2, #0]
 801463e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	3301      	adds	r3, #1
 8014644:	613b      	str	r3, [r7, #16]
    idx++;
 8014646:	7dfb      	ldrb	r3, [r7, #23]
 8014648:	3301      	adds	r3, #1
 801464a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801464c:	7dfb      	ldrb	r3, [r7, #23]
 801464e:	68ba      	ldr	r2, [r7, #8]
 8014650:	4413      	add	r3, r2
 8014652:	2200      	movs	r2, #0
 8014654:	701a      	strb	r2, [r3, #0]
    idx++;
 8014656:	7dfb      	ldrb	r3, [r7, #23]
 8014658:	3301      	adds	r3, #1
 801465a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d1e7      	bne.n	8014634 <USBD_GetString+0x52>
 8014664:	e000      	b.n	8014668 <USBD_GetString+0x86>
    return;
 8014666:	bf00      	nop
  }
}
 8014668:	3718      	adds	r7, #24
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}

0801466e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801466e:	b480      	push	{r7}
 8014670:	b085      	sub	sp, #20
 8014672:	af00      	add	r7, sp, #0
 8014674:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014676:	2300      	movs	r3, #0
 8014678:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801467e:	e005      	b.n	801468c <USBD_GetLen+0x1e>
  {
    len++;
 8014680:	7bfb      	ldrb	r3, [r7, #15]
 8014682:	3301      	adds	r3, #1
 8014684:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	3301      	adds	r3, #1
 801468a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d1f5      	bne.n	8014680 <USBD_GetLen+0x12>
  }

  return len;
 8014694:	7bfb      	ldrb	r3, [r7, #15]
}
 8014696:	4618      	mov	r0, r3
 8014698:	3714      	adds	r7, #20
 801469a:	46bd      	mov	sp, r7
 801469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a0:	4770      	bx	lr

080146a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b084      	sub	sp, #16
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	60f8      	str	r0, [r7, #12]
 80146aa:	60b9      	str	r1, [r7, #8]
 80146ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2202      	movs	r2, #2
 80146b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	687a      	ldr	r2, [r7, #4]
 80146ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	68ba      	ldr	r2, [r7, #8]
 80146c6:	2100      	movs	r1, #0
 80146c8:	68f8      	ldr	r0, [r7, #12]
 80146ca:	f000 fcd5 	bl	8015078 <USBD_LL_Transmit>

  return USBD_OK;
 80146ce:	2300      	movs	r3, #0
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3710      	adds	r7, #16
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b084      	sub	sp, #16
 80146dc:	af00      	add	r7, sp, #0
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	68ba      	ldr	r2, [r7, #8]
 80146e8:	2100      	movs	r1, #0
 80146ea:	68f8      	ldr	r0, [r7, #12]
 80146ec:	f000 fcc4 	bl	8015078 <USBD_LL_Transmit>

  return USBD_OK;
 80146f0:	2300      	movs	r3, #0
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80146fa:	b580      	push	{r7, lr}
 80146fc:	b084      	sub	sp, #16
 80146fe:	af00      	add	r7, sp, #0
 8014700:	60f8      	str	r0, [r7, #12]
 8014702:	60b9      	str	r1, [r7, #8]
 8014704:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2203      	movs	r2, #3
 801470a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	68ba      	ldr	r2, [r7, #8]
 8014722:	2100      	movs	r1, #0
 8014724:	68f8      	ldr	r0, [r7, #12]
 8014726:	f000 fcc8 	bl	80150ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 801472a:	2300      	movs	r3, #0
}
 801472c:	4618      	mov	r0, r3
 801472e:	3710      	adds	r7, #16
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	60f8      	str	r0, [r7, #12]
 801473c:	60b9      	str	r1, [r7, #8]
 801473e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	68ba      	ldr	r2, [r7, #8]
 8014744:	2100      	movs	r1, #0
 8014746:	68f8      	ldr	r0, [r7, #12]
 8014748:	f000 fcb7 	bl	80150ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 801474c:	2300      	movs	r3, #0
}
 801474e:	4618      	mov	r0, r3
 8014750:	3710      	adds	r7, #16
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}

08014756 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014756:	b580      	push	{r7, lr}
 8014758:	b082      	sub	sp, #8
 801475a:	af00      	add	r7, sp, #0
 801475c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2204      	movs	r2, #4
 8014762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014766:	2300      	movs	r3, #0
 8014768:	2200      	movs	r2, #0
 801476a:	2100      	movs	r1, #0
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f000 fc83 	bl	8015078 <USBD_LL_Transmit>

  return USBD_OK;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2205      	movs	r2, #5
 8014788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801478c:	2300      	movs	r3, #0
 801478e:	2200      	movs	r2, #0
 8014790:	2100      	movs	r1, #0
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f000 fc91 	bl	80150ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
	...

080147a4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80147a8:	2200      	movs	r2, #0
 80147aa:	4912      	ldr	r1, [pc, #72]	; (80147f4 <MX_USB_Device_Init+0x50>)
 80147ac:	4812      	ldr	r0, [pc, #72]	; (80147f8 <MX_USB_Device_Init+0x54>)
 80147ae:	f7fe fed9 	bl	8013564 <USBD_Init>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d001      	beq.n	80147bc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80147b8:	f7f0 fdc6 	bl	8005348 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80147bc:	490f      	ldr	r1, [pc, #60]	; (80147fc <MX_USB_Device_Init+0x58>)
 80147be:	480e      	ldr	r0, [pc, #56]	; (80147f8 <MX_USB_Device_Init+0x54>)
 80147c0:	f7fe ff00 	bl	80135c4 <USBD_RegisterClass>
 80147c4:	4603      	mov	r3, r0
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d001      	beq.n	80147ce <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80147ca:	f7f0 fdbd 	bl	8005348 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80147ce:	490c      	ldr	r1, [pc, #48]	; (8014800 <MX_USB_Device_Init+0x5c>)
 80147d0:	4809      	ldr	r0, [pc, #36]	; (80147f8 <MX_USB_Device_Init+0x54>)
 80147d2:	f7fe fe21 	bl	8013418 <USBD_CDC_RegisterInterface>
 80147d6:	4603      	mov	r3, r0
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d001      	beq.n	80147e0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80147dc:	f7f0 fdb4 	bl	8005348 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80147e0:	4805      	ldr	r0, [pc, #20]	; (80147f8 <MX_USB_Device_Init+0x54>)
 80147e2:	f7fe ff16 	bl	8013612 <USBD_Start>
 80147e6:	4603      	mov	r3, r0
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d001      	beq.n	80147f0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80147ec:	f7f0 fdac 	bl	8005348 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80147f0:	bf00      	nop
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	20000130 	.word	0x20000130
 80147f8:	20000aa8 	.word	0x20000aa8
 80147fc:	20000018 	.word	0x20000018
 8014800:	2000011c 	.word	0x2000011c

08014804 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014808:	2200      	movs	r2, #0
 801480a:	4905      	ldr	r1, [pc, #20]	; (8014820 <CDC_Init_FS+0x1c>)
 801480c:	4805      	ldr	r0, [pc, #20]	; (8014824 <CDC_Init_FS+0x20>)
 801480e:	f7fe fe18 	bl	8013442 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014812:	4905      	ldr	r1, [pc, #20]	; (8014828 <CDC_Init_FS+0x24>)
 8014814:	4803      	ldr	r0, [pc, #12]	; (8014824 <CDC_Init_FS+0x20>)
 8014816:	f7fe fe32 	bl	801347e <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 801481a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801481c:	4618      	mov	r0, r3
 801481e:	bd80      	pop	{r7, pc}
 8014820:	200015b8 	.word	0x200015b8
 8014824:	20000aa8 	.word	0x20000aa8
 8014828:	20000db8 	.word	0x20000db8

0801482c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801482c:	b480      	push	{r7}
 801482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8014830:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014832:	4618      	mov	r0, r3
 8014834:	46bd      	mov	sp, r7
 8014836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483a:	4770      	bx	lr

0801483c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801483c:	b480      	push	{r7}
 801483e:	b085      	sub	sp, #20
 8014840:	af00      	add	r7, sp, #0
 8014842:	4603      	mov	r3, r0
 8014844:	6039      	str	r1, [r7, #0]
 8014846:	71fb      	strb	r3, [r7, #7]
 8014848:	4613      	mov	r3, r2
 801484a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 801484c:	79fb      	ldrb	r3, [r7, #7]
 801484e:	2b23      	cmp	r3, #35	; 0x23
 8014850:	d85a      	bhi.n	8014908 <CDC_Control_FS+0xcc>
 8014852:	a201      	add	r2, pc, #4	; (adr r2, 8014858 <CDC_Control_FS+0x1c>)
 8014854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014858:	08014909 	.word	0x08014909
 801485c:	08014909 	.word	0x08014909
 8014860:	08014909 	.word	0x08014909
 8014864:	08014909 	.word	0x08014909
 8014868:	08014909 	.word	0x08014909
 801486c:	08014909 	.word	0x08014909
 8014870:	08014909 	.word	0x08014909
 8014874:	08014909 	.word	0x08014909
 8014878:	08014909 	.word	0x08014909
 801487c:	08014909 	.word	0x08014909
 8014880:	08014909 	.word	0x08014909
 8014884:	08014909 	.word	0x08014909
 8014888:	08014909 	.word	0x08014909
 801488c:	08014909 	.word	0x08014909
 8014890:	08014909 	.word	0x08014909
 8014894:	08014909 	.word	0x08014909
 8014898:	08014909 	.word	0x08014909
 801489c:	08014909 	.word	0x08014909
 80148a0:	08014909 	.word	0x08014909
 80148a4:	08014909 	.word	0x08014909
 80148a8:	08014909 	.word	0x08014909
 80148ac:	08014909 	.word	0x08014909
 80148b0:	08014909 	.word	0x08014909
 80148b4:	08014909 	.word	0x08014909
 80148b8:	08014909 	.word	0x08014909
 80148bc:	08014909 	.word	0x08014909
 80148c0:	08014909 	.word	0x08014909
 80148c4:	08014909 	.word	0x08014909
 80148c8:	08014909 	.word	0x08014909
 80148cc:	08014909 	.word	0x08014909
 80148d0:	08014909 	.word	0x08014909
 80148d4:	08014909 	.word	0x08014909
 80148d8:	08014909 	.word	0x08014909
 80148dc:	08014909 	.word	0x08014909
 80148e0:	080148e9 	.word	0x080148e9
 80148e4:	08014909 	.word	0x08014909

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	885b      	ldrh	r3, [r3, #2]
 80148f0:	f003 0301 	and.w	r3, r3, #1
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d003      	beq.n	8014900 <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 80148f8:	4b07      	ldr	r3, [pc, #28]	; (8014918 <CDC_Control_FS+0xdc>)
 80148fa:	2201      	movs	r2, #1
 80148fc:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 80148fe:	e004      	b.n	801490a <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 8014900:	4b05      	ldr	r3, [pc, #20]	; (8014918 <CDC_Control_FS+0xdc>)
 8014902:	2200      	movs	r2, #0
 8014904:	701a      	strb	r2, [r3, #0]
		break;
 8014906:	e000      	b.n	801490a <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8014908:	bf00      	nop
	}

	return (USBD_OK);
 801490a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801490c:	4618      	mov	r0, r3
 801490e:	3714      	adds	r7, #20
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr
 8014918:	20001db8 	.word	0x20001db8

0801491c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014926:	6879      	ldr	r1, [r7, #4]
 8014928:	480f      	ldr	r0, [pc, #60]	; (8014968 <CDC_Receive_FS+0x4c>)
 801492a:	f7fe fda8 	bl	801347e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801492e:	480e      	ldr	r0, [pc, #56]	; (8014968 <CDC_Receive_FS+0x4c>)
 8014930:	f7fe fdee 	bl	8013510 <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 8014934:	2240      	movs	r2, #64	; 0x40
 8014936:	2100      	movs	r1, #0
 8014938:	480c      	ldr	r0, [pc, #48]	; (801496c <CDC_Receive_FS+0x50>)
 801493a:	f000 fcf3 	bl	8015324 <memset>
	uint8_t len = (uint8_t) *Len;
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 8014944:	7bfb      	ldrb	r3, [r7, #15]
 8014946:	461a      	mov	r2, r3
 8014948:	6879      	ldr	r1, [r7, #4]
 801494a:	4808      	ldr	r0, [pc, #32]	; (801496c <CDC_Receive_FS+0x50>)
 801494c:	f000 fcdc 	bl	8015308 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8014950:	7bfb      	ldrb	r3, [r7, #15]
 8014952:	461a      	mov	r2, r3
 8014954:	2100      	movs	r1, #0
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f000 fce4 	bl	8015324 <memset>

	return (USBD_OK);
 801495c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801495e:	4618      	mov	r0, r3
 8014960:	3710      	adds	r7, #16
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	20000aa8 	.word	0x20000aa8
 801496c:	20000d78 	.word	0x20000d78

08014970 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	460b      	mov	r3, r1
 801497a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801497c:	2300      	movs	r3, #0
 801497e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8014980:	4b12      	ldr	r3, [pc, #72]	; (80149cc <CDC_Transmit_FS+0x5c>)
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d01b      	beq.n	80149c0 <CDC_Transmit_FS+0x50>
 8014988:	4b11      	ldr	r3, [pc, #68]	; (80149d0 <CDC_Transmit_FS+0x60>)
 801498a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801498e:	b2db      	uxtb	r3, r3
 8014990:	2b03      	cmp	r3, #3
 8014992:	d115      	bne.n	80149c0 <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 8014994:	4b0e      	ldr	r3, [pc, #56]	; (80149d0 <CDC_Transmit_FS+0x60>)
 8014996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801499a:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d001      	beq.n	80149aa <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 80149a6:	2301      	movs	r3, #1
 80149a8:	e00b      	b.n	80149c2 <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80149aa:	887b      	ldrh	r3, [r7, #2]
 80149ac:	461a      	mov	r2, r3
 80149ae:	6879      	ldr	r1, [r7, #4]
 80149b0:	4807      	ldr	r0, [pc, #28]	; (80149d0 <CDC_Transmit_FS+0x60>)
 80149b2:	f7fe fd46 	bl	8013442 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80149b6:	4806      	ldr	r0, [pc, #24]	; (80149d0 <CDC_Transmit_FS+0x60>)
 80149b8:	f7fe fd7a 	bl	80134b0 <USBD_CDC_TransmitPacket>
 80149bc:	4603      	mov	r3, r0
 80149be:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 80149c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3710      	adds	r7, #16
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	20001db8 	.word	0x20001db8
 80149d0:	20000aa8 	.word	0x20000aa8

080149d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80149d4:	b480      	push	{r7}
 80149d6:	b087      	sub	sp, #28
 80149d8:	af00      	add	r7, sp, #0
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	4613      	mov	r3, r2
 80149e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80149e2:	2300      	movs	r3, #0
 80149e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80149e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	371c      	adds	r7, #28
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr
	...

080149f8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149f8:	b480      	push	{r7}
 80149fa:	b083      	sub	sp, #12
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	4603      	mov	r3, r0
 8014a00:	6039      	str	r1, [r7, #0]
 8014a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	2212      	movs	r2, #18
 8014a08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014a0a:	4b03      	ldr	r3, [pc, #12]	; (8014a18 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr
 8014a18:	20000150 	.word	0x20000150

08014a1c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b083      	sub	sp, #12
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	4603      	mov	r3, r0
 8014a24:	6039      	str	r1, [r7, #0]
 8014a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	2204      	movs	r2, #4
 8014a2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014a2e:	4b03      	ldr	r3, [pc, #12]	; (8014a3c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	370c      	adds	r7, #12
 8014a34:	46bd      	mov	sp, r7
 8014a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3a:	4770      	bx	lr
 8014a3c:	20000164 	.word	0x20000164

08014a40 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b082      	sub	sp, #8
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	4603      	mov	r3, r0
 8014a48:	6039      	str	r1, [r7, #0]
 8014a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014a4c:	79fb      	ldrb	r3, [r7, #7]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d105      	bne.n	8014a5e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014a52:	683a      	ldr	r2, [r7, #0]
 8014a54:	4907      	ldr	r1, [pc, #28]	; (8014a74 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014a56:	4808      	ldr	r0, [pc, #32]	; (8014a78 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014a58:	f7ff fdc3 	bl	80145e2 <USBD_GetString>
 8014a5c:	e004      	b.n	8014a68 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014a5e:	683a      	ldr	r2, [r7, #0]
 8014a60:	4904      	ldr	r1, [pc, #16]	; (8014a74 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014a62:	4805      	ldr	r0, [pc, #20]	; (8014a78 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014a64:	f7ff fdbd 	bl	80145e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a68:	4b02      	ldr	r3, [pc, #8]	; (8014a74 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	3708      	adds	r7, #8
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}
 8014a72:	bf00      	nop
 8014a74:	20001dbc 	.word	0x20001dbc
 8014a78:	080182ec 	.word	0x080182ec

08014a7c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b082      	sub	sp, #8
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	4603      	mov	r3, r0
 8014a84:	6039      	str	r1, [r7, #0]
 8014a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014a88:	683a      	ldr	r2, [r7, #0]
 8014a8a:	4904      	ldr	r1, [pc, #16]	; (8014a9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014a8c:	4804      	ldr	r0, [pc, #16]	; (8014aa0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8014a8e:	f7ff fda8 	bl	80145e2 <USBD_GetString>
  return USBD_StrDesc;
 8014a92:	4b02      	ldr	r3, [pc, #8]	; (8014a9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3708      	adds	r7, #8
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	20001dbc 	.word	0x20001dbc
 8014aa0:	08018304 	.word	0x08018304

08014aa4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	4603      	mov	r3, r0
 8014aac:	6039      	str	r1, [r7, #0]
 8014aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	221a      	movs	r2, #26
 8014ab4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014ab6:	f000 f843 	bl	8014b40 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014aba:	4b02      	ldr	r3, [pc, #8]	; (8014ac4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3708      	adds	r7, #8
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	20000168 	.word	0x20000168

08014ac8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	4603      	mov	r3, r0
 8014ad0:	6039      	str	r1, [r7, #0]
 8014ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014ad4:	79fb      	ldrb	r3, [r7, #7]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d105      	bne.n	8014ae6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014ada:	683a      	ldr	r2, [r7, #0]
 8014adc:	4907      	ldr	r1, [pc, #28]	; (8014afc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014ade:	4808      	ldr	r0, [pc, #32]	; (8014b00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014ae0:	f7ff fd7f 	bl	80145e2 <USBD_GetString>
 8014ae4:	e004      	b.n	8014af0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014ae6:	683a      	ldr	r2, [r7, #0]
 8014ae8:	4904      	ldr	r1, [pc, #16]	; (8014afc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014aea:	4805      	ldr	r0, [pc, #20]	; (8014b00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014aec:	f7ff fd79 	bl	80145e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014af0:	4b02      	ldr	r3, [pc, #8]	; (8014afc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3708      	adds	r7, #8
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	20001dbc 	.word	0x20001dbc
 8014b00:	08018318 	.word	0x08018318

08014b04 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	6039      	str	r1, [r7, #0]
 8014b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014b10:	79fb      	ldrb	r3, [r7, #7]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d105      	bne.n	8014b22 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014b16:	683a      	ldr	r2, [r7, #0]
 8014b18:	4907      	ldr	r1, [pc, #28]	; (8014b38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014b1a:	4808      	ldr	r0, [pc, #32]	; (8014b3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014b1c:	f7ff fd61 	bl	80145e2 <USBD_GetString>
 8014b20:	e004      	b.n	8014b2c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014b22:	683a      	ldr	r2, [r7, #0]
 8014b24:	4904      	ldr	r1, [pc, #16]	; (8014b38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014b26:	4805      	ldr	r0, [pc, #20]	; (8014b3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014b28:	f7ff fd5b 	bl	80145e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014b2c:	4b02      	ldr	r3, [pc, #8]	; (8014b38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3708      	adds	r7, #8
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	20001dbc 	.word	0x20001dbc
 8014b3c:	08018324 	.word	0x08018324

08014b40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014b46:	4b0f      	ldr	r3, [pc, #60]	; (8014b84 <Get_SerialNum+0x44>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014b4c:	4b0e      	ldr	r3, [pc, #56]	; (8014b88 <Get_SerialNum+0x48>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014b52:	4b0e      	ldr	r3, [pc, #56]	; (8014b8c <Get_SerialNum+0x4c>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d009      	beq.n	8014b7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014b66:	2208      	movs	r2, #8
 8014b68:	4909      	ldr	r1, [pc, #36]	; (8014b90 <Get_SerialNum+0x50>)
 8014b6a:	68f8      	ldr	r0, [r7, #12]
 8014b6c:	f000 f814 	bl	8014b98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014b70:	2204      	movs	r2, #4
 8014b72:	4908      	ldr	r1, [pc, #32]	; (8014b94 <Get_SerialNum+0x54>)
 8014b74:	68b8      	ldr	r0, [r7, #8]
 8014b76:	f000 f80f 	bl	8014b98 <IntToUnicode>
  }
}
 8014b7a:	bf00      	nop
 8014b7c:	3710      	adds	r7, #16
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	bf00      	nop
 8014b84:	1fff7590 	.word	0x1fff7590
 8014b88:	1fff7594 	.word	0x1fff7594
 8014b8c:	1fff7598 	.word	0x1fff7598
 8014b90:	2000016a 	.word	0x2000016a
 8014b94:	2000017a 	.word	0x2000017a

08014b98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014b98:	b480      	push	{r7}
 8014b9a:	b087      	sub	sp, #28
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014baa:	2300      	movs	r3, #0
 8014bac:	75fb      	strb	r3, [r7, #23]
 8014bae:	e027      	b.n	8014c00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	0f1b      	lsrs	r3, r3, #28
 8014bb4:	2b09      	cmp	r3, #9
 8014bb6:	d80b      	bhi.n	8014bd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	0f1b      	lsrs	r3, r3, #28
 8014bbc:	b2da      	uxtb	r2, r3
 8014bbe:	7dfb      	ldrb	r3, [r7, #23]
 8014bc0:	005b      	lsls	r3, r3, #1
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	440b      	add	r3, r1
 8014bc8:	3230      	adds	r2, #48	; 0x30
 8014bca:	b2d2      	uxtb	r2, r2
 8014bcc:	701a      	strb	r2, [r3, #0]
 8014bce:	e00a      	b.n	8014be6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	0f1b      	lsrs	r3, r3, #28
 8014bd4:	b2da      	uxtb	r2, r3
 8014bd6:	7dfb      	ldrb	r3, [r7, #23]
 8014bd8:	005b      	lsls	r3, r3, #1
 8014bda:	4619      	mov	r1, r3
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	440b      	add	r3, r1
 8014be0:	3237      	adds	r2, #55	; 0x37
 8014be2:	b2d2      	uxtb	r2, r2
 8014be4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	011b      	lsls	r3, r3, #4
 8014bea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014bec:	7dfb      	ldrb	r3, [r7, #23]
 8014bee:	005b      	lsls	r3, r3, #1
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	68ba      	ldr	r2, [r7, #8]
 8014bf4:	4413      	add	r3, r2
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014bfa:	7dfb      	ldrb	r3, [r7, #23]
 8014bfc:	3301      	adds	r3, #1
 8014bfe:	75fb      	strb	r3, [r7, #23]
 8014c00:	7dfa      	ldrb	r2, [r7, #23]
 8014c02:	79fb      	ldrb	r3, [r7, #7]
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d3d3      	bcc.n	8014bb0 <IntToUnicode+0x18>
  }
}
 8014c08:	bf00      	nop
 8014c0a:	bf00      	nop
 8014c0c:	371c      	adds	r7, #28
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c14:	4770      	bx	lr
	...

08014c18 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b098      	sub	sp, #96	; 0x60
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8014c20:	f107 030c 	add.w	r3, r7, #12
 8014c24:	2254      	movs	r2, #84	; 0x54
 8014c26:	2100      	movs	r1, #0
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f000 fb7b 	bl	8015324 <memset>
  if(pcdHandle->Instance==USB)
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	4a15      	ldr	r2, [pc, #84]	; (8014c88 <HAL_PCD_MspInit+0x70>)
 8014c34:	4293      	cmp	r3, r2
 8014c36:	d122      	bne.n	8014c7e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014c3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014c42:	f107 030c 	add.w	r3, r7, #12
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7f8 fcc4 	bl	800d5d4 <HAL_RCCEx_PeriphCLKConfig>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d001      	beq.n	8014c56 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8014c52:	f7f0 fb79 	bl	8005348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014c56:	4b0d      	ldr	r3, [pc, #52]	; (8014c8c <HAL_PCD_MspInit+0x74>)
 8014c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c5a:	4a0c      	ldr	r2, [pc, #48]	; (8014c8c <HAL_PCD_MspInit+0x74>)
 8014c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014c60:	6593      	str	r3, [r2, #88]	; 0x58
 8014c62:	4b0a      	ldr	r3, [pc, #40]	; (8014c8c <HAL_PCD_MspInit+0x74>)
 8014c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014c6a:	60bb      	str	r3, [r7, #8]
 8014c6c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8014c6e:	2200      	movs	r2, #0
 8014c70:	2100      	movs	r1, #0
 8014c72:	2014      	movs	r0, #20
 8014c74:	f7f3 fc17 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014c78:	2014      	movs	r0, #20
 8014c7a:	f7f3 fc2e 	bl	80084da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014c7e:	bf00      	nop
 8014c80:	3760      	adds	r7, #96	; 0x60
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	40005c00 	.word	0x40005c00
 8014c8c:	40021000 	.word	0x40021000

08014c90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	4610      	mov	r0, r2
 8014ca8:	f7fe fcfe 	bl	80136a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014cac:	bf00      	nop
 8014cae:	3708      	adds	r7, #8
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014cc6:	78fa      	ldrb	r2, [r7, #3]
 8014cc8:	6879      	ldr	r1, [r7, #4]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	4413      	add	r3, r2
 8014cd0:	00db      	lsls	r3, r3, #3
 8014cd2:	440b      	add	r3, r1
 8014cd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014cd8:	681a      	ldr	r2, [r3, #0]
 8014cda:	78fb      	ldrb	r3, [r7, #3]
 8014cdc:	4619      	mov	r1, r3
 8014cde:	f7fe fd38 	bl	8013752 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014ce2:	bf00      	nop
 8014ce4:	3708      	adds	r7, #8
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}

08014cea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cea:	b580      	push	{r7, lr}
 8014cec:	b082      	sub	sp, #8
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014cfc:	78fa      	ldrb	r2, [r7, #3]
 8014cfe:	6879      	ldr	r1, [r7, #4]
 8014d00:	4613      	mov	r3, r2
 8014d02:	009b      	lsls	r3, r3, #2
 8014d04:	4413      	add	r3, r2
 8014d06:	00db      	lsls	r3, r3, #3
 8014d08:	440b      	add	r3, r1
 8014d0a:	333c      	adds	r3, #60	; 0x3c
 8014d0c:	681a      	ldr	r2, [r3, #0]
 8014d0e:	78fb      	ldrb	r3, [r7, #3]
 8014d10:	4619      	mov	r1, r3
 8014d12:	f7fe fd81 	bl	8013818 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014d16:	bf00      	nop
 8014d18:	3708      	adds	r7, #8
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}

08014d1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b082      	sub	sp, #8
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7fe fe95 	bl	8013a5c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014d32:	bf00      	nop
 8014d34:	3708      	adds	r7, #8
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b084      	sub	sp, #16
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014d42:	2301      	movs	r3, #1
 8014d44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	689b      	ldr	r3, [r3, #8]
 8014d4a:	2b02      	cmp	r3, #2
 8014d4c:	d001      	beq.n	8014d52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014d4e:	f7f0 fafb 	bl	8005348 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014d58:	7bfa      	ldrb	r2, [r7, #15]
 8014d5a:	4611      	mov	r1, r2
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fe fe3f 	bl	80139e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7fe fdeb 	bl	8013944 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014d6e:	bf00      	nop
 8014d70:	3710      	adds	r7, #16
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
	...

08014d78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014d86:	4618      	mov	r0, r3
 8014d88:	f7fe fe3a 	bl	8013a00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	699b      	ldr	r3, [r3, #24]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d005      	beq.n	8014da0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d94:	4b04      	ldr	r3, [pc, #16]	; (8014da8 <HAL_PCD_SuspendCallback+0x30>)
 8014d96:	691b      	ldr	r3, [r3, #16]
 8014d98:	4a03      	ldr	r2, [pc, #12]	; (8014da8 <HAL_PCD_SuspendCallback+0x30>)
 8014d9a:	f043 0306 	orr.w	r3, r3, #6
 8014d9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014da0:	bf00      	nop
 8014da2:	3708      	adds	r7, #8
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	e000ed00 	.word	0xe000ed00

08014dac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	699b      	ldr	r3, [r3, #24]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d007      	beq.n	8014dcc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014dbc:	4b08      	ldr	r3, [pc, #32]	; (8014de0 <HAL_PCD_ResumeCallback+0x34>)
 8014dbe:	691b      	ldr	r3, [r3, #16]
 8014dc0:	4a07      	ldr	r2, [pc, #28]	; (8014de0 <HAL_PCD_ResumeCallback+0x34>)
 8014dc2:	f023 0306 	bic.w	r3, r3, #6
 8014dc6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014dc8:	f000 f9fa 	bl	80151c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fe fe2a 	bl	8013a2c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014dd8:	bf00      	nop
 8014dda:	3708      	adds	r7, #8
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}
 8014de0:	e000ed00 	.word	0xe000ed00

08014de4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014dec:	4a2b      	ldr	r2, [pc, #172]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	4a29      	ldr	r2, [pc, #164]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014df8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8014dfc:	4b27      	ldr	r3, [pc, #156]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014dfe:	4a28      	ldr	r2, [pc, #160]	; (8014ea0 <USBD_LL_Init+0xbc>)
 8014e00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014e02:	4b26      	ldr	r3, [pc, #152]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e04:	2208      	movs	r2, #8
 8014e06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014e08:	4b24      	ldr	r3, [pc, #144]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e0a:	2202      	movs	r2, #2
 8014e0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014e0e:	4b23      	ldr	r3, [pc, #140]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e10:	2202      	movs	r2, #2
 8014e12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014e14:	4b21      	ldr	r3, [pc, #132]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e16:	2200      	movs	r2, #0
 8014e18:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014e1a:	4b20      	ldr	r3, [pc, #128]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014e20:	4b1e      	ldr	r3, [pc, #120]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e22:	2200      	movs	r2, #0
 8014e24:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014e26:	4b1d      	ldr	r3, [pc, #116]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e28:	2200      	movs	r2, #0
 8014e2a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014e2c:	481b      	ldr	r0, [pc, #108]	; (8014e9c <USBD_LL_Init+0xb8>)
 8014e2e:	f7f6 f8c5 	bl	800afbc <HAL_PCD_Init>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d001      	beq.n	8014e3c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8014e38:	f7f0 fa86 	bl	8005348 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e42:	2318      	movs	r3, #24
 8014e44:	2200      	movs	r2, #0
 8014e46:	2100      	movs	r1, #0
 8014e48:	f7f7 fd7e 	bl	800c948 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e52:	2358      	movs	r3, #88	; 0x58
 8014e54:	2200      	movs	r2, #0
 8014e56:	2180      	movs	r1, #128	; 0x80
 8014e58:	f7f7 fd76 	bl	800c948 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e62:	23c0      	movs	r3, #192	; 0xc0
 8014e64:	2200      	movs	r2, #0
 8014e66:	2181      	movs	r1, #129	; 0x81
 8014e68:	f7f7 fd6e 	bl	800c948 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014e76:	2200      	movs	r2, #0
 8014e78:	2101      	movs	r1, #1
 8014e7a:	f7f7 fd65 	bl	800c948 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014e88:	2200      	movs	r2, #0
 8014e8a:	2182      	movs	r1, #130	; 0x82
 8014e8c:	f7f7 fd5c 	bl	800c948 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014e90:	2300      	movs	r3, #0
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	20001fbc 	.word	0x20001fbc
 8014ea0:	40005c00 	.word	0x40005c00

08014ea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014eac:	2300      	movs	r3, #0
 8014eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7f6 f963 	bl	800b186 <HAL_PCD_Start>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ec4:	7bfb      	ldrb	r3, [r7, #15]
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f000 f9c8 	bl	801525c <USBD_Get_USB_Status>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3710      	adds	r7, #16
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}

08014eda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014eda:	b580      	push	{r7, lr}
 8014edc:	b084      	sub	sp, #16
 8014ede:	af00      	add	r7, sp, #0
 8014ee0:	6078      	str	r0, [r7, #4]
 8014ee2:	4608      	mov	r0, r1
 8014ee4:	4611      	mov	r1, r2
 8014ee6:	461a      	mov	r2, r3
 8014ee8:	4603      	mov	r3, r0
 8014eea:	70fb      	strb	r3, [r7, #3]
 8014eec:	460b      	mov	r3, r1
 8014eee:	70bb      	strb	r3, [r7, #2]
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014f02:	78bb      	ldrb	r3, [r7, #2]
 8014f04:	883a      	ldrh	r2, [r7, #0]
 8014f06:	78f9      	ldrb	r1, [r7, #3]
 8014f08:	f7f6 faab 	bl	800b462 <HAL_PCD_EP_Open>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f10:	7bfb      	ldrb	r3, [r7, #15]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f000 f9a2 	bl	801525c <USBD_Get_USB_Status>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3710      	adds	r7, #16
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b084      	sub	sp, #16
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
 8014f2e:	460b      	mov	r3, r1
 8014f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f32:	2300      	movs	r3, #0
 8014f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f36:	2300      	movs	r3, #0
 8014f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f40:	78fa      	ldrb	r2, [r7, #3]
 8014f42:	4611      	mov	r1, r2
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7f6 faf2 	bl	800b52e <HAL_PCD_EP_Close>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f4e:	7bfb      	ldrb	r3, [r7, #15]
 8014f50:	4618      	mov	r0, r3
 8014f52:	f000 f983 	bl	801525c <USBD_Get_USB_Status>
 8014f56:	4603      	mov	r3, r0
 8014f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3710      	adds	r7, #16
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	460b      	mov	r3, r1
 8014f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f70:	2300      	movs	r3, #0
 8014f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f74:	2300      	movs	r3, #0
 8014f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f7e:	78fa      	ldrb	r2, [r7, #3]
 8014f80:	4611      	mov	r1, r2
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7f6 fbb3 	bl	800b6ee <HAL_PCD_EP_SetStall>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f8c:	7bfb      	ldrb	r3, [r7, #15]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f000 f964 	bl	801525c <USBD_Get_USB_Status>
 8014f94:	4603      	mov	r3, r0
 8014f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3710      	adds	r7, #16
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}

08014fa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fa2:	b580      	push	{r7, lr}
 8014fa4:	b084      	sub	sp, #16
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	6078      	str	r0, [r7, #4]
 8014faa:	460b      	mov	r3, r1
 8014fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014fbc:	78fa      	ldrb	r2, [r7, #3]
 8014fbe:	4611      	mov	r1, r2
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7f6 fbe6 	bl	800b792 <HAL_PCD_EP_ClrStall>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fca:	7bfb      	ldrb	r3, [r7, #15]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f000 f945 	bl	801525c <USBD_Get_USB_Status>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3710      	adds	r7, #16
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b085      	sub	sp, #20
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	460b      	mov	r3, r1
 8014fea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ff2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	da0c      	bge.n	8015016 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ffc:	78fb      	ldrb	r3, [r7, #3]
 8014ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015002:	68f9      	ldr	r1, [r7, #12]
 8015004:	1c5a      	adds	r2, r3, #1
 8015006:	4613      	mov	r3, r2
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	4413      	add	r3, r2
 801500c:	00db      	lsls	r3, r3, #3
 801500e:	440b      	add	r3, r1
 8015010:	3302      	adds	r3, #2
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	e00b      	b.n	801502e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015016:	78fb      	ldrb	r3, [r7, #3]
 8015018:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801501c:	68f9      	ldr	r1, [r7, #12]
 801501e:	4613      	mov	r3, r2
 8015020:	009b      	lsls	r3, r3, #2
 8015022:	4413      	add	r3, r2
 8015024:	00db      	lsls	r3, r3, #3
 8015026:	440b      	add	r3, r1
 8015028:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801502c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801502e:	4618      	mov	r0, r3
 8015030:	3714      	adds	r7, #20
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr

0801503a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801503a:	b580      	push	{r7, lr}
 801503c:	b084      	sub	sp, #16
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
 8015042:	460b      	mov	r3, r1
 8015044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015046:	2300      	movs	r3, #0
 8015048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801504a:	2300      	movs	r3, #0
 801504c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015054:	78fa      	ldrb	r2, [r7, #3]
 8015056:	4611      	mov	r1, r2
 8015058:	4618      	mov	r0, r3
 801505a:	f7f6 f9dd 	bl	800b418 <HAL_PCD_SetAddress>
 801505e:	4603      	mov	r3, r0
 8015060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015062:	7bfb      	ldrb	r3, [r7, #15]
 8015064:	4618      	mov	r0, r3
 8015066:	f000 f8f9 	bl	801525c <USBD_Get_USB_Status>
 801506a:	4603      	mov	r3, r0
 801506c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801506e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015070:	4618      	mov	r0, r3
 8015072:	3710      	adds	r7, #16
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b086      	sub	sp, #24
 801507c:	af00      	add	r7, sp, #0
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	607a      	str	r2, [r7, #4]
 8015082:	603b      	str	r3, [r7, #0]
 8015084:	460b      	mov	r3, r1
 8015086:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015088:	2300      	movs	r3, #0
 801508a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801508c:	2300      	movs	r3, #0
 801508e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015096:	7af9      	ldrb	r1, [r7, #11]
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	f7f6 fae4 	bl	800b668 <HAL_PCD_EP_Transmit>
 80150a0:	4603      	mov	r3, r0
 80150a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150a4:	7dfb      	ldrb	r3, [r7, #23]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f000 f8d8 	bl	801525c <USBD_Get_USB_Status>
 80150ac:	4603      	mov	r3, r0
 80150ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3718      	adds	r7, #24
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b086      	sub	sp, #24
 80150be:	af00      	add	r7, sp, #0
 80150c0:	60f8      	str	r0, [r7, #12]
 80150c2:	607a      	str	r2, [r7, #4]
 80150c4:	603b      	str	r3, [r7, #0]
 80150c6:	460b      	mov	r3, r1
 80150c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150ca:	2300      	movs	r3, #0
 80150cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150ce:	2300      	movs	r3, #0
 80150d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80150d8:	7af9      	ldrb	r1, [r7, #11]
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	f7f6 fa6e 	bl	800b5be <HAL_PCD_EP_Receive>
 80150e2:	4603      	mov	r3, r0
 80150e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150e6:	7dfb      	ldrb	r3, [r7, #23]
 80150e8:	4618      	mov	r0, r3
 80150ea:	f000 f8b7 	bl	801525c <USBD_Get_USB_Status>
 80150ee:	4603      	mov	r3, r0
 80150f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3718      	adds	r7, #24
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	460b      	mov	r3, r1
 8015106:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801510e:	78fa      	ldrb	r2, [r7, #3]
 8015110:	4611      	mov	r1, r2
 8015112:	4618      	mov	r0, r3
 8015114:	f7f6 fa90 	bl	800b638 <HAL_PCD_EP_GetRxCount>
 8015118:	4603      	mov	r3, r0
}
 801511a:	4618      	mov	r0, r3
 801511c:	3708      	adds	r7, #8
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
	...

08015124 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	460b      	mov	r3, r1
 801512e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015130:	78fb      	ldrb	r3, [r7, #3]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d002      	beq.n	801513c <HAL_PCDEx_LPM_Callback+0x18>
 8015136:	2b01      	cmp	r3, #1
 8015138:	d013      	beq.n	8015162 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801513a:	e023      	b.n	8015184 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	699b      	ldr	r3, [r3, #24]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d007      	beq.n	8015154 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015144:	f000 f83c 	bl	80151c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015148:	4b10      	ldr	r3, [pc, #64]	; (801518c <HAL_PCDEx_LPM_Callback+0x68>)
 801514a:	691b      	ldr	r3, [r3, #16]
 801514c:	4a0f      	ldr	r2, [pc, #60]	; (801518c <HAL_PCDEx_LPM_Callback+0x68>)
 801514e:	f023 0306 	bic.w	r3, r3, #6
 8015152:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801515a:	4618      	mov	r0, r3
 801515c:	f7fe fc66 	bl	8013a2c <USBD_LL_Resume>
    break;
 8015160:	e010      	b.n	8015184 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015168:	4618      	mov	r0, r3
 801516a:	f7fe fc49 	bl	8013a00 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	699b      	ldr	r3, [r3, #24]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d005      	beq.n	8015182 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015176:	4b05      	ldr	r3, [pc, #20]	; (801518c <HAL_PCDEx_LPM_Callback+0x68>)
 8015178:	691b      	ldr	r3, [r3, #16]
 801517a:	4a04      	ldr	r2, [pc, #16]	; (801518c <HAL_PCDEx_LPM_Callback+0x68>)
 801517c:	f043 0306 	orr.w	r3, r3, #6
 8015180:	6113      	str	r3, [r2, #16]
    break;
 8015182:	bf00      	nop
}
 8015184:	bf00      	nop
 8015186:	3708      	adds	r7, #8
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	e000ed00 	.word	0xe000ed00

08015190 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015190:	b480      	push	{r7}
 8015192:	b083      	sub	sp, #12
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015198:	4b03      	ldr	r3, [pc, #12]	; (80151a8 <USBD_static_malloc+0x18>)
}
 801519a:	4618      	mov	r0, r3
 801519c:	370c      	adds	r7, #12
 801519e:	46bd      	mov	sp, r7
 80151a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a4:	4770      	bx	lr
 80151a6:	bf00      	nop
 80151a8:	200022b0 	.word	0x200022b0

080151ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80151ac:	b480      	push	{r7}
 80151ae:	b083      	sub	sp, #12
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]

}
 80151b4:	bf00      	nop
 80151b6:	370c      	adds	r7, #12
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr

080151c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b094      	sub	sp, #80	; 0x50
 80151c4:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80151c6:	f107 0318 	add.w	r3, r7, #24
 80151ca:	2238      	movs	r2, #56	; 0x38
 80151cc:	2100      	movs	r1, #0
 80151ce:	4618      	mov	r0, r3
 80151d0:	f000 f8a8 	bl	8015324 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80151d4:	1d3b      	adds	r3, r7, #4
 80151d6:	2200      	movs	r2, #0
 80151d8:	601a      	str	r2, [r3, #0]
 80151da:	605a      	str	r2, [r3, #4]
 80151dc:	609a      	str	r2, [r3, #8]
 80151de:	60da      	str	r2, [r3, #12]
 80151e0:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80151e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80151e6:	f7f7 fc1d 	bl	800ca24 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80151ea:	2322      	movs	r3, #34	; 0x22
 80151ec:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80151ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80151f2:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80151f4:	2340      	movs	r3, #64	; 0x40
 80151f6:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80151f8:	2301      	movs	r3, #1
 80151fa:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80151fc:	2302      	movs	r3, #2
 80151fe:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8015200:	2302      	movs	r3, #2
 8015202:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8015204:	2301      	movs	r3, #1
 8015206:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 8015208:	2310      	movs	r3, #16
 801520a:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801520c:	2302      	movs	r3, #2
 801520e:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8015210:	2302      	movs	r3, #2
 8015212:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8015214:	2302      	movs	r3, #2
 8015216:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015218:	f107 0318 	add.w	r3, r7, #24
 801521c:	4618      	mov	r0, r3
 801521e:	f7f7 fca5 	bl	800cb6c <HAL_RCC_OscConfig>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	d001      	beq.n	801522c <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 8015228:	f7f0 f88e 	bl	8005348 <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801522c:	230f      	movs	r3, #15
 801522e:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015230:	2303      	movs	r3, #3
 8015232:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015234:	2300      	movs	r3, #0
 8015236:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8015238:	2300      	movs	r3, #0
 801523a:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801523c:	2300      	movs	r3, #0
 801523e:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8015240:	1d3b      	adds	r3, r7, #4
 8015242:	2103      	movs	r1, #3
 8015244:	4618      	mov	r0, r3
 8015246:	f7f7 ffa9 	bl	800d19c <HAL_RCC_ClockConfig>
 801524a:	4603      	mov	r3, r0
 801524c:	2b00      	cmp	r3, #0
 801524e:	d001      	beq.n	8015254 <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 8015250:	f7f0 f87a 	bl	8005348 <Error_Handler>
		  }

}
 8015254:	bf00      	nop
 8015256:	3750      	adds	r7, #80	; 0x50
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801525c:	b480      	push	{r7}
 801525e:	b085      	sub	sp, #20
 8015260:	af00      	add	r7, sp, #0
 8015262:	4603      	mov	r3, r0
 8015264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015266:	2300      	movs	r3, #0
 8015268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801526a:	79fb      	ldrb	r3, [r7, #7]
 801526c:	2b03      	cmp	r3, #3
 801526e:	d817      	bhi.n	80152a0 <USBD_Get_USB_Status+0x44>
 8015270:	a201      	add	r2, pc, #4	; (adr r2, 8015278 <USBD_Get_USB_Status+0x1c>)
 8015272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015276:	bf00      	nop
 8015278:	08015289 	.word	0x08015289
 801527c:	0801528f 	.word	0x0801528f
 8015280:	08015295 	.word	0x08015295
 8015284:	0801529b 	.word	0x0801529b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015288:	2300      	movs	r3, #0
 801528a:	73fb      	strb	r3, [r7, #15]
    break;
 801528c:	e00b      	b.n	80152a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801528e:	2303      	movs	r3, #3
 8015290:	73fb      	strb	r3, [r7, #15]
    break;
 8015292:	e008      	b.n	80152a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015294:	2301      	movs	r3, #1
 8015296:	73fb      	strb	r3, [r7, #15]
    break;
 8015298:	e005      	b.n	80152a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801529a:	2303      	movs	r3, #3
 801529c:	73fb      	strb	r3, [r7, #15]
    break;
 801529e:	e002      	b.n	80152a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80152a0:	2303      	movs	r3, #3
 80152a2:	73fb      	strb	r3, [r7, #15]
    break;
 80152a4:	bf00      	nop
  }
  return usb_status;
 80152a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3714      	adds	r7, #20
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr

080152b4 <__errno>:
 80152b4:	4b01      	ldr	r3, [pc, #4]	; (80152bc <__errno+0x8>)
 80152b6:	6818      	ldr	r0, [r3, #0]
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop
 80152bc:	20000184 	.word	0x20000184

080152c0 <__libc_init_array>:
 80152c0:	b570      	push	{r4, r5, r6, lr}
 80152c2:	4d0d      	ldr	r5, [pc, #52]	; (80152f8 <__libc_init_array+0x38>)
 80152c4:	4c0d      	ldr	r4, [pc, #52]	; (80152fc <__libc_init_array+0x3c>)
 80152c6:	1b64      	subs	r4, r4, r5
 80152c8:	10a4      	asrs	r4, r4, #2
 80152ca:	2600      	movs	r6, #0
 80152cc:	42a6      	cmp	r6, r4
 80152ce:	d109      	bne.n	80152e4 <__libc_init_array+0x24>
 80152d0:	4d0b      	ldr	r5, [pc, #44]	; (8015300 <__libc_init_array+0x40>)
 80152d2:	4c0c      	ldr	r4, [pc, #48]	; (8015304 <__libc_init_array+0x44>)
 80152d4:	f002 fdc4 	bl	8017e60 <_init>
 80152d8:	1b64      	subs	r4, r4, r5
 80152da:	10a4      	asrs	r4, r4, #2
 80152dc:	2600      	movs	r6, #0
 80152de:	42a6      	cmp	r6, r4
 80152e0:	d105      	bne.n	80152ee <__libc_init_array+0x2e>
 80152e2:	bd70      	pop	{r4, r5, r6, pc}
 80152e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80152e8:	4798      	blx	r3
 80152ea:	3601      	adds	r6, #1
 80152ec:	e7ee      	b.n	80152cc <__libc_init_array+0xc>
 80152ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80152f2:	4798      	blx	r3
 80152f4:	3601      	adds	r6, #1
 80152f6:	e7f2      	b.n	80152de <__libc_init_array+0x1e>
 80152f8:	08018854 	.word	0x08018854
 80152fc:	08018854 	.word	0x08018854
 8015300:	08018854 	.word	0x08018854
 8015304:	08018858 	.word	0x08018858

08015308 <memcpy>:
 8015308:	440a      	add	r2, r1
 801530a:	4291      	cmp	r1, r2
 801530c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015310:	d100      	bne.n	8015314 <memcpy+0xc>
 8015312:	4770      	bx	lr
 8015314:	b510      	push	{r4, lr}
 8015316:	f811 4b01 	ldrb.w	r4, [r1], #1
 801531a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801531e:	4291      	cmp	r1, r2
 8015320:	d1f9      	bne.n	8015316 <memcpy+0xe>
 8015322:	bd10      	pop	{r4, pc}

08015324 <memset>:
 8015324:	4402      	add	r2, r0
 8015326:	4603      	mov	r3, r0
 8015328:	4293      	cmp	r3, r2
 801532a:	d100      	bne.n	801532e <memset+0xa>
 801532c:	4770      	bx	lr
 801532e:	f803 1b01 	strb.w	r1, [r3], #1
 8015332:	e7f9      	b.n	8015328 <memset+0x4>

08015334 <__cvt>:
 8015334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015338:	ec55 4b10 	vmov	r4, r5, d0
 801533c:	2d00      	cmp	r5, #0
 801533e:	460e      	mov	r6, r1
 8015340:	4619      	mov	r1, r3
 8015342:	462b      	mov	r3, r5
 8015344:	bfbb      	ittet	lt
 8015346:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801534a:	461d      	movlt	r5, r3
 801534c:	2300      	movge	r3, #0
 801534e:	232d      	movlt	r3, #45	; 0x2d
 8015350:	700b      	strb	r3, [r1, #0]
 8015352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015354:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015358:	4691      	mov	r9, r2
 801535a:	f023 0820 	bic.w	r8, r3, #32
 801535e:	bfbc      	itt	lt
 8015360:	4622      	movlt	r2, r4
 8015362:	4614      	movlt	r4, r2
 8015364:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015368:	d005      	beq.n	8015376 <__cvt+0x42>
 801536a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801536e:	d100      	bne.n	8015372 <__cvt+0x3e>
 8015370:	3601      	adds	r6, #1
 8015372:	2102      	movs	r1, #2
 8015374:	e000      	b.n	8015378 <__cvt+0x44>
 8015376:	2103      	movs	r1, #3
 8015378:	ab03      	add	r3, sp, #12
 801537a:	9301      	str	r3, [sp, #4]
 801537c:	ab02      	add	r3, sp, #8
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	ec45 4b10 	vmov	d0, r4, r5
 8015384:	4653      	mov	r3, sl
 8015386:	4632      	mov	r2, r6
 8015388:	f000 fe1a 	bl	8015fc0 <_dtoa_r>
 801538c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015390:	4607      	mov	r7, r0
 8015392:	d102      	bne.n	801539a <__cvt+0x66>
 8015394:	f019 0f01 	tst.w	r9, #1
 8015398:	d022      	beq.n	80153e0 <__cvt+0xac>
 801539a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801539e:	eb07 0906 	add.w	r9, r7, r6
 80153a2:	d110      	bne.n	80153c6 <__cvt+0x92>
 80153a4:	783b      	ldrb	r3, [r7, #0]
 80153a6:	2b30      	cmp	r3, #48	; 0x30
 80153a8:	d10a      	bne.n	80153c0 <__cvt+0x8c>
 80153aa:	2200      	movs	r2, #0
 80153ac:	2300      	movs	r3, #0
 80153ae:	4620      	mov	r0, r4
 80153b0:	4629      	mov	r1, r5
 80153b2:	f7eb fbb1 	bl	8000b18 <__aeabi_dcmpeq>
 80153b6:	b918      	cbnz	r0, 80153c0 <__cvt+0x8c>
 80153b8:	f1c6 0601 	rsb	r6, r6, #1
 80153bc:	f8ca 6000 	str.w	r6, [sl]
 80153c0:	f8da 3000 	ldr.w	r3, [sl]
 80153c4:	4499      	add	r9, r3
 80153c6:	2200      	movs	r2, #0
 80153c8:	2300      	movs	r3, #0
 80153ca:	4620      	mov	r0, r4
 80153cc:	4629      	mov	r1, r5
 80153ce:	f7eb fba3 	bl	8000b18 <__aeabi_dcmpeq>
 80153d2:	b108      	cbz	r0, 80153d8 <__cvt+0xa4>
 80153d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80153d8:	2230      	movs	r2, #48	; 0x30
 80153da:	9b03      	ldr	r3, [sp, #12]
 80153dc:	454b      	cmp	r3, r9
 80153de:	d307      	bcc.n	80153f0 <__cvt+0xbc>
 80153e0:	9b03      	ldr	r3, [sp, #12]
 80153e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153e4:	1bdb      	subs	r3, r3, r7
 80153e6:	4638      	mov	r0, r7
 80153e8:	6013      	str	r3, [r2, #0]
 80153ea:	b004      	add	sp, #16
 80153ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153f0:	1c59      	adds	r1, r3, #1
 80153f2:	9103      	str	r1, [sp, #12]
 80153f4:	701a      	strb	r2, [r3, #0]
 80153f6:	e7f0      	b.n	80153da <__cvt+0xa6>

080153f8 <__exponent>:
 80153f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153fa:	4603      	mov	r3, r0
 80153fc:	2900      	cmp	r1, #0
 80153fe:	bfb8      	it	lt
 8015400:	4249      	neglt	r1, r1
 8015402:	f803 2b02 	strb.w	r2, [r3], #2
 8015406:	bfb4      	ite	lt
 8015408:	222d      	movlt	r2, #45	; 0x2d
 801540a:	222b      	movge	r2, #43	; 0x2b
 801540c:	2909      	cmp	r1, #9
 801540e:	7042      	strb	r2, [r0, #1]
 8015410:	dd2a      	ble.n	8015468 <__exponent+0x70>
 8015412:	f10d 0407 	add.w	r4, sp, #7
 8015416:	46a4      	mov	ip, r4
 8015418:	270a      	movs	r7, #10
 801541a:	46a6      	mov	lr, r4
 801541c:	460a      	mov	r2, r1
 801541e:	fb91 f6f7 	sdiv	r6, r1, r7
 8015422:	fb07 1516 	mls	r5, r7, r6, r1
 8015426:	3530      	adds	r5, #48	; 0x30
 8015428:	2a63      	cmp	r2, #99	; 0x63
 801542a:	f104 34ff 	add.w	r4, r4, #4294967295
 801542e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015432:	4631      	mov	r1, r6
 8015434:	dcf1      	bgt.n	801541a <__exponent+0x22>
 8015436:	3130      	adds	r1, #48	; 0x30
 8015438:	f1ae 0502 	sub.w	r5, lr, #2
 801543c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015440:	1c44      	adds	r4, r0, #1
 8015442:	4629      	mov	r1, r5
 8015444:	4561      	cmp	r1, ip
 8015446:	d30a      	bcc.n	801545e <__exponent+0x66>
 8015448:	f10d 0209 	add.w	r2, sp, #9
 801544c:	eba2 020e 	sub.w	r2, r2, lr
 8015450:	4565      	cmp	r5, ip
 8015452:	bf88      	it	hi
 8015454:	2200      	movhi	r2, #0
 8015456:	4413      	add	r3, r2
 8015458:	1a18      	subs	r0, r3, r0
 801545a:	b003      	add	sp, #12
 801545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801545e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015462:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015466:	e7ed      	b.n	8015444 <__exponent+0x4c>
 8015468:	2330      	movs	r3, #48	; 0x30
 801546a:	3130      	adds	r1, #48	; 0x30
 801546c:	7083      	strb	r3, [r0, #2]
 801546e:	70c1      	strb	r1, [r0, #3]
 8015470:	1d03      	adds	r3, r0, #4
 8015472:	e7f1      	b.n	8015458 <__exponent+0x60>

08015474 <_printf_float>:
 8015474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015478:	ed2d 8b02 	vpush	{d8}
 801547c:	b08d      	sub	sp, #52	; 0x34
 801547e:	460c      	mov	r4, r1
 8015480:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015484:	4616      	mov	r6, r2
 8015486:	461f      	mov	r7, r3
 8015488:	4605      	mov	r5, r0
 801548a:	f001 fd3f 	bl	8016f0c <_localeconv_r>
 801548e:	f8d0 a000 	ldr.w	sl, [r0]
 8015492:	4650      	mov	r0, sl
 8015494:	f7ea fec4 	bl	8000220 <strlen>
 8015498:	2300      	movs	r3, #0
 801549a:	930a      	str	r3, [sp, #40]	; 0x28
 801549c:	6823      	ldr	r3, [r4, #0]
 801549e:	9305      	str	r3, [sp, #20]
 80154a0:	f8d8 3000 	ldr.w	r3, [r8]
 80154a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80154a8:	3307      	adds	r3, #7
 80154aa:	f023 0307 	bic.w	r3, r3, #7
 80154ae:	f103 0208 	add.w	r2, r3, #8
 80154b2:	f8c8 2000 	str.w	r2, [r8]
 80154b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80154be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80154c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80154c6:	9307      	str	r3, [sp, #28]
 80154c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80154cc:	ee08 0a10 	vmov	s16, r0
 80154d0:	4b9f      	ldr	r3, [pc, #636]	; (8015750 <_printf_float+0x2dc>)
 80154d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154d6:	f04f 32ff 	mov.w	r2, #4294967295
 80154da:	f7eb fb4f 	bl	8000b7c <__aeabi_dcmpun>
 80154de:	bb88      	cbnz	r0, 8015544 <_printf_float+0xd0>
 80154e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154e4:	4b9a      	ldr	r3, [pc, #616]	; (8015750 <_printf_float+0x2dc>)
 80154e6:	f04f 32ff 	mov.w	r2, #4294967295
 80154ea:	f7eb fb29 	bl	8000b40 <__aeabi_dcmple>
 80154ee:	bb48      	cbnz	r0, 8015544 <_printf_float+0xd0>
 80154f0:	2200      	movs	r2, #0
 80154f2:	2300      	movs	r3, #0
 80154f4:	4640      	mov	r0, r8
 80154f6:	4649      	mov	r1, r9
 80154f8:	f7eb fb18 	bl	8000b2c <__aeabi_dcmplt>
 80154fc:	b110      	cbz	r0, 8015504 <_printf_float+0x90>
 80154fe:	232d      	movs	r3, #45	; 0x2d
 8015500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015504:	4b93      	ldr	r3, [pc, #588]	; (8015754 <_printf_float+0x2e0>)
 8015506:	4894      	ldr	r0, [pc, #592]	; (8015758 <_printf_float+0x2e4>)
 8015508:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801550c:	bf94      	ite	ls
 801550e:	4698      	movls	r8, r3
 8015510:	4680      	movhi	r8, r0
 8015512:	2303      	movs	r3, #3
 8015514:	6123      	str	r3, [r4, #16]
 8015516:	9b05      	ldr	r3, [sp, #20]
 8015518:	f023 0204 	bic.w	r2, r3, #4
 801551c:	6022      	str	r2, [r4, #0]
 801551e:	f04f 0900 	mov.w	r9, #0
 8015522:	9700      	str	r7, [sp, #0]
 8015524:	4633      	mov	r3, r6
 8015526:	aa0b      	add	r2, sp, #44	; 0x2c
 8015528:	4621      	mov	r1, r4
 801552a:	4628      	mov	r0, r5
 801552c:	f000 f9d8 	bl	80158e0 <_printf_common>
 8015530:	3001      	adds	r0, #1
 8015532:	f040 8090 	bne.w	8015656 <_printf_float+0x1e2>
 8015536:	f04f 30ff 	mov.w	r0, #4294967295
 801553a:	b00d      	add	sp, #52	; 0x34
 801553c:	ecbd 8b02 	vpop	{d8}
 8015540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015544:	4642      	mov	r2, r8
 8015546:	464b      	mov	r3, r9
 8015548:	4640      	mov	r0, r8
 801554a:	4649      	mov	r1, r9
 801554c:	f7eb fb16 	bl	8000b7c <__aeabi_dcmpun>
 8015550:	b140      	cbz	r0, 8015564 <_printf_float+0xf0>
 8015552:	464b      	mov	r3, r9
 8015554:	2b00      	cmp	r3, #0
 8015556:	bfbc      	itt	lt
 8015558:	232d      	movlt	r3, #45	; 0x2d
 801555a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801555e:	487f      	ldr	r0, [pc, #508]	; (801575c <_printf_float+0x2e8>)
 8015560:	4b7f      	ldr	r3, [pc, #508]	; (8015760 <_printf_float+0x2ec>)
 8015562:	e7d1      	b.n	8015508 <_printf_float+0x94>
 8015564:	6863      	ldr	r3, [r4, #4]
 8015566:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801556a:	9206      	str	r2, [sp, #24]
 801556c:	1c5a      	adds	r2, r3, #1
 801556e:	d13f      	bne.n	80155f0 <_printf_float+0x17c>
 8015570:	2306      	movs	r3, #6
 8015572:	6063      	str	r3, [r4, #4]
 8015574:	9b05      	ldr	r3, [sp, #20]
 8015576:	6861      	ldr	r1, [r4, #4]
 8015578:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801557c:	2300      	movs	r3, #0
 801557e:	9303      	str	r3, [sp, #12]
 8015580:	ab0a      	add	r3, sp, #40	; 0x28
 8015582:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015586:	ab09      	add	r3, sp, #36	; 0x24
 8015588:	ec49 8b10 	vmov	d0, r8, r9
 801558c:	9300      	str	r3, [sp, #0]
 801558e:	6022      	str	r2, [r4, #0]
 8015590:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015594:	4628      	mov	r0, r5
 8015596:	f7ff fecd 	bl	8015334 <__cvt>
 801559a:	9b06      	ldr	r3, [sp, #24]
 801559c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801559e:	2b47      	cmp	r3, #71	; 0x47
 80155a0:	4680      	mov	r8, r0
 80155a2:	d108      	bne.n	80155b6 <_printf_float+0x142>
 80155a4:	1cc8      	adds	r0, r1, #3
 80155a6:	db02      	blt.n	80155ae <_printf_float+0x13a>
 80155a8:	6863      	ldr	r3, [r4, #4]
 80155aa:	4299      	cmp	r1, r3
 80155ac:	dd41      	ble.n	8015632 <_printf_float+0x1be>
 80155ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80155b2:	fa5f fb8b 	uxtb.w	fp, fp
 80155b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80155ba:	d820      	bhi.n	80155fe <_printf_float+0x18a>
 80155bc:	3901      	subs	r1, #1
 80155be:	465a      	mov	r2, fp
 80155c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80155c4:	9109      	str	r1, [sp, #36]	; 0x24
 80155c6:	f7ff ff17 	bl	80153f8 <__exponent>
 80155ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155cc:	1813      	adds	r3, r2, r0
 80155ce:	2a01      	cmp	r2, #1
 80155d0:	4681      	mov	r9, r0
 80155d2:	6123      	str	r3, [r4, #16]
 80155d4:	dc02      	bgt.n	80155dc <_printf_float+0x168>
 80155d6:	6822      	ldr	r2, [r4, #0]
 80155d8:	07d2      	lsls	r2, r2, #31
 80155da:	d501      	bpl.n	80155e0 <_printf_float+0x16c>
 80155dc:	3301      	adds	r3, #1
 80155de:	6123      	str	r3, [r4, #16]
 80155e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d09c      	beq.n	8015522 <_printf_float+0xae>
 80155e8:	232d      	movs	r3, #45	; 0x2d
 80155ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155ee:	e798      	b.n	8015522 <_printf_float+0xae>
 80155f0:	9a06      	ldr	r2, [sp, #24]
 80155f2:	2a47      	cmp	r2, #71	; 0x47
 80155f4:	d1be      	bne.n	8015574 <_printf_float+0x100>
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d1bc      	bne.n	8015574 <_printf_float+0x100>
 80155fa:	2301      	movs	r3, #1
 80155fc:	e7b9      	b.n	8015572 <_printf_float+0xfe>
 80155fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015602:	d118      	bne.n	8015636 <_printf_float+0x1c2>
 8015604:	2900      	cmp	r1, #0
 8015606:	6863      	ldr	r3, [r4, #4]
 8015608:	dd0b      	ble.n	8015622 <_printf_float+0x1ae>
 801560a:	6121      	str	r1, [r4, #16]
 801560c:	b913      	cbnz	r3, 8015614 <_printf_float+0x1a0>
 801560e:	6822      	ldr	r2, [r4, #0]
 8015610:	07d0      	lsls	r0, r2, #31
 8015612:	d502      	bpl.n	801561a <_printf_float+0x1a6>
 8015614:	3301      	adds	r3, #1
 8015616:	440b      	add	r3, r1
 8015618:	6123      	str	r3, [r4, #16]
 801561a:	65a1      	str	r1, [r4, #88]	; 0x58
 801561c:	f04f 0900 	mov.w	r9, #0
 8015620:	e7de      	b.n	80155e0 <_printf_float+0x16c>
 8015622:	b913      	cbnz	r3, 801562a <_printf_float+0x1b6>
 8015624:	6822      	ldr	r2, [r4, #0]
 8015626:	07d2      	lsls	r2, r2, #31
 8015628:	d501      	bpl.n	801562e <_printf_float+0x1ba>
 801562a:	3302      	adds	r3, #2
 801562c:	e7f4      	b.n	8015618 <_printf_float+0x1a4>
 801562e:	2301      	movs	r3, #1
 8015630:	e7f2      	b.n	8015618 <_printf_float+0x1a4>
 8015632:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015638:	4299      	cmp	r1, r3
 801563a:	db05      	blt.n	8015648 <_printf_float+0x1d4>
 801563c:	6823      	ldr	r3, [r4, #0]
 801563e:	6121      	str	r1, [r4, #16]
 8015640:	07d8      	lsls	r0, r3, #31
 8015642:	d5ea      	bpl.n	801561a <_printf_float+0x1a6>
 8015644:	1c4b      	adds	r3, r1, #1
 8015646:	e7e7      	b.n	8015618 <_printf_float+0x1a4>
 8015648:	2900      	cmp	r1, #0
 801564a:	bfd4      	ite	le
 801564c:	f1c1 0202 	rsble	r2, r1, #2
 8015650:	2201      	movgt	r2, #1
 8015652:	4413      	add	r3, r2
 8015654:	e7e0      	b.n	8015618 <_printf_float+0x1a4>
 8015656:	6823      	ldr	r3, [r4, #0]
 8015658:	055a      	lsls	r2, r3, #21
 801565a:	d407      	bmi.n	801566c <_printf_float+0x1f8>
 801565c:	6923      	ldr	r3, [r4, #16]
 801565e:	4642      	mov	r2, r8
 8015660:	4631      	mov	r1, r6
 8015662:	4628      	mov	r0, r5
 8015664:	47b8      	blx	r7
 8015666:	3001      	adds	r0, #1
 8015668:	d12c      	bne.n	80156c4 <_printf_float+0x250>
 801566a:	e764      	b.n	8015536 <_printf_float+0xc2>
 801566c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015670:	f240 80e0 	bls.w	8015834 <_printf_float+0x3c0>
 8015674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015678:	2200      	movs	r2, #0
 801567a:	2300      	movs	r3, #0
 801567c:	f7eb fa4c 	bl	8000b18 <__aeabi_dcmpeq>
 8015680:	2800      	cmp	r0, #0
 8015682:	d034      	beq.n	80156ee <_printf_float+0x27a>
 8015684:	4a37      	ldr	r2, [pc, #220]	; (8015764 <_printf_float+0x2f0>)
 8015686:	2301      	movs	r3, #1
 8015688:	4631      	mov	r1, r6
 801568a:	4628      	mov	r0, r5
 801568c:	47b8      	blx	r7
 801568e:	3001      	adds	r0, #1
 8015690:	f43f af51 	beq.w	8015536 <_printf_float+0xc2>
 8015694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015698:	429a      	cmp	r2, r3
 801569a:	db02      	blt.n	80156a2 <_printf_float+0x22e>
 801569c:	6823      	ldr	r3, [r4, #0]
 801569e:	07d8      	lsls	r0, r3, #31
 80156a0:	d510      	bpl.n	80156c4 <_printf_float+0x250>
 80156a2:	ee18 3a10 	vmov	r3, s16
 80156a6:	4652      	mov	r2, sl
 80156a8:	4631      	mov	r1, r6
 80156aa:	4628      	mov	r0, r5
 80156ac:	47b8      	blx	r7
 80156ae:	3001      	adds	r0, #1
 80156b0:	f43f af41 	beq.w	8015536 <_printf_float+0xc2>
 80156b4:	f04f 0800 	mov.w	r8, #0
 80156b8:	f104 091a 	add.w	r9, r4, #26
 80156bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156be:	3b01      	subs	r3, #1
 80156c0:	4543      	cmp	r3, r8
 80156c2:	dc09      	bgt.n	80156d8 <_printf_float+0x264>
 80156c4:	6823      	ldr	r3, [r4, #0]
 80156c6:	079b      	lsls	r3, r3, #30
 80156c8:	f100 8105 	bmi.w	80158d6 <_printf_float+0x462>
 80156cc:	68e0      	ldr	r0, [r4, #12]
 80156ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156d0:	4298      	cmp	r0, r3
 80156d2:	bfb8      	it	lt
 80156d4:	4618      	movlt	r0, r3
 80156d6:	e730      	b.n	801553a <_printf_float+0xc6>
 80156d8:	2301      	movs	r3, #1
 80156da:	464a      	mov	r2, r9
 80156dc:	4631      	mov	r1, r6
 80156de:	4628      	mov	r0, r5
 80156e0:	47b8      	blx	r7
 80156e2:	3001      	adds	r0, #1
 80156e4:	f43f af27 	beq.w	8015536 <_printf_float+0xc2>
 80156e8:	f108 0801 	add.w	r8, r8, #1
 80156ec:	e7e6      	b.n	80156bc <_printf_float+0x248>
 80156ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	dc39      	bgt.n	8015768 <_printf_float+0x2f4>
 80156f4:	4a1b      	ldr	r2, [pc, #108]	; (8015764 <_printf_float+0x2f0>)
 80156f6:	2301      	movs	r3, #1
 80156f8:	4631      	mov	r1, r6
 80156fa:	4628      	mov	r0, r5
 80156fc:	47b8      	blx	r7
 80156fe:	3001      	adds	r0, #1
 8015700:	f43f af19 	beq.w	8015536 <_printf_float+0xc2>
 8015704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015708:	4313      	orrs	r3, r2
 801570a:	d102      	bne.n	8015712 <_printf_float+0x29e>
 801570c:	6823      	ldr	r3, [r4, #0]
 801570e:	07d9      	lsls	r1, r3, #31
 8015710:	d5d8      	bpl.n	80156c4 <_printf_float+0x250>
 8015712:	ee18 3a10 	vmov	r3, s16
 8015716:	4652      	mov	r2, sl
 8015718:	4631      	mov	r1, r6
 801571a:	4628      	mov	r0, r5
 801571c:	47b8      	blx	r7
 801571e:	3001      	adds	r0, #1
 8015720:	f43f af09 	beq.w	8015536 <_printf_float+0xc2>
 8015724:	f04f 0900 	mov.w	r9, #0
 8015728:	f104 0a1a 	add.w	sl, r4, #26
 801572c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801572e:	425b      	negs	r3, r3
 8015730:	454b      	cmp	r3, r9
 8015732:	dc01      	bgt.n	8015738 <_printf_float+0x2c4>
 8015734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015736:	e792      	b.n	801565e <_printf_float+0x1ea>
 8015738:	2301      	movs	r3, #1
 801573a:	4652      	mov	r2, sl
 801573c:	4631      	mov	r1, r6
 801573e:	4628      	mov	r0, r5
 8015740:	47b8      	blx	r7
 8015742:	3001      	adds	r0, #1
 8015744:	f43f aef7 	beq.w	8015536 <_printf_float+0xc2>
 8015748:	f109 0901 	add.w	r9, r9, #1
 801574c:	e7ee      	b.n	801572c <_printf_float+0x2b8>
 801574e:	bf00      	nop
 8015750:	7fefffff 	.word	0x7fefffff
 8015754:	08018478 	.word	0x08018478
 8015758:	0801847c 	.word	0x0801847c
 801575c:	08018484 	.word	0x08018484
 8015760:	08018480 	.word	0x08018480
 8015764:	08018488 	.word	0x08018488
 8015768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801576a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801576c:	429a      	cmp	r2, r3
 801576e:	bfa8      	it	ge
 8015770:	461a      	movge	r2, r3
 8015772:	2a00      	cmp	r2, #0
 8015774:	4691      	mov	r9, r2
 8015776:	dc37      	bgt.n	80157e8 <_printf_float+0x374>
 8015778:	f04f 0b00 	mov.w	fp, #0
 801577c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015780:	f104 021a 	add.w	r2, r4, #26
 8015784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015786:	9305      	str	r3, [sp, #20]
 8015788:	eba3 0309 	sub.w	r3, r3, r9
 801578c:	455b      	cmp	r3, fp
 801578e:	dc33      	bgt.n	80157f8 <_printf_float+0x384>
 8015790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015794:	429a      	cmp	r2, r3
 8015796:	db3b      	blt.n	8015810 <_printf_float+0x39c>
 8015798:	6823      	ldr	r3, [r4, #0]
 801579a:	07da      	lsls	r2, r3, #31
 801579c:	d438      	bmi.n	8015810 <_printf_float+0x39c>
 801579e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157a0:	9a05      	ldr	r2, [sp, #20]
 80157a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157a4:	1a9a      	subs	r2, r3, r2
 80157a6:	eba3 0901 	sub.w	r9, r3, r1
 80157aa:	4591      	cmp	r9, r2
 80157ac:	bfa8      	it	ge
 80157ae:	4691      	movge	r9, r2
 80157b0:	f1b9 0f00 	cmp.w	r9, #0
 80157b4:	dc35      	bgt.n	8015822 <_printf_float+0x3ae>
 80157b6:	f04f 0800 	mov.w	r8, #0
 80157ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80157be:	f104 0a1a 	add.w	sl, r4, #26
 80157c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157c6:	1a9b      	subs	r3, r3, r2
 80157c8:	eba3 0309 	sub.w	r3, r3, r9
 80157cc:	4543      	cmp	r3, r8
 80157ce:	f77f af79 	ble.w	80156c4 <_printf_float+0x250>
 80157d2:	2301      	movs	r3, #1
 80157d4:	4652      	mov	r2, sl
 80157d6:	4631      	mov	r1, r6
 80157d8:	4628      	mov	r0, r5
 80157da:	47b8      	blx	r7
 80157dc:	3001      	adds	r0, #1
 80157de:	f43f aeaa 	beq.w	8015536 <_printf_float+0xc2>
 80157e2:	f108 0801 	add.w	r8, r8, #1
 80157e6:	e7ec      	b.n	80157c2 <_printf_float+0x34e>
 80157e8:	4613      	mov	r3, r2
 80157ea:	4631      	mov	r1, r6
 80157ec:	4642      	mov	r2, r8
 80157ee:	4628      	mov	r0, r5
 80157f0:	47b8      	blx	r7
 80157f2:	3001      	adds	r0, #1
 80157f4:	d1c0      	bne.n	8015778 <_printf_float+0x304>
 80157f6:	e69e      	b.n	8015536 <_printf_float+0xc2>
 80157f8:	2301      	movs	r3, #1
 80157fa:	4631      	mov	r1, r6
 80157fc:	4628      	mov	r0, r5
 80157fe:	9205      	str	r2, [sp, #20]
 8015800:	47b8      	blx	r7
 8015802:	3001      	adds	r0, #1
 8015804:	f43f ae97 	beq.w	8015536 <_printf_float+0xc2>
 8015808:	9a05      	ldr	r2, [sp, #20]
 801580a:	f10b 0b01 	add.w	fp, fp, #1
 801580e:	e7b9      	b.n	8015784 <_printf_float+0x310>
 8015810:	ee18 3a10 	vmov	r3, s16
 8015814:	4652      	mov	r2, sl
 8015816:	4631      	mov	r1, r6
 8015818:	4628      	mov	r0, r5
 801581a:	47b8      	blx	r7
 801581c:	3001      	adds	r0, #1
 801581e:	d1be      	bne.n	801579e <_printf_float+0x32a>
 8015820:	e689      	b.n	8015536 <_printf_float+0xc2>
 8015822:	9a05      	ldr	r2, [sp, #20]
 8015824:	464b      	mov	r3, r9
 8015826:	4442      	add	r2, r8
 8015828:	4631      	mov	r1, r6
 801582a:	4628      	mov	r0, r5
 801582c:	47b8      	blx	r7
 801582e:	3001      	adds	r0, #1
 8015830:	d1c1      	bne.n	80157b6 <_printf_float+0x342>
 8015832:	e680      	b.n	8015536 <_printf_float+0xc2>
 8015834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015836:	2a01      	cmp	r2, #1
 8015838:	dc01      	bgt.n	801583e <_printf_float+0x3ca>
 801583a:	07db      	lsls	r3, r3, #31
 801583c:	d538      	bpl.n	80158b0 <_printf_float+0x43c>
 801583e:	2301      	movs	r3, #1
 8015840:	4642      	mov	r2, r8
 8015842:	4631      	mov	r1, r6
 8015844:	4628      	mov	r0, r5
 8015846:	47b8      	blx	r7
 8015848:	3001      	adds	r0, #1
 801584a:	f43f ae74 	beq.w	8015536 <_printf_float+0xc2>
 801584e:	ee18 3a10 	vmov	r3, s16
 8015852:	4652      	mov	r2, sl
 8015854:	4631      	mov	r1, r6
 8015856:	4628      	mov	r0, r5
 8015858:	47b8      	blx	r7
 801585a:	3001      	adds	r0, #1
 801585c:	f43f ae6b 	beq.w	8015536 <_printf_float+0xc2>
 8015860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015864:	2200      	movs	r2, #0
 8015866:	2300      	movs	r3, #0
 8015868:	f7eb f956 	bl	8000b18 <__aeabi_dcmpeq>
 801586c:	b9d8      	cbnz	r0, 80158a6 <_printf_float+0x432>
 801586e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015870:	f108 0201 	add.w	r2, r8, #1
 8015874:	3b01      	subs	r3, #1
 8015876:	4631      	mov	r1, r6
 8015878:	4628      	mov	r0, r5
 801587a:	47b8      	blx	r7
 801587c:	3001      	adds	r0, #1
 801587e:	d10e      	bne.n	801589e <_printf_float+0x42a>
 8015880:	e659      	b.n	8015536 <_printf_float+0xc2>
 8015882:	2301      	movs	r3, #1
 8015884:	4652      	mov	r2, sl
 8015886:	4631      	mov	r1, r6
 8015888:	4628      	mov	r0, r5
 801588a:	47b8      	blx	r7
 801588c:	3001      	adds	r0, #1
 801588e:	f43f ae52 	beq.w	8015536 <_printf_float+0xc2>
 8015892:	f108 0801 	add.w	r8, r8, #1
 8015896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015898:	3b01      	subs	r3, #1
 801589a:	4543      	cmp	r3, r8
 801589c:	dcf1      	bgt.n	8015882 <_printf_float+0x40e>
 801589e:	464b      	mov	r3, r9
 80158a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80158a4:	e6dc      	b.n	8015660 <_printf_float+0x1ec>
 80158a6:	f04f 0800 	mov.w	r8, #0
 80158aa:	f104 0a1a 	add.w	sl, r4, #26
 80158ae:	e7f2      	b.n	8015896 <_printf_float+0x422>
 80158b0:	2301      	movs	r3, #1
 80158b2:	4642      	mov	r2, r8
 80158b4:	e7df      	b.n	8015876 <_printf_float+0x402>
 80158b6:	2301      	movs	r3, #1
 80158b8:	464a      	mov	r2, r9
 80158ba:	4631      	mov	r1, r6
 80158bc:	4628      	mov	r0, r5
 80158be:	47b8      	blx	r7
 80158c0:	3001      	adds	r0, #1
 80158c2:	f43f ae38 	beq.w	8015536 <_printf_float+0xc2>
 80158c6:	f108 0801 	add.w	r8, r8, #1
 80158ca:	68e3      	ldr	r3, [r4, #12]
 80158cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158ce:	1a5b      	subs	r3, r3, r1
 80158d0:	4543      	cmp	r3, r8
 80158d2:	dcf0      	bgt.n	80158b6 <_printf_float+0x442>
 80158d4:	e6fa      	b.n	80156cc <_printf_float+0x258>
 80158d6:	f04f 0800 	mov.w	r8, #0
 80158da:	f104 0919 	add.w	r9, r4, #25
 80158de:	e7f4      	b.n	80158ca <_printf_float+0x456>

080158e0 <_printf_common>:
 80158e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158e4:	4616      	mov	r6, r2
 80158e6:	4699      	mov	r9, r3
 80158e8:	688a      	ldr	r2, [r1, #8]
 80158ea:	690b      	ldr	r3, [r1, #16]
 80158ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80158f0:	4293      	cmp	r3, r2
 80158f2:	bfb8      	it	lt
 80158f4:	4613      	movlt	r3, r2
 80158f6:	6033      	str	r3, [r6, #0]
 80158f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80158fc:	4607      	mov	r7, r0
 80158fe:	460c      	mov	r4, r1
 8015900:	b10a      	cbz	r2, 8015906 <_printf_common+0x26>
 8015902:	3301      	adds	r3, #1
 8015904:	6033      	str	r3, [r6, #0]
 8015906:	6823      	ldr	r3, [r4, #0]
 8015908:	0699      	lsls	r1, r3, #26
 801590a:	bf42      	ittt	mi
 801590c:	6833      	ldrmi	r3, [r6, #0]
 801590e:	3302      	addmi	r3, #2
 8015910:	6033      	strmi	r3, [r6, #0]
 8015912:	6825      	ldr	r5, [r4, #0]
 8015914:	f015 0506 	ands.w	r5, r5, #6
 8015918:	d106      	bne.n	8015928 <_printf_common+0x48>
 801591a:	f104 0a19 	add.w	sl, r4, #25
 801591e:	68e3      	ldr	r3, [r4, #12]
 8015920:	6832      	ldr	r2, [r6, #0]
 8015922:	1a9b      	subs	r3, r3, r2
 8015924:	42ab      	cmp	r3, r5
 8015926:	dc26      	bgt.n	8015976 <_printf_common+0x96>
 8015928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801592c:	1e13      	subs	r3, r2, #0
 801592e:	6822      	ldr	r2, [r4, #0]
 8015930:	bf18      	it	ne
 8015932:	2301      	movne	r3, #1
 8015934:	0692      	lsls	r2, r2, #26
 8015936:	d42b      	bmi.n	8015990 <_printf_common+0xb0>
 8015938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801593c:	4649      	mov	r1, r9
 801593e:	4638      	mov	r0, r7
 8015940:	47c0      	blx	r8
 8015942:	3001      	adds	r0, #1
 8015944:	d01e      	beq.n	8015984 <_printf_common+0xa4>
 8015946:	6823      	ldr	r3, [r4, #0]
 8015948:	68e5      	ldr	r5, [r4, #12]
 801594a:	6832      	ldr	r2, [r6, #0]
 801594c:	f003 0306 	and.w	r3, r3, #6
 8015950:	2b04      	cmp	r3, #4
 8015952:	bf08      	it	eq
 8015954:	1aad      	subeq	r5, r5, r2
 8015956:	68a3      	ldr	r3, [r4, #8]
 8015958:	6922      	ldr	r2, [r4, #16]
 801595a:	bf0c      	ite	eq
 801595c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015960:	2500      	movne	r5, #0
 8015962:	4293      	cmp	r3, r2
 8015964:	bfc4      	itt	gt
 8015966:	1a9b      	subgt	r3, r3, r2
 8015968:	18ed      	addgt	r5, r5, r3
 801596a:	2600      	movs	r6, #0
 801596c:	341a      	adds	r4, #26
 801596e:	42b5      	cmp	r5, r6
 8015970:	d11a      	bne.n	80159a8 <_printf_common+0xc8>
 8015972:	2000      	movs	r0, #0
 8015974:	e008      	b.n	8015988 <_printf_common+0xa8>
 8015976:	2301      	movs	r3, #1
 8015978:	4652      	mov	r2, sl
 801597a:	4649      	mov	r1, r9
 801597c:	4638      	mov	r0, r7
 801597e:	47c0      	blx	r8
 8015980:	3001      	adds	r0, #1
 8015982:	d103      	bne.n	801598c <_printf_common+0xac>
 8015984:	f04f 30ff 	mov.w	r0, #4294967295
 8015988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801598c:	3501      	adds	r5, #1
 801598e:	e7c6      	b.n	801591e <_printf_common+0x3e>
 8015990:	18e1      	adds	r1, r4, r3
 8015992:	1c5a      	adds	r2, r3, #1
 8015994:	2030      	movs	r0, #48	; 0x30
 8015996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801599a:	4422      	add	r2, r4
 801599c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80159a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80159a4:	3302      	adds	r3, #2
 80159a6:	e7c7      	b.n	8015938 <_printf_common+0x58>
 80159a8:	2301      	movs	r3, #1
 80159aa:	4622      	mov	r2, r4
 80159ac:	4649      	mov	r1, r9
 80159ae:	4638      	mov	r0, r7
 80159b0:	47c0      	blx	r8
 80159b2:	3001      	adds	r0, #1
 80159b4:	d0e6      	beq.n	8015984 <_printf_common+0xa4>
 80159b6:	3601      	adds	r6, #1
 80159b8:	e7d9      	b.n	801596e <_printf_common+0x8e>
	...

080159bc <_printf_i>:
 80159bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159c0:	7e0f      	ldrb	r7, [r1, #24]
 80159c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80159c4:	2f78      	cmp	r7, #120	; 0x78
 80159c6:	4691      	mov	r9, r2
 80159c8:	4680      	mov	r8, r0
 80159ca:	460c      	mov	r4, r1
 80159cc:	469a      	mov	sl, r3
 80159ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80159d2:	d807      	bhi.n	80159e4 <_printf_i+0x28>
 80159d4:	2f62      	cmp	r7, #98	; 0x62
 80159d6:	d80a      	bhi.n	80159ee <_printf_i+0x32>
 80159d8:	2f00      	cmp	r7, #0
 80159da:	f000 80d8 	beq.w	8015b8e <_printf_i+0x1d2>
 80159de:	2f58      	cmp	r7, #88	; 0x58
 80159e0:	f000 80a3 	beq.w	8015b2a <_printf_i+0x16e>
 80159e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80159ec:	e03a      	b.n	8015a64 <_printf_i+0xa8>
 80159ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80159f2:	2b15      	cmp	r3, #21
 80159f4:	d8f6      	bhi.n	80159e4 <_printf_i+0x28>
 80159f6:	a101      	add	r1, pc, #4	; (adr r1, 80159fc <_printf_i+0x40>)
 80159f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80159fc:	08015a55 	.word	0x08015a55
 8015a00:	08015a69 	.word	0x08015a69
 8015a04:	080159e5 	.word	0x080159e5
 8015a08:	080159e5 	.word	0x080159e5
 8015a0c:	080159e5 	.word	0x080159e5
 8015a10:	080159e5 	.word	0x080159e5
 8015a14:	08015a69 	.word	0x08015a69
 8015a18:	080159e5 	.word	0x080159e5
 8015a1c:	080159e5 	.word	0x080159e5
 8015a20:	080159e5 	.word	0x080159e5
 8015a24:	080159e5 	.word	0x080159e5
 8015a28:	08015b75 	.word	0x08015b75
 8015a2c:	08015a99 	.word	0x08015a99
 8015a30:	08015b57 	.word	0x08015b57
 8015a34:	080159e5 	.word	0x080159e5
 8015a38:	080159e5 	.word	0x080159e5
 8015a3c:	08015b97 	.word	0x08015b97
 8015a40:	080159e5 	.word	0x080159e5
 8015a44:	08015a99 	.word	0x08015a99
 8015a48:	080159e5 	.word	0x080159e5
 8015a4c:	080159e5 	.word	0x080159e5
 8015a50:	08015b5f 	.word	0x08015b5f
 8015a54:	682b      	ldr	r3, [r5, #0]
 8015a56:	1d1a      	adds	r2, r3, #4
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	602a      	str	r2, [r5, #0]
 8015a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a64:	2301      	movs	r3, #1
 8015a66:	e0a3      	b.n	8015bb0 <_printf_i+0x1f4>
 8015a68:	6820      	ldr	r0, [r4, #0]
 8015a6a:	6829      	ldr	r1, [r5, #0]
 8015a6c:	0606      	lsls	r6, r0, #24
 8015a6e:	f101 0304 	add.w	r3, r1, #4
 8015a72:	d50a      	bpl.n	8015a8a <_printf_i+0xce>
 8015a74:	680e      	ldr	r6, [r1, #0]
 8015a76:	602b      	str	r3, [r5, #0]
 8015a78:	2e00      	cmp	r6, #0
 8015a7a:	da03      	bge.n	8015a84 <_printf_i+0xc8>
 8015a7c:	232d      	movs	r3, #45	; 0x2d
 8015a7e:	4276      	negs	r6, r6
 8015a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a84:	485e      	ldr	r0, [pc, #376]	; (8015c00 <_printf_i+0x244>)
 8015a86:	230a      	movs	r3, #10
 8015a88:	e019      	b.n	8015abe <_printf_i+0x102>
 8015a8a:	680e      	ldr	r6, [r1, #0]
 8015a8c:	602b      	str	r3, [r5, #0]
 8015a8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a92:	bf18      	it	ne
 8015a94:	b236      	sxthne	r6, r6
 8015a96:	e7ef      	b.n	8015a78 <_printf_i+0xbc>
 8015a98:	682b      	ldr	r3, [r5, #0]
 8015a9a:	6820      	ldr	r0, [r4, #0]
 8015a9c:	1d19      	adds	r1, r3, #4
 8015a9e:	6029      	str	r1, [r5, #0]
 8015aa0:	0601      	lsls	r1, r0, #24
 8015aa2:	d501      	bpl.n	8015aa8 <_printf_i+0xec>
 8015aa4:	681e      	ldr	r6, [r3, #0]
 8015aa6:	e002      	b.n	8015aae <_printf_i+0xf2>
 8015aa8:	0646      	lsls	r6, r0, #25
 8015aaa:	d5fb      	bpl.n	8015aa4 <_printf_i+0xe8>
 8015aac:	881e      	ldrh	r6, [r3, #0]
 8015aae:	4854      	ldr	r0, [pc, #336]	; (8015c00 <_printf_i+0x244>)
 8015ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8015ab2:	bf0c      	ite	eq
 8015ab4:	2308      	moveq	r3, #8
 8015ab6:	230a      	movne	r3, #10
 8015ab8:	2100      	movs	r1, #0
 8015aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015abe:	6865      	ldr	r5, [r4, #4]
 8015ac0:	60a5      	str	r5, [r4, #8]
 8015ac2:	2d00      	cmp	r5, #0
 8015ac4:	bfa2      	ittt	ge
 8015ac6:	6821      	ldrge	r1, [r4, #0]
 8015ac8:	f021 0104 	bicge.w	r1, r1, #4
 8015acc:	6021      	strge	r1, [r4, #0]
 8015ace:	b90e      	cbnz	r6, 8015ad4 <_printf_i+0x118>
 8015ad0:	2d00      	cmp	r5, #0
 8015ad2:	d04d      	beq.n	8015b70 <_printf_i+0x1b4>
 8015ad4:	4615      	mov	r5, r2
 8015ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8015ada:	fb03 6711 	mls	r7, r3, r1, r6
 8015ade:	5dc7      	ldrb	r7, [r0, r7]
 8015ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015ae4:	4637      	mov	r7, r6
 8015ae6:	42bb      	cmp	r3, r7
 8015ae8:	460e      	mov	r6, r1
 8015aea:	d9f4      	bls.n	8015ad6 <_printf_i+0x11a>
 8015aec:	2b08      	cmp	r3, #8
 8015aee:	d10b      	bne.n	8015b08 <_printf_i+0x14c>
 8015af0:	6823      	ldr	r3, [r4, #0]
 8015af2:	07de      	lsls	r6, r3, #31
 8015af4:	d508      	bpl.n	8015b08 <_printf_i+0x14c>
 8015af6:	6923      	ldr	r3, [r4, #16]
 8015af8:	6861      	ldr	r1, [r4, #4]
 8015afa:	4299      	cmp	r1, r3
 8015afc:	bfde      	ittt	le
 8015afe:	2330      	movle	r3, #48	; 0x30
 8015b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015b04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015b08:	1b52      	subs	r2, r2, r5
 8015b0a:	6122      	str	r2, [r4, #16]
 8015b0c:	f8cd a000 	str.w	sl, [sp]
 8015b10:	464b      	mov	r3, r9
 8015b12:	aa03      	add	r2, sp, #12
 8015b14:	4621      	mov	r1, r4
 8015b16:	4640      	mov	r0, r8
 8015b18:	f7ff fee2 	bl	80158e0 <_printf_common>
 8015b1c:	3001      	adds	r0, #1
 8015b1e:	d14c      	bne.n	8015bba <_printf_i+0x1fe>
 8015b20:	f04f 30ff 	mov.w	r0, #4294967295
 8015b24:	b004      	add	sp, #16
 8015b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b2a:	4835      	ldr	r0, [pc, #212]	; (8015c00 <_printf_i+0x244>)
 8015b2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015b30:	6829      	ldr	r1, [r5, #0]
 8015b32:	6823      	ldr	r3, [r4, #0]
 8015b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8015b38:	6029      	str	r1, [r5, #0]
 8015b3a:	061d      	lsls	r5, r3, #24
 8015b3c:	d514      	bpl.n	8015b68 <_printf_i+0x1ac>
 8015b3e:	07df      	lsls	r7, r3, #31
 8015b40:	bf44      	itt	mi
 8015b42:	f043 0320 	orrmi.w	r3, r3, #32
 8015b46:	6023      	strmi	r3, [r4, #0]
 8015b48:	b91e      	cbnz	r6, 8015b52 <_printf_i+0x196>
 8015b4a:	6823      	ldr	r3, [r4, #0]
 8015b4c:	f023 0320 	bic.w	r3, r3, #32
 8015b50:	6023      	str	r3, [r4, #0]
 8015b52:	2310      	movs	r3, #16
 8015b54:	e7b0      	b.n	8015ab8 <_printf_i+0xfc>
 8015b56:	6823      	ldr	r3, [r4, #0]
 8015b58:	f043 0320 	orr.w	r3, r3, #32
 8015b5c:	6023      	str	r3, [r4, #0]
 8015b5e:	2378      	movs	r3, #120	; 0x78
 8015b60:	4828      	ldr	r0, [pc, #160]	; (8015c04 <_printf_i+0x248>)
 8015b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015b66:	e7e3      	b.n	8015b30 <_printf_i+0x174>
 8015b68:	0659      	lsls	r1, r3, #25
 8015b6a:	bf48      	it	mi
 8015b6c:	b2b6      	uxthmi	r6, r6
 8015b6e:	e7e6      	b.n	8015b3e <_printf_i+0x182>
 8015b70:	4615      	mov	r5, r2
 8015b72:	e7bb      	b.n	8015aec <_printf_i+0x130>
 8015b74:	682b      	ldr	r3, [r5, #0]
 8015b76:	6826      	ldr	r6, [r4, #0]
 8015b78:	6961      	ldr	r1, [r4, #20]
 8015b7a:	1d18      	adds	r0, r3, #4
 8015b7c:	6028      	str	r0, [r5, #0]
 8015b7e:	0635      	lsls	r5, r6, #24
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	d501      	bpl.n	8015b88 <_printf_i+0x1cc>
 8015b84:	6019      	str	r1, [r3, #0]
 8015b86:	e002      	b.n	8015b8e <_printf_i+0x1d2>
 8015b88:	0670      	lsls	r0, r6, #25
 8015b8a:	d5fb      	bpl.n	8015b84 <_printf_i+0x1c8>
 8015b8c:	8019      	strh	r1, [r3, #0]
 8015b8e:	2300      	movs	r3, #0
 8015b90:	6123      	str	r3, [r4, #16]
 8015b92:	4615      	mov	r5, r2
 8015b94:	e7ba      	b.n	8015b0c <_printf_i+0x150>
 8015b96:	682b      	ldr	r3, [r5, #0]
 8015b98:	1d1a      	adds	r2, r3, #4
 8015b9a:	602a      	str	r2, [r5, #0]
 8015b9c:	681d      	ldr	r5, [r3, #0]
 8015b9e:	6862      	ldr	r2, [r4, #4]
 8015ba0:	2100      	movs	r1, #0
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	f7ea fb44 	bl	8000230 <memchr>
 8015ba8:	b108      	cbz	r0, 8015bae <_printf_i+0x1f2>
 8015baa:	1b40      	subs	r0, r0, r5
 8015bac:	6060      	str	r0, [r4, #4]
 8015bae:	6863      	ldr	r3, [r4, #4]
 8015bb0:	6123      	str	r3, [r4, #16]
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bb8:	e7a8      	b.n	8015b0c <_printf_i+0x150>
 8015bba:	6923      	ldr	r3, [r4, #16]
 8015bbc:	462a      	mov	r2, r5
 8015bbe:	4649      	mov	r1, r9
 8015bc0:	4640      	mov	r0, r8
 8015bc2:	47d0      	blx	sl
 8015bc4:	3001      	adds	r0, #1
 8015bc6:	d0ab      	beq.n	8015b20 <_printf_i+0x164>
 8015bc8:	6823      	ldr	r3, [r4, #0]
 8015bca:	079b      	lsls	r3, r3, #30
 8015bcc:	d413      	bmi.n	8015bf6 <_printf_i+0x23a>
 8015bce:	68e0      	ldr	r0, [r4, #12]
 8015bd0:	9b03      	ldr	r3, [sp, #12]
 8015bd2:	4298      	cmp	r0, r3
 8015bd4:	bfb8      	it	lt
 8015bd6:	4618      	movlt	r0, r3
 8015bd8:	e7a4      	b.n	8015b24 <_printf_i+0x168>
 8015bda:	2301      	movs	r3, #1
 8015bdc:	4632      	mov	r2, r6
 8015bde:	4649      	mov	r1, r9
 8015be0:	4640      	mov	r0, r8
 8015be2:	47d0      	blx	sl
 8015be4:	3001      	adds	r0, #1
 8015be6:	d09b      	beq.n	8015b20 <_printf_i+0x164>
 8015be8:	3501      	adds	r5, #1
 8015bea:	68e3      	ldr	r3, [r4, #12]
 8015bec:	9903      	ldr	r1, [sp, #12]
 8015bee:	1a5b      	subs	r3, r3, r1
 8015bf0:	42ab      	cmp	r3, r5
 8015bf2:	dcf2      	bgt.n	8015bda <_printf_i+0x21e>
 8015bf4:	e7eb      	b.n	8015bce <_printf_i+0x212>
 8015bf6:	2500      	movs	r5, #0
 8015bf8:	f104 0619 	add.w	r6, r4, #25
 8015bfc:	e7f5      	b.n	8015bea <_printf_i+0x22e>
 8015bfe:	bf00      	nop
 8015c00:	0801848a 	.word	0x0801848a
 8015c04:	0801849b 	.word	0x0801849b

08015c08 <iprintf>:
 8015c08:	b40f      	push	{r0, r1, r2, r3}
 8015c0a:	4b0a      	ldr	r3, [pc, #40]	; (8015c34 <iprintf+0x2c>)
 8015c0c:	b513      	push	{r0, r1, r4, lr}
 8015c0e:	681c      	ldr	r4, [r3, #0]
 8015c10:	b124      	cbz	r4, 8015c1c <iprintf+0x14>
 8015c12:	69a3      	ldr	r3, [r4, #24]
 8015c14:	b913      	cbnz	r3, 8015c1c <iprintf+0x14>
 8015c16:	4620      	mov	r0, r4
 8015c18:	f001 f8da 	bl	8016dd0 <__sinit>
 8015c1c:	ab05      	add	r3, sp, #20
 8015c1e:	9a04      	ldr	r2, [sp, #16]
 8015c20:	68a1      	ldr	r1, [r4, #8]
 8015c22:	9301      	str	r3, [sp, #4]
 8015c24:	4620      	mov	r0, r4
 8015c26:	f001 fe89 	bl	801793c <_vfiprintf_r>
 8015c2a:	b002      	add	sp, #8
 8015c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c30:	b004      	add	sp, #16
 8015c32:	4770      	bx	lr
 8015c34:	20000184 	.word	0x20000184

08015c38 <_puts_r>:
 8015c38:	b570      	push	{r4, r5, r6, lr}
 8015c3a:	460e      	mov	r6, r1
 8015c3c:	4605      	mov	r5, r0
 8015c3e:	b118      	cbz	r0, 8015c48 <_puts_r+0x10>
 8015c40:	6983      	ldr	r3, [r0, #24]
 8015c42:	b90b      	cbnz	r3, 8015c48 <_puts_r+0x10>
 8015c44:	f001 f8c4 	bl	8016dd0 <__sinit>
 8015c48:	69ab      	ldr	r3, [r5, #24]
 8015c4a:	68ac      	ldr	r4, [r5, #8]
 8015c4c:	b913      	cbnz	r3, 8015c54 <_puts_r+0x1c>
 8015c4e:	4628      	mov	r0, r5
 8015c50:	f001 f8be 	bl	8016dd0 <__sinit>
 8015c54:	4b2c      	ldr	r3, [pc, #176]	; (8015d08 <_puts_r+0xd0>)
 8015c56:	429c      	cmp	r4, r3
 8015c58:	d120      	bne.n	8015c9c <_puts_r+0x64>
 8015c5a:	686c      	ldr	r4, [r5, #4]
 8015c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c5e:	07db      	lsls	r3, r3, #31
 8015c60:	d405      	bmi.n	8015c6e <_puts_r+0x36>
 8015c62:	89a3      	ldrh	r3, [r4, #12]
 8015c64:	0598      	lsls	r0, r3, #22
 8015c66:	d402      	bmi.n	8015c6e <_puts_r+0x36>
 8015c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c6a:	f001 f954 	bl	8016f16 <__retarget_lock_acquire_recursive>
 8015c6e:	89a3      	ldrh	r3, [r4, #12]
 8015c70:	0719      	lsls	r1, r3, #28
 8015c72:	d51d      	bpl.n	8015cb0 <_puts_r+0x78>
 8015c74:	6923      	ldr	r3, [r4, #16]
 8015c76:	b1db      	cbz	r3, 8015cb0 <_puts_r+0x78>
 8015c78:	3e01      	subs	r6, #1
 8015c7a:	68a3      	ldr	r3, [r4, #8]
 8015c7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015c80:	3b01      	subs	r3, #1
 8015c82:	60a3      	str	r3, [r4, #8]
 8015c84:	bb39      	cbnz	r1, 8015cd6 <_puts_r+0x9e>
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	da38      	bge.n	8015cfc <_puts_r+0xc4>
 8015c8a:	4622      	mov	r2, r4
 8015c8c:	210a      	movs	r1, #10
 8015c8e:	4628      	mov	r0, r5
 8015c90:	f000 f848 	bl	8015d24 <__swbuf_r>
 8015c94:	3001      	adds	r0, #1
 8015c96:	d011      	beq.n	8015cbc <_puts_r+0x84>
 8015c98:	250a      	movs	r5, #10
 8015c9a:	e011      	b.n	8015cc0 <_puts_r+0x88>
 8015c9c:	4b1b      	ldr	r3, [pc, #108]	; (8015d0c <_puts_r+0xd4>)
 8015c9e:	429c      	cmp	r4, r3
 8015ca0:	d101      	bne.n	8015ca6 <_puts_r+0x6e>
 8015ca2:	68ac      	ldr	r4, [r5, #8]
 8015ca4:	e7da      	b.n	8015c5c <_puts_r+0x24>
 8015ca6:	4b1a      	ldr	r3, [pc, #104]	; (8015d10 <_puts_r+0xd8>)
 8015ca8:	429c      	cmp	r4, r3
 8015caa:	bf08      	it	eq
 8015cac:	68ec      	ldreq	r4, [r5, #12]
 8015cae:	e7d5      	b.n	8015c5c <_puts_r+0x24>
 8015cb0:	4621      	mov	r1, r4
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	f000 f888 	bl	8015dc8 <__swsetup_r>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d0dd      	beq.n	8015c78 <_puts_r+0x40>
 8015cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8015cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cc2:	07da      	lsls	r2, r3, #31
 8015cc4:	d405      	bmi.n	8015cd2 <_puts_r+0x9a>
 8015cc6:	89a3      	ldrh	r3, [r4, #12]
 8015cc8:	059b      	lsls	r3, r3, #22
 8015cca:	d402      	bmi.n	8015cd2 <_puts_r+0x9a>
 8015ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cce:	f001 f923 	bl	8016f18 <__retarget_lock_release_recursive>
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	bd70      	pop	{r4, r5, r6, pc}
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	da04      	bge.n	8015ce4 <_puts_r+0xac>
 8015cda:	69a2      	ldr	r2, [r4, #24]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	dc06      	bgt.n	8015cee <_puts_r+0xb6>
 8015ce0:	290a      	cmp	r1, #10
 8015ce2:	d004      	beq.n	8015cee <_puts_r+0xb6>
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	1c5a      	adds	r2, r3, #1
 8015ce8:	6022      	str	r2, [r4, #0]
 8015cea:	7019      	strb	r1, [r3, #0]
 8015cec:	e7c5      	b.n	8015c7a <_puts_r+0x42>
 8015cee:	4622      	mov	r2, r4
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	f000 f817 	bl	8015d24 <__swbuf_r>
 8015cf6:	3001      	adds	r0, #1
 8015cf8:	d1bf      	bne.n	8015c7a <_puts_r+0x42>
 8015cfa:	e7df      	b.n	8015cbc <_puts_r+0x84>
 8015cfc:	6823      	ldr	r3, [r4, #0]
 8015cfe:	250a      	movs	r5, #10
 8015d00:	1c5a      	adds	r2, r3, #1
 8015d02:	6022      	str	r2, [r4, #0]
 8015d04:	701d      	strb	r5, [r3, #0]
 8015d06:	e7db      	b.n	8015cc0 <_puts_r+0x88>
 8015d08:	0801855c 	.word	0x0801855c
 8015d0c:	0801857c 	.word	0x0801857c
 8015d10:	0801853c 	.word	0x0801853c

08015d14 <puts>:
 8015d14:	4b02      	ldr	r3, [pc, #8]	; (8015d20 <puts+0xc>)
 8015d16:	4601      	mov	r1, r0
 8015d18:	6818      	ldr	r0, [r3, #0]
 8015d1a:	f7ff bf8d 	b.w	8015c38 <_puts_r>
 8015d1e:	bf00      	nop
 8015d20:	20000184 	.word	0x20000184

08015d24 <__swbuf_r>:
 8015d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d26:	460e      	mov	r6, r1
 8015d28:	4614      	mov	r4, r2
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	b118      	cbz	r0, 8015d36 <__swbuf_r+0x12>
 8015d2e:	6983      	ldr	r3, [r0, #24]
 8015d30:	b90b      	cbnz	r3, 8015d36 <__swbuf_r+0x12>
 8015d32:	f001 f84d 	bl	8016dd0 <__sinit>
 8015d36:	4b21      	ldr	r3, [pc, #132]	; (8015dbc <__swbuf_r+0x98>)
 8015d38:	429c      	cmp	r4, r3
 8015d3a:	d12b      	bne.n	8015d94 <__swbuf_r+0x70>
 8015d3c:	686c      	ldr	r4, [r5, #4]
 8015d3e:	69a3      	ldr	r3, [r4, #24]
 8015d40:	60a3      	str	r3, [r4, #8]
 8015d42:	89a3      	ldrh	r3, [r4, #12]
 8015d44:	071a      	lsls	r2, r3, #28
 8015d46:	d52f      	bpl.n	8015da8 <__swbuf_r+0x84>
 8015d48:	6923      	ldr	r3, [r4, #16]
 8015d4a:	b36b      	cbz	r3, 8015da8 <__swbuf_r+0x84>
 8015d4c:	6923      	ldr	r3, [r4, #16]
 8015d4e:	6820      	ldr	r0, [r4, #0]
 8015d50:	1ac0      	subs	r0, r0, r3
 8015d52:	6963      	ldr	r3, [r4, #20]
 8015d54:	b2f6      	uxtb	r6, r6
 8015d56:	4283      	cmp	r3, r0
 8015d58:	4637      	mov	r7, r6
 8015d5a:	dc04      	bgt.n	8015d66 <__swbuf_r+0x42>
 8015d5c:	4621      	mov	r1, r4
 8015d5e:	4628      	mov	r0, r5
 8015d60:	f000 ffa2 	bl	8016ca8 <_fflush_r>
 8015d64:	bb30      	cbnz	r0, 8015db4 <__swbuf_r+0x90>
 8015d66:	68a3      	ldr	r3, [r4, #8]
 8015d68:	3b01      	subs	r3, #1
 8015d6a:	60a3      	str	r3, [r4, #8]
 8015d6c:	6823      	ldr	r3, [r4, #0]
 8015d6e:	1c5a      	adds	r2, r3, #1
 8015d70:	6022      	str	r2, [r4, #0]
 8015d72:	701e      	strb	r6, [r3, #0]
 8015d74:	6963      	ldr	r3, [r4, #20]
 8015d76:	3001      	adds	r0, #1
 8015d78:	4283      	cmp	r3, r0
 8015d7a:	d004      	beq.n	8015d86 <__swbuf_r+0x62>
 8015d7c:	89a3      	ldrh	r3, [r4, #12]
 8015d7e:	07db      	lsls	r3, r3, #31
 8015d80:	d506      	bpl.n	8015d90 <__swbuf_r+0x6c>
 8015d82:	2e0a      	cmp	r6, #10
 8015d84:	d104      	bne.n	8015d90 <__swbuf_r+0x6c>
 8015d86:	4621      	mov	r1, r4
 8015d88:	4628      	mov	r0, r5
 8015d8a:	f000 ff8d 	bl	8016ca8 <_fflush_r>
 8015d8e:	b988      	cbnz	r0, 8015db4 <__swbuf_r+0x90>
 8015d90:	4638      	mov	r0, r7
 8015d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d94:	4b0a      	ldr	r3, [pc, #40]	; (8015dc0 <__swbuf_r+0x9c>)
 8015d96:	429c      	cmp	r4, r3
 8015d98:	d101      	bne.n	8015d9e <__swbuf_r+0x7a>
 8015d9a:	68ac      	ldr	r4, [r5, #8]
 8015d9c:	e7cf      	b.n	8015d3e <__swbuf_r+0x1a>
 8015d9e:	4b09      	ldr	r3, [pc, #36]	; (8015dc4 <__swbuf_r+0xa0>)
 8015da0:	429c      	cmp	r4, r3
 8015da2:	bf08      	it	eq
 8015da4:	68ec      	ldreq	r4, [r5, #12]
 8015da6:	e7ca      	b.n	8015d3e <__swbuf_r+0x1a>
 8015da8:	4621      	mov	r1, r4
 8015daa:	4628      	mov	r0, r5
 8015dac:	f000 f80c 	bl	8015dc8 <__swsetup_r>
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d0cb      	beq.n	8015d4c <__swbuf_r+0x28>
 8015db4:	f04f 37ff 	mov.w	r7, #4294967295
 8015db8:	e7ea      	b.n	8015d90 <__swbuf_r+0x6c>
 8015dba:	bf00      	nop
 8015dbc:	0801855c 	.word	0x0801855c
 8015dc0:	0801857c 	.word	0x0801857c
 8015dc4:	0801853c 	.word	0x0801853c

08015dc8 <__swsetup_r>:
 8015dc8:	4b32      	ldr	r3, [pc, #200]	; (8015e94 <__swsetup_r+0xcc>)
 8015dca:	b570      	push	{r4, r5, r6, lr}
 8015dcc:	681d      	ldr	r5, [r3, #0]
 8015dce:	4606      	mov	r6, r0
 8015dd0:	460c      	mov	r4, r1
 8015dd2:	b125      	cbz	r5, 8015dde <__swsetup_r+0x16>
 8015dd4:	69ab      	ldr	r3, [r5, #24]
 8015dd6:	b913      	cbnz	r3, 8015dde <__swsetup_r+0x16>
 8015dd8:	4628      	mov	r0, r5
 8015dda:	f000 fff9 	bl	8016dd0 <__sinit>
 8015dde:	4b2e      	ldr	r3, [pc, #184]	; (8015e98 <__swsetup_r+0xd0>)
 8015de0:	429c      	cmp	r4, r3
 8015de2:	d10f      	bne.n	8015e04 <__swsetup_r+0x3c>
 8015de4:	686c      	ldr	r4, [r5, #4]
 8015de6:	89a3      	ldrh	r3, [r4, #12]
 8015de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015dec:	0719      	lsls	r1, r3, #28
 8015dee:	d42c      	bmi.n	8015e4a <__swsetup_r+0x82>
 8015df0:	06dd      	lsls	r5, r3, #27
 8015df2:	d411      	bmi.n	8015e18 <__swsetup_r+0x50>
 8015df4:	2309      	movs	r3, #9
 8015df6:	6033      	str	r3, [r6, #0]
 8015df8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015dfc:	81a3      	strh	r3, [r4, #12]
 8015dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8015e02:	e03e      	b.n	8015e82 <__swsetup_r+0xba>
 8015e04:	4b25      	ldr	r3, [pc, #148]	; (8015e9c <__swsetup_r+0xd4>)
 8015e06:	429c      	cmp	r4, r3
 8015e08:	d101      	bne.n	8015e0e <__swsetup_r+0x46>
 8015e0a:	68ac      	ldr	r4, [r5, #8]
 8015e0c:	e7eb      	b.n	8015de6 <__swsetup_r+0x1e>
 8015e0e:	4b24      	ldr	r3, [pc, #144]	; (8015ea0 <__swsetup_r+0xd8>)
 8015e10:	429c      	cmp	r4, r3
 8015e12:	bf08      	it	eq
 8015e14:	68ec      	ldreq	r4, [r5, #12]
 8015e16:	e7e6      	b.n	8015de6 <__swsetup_r+0x1e>
 8015e18:	0758      	lsls	r0, r3, #29
 8015e1a:	d512      	bpl.n	8015e42 <__swsetup_r+0x7a>
 8015e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e1e:	b141      	cbz	r1, 8015e32 <__swsetup_r+0x6a>
 8015e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e24:	4299      	cmp	r1, r3
 8015e26:	d002      	beq.n	8015e2e <__swsetup_r+0x66>
 8015e28:	4630      	mov	r0, r6
 8015e2a:	f001 fc7d 	bl	8017728 <_free_r>
 8015e2e:	2300      	movs	r3, #0
 8015e30:	6363      	str	r3, [r4, #52]	; 0x34
 8015e32:	89a3      	ldrh	r3, [r4, #12]
 8015e34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015e38:	81a3      	strh	r3, [r4, #12]
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	6063      	str	r3, [r4, #4]
 8015e3e:	6923      	ldr	r3, [r4, #16]
 8015e40:	6023      	str	r3, [r4, #0]
 8015e42:	89a3      	ldrh	r3, [r4, #12]
 8015e44:	f043 0308 	orr.w	r3, r3, #8
 8015e48:	81a3      	strh	r3, [r4, #12]
 8015e4a:	6923      	ldr	r3, [r4, #16]
 8015e4c:	b94b      	cbnz	r3, 8015e62 <__swsetup_r+0x9a>
 8015e4e:	89a3      	ldrh	r3, [r4, #12]
 8015e50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e58:	d003      	beq.n	8015e62 <__swsetup_r+0x9a>
 8015e5a:	4621      	mov	r1, r4
 8015e5c:	4630      	mov	r0, r6
 8015e5e:	f001 f881 	bl	8016f64 <__smakebuf_r>
 8015e62:	89a0      	ldrh	r0, [r4, #12]
 8015e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e68:	f010 0301 	ands.w	r3, r0, #1
 8015e6c:	d00a      	beq.n	8015e84 <__swsetup_r+0xbc>
 8015e6e:	2300      	movs	r3, #0
 8015e70:	60a3      	str	r3, [r4, #8]
 8015e72:	6963      	ldr	r3, [r4, #20]
 8015e74:	425b      	negs	r3, r3
 8015e76:	61a3      	str	r3, [r4, #24]
 8015e78:	6923      	ldr	r3, [r4, #16]
 8015e7a:	b943      	cbnz	r3, 8015e8e <__swsetup_r+0xc6>
 8015e7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015e80:	d1ba      	bne.n	8015df8 <__swsetup_r+0x30>
 8015e82:	bd70      	pop	{r4, r5, r6, pc}
 8015e84:	0781      	lsls	r1, r0, #30
 8015e86:	bf58      	it	pl
 8015e88:	6963      	ldrpl	r3, [r4, #20]
 8015e8a:	60a3      	str	r3, [r4, #8]
 8015e8c:	e7f4      	b.n	8015e78 <__swsetup_r+0xb0>
 8015e8e:	2000      	movs	r0, #0
 8015e90:	e7f7      	b.n	8015e82 <__swsetup_r+0xba>
 8015e92:	bf00      	nop
 8015e94:	20000184 	.word	0x20000184
 8015e98:	0801855c 	.word	0x0801855c
 8015e9c:	0801857c 	.word	0x0801857c
 8015ea0:	0801853c 	.word	0x0801853c

08015ea4 <quorem>:
 8015ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea8:	6903      	ldr	r3, [r0, #16]
 8015eaa:	690c      	ldr	r4, [r1, #16]
 8015eac:	42a3      	cmp	r3, r4
 8015eae:	4607      	mov	r7, r0
 8015eb0:	f2c0 8081 	blt.w	8015fb6 <quorem+0x112>
 8015eb4:	3c01      	subs	r4, #1
 8015eb6:	f101 0814 	add.w	r8, r1, #20
 8015eba:	f100 0514 	add.w	r5, r0, #20
 8015ebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015ec2:	9301      	str	r3, [sp, #4]
 8015ec4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015ec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015ecc:	3301      	adds	r3, #1
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015ed4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015ed8:	fbb2 f6f3 	udiv	r6, r2, r3
 8015edc:	d331      	bcc.n	8015f42 <quorem+0x9e>
 8015ede:	f04f 0e00 	mov.w	lr, #0
 8015ee2:	4640      	mov	r0, r8
 8015ee4:	46ac      	mov	ip, r5
 8015ee6:	46f2      	mov	sl, lr
 8015ee8:	f850 2b04 	ldr.w	r2, [r0], #4
 8015eec:	b293      	uxth	r3, r2
 8015eee:	fb06 e303 	mla	r3, r6, r3, lr
 8015ef2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015ef6:	b29b      	uxth	r3, r3
 8015ef8:	ebaa 0303 	sub.w	r3, sl, r3
 8015efc:	f8dc a000 	ldr.w	sl, [ip]
 8015f00:	0c12      	lsrs	r2, r2, #16
 8015f02:	fa13 f38a 	uxtah	r3, r3, sl
 8015f06:	fb06 e202 	mla	r2, r6, r2, lr
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	9b00      	ldr	r3, [sp, #0]
 8015f0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015f12:	b292      	uxth	r2, r2
 8015f14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015f1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015f20:	4581      	cmp	r9, r0
 8015f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f26:	f84c 3b04 	str.w	r3, [ip], #4
 8015f2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015f2e:	d2db      	bcs.n	8015ee8 <quorem+0x44>
 8015f30:	f855 300b 	ldr.w	r3, [r5, fp]
 8015f34:	b92b      	cbnz	r3, 8015f42 <quorem+0x9e>
 8015f36:	9b01      	ldr	r3, [sp, #4]
 8015f38:	3b04      	subs	r3, #4
 8015f3a:	429d      	cmp	r5, r3
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	d32e      	bcc.n	8015f9e <quorem+0xfa>
 8015f40:	613c      	str	r4, [r7, #16]
 8015f42:	4638      	mov	r0, r7
 8015f44:	f001 fad8 	bl	80174f8 <__mcmp>
 8015f48:	2800      	cmp	r0, #0
 8015f4a:	db24      	blt.n	8015f96 <quorem+0xf2>
 8015f4c:	3601      	adds	r6, #1
 8015f4e:	4628      	mov	r0, r5
 8015f50:	f04f 0c00 	mov.w	ip, #0
 8015f54:	f858 2b04 	ldr.w	r2, [r8], #4
 8015f58:	f8d0 e000 	ldr.w	lr, [r0]
 8015f5c:	b293      	uxth	r3, r2
 8015f5e:	ebac 0303 	sub.w	r3, ip, r3
 8015f62:	0c12      	lsrs	r2, r2, #16
 8015f64:	fa13 f38e 	uxtah	r3, r3, lr
 8015f68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015f6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f76:	45c1      	cmp	r9, r8
 8015f78:	f840 3b04 	str.w	r3, [r0], #4
 8015f7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015f80:	d2e8      	bcs.n	8015f54 <quorem+0xb0>
 8015f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015f8a:	b922      	cbnz	r2, 8015f96 <quorem+0xf2>
 8015f8c:	3b04      	subs	r3, #4
 8015f8e:	429d      	cmp	r5, r3
 8015f90:	461a      	mov	r2, r3
 8015f92:	d30a      	bcc.n	8015faa <quorem+0x106>
 8015f94:	613c      	str	r4, [r7, #16]
 8015f96:	4630      	mov	r0, r6
 8015f98:	b003      	add	sp, #12
 8015f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f9e:	6812      	ldr	r2, [r2, #0]
 8015fa0:	3b04      	subs	r3, #4
 8015fa2:	2a00      	cmp	r2, #0
 8015fa4:	d1cc      	bne.n	8015f40 <quorem+0x9c>
 8015fa6:	3c01      	subs	r4, #1
 8015fa8:	e7c7      	b.n	8015f3a <quorem+0x96>
 8015faa:	6812      	ldr	r2, [r2, #0]
 8015fac:	3b04      	subs	r3, #4
 8015fae:	2a00      	cmp	r2, #0
 8015fb0:	d1f0      	bne.n	8015f94 <quorem+0xf0>
 8015fb2:	3c01      	subs	r4, #1
 8015fb4:	e7eb      	b.n	8015f8e <quorem+0xea>
 8015fb6:	2000      	movs	r0, #0
 8015fb8:	e7ee      	b.n	8015f98 <quorem+0xf4>
 8015fba:	0000      	movs	r0, r0
 8015fbc:	0000      	movs	r0, r0
	...

08015fc0 <_dtoa_r>:
 8015fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc4:	ed2d 8b04 	vpush	{d8-d9}
 8015fc8:	ec57 6b10 	vmov	r6, r7, d0
 8015fcc:	b093      	sub	sp, #76	; 0x4c
 8015fce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015fd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015fd4:	9106      	str	r1, [sp, #24]
 8015fd6:	ee10 aa10 	vmov	sl, s0
 8015fda:	4604      	mov	r4, r0
 8015fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8015fde:	930c      	str	r3, [sp, #48]	; 0x30
 8015fe0:	46bb      	mov	fp, r7
 8015fe2:	b975      	cbnz	r5, 8016002 <_dtoa_r+0x42>
 8015fe4:	2010      	movs	r0, #16
 8015fe6:	f000 fffd 	bl	8016fe4 <malloc>
 8015fea:	4602      	mov	r2, r0
 8015fec:	6260      	str	r0, [r4, #36]	; 0x24
 8015fee:	b920      	cbnz	r0, 8015ffa <_dtoa_r+0x3a>
 8015ff0:	4ba7      	ldr	r3, [pc, #668]	; (8016290 <_dtoa_r+0x2d0>)
 8015ff2:	21ea      	movs	r1, #234	; 0xea
 8015ff4:	48a7      	ldr	r0, [pc, #668]	; (8016294 <_dtoa_r+0x2d4>)
 8015ff6:	f001 fe37 	bl	8017c68 <__assert_func>
 8015ffa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015ffe:	6005      	str	r5, [r0, #0]
 8016000:	60c5      	str	r5, [r0, #12]
 8016002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016004:	6819      	ldr	r1, [r3, #0]
 8016006:	b151      	cbz	r1, 801601e <_dtoa_r+0x5e>
 8016008:	685a      	ldr	r2, [r3, #4]
 801600a:	604a      	str	r2, [r1, #4]
 801600c:	2301      	movs	r3, #1
 801600e:	4093      	lsls	r3, r2
 8016010:	608b      	str	r3, [r1, #8]
 8016012:	4620      	mov	r0, r4
 8016014:	f001 f82e 	bl	8017074 <_Bfree>
 8016018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801601a:	2200      	movs	r2, #0
 801601c:	601a      	str	r2, [r3, #0]
 801601e:	1e3b      	subs	r3, r7, #0
 8016020:	bfaa      	itet	ge
 8016022:	2300      	movge	r3, #0
 8016024:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016028:	f8c8 3000 	strge.w	r3, [r8]
 801602c:	4b9a      	ldr	r3, [pc, #616]	; (8016298 <_dtoa_r+0x2d8>)
 801602e:	bfbc      	itt	lt
 8016030:	2201      	movlt	r2, #1
 8016032:	f8c8 2000 	strlt.w	r2, [r8]
 8016036:	ea33 030b 	bics.w	r3, r3, fp
 801603a:	d11b      	bne.n	8016074 <_dtoa_r+0xb4>
 801603c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801603e:	f242 730f 	movw	r3, #9999	; 0x270f
 8016042:	6013      	str	r3, [r2, #0]
 8016044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016048:	4333      	orrs	r3, r6
 801604a:	f000 8592 	beq.w	8016b72 <_dtoa_r+0xbb2>
 801604e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016050:	b963      	cbnz	r3, 801606c <_dtoa_r+0xac>
 8016052:	4b92      	ldr	r3, [pc, #584]	; (801629c <_dtoa_r+0x2dc>)
 8016054:	e022      	b.n	801609c <_dtoa_r+0xdc>
 8016056:	4b92      	ldr	r3, [pc, #584]	; (80162a0 <_dtoa_r+0x2e0>)
 8016058:	9301      	str	r3, [sp, #4]
 801605a:	3308      	adds	r3, #8
 801605c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801605e:	6013      	str	r3, [r2, #0]
 8016060:	9801      	ldr	r0, [sp, #4]
 8016062:	b013      	add	sp, #76	; 0x4c
 8016064:	ecbd 8b04 	vpop	{d8-d9}
 8016068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606c:	4b8b      	ldr	r3, [pc, #556]	; (801629c <_dtoa_r+0x2dc>)
 801606e:	9301      	str	r3, [sp, #4]
 8016070:	3303      	adds	r3, #3
 8016072:	e7f3      	b.n	801605c <_dtoa_r+0x9c>
 8016074:	2200      	movs	r2, #0
 8016076:	2300      	movs	r3, #0
 8016078:	4650      	mov	r0, sl
 801607a:	4659      	mov	r1, fp
 801607c:	f7ea fd4c 	bl	8000b18 <__aeabi_dcmpeq>
 8016080:	ec4b ab19 	vmov	d9, sl, fp
 8016084:	4680      	mov	r8, r0
 8016086:	b158      	cbz	r0, 80160a0 <_dtoa_r+0xe0>
 8016088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801608a:	2301      	movs	r3, #1
 801608c:	6013      	str	r3, [r2, #0]
 801608e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016090:	2b00      	cmp	r3, #0
 8016092:	f000 856b 	beq.w	8016b6c <_dtoa_r+0xbac>
 8016096:	4883      	ldr	r0, [pc, #524]	; (80162a4 <_dtoa_r+0x2e4>)
 8016098:	6018      	str	r0, [r3, #0]
 801609a:	1e43      	subs	r3, r0, #1
 801609c:	9301      	str	r3, [sp, #4]
 801609e:	e7df      	b.n	8016060 <_dtoa_r+0xa0>
 80160a0:	ec4b ab10 	vmov	d0, sl, fp
 80160a4:	aa10      	add	r2, sp, #64	; 0x40
 80160a6:	a911      	add	r1, sp, #68	; 0x44
 80160a8:	4620      	mov	r0, r4
 80160aa:	f001 facb 	bl	8017644 <__d2b>
 80160ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80160b2:	ee08 0a10 	vmov	s16, r0
 80160b6:	2d00      	cmp	r5, #0
 80160b8:	f000 8084 	beq.w	80161c4 <_dtoa_r+0x204>
 80160bc:	ee19 3a90 	vmov	r3, s19
 80160c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80160c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80160c8:	4656      	mov	r6, sl
 80160ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80160ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80160d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80160d6:	4b74      	ldr	r3, [pc, #464]	; (80162a8 <_dtoa_r+0x2e8>)
 80160d8:	2200      	movs	r2, #0
 80160da:	4630      	mov	r0, r6
 80160dc:	4639      	mov	r1, r7
 80160de:	f7ea f8fb 	bl	80002d8 <__aeabi_dsub>
 80160e2:	a365      	add	r3, pc, #404	; (adr r3, 8016278 <_dtoa_r+0x2b8>)
 80160e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e8:	f7ea faae 	bl	8000648 <__aeabi_dmul>
 80160ec:	a364      	add	r3, pc, #400	; (adr r3, 8016280 <_dtoa_r+0x2c0>)
 80160ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f2:	f7ea f8f3 	bl	80002dc <__adddf3>
 80160f6:	4606      	mov	r6, r0
 80160f8:	4628      	mov	r0, r5
 80160fa:	460f      	mov	r7, r1
 80160fc:	f7ea fa3a 	bl	8000574 <__aeabi_i2d>
 8016100:	a361      	add	r3, pc, #388	; (adr r3, 8016288 <_dtoa_r+0x2c8>)
 8016102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016106:	f7ea fa9f 	bl	8000648 <__aeabi_dmul>
 801610a:	4602      	mov	r2, r0
 801610c:	460b      	mov	r3, r1
 801610e:	4630      	mov	r0, r6
 8016110:	4639      	mov	r1, r7
 8016112:	f7ea f8e3 	bl	80002dc <__adddf3>
 8016116:	4606      	mov	r6, r0
 8016118:	460f      	mov	r7, r1
 801611a:	f7ea fd45 	bl	8000ba8 <__aeabi_d2iz>
 801611e:	2200      	movs	r2, #0
 8016120:	9000      	str	r0, [sp, #0]
 8016122:	2300      	movs	r3, #0
 8016124:	4630      	mov	r0, r6
 8016126:	4639      	mov	r1, r7
 8016128:	f7ea fd00 	bl	8000b2c <__aeabi_dcmplt>
 801612c:	b150      	cbz	r0, 8016144 <_dtoa_r+0x184>
 801612e:	9800      	ldr	r0, [sp, #0]
 8016130:	f7ea fa20 	bl	8000574 <__aeabi_i2d>
 8016134:	4632      	mov	r2, r6
 8016136:	463b      	mov	r3, r7
 8016138:	f7ea fcee 	bl	8000b18 <__aeabi_dcmpeq>
 801613c:	b910      	cbnz	r0, 8016144 <_dtoa_r+0x184>
 801613e:	9b00      	ldr	r3, [sp, #0]
 8016140:	3b01      	subs	r3, #1
 8016142:	9300      	str	r3, [sp, #0]
 8016144:	9b00      	ldr	r3, [sp, #0]
 8016146:	2b16      	cmp	r3, #22
 8016148:	d85a      	bhi.n	8016200 <_dtoa_r+0x240>
 801614a:	9a00      	ldr	r2, [sp, #0]
 801614c:	4b57      	ldr	r3, [pc, #348]	; (80162ac <_dtoa_r+0x2ec>)
 801614e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016156:	ec51 0b19 	vmov	r0, r1, d9
 801615a:	f7ea fce7 	bl	8000b2c <__aeabi_dcmplt>
 801615e:	2800      	cmp	r0, #0
 8016160:	d050      	beq.n	8016204 <_dtoa_r+0x244>
 8016162:	9b00      	ldr	r3, [sp, #0]
 8016164:	3b01      	subs	r3, #1
 8016166:	9300      	str	r3, [sp, #0]
 8016168:	2300      	movs	r3, #0
 801616a:	930b      	str	r3, [sp, #44]	; 0x2c
 801616c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801616e:	1b5d      	subs	r5, r3, r5
 8016170:	1e6b      	subs	r3, r5, #1
 8016172:	9305      	str	r3, [sp, #20]
 8016174:	bf45      	ittet	mi
 8016176:	f1c5 0301 	rsbmi	r3, r5, #1
 801617a:	9304      	strmi	r3, [sp, #16]
 801617c:	2300      	movpl	r3, #0
 801617e:	2300      	movmi	r3, #0
 8016180:	bf4c      	ite	mi
 8016182:	9305      	strmi	r3, [sp, #20]
 8016184:	9304      	strpl	r3, [sp, #16]
 8016186:	9b00      	ldr	r3, [sp, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	db3d      	blt.n	8016208 <_dtoa_r+0x248>
 801618c:	9b05      	ldr	r3, [sp, #20]
 801618e:	9a00      	ldr	r2, [sp, #0]
 8016190:	920a      	str	r2, [sp, #40]	; 0x28
 8016192:	4413      	add	r3, r2
 8016194:	9305      	str	r3, [sp, #20]
 8016196:	2300      	movs	r3, #0
 8016198:	9307      	str	r3, [sp, #28]
 801619a:	9b06      	ldr	r3, [sp, #24]
 801619c:	2b09      	cmp	r3, #9
 801619e:	f200 8089 	bhi.w	80162b4 <_dtoa_r+0x2f4>
 80161a2:	2b05      	cmp	r3, #5
 80161a4:	bfc4      	itt	gt
 80161a6:	3b04      	subgt	r3, #4
 80161a8:	9306      	strgt	r3, [sp, #24]
 80161aa:	9b06      	ldr	r3, [sp, #24]
 80161ac:	f1a3 0302 	sub.w	r3, r3, #2
 80161b0:	bfcc      	ite	gt
 80161b2:	2500      	movgt	r5, #0
 80161b4:	2501      	movle	r5, #1
 80161b6:	2b03      	cmp	r3, #3
 80161b8:	f200 8087 	bhi.w	80162ca <_dtoa_r+0x30a>
 80161bc:	e8df f003 	tbb	[pc, r3]
 80161c0:	59383a2d 	.word	0x59383a2d
 80161c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80161c8:	441d      	add	r5, r3
 80161ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80161ce:	2b20      	cmp	r3, #32
 80161d0:	bfc1      	itttt	gt
 80161d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80161d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80161da:	fa0b f303 	lslgt.w	r3, fp, r3
 80161de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80161e2:	bfda      	itte	le
 80161e4:	f1c3 0320 	rsble	r3, r3, #32
 80161e8:	fa06 f003 	lslle.w	r0, r6, r3
 80161ec:	4318      	orrgt	r0, r3
 80161ee:	f7ea f9b1 	bl	8000554 <__aeabi_ui2d>
 80161f2:	2301      	movs	r3, #1
 80161f4:	4606      	mov	r6, r0
 80161f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80161fa:	3d01      	subs	r5, #1
 80161fc:	930e      	str	r3, [sp, #56]	; 0x38
 80161fe:	e76a      	b.n	80160d6 <_dtoa_r+0x116>
 8016200:	2301      	movs	r3, #1
 8016202:	e7b2      	b.n	801616a <_dtoa_r+0x1aa>
 8016204:	900b      	str	r0, [sp, #44]	; 0x2c
 8016206:	e7b1      	b.n	801616c <_dtoa_r+0x1ac>
 8016208:	9b04      	ldr	r3, [sp, #16]
 801620a:	9a00      	ldr	r2, [sp, #0]
 801620c:	1a9b      	subs	r3, r3, r2
 801620e:	9304      	str	r3, [sp, #16]
 8016210:	4253      	negs	r3, r2
 8016212:	9307      	str	r3, [sp, #28]
 8016214:	2300      	movs	r3, #0
 8016216:	930a      	str	r3, [sp, #40]	; 0x28
 8016218:	e7bf      	b.n	801619a <_dtoa_r+0x1da>
 801621a:	2300      	movs	r3, #0
 801621c:	9308      	str	r3, [sp, #32]
 801621e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016220:	2b00      	cmp	r3, #0
 8016222:	dc55      	bgt.n	80162d0 <_dtoa_r+0x310>
 8016224:	2301      	movs	r3, #1
 8016226:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801622a:	461a      	mov	r2, r3
 801622c:	9209      	str	r2, [sp, #36]	; 0x24
 801622e:	e00c      	b.n	801624a <_dtoa_r+0x28a>
 8016230:	2301      	movs	r3, #1
 8016232:	e7f3      	b.n	801621c <_dtoa_r+0x25c>
 8016234:	2300      	movs	r3, #0
 8016236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016238:	9308      	str	r3, [sp, #32]
 801623a:	9b00      	ldr	r3, [sp, #0]
 801623c:	4413      	add	r3, r2
 801623e:	9302      	str	r3, [sp, #8]
 8016240:	3301      	adds	r3, #1
 8016242:	2b01      	cmp	r3, #1
 8016244:	9303      	str	r3, [sp, #12]
 8016246:	bfb8      	it	lt
 8016248:	2301      	movlt	r3, #1
 801624a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801624c:	2200      	movs	r2, #0
 801624e:	6042      	str	r2, [r0, #4]
 8016250:	2204      	movs	r2, #4
 8016252:	f102 0614 	add.w	r6, r2, #20
 8016256:	429e      	cmp	r6, r3
 8016258:	6841      	ldr	r1, [r0, #4]
 801625a:	d93d      	bls.n	80162d8 <_dtoa_r+0x318>
 801625c:	4620      	mov	r0, r4
 801625e:	f000 fec9 	bl	8016ff4 <_Balloc>
 8016262:	9001      	str	r0, [sp, #4]
 8016264:	2800      	cmp	r0, #0
 8016266:	d13b      	bne.n	80162e0 <_dtoa_r+0x320>
 8016268:	4b11      	ldr	r3, [pc, #68]	; (80162b0 <_dtoa_r+0x2f0>)
 801626a:	4602      	mov	r2, r0
 801626c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016270:	e6c0      	b.n	8015ff4 <_dtoa_r+0x34>
 8016272:	2301      	movs	r3, #1
 8016274:	e7df      	b.n	8016236 <_dtoa_r+0x276>
 8016276:	bf00      	nop
 8016278:	636f4361 	.word	0x636f4361
 801627c:	3fd287a7 	.word	0x3fd287a7
 8016280:	8b60c8b3 	.word	0x8b60c8b3
 8016284:	3fc68a28 	.word	0x3fc68a28
 8016288:	509f79fb 	.word	0x509f79fb
 801628c:	3fd34413 	.word	0x3fd34413
 8016290:	080184b9 	.word	0x080184b9
 8016294:	080184d0 	.word	0x080184d0
 8016298:	7ff00000 	.word	0x7ff00000
 801629c:	080184b5 	.word	0x080184b5
 80162a0:	080184ac 	.word	0x080184ac
 80162a4:	08018489 	.word	0x08018489
 80162a8:	3ff80000 	.word	0x3ff80000
 80162ac:	08018620 	.word	0x08018620
 80162b0:	0801852b 	.word	0x0801852b
 80162b4:	2501      	movs	r5, #1
 80162b6:	2300      	movs	r3, #0
 80162b8:	9306      	str	r3, [sp, #24]
 80162ba:	9508      	str	r5, [sp, #32]
 80162bc:	f04f 33ff 	mov.w	r3, #4294967295
 80162c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80162c4:	2200      	movs	r2, #0
 80162c6:	2312      	movs	r3, #18
 80162c8:	e7b0      	b.n	801622c <_dtoa_r+0x26c>
 80162ca:	2301      	movs	r3, #1
 80162cc:	9308      	str	r3, [sp, #32]
 80162ce:	e7f5      	b.n	80162bc <_dtoa_r+0x2fc>
 80162d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80162d6:	e7b8      	b.n	801624a <_dtoa_r+0x28a>
 80162d8:	3101      	adds	r1, #1
 80162da:	6041      	str	r1, [r0, #4]
 80162dc:	0052      	lsls	r2, r2, #1
 80162de:	e7b8      	b.n	8016252 <_dtoa_r+0x292>
 80162e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162e2:	9a01      	ldr	r2, [sp, #4]
 80162e4:	601a      	str	r2, [r3, #0]
 80162e6:	9b03      	ldr	r3, [sp, #12]
 80162e8:	2b0e      	cmp	r3, #14
 80162ea:	f200 809d 	bhi.w	8016428 <_dtoa_r+0x468>
 80162ee:	2d00      	cmp	r5, #0
 80162f0:	f000 809a 	beq.w	8016428 <_dtoa_r+0x468>
 80162f4:	9b00      	ldr	r3, [sp, #0]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	dd32      	ble.n	8016360 <_dtoa_r+0x3a0>
 80162fa:	4ab7      	ldr	r2, [pc, #732]	; (80165d8 <_dtoa_r+0x618>)
 80162fc:	f003 030f 	and.w	r3, r3, #15
 8016300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016308:	9b00      	ldr	r3, [sp, #0]
 801630a:	05d8      	lsls	r0, r3, #23
 801630c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016310:	d516      	bpl.n	8016340 <_dtoa_r+0x380>
 8016312:	4bb2      	ldr	r3, [pc, #712]	; (80165dc <_dtoa_r+0x61c>)
 8016314:	ec51 0b19 	vmov	r0, r1, d9
 8016318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801631c:	f7ea fabe 	bl	800089c <__aeabi_ddiv>
 8016320:	f007 070f 	and.w	r7, r7, #15
 8016324:	4682      	mov	sl, r0
 8016326:	468b      	mov	fp, r1
 8016328:	2503      	movs	r5, #3
 801632a:	4eac      	ldr	r6, [pc, #688]	; (80165dc <_dtoa_r+0x61c>)
 801632c:	b957      	cbnz	r7, 8016344 <_dtoa_r+0x384>
 801632e:	4642      	mov	r2, r8
 8016330:	464b      	mov	r3, r9
 8016332:	4650      	mov	r0, sl
 8016334:	4659      	mov	r1, fp
 8016336:	f7ea fab1 	bl	800089c <__aeabi_ddiv>
 801633a:	4682      	mov	sl, r0
 801633c:	468b      	mov	fp, r1
 801633e:	e028      	b.n	8016392 <_dtoa_r+0x3d2>
 8016340:	2502      	movs	r5, #2
 8016342:	e7f2      	b.n	801632a <_dtoa_r+0x36a>
 8016344:	07f9      	lsls	r1, r7, #31
 8016346:	d508      	bpl.n	801635a <_dtoa_r+0x39a>
 8016348:	4640      	mov	r0, r8
 801634a:	4649      	mov	r1, r9
 801634c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016350:	f7ea f97a 	bl	8000648 <__aeabi_dmul>
 8016354:	3501      	adds	r5, #1
 8016356:	4680      	mov	r8, r0
 8016358:	4689      	mov	r9, r1
 801635a:	107f      	asrs	r7, r7, #1
 801635c:	3608      	adds	r6, #8
 801635e:	e7e5      	b.n	801632c <_dtoa_r+0x36c>
 8016360:	f000 809b 	beq.w	801649a <_dtoa_r+0x4da>
 8016364:	9b00      	ldr	r3, [sp, #0]
 8016366:	4f9d      	ldr	r7, [pc, #628]	; (80165dc <_dtoa_r+0x61c>)
 8016368:	425e      	negs	r6, r3
 801636a:	4b9b      	ldr	r3, [pc, #620]	; (80165d8 <_dtoa_r+0x618>)
 801636c:	f006 020f 	and.w	r2, r6, #15
 8016370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016378:	ec51 0b19 	vmov	r0, r1, d9
 801637c:	f7ea f964 	bl	8000648 <__aeabi_dmul>
 8016380:	1136      	asrs	r6, r6, #4
 8016382:	4682      	mov	sl, r0
 8016384:	468b      	mov	fp, r1
 8016386:	2300      	movs	r3, #0
 8016388:	2502      	movs	r5, #2
 801638a:	2e00      	cmp	r6, #0
 801638c:	d17a      	bne.n	8016484 <_dtoa_r+0x4c4>
 801638e:	2b00      	cmp	r3, #0
 8016390:	d1d3      	bne.n	801633a <_dtoa_r+0x37a>
 8016392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016394:	2b00      	cmp	r3, #0
 8016396:	f000 8082 	beq.w	801649e <_dtoa_r+0x4de>
 801639a:	4b91      	ldr	r3, [pc, #580]	; (80165e0 <_dtoa_r+0x620>)
 801639c:	2200      	movs	r2, #0
 801639e:	4650      	mov	r0, sl
 80163a0:	4659      	mov	r1, fp
 80163a2:	f7ea fbc3 	bl	8000b2c <__aeabi_dcmplt>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	d079      	beq.n	801649e <_dtoa_r+0x4de>
 80163aa:	9b03      	ldr	r3, [sp, #12]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d076      	beq.n	801649e <_dtoa_r+0x4de>
 80163b0:	9b02      	ldr	r3, [sp, #8]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	dd36      	ble.n	8016424 <_dtoa_r+0x464>
 80163b6:	9b00      	ldr	r3, [sp, #0]
 80163b8:	4650      	mov	r0, sl
 80163ba:	4659      	mov	r1, fp
 80163bc:	1e5f      	subs	r7, r3, #1
 80163be:	2200      	movs	r2, #0
 80163c0:	4b88      	ldr	r3, [pc, #544]	; (80165e4 <_dtoa_r+0x624>)
 80163c2:	f7ea f941 	bl	8000648 <__aeabi_dmul>
 80163c6:	9e02      	ldr	r6, [sp, #8]
 80163c8:	4682      	mov	sl, r0
 80163ca:	468b      	mov	fp, r1
 80163cc:	3501      	adds	r5, #1
 80163ce:	4628      	mov	r0, r5
 80163d0:	f7ea f8d0 	bl	8000574 <__aeabi_i2d>
 80163d4:	4652      	mov	r2, sl
 80163d6:	465b      	mov	r3, fp
 80163d8:	f7ea f936 	bl	8000648 <__aeabi_dmul>
 80163dc:	4b82      	ldr	r3, [pc, #520]	; (80165e8 <_dtoa_r+0x628>)
 80163de:	2200      	movs	r2, #0
 80163e0:	f7e9 ff7c 	bl	80002dc <__adddf3>
 80163e4:	46d0      	mov	r8, sl
 80163e6:	46d9      	mov	r9, fp
 80163e8:	4682      	mov	sl, r0
 80163ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80163ee:	2e00      	cmp	r6, #0
 80163f0:	d158      	bne.n	80164a4 <_dtoa_r+0x4e4>
 80163f2:	4b7e      	ldr	r3, [pc, #504]	; (80165ec <_dtoa_r+0x62c>)
 80163f4:	2200      	movs	r2, #0
 80163f6:	4640      	mov	r0, r8
 80163f8:	4649      	mov	r1, r9
 80163fa:	f7e9 ff6d 	bl	80002d8 <__aeabi_dsub>
 80163fe:	4652      	mov	r2, sl
 8016400:	465b      	mov	r3, fp
 8016402:	4680      	mov	r8, r0
 8016404:	4689      	mov	r9, r1
 8016406:	f7ea fbaf 	bl	8000b68 <__aeabi_dcmpgt>
 801640a:	2800      	cmp	r0, #0
 801640c:	f040 8295 	bne.w	801693a <_dtoa_r+0x97a>
 8016410:	4652      	mov	r2, sl
 8016412:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016416:	4640      	mov	r0, r8
 8016418:	4649      	mov	r1, r9
 801641a:	f7ea fb87 	bl	8000b2c <__aeabi_dcmplt>
 801641e:	2800      	cmp	r0, #0
 8016420:	f040 8289 	bne.w	8016936 <_dtoa_r+0x976>
 8016424:	ec5b ab19 	vmov	sl, fp, d9
 8016428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801642a:	2b00      	cmp	r3, #0
 801642c:	f2c0 8148 	blt.w	80166c0 <_dtoa_r+0x700>
 8016430:	9a00      	ldr	r2, [sp, #0]
 8016432:	2a0e      	cmp	r2, #14
 8016434:	f300 8144 	bgt.w	80166c0 <_dtoa_r+0x700>
 8016438:	4b67      	ldr	r3, [pc, #412]	; (80165d8 <_dtoa_r+0x618>)
 801643a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801643e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016444:	2b00      	cmp	r3, #0
 8016446:	f280 80d5 	bge.w	80165f4 <_dtoa_r+0x634>
 801644a:	9b03      	ldr	r3, [sp, #12]
 801644c:	2b00      	cmp	r3, #0
 801644e:	f300 80d1 	bgt.w	80165f4 <_dtoa_r+0x634>
 8016452:	f040 826f 	bne.w	8016934 <_dtoa_r+0x974>
 8016456:	4b65      	ldr	r3, [pc, #404]	; (80165ec <_dtoa_r+0x62c>)
 8016458:	2200      	movs	r2, #0
 801645a:	4640      	mov	r0, r8
 801645c:	4649      	mov	r1, r9
 801645e:	f7ea f8f3 	bl	8000648 <__aeabi_dmul>
 8016462:	4652      	mov	r2, sl
 8016464:	465b      	mov	r3, fp
 8016466:	f7ea fb75 	bl	8000b54 <__aeabi_dcmpge>
 801646a:	9e03      	ldr	r6, [sp, #12]
 801646c:	4637      	mov	r7, r6
 801646e:	2800      	cmp	r0, #0
 8016470:	f040 8245 	bne.w	80168fe <_dtoa_r+0x93e>
 8016474:	9d01      	ldr	r5, [sp, #4]
 8016476:	2331      	movs	r3, #49	; 0x31
 8016478:	f805 3b01 	strb.w	r3, [r5], #1
 801647c:	9b00      	ldr	r3, [sp, #0]
 801647e:	3301      	adds	r3, #1
 8016480:	9300      	str	r3, [sp, #0]
 8016482:	e240      	b.n	8016906 <_dtoa_r+0x946>
 8016484:	07f2      	lsls	r2, r6, #31
 8016486:	d505      	bpl.n	8016494 <_dtoa_r+0x4d4>
 8016488:	e9d7 2300 	ldrd	r2, r3, [r7]
 801648c:	f7ea f8dc 	bl	8000648 <__aeabi_dmul>
 8016490:	3501      	adds	r5, #1
 8016492:	2301      	movs	r3, #1
 8016494:	1076      	asrs	r6, r6, #1
 8016496:	3708      	adds	r7, #8
 8016498:	e777      	b.n	801638a <_dtoa_r+0x3ca>
 801649a:	2502      	movs	r5, #2
 801649c:	e779      	b.n	8016392 <_dtoa_r+0x3d2>
 801649e:	9f00      	ldr	r7, [sp, #0]
 80164a0:	9e03      	ldr	r6, [sp, #12]
 80164a2:	e794      	b.n	80163ce <_dtoa_r+0x40e>
 80164a4:	9901      	ldr	r1, [sp, #4]
 80164a6:	4b4c      	ldr	r3, [pc, #304]	; (80165d8 <_dtoa_r+0x618>)
 80164a8:	4431      	add	r1, r6
 80164aa:	910d      	str	r1, [sp, #52]	; 0x34
 80164ac:	9908      	ldr	r1, [sp, #32]
 80164ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80164b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80164b6:	2900      	cmp	r1, #0
 80164b8:	d043      	beq.n	8016542 <_dtoa_r+0x582>
 80164ba:	494d      	ldr	r1, [pc, #308]	; (80165f0 <_dtoa_r+0x630>)
 80164bc:	2000      	movs	r0, #0
 80164be:	f7ea f9ed 	bl	800089c <__aeabi_ddiv>
 80164c2:	4652      	mov	r2, sl
 80164c4:	465b      	mov	r3, fp
 80164c6:	f7e9 ff07 	bl	80002d8 <__aeabi_dsub>
 80164ca:	9d01      	ldr	r5, [sp, #4]
 80164cc:	4682      	mov	sl, r0
 80164ce:	468b      	mov	fp, r1
 80164d0:	4649      	mov	r1, r9
 80164d2:	4640      	mov	r0, r8
 80164d4:	f7ea fb68 	bl	8000ba8 <__aeabi_d2iz>
 80164d8:	4606      	mov	r6, r0
 80164da:	f7ea f84b 	bl	8000574 <__aeabi_i2d>
 80164de:	4602      	mov	r2, r0
 80164e0:	460b      	mov	r3, r1
 80164e2:	4640      	mov	r0, r8
 80164e4:	4649      	mov	r1, r9
 80164e6:	f7e9 fef7 	bl	80002d8 <__aeabi_dsub>
 80164ea:	3630      	adds	r6, #48	; 0x30
 80164ec:	f805 6b01 	strb.w	r6, [r5], #1
 80164f0:	4652      	mov	r2, sl
 80164f2:	465b      	mov	r3, fp
 80164f4:	4680      	mov	r8, r0
 80164f6:	4689      	mov	r9, r1
 80164f8:	f7ea fb18 	bl	8000b2c <__aeabi_dcmplt>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d163      	bne.n	80165c8 <_dtoa_r+0x608>
 8016500:	4642      	mov	r2, r8
 8016502:	464b      	mov	r3, r9
 8016504:	4936      	ldr	r1, [pc, #216]	; (80165e0 <_dtoa_r+0x620>)
 8016506:	2000      	movs	r0, #0
 8016508:	f7e9 fee6 	bl	80002d8 <__aeabi_dsub>
 801650c:	4652      	mov	r2, sl
 801650e:	465b      	mov	r3, fp
 8016510:	f7ea fb0c 	bl	8000b2c <__aeabi_dcmplt>
 8016514:	2800      	cmp	r0, #0
 8016516:	f040 80b5 	bne.w	8016684 <_dtoa_r+0x6c4>
 801651a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801651c:	429d      	cmp	r5, r3
 801651e:	d081      	beq.n	8016424 <_dtoa_r+0x464>
 8016520:	4b30      	ldr	r3, [pc, #192]	; (80165e4 <_dtoa_r+0x624>)
 8016522:	2200      	movs	r2, #0
 8016524:	4650      	mov	r0, sl
 8016526:	4659      	mov	r1, fp
 8016528:	f7ea f88e 	bl	8000648 <__aeabi_dmul>
 801652c:	4b2d      	ldr	r3, [pc, #180]	; (80165e4 <_dtoa_r+0x624>)
 801652e:	4682      	mov	sl, r0
 8016530:	468b      	mov	fp, r1
 8016532:	4640      	mov	r0, r8
 8016534:	4649      	mov	r1, r9
 8016536:	2200      	movs	r2, #0
 8016538:	f7ea f886 	bl	8000648 <__aeabi_dmul>
 801653c:	4680      	mov	r8, r0
 801653e:	4689      	mov	r9, r1
 8016540:	e7c6      	b.n	80164d0 <_dtoa_r+0x510>
 8016542:	4650      	mov	r0, sl
 8016544:	4659      	mov	r1, fp
 8016546:	f7ea f87f 	bl	8000648 <__aeabi_dmul>
 801654a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801654c:	9d01      	ldr	r5, [sp, #4]
 801654e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016550:	4682      	mov	sl, r0
 8016552:	468b      	mov	fp, r1
 8016554:	4649      	mov	r1, r9
 8016556:	4640      	mov	r0, r8
 8016558:	f7ea fb26 	bl	8000ba8 <__aeabi_d2iz>
 801655c:	4606      	mov	r6, r0
 801655e:	f7ea f809 	bl	8000574 <__aeabi_i2d>
 8016562:	3630      	adds	r6, #48	; 0x30
 8016564:	4602      	mov	r2, r0
 8016566:	460b      	mov	r3, r1
 8016568:	4640      	mov	r0, r8
 801656a:	4649      	mov	r1, r9
 801656c:	f7e9 feb4 	bl	80002d8 <__aeabi_dsub>
 8016570:	f805 6b01 	strb.w	r6, [r5], #1
 8016574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016576:	429d      	cmp	r5, r3
 8016578:	4680      	mov	r8, r0
 801657a:	4689      	mov	r9, r1
 801657c:	f04f 0200 	mov.w	r2, #0
 8016580:	d124      	bne.n	80165cc <_dtoa_r+0x60c>
 8016582:	4b1b      	ldr	r3, [pc, #108]	; (80165f0 <_dtoa_r+0x630>)
 8016584:	4650      	mov	r0, sl
 8016586:	4659      	mov	r1, fp
 8016588:	f7e9 fea8 	bl	80002dc <__adddf3>
 801658c:	4602      	mov	r2, r0
 801658e:	460b      	mov	r3, r1
 8016590:	4640      	mov	r0, r8
 8016592:	4649      	mov	r1, r9
 8016594:	f7ea fae8 	bl	8000b68 <__aeabi_dcmpgt>
 8016598:	2800      	cmp	r0, #0
 801659a:	d173      	bne.n	8016684 <_dtoa_r+0x6c4>
 801659c:	4652      	mov	r2, sl
 801659e:	465b      	mov	r3, fp
 80165a0:	4913      	ldr	r1, [pc, #76]	; (80165f0 <_dtoa_r+0x630>)
 80165a2:	2000      	movs	r0, #0
 80165a4:	f7e9 fe98 	bl	80002d8 <__aeabi_dsub>
 80165a8:	4602      	mov	r2, r0
 80165aa:	460b      	mov	r3, r1
 80165ac:	4640      	mov	r0, r8
 80165ae:	4649      	mov	r1, r9
 80165b0:	f7ea fabc 	bl	8000b2c <__aeabi_dcmplt>
 80165b4:	2800      	cmp	r0, #0
 80165b6:	f43f af35 	beq.w	8016424 <_dtoa_r+0x464>
 80165ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80165bc:	1e6b      	subs	r3, r5, #1
 80165be:	930f      	str	r3, [sp, #60]	; 0x3c
 80165c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80165c4:	2b30      	cmp	r3, #48	; 0x30
 80165c6:	d0f8      	beq.n	80165ba <_dtoa_r+0x5fa>
 80165c8:	9700      	str	r7, [sp, #0]
 80165ca:	e049      	b.n	8016660 <_dtoa_r+0x6a0>
 80165cc:	4b05      	ldr	r3, [pc, #20]	; (80165e4 <_dtoa_r+0x624>)
 80165ce:	f7ea f83b 	bl	8000648 <__aeabi_dmul>
 80165d2:	4680      	mov	r8, r0
 80165d4:	4689      	mov	r9, r1
 80165d6:	e7bd      	b.n	8016554 <_dtoa_r+0x594>
 80165d8:	08018620 	.word	0x08018620
 80165dc:	080185f8 	.word	0x080185f8
 80165e0:	3ff00000 	.word	0x3ff00000
 80165e4:	40240000 	.word	0x40240000
 80165e8:	401c0000 	.word	0x401c0000
 80165ec:	40140000 	.word	0x40140000
 80165f0:	3fe00000 	.word	0x3fe00000
 80165f4:	9d01      	ldr	r5, [sp, #4]
 80165f6:	4656      	mov	r6, sl
 80165f8:	465f      	mov	r7, fp
 80165fa:	4642      	mov	r2, r8
 80165fc:	464b      	mov	r3, r9
 80165fe:	4630      	mov	r0, r6
 8016600:	4639      	mov	r1, r7
 8016602:	f7ea f94b 	bl	800089c <__aeabi_ddiv>
 8016606:	f7ea facf 	bl	8000ba8 <__aeabi_d2iz>
 801660a:	4682      	mov	sl, r0
 801660c:	f7e9 ffb2 	bl	8000574 <__aeabi_i2d>
 8016610:	4642      	mov	r2, r8
 8016612:	464b      	mov	r3, r9
 8016614:	f7ea f818 	bl	8000648 <__aeabi_dmul>
 8016618:	4602      	mov	r2, r0
 801661a:	460b      	mov	r3, r1
 801661c:	4630      	mov	r0, r6
 801661e:	4639      	mov	r1, r7
 8016620:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8016624:	f7e9 fe58 	bl	80002d8 <__aeabi_dsub>
 8016628:	f805 6b01 	strb.w	r6, [r5], #1
 801662c:	9e01      	ldr	r6, [sp, #4]
 801662e:	9f03      	ldr	r7, [sp, #12]
 8016630:	1bae      	subs	r6, r5, r6
 8016632:	42b7      	cmp	r7, r6
 8016634:	4602      	mov	r2, r0
 8016636:	460b      	mov	r3, r1
 8016638:	d135      	bne.n	80166a6 <_dtoa_r+0x6e6>
 801663a:	f7e9 fe4f 	bl	80002dc <__adddf3>
 801663e:	4642      	mov	r2, r8
 8016640:	464b      	mov	r3, r9
 8016642:	4606      	mov	r6, r0
 8016644:	460f      	mov	r7, r1
 8016646:	f7ea fa8f 	bl	8000b68 <__aeabi_dcmpgt>
 801664a:	b9d0      	cbnz	r0, 8016682 <_dtoa_r+0x6c2>
 801664c:	4642      	mov	r2, r8
 801664e:	464b      	mov	r3, r9
 8016650:	4630      	mov	r0, r6
 8016652:	4639      	mov	r1, r7
 8016654:	f7ea fa60 	bl	8000b18 <__aeabi_dcmpeq>
 8016658:	b110      	cbz	r0, 8016660 <_dtoa_r+0x6a0>
 801665a:	f01a 0f01 	tst.w	sl, #1
 801665e:	d110      	bne.n	8016682 <_dtoa_r+0x6c2>
 8016660:	4620      	mov	r0, r4
 8016662:	ee18 1a10 	vmov	r1, s16
 8016666:	f000 fd05 	bl	8017074 <_Bfree>
 801666a:	2300      	movs	r3, #0
 801666c:	9800      	ldr	r0, [sp, #0]
 801666e:	702b      	strb	r3, [r5, #0]
 8016670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016672:	3001      	adds	r0, #1
 8016674:	6018      	str	r0, [r3, #0]
 8016676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016678:	2b00      	cmp	r3, #0
 801667a:	f43f acf1 	beq.w	8016060 <_dtoa_r+0xa0>
 801667e:	601d      	str	r5, [r3, #0]
 8016680:	e4ee      	b.n	8016060 <_dtoa_r+0xa0>
 8016682:	9f00      	ldr	r7, [sp, #0]
 8016684:	462b      	mov	r3, r5
 8016686:	461d      	mov	r5, r3
 8016688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801668c:	2a39      	cmp	r2, #57	; 0x39
 801668e:	d106      	bne.n	801669e <_dtoa_r+0x6de>
 8016690:	9a01      	ldr	r2, [sp, #4]
 8016692:	429a      	cmp	r2, r3
 8016694:	d1f7      	bne.n	8016686 <_dtoa_r+0x6c6>
 8016696:	9901      	ldr	r1, [sp, #4]
 8016698:	2230      	movs	r2, #48	; 0x30
 801669a:	3701      	adds	r7, #1
 801669c:	700a      	strb	r2, [r1, #0]
 801669e:	781a      	ldrb	r2, [r3, #0]
 80166a0:	3201      	adds	r2, #1
 80166a2:	701a      	strb	r2, [r3, #0]
 80166a4:	e790      	b.n	80165c8 <_dtoa_r+0x608>
 80166a6:	4ba6      	ldr	r3, [pc, #664]	; (8016940 <_dtoa_r+0x980>)
 80166a8:	2200      	movs	r2, #0
 80166aa:	f7e9 ffcd 	bl	8000648 <__aeabi_dmul>
 80166ae:	2200      	movs	r2, #0
 80166b0:	2300      	movs	r3, #0
 80166b2:	4606      	mov	r6, r0
 80166b4:	460f      	mov	r7, r1
 80166b6:	f7ea fa2f 	bl	8000b18 <__aeabi_dcmpeq>
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d09d      	beq.n	80165fa <_dtoa_r+0x63a>
 80166be:	e7cf      	b.n	8016660 <_dtoa_r+0x6a0>
 80166c0:	9a08      	ldr	r2, [sp, #32]
 80166c2:	2a00      	cmp	r2, #0
 80166c4:	f000 80d7 	beq.w	8016876 <_dtoa_r+0x8b6>
 80166c8:	9a06      	ldr	r2, [sp, #24]
 80166ca:	2a01      	cmp	r2, #1
 80166cc:	f300 80ba 	bgt.w	8016844 <_dtoa_r+0x884>
 80166d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80166d2:	2a00      	cmp	r2, #0
 80166d4:	f000 80b2 	beq.w	801683c <_dtoa_r+0x87c>
 80166d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80166dc:	9e07      	ldr	r6, [sp, #28]
 80166de:	9d04      	ldr	r5, [sp, #16]
 80166e0:	9a04      	ldr	r2, [sp, #16]
 80166e2:	441a      	add	r2, r3
 80166e4:	9204      	str	r2, [sp, #16]
 80166e6:	9a05      	ldr	r2, [sp, #20]
 80166e8:	2101      	movs	r1, #1
 80166ea:	441a      	add	r2, r3
 80166ec:	4620      	mov	r0, r4
 80166ee:	9205      	str	r2, [sp, #20]
 80166f0:	f000 fd78 	bl	80171e4 <__i2b>
 80166f4:	4607      	mov	r7, r0
 80166f6:	2d00      	cmp	r5, #0
 80166f8:	dd0c      	ble.n	8016714 <_dtoa_r+0x754>
 80166fa:	9b05      	ldr	r3, [sp, #20]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	dd09      	ble.n	8016714 <_dtoa_r+0x754>
 8016700:	42ab      	cmp	r3, r5
 8016702:	9a04      	ldr	r2, [sp, #16]
 8016704:	bfa8      	it	ge
 8016706:	462b      	movge	r3, r5
 8016708:	1ad2      	subs	r2, r2, r3
 801670a:	9204      	str	r2, [sp, #16]
 801670c:	9a05      	ldr	r2, [sp, #20]
 801670e:	1aed      	subs	r5, r5, r3
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	9305      	str	r3, [sp, #20]
 8016714:	9b07      	ldr	r3, [sp, #28]
 8016716:	b31b      	cbz	r3, 8016760 <_dtoa_r+0x7a0>
 8016718:	9b08      	ldr	r3, [sp, #32]
 801671a:	2b00      	cmp	r3, #0
 801671c:	f000 80af 	beq.w	801687e <_dtoa_r+0x8be>
 8016720:	2e00      	cmp	r6, #0
 8016722:	dd13      	ble.n	801674c <_dtoa_r+0x78c>
 8016724:	4639      	mov	r1, r7
 8016726:	4632      	mov	r2, r6
 8016728:	4620      	mov	r0, r4
 801672a:	f000 fe1b 	bl	8017364 <__pow5mult>
 801672e:	ee18 2a10 	vmov	r2, s16
 8016732:	4601      	mov	r1, r0
 8016734:	4607      	mov	r7, r0
 8016736:	4620      	mov	r0, r4
 8016738:	f000 fd6a 	bl	8017210 <__multiply>
 801673c:	ee18 1a10 	vmov	r1, s16
 8016740:	4680      	mov	r8, r0
 8016742:	4620      	mov	r0, r4
 8016744:	f000 fc96 	bl	8017074 <_Bfree>
 8016748:	ee08 8a10 	vmov	s16, r8
 801674c:	9b07      	ldr	r3, [sp, #28]
 801674e:	1b9a      	subs	r2, r3, r6
 8016750:	d006      	beq.n	8016760 <_dtoa_r+0x7a0>
 8016752:	ee18 1a10 	vmov	r1, s16
 8016756:	4620      	mov	r0, r4
 8016758:	f000 fe04 	bl	8017364 <__pow5mult>
 801675c:	ee08 0a10 	vmov	s16, r0
 8016760:	2101      	movs	r1, #1
 8016762:	4620      	mov	r0, r4
 8016764:	f000 fd3e 	bl	80171e4 <__i2b>
 8016768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801676a:	2b00      	cmp	r3, #0
 801676c:	4606      	mov	r6, r0
 801676e:	f340 8088 	ble.w	8016882 <_dtoa_r+0x8c2>
 8016772:	461a      	mov	r2, r3
 8016774:	4601      	mov	r1, r0
 8016776:	4620      	mov	r0, r4
 8016778:	f000 fdf4 	bl	8017364 <__pow5mult>
 801677c:	9b06      	ldr	r3, [sp, #24]
 801677e:	2b01      	cmp	r3, #1
 8016780:	4606      	mov	r6, r0
 8016782:	f340 8081 	ble.w	8016888 <_dtoa_r+0x8c8>
 8016786:	f04f 0800 	mov.w	r8, #0
 801678a:	6933      	ldr	r3, [r6, #16]
 801678c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016790:	6918      	ldr	r0, [r3, #16]
 8016792:	f000 fcd7 	bl	8017144 <__hi0bits>
 8016796:	f1c0 0020 	rsb	r0, r0, #32
 801679a:	9b05      	ldr	r3, [sp, #20]
 801679c:	4418      	add	r0, r3
 801679e:	f010 001f 	ands.w	r0, r0, #31
 80167a2:	f000 8092 	beq.w	80168ca <_dtoa_r+0x90a>
 80167a6:	f1c0 0320 	rsb	r3, r0, #32
 80167aa:	2b04      	cmp	r3, #4
 80167ac:	f340 808a 	ble.w	80168c4 <_dtoa_r+0x904>
 80167b0:	f1c0 001c 	rsb	r0, r0, #28
 80167b4:	9b04      	ldr	r3, [sp, #16]
 80167b6:	4403      	add	r3, r0
 80167b8:	9304      	str	r3, [sp, #16]
 80167ba:	9b05      	ldr	r3, [sp, #20]
 80167bc:	4403      	add	r3, r0
 80167be:	4405      	add	r5, r0
 80167c0:	9305      	str	r3, [sp, #20]
 80167c2:	9b04      	ldr	r3, [sp, #16]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	dd07      	ble.n	80167d8 <_dtoa_r+0x818>
 80167c8:	ee18 1a10 	vmov	r1, s16
 80167cc:	461a      	mov	r2, r3
 80167ce:	4620      	mov	r0, r4
 80167d0:	f000 fe22 	bl	8017418 <__lshift>
 80167d4:	ee08 0a10 	vmov	s16, r0
 80167d8:	9b05      	ldr	r3, [sp, #20]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	dd05      	ble.n	80167ea <_dtoa_r+0x82a>
 80167de:	4631      	mov	r1, r6
 80167e0:	461a      	mov	r2, r3
 80167e2:	4620      	mov	r0, r4
 80167e4:	f000 fe18 	bl	8017418 <__lshift>
 80167e8:	4606      	mov	r6, r0
 80167ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d06e      	beq.n	80168ce <_dtoa_r+0x90e>
 80167f0:	ee18 0a10 	vmov	r0, s16
 80167f4:	4631      	mov	r1, r6
 80167f6:	f000 fe7f 	bl	80174f8 <__mcmp>
 80167fa:	2800      	cmp	r0, #0
 80167fc:	da67      	bge.n	80168ce <_dtoa_r+0x90e>
 80167fe:	9b00      	ldr	r3, [sp, #0]
 8016800:	3b01      	subs	r3, #1
 8016802:	ee18 1a10 	vmov	r1, s16
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	220a      	movs	r2, #10
 801680a:	2300      	movs	r3, #0
 801680c:	4620      	mov	r0, r4
 801680e:	f000 fc53 	bl	80170b8 <__multadd>
 8016812:	9b08      	ldr	r3, [sp, #32]
 8016814:	ee08 0a10 	vmov	s16, r0
 8016818:	2b00      	cmp	r3, #0
 801681a:	f000 81b1 	beq.w	8016b80 <_dtoa_r+0xbc0>
 801681e:	2300      	movs	r3, #0
 8016820:	4639      	mov	r1, r7
 8016822:	220a      	movs	r2, #10
 8016824:	4620      	mov	r0, r4
 8016826:	f000 fc47 	bl	80170b8 <__multadd>
 801682a:	9b02      	ldr	r3, [sp, #8]
 801682c:	2b00      	cmp	r3, #0
 801682e:	4607      	mov	r7, r0
 8016830:	f300 808e 	bgt.w	8016950 <_dtoa_r+0x990>
 8016834:	9b06      	ldr	r3, [sp, #24]
 8016836:	2b02      	cmp	r3, #2
 8016838:	dc51      	bgt.n	80168de <_dtoa_r+0x91e>
 801683a:	e089      	b.n	8016950 <_dtoa_r+0x990>
 801683c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801683e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016842:	e74b      	b.n	80166dc <_dtoa_r+0x71c>
 8016844:	9b03      	ldr	r3, [sp, #12]
 8016846:	1e5e      	subs	r6, r3, #1
 8016848:	9b07      	ldr	r3, [sp, #28]
 801684a:	42b3      	cmp	r3, r6
 801684c:	bfbf      	itttt	lt
 801684e:	9b07      	ldrlt	r3, [sp, #28]
 8016850:	9607      	strlt	r6, [sp, #28]
 8016852:	1af2      	sublt	r2, r6, r3
 8016854:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016856:	bfb6      	itet	lt
 8016858:	189b      	addlt	r3, r3, r2
 801685a:	1b9e      	subge	r6, r3, r6
 801685c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801685e:	9b03      	ldr	r3, [sp, #12]
 8016860:	bfb8      	it	lt
 8016862:	2600      	movlt	r6, #0
 8016864:	2b00      	cmp	r3, #0
 8016866:	bfb7      	itett	lt
 8016868:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801686c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016870:	1a9d      	sublt	r5, r3, r2
 8016872:	2300      	movlt	r3, #0
 8016874:	e734      	b.n	80166e0 <_dtoa_r+0x720>
 8016876:	9e07      	ldr	r6, [sp, #28]
 8016878:	9d04      	ldr	r5, [sp, #16]
 801687a:	9f08      	ldr	r7, [sp, #32]
 801687c:	e73b      	b.n	80166f6 <_dtoa_r+0x736>
 801687e:	9a07      	ldr	r2, [sp, #28]
 8016880:	e767      	b.n	8016752 <_dtoa_r+0x792>
 8016882:	9b06      	ldr	r3, [sp, #24]
 8016884:	2b01      	cmp	r3, #1
 8016886:	dc18      	bgt.n	80168ba <_dtoa_r+0x8fa>
 8016888:	f1ba 0f00 	cmp.w	sl, #0
 801688c:	d115      	bne.n	80168ba <_dtoa_r+0x8fa>
 801688e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016892:	b993      	cbnz	r3, 80168ba <_dtoa_r+0x8fa>
 8016894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016898:	0d1b      	lsrs	r3, r3, #20
 801689a:	051b      	lsls	r3, r3, #20
 801689c:	b183      	cbz	r3, 80168c0 <_dtoa_r+0x900>
 801689e:	9b04      	ldr	r3, [sp, #16]
 80168a0:	3301      	adds	r3, #1
 80168a2:	9304      	str	r3, [sp, #16]
 80168a4:	9b05      	ldr	r3, [sp, #20]
 80168a6:	3301      	adds	r3, #1
 80168a8:	9305      	str	r3, [sp, #20]
 80168aa:	f04f 0801 	mov.w	r8, #1
 80168ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f47f af6a 	bne.w	801678a <_dtoa_r+0x7ca>
 80168b6:	2001      	movs	r0, #1
 80168b8:	e76f      	b.n	801679a <_dtoa_r+0x7da>
 80168ba:	f04f 0800 	mov.w	r8, #0
 80168be:	e7f6      	b.n	80168ae <_dtoa_r+0x8ee>
 80168c0:	4698      	mov	r8, r3
 80168c2:	e7f4      	b.n	80168ae <_dtoa_r+0x8ee>
 80168c4:	f43f af7d 	beq.w	80167c2 <_dtoa_r+0x802>
 80168c8:	4618      	mov	r0, r3
 80168ca:	301c      	adds	r0, #28
 80168cc:	e772      	b.n	80167b4 <_dtoa_r+0x7f4>
 80168ce:	9b03      	ldr	r3, [sp, #12]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	dc37      	bgt.n	8016944 <_dtoa_r+0x984>
 80168d4:	9b06      	ldr	r3, [sp, #24]
 80168d6:	2b02      	cmp	r3, #2
 80168d8:	dd34      	ble.n	8016944 <_dtoa_r+0x984>
 80168da:	9b03      	ldr	r3, [sp, #12]
 80168dc:	9302      	str	r3, [sp, #8]
 80168de:	9b02      	ldr	r3, [sp, #8]
 80168e0:	b96b      	cbnz	r3, 80168fe <_dtoa_r+0x93e>
 80168e2:	4631      	mov	r1, r6
 80168e4:	2205      	movs	r2, #5
 80168e6:	4620      	mov	r0, r4
 80168e8:	f000 fbe6 	bl	80170b8 <__multadd>
 80168ec:	4601      	mov	r1, r0
 80168ee:	4606      	mov	r6, r0
 80168f0:	ee18 0a10 	vmov	r0, s16
 80168f4:	f000 fe00 	bl	80174f8 <__mcmp>
 80168f8:	2800      	cmp	r0, #0
 80168fa:	f73f adbb 	bgt.w	8016474 <_dtoa_r+0x4b4>
 80168fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016900:	9d01      	ldr	r5, [sp, #4]
 8016902:	43db      	mvns	r3, r3
 8016904:	9300      	str	r3, [sp, #0]
 8016906:	f04f 0800 	mov.w	r8, #0
 801690a:	4631      	mov	r1, r6
 801690c:	4620      	mov	r0, r4
 801690e:	f000 fbb1 	bl	8017074 <_Bfree>
 8016912:	2f00      	cmp	r7, #0
 8016914:	f43f aea4 	beq.w	8016660 <_dtoa_r+0x6a0>
 8016918:	f1b8 0f00 	cmp.w	r8, #0
 801691c:	d005      	beq.n	801692a <_dtoa_r+0x96a>
 801691e:	45b8      	cmp	r8, r7
 8016920:	d003      	beq.n	801692a <_dtoa_r+0x96a>
 8016922:	4641      	mov	r1, r8
 8016924:	4620      	mov	r0, r4
 8016926:	f000 fba5 	bl	8017074 <_Bfree>
 801692a:	4639      	mov	r1, r7
 801692c:	4620      	mov	r0, r4
 801692e:	f000 fba1 	bl	8017074 <_Bfree>
 8016932:	e695      	b.n	8016660 <_dtoa_r+0x6a0>
 8016934:	2600      	movs	r6, #0
 8016936:	4637      	mov	r7, r6
 8016938:	e7e1      	b.n	80168fe <_dtoa_r+0x93e>
 801693a:	9700      	str	r7, [sp, #0]
 801693c:	4637      	mov	r7, r6
 801693e:	e599      	b.n	8016474 <_dtoa_r+0x4b4>
 8016940:	40240000 	.word	0x40240000
 8016944:	9b08      	ldr	r3, [sp, #32]
 8016946:	2b00      	cmp	r3, #0
 8016948:	f000 80ca 	beq.w	8016ae0 <_dtoa_r+0xb20>
 801694c:	9b03      	ldr	r3, [sp, #12]
 801694e:	9302      	str	r3, [sp, #8]
 8016950:	2d00      	cmp	r5, #0
 8016952:	dd05      	ble.n	8016960 <_dtoa_r+0x9a0>
 8016954:	4639      	mov	r1, r7
 8016956:	462a      	mov	r2, r5
 8016958:	4620      	mov	r0, r4
 801695a:	f000 fd5d 	bl	8017418 <__lshift>
 801695e:	4607      	mov	r7, r0
 8016960:	f1b8 0f00 	cmp.w	r8, #0
 8016964:	d05b      	beq.n	8016a1e <_dtoa_r+0xa5e>
 8016966:	6879      	ldr	r1, [r7, #4]
 8016968:	4620      	mov	r0, r4
 801696a:	f000 fb43 	bl	8016ff4 <_Balloc>
 801696e:	4605      	mov	r5, r0
 8016970:	b928      	cbnz	r0, 801697e <_dtoa_r+0x9be>
 8016972:	4b87      	ldr	r3, [pc, #540]	; (8016b90 <_dtoa_r+0xbd0>)
 8016974:	4602      	mov	r2, r0
 8016976:	f240 21ea 	movw	r1, #746	; 0x2ea
 801697a:	f7ff bb3b 	b.w	8015ff4 <_dtoa_r+0x34>
 801697e:	693a      	ldr	r2, [r7, #16]
 8016980:	3202      	adds	r2, #2
 8016982:	0092      	lsls	r2, r2, #2
 8016984:	f107 010c 	add.w	r1, r7, #12
 8016988:	300c      	adds	r0, #12
 801698a:	f7fe fcbd 	bl	8015308 <memcpy>
 801698e:	2201      	movs	r2, #1
 8016990:	4629      	mov	r1, r5
 8016992:	4620      	mov	r0, r4
 8016994:	f000 fd40 	bl	8017418 <__lshift>
 8016998:	9b01      	ldr	r3, [sp, #4]
 801699a:	f103 0901 	add.w	r9, r3, #1
 801699e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80169a2:	4413      	add	r3, r2
 80169a4:	9305      	str	r3, [sp, #20]
 80169a6:	f00a 0301 	and.w	r3, sl, #1
 80169aa:	46b8      	mov	r8, r7
 80169ac:	9304      	str	r3, [sp, #16]
 80169ae:	4607      	mov	r7, r0
 80169b0:	4631      	mov	r1, r6
 80169b2:	ee18 0a10 	vmov	r0, s16
 80169b6:	f7ff fa75 	bl	8015ea4 <quorem>
 80169ba:	4641      	mov	r1, r8
 80169bc:	9002      	str	r0, [sp, #8]
 80169be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80169c2:	ee18 0a10 	vmov	r0, s16
 80169c6:	f000 fd97 	bl	80174f8 <__mcmp>
 80169ca:	463a      	mov	r2, r7
 80169cc:	9003      	str	r0, [sp, #12]
 80169ce:	4631      	mov	r1, r6
 80169d0:	4620      	mov	r0, r4
 80169d2:	f000 fdad 	bl	8017530 <__mdiff>
 80169d6:	68c2      	ldr	r2, [r0, #12]
 80169d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80169dc:	4605      	mov	r5, r0
 80169de:	bb02      	cbnz	r2, 8016a22 <_dtoa_r+0xa62>
 80169e0:	4601      	mov	r1, r0
 80169e2:	ee18 0a10 	vmov	r0, s16
 80169e6:	f000 fd87 	bl	80174f8 <__mcmp>
 80169ea:	4602      	mov	r2, r0
 80169ec:	4629      	mov	r1, r5
 80169ee:	4620      	mov	r0, r4
 80169f0:	9207      	str	r2, [sp, #28]
 80169f2:	f000 fb3f 	bl	8017074 <_Bfree>
 80169f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80169fa:	ea43 0102 	orr.w	r1, r3, r2
 80169fe:	9b04      	ldr	r3, [sp, #16]
 8016a00:	430b      	orrs	r3, r1
 8016a02:	464d      	mov	r5, r9
 8016a04:	d10f      	bne.n	8016a26 <_dtoa_r+0xa66>
 8016a06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016a0a:	d02a      	beq.n	8016a62 <_dtoa_r+0xaa2>
 8016a0c:	9b03      	ldr	r3, [sp, #12]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	dd02      	ble.n	8016a18 <_dtoa_r+0xa58>
 8016a12:	9b02      	ldr	r3, [sp, #8]
 8016a14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016a18:	f88b a000 	strb.w	sl, [fp]
 8016a1c:	e775      	b.n	801690a <_dtoa_r+0x94a>
 8016a1e:	4638      	mov	r0, r7
 8016a20:	e7ba      	b.n	8016998 <_dtoa_r+0x9d8>
 8016a22:	2201      	movs	r2, #1
 8016a24:	e7e2      	b.n	80169ec <_dtoa_r+0xa2c>
 8016a26:	9b03      	ldr	r3, [sp, #12]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	db04      	blt.n	8016a36 <_dtoa_r+0xa76>
 8016a2c:	9906      	ldr	r1, [sp, #24]
 8016a2e:	430b      	orrs	r3, r1
 8016a30:	9904      	ldr	r1, [sp, #16]
 8016a32:	430b      	orrs	r3, r1
 8016a34:	d122      	bne.n	8016a7c <_dtoa_r+0xabc>
 8016a36:	2a00      	cmp	r2, #0
 8016a38:	ddee      	ble.n	8016a18 <_dtoa_r+0xa58>
 8016a3a:	ee18 1a10 	vmov	r1, s16
 8016a3e:	2201      	movs	r2, #1
 8016a40:	4620      	mov	r0, r4
 8016a42:	f000 fce9 	bl	8017418 <__lshift>
 8016a46:	4631      	mov	r1, r6
 8016a48:	ee08 0a10 	vmov	s16, r0
 8016a4c:	f000 fd54 	bl	80174f8 <__mcmp>
 8016a50:	2800      	cmp	r0, #0
 8016a52:	dc03      	bgt.n	8016a5c <_dtoa_r+0xa9c>
 8016a54:	d1e0      	bne.n	8016a18 <_dtoa_r+0xa58>
 8016a56:	f01a 0f01 	tst.w	sl, #1
 8016a5a:	d0dd      	beq.n	8016a18 <_dtoa_r+0xa58>
 8016a5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016a60:	d1d7      	bne.n	8016a12 <_dtoa_r+0xa52>
 8016a62:	2339      	movs	r3, #57	; 0x39
 8016a64:	f88b 3000 	strb.w	r3, [fp]
 8016a68:	462b      	mov	r3, r5
 8016a6a:	461d      	mov	r5, r3
 8016a6c:	3b01      	subs	r3, #1
 8016a6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016a72:	2a39      	cmp	r2, #57	; 0x39
 8016a74:	d071      	beq.n	8016b5a <_dtoa_r+0xb9a>
 8016a76:	3201      	adds	r2, #1
 8016a78:	701a      	strb	r2, [r3, #0]
 8016a7a:	e746      	b.n	801690a <_dtoa_r+0x94a>
 8016a7c:	2a00      	cmp	r2, #0
 8016a7e:	dd07      	ble.n	8016a90 <_dtoa_r+0xad0>
 8016a80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016a84:	d0ed      	beq.n	8016a62 <_dtoa_r+0xaa2>
 8016a86:	f10a 0301 	add.w	r3, sl, #1
 8016a8a:	f88b 3000 	strb.w	r3, [fp]
 8016a8e:	e73c      	b.n	801690a <_dtoa_r+0x94a>
 8016a90:	9b05      	ldr	r3, [sp, #20]
 8016a92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016a96:	4599      	cmp	r9, r3
 8016a98:	d047      	beq.n	8016b2a <_dtoa_r+0xb6a>
 8016a9a:	ee18 1a10 	vmov	r1, s16
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	220a      	movs	r2, #10
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	f000 fb08 	bl	80170b8 <__multadd>
 8016aa8:	45b8      	cmp	r8, r7
 8016aaa:	ee08 0a10 	vmov	s16, r0
 8016aae:	f04f 0300 	mov.w	r3, #0
 8016ab2:	f04f 020a 	mov.w	r2, #10
 8016ab6:	4641      	mov	r1, r8
 8016ab8:	4620      	mov	r0, r4
 8016aba:	d106      	bne.n	8016aca <_dtoa_r+0xb0a>
 8016abc:	f000 fafc 	bl	80170b8 <__multadd>
 8016ac0:	4680      	mov	r8, r0
 8016ac2:	4607      	mov	r7, r0
 8016ac4:	f109 0901 	add.w	r9, r9, #1
 8016ac8:	e772      	b.n	80169b0 <_dtoa_r+0x9f0>
 8016aca:	f000 faf5 	bl	80170b8 <__multadd>
 8016ace:	4639      	mov	r1, r7
 8016ad0:	4680      	mov	r8, r0
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	220a      	movs	r2, #10
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	f000 faee 	bl	80170b8 <__multadd>
 8016adc:	4607      	mov	r7, r0
 8016ade:	e7f1      	b.n	8016ac4 <_dtoa_r+0xb04>
 8016ae0:	9b03      	ldr	r3, [sp, #12]
 8016ae2:	9302      	str	r3, [sp, #8]
 8016ae4:	9d01      	ldr	r5, [sp, #4]
 8016ae6:	ee18 0a10 	vmov	r0, s16
 8016aea:	4631      	mov	r1, r6
 8016aec:	f7ff f9da 	bl	8015ea4 <quorem>
 8016af0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016af4:	9b01      	ldr	r3, [sp, #4]
 8016af6:	f805 ab01 	strb.w	sl, [r5], #1
 8016afa:	1aea      	subs	r2, r5, r3
 8016afc:	9b02      	ldr	r3, [sp, #8]
 8016afe:	4293      	cmp	r3, r2
 8016b00:	dd09      	ble.n	8016b16 <_dtoa_r+0xb56>
 8016b02:	ee18 1a10 	vmov	r1, s16
 8016b06:	2300      	movs	r3, #0
 8016b08:	220a      	movs	r2, #10
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	f000 fad4 	bl	80170b8 <__multadd>
 8016b10:	ee08 0a10 	vmov	s16, r0
 8016b14:	e7e7      	b.n	8016ae6 <_dtoa_r+0xb26>
 8016b16:	9b02      	ldr	r3, [sp, #8]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	bfc8      	it	gt
 8016b1c:	461d      	movgt	r5, r3
 8016b1e:	9b01      	ldr	r3, [sp, #4]
 8016b20:	bfd8      	it	le
 8016b22:	2501      	movle	r5, #1
 8016b24:	441d      	add	r5, r3
 8016b26:	f04f 0800 	mov.w	r8, #0
 8016b2a:	ee18 1a10 	vmov	r1, s16
 8016b2e:	2201      	movs	r2, #1
 8016b30:	4620      	mov	r0, r4
 8016b32:	f000 fc71 	bl	8017418 <__lshift>
 8016b36:	4631      	mov	r1, r6
 8016b38:	ee08 0a10 	vmov	s16, r0
 8016b3c:	f000 fcdc 	bl	80174f8 <__mcmp>
 8016b40:	2800      	cmp	r0, #0
 8016b42:	dc91      	bgt.n	8016a68 <_dtoa_r+0xaa8>
 8016b44:	d102      	bne.n	8016b4c <_dtoa_r+0xb8c>
 8016b46:	f01a 0f01 	tst.w	sl, #1
 8016b4a:	d18d      	bne.n	8016a68 <_dtoa_r+0xaa8>
 8016b4c:	462b      	mov	r3, r5
 8016b4e:	461d      	mov	r5, r3
 8016b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016b54:	2a30      	cmp	r2, #48	; 0x30
 8016b56:	d0fa      	beq.n	8016b4e <_dtoa_r+0xb8e>
 8016b58:	e6d7      	b.n	801690a <_dtoa_r+0x94a>
 8016b5a:	9a01      	ldr	r2, [sp, #4]
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d184      	bne.n	8016a6a <_dtoa_r+0xaaa>
 8016b60:	9b00      	ldr	r3, [sp, #0]
 8016b62:	3301      	adds	r3, #1
 8016b64:	9300      	str	r3, [sp, #0]
 8016b66:	2331      	movs	r3, #49	; 0x31
 8016b68:	7013      	strb	r3, [r2, #0]
 8016b6a:	e6ce      	b.n	801690a <_dtoa_r+0x94a>
 8016b6c:	4b09      	ldr	r3, [pc, #36]	; (8016b94 <_dtoa_r+0xbd4>)
 8016b6e:	f7ff ba95 	b.w	801609c <_dtoa_r+0xdc>
 8016b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	f47f aa6e 	bne.w	8016056 <_dtoa_r+0x96>
 8016b7a:	4b07      	ldr	r3, [pc, #28]	; (8016b98 <_dtoa_r+0xbd8>)
 8016b7c:	f7ff ba8e 	b.w	801609c <_dtoa_r+0xdc>
 8016b80:	9b02      	ldr	r3, [sp, #8]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	dcae      	bgt.n	8016ae4 <_dtoa_r+0xb24>
 8016b86:	9b06      	ldr	r3, [sp, #24]
 8016b88:	2b02      	cmp	r3, #2
 8016b8a:	f73f aea8 	bgt.w	80168de <_dtoa_r+0x91e>
 8016b8e:	e7a9      	b.n	8016ae4 <_dtoa_r+0xb24>
 8016b90:	0801852b 	.word	0x0801852b
 8016b94:	08018488 	.word	0x08018488
 8016b98:	080184ac 	.word	0x080184ac

08016b9c <__sflush_r>:
 8016b9c:	898a      	ldrh	r2, [r1, #12]
 8016b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	0710      	lsls	r0, r2, #28
 8016ba6:	460c      	mov	r4, r1
 8016ba8:	d458      	bmi.n	8016c5c <__sflush_r+0xc0>
 8016baa:	684b      	ldr	r3, [r1, #4]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	dc05      	bgt.n	8016bbc <__sflush_r+0x20>
 8016bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	dc02      	bgt.n	8016bbc <__sflush_r+0x20>
 8016bb6:	2000      	movs	r0, #0
 8016bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bbe:	2e00      	cmp	r6, #0
 8016bc0:	d0f9      	beq.n	8016bb6 <__sflush_r+0x1a>
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016bc8:	682f      	ldr	r7, [r5, #0]
 8016bca:	602b      	str	r3, [r5, #0]
 8016bcc:	d032      	beq.n	8016c34 <__sflush_r+0x98>
 8016bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016bd0:	89a3      	ldrh	r3, [r4, #12]
 8016bd2:	075a      	lsls	r2, r3, #29
 8016bd4:	d505      	bpl.n	8016be2 <__sflush_r+0x46>
 8016bd6:	6863      	ldr	r3, [r4, #4]
 8016bd8:	1ac0      	subs	r0, r0, r3
 8016bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bdc:	b10b      	cbz	r3, 8016be2 <__sflush_r+0x46>
 8016bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016be0:	1ac0      	subs	r0, r0, r3
 8016be2:	2300      	movs	r3, #0
 8016be4:	4602      	mov	r2, r0
 8016be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016be8:	6a21      	ldr	r1, [r4, #32]
 8016bea:	4628      	mov	r0, r5
 8016bec:	47b0      	blx	r6
 8016bee:	1c43      	adds	r3, r0, #1
 8016bf0:	89a3      	ldrh	r3, [r4, #12]
 8016bf2:	d106      	bne.n	8016c02 <__sflush_r+0x66>
 8016bf4:	6829      	ldr	r1, [r5, #0]
 8016bf6:	291d      	cmp	r1, #29
 8016bf8:	d82c      	bhi.n	8016c54 <__sflush_r+0xb8>
 8016bfa:	4a2a      	ldr	r2, [pc, #168]	; (8016ca4 <__sflush_r+0x108>)
 8016bfc:	40ca      	lsrs	r2, r1
 8016bfe:	07d6      	lsls	r6, r2, #31
 8016c00:	d528      	bpl.n	8016c54 <__sflush_r+0xb8>
 8016c02:	2200      	movs	r2, #0
 8016c04:	6062      	str	r2, [r4, #4]
 8016c06:	04d9      	lsls	r1, r3, #19
 8016c08:	6922      	ldr	r2, [r4, #16]
 8016c0a:	6022      	str	r2, [r4, #0]
 8016c0c:	d504      	bpl.n	8016c18 <__sflush_r+0x7c>
 8016c0e:	1c42      	adds	r2, r0, #1
 8016c10:	d101      	bne.n	8016c16 <__sflush_r+0x7a>
 8016c12:	682b      	ldr	r3, [r5, #0]
 8016c14:	b903      	cbnz	r3, 8016c18 <__sflush_r+0x7c>
 8016c16:	6560      	str	r0, [r4, #84]	; 0x54
 8016c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c1a:	602f      	str	r7, [r5, #0]
 8016c1c:	2900      	cmp	r1, #0
 8016c1e:	d0ca      	beq.n	8016bb6 <__sflush_r+0x1a>
 8016c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c24:	4299      	cmp	r1, r3
 8016c26:	d002      	beq.n	8016c2e <__sflush_r+0x92>
 8016c28:	4628      	mov	r0, r5
 8016c2a:	f000 fd7d 	bl	8017728 <_free_r>
 8016c2e:	2000      	movs	r0, #0
 8016c30:	6360      	str	r0, [r4, #52]	; 0x34
 8016c32:	e7c1      	b.n	8016bb8 <__sflush_r+0x1c>
 8016c34:	6a21      	ldr	r1, [r4, #32]
 8016c36:	2301      	movs	r3, #1
 8016c38:	4628      	mov	r0, r5
 8016c3a:	47b0      	blx	r6
 8016c3c:	1c41      	adds	r1, r0, #1
 8016c3e:	d1c7      	bne.n	8016bd0 <__sflush_r+0x34>
 8016c40:	682b      	ldr	r3, [r5, #0]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d0c4      	beq.n	8016bd0 <__sflush_r+0x34>
 8016c46:	2b1d      	cmp	r3, #29
 8016c48:	d001      	beq.n	8016c4e <__sflush_r+0xb2>
 8016c4a:	2b16      	cmp	r3, #22
 8016c4c:	d101      	bne.n	8016c52 <__sflush_r+0xb6>
 8016c4e:	602f      	str	r7, [r5, #0]
 8016c50:	e7b1      	b.n	8016bb6 <__sflush_r+0x1a>
 8016c52:	89a3      	ldrh	r3, [r4, #12]
 8016c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c58:	81a3      	strh	r3, [r4, #12]
 8016c5a:	e7ad      	b.n	8016bb8 <__sflush_r+0x1c>
 8016c5c:	690f      	ldr	r7, [r1, #16]
 8016c5e:	2f00      	cmp	r7, #0
 8016c60:	d0a9      	beq.n	8016bb6 <__sflush_r+0x1a>
 8016c62:	0793      	lsls	r3, r2, #30
 8016c64:	680e      	ldr	r6, [r1, #0]
 8016c66:	bf08      	it	eq
 8016c68:	694b      	ldreq	r3, [r1, #20]
 8016c6a:	600f      	str	r7, [r1, #0]
 8016c6c:	bf18      	it	ne
 8016c6e:	2300      	movne	r3, #0
 8016c70:	eba6 0807 	sub.w	r8, r6, r7
 8016c74:	608b      	str	r3, [r1, #8]
 8016c76:	f1b8 0f00 	cmp.w	r8, #0
 8016c7a:	dd9c      	ble.n	8016bb6 <__sflush_r+0x1a>
 8016c7c:	6a21      	ldr	r1, [r4, #32]
 8016c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016c80:	4643      	mov	r3, r8
 8016c82:	463a      	mov	r2, r7
 8016c84:	4628      	mov	r0, r5
 8016c86:	47b0      	blx	r6
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	dc06      	bgt.n	8016c9a <__sflush_r+0xfe>
 8016c8c:	89a3      	ldrh	r3, [r4, #12]
 8016c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c92:	81a3      	strh	r3, [r4, #12]
 8016c94:	f04f 30ff 	mov.w	r0, #4294967295
 8016c98:	e78e      	b.n	8016bb8 <__sflush_r+0x1c>
 8016c9a:	4407      	add	r7, r0
 8016c9c:	eba8 0800 	sub.w	r8, r8, r0
 8016ca0:	e7e9      	b.n	8016c76 <__sflush_r+0xda>
 8016ca2:	bf00      	nop
 8016ca4:	20400001 	.word	0x20400001

08016ca8 <_fflush_r>:
 8016ca8:	b538      	push	{r3, r4, r5, lr}
 8016caa:	690b      	ldr	r3, [r1, #16]
 8016cac:	4605      	mov	r5, r0
 8016cae:	460c      	mov	r4, r1
 8016cb0:	b913      	cbnz	r3, 8016cb8 <_fflush_r+0x10>
 8016cb2:	2500      	movs	r5, #0
 8016cb4:	4628      	mov	r0, r5
 8016cb6:	bd38      	pop	{r3, r4, r5, pc}
 8016cb8:	b118      	cbz	r0, 8016cc2 <_fflush_r+0x1a>
 8016cba:	6983      	ldr	r3, [r0, #24]
 8016cbc:	b90b      	cbnz	r3, 8016cc2 <_fflush_r+0x1a>
 8016cbe:	f000 f887 	bl	8016dd0 <__sinit>
 8016cc2:	4b14      	ldr	r3, [pc, #80]	; (8016d14 <_fflush_r+0x6c>)
 8016cc4:	429c      	cmp	r4, r3
 8016cc6:	d11b      	bne.n	8016d00 <_fflush_r+0x58>
 8016cc8:	686c      	ldr	r4, [r5, #4]
 8016cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d0ef      	beq.n	8016cb2 <_fflush_r+0xa>
 8016cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016cd4:	07d0      	lsls	r0, r2, #31
 8016cd6:	d404      	bmi.n	8016ce2 <_fflush_r+0x3a>
 8016cd8:	0599      	lsls	r1, r3, #22
 8016cda:	d402      	bmi.n	8016ce2 <_fflush_r+0x3a>
 8016cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cde:	f000 f91a 	bl	8016f16 <__retarget_lock_acquire_recursive>
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	4621      	mov	r1, r4
 8016ce6:	f7ff ff59 	bl	8016b9c <__sflush_r>
 8016cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016cec:	07da      	lsls	r2, r3, #31
 8016cee:	4605      	mov	r5, r0
 8016cf0:	d4e0      	bmi.n	8016cb4 <_fflush_r+0xc>
 8016cf2:	89a3      	ldrh	r3, [r4, #12]
 8016cf4:	059b      	lsls	r3, r3, #22
 8016cf6:	d4dd      	bmi.n	8016cb4 <_fflush_r+0xc>
 8016cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cfa:	f000 f90d 	bl	8016f18 <__retarget_lock_release_recursive>
 8016cfe:	e7d9      	b.n	8016cb4 <_fflush_r+0xc>
 8016d00:	4b05      	ldr	r3, [pc, #20]	; (8016d18 <_fflush_r+0x70>)
 8016d02:	429c      	cmp	r4, r3
 8016d04:	d101      	bne.n	8016d0a <_fflush_r+0x62>
 8016d06:	68ac      	ldr	r4, [r5, #8]
 8016d08:	e7df      	b.n	8016cca <_fflush_r+0x22>
 8016d0a:	4b04      	ldr	r3, [pc, #16]	; (8016d1c <_fflush_r+0x74>)
 8016d0c:	429c      	cmp	r4, r3
 8016d0e:	bf08      	it	eq
 8016d10:	68ec      	ldreq	r4, [r5, #12]
 8016d12:	e7da      	b.n	8016cca <_fflush_r+0x22>
 8016d14:	0801855c 	.word	0x0801855c
 8016d18:	0801857c 	.word	0x0801857c
 8016d1c:	0801853c 	.word	0x0801853c

08016d20 <std>:
 8016d20:	2300      	movs	r3, #0
 8016d22:	b510      	push	{r4, lr}
 8016d24:	4604      	mov	r4, r0
 8016d26:	e9c0 3300 	strd	r3, r3, [r0]
 8016d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d2e:	6083      	str	r3, [r0, #8]
 8016d30:	8181      	strh	r1, [r0, #12]
 8016d32:	6643      	str	r3, [r0, #100]	; 0x64
 8016d34:	81c2      	strh	r2, [r0, #14]
 8016d36:	6183      	str	r3, [r0, #24]
 8016d38:	4619      	mov	r1, r3
 8016d3a:	2208      	movs	r2, #8
 8016d3c:	305c      	adds	r0, #92	; 0x5c
 8016d3e:	f7fe faf1 	bl	8015324 <memset>
 8016d42:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <std+0x38>)
 8016d44:	6263      	str	r3, [r4, #36]	; 0x24
 8016d46:	4b05      	ldr	r3, [pc, #20]	; (8016d5c <std+0x3c>)
 8016d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d4a:	4b05      	ldr	r3, [pc, #20]	; (8016d60 <std+0x40>)
 8016d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d4e:	4b05      	ldr	r3, [pc, #20]	; (8016d64 <std+0x44>)
 8016d50:	6224      	str	r4, [r4, #32]
 8016d52:	6323      	str	r3, [r4, #48]	; 0x30
 8016d54:	bd10      	pop	{r4, pc}
 8016d56:	bf00      	nop
 8016d58:	08017bbd 	.word	0x08017bbd
 8016d5c:	08017bdf 	.word	0x08017bdf
 8016d60:	08017c17 	.word	0x08017c17
 8016d64:	08017c3b 	.word	0x08017c3b

08016d68 <_cleanup_r>:
 8016d68:	4901      	ldr	r1, [pc, #4]	; (8016d70 <_cleanup_r+0x8>)
 8016d6a:	f000 b8af 	b.w	8016ecc <_fwalk_reent>
 8016d6e:	bf00      	nop
 8016d70:	08016ca9 	.word	0x08016ca9

08016d74 <__sfmoreglue>:
 8016d74:	b570      	push	{r4, r5, r6, lr}
 8016d76:	2268      	movs	r2, #104	; 0x68
 8016d78:	1e4d      	subs	r5, r1, #1
 8016d7a:	4355      	muls	r5, r2
 8016d7c:	460e      	mov	r6, r1
 8016d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d82:	f000 fd3d 	bl	8017800 <_malloc_r>
 8016d86:	4604      	mov	r4, r0
 8016d88:	b140      	cbz	r0, 8016d9c <__sfmoreglue+0x28>
 8016d8a:	2100      	movs	r1, #0
 8016d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8016d90:	300c      	adds	r0, #12
 8016d92:	60a0      	str	r0, [r4, #8]
 8016d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d98:	f7fe fac4 	bl	8015324 <memset>
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	bd70      	pop	{r4, r5, r6, pc}

08016da0 <__sfp_lock_acquire>:
 8016da0:	4801      	ldr	r0, [pc, #4]	; (8016da8 <__sfp_lock_acquire+0x8>)
 8016da2:	f000 b8b8 	b.w	8016f16 <__retarget_lock_acquire_recursive>
 8016da6:	bf00      	nop
 8016da8:	200024d1 	.word	0x200024d1

08016dac <__sfp_lock_release>:
 8016dac:	4801      	ldr	r0, [pc, #4]	; (8016db4 <__sfp_lock_release+0x8>)
 8016dae:	f000 b8b3 	b.w	8016f18 <__retarget_lock_release_recursive>
 8016db2:	bf00      	nop
 8016db4:	200024d1 	.word	0x200024d1

08016db8 <__sinit_lock_acquire>:
 8016db8:	4801      	ldr	r0, [pc, #4]	; (8016dc0 <__sinit_lock_acquire+0x8>)
 8016dba:	f000 b8ac 	b.w	8016f16 <__retarget_lock_acquire_recursive>
 8016dbe:	bf00      	nop
 8016dc0:	200024d2 	.word	0x200024d2

08016dc4 <__sinit_lock_release>:
 8016dc4:	4801      	ldr	r0, [pc, #4]	; (8016dcc <__sinit_lock_release+0x8>)
 8016dc6:	f000 b8a7 	b.w	8016f18 <__retarget_lock_release_recursive>
 8016dca:	bf00      	nop
 8016dcc:	200024d2 	.word	0x200024d2

08016dd0 <__sinit>:
 8016dd0:	b510      	push	{r4, lr}
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	f7ff fff0 	bl	8016db8 <__sinit_lock_acquire>
 8016dd8:	69a3      	ldr	r3, [r4, #24]
 8016dda:	b11b      	cbz	r3, 8016de4 <__sinit+0x14>
 8016ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016de0:	f7ff bff0 	b.w	8016dc4 <__sinit_lock_release>
 8016de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016de8:	6523      	str	r3, [r4, #80]	; 0x50
 8016dea:	4b13      	ldr	r3, [pc, #76]	; (8016e38 <__sinit+0x68>)
 8016dec:	4a13      	ldr	r2, [pc, #76]	; (8016e3c <__sinit+0x6c>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8016df2:	42a3      	cmp	r3, r4
 8016df4:	bf04      	itt	eq
 8016df6:	2301      	moveq	r3, #1
 8016df8:	61a3      	streq	r3, [r4, #24]
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	f000 f820 	bl	8016e40 <__sfp>
 8016e00:	6060      	str	r0, [r4, #4]
 8016e02:	4620      	mov	r0, r4
 8016e04:	f000 f81c 	bl	8016e40 <__sfp>
 8016e08:	60a0      	str	r0, [r4, #8]
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	f000 f818 	bl	8016e40 <__sfp>
 8016e10:	2200      	movs	r2, #0
 8016e12:	60e0      	str	r0, [r4, #12]
 8016e14:	2104      	movs	r1, #4
 8016e16:	6860      	ldr	r0, [r4, #4]
 8016e18:	f7ff ff82 	bl	8016d20 <std>
 8016e1c:	68a0      	ldr	r0, [r4, #8]
 8016e1e:	2201      	movs	r2, #1
 8016e20:	2109      	movs	r1, #9
 8016e22:	f7ff ff7d 	bl	8016d20 <std>
 8016e26:	68e0      	ldr	r0, [r4, #12]
 8016e28:	2202      	movs	r2, #2
 8016e2a:	2112      	movs	r1, #18
 8016e2c:	f7ff ff78 	bl	8016d20 <std>
 8016e30:	2301      	movs	r3, #1
 8016e32:	61a3      	str	r3, [r4, #24]
 8016e34:	e7d2      	b.n	8016ddc <__sinit+0xc>
 8016e36:	bf00      	nop
 8016e38:	08018474 	.word	0x08018474
 8016e3c:	08016d69 	.word	0x08016d69

08016e40 <__sfp>:
 8016e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e42:	4607      	mov	r7, r0
 8016e44:	f7ff ffac 	bl	8016da0 <__sfp_lock_acquire>
 8016e48:	4b1e      	ldr	r3, [pc, #120]	; (8016ec4 <__sfp+0x84>)
 8016e4a:	681e      	ldr	r6, [r3, #0]
 8016e4c:	69b3      	ldr	r3, [r6, #24]
 8016e4e:	b913      	cbnz	r3, 8016e56 <__sfp+0x16>
 8016e50:	4630      	mov	r0, r6
 8016e52:	f7ff ffbd 	bl	8016dd0 <__sinit>
 8016e56:	3648      	adds	r6, #72	; 0x48
 8016e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e5c:	3b01      	subs	r3, #1
 8016e5e:	d503      	bpl.n	8016e68 <__sfp+0x28>
 8016e60:	6833      	ldr	r3, [r6, #0]
 8016e62:	b30b      	cbz	r3, 8016ea8 <__sfp+0x68>
 8016e64:	6836      	ldr	r6, [r6, #0]
 8016e66:	e7f7      	b.n	8016e58 <__sfp+0x18>
 8016e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e6c:	b9d5      	cbnz	r5, 8016ea4 <__sfp+0x64>
 8016e6e:	4b16      	ldr	r3, [pc, #88]	; (8016ec8 <__sfp+0x88>)
 8016e70:	60e3      	str	r3, [r4, #12]
 8016e72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e76:	6665      	str	r5, [r4, #100]	; 0x64
 8016e78:	f000 f84c 	bl	8016f14 <__retarget_lock_init_recursive>
 8016e7c:	f7ff ff96 	bl	8016dac <__sfp_lock_release>
 8016e80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016e84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016e88:	6025      	str	r5, [r4, #0]
 8016e8a:	61a5      	str	r5, [r4, #24]
 8016e8c:	2208      	movs	r2, #8
 8016e8e:	4629      	mov	r1, r5
 8016e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e94:	f7fe fa46 	bl	8015324 <memset>
 8016e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ea4:	3468      	adds	r4, #104	; 0x68
 8016ea6:	e7d9      	b.n	8016e5c <__sfp+0x1c>
 8016ea8:	2104      	movs	r1, #4
 8016eaa:	4638      	mov	r0, r7
 8016eac:	f7ff ff62 	bl	8016d74 <__sfmoreglue>
 8016eb0:	4604      	mov	r4, r0
 8016eb2:	6030      	str	r0, [r6, #0]
 8016eb4:	2800      	cmp	r0, #0
 8016eb6:	d1d5      	bne.n	8016e64 <__sfp+0x24>
 8016eb8:	f7ff ff78 	bl	8016dac <__sfp_lock_release>
 8016ebc:	230c      	movs	r3, #12
 8016ebe:	603b      	str	r3, [r7, #0]
 8016ec0:	e7ee      	b.n	8016ea0 <__sfp+0x60>
 8016ec2:	bf00      	nop
 8016ec4:	08018474 	.word	0x08018474
 8016ec8:	ffff0001 	.word	0xffff0001

08016ecc <_fwalk_reent>:
 8016ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ed0:	4606      	mov	r6, r0
 8016ed2:	4688      	mov	r8, r1
 8016ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ed8:	2700      	movs	r7, #0
 8016eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ede:	f1b9 0901 	subs.w	r9, r9, #1
 8016ee2:	d505      	bpl.n	8016ef0 <_fwalk_reent+0x24>
 8016ee4:	6824      	ldr	r4, [r4, #0]
 8016ee6:	2c00      	cmp	r4, #0
 8016ee8:	d1f7      	bne.n	8016eda <_fwalk_reent+0xe>
 8016eea:	4638      	mov	r0, r7
 8016eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ef0:	89ab      	ldrh	r3, [r5, #12]
 8016ef2:	2b01      	cmp	r3, #1
 8016ef4:	d907      	bls.n	8016f06 <_fwalk_reent+0x3a>
 8016ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016efa:	3301      	adds	r3, #1
 8016efc:	d003      	beq.n	8016f06 <_fwalk_reent+0x3a>
 8016efe:	4629      	mov	r1, r5
 8016f00:	4630      	mov	r0, r6
 8016f02:	47c0      	blx	r8
 8016f04:	4307      	orrs	r7, r0
 8016f06:	3568      	adds	r5, #104	; 0x68
 8016f08:	e7e9      	b.n	8016ede <_fwalk_reent+0x12>
	...

08016f0c <_localeconv_r>:
 8016f0c:	4800      	ldr	r0, [pc, #0]	; (8016f10 <_localeconv_r+0x4>)
 8016f0e:	4770      	bx	lr
 8016f10:	200002d8 	.word	0x200002d8

08016f14 <__retarget_lock_init_recursive>:
 8016f14:	4770      	bx	lr

08016f16 <__retarget_lock_acquire_recursive>:
 8016f16:	4770      	bx	lr

08016f18 <__retarget_lock_release_recursive>:
 8016f18:	4770      	bx	lr

08016f1a <__swhatbuf_r>:
 8016f1a:	b570      	push	{r4, r5, r6, lr}
 8016f1c:	460e      	mov	r6, r1
 8016f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f22:	2900      	cmp	r1, #0
 8016f24:	b096      	sub	sp, #88	; 0x58
 8016f26:	4614      	mov	r4, r2
 8016f28:	461d      	mov	r5, r3
 8016f2a:	da08      	bge.n	8016f3e <__swhatbuf_r+0x24>
 8016f2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016f30:	2200      	movs	r2, #0
 8016f32:	602a      	str	r2, [r5, #0]
 8016f34:	061a      	lsls	r2, r3, #24
 8016f36:	d410      	bmi.n	8016f5a <__swhatbuf_r+0x40>
 8016f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f3c:	e00e      	b.n	8016f5c <__swhatbuf_r+0x42>
 8016f3e:	466a      	mov	r2, sp
 8016f40:	f000 fed2 	bl	8017ce8 <_fstat_r>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	dbf1      	blt.n	8016f2c <__swhatbuf_r+0x12>
 8016f48:	9a01      	ldr	r2, [sp, #4]
 8016f4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016f4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016f52:	425a      	negs	r2, r3
 8016f54:	415a      	adcs	r2, r3
 8016f56:	602a      	str	r2, [r5, #0]
 8016f58:	e7ee      	b.n	8016f38 <__swhatbuf_r+0x1e>
 8016f5a:	2340      	movs	r3, #64	; 0x40
 8016f5c:	2000      	movs	r0, #0
 8016f5e:	6023      	str	r3, [r4, #0]
 8016f60:	b016      	add	sp, #88	; 0x58
 8016f62:	bd70      	pop	{r4, r5, r6, pc}

08016f64 <__smakebuf_r>:
 8016f64:	898b      	ldrh	r3, [r1, #12]
 8016f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f68:	079d      	lsls	r5, r3, #30
 8016f6a:	4606      	mov	r6, r0
 8016f6c:	460c      	mov	r4, r1
 8016f6e:	d507      	bpl.n	8016f80 <__smakebuf_r+0x1c>
 8016f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016f74:	6023      	str	r3, [r4, #0]
 8016f76:	6123      	str	r3, [r4, #16]
 8016f78:	2301      	movs	r3, #1
 8016f7a:	6163      	str	r3, [r4, #20]
 8016f7c:	b002      	add	sp, #8
 8016f7e:	bd70      	pop	{r4, r5, r6, pc}
 8016f80:	ab01      	add	r3, sp, #4
 8016f82:	466a      	mov	r2, sp
 8016f84:	f7ff ffc9 	bl	8016f1a <__swhatbuf_r>
 8016f88:	9900      	ldr	r1, [sp, #0]
 8016f8a:	4605      	mov	r5, r0
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	f000 fc37 	bl	8017800 <_malloc_r>
 8016f92:	b948      	cbnz	r0, 8016fa8 <__smakebuf_r+0x44>
 8016f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f98:	059a      	lsls	r2, r3, #22
 8016f9a:	d4ef      	bmi.n	8016f7c <__smakebuf_r+0x18>
 8016f9c:	f023 0303 	bic.w	r3, r3, #3
 8016fa0:	f043 0302 	orr.w	r3, r3, #2
 8016fa4:	81a3      	strh	r3, [r4, #12]
 8016fa6:	e7e3      	b.n	8016f70 <__smakebuf_r+0xc>
 8016fa8:	4b0d      	ldr	r3, [pc, #52]	; (8016fe0 <__smakebuf_r+0x7c>)
 8016faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8016fac:	89a3      	ldrh	r3, [r4, #12]
 8016fae:	6020      	str	r0, [r4, #0]
 8016fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fb4:	81a3      	strh	r3, [r4, #12]
 8016fb6:	9b00      	ldr	r3, [sp, #0]
 8016fb8:	6163      	str	r3, [r4, #20]
 8016fba:	9b01      	ldr	r3, [sp, #4]
 8016fbc:	6120      	str	r0, [r4, #16]
 8016fbe:	b15b      	cbz	r3, 8016fd8 <__smakebuf_r+0x74>
 8016fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fc4:	4630      	mov	r0, r6
 8016fc6:	f000 fea1 	bl	8017d0c <_isatty_r>
 8016fca:	b128      	cbz	r0, 8016fd8 <__smakebuf_r+0x74>
 8016fcc:	89a3      	ldrh	r3, [r4, #12]
 8016fce:	f023 0303 	bic.w	r3, r3, #3
 8016fd2:	f043 0301 	orr.w	r3, r3, #1
 8016fd6:	81a3      	strh	r3, [r4, #12]
 8016fd8:	89a0      	ldrh	r0, [r4, #12]
 8016fda:	4305      	orrs	r5, r0
 8016fdc:	81a5      	strh	r5, [r4, #12]
 8016fde:	e7cd      	b.n	8016f7c <__smakebuf_r+0x18>
 8016fe0:	08016d69 	.word	0x08016d69

08016fe4 <malloc>:
 8016fe4:	4b02      	ldr	r3, [pc, #8]	; (8016ff0 <malloc+0xc>)
 8016fe6:	4601      	mov	r1, r0
 8016fe8:	6818      	ldr	r0, [r3, #0]
 8016fea:	f000 bc09 	b.w	8017800 <_malloc_r>
 8016fee:	bf00      	nop
 8016ff0:	20000184 	.word	0x20000184

08016ff4 <_Balloc>:
 8016ff4:	b570      	push	{r4, r5, r6, lr}
 8016ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016ff8:	4604      	mov	r4, r0
 8016ffa:	460d      	mov	r5, r1
 8016ffc:	b976      	cbnz	r6, 801701c <_Balloc+0x28>
 8016ffe:	2010      	movs	r0, #16
 8017000:	f7ff fff0 	bl	8016fe4 <malloc>
 8017004:	4602      	mov	r2, r0
 8017006:	6260      	str	r0, [r4, #36]	; 0x24
 8017008:	b920      	cbnz	r0, 8017014 <_Balloc+0x20>
 801700a:	4b18      	ldr	r3, [pc, #96]	; (801706c <_Balloc+0x78>)
 801700c:	4818      	ldr	r0, [pc, #96]	; (8017070 <_Balloc+0x7c>)
 801700e:	2166      	movs	r1, #102	; 0x66
 8017010:	f000 fe2a 	bl	8017c68 <__assert_func>
 8017014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017018:	6006      	str	r6, [r0, #0]
 801701a:	60c6      	str	r6, [r0, #12]
 801701c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801701e:	68f3      	ldr	r3, [r6, #12]
 8017020:	b183      	cbz	r3, 8017044 <_Balloc+0x50>
 8017022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017024:	68db      	ldr	r3, [r3, #12]
 8017026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801702a:	b9b8      	cbnz	r0, 801705c <_Balloc+0x68>
 801702c:	2101      	movs	r1, #1
 801702e:	fa01 f605 	lsl.w	r6, r1, r5
 8017032:	1d72      	adds	r2, r6, #5
 8017034:	0092      	lsls	r2, r2, #2
 8017036:	4620      	mov	r0, r4
 8017038:	f000 fb60 	bl	80176fc <_calloc_r>
 801703c:	b160      	cbz	r0, 8017058 <_Balloc+0x64>
 801703e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017042:	e00e      	b.n	8017062 <_Balloc+0x6e>
 8017044:	2221      	movs	r2, #33	; 0x21
 8017046:	2104      	movs	r1, #4
 8017048:	4620      	mov	r0, r4
 801704a:	f000 fb57 	bl	80176fc <_calloc_r>
 801704e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017050:	60f0      	str	r0, [r6, #12]
 8017052:	68db      	ldr	r3, [r3, #12]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d1e4      	bne.n	8017022 <_Balloc+0x2e>
 8017058:	2000      	movs	r0, #0
 801705a:	bd70      	pop	{r4, r5, r6, pc}
 801705c:	6802      	ldr	r2, [r0, #0]
 801705e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017062:	2300      	movs	r3, #0
 8017064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017068:	e7f7      	b.n	801705a <_Balloc+0x66>
 801706a:	bf00      	nop
 801706c:	080184b9 	.word	0x080184b9
 8017070:	0801859c 	.word	0x0801859c

08017074 <_Bfree>:
 8017074:	b570      	push	{r4, r5, r6, lr}
 8017076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017078:	4605      	mov	r5, r0
 801707a:	460c      	mov	r4, r1
 801707c:	b976      	cbnz	r6, 801709c <_Bfree+0x28>
 801707e:	2010      	movs	r0, #16
 8017080:	f7ff ffb0 	bl	8016fe4 <malloc>
 8017084:	4602      	mov	r2, r0
 8017086:	6268      	str	r0, [r5, #36]	; 0x24
 8017088:	b920      	cbnz	r0, 8017094 <_Bfree+0x20>
 801708a:	4b09      	ldr	r3, [pc, #36]	; (80170b0 <_Bfree+0x3c>)
 801708c:	4809      	ldr	r0, [pc, #36]	; (80170b4 <_Bfree+0x40>)
 801708e:	218a      	movs	r1, #138	; 0x8a
 8017090:	f000 fdea 	bl	8017c68 <__assert_func>
 8017094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017098:	6006      	str	r6, [r0, #0]
 801709a:	60c6      	str	r6, [r0, #12]
 801709c:	b13c      	cbz	r4, 80170ae <_Bfree+0x3a>
 801709e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80170a0:	6862      	ldr	r2, [r4, #4]
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80170a8:	6021      	str	r1, [r4, #0]
 80170aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80170ae:	bd70      	pop	{r4, r5, r6, pc}
 80170b0:	080184b9 	.word	0x080184b9
 80170b4:	0801859c 	.word	0x0801859c

080170b8 <__multadd>:
 80170b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170bc:	690d      	ldr	r5, [r1, #16]
 80170be:	4607      	mov	r7, r0
 80170c0:	460c      	mov	r4, r1
 80170c2:	461e      	mov	r6, r3
 80170c4:	f101 0c14 	add.w	ip, r1, #20
 80170c8:	2000      	movs	r0, #0
 80170ca:	f8dc 3000 	ldr.w	r3, [ip]
 80170ce:	b299      	uxth	r1, r3
 80170d0:	fb02 6101 	mla	r1, r2, r1, r6
 80170d4:	0c1e      	lsrs	r6, r3, #16
 80170d6:	0c0b      	lsrs	r3, r1, #16
 80170d8:	fb02 3306 	mla	r3, r2, r6, r3
 80170dc:	b289      	uxth	r1, r1
 80170de:	3001      	adds	r0, #1
 80170e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80170e4:	4285      	cmp	r5, r0
 80170e6:	f84c 1b04 	str.w	r1, [ip], #4
 80170ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80170ee:	dcec      	bgt.n	80170ca <__multadd+0x12>
 80170f0:	b30e      	cbz	r6, 8017136 <__multadd+0x7e>
 80170f2:	68a3      	ldr	r3, [r4, #8]
 80170f4:	42ab      	cmp	r3, r5
 80170f6:	dc19      	bgt.n	801712c <__multadd+0x74>
 80170f8:	6861      	ldr	r1, [r4, #4]
 80170fa:	4638      	mov	r0, r7
 80170fc:	3101      	adds	r1, #1
 80170fe:	f7ff ff79 	bl	8016ff4 <_Balloc>
 8017102:	4680      	mov	r8, r0
 8017104:	b928      	cbnz	r0, 8017112 <__multadd+0x5a>
 8017106:	4602      	mov	r2, r0
 8017108:	4b0c      	ldr	r3, [pc, #48]	; (801713c <__multadd+0x84>)
 801710a:	480d      	ldr	r0, [pc, #52]	; (8017140 <__multadd+0x88>)
 801710c:	21b5      	movs	r1, #181	; 0xb5
 801710e:	f000 fdab 	bl	8017c68 <__assert_func>
 8017112:	6922      	ldr	r2, [r4, #16]
 8017114:	3202      	adds	r2, #2
 8017116:	f104 010c 	add.w	r1, r4, #12
 801711a:	0092      	lsls	r2, r2, #2
 801711c:	300c      	adds	r0, #12
 801711e:	f7fe f8f3 	bl	8015308 <memcpy>
 8017122:	4621      	mov	r1, r4
 8017124:	4638      	mov	r0, r7
 8017126:	f7ff ffa5 	bl	8017074 <_Bfree>
 801712a:	4644      	mov	r4, r8
 801712c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017130:	3501      	adds	r5, #1
 8017132:	615e      	str	r6, [r3, #20]
 8017134:	6125      	str	r5, [r4, #16]
 8017136:	4620      	mov	r0, r4
 8017138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801713c:	0801852b 	.word	0x0801852b
 8017140:	0801859c 	.word	0x0801859c

08017144 <__hi0bits>:
 8017144:	0c03      	lsrs	r3, r0, #16
 8017146:	041b      	lsls	r3, r3, #16
 8017148:	b9d3      	cbnz	r3, 8017180 <__hi0bits+0x3c>
 801714a:	0400      	lsls	r0, r0, #16
 801714c:	2310      	movs	r3, #16
 801714e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017152:	bf04      	itt	eq
 8017154:	0200      	lsleq	r0, r0, #8
 8017156:	3308      	addeq	r3, #8
 8017158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801715c:	bf04      	itt	eq
 801715e:	0100      	lsleq	r0, r0, #4
 8017160:	3304      	addeq	r3, #4
 8017162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017166:	bf04      	itt	eq
 8017168:	0080      	lsleq	r0, r0, #2
 801716a:	3302      	addeq	r3, #2
 801716c:	2800      	cmp	r0, #0
 801716e:	db05      	blt.n	801717c <__hi0bits+0x38>
 8017170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017174:	f103 0301 	add.w	r3, r3, #1
 8017178:	bf08      	it	eq
 801717a:	2320      	moveq	r3, #32
 801717c:	4618      	mov	r0, r3
 801717e:	4770      	bx	lr
 8017180:	2300      	movs	r3, #0
 8017182:	e7e4      	b.n	801714e <__hi0bits+0xa>

08017184 <__lo0bits>:
 8017184:	6803      	ldr	r3, [r0, #0]
 8017186:	f013 0207 	ands.w	r2, r3, #7
 801718a:	4601      	mov	r1, r0
 801718c:	d00b      	beq.n	80171a6 <__lo0bits+0x22>
 801718e:	07da      	lsls	r2, r3, #31
 8017190:	d423      	bmi.n	80171da <__lo0bits+0x56>
 8017192:	0798      	lsls	r0, r3, #30
 8017194:	bf49      	itett	mi
 8017196:	085b      	lsrmi	r3, r3, #1
 8017198:	089b      	lsrpl	r3, r3, #2
 801719a:	2001      	movmi	r0, #1
 801719c:	600b      	strmi	r3, [r1, #0]
 801719e:	bf5c      	itt	pl
 80171a0:	600b      	strpl	r3, [r1, #0]
 80171a2:	2002      	movpl	r0, #2
 80171a4:	4770      	bx	lr
 80171a6:	b298      	uxth	r0, r3
 80171a8:	b9a8      	cbnz	r0, 80171d6 <__lo0bits+0x52>
 80171aa:	0c1b      	lsrs	r3, r3, #16
 80171ac:	2010      	movs	r0, #16
 80171ae:	b2da      	uxtb	r2, r3
 80171b0:	b90a      	cbnz	r2, 80171b6 <__lo0bits+0x32>
 80171b2:	3008      	adds	r0, #8
 80171b4:	0a1b      	lsrs	r3, r3, #8
 80171b6:	071a      	lsls	r2, r3, #28
 80171b8:	bf04      	itt	eq
 80171ba:	091b      	lsreq	r3, r3, #4
 80171bc:	3004      	addeq	r0, #4
 80171be:	079a      	lsls	r2, r3, #30
 80171c0:	bf04      	itt	eq
 80171c2:	089b      	lsreq	r3, r3, #2
 80171c4:	3002      	addeq	r0, #2
 80171c6:	07da      	lsls	r2, r3, #31
 80171c8:	d403      	bmi.n	80171d2 <__lo0bits+0x4e>
 80171ca:	085b      	lsrs	r3, r3, #1
 80171cc:	f100 0001 	add.w	r0, r0, #1
 80171d0:	d005      	beq.n	80171de <__lo0bits+0x5a>
 80171d2:	600b      	str	r3, [r1, #0]
 80171d4:	4770      	bx	lr
 80171d6:	4610      	mov	r0, r2
 80171d8:	e7e9      	b.n	80171ae <__lo0bits+0x2a>
 80171da:	2000      	movs	r0, #0
 80171dc:	4770      	bx	lr
 80171de:	2020      	movs	r0, #32
 80171e0:	4770      	bx	lr
	...

080171e4 <__i2b>:
 80171e4:	b510      	push	{r4, lr}
 80171e6:	460c      	mov	r4, r1
 80171e8:	2101      	movs	r1, #1
 80171ea:	f7ff ff03 	bl	8016ff4 <_Balloc>
 80171ee:	4602      	mov	r2, r0
 80171f0:	b928      	cbnz	r0, 80171fe <__i2b+0x1a>
 80171f2:	4b05      	ldr	r3, [pc, #20]	; (8017208 <__i2b+0x24>)
 80171f4:	4805      	ldr	r0, [pc, #20]	; (801720c <__i2b+0x28>)
 80171f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80171fa:	f000 fd35 	bl	8017c68 <__assert_func>
 80171fe:	2301      	movs	r3, #1
 8017200:	6144      	str	r4, [r0, #20]
 8017202:	6103      	str	r3, [r0, #16]
 8017204:	bd10      	pop	{r4, pc}
 8017206:	bf00      	nop
 8017208:	0801852b 	.word	0x0801852b
 801720c:	0801859c 	.word	0x0801859c

08017210 <__multiply>:
 8017210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017214:	4691      	mov	r9, r2
 8017216:	690a      	ldr	r2, [r1, #16]
 8017218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801721c:	429a      	cmp	r2, r3
 801721e:	bfb8      	it	lt
 8017220:	460b      	movlt	r3, r1
 8017222:	460c      	mov	r4, r1
 8017224:	bfbc      	itt	lt
 8017226:	464c      	movlt	r4, r9
 8017228:	4699      	movlt	r9, r3
 801722a:	6927      	ldr	r7, [r4, #16]
 801722c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017230:	68a3      	ldr	r3, [r4, #8]
 8017232:	6861      	ldr	r1, [r4, #4]
 8017234:	eb07 060a 	add.w	r6, r7, sl
 8017238:	42b3      	cmp	r3, r6
 801723a:	b085      	sub	sp, #20
 801723c:	bfb8      	it	lt
 801723e:	3101      	addlt	r1, #1
 8017240:	f7ff fed8 	bl	8016ff4 <_Balloc>
 8017244:	b930      	cbnz	r0, 8017254 <__multiply+0x44>
 8017246:	4602      	mov	r2, r0
 8017248:	4b44      	ldr	r3, [pc, #272]	; (801735c <__multiply+0x14c>)
 801724a:	4845      	ldr	r0, [pc, #276]	; (8017360 <__multiply+0x150>)
 801724c:	f240 115d 	movw	r1, #349	; 0x15d
 8017250:	f000 fd0a 	bl	8017c68 <__assert_func>
 8017254:	f100 0514 	add.w	r5, r0, #20
 8017258:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801725c:	462b      	mov	r3, r5
 801725e:	2200      	movs	r2, #0
 8017260:	4543      	cmp	r3, r8
 8017262:	d321      	bcc.n	80172a8 <__multiply+0x98>
 8017264:	f104 0314 	add.w	r3, r4, #20
 8017268:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801726c:	f109 0314 	add.w	r3, r9, #20
 8017270:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017274:	9202      	str	r2, [sp, #8]
 8017276:	1b3a      	subs	r2, r7, r4
 8017278:	3a15      	subs	r2, #21
 801727a:	f022 0203 	bic.w	r2, r2, #3
 801727e:	3204      	adds	r2, #4
 8017280:	f104 0115 	add.w	r1, r4, #21
 8017284:	428f      	cmp	r7, r1
 8017286:	bf38      	it	cc
 8017288:	2204      	movcc	r2, #4
 801728a:	9201      	str	r2, [sp, #4]
 801728c:	9a02      	ldr	r2, [sp, #8]
 801728e:	9303      	str	r3, [sp, #12]
 8017290:	429a      	cmp	r2, r3
 8017292:	d80c      	bhi.n	80172ae <__multiply+0x9e>
 8017294:	2e00      	cmp	r6, #0
 8017296:	dd03      	ble.n	80172a0 <__multiply+0x90>
 8017298:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801729c:	2b00      	cmp	r3, #0
 801729e:	d05a      	beq.n	8017356 <__multiply+0x146>
 80172a0:	6106      	str	r6, [r0, #16]
 80172a2:	b005      	add	sp, #20
 80172a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172a8:	f843 2b04 	str.w	r2, [r3], #4
 80172ac:	e7d8      	b.n	8017260 <__multiply+0x50>
 80172ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80172b2:	f1ba 0f00 	cmp.w	sl, #0
 80172b6:	d024      	beq.n	8017302 <__multiply+0xf2>
 80172b8:	f104 0e14 	add.w	lr, r4, #20
 80172bc:	46a9      	mov	r9, r5
 80172be:	f04f 0c00 	mov.w	ip, #0
 80172c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80172c6:	f8d9 1000 	ldr.w	r1, [r9]
 80172ca:	fa1f fb82 	uxth.w	fp, r2
 80172ce:	b289      	uxth	r1, r1
 80172d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80172d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80172d8:	f8d9 2000 	ldr.w	r2, [r9]
 80172dc:	4461      	add	r1, ip
 80172de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80172e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80172e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80172ea:	b289      	uxth	r1, r1
 80172ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80172f0:	4577      	cmp	r7, lr
 80172f2:	f849 1b04 	str.w	r1, [r9], #4
 80172f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80172fa:	d8e2      	bhi.n	80172c2 <__multiply+0xb2>
 80172fc:	9a01      	ldr	r2, [sp, #4]
 80172fe:	f845 c002 	str.w	ip, [r5, r2]
 8017302:	9a03      	ldr	r2, [sp, #12]
 8017304:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017308:	3304      	adds	r3, #4
 801730a:	f1b9 0f00 	cmp.w	r9, #0
 801730e:	d020      	beq.n	8017352 <__multiply+0x142>
 8017310:	6829      	ldr	r1, [r5, #0]
 8017312:	f104 0c14 	add.w	ip, r4, #20
 8017316:	46ae      	mov	lr, r5
 8017318:	f04f 0a00 	mov.w	sl, #0
 801731c:	f8bc b000 	ldrh.w	fp, [ip]
 8017320:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017324:	fb09 220b 	mla	r2, r9, fp, r2
 8017328:	4492      	add	sl, r2
 801732a:	b289      	uxth	r1, r1
 801732c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017330:	f84e 1b04 	str.w	r1, [lr], #4
 8017334:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017338:	f8be 1000 	ldrh.w	r1, [lr]
 801733c:	0c12      	lsrs	r2, r2, #16
 801733e:	fb09 1102 	mla	r1, r9, r2, r1
 8017342:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017346:	4567      	cmp	r7, ip
 8017348:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801734c:	d8e6      	bhi.n	801731c <__multiply+0x10c>
 801734e:	9a01      	ldr	r2, [sp, #4]
 8017350:	50a9      	str	r1, [r5, r2]
 8017352:	3504      	adds	r5, #4
 8017354:	e79a      	b.n	801728c <__multiply+0x7c>
 8017356:	3e01      	subs	r6, #1
 8017358:	e79c      	b.n	8017294 <__multiply+0x84>
 801735a:	bf00      	nop
 801735c:	0801852b 	.word	0x0801852b
 8017360:	0801859c 	.word	0x0801859c

08017364 <__pow5mult>:
 8017364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017368:	4615      	mov	r5, r2
 801736a:	f012 0203 	ands.w	r2, r2, #3
 801736e:	4606      	mov	r6, r0
 8017370:	460f      	mov	r7, r1
 8017372:	d007      	beq.n	8017384 <__pow5mult+0x20>
 8017374:	4c25      	ldr	r4, [pc, #148]	; (801740c <__pow5mult+0xa8>)
 8017376:	3a01      	subs	r2, #1
 8017378:	2300      	movs	r3, #0
 801737a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801737e:	f7ff fe9b 	bl	80170b8 <__multadd>
 8017382:	4607      	mov	r7, r0
 8017384:	10ad      	asrs	r5, r5, #2
 8017386:	d03d      	beq.n	8017404 <__pow5mult+0xa0>
 8017388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801738a:	b97c      	cbnz	r4, 80173ac <__pow5mult+0x48>
 801738c:	2010      	movs	r0, #16
 801738e:	f7ff fe29 	bl	8016fe4 <malloc>
 8017392:	4602      	mov	r2, r0
 8017394:	6270      	str	r0, [r6, #36]	; 0x24
 8017396:	b928      	cbnz	r0, 80173a4 <__pow5mult+0x40>
 8017398:	4b1d      	ldr	r3, [pc, #116]	; (8017410 <__pow5mult+0xac>)
 801739a:	481e      	ldr	r0, [pc, #120]	; (8017414 <__pow5mult+0xb0>)
 801739c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80173a0:	f000 fc62 	bl	8017c68 <__assert_func>
 80173a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80173a8:	6004      	str	r4, [r0, #0]
 80173aa:	60c4      	str	r4, [r0, #12]
 80173ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80173b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80173b4:	b94c      	cbnz	r4, 80173ca <__pow5mult+0x66>
 80173b6:	f240 2171 	movw	r1, #625	; 0x271
 80173ba:	4630      	mov	r0, r6
 80173bc:	f7ff ff12 	bl	80171e4 <__i2b>
 80173c0:	2300      	movs	r3, #0
 80173c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80173c6:	4604      	mov	r4, r0
 80173c8:	6003      	str	r3, [r0, #0]
 80173ca:	f04f 0900 	mov.w	r9, #0
 80173ce:	07eb      	lsls	r3, r5, #31
 80173d0:	d50a      	bpl.n	80173e8 <__pow5mult+0x84>
 80173d2:	4639      	mov	r1, r7
 80173d4:	4622      	mov	r2, r4
 80173d6:	4630      	mov	r0, r6
 80173d8:	f7ff ff1a 	bl	8017210 <__multiply>
 80173dc:	4639      	mov	r1, r7
 80173de:	4680      	mov	r8, r0
 80173e0:	4630      	mov	r0, r6
 80173e2:	f7ff fe47 	bl	8017074 <_Bfree>
 80173e6:	4647      	mov	r7, r8
 80173e8:	106d      	asrs	r5, r5, #1
 80173ea:	d00b      	beq.n	8017404 <__pow5mult+0xa0>
 80173ec:	6820      	ldr	r0, [r4, #0]
 80173ee:	b938      	cbnz	r0, 8017400 <__pow5mult+0x9c>
 80173f0:	4622      	mov	r2, r4
 80173f2:	4621      	mov	r1, r4
 80173f4:	4630      	mov	r0, r6
 80173f6:	f7ff ff0b 	bl	8017210 <__multiply>
 80173fa:	6020      	str	r0, [r4, #0]
 80173fc:	f8c0 9000 	str.w	r9, [r0]
 8017400:	4604      	mov	r4, r0
 8017402:	e7e4      	b.n	80173ce <__pow5mult+0x6a>
 8017404:	4638      	mov	r0, r7
 8017406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801740a:	bf00      	nop
 801740c:	080186e8 	.word	0x080186e8
 8017410:	080184b9 	.word	0x080184b9
 8017414:	0801859c 	.word	0x0801859c

08017418 <__lshift>:
 8017418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801741c:	460c      	mov	r4, r1
 801741e:	6849      	ldr	r1, [r1, #4]
 8017420:	6923      	ldr	r3, [r4, #16]
 8017422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017426:	68a3      	ldr	r3, [r4, #8]
 8017428:	4607      	mov	r7, r0
 801742a:	4691      	mov	r9, r2
 801742c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017430:	f108 0601 	add.w	r6, r8, #1
 8017434:	42b3      	cmp	r3, r6
 8017436:	db0b      	blt.n	8017450 <__lshift+0x38>
 8017438:	4638      	mov	r0, r7
 801743a:	f7ff fddb 	bl	8016ff4 <_Balloc>
 801743e:	4605      	mov	r5, r0
 8017440:	b948      	cbnz	r0, 8017456 <__lshift+0x3e>
 8017442:	4602      	mov	r2, r0
 8017444:	4b2a      	ldr	r3, [pc, #168]	; (80174f0 <__lshift+0xd8>)
 8017446:	482b      	ldr	r0, [pc, #172]	; (80174f4 <__lshift+0xdc>)
 8017448:	f240 11d9 	movw	r1, #473	; 0x1d9
 801744c:	f000 fc0c 	bl	8017c68 <__assert_func>
 8017450:	3101      	adds	r1, #1
 8017452:	005b      	lsls	r3, r3, #1
 8017454:	e7ee      	b.n	8017434 <__lshift+0x1c>
 8017456:	2300      	movs	r3, #0
 8017458:	f100 0114 	add.w	r1, r0, #20
 801745c:	f100 0210 	add.w	r2, r0, #16
 8017460:	4618      	mov	r0, r3
 8017462:	4553      	cmp	r3, sl
 8017464:	db37      	blt.n	80174d6 <__lshift+0xbe>
 8017466:	6920      	ldr	r0, [r4, #16]
 8017468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801746c:	f104 0314 	add.w	r3, r4, #20
 8017470:	f019 091f 	ands.w	r9, r9, #31
 8017474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017478:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801747c:	d02f      	beq.n	80174de <__lshift+0xc6>
 801747e:	f1c9 0e20 	rsb	lr, r9, #32
 8017482:	468a      	mov	sl, r1
 8017484:	f04f 0c00 	mov.w	ip, #0
 8017488:	681a      	ldr	r2, [r3, #0]
 801748a:	fa02 f209 	lsl.w	r2, r2, r9
 801748e:	ea42 020c 	orr.w	r2, r2, ip
 8017492:	f84a 2b04 	str.w	r2, [sl], #4
 8017496:	f853 2b04 	ldr.w	r2, [r3], #4
 801749a:	4298      	cmp	r0, r3
 801749c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80174a0:	d8f2      	bhi.n	8017488 <__lshift+0x70>
 80174a2:	1b03      	subs	r3, r0, r4
 80174a4:	3b15      	subs	r3, #21
 80174a6:	f023 0303 	bic.w	r3, r3, #3
 80174aa:	3304      	adds	r3, #4
 80174ac:	f104 0215 	add.w	r2, r4, #21
 80174b0:	4290      	cmp	r0, r2
 80174b2:	bf38      	it	cc
 80174b4:	2304      	movcc	r3, #4
 80174b6:	f841 c003 	str.w	ip, [r1, r3]
 80174ba:	f1bc 0f00 	cmp.w	ip, #0
 80174be:	d001      	beq.n	80174c4 <__lshift+0xac>
 80174c0:	f108 0602 	add.w	r6, r8, #2
 80174c4:	3e01      	subs	r6, #1
 80174c6:	4638      	mov	r0, r7
 80174c8:	612e      	str	r6, [r5, #16]
 80174ca:	4621      	mov	r1, r4
 80174cc:	f7ff fdd2 	bl	8017074 <_Bfree>
 80174d0:	4628      	mov	r0, r5
 80174d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80174da:	3301      	adds	r3, #1
 80174dc:	e7c1      	b.n	8017462 <__lshift+0x4a>
 80174de:	3904      	subs	r1, #4
 80174e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80174e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80174e8:	4298      	cmp	r0, r3
 80174ea:	d8f9      	bhi.n	80174e0 <__lshift+0xc8>
 80174ec:	e7ea      	b.n	80174c4 <__lshift+0xac>
 80174ee:	bf00      	nop
 80174f0:	0801852b 	.word	0x0801852b
 80174f4:	0801859c 	.word	0x0801859c

080174f8 <__mcmp>:
 80174f8:	b530      	push	{r4, r5, lr}
 80174fa:	6902      	ldr	r2, [r0, #16]
 80174fc:	690c      	ldr	r4, [r1, #16]
 80174fe:	1b12      	subs	r2, r2, r4
 8017500:	d10e      	bne.n	8017520 <__mcmp+0x28>
 8017502:	f100 0314 	add.w	r3, r0, #20
 8017506:	3114      	adds	r1, #20
 8017508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801750c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017518:	42a5      	cmp	r5, r4
 801751a:	d003      	beq.n	8017524 <__mcmp+0x2c>
 801751c:	d305      	bcc.n	801752a <__mcmp+0x32>
 801751e:	2201      	movs	r2, #1
 8017520:	4610      	mov	r0, r2
 8017522:	bd30      	pop	{r4, r5, pc}
 8017524:	4283      	cmp	r3, r0
 8017526:	d3f3      	bcc.n	8017510 <__mcmp+0x18>
 8017528:	e7fa      	b.n	8017520 <__mcmp+0x28>
 801752a:	f04f 32ff 	mov.w	r2, #4294967295
 801752e:	e7f7      	b.n	8017520 <__mcmp+0x28>

08017530 <__mdiff>:
 8017530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017534:	460c      	mov	r4, r1
 8017536:	4606      	mov	r6, r0
 8017538:	4611      	mov	r1, r2
 801753a:	4620      	mov	r0, r4
 801753c:	4690      	mov	r8, r2
 801753e:	f7ff ffdb 	bl	80174f8 <__mcmp>
 8017542:	1e05      	subs	r5, r0, #0
 8017544:	d110      	bne.n	8017568 <__mdiff+0x38>
 8017546:	4629      	mov	r1, r5
 8017548:	4630      	mov	r0, r6
 801754a:	f7ff fd53 	bl	8016ff4 <_Balloc>
 801754e:	b930      	cbnz	r0, 801755e <__mdiff+0x2e>
 8017550:	4b3a      	ldr	r3, [pc, #232]	; (801763c <__mdiff+0x10c>)
 8017552:	4602      	mov	r2, r0
 8017554:	f240 2132 	movw	r1, #562	; 0x232
 8017558:	4839      	ldr	r0, [pc, #228]	; (8017640 <__mdiff+0x110>)
 801755a:	f000 fb85 	bl	8017c68 <__assert_func>
 801755e:	2301      	movs	r3, #1
 8017560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017568:	bfa4      	itt	ge
 801756a:	4643      	movge	r3, r8
 801756c:	46a0      	movge	r8, r4
 801756e:	4630      	mov	r0, r6
 8017570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017574:	bfa6      	itte	ge
 8017576:	461c      	movge	r4, r3
 8017578:	2500      	movge	r5, #0
 801757a:	2501      	movlt	r5, #1
 801757c:	f7ff fd3a 	bl	8016ff4 <_Balloc>
 8017580:	b920      	cbnz	r0, 801758c <__mdiff+0x5c>
 8017582:	4b2e      	ldr	r3, [pc, #184]	; (801763c <__mdiff+0x10c>)
 8017584:	4602      	mov	r2, r0
 8017586:	f44f 7110 	mov.w	r1, #576	; 0x240
 801758a:	e7e5      	b.n	8017558 <__mdiff+0x28>
 801758c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017590:	6926      	ldr	r6, [r4, #16]
 8017592:	60c5      	str	r5, [r0, #12]
 8017594:	f104 0914 	add.w	r9, r4, #20
 8017598:	f108 0514 	add.w	r5, r8, #20
 801759c:	f100 0e14 	add.w	lr, r0, #20
 80175a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80175a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80175a8:	f108 0210 	add.w	r2, r8, #16
 80175ac:	46f2      	mov	sl, lr
 80175ae:	2100      	movs	r1, #0
 80175b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80175b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80175b8:	fa1f f883 	uxth.w	r8, r3
 80175bc:	fa11 f18b 	uxtah	r1, r1, fp
 80175c0:	0c1b      	lsrs	r3, r3, #16
 80175c2:	eba1 0808 	sub.w	r8, r1, r8
 80175c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80175ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80175ce:	fa1f f888 	uxth.w	r8, r8
 80175d2:	1419      	asrs	r1, r3, #16
 80175d4:	454e      	cmp	r6, r9
 80175d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80175da:	f84a 3b04 	str.w	r3, [sl], #4
 80175de:	d8e7      	bhi.n	80175b0 <__mdiff+0x80>
 80175e0:	1b33      	subs	r3, r6, r4
 80175e2:	3b15      	subs	r3, #21
 80175e4:	f023 0303 	bic.w	r3, r3, #3
 80175e8:	3304      	adds	r3, #4
 80175ea:	3415      	adds	r4, #21
 80175ec:	42a6      	cmp	r6, r4
 80175ee:	bf38      	it	cc
 80175f0:	2304      	movcc	r3, #4
 80175f2:	441d      	add	r5, r3
 80175f4:	4473      	add	r3, lr
 80175f6:	469e      	mov	lr, r3
 80175f8:	462e      	mov	r6, r5
 80175fa:	4566      	cmp	r6, ip
 80175fc:	d30e      	bcc.n	801761c <__mdiff+0xec>
 80175fe:	f10c 0203 	add.w	r2, ip, #3
 8017602:	1b52      	subs	r2, r2, r5
 8017604:	f022 0203 	bic.w	r2, r2, #3
 8017608:	3d03      	subs	r5, #3
 801760a:	45ac      	cmp	ip, r5
 801760c:	bf38      	it	cc
 801760e:	2200      	movcc	r2, #0
 8017610:	441a      	add	r2, r3
 8017612:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017616:	b17b      	cbz	r3, 8017638 <__mdiff+0x108>
 8017618:	6107      	str	r7, [r0, #16]
 801761a:	e7a3      	b.n	8017564 <__mdiff+0x34>
 801761c:	f856 8b04 	ldr.w	r8, [r6], #4
 8017620:	fa11 f288 	uxtah	r2, r1, r8
 8017624:	1414      	asrs	r4, r2, #16
 8017626:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801762a:	b292      	uxth	r2, r2
 801762c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017630:	f84e 2b04 	str.w	r2, [lr], #4
 8017634:	1421      	asrs	r1, r4, #16
 8017636:	e7e0      	b.n	80175fa <__mdiff+0xca>
 8017638:	3f01      	subs	r7, #1
 801763a:	e7ea      	b.n	8017612 <__mdiff+0xe2>
 801763c:	0801852b 	.word	0x0801852b
 8017640:	0801859c 	.word	0x0801859c

08017644 <__d2b>:
 8017644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017648:	4689      	mov	r9, r1
 801764a:	2101      	movs	r1, #1
 801764c:	ec57 6b10 	vmov	r6, r7, d0
 8017650:	4690      	mov	r8, r2
 8017652:	f7ff fccf 	bl	8016ff4 <_Balloc>
 8017656:	4604      	mov	r4, r0
 8017658:	b930      	cbnz	r0, 8017668 <__d2b+0x24>
 801765a:	4602      	mov	r2, r0
 801765c:	4b25      	ldr	r3, [pc, #148]	; (80176f4 <__d2b+0xb0>)
 801765e:	4826      	ldr	r0, [pc, #152]	; (80176f8 <__d2b+0xb4>)
 8017660:	f240 310a 	movw	r1, #778	; 0x30a
 8017664:	f000 fb00 	bl	8017c68 <__assert_func>
 8017668:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801766c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017670:	bb35      	cbnz	r5, 80176c0 <__d2b+0x7c>
 8017672:	2e00      	cmp	r6, #0
 8017674:	9301      	str	r3, [sp, #4]
 8017676:	d028      	beq.n	80176ca <__d2b+0x86>
 8017678:	4668      	mov	r0, sp
 801767a:	9600      	str	r6, [sp, #0]
 801767c:	f7ff fd82 	bl	8017184 <__lo0bits>
 8017680:	9900      	ldr	r1, [sp, #0]
 8017682:	b300      	cbz	r0, 80176c6 <__d2b+0x82>
 8017684:	9a01      	ldr	r2, [sp, #4]
 8017686:	f1c0 0320 	rsb	r3, r0, #32
 801768a:	fa02 f303 	lsl.w	r3, r2, r3
 801768e:	430b      	orrs	r3, r1
 8017690:	40c2      	lsrs	r2, r0
 8017692:	6163      	str	r3, [r4, #20]
 8017694:	9201      	str	r2, [sp, #4]
 8017696:	9b01      	ldr	r3, [sp, #4]
 8017698:	61a3      	str	r3, [r4, #24]
 801769a:	2b00      	cmp	r3, #0
 801769c:	bf14      	ite	ne
 801769e:	2202      	movne	r2, #2
 80176a0:	2201      	moveq	r2, #1
 80176a2:	6122      	str	r2, [r4, #16]
 80176a4:	b1d5      	cbz	r5, 80176dc <__d2b+0x98>
 80176a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80176aa:	4405      	add	r5, r0
 80176ac:	f8c9 5000 	str.w	r5, [r9]
 80176b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80176b4:	f8c8 0000 	str.w	r0, [r8]
 80176b8:	4620      	mov	r0, r4
 80176ba:	b003      	add	sp, #12
 80176bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80176c4:	e7d5      	b.n	8017672 <__d2b+0x2e>
 80176c6:	6161      	str	r1, [r4, #20]
 80176c8:	e7e5      	b.n	8017696 <__d2b+0x52>
 80176ca:	a801      	add	r0, sp, #4
 80176cc:	f7ff fd5a 	bl	8017184 <__lo0bits>
 80176d0:	9b01      	ldr	r3, [sp, #4]
 80176d2:	6163      	str	r3, [r4, #20]
 80176d4:	2201      	movs	r2, #1
 80176d6:	6122      	str	r2, [r4, #16]
 80176d8:	3020      	adds	r0, #32
 80176da:	e7e3      	b.n	80176a4 <__d2b+0x60>
 80176dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80176e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80176e4:	f8c9 0000 	str.w	r0, [r9]
 80176e8:	6918      	ldr	r0, [r3, #16]
 80176ea:	f7ff fd2b 	bl	8017144 <__hi0bits>
 80176ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80176f2:	e7df      	b.n	80176b4 <__d2b+0x70>
 80176f4:	0801852b 	.word	0x0801852b
 80176f8:	0801859c 	.word	0x0801859c

080176fc <_calloc_r>:
 80176fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176fe:	fba1 2402 	umull	r2, r4, r1, r2
 8017702:	b94c      	cbnz	r4, 8017718 <_calloc_r+0x1c>
 8017704:	4611      	mov	r1, r2
 8017706:	9201      	str	r2, [sp, #4]
 8017708:	f000 f87a 	bl	8017800 <_malloc_r>
 801770c:	9a01      	ldr	r2, [sp, #4]
 801770e:	4605      	mov	r5, r0
 8017710:	b930      	cbnz	r0, 8017720 <_calloc_r+0x24>
 8017712:	4628      	mov	r0, r5
 8017714:	b003      	add	sp, #12
 8017716:	bd30      	pop	{r4, r5, pc}
 8017718:	220c      	movs	r2, #12
 801771a:	6002      	str	r2, [r0, #0]
 801771c:	2500      	movs	r5, #0
 801771e:	e7f8      	b.n	8017712 <_calloc_r+0x16>
 8017720:	4621      	mov	r1, r4
 8017722:	f7fd fdff 	bl	8015324 <memset>
 8017726:	e7f4      	b.n	8017712 <_calloc_r+0x16>

08017728 <_free_r>:
 8017728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801772a:	2900      	cmp	r1, #0
 801772c:	d044      	beq.n	80177b8 <_free_r+0x90>
 801772e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017732:	9001      	str	r0, [sp, #4]
 8017734:	2b00      	cmp	r3, #0
 8017736:	f1a1 0404 	sub.w	r4, r1, #4
 801773a:	bfb8      	it	lt
 801773c:	18e4      	addlt	r4, r4, r3
 801773e:	f000 fb19 	bl	8017d74 <__malloc_lock>
 8017742:	4a1e      	ldr	r2, [pc, #120]	; (80177bc <_free_r+0x94>)
 8017744:	9801      	ldr	r0, [sp, #4]
 8017746:	6813      	ldr	r3, [r2, #0]
 8017748:	b933      	cbnz	r3, 8017758 <_free_r+0x30>
 801774a:	6063      	str	r3, [r4, #4]
 801774c:	6014      	str	r4, [r2, #0]
 801774e:	b003      	add	sp, #12
 8017750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017754:	f000 bb14 	b.w	8017d80 <__malloc_unlock>
 8017758:	42a3      	cmp	r3, r4
 801775a:	d908      	bls.n	801776e <_free_r+0x46>
 801775c:	6825      	ldr	r5, [r4, #0]
 801775e:	1961      	adds	r1, r4, r5
 8017760:	428b      	cmp	r3, r1
 8017762:	bf01      	itttt	eq
 8017764:	6819      	ldreq	r1, [r3, #0]
 8017766:	685b      	ldreq	r3, [r3, #4]
 8017768:	1949      	addeq	r1, r1, r5
 801776a:	6021      	streq	r1, [r4, #0]
 801776c:	e7ed      	b.n	801774a <_free_r+0x22>
 801776e:	461a      	mov	r2, r3
 8017770:	685b      	ldr	r3, [r3, #4]
 8017772:	b10b      	cbz	r3, 8017778 <_free_r+0x50>
 8017774:	42a3      	cmp	r3, r4
 8017776:	d9fa      	bls.n	801776e <_free_r+0x46>
 8017778:	6811      	ldr	r1, [r2, #0]
 801777a:	1855      	adds	r5, r2, r1
 801777c:	42a5      	cmp	r5, r4
 801777e:	d10b      	bne.n	8017798 <_free_r+0x70>
 8017780:	6824      	ldr	r4, [r4, #0]
 8017782:	4421      	add	r1, r4
 8017784:	1854      	adds	r4, r2, r1
 8017786:	42a3      	cmp	r3, r4
 8017788:	6011      	str	r1, [r2, #0]
 801778a:	d1e0      	bne.n	801774e <_free_r+0x26>
 801778c:	681c      	ldr	r4, [r3, #0]
 801778e:	685b      	ldr	r3, [r3, #4]
 8017790:	6053      	str	r3, [r2, #4]
 8017792:	4421      	add	r1, r4
 8017794:	6011      	str	r1, [r2, #0]
 8017796:	e7da      	b.n	801774e <_free_r+0x26>
 8017798:	d902      	bls.n	80177a0 <_free_r+0x78>
 801779a:	230c      	movs	r3, #12
 801779c:	6003      	str	r3, [r0, #0]
 801779e:	e7d6      	b.n	801774e <_free_r+0x26>
 80177a0:	6825      	ldr	r5, [r4, #0]
 80177a2:	1961      	adds	r1, r4, r5
 80177a4:	428b      	cmp	r3, r1
 80177a6:	bf04      	itt	eq
 80177a8:	6819      	ldreq	r1, [r3, #0]
 80177aa:	685b      	ldreq	r3, [r3, #4]
 80177ac:	6063      	str	r3, [r4, #4]
 80177ae:	bf04      	itt	eq
 80177b0:	1949      	addeq	r1, r1, r5
 80177b2:	6021      	streq	r1, [r4, #0]
 80177b4:	6054      	str	r4, [r2, #4]
 80177b6:	e7ca      	b.n	801774e <_free_r+0x26>
 80177b8:	b003      	add	sp, #12
 80177ba:	bd30      	pop	{r4, r5, pc}
 80177bc:	200024d4 	.word	0x200024d4

080177c0 <sbrk_aligned>:
 80177c0:	b570      	push	{r4, r5, r6, lr}
 80177c2:	4e0e      	ldr	r6, [pc, #56]	; (80177fc <sbrk_aligned+0x3c>)
 80177c4:	460c      	mov	r4, r1
 80177c6:	6831      	ldr	r1, [r6, #0]
 80177c8:	4605      	mov	r5, r0
 80177ca:	b911      	cbnz	r1, 80177d2 <sbrk_aligned+0x12>
 80177cc:	f000 f9e6 	bl	8017b9c <_sbrk_r>
 80177d0:	6030      	str	r0, [r6, #0]
 80177d2:	4621      	mov	r1, r4
 80177d4:	4628      	mov	r0, r5
 80177d6:	f000 f9e1 	bl	8017b9c <_sbrk_r>
 80177da:	1c43      	adds	r3, r0, #1
 80177dc:	d00a      	beq.n	80177f4 <sbrk_aligned+0x34>
 80177de:	1cc4      	adds	r4, r0, #3
 80177e0:	f024 0403 	bic.w	r4, r4, #3
 80177e4:	42a0      	cmp	r0, r4
 80177e6:	d007      	beq.n	80177f8 <sbrk_aligned+0x38>
 80177e8:	1a21      	subs	r1, r4, r0
 80177ea:	4628      	mov	r0, r5
 80177ec:	f000 f9d6 	bl	8017b9c <_sbrk_r>
 80177f0:	3001      	adds	r0, #1
 80177f2:	d101      	bne.n	80177f8 <sbrk_aligned+0x38>
 80177f4:	f04f 34ff 	mov.w	r4, #4294967295
 80177f8:	4620      	mov	r0, r4
 80177fa:	bd70      	pop	{r4, r5, r6, pc}
 80177fc:	200024d8 	.word	0x200024d8

08017800 <_malloc_r>:
 8017800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017804:	1ccd      	adds	r5, r1, #3
 8017806:	f025 0503 	bic.w	r5, r5, #3
 801780a:	3508      	adds	r5, #8
 801780c:	2d0c      	cmp	r5, #12
 801780e:	bf38      	it	cc
 8017810:	250c      	movcc	r5, #12
 8017812:	2d00      	cmp	r5, #0
 8017814:	4607      	mov	r7, r0
 8017816:	db01      	blt.n	801781c <_malloc_r+0x1c>
 8017818:	42a9      	cmp	r1, r5
 801781a:	d905      	bls.n	8017828 <_malloc_r+0x28>
 801781c:	230c      	movs	r3, #12
 801781e:	603b      	str	r3, [r7, #0]
 8017820:	2600      	movs	r6, #0
 8017822:	4630      	mov	r0, r6
 8017824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017828:	4e2e      	ldr	r6, [pc, #184]	; (80178e4 <_malloc_r+0xe4>)
 801782a:	f000 faa3 	bl	8017d74 <__malloc_lock>
 801782e:	6833      	ldr	r3, [r6, #0]
 8017830:	461c      	mov	r4, r3
 8017832:	bb34      	cbnz	r4, 8017882 <_malloc_r+0x82>
 8017834:	4629      	mov	r1, r5
 8017836:	4638      	mov	r0, r7
 8017838:	f7ff ffc2 	bl	80177c0 <sbrk_aligned>
 801783c:	1c43      	adds	r3, r0, #1
 801783e:	4604      	mov	r4, r0
 8017840:	d14d      	bne.n	80178de <_malloc_r+0xde>
 8017842:	6834      	ldr	r4, [r6, #0]
 8017844:	4626      	mov	r6, r4
 8017846:	2e00      	cmp	r6, #0
 8017848:	d140      	bne.n	80178cc <_malloc_r+0xcc>
 801784a:	6823      	ldr	r3, [r4, #0]
 801784c:	4631      	mov	r1, r6
 801784e:	4638      	mov	r0, r7
 8017850:	eb04 0803 	add.w	r8, r4, r3
 8017854:	f000 f9a2 	bl	8017b9c <_sbrk_r>
 8017858:	4580      	cmp	r8, r0
 801785a:	d13a      	bne.n	80178d2 <_malloc_r+0xd2>
 801785c:	6821      	ldr	r1, [r4, #0]
 801785e:	3503      	adds	r5, #3
 8017860:	1a6d      	subs	r5, r5, r1
 8017862:	f025 0503 	bic.w	r5, r5, #3
 8017866:	3508      	adds	r5, #8
 8017868:	2d0c      	cmp	r5, #12
 801786a:	bf38      	it	cc
 801786c:	250c      	movcc	r5, #12
 801786e:	4629      	mov	r1, r5
 8017870:	4638      	mov	r0, r7
 8017872:	f7ff ffa5 	bl	80177c0 <sbrk_aligned>
 8017876:	3001      	adds	r0, #1
 8017878:	d02b      	beq.n	80178d2 <_malloc_r+0xd2>
 801787a:	6823      	ldr	r3, [r4, #0]
 801787c:	442b      	add	r3, r5
 801787e:	6023      	str	r3, [r4, #0]
 8017880:	e00e      	b.n	80178a0 <_malloc_r+0xa0>
 8017882:	6822      	ldr	r2, [r4, #0]
 8017884:	1b52      	subs	r2, r2, r5
 8017886:	d41e      	bmi.n	80178c6 <_malloc_r+0xc6>
 8017888:	2a0b      	cmp	r2, #11
 801788a:	d916      	bls.n	80178ba <_malloc_r+0xba>
 801788c:	1961      	adds	r1, r4, r5
 801788e:	42a3      	cmp	r3, r4
 8017890:	6025      	str	r5, [r4, #0]
 8017892:	bf18      	it	ne
 8017894:	6059      	strne	r1, [r3, #4]
 8017896:	6863      	ldr	r3, [r4, #4]
 8017898:	bf08      	it	eq
 801789a:	6031      	streq	r1, [r6, #0]
 801789c:	5162      	str	r2, [r4, r5]
 801789e:	604b      	str	r3, [r1, #4]
 80178a0:	4638      	mov	r0, r7
 80178a2:	f104 060b 	add.w	r6, r4, #11
 80178a6:	f000 fa6b 	bl	8017d80 <__malloc_unlock>
 80178aa:	f026 0607 	bic.w	r6, r6, #7
 80178ae:	1d23      	adds	r3, r4, #4
 80178b0:	1af2      	subs	r2, r6, r3
 80178b2:	d0b6      	beq.n	8017822 <_malloc_r+0x22>
 80178b4:	1b9b      	subs	r3, r3, r6
 80178b6:	50a3      	str	r3, [r4, r2]
 80178b8:	e7b3      	b.n	8017822 <_malloc_r+0x22>
 80178ba:	6862      	ldr	r2, [r4, #4]
 80178bc:	42a3      	cmp	r3, r4
 80178be:	bf0c      	ite	eq
 80178c0:	6032      	streq	r2, [r6, #0]
 80178c2:	605a      	strne	r2, [r3, #4]
 80178c4:	e7ec      	b.n	80178a0 <_malloc_r+0xa0>
 80178c6:	4623      	mov	r3, r4
 80178c8:	6864      	ldr	r4, [r4, #4]
 80178ca:	e7b2      	b.n	8017832 <_malloc_r+0x32>
 80178cc:	4634      	mov	r4, r6
 80178ce:	6876      	ldr	r6, [r6, #4]
 80178d0:	e7b9      	b.n	8017846 <_malloc_r+0x46>
 80178d2:	230c      	movs	r3, #12
 80178d4:	603b      	str	r3, [r7, #0]
 80178d6:	4638      	mov	r0, r7
 80178d8:	f000 fa52 	bl	8017d80 <__malloc_unlock>
 80178dc:	e7a1      	b.n	8017822 <_malloc_r+0x22>
 80178de:	6025      	str	r5, [r4, #0]
 80178e0:	e7de      	b.n	80178a0 <_malloc_r+0xa0>
 80178e2:	bf00      	nop
 80178e4:	200024d4 	.word	0x200024d4

080178e8 <__sfputc_r>:
 80178e8:	6893      	ldr	r3, [r2, #8]
 80178ea:	3b01      	subs	r3, #1
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	b410      	push	{r4}
 80178f0:	6093      	str	r3, [r2, #8]
 80178f2:	da08      	bge.n	8017906 <__sfputc_r+0x1e>
 80178f4:	6994      	ldr	r4, [r2, #24]
 80178f6:	42a3      	cmp	r3, r4
 80178f8:	db01      	blt.n	80178fe <__sfputc_r+0x16>
 80178fa:	290a      	cmp	r1, #10
 80178fc:	d103      	bne.n	8017906 <__sfputc_r+0x1e>
 80178fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017902:	f7fe ba0f 	b.w	8015d24 <__swbuf_r>
 8017906:	6813      	ldr	r3, [r2, #0]
 8017908:	1c58      	adds	r0, r3, #1
 801790a:	6010      	str	r0, [r2, #0]
 801790c:	7019      	strb	r1, [r3, #0]
 801790e:	4608      	mov	r0, r1
 8017910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017914:	4770      	bx	lr

08017916 <__sfputs_r>:
 8017916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017918:	4606      	mov	r6, r0
 801791a:	460f      	mov	r7, r1
 801791c:	4614      	mov	r4, r2
 801791e:	18d5      	adds	r5, r2, r3
 8017920:	42ac      	cmp	r4, r5
 8017922:	d101      	bne.n	8017928 <__sfputs_r+0x12>
 8017924:	2000      	movs	r0, #0
 8017926:	e007      	b.n	8017938 <__sfputs_r+0x22>
 8017928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801792c:	463a      	mov	r2, r7
 801792e:	4630      	mov	r0, r6
 8017930:	f7ff ffda 	bl	80178e8 <__sfputc_r>
 8017934:	1c43      	adds	r3, r0, #1
 8017936:	d1f3      	bne.n	8017920 <__sfputs_r+0xa>
 8017938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801793c <_vfiprintf_r>:
 801793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017940:	460d      	mov	r5, r1
 8017942:	b09d      	sub	sp, #116	; 0x74
 8017944:	4614      	mov	r4, r2
 8017946:	4698      	mov	r8, r3
 8017948:	4606      	mov	r6, r0
 801794a:	b118      	cbz	r0, 8017954 <_vfiprintf_r+0x18>
 801794c:	6983      	ldr	r3, [r0, #24]
 801794e:	b90b      	cbnz	r3, 8017954 <_vfiprintf_r+0x18>
 8017950:	f7ff fa3e 	bl	8016dd0 <__sinit>
 8017954:	4b89      	ldr	r3, [pc, #548]	; (8017b7c <_vfiprintf_r+0x240>)
 8017956:	429d      	cmp	r5, r3
 8017958:	d11b      	bne.n	8017992 <_vfiprintf_r+0x56>
 801795a:	6875      	ldr	r5, [r6, #4]
 801795c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801795e:	07d9      	lsls	r1, r3, #31
 8017960:	d405      	bmi.n	801796e <_vfiprintf_r+0x32>
 8017962:	89ab      	ldrh	r3, [r5, #12]
 8017964:	059a      	lsls	r2, r3, #22
 8017966:	d402      	bmi.n	801796e <_vfiprintf_r+0x32>
 8017968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801796a:	f7ff fad4 	bl	8016f16 <__retarget_lock_acquire_recursive>
 801796e:	89ab      	ldrh	r3, [r5, #12]
 8017970:	071b      	lsls	r3, r3, #28
 8017972:	d501      	bpl.n	8017978 <_vfiprintf_r+0x3c>
 8017974:	692b      	ldr	r3, [r5, #16]
 8017976:	b9eb      	cbnz	r3, 80179b4 <_vfiprintf_r+0x78>
 8017978:	4629      	mov	r1, r5
 801797a:	4630      	mov	r0, r6
 801797c:	f7fe fa24 	bl	8015dc8 <__swsetup_r>
 8017980:	b1c0      	cbz	r0, 80179b4 <_vfiprintf_r+0x78>
 8017982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017984:	07dc      	lsls	r4, r3, #31
 8017986:	d50e      	bpl.n	80179a6 <_vfiprintf_r+0x6a>
 8017988:	f04f 30ff 	mov.w	r0, #4294967295
 801798c:	b01d      	add	sp, #116	; 0x74
 801798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017992:	4b7b      	ldr	r3, [pc, #492]	; (8017b80 <_vfiprintf_r+0x244>)
 8017994:	429d      	cmp	r5, r3
 8017996:	d101      	bne.n	801799c <_vfiprintf_r+0x60>
 8017998:	68b5      	ldr	r5, [r6, #8]
 801799a:	e7df      	b.n	801795c <_vfiprintf_r+0x20>
 801799c:	4b79      	ldr	r3, [pc, #484]	; (8017b84 <_vfiprintf_r+0x248>)
 801799e:	429d      	cmp	r5, r3
 80179a0:	bf08      	it	eq
 80179a2:	68f5      	ldreq	r5, [r6, #12]
 80179a4:	e7da      	b.n	801795c <_vfiprintf_r+0x20>
 80179a6:	89ab      	ldrh	r3, [r5, #12]
 80179a8:	0598      	lsls	r0, r3, #22
 80179aa:	d4ed      	bmi.n	8017988 <_vfiprintf_r+0x4c>
 80179ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179ae:	f7ff fab3 	bl	8016f18 <__retarget_lock_release_recursive>
 80179b2:	e7e9      	b.n	8017988 <_vfiprintf_r+0x4c>
 80179b4:	2300      	movs	r3, #0
 80179b6:	9309      	str	r3, [sp, #36]	; 0x24
 80179b8:	2320      	movs	r3, #32
 80179ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80179be:	f8cd 800c 	str.w	r8, [sp, #12]
 80179c2:	2330      	movs	r3, #48	; 0x30
 80179c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017b88 <_vfiprintf_r+0x24c>
 80179c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80179cc:	f04f 0901 	mov.w	r9, #1
 80179d0:	4623      	mov	r3, r4
 80179d2:	469a      	mov	sl, r3
 80179d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179d8:	b10a      	cbz	r2, 80179de <_vfiprintf_r+0xa2>
 80179da:	2a25      	cmp	r2, #37	; 0x25
 80179dc:	d1f9      	bne.n	80179d2 <_vfiprintf_r+0x96>
 80179de:	ebba 0b04 	subs.w	fp, sl, r4
 80179e2:	d00b      	beq.n	80179fc <_vfiprintf_r+0xc0>
 80179e4:	465b      	mov	r3, fp
 80179e6:	4622      	mov	r2, r4
 80179e8:	4629      	mov	r1, r5
 80179ea:	4630      	mov	r0, r6
 80179ec:	f7ff ff93 	bl	8017916 <__sfputs_r>
 80179f0:	3001      	adds	r0, #1
 80179f2:	f000 80aa 	beq.w	8017b4a <_vfiprintf_r+0x20e>
 80179f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179f8:	445a      	add	r2, fp
 80179fa:	9209      	str	r2, [sp, #36]	; 0x24
 80179fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	f000 80a2 	beq.w	8017b4a <_vfiprintf_r+0x20e>
 8017a06:	2300      	movs	r3, #0
 8017a08:	f04f 32ff 	mov.w	r2, #4294967295
 8017a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a10:	f10a 0a01 	add.w	sl, sl, #1
 8017a14:	9304      	str	r3, [sp, #16]
 8017a16:	9307      	str	r3, [sp, #28]
 8017a18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a1c:	931a      	str	r3, [sp, #104]	; 0x68
 8017a1e:	4654      	mov	r4, sl
 8017a20:	2205      	movs	r2, #5
 8017a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a26:	4858      	ldr	r0, [pc, #352]	; (8017b88 <_vfiprintf_r+0x24c>)
 8017a28:	f7e8 fc02 	bl	8000230 <memchr>
 8017a2c:	9a04      	ldr	r2, [sp, #16]
 8017a2e:	b9d8      	cbnz	r0, 8017a68 <_vfiprintf_r+0x12c>
 8017a30:	06d1      	lsls	r1, r2, #27
 8017a32:	bf44      	itt	mi
 8017a34:	2320      	movmi	r3, #32
 8017a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a3a:	0713      	lsls	r3, r2, #28
 8017a3c:	bf44      	itt	mi
 8017a3e:	232b      	movmi	r3, #43	; 0x2b
 8017a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a44:	f89a 3000 	ldrb.w	r3, [sl]
 8017a48:	2b2a      	cmp	r3, #42	; 0x2a
 8017a4a:	d015      	beq.n	8017a78 <_vfiprintf_r+0x13c>
 8017a4c:	9a07      	ldr	r2, [sp, #28]
 8017a4e:	4654      	mov	r4, sl
 8017a50:	2000      	movs	r0, #0
 8017a52:	f04f 0c0a 	mov.w	ip, #10
 8017a56:	4621      	mov	r1, r4
 8017a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a5c:	3b30      	subs	r3, #48	; 0x30
 8017a5e:	2b09      	cmp	r3, #9
 8017a60:	d94e      	bls.n	8017b00 <_vfiprintf_r+0x1c4>
 8017a62:	b1b0      	cbz	r0, 8017a92 <_vfiprintf_r+0x156>
 8017a64:	9207      	str	r2, [sp, #28]
 8017a66:	e014      	b.n	8017a92 <_vfiprintf_r+0x156>
 8017a68:	eba0 0308 	sub.w	r3, r0, r8
 8017a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8017a70:	4313      	orrs	r3, r2
 8017a72:	9304      	str	r3, [sp, #16]
 8017a74:	46a2      	mov	sl, r4
 8017a76:	e7d2      	b.n	8017a1e <_vfiprintf_r+0xe2>
 8017a78:	9b03      	ldr	r3, [sp, #12]
 8017a7a:	1d19      	adds	r1, r3, #4
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	9103      	str	r1, [sp, #12]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	bfbb      	ittet	lt
 8017a84:	425b      	neglt	r3, r3
 8017a86:	f042 0202 	orrlt.w	r2, r2, #2
 8017a8a:	9307      	strge	r3, [sp, #28]
 8017a8c:	9307      	strlt	r3, [sp, #28]
 8017a8e:	bfb8      	it	lt
 8017a90:	9204      	strlt	r2, [sp, #16]
 8017a92:	7823      	ldrb	r3, [r4, #0]
 8017a94:	2b2e      	cmp	r3, #46	; 0x2e
 8017a96:	d10c      	bne.n	8017ab2 <_vfiprintf_r+0x176>
 8017a98:	7863      	ldrb	r3, [r4, #1]
 8017a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8017a9c:	d135      	bne.n	8017b0a <_vfiprintf_r+0x1ce>
 8017a9e:	9b03      	ldr	r3, [sp, #12]
 8017aa0:	1d1a      	adds	r2, r3, #4
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	9203      	str	r2, [sp, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	bfb8      	it	lt
 8017aaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8017aae:	3402      	adds	r4, #2
 8017ab0:	9305      	str	r3, [sp, #20]
 8017ab2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017b98 <_vfiprintf_r+0x25c>
 8017ab6:	7821      	ldrb	r1, [r4, #0]
 8017ab8:	2203      	movs	r2, #3
 8017aba:	4650      	mov	r0, sl
 8017abc:	f7e8 fbb8 	bl	8000230 <memchr>
 8017ac0:	b140      	cbz	r0, 8017ad4 <_vfiprintf_r+0x198>
 8017ac2:	2340      	movs	r3, #64	; 0x40
 8017ac4:	eba0 000a 	sub.w	r0, r0, sl
 8017ac8:	fa03 f000 	lsl.w	r0, r3, r0
 8017acc:	9b04      	ldr	r3, [sp, #16]
 8017ace:	4303      	orrs	r3, r0
 8017ad0:	3401      	adds	r4, #1
 8017ad2:	9304      	str	r3, [sp, #16]
 8017ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ad8:	482c      	ldr	r0, [pc, #176]	; (8017b8c <_vfiprintf_r+0x250>)
 8017ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ade:	2206      	movs	r2, #6
 8017ae0:	f7e8 fba6 	bl	8000230 <memchr>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	d03f      	beq.n	8017b68 <_vfiprintf_r+0x22c>
 8017ae8:	4b29      	ldr	r3, [pc, #164]	; (8017b90 <_vfiprintf_r+0x254>)
 8017aea:	bb1b      	cbnz	r3, 8017b34 <_vfiprintf_r+0x1f8>
 8017aec:	9b03      	ldr	r3, [sp, #12]
 8017aee:	3307      	adds	r3, #7
 8017af0:	f023 0307 	bic.w	r3, r3, #7
 8017af4:	3308      	adds	r3, #8
 8017af6:	9303      	str	r3, [sp, #12]
 8017af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017afa:	443b      	add	r3, r7
 8017afc:	9309      	str	r3, [sp, #36]	; 0x24
 8017afe:	e767      	b.n	80179d0 <_vfiprintf_r+0x94>
 8017b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b04:	460c      	mov	r4, r1
 8017b06:	2001      	movs	r0, #1
 8017b08:	e7a5      	b.n	8017a56 <_vfiprintf_r+0x11a>
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	3401      	adds	r4, #1
 8017b0e:	9305      	str	r3, [sp, #20]
 8017b10:	4619      	mov	r1, r3
 8017b12:	f04f 0c0a 	mov.w	ip, #10
 8017b16:	4620      	mov	r0, r4
 8017b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b1c:	3a30      	subs	r2, #48	; 0x30
 8017b1e:	2a09      	cmp	r2, #9
 8017b20:	d903      	bls.n	8017b2a <_vfiprintf_r+0x1ee>
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d0c5      	beq.n	8017ab2 <_vfiprintf_r+0x176>
 8017b26:	9105      	str	r1, [sp, #20]
 8017b28:	e7c3      	b.n	8017ab2 <_vfiprintf_r+0x176>
 8017b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b2e:	4604      	mov	r4, r0
 8017b30:	2301      	movs	r3, #1
 8017b32:	e7f0      	b.n	8017b16 <_vfiprintf_r+0x1da>
 8017b34:	ab03      	add	r3, sp, #12
 8017b36:	9300      	str	r3, [sp, #0]
 8017b38:	462a      	mov	r2, r5
 8017b3a:	4b16      	ldr	r3, [pc, #88]	; (8017b94 <_vfiprintf_r+0x258>)
 8017b3c:	a904      	add	r1, sp, #16
 8017b3e:	4630      	mov	r0, r6
 8017b40:	f7fd fc98 	bl	8015474 <_printf_float>
 8017b44:	4607      	mov	r7, r0
 8017b46:	1c78      	adds	r0, r7, #1
 8017b48:	d1d6      	bne.n	8017af8 <_vfiprintf_r+0x1bc>
 8017b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b4c:	07d9      	lsls	r1, r3, #31
 8017b4e:	d405      	bmi.n	8017b5c <_vfiprintf_r+0x220>
 8017b50:	89ab      	ldrh	r3, [r5, #12]
 8017b52:	059a      	lsls	r2, r3, #22
 8017b54:	d402      	bmi.n	8017b5c <_vfiprintf_r+0x220>
 8017b56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b58:	f7ff f9de 	bl	8016f18 <__retarget_lock_release_recursive>
 8017b5c:	89ab      	ldrh	r3, [r5, #12]
 8017b5e:	065b      	lsls	r3, r3, #25
 8017b60:	f53f af12 	bmi.w	8017988 <_vfiprintf_r+0x4c>
 8017b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b66:	e711      	b.n	801798c <_vfiprintf_r+0x50>
 8017b68:	ab03      	add	r3, sp, #12
 8017b6a:	9300      	str	r3, [sp, #0]
 8017b6c:	462a      	mov	r2, r5
 8017b6e:	4b09      	ldr	r3, [pc, #36]	; (8017b94 <_vfiprintf_r+0x258>)
 8017b70:	a904      	add	r1, sp, #16
 8017b72:	4630      	mov	r0, r6
 8017b74:	f7fd ff22 	bl	80159bc <_printf_i>
 8017b78:	e7e4      	b.n	8017b44 <_vfiprintf_r+0x208>
 8017b7a:	bf00      	nop
 8017b7c:	0801855c 	.word	0x0801855c
 8017b80:	0801857c 	.word	0x0801857c
 8017b84:	0801853c 	.word	0x0801853c
 8017b88:	080186f4 	.word	0x080186f4
 8017b8c:	080186fe 	.word	0x080186fe
 8017b90:	08015475 	.word	0x08015475
 8017b94:	08017917 	.word	0x08017917
 8017b98:	080186fa 	.word	0x080186fa

08017b9c <_sbrk_r>:
 8017b9c:	b538      	push	{r3, r4, r5, lr}
 8017b9e:	4d06      	ldr	r5, [pc, #24]	; (8017bb8 <_sbrk_r+0x1c>)
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	4604      	mov	r4, r0
 8017ba4:	4608      	mov	r0, r1
 8017ba6:	602b      	str	r3, [r5, #0]
 8017ba8:	f7ee fb66 	bl	8006278 <_sbrk>
 8017bac:	1c43      	adds	r3, r0, #1
 8017bae:	d102      	bne.n	8017bb6 <_sbrk_r+0x1a>
 8017bb0:	682b      	ldr	r3, [r5, #0]
 8017bb2:	b103      	cbz	r3, 8017bb6 <_sbrk_r+0x1a>
 8017bb4:	6023      	str	r3, [r4, #0]
 8017bb6:	bd38      	pop	{r3, r4, r5, pc}
 8017bb8:	200024dc 	.word	0x200024dc

08017bbc <__sread>:
 8017bbc:	b510      	push	{r4, lr}
 8017bbe:	460c      	mov	r4, r1
 8017bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bc4:	f000 f8e2 	bl	8017d8c <_read_r>
 8017bc8:	2800      	cmp	r0, #0
 8017bca:	bfab      	itete	ge
 8017bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017bce:	89a3      	ldrhlt	r3, [r4, #12]
 8017bd0:	181b      	addge	r3, r3, r0
 8017bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017bd6:	bfac      	ite	ge
 8017bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017bda:	81a3      	strhlt	r3, [r4, #12]
 8017bdc:	bd10      	pop	{r4, pc}

08017bde <__swrite>:
 8017bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017be2:	461f      	mov	r7, r3
 8017be4:	898b      	ldrh	r3, [r1, #12]
 8017be6:	05db      	lsls	r3, r3, #23
 8017be8:	4605      	mov	r5, r0
 8017bea:	460c      	mov	r4, r1
 8017bec:	4616      	mov	r6, r2
 8017bee:	d505      	bpl.n	8017bfc <__swrite+0x1e>
 8017bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bf4:	2302      	movs	r3, #2
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	f000 f898 	bl	8017d2c <_lseek_r>
 8017bfc:	89a3      	ldrh	r3, [r4, #12]
 8017bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c06:	81a3      	strh	r3, [r4, #12]
 8017c08:	4632      	mov	r2, r6
 8017c0a:	463b      	mov	r3, r7
 8017c0c:	4628      	mov	r0, r5
 8017c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c12:	f000 b817 	b.w	8017c44 <_write_r>

08017c16 <__sseek>:
 8017c16:	b510      	push	{r4, lr}
 8017c18:	460c      	mov	r4, r1
 8017c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c1e:	f000 f885 	bl	8017d2c <_lseek_r>
 8017c22:	1c43      	adds	r3, r0, #1
 8017c24:	89a3      	ldrh	r3, [r4, #12]
 8017c26:	bf15      	itete	ne
 8017c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c32:	81a3      	strheq	r3, [r4, #12]
 8017c34:	bf18      	it	ne
 8017c36:	81a3      	strhne	r3, [r4, #12]
 8017c38:	bd10      	pop	{r4, pc}

08017c3a <__sclose>:
 8017c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c3e:	f000 b831 	b.w	8017ca4 <_close_r>
	...

08017c44 <_write_r>:
 8017c44:	b538      	push	{r3, r4, r5, lr}
 8017c46:	4d07      	ldr	r5, [pc, #28]	; (8017c64 <_write_r+0x20>)
 8017c48:	4604      	mov	r4, r0
 8017c4a:	4608      	mov	r0, r1
 8017c4c:	4611      	mov	r1, r2
 8017c4e:	2200      	movs	r2, #0
 8017c50:	602a      	str	r2, [r5, #0]
 8017c52:	461a      	mov	r2, r3
 8017c54:	f7ee faaf 	bl	80061b6 <_write>
 8017c58:	1c43      	adds	r3, r0, #1
 8017c5a:	d102      	bne.n	8017c62 <_write_r+0x1e>
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	b103      	cbz	r3, 8017c62 <_write_r+0x1e>
 8017c60:	6023      	str	r3, [r4, #0]
 8017c62:	bd38      	pop	{r3, r4, r5, pc}
 8017c64:	200024dc 	.word	0x200024dc

08017c68 <__assert_func>:
 8017c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c6a:	4614      	mov	r4, r2
 8017c6c:	461a      	mov	r2, r3
 8017c6e:	4b09      	ldr	r3, [pc, #36]	; (8017c94 <__assert_func+0x2c>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	4605      	mov	r5, r0
 8017c74:	68d8      	ldr	r0, [r3, #12]
 8017c76:	b14c      	cbz	r4, 8017c8c <__assert_func+0x24>
 8017c78:	4b07      	ldr	r3, [pc, #28]	; (8017c98 <__assert_func+0x30>)
 8017c7a:	9100      	str	r1, [sp, #0]
 8017c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c80:	4906      	ldr	r1, [pc, #24]	; (8017c9c <__assert_func+0x34>)
 8017c82:	462b      	mov	r3, r5
 8017c84:	f000 f81e 	bl	8017cc4 <fiprintf>
 8017c88:	f000 f89f 	bl	8017dca <abort>
 8017c8c:	4b04      	ldr	r3, [pc, #16]	; (8017ca0 <__assert_func+0x38>)
 8017c8e:	461c      	mov	r4, r3
 8017c90:	e7f3      	b.n	8017c7a <__assert_func+0x12>
 8017c92:	bf00      	nop
 8017c94:	20000184 	.word	0x20000184
 8017c98:	08018705 	.word	0x08018705
 8017c9c:	08018712 	.word	0x08018712
 8017ca0:	08018740 	.word	0x08018740

08017ca4 <_close_r>:
 8017ca4:	b538      	push	{r3, r4, r5, lr}
 8017ca6:	4d06      	ldr	r5, [pc, #24]	; (8017cc0 <_close_r+0x1c>)
 8017ca8:	2300      	movs	r3, #0
 8017caa:	4604      	mov	r4, r0
 8017cac:	4608      	mov	r0, r1
 8017cae:	602b      	str	r3, [r5, #0]
 8017cb0:	f7ee faae 	bl	8006210 <_close>
 8017cb4:	1c43      	adds	r3, r0, #1
 8017cb6:	d102      	bne.n	8017cbe <_close_r+0x1a>
 8017cb8:	682b      	ldr	r3, [r5, #0]
 8017cba:	b103      	cbz	r3, 8017cbe <_close_r+0x1a>
 8017cbc:	6023      	str	r3, [r4, #0]
 8017cbe:	bd38      	pop	{r3, r4, r5, pc}
 8017cc0:	200024dc 	.word	0x200024dc

08017cc4 <fiprintf>:
 8017cc4:	b40e      	push	{r1, r2, r3}
 8017cc6:	b503      	push	{r0, r1, lr}
 8017cc8:	4601      	mov	r1, r0
 8017cca:	ab03      	add	r3, sp, #12
 8017ccc:	4805      	ldr	r0, [pc, #20]	; (8017ce4 <fiprintf+0x20>)
 8017cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cd2:	6800      	ldr	r0, [r0, #0]
 8017cd4:	9301      	str	r3, [sp, #4]
 8017cd6:	f7ff fe31 	bl	801793c <_vfiprintf_r>
 8017cda:	b002      	add	sp, #8
 8017cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ce0:	b003      	add	sp, #12
 8017ce2:	4770      	bx	lr
 8017ce4:	20000184 	.word	0x20000184

08017ce8 <_fstat_r>:
 8017ce8:	b538      	push	{r3, r4, r5, lr}
 8017cea:	4d07      	ldr	r5, [pc, #28]	; (8017d08 <_fstat_r+0x20>)
 8017cec:	2300      	movs	r3, #0
 8017cee:	4604      	mov	r4, r0
 8017cf0:	4608      	mov	r0, r1
 8017cf2:	4611      	mov	r1, r2
 8017cf4:	602b      	str	r3, [r5, #0]
 8017cf6:	f7ee fa97 	bl	8006228 <_fstat>
 8017cfa:	1c43      	adds	r3, r0, #1
 8017cfc:	d102      	bne.n	8017d04 <_fstat_r+0x1c>
 8017cfe:	682b      	ldr	r3, [r5, #0]
 8017d00:	b103      	cbz	r3, 8017d04 <_fstat_r+0x1c>
 8017d02:	6023      	str	r3, [r4, #0]
 8017d04:	bd38      	pop	{r3, r4, r5, pc}
 8017d06:	bf00      	nop
 8017d08:	200024dc 	.word	0x200024dc

08017d0c <_isatty_r>:
 8017d0c:	b538      	push	{r3, r4, r5, lr}
 8017d0e:	4d06      	ldr	r5, [pc, #24]	; (8017d28 <_isatty_r+0x1c>)
 8017d10:	2300      	movs	r3, #0
 8017d12:	4604      	mov	r4, r0
 8017d14:	4608      	mov	r0, r1
 8017d16:	602b      	str	r3, [r5, #0]
 8017d18:	f7ee fa96 	bl	8006248 <_isatty>
 8017d1c:	1c43      	adds	r3, r0, #1
 8017d1e:	d102      	bne.n	8017d26 <_isatty_r+0x1a>
 8017d20:	682b      	ldr	r3, [r5, #0]
 8017d22:	b103      	cbz	r3, 8017d26 <_isatty_r+0x1a>
 8017d24:	6023      	str	r3, [r4, #0]
 8017d26:	bd38      	pop	{r3, r4, r5, pc}
 8017d28:	200024dc 	.word	0x200024dc

08017d2c <_lseek_r>:
 8017d2c:	b538      	push	{r3, r4, r5, lr}
 8017d2e:	4d07      	ldr	r5, [pc, #28]	; (8017d4c <_lseek_r+0x20>)
 8017d30:	4604      	mov	r4, r0
 8017d32:	4608      	mov	r0, r1
 8017d34:	4611      	mov	r1, r2
 8017d36:	2200      	movs	r2, #0
 8017d38:	602a      	str	r2, [r5, #0]
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	f7ee fa8f 	bl	800625e <_lseek>
 8017d40:	1c43      	adds	r3, r0, #1
 8017d42:	d102      	bne.n	8017d4a <_lseek_r+0x1e>
 8017d44:	682b      	ldr	r3, [r5, #0]
 8017d46:	b103      	cbz	r3, 8017d4a <_lseek_r+0x1e>
 8017d48:	6023      	str	r3, [r4, #0]
 8017d4a:	bd38      	pop	{r3, r4, r5, pc}
 8017d4c:	200024dc 	.word	0x200024dc

08017d50 <__ascii_mbtowc>:
 8017d50:	b082      	sub	sp, #8
 8017d52:	b901      	cbnz	r1, 8017d56 <__ascii_mbtowc+0x6>
 8017d54:	a901      	add	r1, sp, #4
 8017d56:	b142      	cbz	r2, 8017d6a <__ascii_mbtowc+0x1a>
 8017d58:	b14b      	cbz	r3, 8017d6e <__ascii_mbtowc+0x1e>
 8017d5a:	7813      	ldrb	r3, [r2, #0]
 8017d5c:	600b      	str	r3, [r1, #0]
 8017d5e:	7812      	ldrb	r2, [r2, #0]
 8017d60:	1e10      	subs	r0, r2, #0
 8017d62:	bf18      	it	ne
 8017d64:	2001      	movne	r0, #1
 8017d66:	b002      	add	sp, #8
 8017d68:	4770      	bx	lr
 8017d6a:	4610      	mov	r0, r2
 8017d6c:	e7fb      	b.n	8017d66 <__ascii_mbtowc+0x16>
 8017d6e:	f06f 0001 	mvn.w	r0, #1
 8017d72:	e7f8      	b.n	8017d66 <__ascii_mbtowc+0x16>

08017d74 <__malloc_lock>:
 8017d74:	4801      	ldr	r0, [pc, #4]	; (8017d7c <__malloc_lock+0x8>)
 8017d76:	f7ff b8ce 	b.w	8016f16 <__retarget_lock_acquire_recursive>
 8017d7a:	bf00      	nop
 8017d7c:	200024d0 	.word	0x200024d0

08017d80 <__malloc_unlock>:
 8017d80:	4801      	ldr	r0, [pc, #4]	; (8017d88 <__malloc_unlock+0x8>)
 8017d82:	f7ff b8c9 	b.w	8016f18 <__retarget_lock_release_recursive>
 8017d86:	bf00      	nop
 8017d88:	200024d0 	.word	0x200024d0

08017d8c <_read_r>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	4d07      	ldr	r5, [pc, #28]	; (8017dac <_read_r+0x20>)
 8017d90:	4604      	mov	r4, r0
 8017d92:	4608      	mov	r0, r1
 8017d94:	4611      	mov	r1, r2
 8017d96:	2200      	movs	r2, #0
 8017d98:	602a      	str	r2, [r5, #0]
 8017d9a:	461a      	mov	r2, r3
 8017d9c:	f7ee f9ee 	bl	800617c <_read>
 8017da0:	1c43      	adds	r3, r0, #1
 8017da2:	d102      	bne.n	8017daa <_read_r+0x1e>
 8017da4:	682b      	ldr	r3, [r5, #0]
 8017da6:	b103      	cbz	r3, 8017daa <_read_r+0x1e>
 8017da8:	6023      	str	r3, [r4, #0]
 8017daa:	bd38      	pop	{r3, r4, r5, pc}
 8017dac:	200024dc 	.word	0x200024dc

08017db0 <__ascii_wctomb>:
 8017db0:	b149      	cbz	r1, 8017dc6 <__ascii_wctomb+0x16>
 8017db2:	2aff      	cmp	r2, #255	; 0xff
 8017db4:	bf85      	ittet	hi
 8017db6:	238a      	movhi	r3, #138	; 0x8a
 8017db8:	6003      	strhi	r3, [r0, #0]
 8017dba:	700a      	strbls	r2, [r1, #0]
 8017dbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8017dc0:	bf98      	it	ls
 8017dc2:	2001      	movls	r0, #1
 8017dc4:	4770      	bx	lr
 8017dc6:	4608      	mov	r0, r1
 8017dc8:	4770      	bx	lr

08017dca <abort>:
 8017dca:	b508      	push	{r3, lr}
 8017dcc:	2006      	movs	r0, #6
 8017dce:	f000 f82b 	bl	8017e28 <raise>
 8017dd2:	2001      	movs	r0, #1
 8017dd4:	f7ee f9c8 	bl	8006168 <_exit>

08017dd8 <_raise_r>:
 8017dd8:	291f      	cmp	r1, #31
 8017dda:	b538      	push	{r3, r4, r5, lr}
 8017ddc:	4604      	mov	r4, r0
 8017dde:	460d      	mov	r5, r1
 8017de0:	d904      	bls.n	8017dec <_raise_r+0x14>
 8017de2:	2316      	movs	r3, #22
 8017de4:	6003      	str	r3, [r0, #0]
 8017de6:	f04f 30ff 	mov.w	r0, #4294967295
 8017dea:	bd38      	pop	{r3, r4, r5, pc}
 8017dec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017dee:	b112      	cbz	r2, 8017df6 <_raise_r+0x1e>
 8017df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017df4:	b94b      	cbnz	r3, 8017e0a <_raise_r+0x32>
 8017df6:	4620      	mov	r0, r4
 8017df8:	f000 f830 	bl	8017e5c <_getpid_r>
 8017dfc:	462a      	mov	r2, r5
 8017dfe:	4601      	mov	r1, r0
 8017e00:	4620      	mov	r0, r4
 8017e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e06:	f000 b817 	b.w	8017e38 <_kill_r>
 8017e0a:	2b01      	cmp	r3, #1
 8017e0c:	d00a      	beq.n	8017e24 <_raise_r+0x4c>
 8017e0e:	1c59      	adds	r1, r3, #1
 8017e10:	d103      	bne.n	8017e1a <_raise_r+0x42>
 8017e12:	2316      	movs	r3, #22
 8017e14:	6003      	str	r3, [r0, #0]
 8017e16:	2001      	movs	r0, #1
 8017e18:	e7e7      	b.n	8017dea <_raise_r+0x12>
 8017e1a:	2400      	movs	r4, #0
 8017e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e20:	4628      	mov	r0, r5
 8017e22:	4798      	blx	r3
 8017e24:	2000      	movs	r0, #0
 8017e26:	e7e0      	b.n	8017dea <_raise_r+0x12>

08017e28 <raise>:
 8017e28:	4b02      	ldr	r3, [pc, #8]	; (8017e34 <raise+0xc>)
 8017e2a:	4601      	mov	r1, r0
 8017e2c:	6818      	ldr	r0, [r3, #0]
 8017e2e:	f7ff bfd3 	b.w	8017dd8 <_raise_r>
 8017e32:	bf00      	nop
 8017e34:	20000184 	.word	0x20000184

08017e38 <_kill_r>:
 8017e38:	b538      	push	{r3, r4, r5, lr}
 8017e3a:	4d07      	ldr	r5, [pc, #28]	; (8017e58 <_kill_r+0x20>)
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4604      	mov	r4, r0
 8017e40:	4608      	mov	r0, r1
 8017e42:	4611      	mov	r1, r2
 8017e44:	602b      	str	r3, [r5, #0]
 8017e46:	f7ee f97f 	bl	8006148 <_kill>
 8017e4a:	1c43      	adds	r3, r0, #1
 8017e4c:	d102      	bne.n	8017e54 <_kill_r+0x1c>
 8017e4e:	682b      	ldr	r3, [r5, #0]
 8017e50:	b103      	cbz	r3, 8017e54 <_kill_r+0x1c>
 8017e52:	6023      	str	r3, [r4, #0]
 8017e54:	bd38      	pop	{r3, r4, r5, pc}
 8017e56:	bf00      	nop
 8017e58:	200024dc 	.word	0x200024dc

08017e5c <_getpid_r>:
 8017e5c:	f7ee b96c 	b.w	8006138 <_getpid>

08017e60 <_init>:
 8017e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e62:	bf00      	nop
 8017e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e66:	bc08      	pop	{r3}
 8017e68:	469e      	mov	lr, r3
 8017e6a:	4770      	bx	lr

08017e6c <_fini>:
 8017e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6e:	bf00      	nop
 8017e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e72:	bc08      	pop	{r3}
 8017e74:	469e      	mov	lr, r3
 8017e76:	4770      	bx	lr
