
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08017e80  08017e80  00027e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018964  08018964  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08018964  08018964  00028964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801896c  0801896c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801896c  0801896c  0002896c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018970  08018970  00028970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08018974  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002194  20000354  08018cc8  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024e8  08018cc8  000324e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052467  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c77  00000000  00000000  000827eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  0008a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002408  00000000  00000000  0008cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dac0  00000000  00000000  0008eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040515  00000000  00000000  000cc998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182bc2  00000000  00000000  0010cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0028fa6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c954  00000000  00000000  0028fac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017e64 	.word	0x08017e64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08017e64 	.word	0x08017e64

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	461a      	mov	r2, r3
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	6053      	str	r3, [r2, #4]
 8000fb4:	6093      	str	r3, [r2, #8]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	330c      	adds	r3, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	851a      	strh	r2, [r3, #40]	; 0x28
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	861a      	strh	r2, [r3, #48]	; 0x30
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	this->_sbus = sbus;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24

	this->_ledPWM = 0;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	851a      	strh	r2, [r3, #40]	; 0x28


}
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 3);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fce8 	bl	80059f8 <_ZN10Components9get_ADC_1Ev>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	4619      	mov	r1, r3
 800102e:	f006 fa5b 	bl	80074e8 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fcea 	bl	8005a10 <_ZN10Components9get_ADC_2Ev>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	330c      	adds	r3, #12
 8001040:	2202      	movs	r2, #2
 8001042:	4619      	mov	r1, r3
 8001044:	f006 fa50 	bl	80074e8 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fced 	bl	8005a2c <_ZN10Components9get_ADC_5Ev>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3314      	adds	r3, #20
 8001056:	2202      	movs	r2, #2
 8001058:	4619      	mov	r1, r3
 800105a:	f006 fa45 	bl	80074e8 <HAL_ADC_Start_DMA>



}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f874 	bl	8004160 <_ZN4SBUS8B_buttonEv>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <_ZN9Convertor9updateLEDEv+0x28>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001088:	da01      	bge.n	800108e <_ZN9Convertor9updateLEDEv+0x28>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <_ZN9Convertor9updateLEDEv+0x2a>
 800108e:	2300      	movs	r3, #0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d015      	beq.n	80010c0 <_ZN9Convertor9updateLEDEv+0x5a>
		_ledPWM += 250;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800109a:	b29b      	uxth	r3, r3
 800109c:	33fa      	adds	r3, #250	; 0xfa
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fb3f 	bl	8002734 <_ZN11Initializer13get_LED_TimerEv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4622      	mov	r2, r4
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 80010be:	e026      	b.n	800110e <_ZN9Convertor9updateLEDEv+0xa8>
	}else if(_sbus->A_button() && _ledPWM > 0){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fff1 	bl	80040ac <_ZN4SBUS8A_buttonEv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <_ZN9Convertor9updateLEDEv+0x78>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dd01      	ble.n	80010de <_ZN9Convertor9updateLEDEv+0x78>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <_ZN9Convertor9updateLEDEv+0x7a>
 80010de:	2300      	movs	r3, #0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d014      	beq.n	800110e <_ZN9Convertor9updateLEDEv+0xa8>
		_ledPWM -= 250;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3bfa      	subs	r3, #250	; 0xfa
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	851a      	strh	r2, [r3, #40]	; 0x28
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fb17 	bl	8002734 <_ZN11Initializer13get_LED_TimerEv>
 8001106:	4603      	mov	r3, r0
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4622      	mov	r2, r4
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}

08001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	460b      	mov	r3, r1
 8001124:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 8001126:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db76      	blt.n	800121c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 8001134:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
 8001146:	e03c      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d109      	bne.n	8001162 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 800114e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfb8      	it	lt
 8001156:	425b      	neglt	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
 8001160:	e02f      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b08      	cmp	r3, #8
 8001166:	d109      	bne.n	800117c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 8001168:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	425b      	neglt	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
 800117a:	e022      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d109      	bne.n	8001196 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 8001182:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001186:	2b00      	cmp	r3, #0
 8001188:	bfb8      	it	lt
 800118a:	425b      	neglt	r3, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
 8001194:	e015      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b10      	cmp	r3, #16
 800119a:	d109      	bne.n	80011b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 800119c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bfb8      	it	lt
 80011a4:	425b      	neglt	r3, r3
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	649a      	str	r2, [r3, #72]	; 0x48
 80011ae:	e008      	b.n	80011c2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80011b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bfb8      	it	lt
 80011b8:	425b      	neglt	r3, r3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 80011d0:	e09e      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d104      	bne.n	80011e2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011e0:	e096      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d104      	bne.n	80011f2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011f0:	e08e      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	d104      	bne.n	8001202 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001200:	e086      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b10      	cmp	r3, #16
 8001206:	d104      	bne.n	8001212 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001210:	e07e      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800121a:	e079      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da75      	bge.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
 8001232:	e023      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d104      	bne.n	8001244 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
 8001242:	e01b      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b08      	cmp	r3, #8
 8001248:	d104      	bne.n	8001254 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
 8001252:	e013      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d104      	bne.n	8001264 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
 8001262:	e00b      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b10      	cmp	r3, #16
 8001268:	d104      	bne.n	8001274 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	649a      	str	r2, [r3, #72]	; 0x48
 8001272:	e003      	b.n	800127c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 8001282:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001286:	2b00      	cmp	r3, #0
 8001288:	bfb8      	it	lt
 800128a:	425b      	neglt	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001294:	e03c      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d109      	bne.n	80012b0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 800129c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bfb8      	it	lt
 80012a4:	425b      	neglt	r3, r3
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012ae:	e02f      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d109      	bne.n	80012ca <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 80012b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfb8      	it	lt
 80012be:	425b      	neglt	r3, r3
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012c8:	e022      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d109      	bne.n	80012e4 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 80012d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bfb8      	it	lt
 80012d8:	425b      	neglt	r3, r3
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012e2:	e015      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d109      	bne.n	80012fe <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 80012ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfb8      	it	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80012fc:	e008      	b.n	8001310 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001302:	2b00      	cmp	r3, #0
 8001304:	bfb8      	it	lt
 8001306:	425b      	neglt	r3, r3
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	this->_cleanerMotorPWM = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	855a      	strh	r2, [r3, #42]	; 0x2a
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fd84 	bl	8003e3c <_ZN4SBUS9getRightYEv>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 3a90 	vmov	r3, s15
 8001340:	b21a      	sxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	855a      	strh	r2, [r3, #42]	; 0x2a

	if(_cleanerMotorPWM > 10){
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800134c:	2b0a      	cmp	r3, #10
 800134e:	dd10      	ble.n	8001372 <_ZN9Convertor18updateCleanerMotorEv+0x56>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001356:	2b00      	cmp	r3, #0
 8001358:	bfb8      	it	lt
 800135a:	425b      	neglt	r3, r3
 800135c:	b29c      	uxth	r4, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fa17 	bl	8002796 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 8001368:	4603      	mov	r3, r0
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4622      	mov	r2, r4
 800136e:	63da      	str	r2, [r3, #60]	; 0x3c

	}



}
 8001370:	e008      	b.n	8001384 <_ZN9Convertor18updateCleanerMotorEv+0x68>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4618      	mov	r0, r3
 8001378:	f001 fa0d 	bl	8002796 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 800137c:	4603      	mov	r3, r0
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}

0800138c <_ZN9Convertor14updateSelectorEv>:



void Convertor::updateSelector(void){
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b087      	sub	sp, #28
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fdb7 	bl	8003f0c <_ZN4SBUS9getRightXEv>
 800139e:	eef0 7a40 	vmov.f32	s15, s0
 80013a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a6:	ee17 3a90 	vmov	r3, s15
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	859a      	strh	r2, [r3, #44]	; 0x2c

	float cleanerPos = 110;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <_ZN9Convertor14updateSelectorEv+0x8c>)
 80013b2:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <_ZN9Convertor14updateSelectorEv+0x90>)
 80013b6:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd10      	ble.n	80013e4 <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f9bd 	bl	800274c <_ZN11Initializer18get_selector_TimerEv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	2308      	movs	r3, #8
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	230c      	movs	r3, #12
 80013da:	4621      	mov	r1, r4
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fe9a 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 80013e2:	e014      	b.n	800140e <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da0f      	bge.n	800140e <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 f9a7 	bl	800274c <_ZN11Initializer18get_selector_TimerEv>
 80013fe:	4602      	mov	r2, r0
 8001400:	2308      	movs	r3, #8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	230c      	movs	r3, #12
 8001406:	4621      	mov	r1, r4
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fe84 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	42dc0000 	.word	0x42dc0000
 800141c:	44700000 	.word	0x44700000

08001420 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fcb3 	bl	8003d98 <_ZN4SBUS8getLeftYEv>
 8001432:	eef0 7a40 	vmov.f32	s15, s0
 8001436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b21a      	sxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_pushMotorPWM > 0){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800144a:	2b00      	cmp	r3, #0
 800144c:	dd10      	ble.n	8001470 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f001 f983 	bl	8002764 <_ZN11Initializer19get_pushMotor_TimerEv>
 800145e:	4602      	mov	r2, r0
 8001460:	2308      	movs	r3, #8
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2304      	movs	r3, #4
 8001466:	4621      	mov	r1, r4
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fe54 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 800146e:	e014      	b.n	800149a <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001476:	2b00      	cmp	r3, #0
 8001478:	da0f      	bge.n	800149a <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4618      	mov	r0, r3
 8001486:	f001 f96d 	bl	8002764 <_ZN11Initializer19get_pushMotor_TimerEv>
 800148a:	4602      	mov	r2, r0
 800148c:	2308      	movs	r3, #8
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2304      	movs	r3, #4
 8001492:	4621      	mov	r1, r4
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe3e 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}

080014a2 <_ZN9Convertor16updateFluidMotorEv>:

void Convertor::updateFluidMotor(void){
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af02      	add	r7, sp, #8
 80014a8:	6078      	str	r0, [r7, #4]

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fd94 	bl	8003fdc <_ZN4SBUS11getJogWheelEv>
 80014b4:	eef0 7a40 	vmov.f32	s15, s0
 80014b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014bc:	ee17 3a90 	vmov	r3, s15
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	861a      	strh	r2, [r3, #48]	; 0x30

	if(_fluidPWM > 0){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd10      	ble.n	80014f2 <_ZN9Convertor16updateFluidMotorEv+0x50>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 f94e 	bl	800277c <_ZN11Initializer20get_fluidMotor_TimerEv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	2300      	movs	r3, #0
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2304      	movs	r3, #4
 80014e8:	4621      	mov	r1, r4
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe13 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
	}


}
 80014f0:	e014      	b.n	800151c <_ZN9Convertor16updateFluidMotorEv+0x7a>
	}else if(_fluidPWM < 0){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da0f      	bge.n	800151c <_ZN9Convertor16updateFluidMotorEv+0x7a>
		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4618      	mov	r0, r3
 8001508:	f001 f938 	bl	800277c <_ZN11Initializer20get_fluidMotor_TimerEv>
 800150c:	4602      	mov	r2, r0
 800150e:	2300      	movs	r3, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2304      	movs	r3, #4
 8001514:	4621      	mov	r1, r4
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fdfd 	bl	8001116 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}

08001524 <_ZN9Convertor17updateFluidAmountEv>:

void Convertor::updateFluidAmount(void){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]


	if(this->_sbus->D_button() && (_fluidAmount < 100)){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fec9 	bl	80042c8 <_ZN4SBUS8D_buttonEv>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <_ZN9Convertor17updateFluidAmountEv+0x26>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001542:	2b63      	cmp	r3, #99	; 0x63
 8001544:	dc01      	bgt.n	800154a <_ZN9Convertor17updateFluidAmountEv+0x26>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <_ZN9Convertor17updateFluidAmountEv+0x28>
 800154a:	2300      	movs	r3, #0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00a      	beq.n	8001566 <_ZN9Convertor17updateFluidAmountEv+0x42>

		_fluidAmount += 10;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001556:	b2db      	uxtb	r3, r3
 8001558:	330a      	adds	r3, #10
 800155a:	b2db      	uxtb	r3, r3
 800155c:	b25a      	sxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}else if(_sbus->C_button() && (_fluidAmount > 0)){

		_fluidAmount -= 10;
	}

}
 8001564:	e01b      	b.n	800159e <_ZN9Convertor17updateFluidAmountEv+0x7a>
	}else if(_sbus->C_button() && (_fluidAmount > 0)){
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fe52 	bl	8004214 <_ZN4SBUS8C_buttonEv>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <_ZN9Convertor17updateFluidAmountEv+0x60>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd01      	ble.n	8001584 <_ZN9Convertor17updateFluidAmountEv+0x60>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <_ZN9Convertor17updateFluidAmountEv+0x62>
 8001584:	2300      	movs	r3, #0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <_ZN9Convertor17updateFluidAmountEv+0x7a>
		_fluidAmount -= 10;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001590:	b2db      	uxtb	r3, r3
 8001592:	3b0a      	subs	r3, #10
 8001594:	b2db      	uxtb	r3, r3
 8001596:	b25a      	sxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_ZN9Convertor7processEv>:
int16_t Convertor::get_fluidAmount(void){

	return _fluidAmount;
}

void Convertor::process(void){
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]


	this->updateLED();
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd59 	bl	8001066 <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fee9 	bl	800138c <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff30 	bl	8001420 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff6e 	bl	80014a2 <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fea8 	bl	800131c <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fd22 	bl	8001016 <_ZN9Convertor6getADCEv>
	this->updateFluidAmount();
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa6 	bl	8001524 <_ZN9Convertor17updateFluidAmountEv>

}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_+0x34>)
 80015f0:	609a      	str	r2, [r3, #8]

	this->_huart1 = huart1;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	605a      	str	r2, [r3, #4]
	this->initClock();
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f001 f832 	bl	8002668 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 ff89 	bl	800251c <_ZN11Initializer8initGPIOEv>
}
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000750 	.word	0x20000750

08001618 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]


	this->initDMA();
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 ff25 	bl	8002470 <_ZN11Initializer7initDMAEv>

	this->initTIM_1();
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f822 	bl	8001670 <_ZN11Initializer9initTIM_1Ev>

	this->initTIM_2();
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f923 	bl	8001878 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f99a 	bl	800196c <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fa53 	bl	8001ae4 <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fb32 	bl	8001ca8 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fc45 	bl	8001ed4 <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fd0c 	bl	8002068 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fd79 	bl	8002148 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fdfe 	bl	8002258 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fe8b 	bl	8002378 <_ZN11Initializer8initI2C2Ev>


    MX_USB_Device_Init();
 8001662:	f012 ff61 	bl	8014528 <MX_USB_Device_Init>


}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <_ZN11Initializer9initTIM_1Ev>:


void Initializer::initTIM_1(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	b09e      	sub	sp, #120	; 0x78
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM1_CLK_ENABLE();
 8001678:	4b7c      	ldr	r3, [pc, #496]	; (800186c <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	4a7b      	ldr	r2, [pc, #492]	; (800186c <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800167e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001682:	6613      	str	r3, [r2, #96]	; 0x60
 8001684:	4b79      	ldr	r3, [pc, #484]	; (800186c <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001690:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80016aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	615a      	str	r2, [r3, #20]
 80016bc:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2234      	movs	r2, #52	; 0x34
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f013 fe3e 	bl	8015348 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a68      	ldr	r2, [pc, #416]	; (8001870 <_ZN11Initializer9initTIM_1Ev+0x200>)
 80016d0:	60da      	str	r2, [r3, #12]
	  htim1.Init.Prescaler = 8;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2208      	movs	r2, #8
 80016d6:	611a      	str	r2, [r3, #16]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
	  htim1.Init.Period = 1080;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80016e4:	619a      	str	r2, [r3, #24]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
	  htim1.Init.RepetitionCounter = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	330c      	adds	r3, #12
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00c f879 	bl	800d7f4 <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <_ZN11Initializer9initTIM_1Ev+0xae>
	  {
	    this->Error_Handler();
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f001 f85a 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001718:	4856      	ldr	r0, [pc, #344]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 800171a:	f014 fb67 	bl	8015dec <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001722:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	330c      	adds	r3, #12
 8001728:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f00c fb34 	bl	800dd9c <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <_ZN11Initializer9initTIM_1Ev+0xda>
	  {
	    Error_Handler();
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 f841 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	330c      	adds	r3, #12
 800174e:	4618      	mov	r0, r3
 8001750:	f00c f8a7 	bl	800d8a2 <HAL_TIM_PWM_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <_ZN11Initializer9initTIM_1Ev+0x100>
	  {
	    this->Error_Handler();
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f001 f831 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 800176a:	4842      	ldr	r0, [pc, #264]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 800176c:	f014 fb3e 	bl	8015dec <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	330c      	adds	r3, #12
 8001780:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f00d f974 	bl	800ea74 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <_ZN11Initializer9initTIM_1Ev+0x132>
	  {
	    this->Error_Handler();
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f001 f815 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a2:	2360      	movs	r3, #96	; 0x60
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	330c      	adds	r3, #12
 80017c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017c6:	2208      	movs	r2, #8
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00c f9d3 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <_ZN11Initializer9initTIM_1Ev+0x17a>
	  {
	    this->Error_Handler();
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fff4 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80017e4:	4823      	ldr	r0, [pc, #140]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80017e6:	f014 fb01 	bl	8015dec <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	f107 020c 	add.w	r2, r7, #12
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f00d f9b7 	bl	800eba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <_ZN11Initializer9initTIM_1Ev+0x1de>
	  {
	    this->Error_Handler();
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 ffc2 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <_ZN11Initializer9initTIM_1Ev+0x204>)
 800184a:	f014 facf 	bl	8015dec <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	330c      	adds	r3, #12
 8001852:	4618      	mov	r0, r3
 8001854:	f004 fe00 	bl	8006458 <HAL_TIM_MspPostInit>
	   * These signals are used to drive a full-bridge inverter, which is a common configuration for driving
	   * motor loads. In this case, the function starts the	   *  timer channel's complementary output
	   *  (marked as "PWMN" in the function name) for the specified timer. */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	330c      	adds	r3, #12
 800185c:	2108      	movs	r1, #8
 800185e:	4618      	mov	r0, r3
 8001860:	f00d f846 	bl	800e8f0 <HAL_TIMEx_PWMN_Start>


}
 8001864:	bf00      	nop
 8001866:	3778      	adds	r7, #120	; 0x78
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	40012c00 	.word	0x40012c00
 8001874:	08017e80 	.word	0x08017e80

08001878 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	  htim2.Init.Prescaler = 0;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  htim2.Init.Period = 4.294967295E9;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ba:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b ff8d 	bl	800d7f4 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <_ZN11Initializer9initTIM_2Ev+0x7e>
	  {
	    this->Error_Handler();
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 ff6e 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80018f0:	481d      	ldr	r0, [pc, #116]	; (8001968 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80018f2:	f014 fa7b 	bl	8015dec <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fa:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001902:	f107 0218 	add.w	r2, r7, #24
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f00c fa47 	bl	800dd9c <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <_ZN11Initializer9initTIM_2Ev+0xb2>
	  {
	    this->Error_Handler();
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 ff54 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001924:	4810      	ldr	r0, [pc, #64]	; (8001968 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001926:	f014 fa61 	bl	8015dec <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001938:	f107 020c 	add.w	r2, r7, #12
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f00d f898 	bl	800ea74 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	bf14      	ite	ne
 800194a:	2301      	movne	r3, #1
 800194c:	2300      	moveq	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <_ZN11Initializer9initTIM_2Ev+0xe8>
	  {
	    this->Error_Handler();
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 ff39 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 800195c:	f014 fa46 	bl	8015dec <iprintf>

	  }


}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08017e98 	.word	0x08017e98

0800196c <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8001974:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]


	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <_ZN11Initializer9initTIM_3Ev+0x170>)
 80019b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  htim3.Init.Prescaler = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	  htim3.Init.Period = 1000;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00b ff5c 	bl	800d8a2 <HAL_TIM_PWM_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <_ZN11Initializer9initTIM_3Ev+0x9a>
	  {
	    this->Error_Handler();
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fee6 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001a00:	4837      	ldr	r0, [pc, #220]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001a02:	f014 f9f3 	bl	8015dec <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a14:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00d f82a 	bl	800ea74 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <_ZN11Initializer9initTIM_3Ev+0xd0>
	  {
	    this->Error_Handler();
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fecb 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001a36:	482a      	ldr	r0, [pc, #168]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001a38:	f014 f9d8 	bl	8015dec <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3c:	2360      	movs	r3, #96	; 0x60
 8001a3e:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a52:	f107 0110 	add.w	r1, r7, #16
 8001a56:	2200      	movs	r2, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00c f88b 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <_ZN11Initializer9initTIM_3Ev+0x10e>
	  {
	    this->Error_Handler();
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 feac 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001a74:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001a76:	f014 f9b9 	bl	8015dec <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a80:	f107 0110 	add.w	r1, r7, #16
 8001a84:	2204      	movs	r2, #4
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00c f874 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <_ZN11Initializer9initTIM_3Ev+0x13c>
	  {
	    this->Error_Handler();
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fe95 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001aa2:	480f      	ldr	r0, [pc, #60]	; (8001ae0 <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001aa4:	f014 f9a2 	bl	8015dec <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fcd2 	bl	8006458 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00b ff47 	bl	800d950 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00b ff40 	bl	800d950 <HAL_TIM_PWM_Start>



}
 8001ad0:	bf00      	nop
 8001ad2:	3738      	adds	r7, #56	; 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	08017eb0 	.word	0x08017eb0

08001ae4 <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b092      	sub	sp, #72	; 0x48
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <_ZN11Initializer9initTIM_4Ev+0x1bc>)
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58
	  htim4.Init.Prescaler = 2;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	661a      	str	r2, [r3, #96]	; 0x60
	  htim4.Init.Period = 1000;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b4a:	665a      	str	r2, [r3, #100]	; 0x64
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	669a      	str	r2, [r3, #104]	; 0x68
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	671a      	str	r2, [r3, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3358      	adds	r3, #88	; 0x58
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00b fe49 	bl	800d7f4 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <_ZN11Initializer9initTIM_4Ev+0x9a>
	  {
	    this->Error_Handler();
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fe2a 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001b78:	484a      	ldr	r0, [pc, #296]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001b7a:	f014 f937 	bl	8015dec <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3358      	adds	r3, #88	; 0x58
 8001b88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00c f904 	bl	800dd9c <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <_ZN11Initializer9initTIM_4Ev+0xcc>
	  {
	    this->Error_Handler();
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fe11 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001baa:	483e      	ldr	r0, [pc, #248]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001bac:	f014 f91e 	bl	8015dec <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3358      	adds	r3, #88	; 0x58
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00b fe74 	bl	800d8a2 <HAL_TIM_PWM_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <_ZN11Initializer9initTIM_4Ev+0xf2>
	  {
	    this->Error_Handler();
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fdfe 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001bd0:	4834      	ldr	r0, [pc, #208]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001bd2:	f014 f90b 	bl	8015dec <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3358      	adds	r3, #88	; 0x58
 8001be2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00c ff43 	bl	800ea74 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <_ZN11Initializer9initTIM_4Ev+0x126>
	  {
	    this->Error_Handler();
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fde4 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c04:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c06:	f014 f8f1 	bl	8015dec <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0a:	2360      	movs	r3, #96	; 0x60
 8001c0c:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3358      	adds	r3, #88	; 0x58
 8001c1e:	f107 0110 	add.w	r1, r7, #16
 8001c22:	2204      	movs	r2, #4
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00b ffa5 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <_ZN11Initializer9initTIM_4Ev+0x162>
	  {
	    this->Error_Handler();
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fdc6 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c42:	f014 f8d3 	bl	8015dec <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3358      	adds	r3, #88	; 0x58
 8001c4a:	f107 0110 	add.w	r1, r7, #16
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00b ff8f 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <_ZN11Initializer9initTIM_4Ev+0x18e>
	  {
	    this->Error_Handler();
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fdb0 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c6e:	f014 f8bd 	bl	8015dec <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3358      	adds	r3, #88	; 0x58
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fbee 	bl	8006458 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3358      	adds	r3, #88	; 0x58
 8001c80:	2108      	movs	r1, #8
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00b fe64 	bl	800d950 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3358      	adds	r3, #88	; 0x58
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00b fe5e 	bl	800d950 <HAL_TIM_PWM_Start>


}
 8001c94:	bf00      	nop
 8001c96:	3748      	adds	r7, #72	; 0x48
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	08017ec8 	.word	0x08017ec8

08001ca8 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b09e      	sub	sp, #120	; 0x78
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001cb0:	4b86      	ldr	r3, [pc, #536]	; (8001ecc <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	4a85      	ldr	r2, [pc, #532]	; (8001ecc <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cba:	6613      	str	r3, [r2, #96]	; 0x60
 8001cbc:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2234      	movs	r2, #52	; 0x34
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f013 fb22 	bl	8015348 <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a72      	ldr	r2, [pc, #456]	; (8001ed0 <_ZN11Initializer9initTIM_8Ev+0x228>)
 8001d08:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim8.Init.Prescaler = 2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim8.Init.Period = 1000;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d22:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim8.Init.RepetitionCounter = 0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	33f0      	adds	r3, #240	; 0xf0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00b fd56 	bl	800d7f4 <HAL_TIM_Base_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <_ZN11Initializer9initTIM_8Ev+0xb6>
	  {
	    Error_Handler();
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fd37 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	33f0      	adds	r3, #240	; 0xf0
 8001d68:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00c f814 	bl	800dd9c <HAL_TIM_ConfigClockSource>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <_ZN11Initializer9initTIM_8Ev+0xe2>
	  {
	    Error_Handler();
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fd21 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	33f0      	adds	r3, #240	; 0xf0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00b fd87 	bl	800d8a2 <HAL_TIM_PWM_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bf14      	ite	ne
 8001d9a:	2301      	movne	r3, #1
 8001d9c:	2300      	moveq	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <_ZN11Initializer9initTIM_8Ev+0x102>
	  {
	    Error_Handler();
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fd11 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	33f0      	adds	r3, #240	; 0xf0
 8001dba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00c fe57 	bl	800ea74 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <_ZN11Initializer9initTIM_8Ev+0x134>
	  {
	    Error_Handler();
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fcf8 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ddc:	2360      	movs	r3, #96	; 0x60
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	33f0      	adds	r3, #240	; 0xf0
 8001dfc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e00:	2208      	movs	r2, #8
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00b feb6 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <_ZN11Initializer9initTIM_8Ev+0x176>
	  {
	    Error_Handler();
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fcd7 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	33f0      	adds	r3, #240	; 0xf0
 8001e22:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e26:	220c      	movs	r2, #12
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00b fea3 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <_ZN11Initializer9initTIM_8Ev+0x19c>
	  {
	    Error_Handler();
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fcc4 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5c:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	33f0      	adds	r3, #240	; 0xf0
 8001e80:	f107 020c 	add.w	r2, r7, #12
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00c fe8a 	bl	800eba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <_ZN11Initializer9initTIM_8Ev+0x1fa>
	  {
	    Error_Handler();
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fc95 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	33f0      	adds	r3, #240	; 0xf0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fad6 	bl	8006458 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	33f0      	adds	r3, #240	; 0xf0
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f00b fd4c 	bl	800d950 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	33f0      	adds	r3, #240	; 0xf0
 8001ebc:	210c      	movs	r1, #12
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00c fd16 	bl	800e8f0 <HAL_TIMEx_PWMN_Start>




}
 8001ec4:	bf00      	nop
 8001ec6:	3778      	adds	r7, #120	; 0x78
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40013400 	.word	0x40013400

08001ed4 <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b098      	sub	sp, #96	; 0x60
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	4a5e      	ldr	r2, [pc, #376]	; (800205c <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ee8:	4b5c      	ldr	r3, [pc, #368]	; (800205c <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]
 8001f06:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2234      	movs	r2, #52	; 0x34
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f013 fa19 	bl	8015348 <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a51      	ldr	r2, [pc, #324]	; (8002060 <_ZN11Initializer10initTIM_16Ev+0x18c>)
 8001f1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim16.Init.Prescaler = 128;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim16.Init.Period = 1000;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  htim16.Init.RepetitionCounter = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	33a4      	adds	r3, #164	; 0xa4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00b fc4d 	bl	800d7f4 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fc2e 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001f70:	483c      	ldr	r0, [pc, #240]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001f72:	f013 ff3b 	bl	8015dec <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	33a4      	adds	r3, #164	; 0xa4
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00b fc91 	bl	800d8a2 <HAL_TIM_PWM_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fc1b 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001f96:	4833      	ldr	r0, [pc, #204]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001f98:	f013 ff28 	bl	8015dec <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9c:	2360      	movs	r3, #96	; 0x60
 8001f9e:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	33a4      	adds	r3, #164	; 0xa4
 8001fbc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00b fdd6 	bl	800db74 <HAL_TIM_PWM_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fbf7 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8001fde:	4821      	ldr	r0, [pc, #132]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8001fe0:	f013 ff04 	bl	8015dec <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	33a4      	adds	r3, #164	; 0xa4
 800200a:	f107 0210 	add.w	r2, r7, #16
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f00c fdc5 	bl	800eba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fbd0 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <_ZN11Initializer10initTIM_16Ev+0x190>)
 800202e:	f013 fedd 	bl	8015dec <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	33a4      	adds	r3, #164	; 0xa4
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fa0e 	bl	8006458 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	33a4      	adds	r3, #164	; 0xa4
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f00b fc84 	bl	800d950 <HAL_TIM_PWM_Start>
	  //set to zero...
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800204e:	2200      	movs	r2, #0
 8002050:	635a      	str	r2, [r3, #52]	; 0x34





}
 8002052:	bf00      	nop
 8002054:	3760      	adds	r7, #96	; 0x60
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40014400 	.word	0x40014400
 8002064:	08017ee0 	.word	0x08017ee0

08002068 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	b09c      	sub	sp, #112	; 0x70
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <_ZN11Initializer10initTIM_20Ev+0xd8>)
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 8002096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00b fba1 	bl	800d7f4 <HAL_TIM_Base_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fb82 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020c8:	481e      	ldr	r0, [pc, #120]	; (8002144 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 80020ca:	f013 fe8f 	bl	8015dec <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d2:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80020d4:	f107 0214 	add.w	r2, r7, #20
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f00b fe5c 	bl	800dd9c <HAL_TIM_ConfigClockSource>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fb69 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 80020fc:	f013 fe76 	bl	8015dec <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f00c fcac 	bl	800ea74 <HAL_TIMEx_MasterConfigSynchronization>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fb4d 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002134:	f013 fe5a 	bl	8015dec <iprintf>

	  }



}
 8002138:	bf00      	nop
 800213a:	3770      	adds	r7, #112	; 0x70
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40015000 	.word	0x40015000
 8002144:	08017ee0 	.word	0x08017ee0

08002148 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <_ZN11Initializer11initUSART_1Ev+0x108>)
 8002156:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002160:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f00c fdcd 	bl	800ed4e <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fb01 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80021ca:	4822      	ldr	r0, [pc, #136]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80021cc:	f013 fe0e 	bl	8015dec <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00e f968 	bl	80104ac <HAL_UARTEx_SetTxFifoThreshold>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 faed 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80021f2:	4818      	ldr	r0, [pc, #96]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80021f4:	f013 fdfa 	bl	8015dec <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f00e f992 	bl	8010528 <HAL_UARTEx_SetRxFifoThreshold>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fad9 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 800221a:	480e      	ldr	r0, [pc, #56]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 800221c:	f013 fde6 	bl	8015dec <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f00e f908 	bl	801043a <HAL_UARTEx_DisableFifoMode>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fac6 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002242:	f013 fdd3 	bl	8015dec <iprintf>

	  }



}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40013800 	.word	0x40013800
 8002254:	08017ef8 	.word	0x08017ef8

08002258 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a41      	ldr	r2, [pc, #260]	; (800236c <_ZN11Initializer11initUSART_2Ev+0x114>)
 8002266:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a40      	ldr	r2, [pc, #256]	; (8002370 <_ZN11Initializer11initUSART_2Ev+0x118>)
 800226e:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002278:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228a:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	220c      	movs	r2, #12
 8002292:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00c fd3f 	bl	800ed4e <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fa73 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80022e6:	4823      	ldr	r0, [pc, #140]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80022e8:	f013 fd80 	bl	8015dec <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00e f8da 	bl	80104ac <HAL_UARTEx_SetTxFifoThreshold>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fa5f 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 800230e:	4819      	ldr	r0, [pc, #100]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002310:	f013 fd6c 	bl	8015dec <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f00e f904 	bl	8010528 <HAL_UARTEx_SetRxFifoThreshold>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fa4b 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002336:	480f      	ldr	r0, [pc, #60]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002338:	f013 fd58 	bl	8015dec <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f00e f87a 	bl	801043a <HAL_UARTEx_DisableFifoMode>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa38 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 800235e:	f013 fd45 	bl	8015dec <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40004400 	.word	0x40004400
 8002370:	000186a0 	.word	0x000186a0
 8002374:	08017f0c 	.word	0x08017f0c

08002378 <_ZN11Initializer8initI2C2Ev>:

void Initializer::initI2C2(void){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

	  hi2c_ptr->Instance = I2C2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a36      	ldr	r2, [pc, #216]	; (8002460 <_ZN11Initializer8initI2C2Ev+0xe8>)
 8002386:	601a      	str	r2, [r3, #0]
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a35      	ldr	r2, [pc, #212]	; (8002464 <_ZN11Initializer8initI2C2Ev+0xec>)
 800238e:	605a      	str	r2, [r3, #4]
	  hi2c_ptr->Init.OwnAddress1 = 0;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
	  hi2c_ptr->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2201      	movs	r2, #1
 800239e:	60da      	str	r2, [r3, #12]
	  hi2c_ptr->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
	  hi2c_ptr->Init.OwnAddress2 = 0;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
	  hi2c_ptr->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
	  hi2c_ptr->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
	  hi2c_ptr->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(hi2c_ptr) != HAL_OK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f007 fb79 	bl	8009ac4 <HAL_I2C_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf14      	ite	ne
 80023d8:	2301      	movne	r3, #1
 80023da:	2300      	moveq	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <_ZN11Initializer8initI2C2Ev+0x76>
	  {
	    Error_Handler();
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f9f2 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80023e8:	481f      	ldr	r0, [pc, #124]	; (8002468 <_ZN11Initializer8initI2C2Ev+0xf0>)
 80023ea:	f013 fcff 	bl	8015dec <iprintf>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(hi2c_ptr, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f008 f9e5 	bl	800a7c4 <HAL_I2CEx_ConfigAnalogFilter>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <_ZN11Initializer8initI2C2Ev+0x9e>
	  {
	    this->Error_Handler();
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f9de 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002410:	4815      	ldr	r0, [pc, #84]	; (8002468 <_ZN11Initializer8initI2C2Ev+0xf0>)
 8002412:	f013 fceb 	bl	8015dec <iprintf>

	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(hi2c_ptr, 0) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f008 fa1c 	bl	800a85a <HAL_I2CEx_ConfigDigitalFilter>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <_ZN11Initializer8initI2C2Ev+0xc6>
	  {
	    this->Error_Handler();
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f9ca 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <_ZN11Initializer8initI2C2Ev+0xf0>)
 800243a:	f013 fcd7 	bl	8015dec <iprintf>

	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */
	  __HAL_RCC_I2C2_CLK_ENABLE();
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <_ZN11Initializer8initI2C2Ev+0xf4>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]


}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40005800 	.word	0x40005800
 8002464:	20a0c4df 	.word	0x20a0c4df
 8002468:	08017f20 	.word	0x08017f20
 800246c:	40021000 	.word	0x40021000

08002470 <_ZN11Initializer7initDMAEv>:




void Initializer::initDMA(void){
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	4a26      	ldr	r2, [pc, #152]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6493      	str	r3, [r2, #72]	; 0x48
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6493      	str	r3, [r2, #72]	; 0x48
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	6493      	str	r3, [r2, #72]	; 0x48
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <_ZN11Initializer7initDMAEv+0xa8>)
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	200b      	movs	r0, #11
 80024c6:	f006 fc18 	bl	8008cfa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024ca:	200b      	movs	r0, #11
 80024cc:	f006 fc2f 	bl	8008d2e <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	200c      	movs	r0, #12
 80024d6:	f006 fc10 	bl	8008cfa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024da:	200c      	movs	r0, #12
 80024dc:	f006 fc27 	bl	8008d2e <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	200d      	movs	r0, #13
 80024e6:	f006 fc08 	bl	8008cfa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024ea:	200d      	movs	r0, #13
 80024ec:	f006 fc1f 	bl	8008d2e <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	200e      	movs	r0, #14
 80024f6:	f006 fc00 	bl	8008cfa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80024fa:	200e      	movs	r0, #14
 80024fc:	f006 fc17 	bl	8008d2e <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	2038      	movs	r0, #56	; 0x38
 8002506:	f006 fbf8 	bl	8008cfa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800250a:	2038      	movs	r0, #56	; 0x38
 800250c:	f006 fc0f 	bl	8008d2e <HAL_NVIC_EnableIRQ>

}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002534:	4b48      	ldr	r3, [pc, #288]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	4a47      	ldr	r2, [pc, #284]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002540:	4b45      	ldr	r3, [pc, #276]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800254c:	4b42      	ldr	r3, [pc, #264]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	4a41      	ldr	r2, [pc, #260]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002552:	f043 0320 	orr.w	r3, r3, #32
 8002556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002564:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	4a3b      	ldr	r2, [pc, #236]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800256a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800256e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	4a35      	ldr	r2, [pc, #212]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002588:	4b33      	ldr	r3, [pc, #204]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <_ZN11Initializer8initGPIOEv+0x13c>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80025b2:	482a      	ldr	r0, [pc, #168]	; (800265c <_ZN11Initializer8initGPIOEv+0x140>)
 80025b4:	f007 fa54 	bl	8009a60 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2102      	movs	r1, #2
 80025bc:	4828      	ldr	r0, [pc, #160]	; (8002660 <_ZN11Initializer8initGPIOEv+0x144>)
 80025be:	f007 fa4f 	bl	8009a60 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025c8:	4826      	ldr	r0, [pc, #152]	; (8002664 <_ZN11Initializer8initGPIOEv+0x148>)
 80025ca:	f007 fa49 	bl	8009a60 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2110      	movs	r1, #16
 80025d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d6:	f007 fa43 	bl	8009a60 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 80025da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025de:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	2301      	movs	r3, #1
 80025e2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	481a      	ldr	r0, [pc, #104]	; (800265c <_ZN11Initializer8initGPIOEv+0x140>)
 80025f4:	f007 f8b2 	bl	800975c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4814      	ldr	r0, [pc, #80]	; (8002660 <_ZN11Initializer8initGPIOEv+0x144>)
 8002610:	f007 f8a4 	bl	800975c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 8002614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002618:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	2301      	movs	r3, #1
 800261c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	480d      	ldr	r0, [pc, #52]	; (8002664 <_ZN11Initializer8initGPIOEv+0x148>)
 800262e:	f007 f895 	bl	800975c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002632:	2310      	movs	r3, #16
 8002634:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f007 f886 	bl	800975c <HAL_GPIO_Init>

}
 8002650:	bf00      	nop
 8002652:	3730      	adds	r7, #48	; 0x30
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	48000800 	.word	0x48000800
 8002660:	48001400 	.word	0x48001400
 8002664:	48001800 	.word	0x48001800

08002668 <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 8002668:	b580      	push	{r7, lr}
 800266a:	b096      	sub	sp, #88	; 0x58
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002670:	f107 0320 	add.w	r3, r7, #32
 8002674:	2238      	movs	r2, #56	; 0x38
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f012 fe65 	bl	8015348 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800268e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002692:	f00a f889 	bl	800c7a8 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002696:	2322      	movs	r3, #34	; 0x22
 8002698:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026a0:	2340      	movs	r3, #64	; 0x40
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026a4:	2301      	movs	r3, #1
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a8:	2302      	movs	r3, #2
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026ac:	2302      	movs	r3, #2
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 80026b4:	2310      	movs	r3, #16
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b8:	2302      	movs	r3, #2
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026bc:	2302      	movs	r3, #2
 80026be:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026c0:	2302      	movs	r3, #2
 80026c2:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00a f911 	bl	800c8f0 <HAL_RCC_OscConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f874 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80026e4:	4812      	ldr	r0, [pc, #72]	; (8002730 <_ZN11Initializer9initClockEv+0xc8>)
 80026e6:	f013 fb81 	bl	8015dec <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ea:	230f      	movs	r3, #15
 80026ec:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ee:	2303      	movs	r3, #3
 80026f0:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2103      	movs	r1, #3
 8002704:	4618      	mov	r0, r3
 8002706:	f00a fc0b 	bl	800cf20 <HAL_RCC_ClockConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f856 	bl	80027cc <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 8002720:	4803      	ldr	r0, [pc, #12]	; (8002730 <_ZN11Initializer9initClockEv+0xc8>)
 8002722:	f013 fb63 	bl	8015dec <iprintf>

	  }


}
 8002726:	bf00      	nop
 8002728:	3758      	adds	r7, #88	; 0x58
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	08017f34 	.word	0x08017f34

08002734 <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

	return &htim16;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	33a4      	adds	r3, #164	; 0xa4

}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_ZN11Initializer18get_selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_selector_Timer(void){
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

	return &htim8;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	33f0      	adds	r3, #240	; 0xf0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_ZN11Initializer19get_pushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_pushMotor_Timer(void){
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

	return &htim4;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3358      	adds	r3, #88	; 0x58
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_ZN11Initializer20get_fluidMotor_TimerEv>:


TIM_HandleTypeDef* Initializer::get_fluidMotor_Timer(void){
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

	return &htim3;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 739e 	add.w	r3, r3, #316	; 0x13c

}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_ZN11Initializer22get_cleanerMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_cleanerMotor_Timer(void){
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

	return &htim1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	330c      	adds	r3, #12

}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <_ZN11Initializer7get_i2cEv>:

I2C_HandleTypeDef* Initializer::get_i2c(void){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

	return &hi2c2;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <_ZN11Initializer7get_i2cEv+0x18>)
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000750 	.word	0x20000750

080027cc <_ZN11Initializer13Error_HandlerEv>:



void Initializer::Error_Handler(void){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b1d      	cmp	r3, #29
 80027dc:	d80e      	bhi.n	80027fc <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80027de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <_ZN11Initializer13Error_HandlerEv+0x38>)
 80027e4:	f007 f954 	bl	8009a90 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80027e8:	2032      	movs	r0, #50	; 0x32
 80027ea:	f004 fa51 	bl	8006c90 <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <_ZN11Initializer13Error_HandlerEv+0x3c>)
 80027f0:	f013 fb82 	bl	8015ef8 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	3301      	adds	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e7ed      	b.n	80027d8 <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	48000800 	.word	0x48000800
 8002808:	08017f54 	.word	0x08017f54

0800280c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	4053      	eors	r3, r2
 8002822:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	b25a      	sxtb	r2, r3
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4053      	eors	r3, r2
 8002830:	b25b      	sxtb	r3, r3
 8002832:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21a      	sxth	r2, r3
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b21b      	sxth	r3, r3
 8002844:	4053      	eors	r3, r2
 8002846:	b21a      	sxth	r2, r3
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	b21b      	sxth	r3, r3
 800284e:	4053      	eors	r3, r2
 8002850:	b21a      	sxth	r2, r3
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	b2db      	uxtb	r3, r3
 8002858:	b21b      	sxth	r3, r3
 800285a:	4053      	eors	r3, r2
 800285c:	b21b      	sxth	r3, r3
 800285e:	b29a      	uxth	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	801a      	strh	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287e:	801a      	strh	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8002898:	f107 030e 	add.w	r3, r7, #14
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ffe7 	bl	8002870 <crc_init>
	while (length--) {
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	807a      	strh	r2, [r7, #2]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f107 020e 	add.w	r2, r7, #14
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ffa1 	bl	800280c <crc_accumulate>
	while (length--) {
 80028ca:	e7ea      	b.n	80028a2 <crc_calculate+0x16>
        }
        return crcTmp;
 80028cc:	89fb      	ldrh	r3, [r7, #14]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	617b      	str	r3, [r7, #20]
	while (length--) {
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	80fa      	strh	r2, [r7, #6]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	617a      	str	r2, [r7, #20]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff80 	bl	800280c <crc_accumulate>
	while (length--) {
 800290c:	e7ec      	b.n	80028e8 <crc_accumulate_buffer+0x12>
        }
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <mavlink_sha256_init+0x50>)
 8002930:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <mavlink_sha256_init+0x54>)
 8002936:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <mavlink_sha256_init+0x58>)
 800293c:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <mavlink_sha256_init+0x5c>)
 8002942:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <mavlink_sha256_init+0x60>)
 8002948:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <mavlink_sha256_init+0x64>)
 800294e:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <mavlink_sha256_init+0x68>)
 8002954:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <mavlink_sha256_init+0x6c>)
 800295a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	6a09e667 	.word	0x6a09e667
 800296c:	bb67ae85 	.word	0xbb67ae85
 8002970:	3c6ef372 	.word	0x3c6ef372
 8002974:	a54ff53a 	.word	0xa54ff53a
 8002978:	510e527f 	.word	0x510e527f
 800297c:	9b05688c 	.word	0x9b05688c
 8002980:	1f83d9ab 	.word	0x1f83d9ab
 8002984:	5be0cd19 	.word	0x5be0cd19

08002988 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002988:	b480      	push	{r7}
 800298a:	b0cf      	sub	sp, #316	; 0x13c
 800298c:	af00      	add	r7, sp, #0
 800298e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002992:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800299c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029a0:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80029a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029a6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80029b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80029c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80029d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 80029e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80029f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80029f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8002a02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8002a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	dc17      	bgt.n	8002a60 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002a3a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a5e:	e7e3      	b.n	8002a28 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8002a60:	2310      	movs	r3, #16
 8002a62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6a:	2b3f      	cmp	r3, #63	; 0x3f
 8002a6c:	dc6a      	bgt.n	8002b44 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a72:	1e9a      	subs	r2, r3, #2
 8002a74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a88:	1e99      	subs	r1, r3, #2
 8002a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a96:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002a9a:	405a      	eors	r2, r3
 8002a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa0:	1e99      	subs	r1, r3, #2
 8002aa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002aaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002aae:	0a9b      	lsrs	r3, r3, #10
 8002ab0:	405a      	eors	r2, r3
 8002ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab6:	1fd9      	subs	r1, r3, #7
 8002ab8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ac4:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aca:	f1a3 010f 	sub.w	r1, r3, #15
 8002ace:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ada:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae2:	f1a3 000f 	sub.w	r0, r3, #15
 8002ae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002aee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002af2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002af6:	4059      	eors	r1, r3
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afc:	f1a3 000f 	sub.w	r0, r3, #15
 8002b00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002b10:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b16:	f1a3 0110 	sub.w	r1, r3, #16
 8002b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b26:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b42:	e790      	b.n	8002a66 <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8002b50:	dc79      	bgt.n	8002c46 <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002b52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b56:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002b5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b5e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002b62:	405a      	eors	r2, r3
 8002b64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b68:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002b6c:	405a      	eors	r2, r3
 8002b6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b72:	441a      	add	r2, r3
 8002b74:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002b78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b7c:	4019      	ands	r1, r3
 8002b7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b82:	43d8      	mvns	r0, r3
 8002b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b88:	4003      	ands	r3, r0
 8002b8a:	404b      	eors	r3, r1
 8002b8c:	441a      	add	r2, r3
 8002b8e:	496d      	ldr	r1, [pc, #436]	; (8002d44 <mavlink_sha256_calc+0x3bc>)
 8002b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b98:	441a      	add	r2, r3
 8002b9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ba2:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002baa:	4413      	add	r3, r2
 8002bac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bb4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002bb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bbc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002bc0:	405a      	eors	r2, r3
 8002bc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bc6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002bca:	405a      	eors	r2, r3
 8002bcc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002bd4:	4059      	eors	r1, r3
 8002bd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bda:	4019      	ands	r1, r3
 8002bdc:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002be4:	4003      	ands	r3, r0
 8002be6:	404b      	eors	r3, r1
 8002be8:	4413      	add	r3, r2
 8002bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8002bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002bf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002bfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002c06:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002c0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c0e:	4413      	add	r3, r2
 8002c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002c1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002c2c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c34:	4413      	add	r3, r2
 8002c36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c44:	e781      	b.n	8002b4a <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8002c46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c56:	441a      	add	r2, r3
 8002c58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002c64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c74:	441a      	add	r2, r3
 8002c76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c7a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002c82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c92:	441a      	add	r2, r3
 8002c94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002ca0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cb0:	441a      	add	r2, r3
 8002cb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cb6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cc2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cce:	441a      	add	r2, r3
 8002cd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002cdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ce0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cec:	441a      	add	r2, r3
 8002cee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cf2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002cfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cfe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d0a:	441a      	add	r2, r3
 8002d0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002d18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d28:	441a      	add	r2, r3
 8002d2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d36:	bf00      	nop
 8002d38:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	08018414 	.word	0x08018414

08002d48 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b09c      	sub	sp, #112	; 0x70
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d904      	bls.n	8002d80 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d058      	beq.n	8002e42 <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8002d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d92:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d96:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d201      	bcs.n	8002da4 <mavlink_sha256_update+0x5c>
            l = len;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dac:	4413      	add	r3, r2
 8002dae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002db0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002db2:	4618      	mov	r0, r3
 8002db4:	f012 faa0 	bl	80152f8 <memcpy>
	offset += l;
 8002db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dbc:	4413      	add	r3, r2
 8002dbe:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8002dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc4:	4413      	add	r3, r2
 8002dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d1d9      	bne.n	8002d8a <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3328      	adds	r3, #40	; 0x28
 8002dda:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8002ddc:	2300      	movs	r3, #0
 8002dde:	663b      	str	r3, [r7, #96]	; 0x60
 8002de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	dc24      	bgt.n	8002e30 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dec:	4413      	add	r3, r2
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002df0:	f107 0210 	add.w	r2, r7, #16
 8002df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfe:	3303      	adds	r3, #3
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e04:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	3302      	adds	r3, #2
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	3303      	adds	r3, #3
 8002e22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e2e:	e7d7      	b.n	8002de0 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4619      	mov	r1, r3
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fda6 	bl	8002988 <mavlink_sha256_calc>
	    offset = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002e40:	e7a3      	b.n	8002d8a <mavlink_sha256_update+0x42>
	}
    }
}
 8002e42:	bf00      	nop
 8002e44:	3770      	adds	r7, #112	; 0x70
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b098      	sub	sp, #96	; 0x60
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8002e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3308      	adds	r3, #8
 8002e72:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	2247      	movs	r2, #71	; 0x47
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f012 fa60 	bl	8015348 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8e:	3307      	adds	r3, #7
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	3360      	adds	r3, #96	; 0x60
 8002e94:	443b      	add	r3, r7
 8002e96:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0a1a      	lsrs	r2, r3, #8
 8002ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea2:	3306      	adds	r3, #6
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	3360      	adds	r3, #96	; 0x60
 8002ea8:	443b      	add	r3, r7
 8002eaa:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0c1a      	lsrs	r2, r3, #16
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb6:	3305      	adds	r3, #5
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	3360      	adds	r3, #96	; 0x60
 8002ebc:	443b      	add	r3, r7
 8002ebe:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e1a      	lsrs	r2, r3, #24
 8002ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eca:	3304      	adds	r3, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	3360      	adds	r3, #96	; 0x60
 8002ed0:	443b      	add	r3, r7
 8002ed2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002edc:	3303      	adds	r3, #3
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	3360      	adds	r3, #96	; 0x60
 8002ee2:	443b      	add	r3, r7
 8002ee4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0a1a      	lsrs	r2, r3, #8
 8002eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	443b      	add	r3, r7
 8002ef8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1a      	lsrs	r2, r3, #16
 8002f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	3360      	adds	r3, #96	; 0x60
 8002f0a:	443b      	add	r3, r7
 8002f0c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0e1b      	lsrs	r3, r3, #24
 8002f16:	b2d9      	uxtb	r1, r3
 8002f18:	f107 020c 	add.w	r2, r7, #12
 8002f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1e:	4413      	add	r3, r2
 8002f20:	460a      	mov	r2, r1
 8002f22:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8002f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f26:	f103 0208 	add.w	r2, r3, #8
 8002f2a:	f107 030c 	add.w	r3, r7, #12
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff09 	bl	8002d48 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	78da      	ldrb	r2, [r3, #3]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f44:	7892      	ldrb	r2, [r2, #2]
 8002f46:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f4e:	7852      	ldrb	r2, [r2, #1]
 8002f50:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	3303      	adds	r3, #3
 8002f56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f62:	79d2      	ldrb	r2, [r2, #7]
 8002f64:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	3305      	adds	r3, #5
 8002f6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f6c:	7992      	ldrb	r2, [r2, #6]
 8002f6e:	701a      	strb	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3760      	adds	r7, #96	; 0x60
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8002f82:	79fa      	ldrb	r2, [r7, #7]
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4a03      	ldr	r2, [pc, #12]	; (8002f9c <mavlink_get_channel_status+0x24>)
 8002f8e:	4413      	add	r3, r2
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	20000370 	.word	0x20000370

08002fa0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b0a0      	sub	sp, #128	; 0x80
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <mavlink_sign_packet+0x20>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <mavlink_sign_packet+0x24>
	    return 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e04f      	b.n	8003064 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	785a      	ldrb	r2, [r3, #1]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f107 0110 	add.w	r1, r7, #16
 8002fde:	2206      	movs	r2, #6
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f012 f989 	bl	80152f8 <memcpy>
	signing->timestamp++;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fec:	1c54      	adds	r4, r2, #1
 8002fee:	f143 0500 	adc.w	r5, r3, #0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fc8b 	bl	8002918 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f103 0110 	add.w	r1, r3, #16
 8003008:	f107 0318 	add.w	r3, r7, #24
 800300c:	2220      	movs	r2, #32
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fe9a 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	f107 0318 	add.w	r3, r7, #24
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe93 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8003022:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8003026:	f107 0318 	add.w	r3, r7, #24
 800302a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe8a 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8003034:	f107 0318 	add.w	r3, r7, #24
 8003038:	2202      	movs	r2, #2
 800303a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fe82 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8003044:	f107 0318 	add.w	r3, r7, #24
 8003048:	2207      	movs	r2, #7
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe7b 	bl	8002d48 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1dda      	adds	r2, r3, #7
 8003056:	f107 0318 	add.w	r3, r7, #24
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fef4 	bl	8002e4a <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8003062:	230d      	movs	r3, #13
}
 8003064:	4618      	mov	r0, r3
 8003066:	3780      	adds	r7, #128	; 0x80
 8003068:	46bd      	mov	sp, r7
 800306a:	bdb0      	pop	{r4, r5, r7, pc}

0800306c <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d90a      	bls.n	8003094 <_mav_trim_payload+0x28>
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	3b01      	subs	r3, #1
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <_mav_trim_payload+0x28>
		length--;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	3b01      	subs	r3, #1
 8003090:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003092:	e7f1      	b.n	8003078 <_mav_trim_payload+0xc>
	}
	return length;
 8003094:	78fb      	ldrb	r3, [r7, #3]
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80030a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a4:	b08f      	sub	sp, #60	; 0x3c
 80030a6:	af04      	add	r7, sp, #16
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	72fb      	strb	r3, [r7, #11]
 80030b0:	4613      	mov	r3, r2
 80030b2:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7b1b      	ldrb	r3, [r3, #12]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80030c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <mavlink_finalize_message_buffer+0x4e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <mavlink_finalize_message_buffer+0x4e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <mavlink_finalize_message_buffer+0x4e>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <mavlink_finalize_message_buffer+0x50>
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80030f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <mavlink_finalize_message_buffer+0x60>
 80030fe:	230d      	movs	r3, #13
 8003100:	e000      	b.n	8003104 <mavlink_finalize_message_buffer+0x62>
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8003108:	230a      	movs	r3, #10
 800310a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 800310e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22fe      	movs	r2, #254	; 0xfe
 800311a:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800311c:	2306      	movs	r3, #6
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003122:	e002      	b.n	800312a <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	22fd      	movs	r2, #253	; 0xfd
 8003128:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800312a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <mavlink_finalize_message_buffer+0x96>
 8003132:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003136:	e009      	b.n	800314c <mavlink_finalize_message_buffer+0xaa>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	330c      	adds	r3, #12
 800313c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff92 	bl	800306c <_mav_trim_payload>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	7afa      	ldrb	r2, [r7, #11]
 8003154:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	7aba      	ldrb	r2, [r7, #10]
 800315a:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8003162:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	791b      	ldrb	r3, [r3, #4]
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	799a      	ldrb	r2, [r3, #6]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	3301      	adds	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	789b      	ldrb	r3, [r3, #2]
 8003196:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 800319e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	799b      	ldrb	r3, [r3, #6]
 80031aa:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	79db      	ldrb	r3, [r3, #7]
 80031b0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	7a1b      	ldrb	r3, [r3, #8]
 80031b6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	7a5a      	ldrb	r2, [r3, #9]
 80031bc:	7a99      	ldrb	r1, [r3, #10]
 80031be:	0209      	lsls	r1, r1, #8
 80031c0:	430a      	orrs	r2, r1
 80031c2:	7adb      	ldrb	r3, [r3, #11]
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	777b      	strb	r3, [r7, #29]
 80031cc:	e030      	b.n	8003230 <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	795b      	ldrb	r3, [r3, #5]
 80031d8:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	799b      	ldrb	r3, [r3, #6]
 80031de:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	79db      	ldrb	r3, [r3, #7]
 80031e4:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	7a1b      	ldrb	r3, [r3, #8]
 80031ea:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	7a5a      	ldrb	r2, [r3, #9]
 80031f0:	7a99      	ldrb	r1, [r3, #10]
 80031f2:	0209      	lsls	r1, r1, #8
 80031f4:	430a      	orrs	r2, r1
 80031f6:	7adb      	ldrb	r3, [r3, #11]
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	4313      	orrs	r3, r2
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	7a5a      	ldrb	r2, [r3, #9]
 8003204:	7a99      	ldrb	r1, [r3, #10]
 8003206:	0209      	lsls	r1, r1, #8
 8003208:	430a      	orrs	r2, r1
 800320a:	7adb      	ldrb	r3, [r3, #11]
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	4313      	orrs	r3, r2
 8003210:	121b      	asrs	r3, r3, #8
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	7a5a      	ldrb	r2, [r3, #9]
 800321c:	7a99      	ldrb	r1, [r3, #10]
 800321e:	0209      	lsls	r1, r1, #8
 8003220:	430a      	orrs	r2, r1
 8003222:	7adb      	ldrb	r3, [r3, #11]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	4313      	orrs	r3, r2
 8003228:	141b      	asrs	r3, r3, #16
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	f107 0318 	add.w	r3, r7, #24
 800323e:	3301      	adds	r3, #1
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fb22 	bl	800288c <crc_calculate>
 8003248:	4603      	mov	r3, r0
 800324a:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f103 010c 	add.w	r1, r3, #12
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	78db      	ldrb	r3, [r3, #3]
 8003256:	b29a      	uxth	r2, r3
 8003258:	f107 0316 	add.w	r3, r7, #22
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fb3a 	bl	80028d6 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8003262:	f107 0216 	add.w	r2, r7, #22
 8003266:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff facd 	bl	800280c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8003272:	8af9      	ldrh	r1, [r7, #22]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	330c      	adds	r3, #12
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	78d2      	ldrb	r2, [r2, #3]
 800327c:	4413      	add	r3, r2
 800327e:	b2ca      	uxtb	r2, r1
 8003280:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	b299      	uxth	r1, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f103 020c 	add.w	r2, r3, #12
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	78db      	ldrb	r3, [r3, #3]
 8003292:	3301      	adds	r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	b2ca      	uxtb	r2, r1
 8003298:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 800329a:	8afa      	ldrh	r2, [r7, #22]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80032a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01a      	beq.n	80032de <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	310c      	adds	r1, #12
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80032c2:	4401      	add	r1, r0
 80032c4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80032c8:	f107 0018 	add.w	r0, r7, #24
 80032cc:	9102      	str	r1, [sp, #8]
 80032ce:	9201      	str	r2, [sp, #4]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4633      	mov	r3, r6
 80032d4:	4602      	mov	r2, r0
 80032d6:	4629      	mov	r1, r5
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fe61 	bl	8002fa0 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	78db      	ldrb	r3, [r3, #3]
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3302      	adds	r3, #2
 80032fa:	b29b      	uxth	r3, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	372c      	adds	r7, #44	; 0x2c
 8003300:	46bd      	mov	sp, r7
 8003302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003304 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af04      	add	r7, sp, #16
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	70fb      	strb	r3, [r7, #3]
 8003316:	460b      	mov	r3, r1
 8003318:	70bb      	strb	r3, [r7, #2]
 800331a:	4613      	mov	r3, r2
 800331c:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800331e:	787b      	ldrb	r3, [r7, #1]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fe29 	bl	8002f78 <mavlink_get_channel_status>
 8003326:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8003328:	78ba      	ldrb	r2, [r7, #2]
 800332a:	78f9      	ldrb	r1, [r7, #3]
 800332c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003330:	9302      	str	r3, [sp, #8]
 8003332:	7f3b      	ldrb	r3, [r7, #28]
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	7e3b      	ldrb	r3, [r7, #24]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff feb0 	bl	80030a2 <mavlink_finalize_message_buffer>
 8003342:	4603      	mov	r3, r0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af04      	add	r7, sp, #16
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	70fb      	strb	r3, [r7, #3]
 800335e:	460b      	mov	r3, r1
 8003360:	70bb      	strb	r3, [r7, #2]
 8003362:	4613      	mov	r3, r2
 8003364:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8003366:	78ba      	ldrb	r2, [r7, #2]
 8003368:	78f9      	ldrb	r1, [r7, #3]
 800336a:	7d3b      	ldrb	r3, [r7, #20]
 800336c:	9302      	str	r3, [sp, #8]
 800336e:	7c3b      	ldrb	r3, [r7, #16]
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	787b      	ldrb	r3, [r7, #1]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ffc3 	bl	8003304 <mavlink_finalize_message_chan>
 800337e:	4603      	mov	r3, r0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	78db      	ldrb	r3, [r3, #3]
 8003396:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	789b      	ldrb	r3, [r3, #2]
 800339c:	2bfe      	cmp	r3, #254	; 0xfe
 800339e:	d13a      	bne.n	8003416 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80033a4:	2305      	movs	r3, #5
 80033a6:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	789a      	ldrb	r2, [r3, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3301      	adds	r3, #1
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3302      	adds	r3, #2
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	7992      	ldrb	r2, [r2, #6]
 80033c0:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3303      	adds	r3, #3
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	79d2      	ldrb	r2, [r2, #7]
 80033ca:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	7a12      	ldrb	r2, [r2, #8]
 80033d4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	7a5a      	ldrb	r2, [r3, #9]
 80033da:	7a99      	ldrb	r1, [r3, #10]
 80033dc:	0209      	lsls	r1, r1, #8
 80033de:	430a      	orrs	r2, r1
 80033e0:	7adb      	ldrb	r3, [r3, #11]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	4313      	orrs	r3, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3305      	adds	r3, #5
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1d98      	adds	r0, r3, #6
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f103 010c 	add.w	r1, r3, #12
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	461a      	mov	r2, r3
 8003400:	f011 ff7a 	bl	80152f8 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8003404:	7dbb      	ldrb	r3, [r7, #22]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	78d2      	ldrb	r2, [r2, #3]
 800340a:	4413      	add	r3, r2
 800340c:	3301      	adds	r3, #1
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	e06c      	b.n	80034f0 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fe24 	bl	800306c <_mav_trim_payload>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8003428:	2309      	movs	r3, #9
 800342a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	789a      	ldrb	r2, [r3, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3301      	adds	r3, #1
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3302      	adds	r3, #2
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	7912      	ldrb	r2, [r2, #4]
 8003444:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3303      	adds	r3, #3
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	7952      	ldrb	r2, [r2, #5]
 800344e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	7992      	ldrb	r2, [r2, #6]
 8003458:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3305      	adds	r3, #5
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	79d2      	ldrb	r2, [r2, #7]
 8003462:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3306      	adds	r3, #6
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	7a12      	ldrb	r2, [r2, #8]
 800346c:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	7a5a      	ldrb	r2, [r3, #9]
 8003472:	7a99      	ldrb	r1, [r3, #10]
 8003474:	0209      	lsls	r1, r1, #8
 8003476:	430a      	orrs	r2, r1
 8003478:	7adb      	ldrb	r3, [r3, #11]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	4313      	orrs	r3, r2
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3307      	adds	r3, #7
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	7a5a      	ldrb	r2, [r3, #9]
 800348c:	7a99      	ldrb	r1, [r3, #10]
 800348e:	0209      	lsls	r1, r1, #8
 8003490:	430a      	orrs	r2, r1
 8003492:	7adb      	ldrb	r3, [r3, #11]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	4313      	orrs	r3, r2
 8003498:	121a      	asrs	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3308      	adds	r3, #8
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	7a5a      	ldrb	r2, [r3, #9]
 80034a6:	7a99      	ldrb	r1, [r3, #10]
 80034a8:	0209      	lsls	r1, r1, #8
 80034aa:	430a      	orrs	r2, r1
 80034ac:	7adb      	ldrb	r3, [r3, #11]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	4313      	orrs	r3, r2
 80034b2:	141a      	asrs	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3309      	adds	r3, #9
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 000a 	add.w	r0, r3, #10
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f011 ff15 	bl	80152f8 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80034ce:	7dba      	ldrb	r2, [r7, #22]
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	4413      	add	r3, r2
 80034d4:	3301      	adds	r3, #1
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	791b      	ldrb	r3, [r3, #4]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <mavlink_msg_to_send_buffer+0x164>
 80034e8:	230d      	movs	r3, #13
 80034ea:	e000      	b.n	80034ee <mavlink_msg_to_send_buffer+0x166>
 80034ec:	2300      	movs	r3, #0
 80034ee:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	b29a      	uxth	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3301      	adds	r3, #1
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1c98      	adds	r0, r3, #2
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800351e:	7dfa      	ldrb	r2, [r7, #23]
 8003520:	4619      	mov	r1, r3
 8003522:	f011 fee9 	bl	80152f8 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8003526:	7dbb      	ldrb	r3, [r7, #22]
 8003528:	b29a      	uxth	r2, r3
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4413      	add	r3, r2
 8003530:	b29a      	uxth	r2, r3
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	b29b      	uxth	r3, r3
 8003536:	4413      	add	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	3303      	adds	r3, #3
 800353c:	b29b      	uxth	r3, r3
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <mavlink_msg_vfr_hud_pack>:
 * @param climb [m/s] Current climb rate.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b08e      	sub	sp, #56	; 0x38
 800354a:	af02      	add	r7, sp, #8
 800354c:	613a      	str	r2, [r7, #16]
 800354e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003552:	edc7 0a02 	vstr	s1, [r7, #8]
 8003556:	461a      	mov	r2, r3
 8003558:	ed87 1a01 	vstr	s2, [r7, #4]
 800355c:	edc7 1a00 	vstr	s3, [r7]
 8003560:	4603      	mov	r3, r0
 8003562:	75fb      	strb	r3, [r7, #23]
 8003564:	460b      	mov	r3, r1
 8003566:	75bb      	strb	r3, [r7, #22]
 8003568:	4613      	mov	r3, r2
 800356a:	82bb      	strh	r3, [r7, #20]
    _mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	61fb      	str	r3, [r7, #28]
    packet.groundspeed = groundspeed;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	623b      	str	r3, [r7, #32]
    packet.alt = alt;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
    packet.climb = climb;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.heading = heading;
 800357c:	8abb      	ldrh	r3, [r7, #20]
 800357e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    packet.throttle = throttle;
 8003580:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003582:	85fb      	strh	r3, [r7, #46]	; 0x2e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	330c      	adds	r3, #12
 8003588:	f107 011c 	add.w	r1, r7, #28
 800358c:	2214      	movs	r2, #20
 800358e:	4618      	mov	r0, r3
 8003590:	f011 feb2 	bl	80152f8 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2200      	movs	r2, #0
 8003598:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 800359c:	725a      	strb	r2, [r3, #9]
 800359e:	2200      	movs	r2, #0
 80035a0:	729a      	strb	r2, [r3, #10]
 80035a2:	2200      	movs	r2, #0
 80035a4:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 80035a6:	7dba      	ldrb	r2, [r7, #22]
 80035a8:	7df9      	ldrb	r1, [r7, #23]
 80035aa:	2314      	movs	r3, #20
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2314      	movs	r3, #20
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2314      	movs	r3, #20
 80035b4:	6938      	ldr	r0, [r7, #16]
 80035b6:	f7ff fec9 	bl	800334c <mavlink_finalize_message>
 80035ba:	4603      	mov	r3, r0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3730      	adds	r7, #48	; 0x30
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	460b      	mov	r3, r1
 80035d4:	71bb      	strb	r3, [r7, #6]
 80035d6:	4613      	mov	r3, r2
 80035d8:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 80035de:	797b      	ldrb	r3, [r7, #5]
 80035e0:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 80035e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035e6:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 80035e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035ec:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 80035ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80035f2:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 80035f4:	2303      	movs	r3, #3
 80035f6:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	f107 010c 	add.w	r1, r7, #12
 8003600:	2209      	movs	r2, #9
 8003602:	4618      	mov	r0, r3
 8003604:	f011 fe78 	bl	80152f8 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	725a      	strb	r2, [r3, #9]
 800360e:	2200      	movs	r2, #0
 8003610:	729a      	strb	r2, [r3, #10]
 8003612:	2200      	movs	r2, #0
 8003614:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8003616:	79ba      	ldrb	r2, [r7, #6]
 8003618:	79f9      	ldrb	r1, [r7, #7]
 800361a:	2332      	movs	r3, #50	; 0x32
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2309      	movs	r3, #9
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2309      	movs	r3, #9
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f7ff fe91 	bl	800334c <mavlink_finalize_message>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af04      	add	r7, sp, #16
 800363a:	60ba      	str	r2, [r7, #8]
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	4603      	mov	r3, r0
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	460b      	mov	r3, r1
 8003644:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	791e      	ldrb	r6, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	795b      	ldrb	r3, [r3, #5]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	7992      	ldrb	r2, [r2, #6]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	6809      	ldr	r1, [r1, #0]
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	79c0      	ldrb	r0, [r0, #7]
 800365a:	7bbd      	ldrb	r5, [r7, #14]
 800365c:	7bfc      	ldrb	r4, [r7, #15]
 800365e:	9003      	str	r0, [sp, #12]
 8003660:	9102      	str	r1, [sp, #8]
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	4633      	mov	r3, r6
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	4629      	mov	r1, r5
 800366c:	4620      	mov	r0, r4
 800366e:	f7ff ffa9 	bl	80035c4 <mavlink_msg_heartbeat_pack>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800367c <_ZN14MavlinkControl16mavlink_header_tC1Ev>:
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	705a      	strb	r2, [r3, #1]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	709a      	strb	r2, [r3, #2]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	70da      	strb	r2, [r3, #3]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	711a      	strb	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	715a      	strb	r2, [r3, #5]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	719a      	strb	r2, [r3, #6]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, I2C_HandleTypeDef* i2c)
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
: _huart_mavlink(huart), _altimeter_i2c(i2c)  {
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	731a      	strb	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	81da      	strh	r2, [r3, #14]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a24      	ldr	r2, [pc, #144]	; (8003784 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc0>)
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	220a      	movs	r2, #10
 800370a:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2203      	movs	r2, #3
 800371a:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8003724:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f011 fe0c 	bl	8015348 <memset>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f203 33f1 	addw	r3, r3, #1009	; 0x3f1
 8003746:	f44f 728c 	mov.w	r2, #280	; 0x118
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f011 fdfb 	bl	8015348 <memset>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003758:	4619      	mov	r1, r3
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9c1 2300 	strd	r2, r3, [r1]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff85 	bl	800367c <_ZN14MavlinkControl16mavlink_header_tC1Ev>

	  instancePtr = this;
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef+0xc4>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6013      	str	r3, [r2, #0]
	//HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);




}
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08017f78 	.word	0x08017f78
 8003788:	200003d0 	.word	0x200003d0

0800378c <HAL_UARTEx_RxEventCallback>:
void MavlinkControl::uartRxCallback(UART_HandleTypeDef *huart, uint16_t Size) {
  // Call the overridden function with the instancePtr as the first argument
  HAL_UARTEx_RxEventCallback(instancePtr->_huart_mavlink, Size);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]

  // Access the instance of the class using the static member variable
  MavlinkControl* instance = MavlinkControl::instancePtr;
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <HAL_UARTEx_RxEventCallback+0x20>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
	instance
	->process_header();
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f83c 	bl	800381c <_ZN14MavlinkControl14process_headerEv>



}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200003d0 	.word	0x200003d0

080037b0 <_ZN14MavlinkControl9update_RXEv>:

void MavlinkControl::update_RX(void){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, RX_BUFFER_SIZE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80037c2:	2214      	movs	r2, #20
 80037c4:	4619      	mov	r1, r3
 80037c6:	f00c feed 	bl	80105a4 <HAL_UARTEx_ReceiveToIdle_DMA>


}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <_ZN14MavlinkControl9update_TXEv>:





void MavlinkControl::update_TX(void){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

	//Every 0.5 sec send a heartbeat to the herelink controller. If this runs continuously this
	//blocks the SBUS protocol

	this->sendTestMessage();
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8fb 	bl	80039d8 <_ZN14MavlinkControl15sendTestMessageEv>

	if(HAL_GetTick() % 500 == 0){
 80037e2:	f003 fa49 	bl	8006c78 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <_ZN14MavlinkControl9update_TXEv+0x44>)
 80037ea:	fba3 1302 	umull	r1, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <_ZN14MavlinkControl9update_TXEv+0x3a>

		this->heartbeat();
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f895 	bl	8003938 <_ZN14MavlinkControl9heartbeatEv>

	}

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	10624dd3 	.word	0x10624dd3

0800381c <_ZN14MavlinkControl14process_headerEv>:

void MavlinkControl::process_header(void){
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	//first check the header for value 0xFD

	//NOT EVEN SURE IF I NEED THIS LATER


	if(_receiveBuffer_1[0] == 0xFD){
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 800382a:	2bfd      	cmp	r3, #253	; 0xfd
 800382c:	d147      	bne.n	80038be <_ZN14MavlinkControl14process_headerEv+0xa2>
		_receiveBuffer_2 = _receiveBuffer_1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec

		//printf("CHECKING IF LEN IS OK %d \r\n", _tempBuffer[1]);


		_mavlink_received_header.magic = _receiveBuffer_2[0];
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800384e:	785a      	ldrb	r2, [r3, #1]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.incompat_flags = _receiveBuffer_2[2];
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800385c:	789a      	ldrb	r2, [r3, #2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
		_mavlink_received_header.compat_flags = _receiveBuffer_2[3];
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800386a:	78da      	ldrb	r2, [r3, #3]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
		_mavlink_received_header.seq = _receiveBuffer_2[4];
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003878:	791a      	ldrb	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[5];
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003886:	795a      	ldrb	r2, [r3, #5]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.msgid = _receiveBuffer_2[6] | _receiveBuffer_2[7] | _receiveBuffer_2[8];
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003894:	3306      	adds	r3, #6
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800389e:	3307      	adds	r3, #7
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038ac:	3308      	adds	r3, #8
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520





}
 80038bc:	e036      	b.n	800392c <_ZN14MavlinkControl14process_headerEv+0x110>
	}else if(_receiveBuffer_1[0] == 0xFE){
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 80038c4:	2bfe      	cmp	r3, #254	; 0xfe
 80038c6:	d131      	bne.n	800392c <_ZN14MavlinkControl14process_headerEv+0x110>
		_receiveBuffer_2 = _receiveBuffer_1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
		_mavlink_received_header.magic = _receiveBuffer_2[0];
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		_mavlink_received_header.len = _receiveBuffer_2[1];
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038e8:	785a      	ldrb	r2, [r3, #1]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
		_mavlink_received_header.seq = _receiveBuffer_2[2];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80038f6:	789a      	ldrb	r2, [r3, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
		_mavlink_received_header.sysid = _receiveBuffer_2[3];
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003904:	78da      	ldrb	r2, [r3, #3]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
		_mavlink_received_header.compid = _receiveBuffer_2[4];
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003912:	791a      	ldrb	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
		_mavlink_received_header.msgid = _receiveBuffer_2[5];
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8003920:	3305      	adds	r3, #5
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <_ZN14MavlinkControl9heartbeatEv>:
	return _mavlink_received_header;

}


void MavlinkControl::heartbeat(void){
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af04      	add	r7, sp, #16
 800393e:	6078      	str	r0, [r7, #4]


	_bufferLength = mavlink_msg_heartbeat_encode(
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f203 1233 	addw	r2, r3, #307	; 0x133
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend,
			&_mavlink_heartbeat);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
	_bufferLength = mavlink_msg_heartbeat_encode(
 8003958:	f7ff fe6c 	bl	8003634 <mavlink_msg_heartbeat_encode>
 800395c:	4603      	mov	r3, r0
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	81da      	strh	r2, [r3, #14]
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f203 1233 	addw	r2, r3, #307	; 0x133
 8003976:	2303      	movs	r3, #3
 8003978:	9303      	str	r3, [sp, #12]
 800397a:	2300      	movs	r3, #0
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	2300      	movs	r3, #0
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	230a      	movs	r3, #10
 8003988:	f7ff fe1c 	bl	80035c4 <mavlink_msg_heartbeat_pack>
			&_mavlinkSend, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7ff fcf4 	bl	8003388 <mavlink_msg_to_send_buffer>

	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _bufferLength, 100) != HAL_OK){
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	89da      	ldrh	r2, [r3, #14]
 80039ae:	2364      	movs	r3, #100	; 0x64
 80039b0:	f00b fa1d 	bl	800edee <HAL_UART_Transmit>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <_ZN14MavlinkControl9heartbeatEv+0x92>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <_ZN14MavlinkControl9heartbeatEv+0x9c>)
 80039c6:	f012 fa97 	bl	8015ef8 <puts>
	}

}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	08017f7c 	.word	0x08017f7c

080039d8 <_ZN14MavlinkControl15sendTestMessageEv>:

void MavlinkControl::sendTestMessage(void){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]

	float testValue = 122.0f;
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <_ZN14MavlinkControl15sendTestMessageEv+0x8c>)
 80039e2:	60fb      	str	r3, [r7, #12]

	// mavlink_msg_vfr_hud_pack function below repacks the value to a hud message. These can be configured on the QgroundControl app.
	//The hud message can contain values such as ground speed, altitude, etc... autocomplete will give you an overview
	//of the different values that can be sent. The values itself are hardcoded into the firmware of the Herelink controller though

	mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid,&_mavlinkSend, testValue, 0.0f,0,0,0,0);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 129d 	ldrb.w	r1, [r3, #669]	; 0x29d
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f203 1233 	addw	r2, r3, #307	; 0x133
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8003a68 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 80039fe:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8003a68 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003a02:	2300      	movs	r3, #0
 8003a04:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003a68 <_ZN14MavlinkControl15sendTestMessageEv+0x90>
 8003a08:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a0c:	f7ff fd9b 	bl	8003546 <mavlink_msg_vfr_hud_pack>
	_TX_bufferLength = mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f203 32f1 	addw	r2, r3, #1009	; 0x3f1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f203 1333 	addw	r3, r3, #307	; 0x133
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7ff fcb2 	bl	8003388 <mavlink_msg_to_send_buffer>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _TX_bufferLength, 100) != HAL_OK){
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f203 31f1 	addw	r1, r3, #1009	; 0x3f1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b3 250a 	ldrh.w	r2, [r3, #1290]	; 0x50a
 8003a3e:	2364      	movs	r3, #100	; 0x64
 8003a40:	f00b f9d5 	bl	800edee <HAL_UART_Transmit>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <_ZN14MavlinkControl15sendTestMessageEv+0x82>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <_ZN14MavlinkControl15sendTestMessageEv+0x94>)
 8003a56:	f012 fa4f 	bl	8015ef8 <puts>
	}

}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	42f40000 	.word	0x42f40000
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	08017f7c 	.word	0x08017f7c

08003a70 <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	615a      	str	r2, [r3, #20]
 8003a8c:	761a      	strb	r2, [r3, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	331e      	adds	r3, #30
 8003a92:	2220      	movs	r2, #32
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f011 fc56 	bl	8015348 <memset>

	this->_huart_sbus = huart_sbus;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	601a      	str	r2, [r3, #0]





}
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]



	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	2219      	movs	r2, #25
 8003abe:	4619      	mov	r1, r3
 8003ac0:	f00c fd70 	bl	80105a4 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f804 	bl	8003ad2 <_ZN4SBUS8readSBUSEv>




}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

		//als iemand er ooit in slaagt om dit in een mooie for-loop of iets dergelijks te gieten, chapeau, ik vind hem niet :').


		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	795b      	ldrb	r3, [r3, #5]
 8003ade:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	799b      	ldrb	r3, [r3, #6]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8003aea:	89fa      	ldrh	r2, [r7, #14]
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	799b      	ldrb	r3, [r3, #6]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	79db      	ldrb	r3, [r3, #7]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	015b      	lsls	r3, r3, #5
 8003b0e:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8003b10:	89fa      	ldrh	r2, [r7, #14]
 8003b12:	89bb      	ldrh	r3, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	79db      	ldrb	r3, [r3, #7]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7a1b      	ldrb	r3, [r3, #8]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7a5b      	ldrb	r3, [r3, #9]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 8003b40:	89fa      	ldrh	r2, [r7, #14]
 8003b42:	89bb      	ldrh	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	897b      	ldrh	r3, [r7, #10]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7a5b      	ldrb	r3, [r3, #9]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7a9b      	ldrb	r3, [r3, #10]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8003b6c:	89fa      	ldrh	r2, [r7, #14]
 8003b6e:	89bb      	ldrh	r3, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7a9b      	ldrb	r3, [r3, #10]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7adb      	ldrb	r3, [r3, #11]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 8003b92:	89fa      	ldrh	r2, [r7, #14]
 8003b94:	89bb      	ldrh	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	84da      	strh	r2, [r3, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7adb      	ldrb	r3, [r3, #11]
 8003ba8:	09db      	lsrs	r3, r3, #7
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7b1b      	ldrb	r3, [r3, #12]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7b5b      	ldrb	r3, [r3, #13]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	025b      	lsls	r3, r3, #9
 8003bc0:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 8003bc2:	89fa      	ldrh	r2, [r7, #14]
 8003bc4:	89bb      	ldrh	r3, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7b5b      	ldrb	r3, [r3, #13]
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7b9b      	ldrb	r3, [r3, #14]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	019b      	lsls	r3, r3, #6
 8003bec:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8003bee:	89fa      	ldrh	r2, [r7, #14]
 8003bf0:	89bb      	ldrh	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7b9b      	ldrb	r3, [r3, #14]
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	7bdb      	ldrb	r3, [r3, #15]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 8003c14:	89fa      	ldrh	r2, [r7, #14]
 8003c16:	89bb      	ldrh	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7c1b      	ldrb	r3, [r3, #16]
 8003c2a:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7c5b      	ldrb	r3, [r3, #17]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 8003c36:	89fa      	ldrh	r2, [r7, #14]
 8003c38:	89bb      	ldrh	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	7c5b      	ldrb	r3, [r3, #17]
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7c9b      	ldrb	r3, [r3, #18]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	015b      	lsls	r3, r3, #5
 8003c5a:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8003c5c:	89fa      	ldrh	r2, [r7, #14]
 8003c5e:	89bb      	ldrh	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7c9b      	ldrb	r3, [r3, #18]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7cdb      	ldrb	r3, [r3, #19]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7d1b      	ldrb	r3, [r3, #20]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	029b      	lsls	r3, r3, #10
 8003c8a:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8003c8c:	89fa      	ldrh	r2, [r7, #14]
 8003c8e:	89bb      	ldrh	r3, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	897b      	ldrh	r3, [r7, #10]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7d1b      	ldrb	r3, [r3, #20]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7d5b      	ldrb	r3, [r3, #21]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	01db      	lsls	r3, r3, #7
 8003cb6:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8003cb8:	89fa      	ldrh	r2, [r7, #14]
 8003cba:	89bb      	ldrh	r3, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7d5b      	ldrb	r3, [r3, #21]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7d9b      	ldrb	r3, [r3, #22]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8003cde:	89fa      	ldrh	r2, [r7, #14]
 8003ce0:	89bb      	ldrh	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	7d9b      	ldrb	r3, [r3, #22]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7ddb      	ldrb	r3, [r3, #23]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7e1b      	ldrb	r3, [r3, #24]
 8003d08:	125b      	asrs	r3, r3, #9
 8003d0a:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 8003d0c:	89fa      	ldrh	r2, [r7, #14]
 8003d0e:	89bb      	ldrh	r3, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	897b      	ldrh	r3, [r7, #10]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7e1b      	ldrb	r3, [r3, #24]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7e5b      	ldrb	r3, [r3, #25]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 8003d38:	89fa      	ldrh	r2, [r7, #14]
 8003d3a:	89bb      	ldrh	r3, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7e5b      	ldrb	r3, [r3, #25]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7e9b      	ldrb	r3, [r3, #26]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 8003d5e:	89fa      	ldrh	r2, [r7, #14]
 8003d60:	89bb      	ldrh	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7edb      	ldrb	r3, [r3, #27]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <_ZN4SBUS8readSBUSEv+0x2b0>
 8003d7c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003d80:	e000      	b.n	8003d84 <_ZN4SBUS8readSBUSEv+0x2b2>
 8003d82:	2200      	movs	r2, #0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 8003d88:	2301      	movs	r3, #1


}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003da4:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 8003da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003daa:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8003dac:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003db0:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 8003db2:	f240 6394 	movw	r3, #1684	; 0x694
 8003db6:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 8003db8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	da14      	bge.n	8003dee <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8003dc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dd2:	fb03 f202 	mul.w	r2, r3, r2
 8003dd6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dde:	1acb      	subs	r3, r1, r3
 8003de0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dec:	e01b      	b.n	8003e26 <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 8003dee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	dd13      	ble.n	8003e22 <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8003dfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dfe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <_ZN4SBUS8getLeftYEv+0x9c>)
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
 8003e0a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003e0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e12:	1acb      	subs	r3, r1, r3
 8003e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e20:	e001      	b.n	8003e26 <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 8003e22:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003e38 <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 8003e26:	eeb0 0a67 	vmov.f32	s0, s15
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	fffffc18 	.word	0xfffffc18
 8003e38:	00000000 	.word	0x00000000

08003e3c <_ZN4SBUS9getRightYEv>:

  }
}


float SBUS::getRightY(void){
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8c1b      	ldrh	r3, [r3, #32]
 8003e48:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003e4a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003e4e:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 8003e50:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <_ZN4SBUS9getRightYEv+0xc0>)
 8003e52:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <_ZN4SBUS9getRightYEv+0xc4>)
 8003e56:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 8003e58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e64:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	dd16      	ble.n	8003ea0 <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 8003e72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e86:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003f04 <_ZN4SBUS9getRightYEv+0xc8>
 8003e8a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9e:	e025      	b.n	8003eec <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 8003ea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eac:	ed97 7a04 	vldr	s14, [r7, #16]
 8003eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb8:	d516      	bpl.n	8003ee8 <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 8003eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ece:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003f04 <_ZN4SBUS9getRightYEv+0xc8>
 8003ed2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ede:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee6:	e001      	b.n	8003eec <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8003ee8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003f08 <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 8003eec:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	43b60000 	.word	0x43b60000
 8003f00:	44d28000 	.word	0x44d28000
 8003f04:	447a0000 	.word	0x447a0000
 8003f08:	00000000 	.word	0x00000000

08003f0c <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8bdb      	ldrh	r3, [r3, #30]
 8003f18:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8003f1a:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003f1e:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <_ZN4SBUS9getRightXEv+0xc0>)
 8003f22:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <_ZN4SBUS9getRightXEv+0xc4>)
 8003f26:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8003f28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f34:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	dd16      	ble.n	8003f70 <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8003f42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003fd4 <_ZN4SBUS9getRightXEv+0xc8>
 8003f5a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	e025      	b.n	8003fbc <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 8003f70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f88:	d516      	bpl.n	8003fb8 <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8003f8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003fd4 <_ZN4SBUS9getRightXEv+0xc8>
 8003fa2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003faa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb6:	e001      	b.n	8003fbc <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8003fb8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003fd8 <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 8003fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	43b60000 	.word	0x43b60000
 8003fd0:	44d28000 	.word	0x44d28000
 8003fd4:	447a0000 	.word	0x447a0000
 8003fd8:	00000000 	.word	0x00000000

08003fdc <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[4];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe8:	82fb      	strh	r3, [r7, #22]

	float center_value = 1024.0f;
 8003fea:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003fee:	613b      	str	r3, [r7, #16]
	float max_left = 1684.0f;
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <_ZN4SBUS11getJogWheelEv+0xc0>)
 8003ff2:	60fb      	str	r3, [r7, #12]
	float max_right = 364.0f;
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <_ZN4SBUS11getJogWheelEv+0xc4>)
 8003ff6:	60bb      	str	r3, [r7, #8]

	if(raw_value < center_value){
 8003ff8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004004:	ed97 7a04 	vldr	s14, [r7, #16]
 8004008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004010:	dd16      	ble.n	8004040 <_ZN4SBUS11getJogWheelEv+0x64>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));
 8004012:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800401e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004026:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80040a4 <_ZN4SBUS11getJogWheelEv+0xc8>
 800402a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800402e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004032:	edd7 7a03 	vldr	s15, [r7, #12]
 8004036:	ee37 7a67 	vsub.f32	s14, s14, s15
 800403a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800403e:	e025      	b.n	800408c <_ZN4SBUS11getJogWheelEv+0xb0>

	}else if (raw_value > center_value){
 8004040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800404c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	d516      	bpl.n	8004088 <_ZN4SBUS11getJogWheelEv+0xac>

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 800405a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004066:	edd7 7a04 	vldr	s15, [r7, #16]
 800406a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80040a4 <_ZN4SBUS11getJogWheelEv+0xc8>
 8004072:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004076:	ed97 7a02 	vldr	s14, [r7, #8]
 800407a:	edd7 7a04 	vldr	s15, [r7, #16]
 800407e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004086:	e001      	b.n	800408c <_ZN4SBUS11getJogWheelEv+0xb0>
	}else {

		return 0.0f;
 8004088:	eddf 7a07 	vldr	s15, [pc, #28]	; 80040a8 <_ZN4SBUS11getJogWheelEv+0xcc>
	}


}
 800408c:	eeb0 0a67 	vmov.f32	s0, s15
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	44d28000 	.word	0x44d28000
 80040a0:	43b60000 	.word	0x43b60000
 80040a4:	447a0000 	.word	0x447a0000
 80040a8:	00000000 	.word	0x00000000

080040ac <_ZN4SBUS8A_buttonEv>:

bool SBUS::A_button(void){
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	//state machine to make sure the button presses debounce correctly (I know it's overkill but hey...).

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040bc:	bf8c      	ite	hi
 80040be:	2301      	movhi	r3, #1
 80040c0:	2300      	movls	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 80040c4:	4b24      	ldr	r3, [pc, #144]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d02d      	beq.n	8004128 <_ZN4SBUS8A_buttonEv+0x7c>
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	dc3b      	bgt.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <_ZN4SBUS8A_buttonEv+0x2e>
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d00a      	beq.n	80040ee <_ZN4SBUS8A_buttonEv+0x42>
 80040d8:	e036      	b.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02e      	beq.n	800413e <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80040ec:	e027      	b.n	800413e <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8004100:	e01f      	b.n	8004142 <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <_ZN4SBUS8A_buttonEv+0xb0>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b31      	cmp	r3, #49	; 0x31
 8004114:	bf8c      	ite	hi
 8004116:	2301      	movhi	r3, #1
 8004118:	2300      	movls	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
	      break;
 8004126:	e00c      	b.n	8004142 <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <_ZN4SBUS8A_buttonEv+0xac>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
	        return true;
 800413a:	2301      	movs	r3, #1
 800413c:	e005      	b.n	800414a <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 8004146:	bf00      	nop
	  }

	  return false;
 8004148:	2300      	movs	r3, #0

}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	200003d4 	.word	0x200003d4
 800415c:	200003d5 	.word	0x200003d5

08004160 <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004170:	bf8c      	ite	hi
 8004172:	2301      	movhi	r3, #1
 8004174:	2300      	movls	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
			  );

	  switch (debounce_state) {
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d02d      	beq.n	80041dc <_ZN4SBUS8B_buttonEv+0x7c>
 8004180:	2b02      	cmp	r3, #2
 8004182:	dc3b      	bgt.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <_ZN4SBUS8B_buttonEv+0x2e>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d00a      	beq.n	80041a2 <_ZN4SBUS8B_buttonEv+0x42>
 800418c:	e036      	b.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02e      	beq.n	80041f2 <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80041a0:	e027      	b.n	80041f2 <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	f083 0301 	eor.w	r3, r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 80041b4:	e01f      	b.n	80041f6 <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	4b13      	ldr	r3, [pc, #76]	; (8004210 <_ZN4SBUS8B_buttonEv+0xb0>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b31      	cmp	r3, #49	; 0x31
 80041c8:	bf8c      	ite	hi
 80041ca:	2301      	movhi	r3, #1
 80041cc:	2300      	movls	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 80041d4:	4b0d      	ldr	r3, [pc, #52]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
	      break;
 80041da:	e00c      	b.n	80041f6 <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <_ZN4SBUS8B_buttonEv+0xac>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
	        return true;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e005      	b.n	80041fe <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 80041fa:	bf00      	nop
	  }

	  return false;
 80041fc:	2300      	movs	r3, #0


}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	200003d6 	.word	0x200003d6
 8004210:	200003d7 	.word	0x200003d7

08004214 <_ZN4SBUS8C_buttonEv>:

bool SBUS::C_button(void){
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[7] > 1000);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004224:	bf8c      	ite	hi
 8004226:	2301      	movhi	r3, #1
 8004228:	2300      	movls	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d02d      	beq.n	8004290 <_ZN4SBUS8C_buttonEv+0x7c>
 8004234:	2b02      	cmp	r3, #2
 8004236:	dc3b      	bgt.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <_ZN4SBUS8C_buttonEv+0x2e>
 800423c:	2b01      	cmp	r3, #1
 800423e:	d00a      	beq.n	8004256 <_ZN4SBUS8C_buttonEv+0x42>
 8004240:	e036      	b.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
		case 0:  // button released
		  if (button_pressed) {
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02e      	beq.n	80042a6 <_ZN4SBUS8C_buttonEv+0x92>
			debounce_state = 1;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
			debounce_counter = 0;
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004254:	e027      	b.n	80042a6 <_ZN4SBUS8C_buttonEv+0x92>

		case 1:  // button pressed, waiting for debounce
		  if (!button_pressed) {
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <_ZN4SBUS8C_buttonEv+0x56>
			debounce_state = 0;
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
		  } else if (++debounce_counter >= _debounceTime) {
			debounce_state = 2;
		  }
		  break;
 8004268:	e01f      	b.n	80042aa <_ZN4SBUS8C_buttonEv+0x96>
		  } else if (++debounce_counter >= _debounceTime) {
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b31      	cmp	r3, #49	; 0x31
 800427c:	bf8c      	ite	hi
 800427e:	2301      	movhi	r3, #1
 8004280:	2300      	movls	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <_ZN4SBUS8C_buttonEv+0x96>
			debounce_state = 2;
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800428a:	2202      	movs	r2, #2
 800428c:	701a      	strb	r2, [r3, #0]
		  break;
 800428e:	e00c      	b.n	80042aa <_ZN4SBUS8C_buttonEv+0x96>

		case 2:  // button pressed and debounced
		  if (!button_pressed) {
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <_ZN4SBUS8C_buttonEv+0x9a>
			debounce_state = 0;
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <_ZN4SBUS8C_buttonEv+0xac>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
			return true;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e005      	b.n	80042b2 <_ZN4SBUS8C_buttonEv+0x9e>
		  break;
 80042a6:	bf00      	nop
 80042a8:	e002      	b.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
		  break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <_ZN4SBUS8C_buttonEv+0x9c>
		  }
		  break;
 80042ae:	bf00      	nop
	  }

	  return false;
 80042b0:	2300      	movs	r3, #0

}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200003d8 	.word	0x200003d8
 80042c4:	200003d9 	.word	0x200003d9

080042c8 <_ZN4SBUS8D_buttonEv>:

bool SBUS::D_button(void){
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[8] > 1000);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042d8:	bf8c      	ite	hi
 80042da:	2301      	movhi	r3, #1
 80042dc:	2300      	movls	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 80042e0:	4b24      	ldr	r3, [pc, #144]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d02d      	beq.n	8004344 <_ZN4SBUS8D_buttonEv+0x7c>
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	dc3b      	bgt.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <_ZN4SBUS8D_buttonEv+0x2e>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d00a      	beq.n	800430a <_ZN4SBUS8D_buttonEv+0x42>
 80042f4:	e036      	b.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
		case 0:  // button released
		  if (button_pressed) {
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02e      	beq.n	800435a <_ZN4SBUS8D_buttonEv+0x92>
			debounce_state = 1;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
			debounce_counter = 0;
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004308:	e027      	b.n	800435a <_ZN4SBUS8D_buttonEv+0x92>

		case 1:  // button pressed, waiting for debounce
		  if (!button_pressed) {
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	f083 0301 	eor.w	r3, r3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <_ZN4SBUS8D_buttonEv+0x56>
			debounce_state = 0;
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
		  } else if (++debounce_counter >= _debounceTime) {
			debounce_state = 2;
		  }
		  break;
 800431c:	e01f      	b.n	800435e <_ZN4SBUS8D_buttonEv+0x96>
		  } else if (++debounce_counter >= _debounceTime) {
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <_ZN4SBUS8D_buttonEv+0xb0>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b31      	cmp	r3, #49	; 0x31
 8004330:	bf8c      	ite	hi
 8004332:	2301      	movhi	r3, #1
 8004334:	2300      	movls	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <_ZN4SBUS8D_buttonEv+0x96>
			debounce_state = 2;
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 800433e:	2202      	movs	r2, #2
 8004340:	701a      	strb	r2, [r3, #0]
		  break;
 8004342:	e00c      	b.n	800435e <_ZN4SBUS8D_buttonEv+0x96>

		case 2:  // button pressed and debounced
		  if (!button_pressed) {
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	f083 0301 	eor.w	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <_ZN4SBUS8D_buttonEv+0x9a>
			debounce_state = 0;
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_ZN4SBUS8D_buttonEv+0xac>)
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
			return true;
 8004356:	2301      	movs	r3, #1
 8004358:	e005      	b.n	8004366 <_ZN4SBUS8D_buttonEv+0x9e>
		  break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
		  break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <_ZN4SBUS8D_buttonEv+0x9c>
		  }
		  break;
 8004362:	bf00      	nop
	  }

	  return false;
 8004364:	2300      	movs	r3, #0

}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	200003da 	.word	0x200003da
 8004378:	200003db 	.word	0x200003db

0800437c <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
      { }

#if __cplusplus >= 201103L
      constexpr _Base_bitset(unsigned long long __val) noexcept
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	e9c7 2300 	strd	r2, r3, [r7]
#else
      _Base_bitset(unsigned long __val)
#endif
      : _M_w(__val)
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]
      { }
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbyte(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }

      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ffec 	bl	80043ba <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2201      	movs	r2, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>:
      _WordT&
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
      { return _M_w; }

      _GLIBCXX_CONSTEXPR _WordT
      _M_getword(size_t) const _GLIBCXX_NOEXCEPT
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>:
#include "altimeter.h"

Altimeter::Altimeter(I2C_HandleTypeDef* i2c) :_i2c (i2c){
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	715a      	strb	r2, [r3, #5]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	60da      	str	r2, [r3, #12]



}
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_ZN9Altimeter14init_altimeterEv>:

void Altimeter::init_altimeter(void){
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af04      	add	r7, sp, #16
 800443e:	6078      	str	r0, [r7, #4]

	//Set to altimeter mode
	_altimeter_mode = 0xf9;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	22f9      	movs	r2, #249	; 0xf9
 8004444:	711a      	strb	r2, [r3, #4]
	uint8_t reset = 0x04;
 8004446:	2304      	movs	r3, #4
 8004448:	75fb      	strb	r3, [r7, #23]
	uint8_t response;
    uint8_t transmit_data[3];

	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, 1, &_altimeter_mode, 1, 100) != HAL_OK){
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	2264      	movs	r2, #100	; 0x64
 8004454:	9202      	str	r2, [sp, #8]
 8004456:	2201      	movs	r2, #1
 8004458:	9201      	str	r2, [sp, #4]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2301      	movs	r3, #1
 800445e:	2226      	movs	r2, #38	; 0x26
 8004460:	21c0      	movs	r1, #192	; 0xc0
 8004462:	f005 fcb3 	bl	8009dcc <HAL_I2C_Mem_Write>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <_ZN9Altimeter14init_altimeterEv+0x44>

		printf("error with i2c \r\n");
 8004476:	4863      	ldr	r0, [pc, #396]	; (8004604 <_ZN9Altimeter14init_altimeterEv+0x1cc>)
 8004478:	f011 fd3e 	bl	8015ef8 <puts>

	}

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT , &response, 1, 100);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	2364      	movs	r3, #100	; 0x64
 8004482:	9302      	str	r3, [sp, #8]
 8004484:	2301      	movs	r3, #1
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	f107 0316 	add.w	r3, r7, #22
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2301      	movs	r3, #1
 8004490:	2226      	movs	r2, #38	; 0x26
 8004492:	21c0      	movs	r1, #192	; 0xc0
 8004494:	f005 fdae 	bl	8009ff4 <HAL_I2C_Mem_Read>
	printf("Reading from IIC address %d \r\n", response);
 8004498:	7dbb      	ldrb	r3, [r7, #22]
 800449a:	4619      	mov	r1, r3
 800449c:	485a      	ldr	r0, [pc, #360]	; (8004608 <_ZN9Altimeter14init_altimeterEv+0x1d0>)
 800449e:	f011 fca5 	bl	8015dec <iprintf>

	//No event flags disabled (might change later).
	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_2, 1, &_event_flags, 1, 100) != HAL_OK){
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3305      	adds	r3, #5
 80044aa:	2264      	movs	r2, #100	; 0x64
 80044ac:	9202      	str	r2, [sp, #8]
 80044ae:	2201      	movs	r2, #1
 80044b0:	9201      	str	r2, [sp, #4]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2301      	movs	r3, #1
 80044b6:	2227      	movs	r2, #39	; 0x27
 80044b8:	21c0      	movs	r1, #192	; 0xc0
 80044ba:	f005 fc87 	bl	8009dcc <HAL_I2C_Mem_Write>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <_ZN9Altimeter14init_altimeterEv+0x9c>

		printf("error with i2c \r\n");
 80044ce:	484d      	ldr	r0, [pc, #308]	; (8004604 <_ZN9Altimeter14init_altimeterEv+0x1cc>)
 80044d0:	f011 fd12 	bl	8015ef8 <puts>
	}
	uint8_t data[1] = {0x07};
 80044d4:	2307      	movs	r3, #7
 80044d6:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Mem_Write(_i2c, _altimeter_address, 0x14, 1, data, 1, 100) != HAL_OK){
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	2364      	movs	r3, #100	; 0x64
 80044de:	9302      	str	r3, [sp, #8]
 80044e0:	2301      	movs	r3, #1
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2301      	movs	r3, #1
 80044ec:	2214      	movs	r2, #20
 80044ee:	21c0      	movs	r1, #192	; 0xc0
 80044f0:	f005 fc6c 	bl	8009dcc <HAL_I2C_Mem_Write>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <_ZN9Altimeter14init_altimeterEv+0xd2>
		printf("error with i2c \r\n");
 8004504:	483f      	ldr	r0, [pc, #252]	; (8004604 <_ZN9Altimeter14init_altimeterEv+0x1cc>)
 8004506:	f011 fcf7 	bl	8015ef8 <puts>
	}
	_altimeter_mode = 0xf9;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	22f9      	movs	r2, #249	; 0xf9
 800450e:	711a      	strb	r2, [r3, #4]
	transmit_data[0] = _altimeter_address;
 8004510:	23c0      	movs	r3, #192	; 0xc0
 8004512:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = _altimeter_ctrl_reg_1;
 8004514:	2326      	movs	r3, #38	; 0x26
 8004516:	747b      	strb	r3, [r7, #17]
	transmit_data[2] = _altimeter_mode;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	791b      	ldrb	r3, [r3, #4]
 800451c:	74bb      	strb	r3, [r7, #18]
	if(HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 3, 100) != HAL_OK){
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	f107 0210 	add.w	r2, r7, #16
 8004526:	2364      	movs	r3, #100	; 0x64
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2303      	movs	r3, #3
 800452c:	21c0      	movs	r1, #192	; 0xc0
 800452e:	f005 fb59 	bl	8009be4 <HAL_I2C_Master_Transmit>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <_ZN9Altimeter14init_altimeterEv+0x110>

		printf("error with i2c \r\n");
 8004542:	4830      	ldr	r0, [pc, #192]	; (8004604 <_ZN9Altimeter14init_altimeterEv+0x1cc>)
 8004544:	f011 fcd8 	bl	8015ef8 <puts>

	}
	transmit_data[0] = _altimeter_address;
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = _altimeter_ctrl_reg_1;
 800454c:	2326      	movs	r3, #38	; 0x26
 800454e:	747b      	strb	r3, [r7, #17]
	transmit_data[2] = 0xFB;
 8004550:	23fb      	movs	r3, #251	; 0xfb
 8004552:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 3, 100);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	f107 0210 	add.w	r2, r7, #16
 800455c:	2364      	movs	r3, #100	; 0x64
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2303      	movs	r3, #3
 8004562:	21c0      	movs	r1, #192	; 0xc0
 8004564:	f005 fb3e 	bl	8009be4 <HAL_I2C_Master_Transmit>
	while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f005 fe75 	bl	800a25c <HAL_I2C_GetState>
 8004572:	4603      	mov	r3, r0
 8004574:	2b20      	cmp	r3, #32
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d000      	beq.n	8004584 <_ZN9Altimeter14init_altimeterEv+0x14c>
 8004582:	e7f1      	b.n	8004568 <_ZN9Altimeter14init_altimeterEv+0x130>


	// Enable Data Flags in PT_DATA_CFG
	transmit_data[0] = _altimeter_address;
 8004584:	23c0      	movs	r3, #192	; 0xc0
 8004586:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = _altimeter_data_event_flag_reg;
 8004588:	2313      	movs	r3, #19
 800458a:	747b      	strb	r3, [r7, #17]
	transmit_data[2] = 0x07;
 800458c:	2307      	movs	r3, #7
 800458e:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 3, 100);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	f107 0210 	add.w	r2, r7, #16
 8004598:	2364      	movs	r3, #100	; 0x64
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	2303      	movs	r3, #3
 800459e:	21c0      	movs	r1, #192	; 0xc0
 80045a0:	f005 fb20 	bl	8009be4 <HAL_I2C_Master_Transmit>
	while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f005 fe57 	bl	800a25c <HAL_I2C_GetState>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d000      	beq.n	80045c0 <_ZN9Altimeter14init_altimeterEv+0x188>
 80045be:	e7f1      	b.n	80045a4 <_ZN9Altimeter14init_altimeterEv+0x16c>

	// Set Active
	transmit_data[0] = _altimeter_address;
 80045c0:	23c0      	movs	r3, #192	; 0xc0
 80045c2:	743b      	strb	r3, [r7, #16]
	transmit_data[1] = _altimeter_ctrl_reg_1;
 80045c4:	2326      	movs	r3, #38	; 0x26
 80045c6:	747b      	strb	r3, [r7, #17]
	transmit_data[2] = 0xB9;
 80045c8:	23b9      	movs	r3, #185	; 0xb9
 80045ca:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(_i2c, _altimeter_address, transmit_data, 3, 100);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	f107 0210 	add.w	r2, r7, #16
 80045d4:	2364      	movs	r3, #100	; 0x64
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2303      	movs	r3, #3
 80045da:	21c0      	movs	r1, #192	; 0xc0
 80045dc:	f005 fb02 	bl	8009be4 <HAL_I2C_Master_Transmit>
	while(HAL_I2C_GetState(_i2c) != HAL_I2C_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f005 fe39 	bl	800a25c <HAL_I2C_GetState>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d000      	beq.n	80045fc <_ZN9Altimeter14init_altimeterEv+0x1c4>
 80045fa:	e7f1      	b.n	80045e0 <_ZN9Altimeter14init_altimeterEv+0x1a8>


}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	08017fa4 	.word	0x08017fa4
 8004608:	08017fb8 	.word	0x08017fb8

0800460c <_ZN9Altimeter13read_altitudeEv>:




float Altimeter::read_altitude(void){
 800460c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004610:	b0c6      	sub	sp, #280	; 0x118
 8004612:	af04      	add	r7, sp, #16
 8004614:	6278      	str	r0, [r7, #36]	; 0x24
	 //TRIED TO FOLLOW FLOW-CHART FROM DATASHEET MPL3115A2
	    uint8_t status_reg;
	    uint8_t control_reg;

		// Read STATUS Register
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x00, 1, &status_reg, 1, 100);
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	2364      	movs	r3, #100	; 0x64
 800461c:	9302      	str	r3, [sp, #8]
 800461e:	2301      	movs	r3, #1
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2301      	movs	r3, #1
 800462a:	2200      	movs	r2, #0
 800462c:	21c0      	movs	r1, #192	; 0xc0
 800462e:	f005 fce1 	bl	8009ff4 <HAL_I2C_Mem_Read>

		// Is Data Ready
		while(!(status_reg & 0x08)){
 8004632:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10e      	bne.n	800465c <_ZN9Altimeter13read_altitudeEv+0x50>
			HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x00, 1, &status_reg, 1, 100);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	2364      	movs	r3, #100	; 0x64
 8004644:	9302      	str	r3, [sp, #8]
 8004646:	2301      	movs	r3, #1
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2301      	movs	r3, #1
 8004652:	2200      	movs	r2, #0
 8004654:	21c0      	movs	r1, #192	; 0xc0
 8004656:	f005 fccd 	bl	8009ff4 <HAL_I2C_Mem_Read>
		while(!(status_reg & 0x08)){
 800465a:	e7ea      	b.n	8004632 <_ZN9Altimeter13read_altitudeEv+0x26>
		}

		// Read OUT_P and OUT_T
		// Read pressure data from altimeter
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x01, 1, &_pressure_data[0], 1, 100);
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1dda      	adds	r2, r3, #7
 8004664:	2364      	movs	r3, #100	; 0x64
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	2301      	movs	r3, #1
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	9200      	str	r2, [sp, #0]
 800466e:	2301      	movs	r3, #1
 8004670:	2201      	movs	r2, #1
 8004672:	21c0      	movs	r1, #192	; 0xc0
 8004674:	f005 fcbe 	bl	8009ff4 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x02, 1, &_pressure_data[1], 1, 100);
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f103 0208 	add.w	r2, r3, #8
 8004682:	2364      	movs	r3, #100	; 0x64
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	2301      	movs	r3, #1
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	9200      	str	r2, [sp, #0]
 800468c:	2301      	movs	r3, #1
 800468e:	2202      	movs	r2, #2
 8004690:	21c0      	movs	r1, #192	; 0xc0
 8004692:	f005 fcaf 	bl	8009ff4 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x03, 1, &_pressure_data[2], 1, 100);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	f103 0209 	add.w	r2, r3, #9
 80046a0:	2364      	movs	r3, #100	; 0x64
 80046a2:	9302      	str	r3, [sp, #8]
 80046a4:	2301      	movs	r3, #1
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	9200      	str	r2, [sp, #0]
 80046aa:	2301      	movs	r3, #1
 80046ac:	2203      	movs	r2, #3
 80046ae:	21c0      	movs	r1, #192	; 0xc0
 80046b0:	f005 fca0 	bl	8009ff4 <HAL_I2C_Mem_Read>


		HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT , &control_reg, 1, 100);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	2364      	movs	r3, #100	; 0x64
 80046ba:	9302      	str	r3, [sp, #8]
 80046bc:	2301      	movs	r3, #1
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2301      	movs	r3, #1
 80046c8:	2226      	movs	r2, #38	; 0x26
 80046ca:	21c0      	movs	r1, #192	; 0xc0
 80046cc:	f005 fc92 	bl	8009ff4 <HAL_I2C_Mem_Read>
		printf("Reading from IIC address %d \r\n", control_reg);
 80046d0:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80046d4:	4619      	mov	r1, r3
 80046d6:	48a5      	ldr	r0, [pc, #660]	; (800496c <_ZN9Altimeter13read_altitudeEv+0x360>)
 80046d8:	f011 fb88 	bl	8015dec <iprintf>
		printf("Reading from status register %d \r\n", status_reg);
 80046dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046e0:	4619      	mov	r1, r3
 80046e2:	48a3      	ldr	r0, [pc, #652]	; (8004970 <_ZN9Altimeter13read_altitudeEv+0x364>)
 80046e4:	f011 fb82 	bl	8015dec <iprintf>
	    printf("\r\n");
 80046e8:	48a2      	ldr	r0, [pc, #648]	; (8004974 <_ZN9Altimeter13read_altitudeEv+0x368>)
 80046ea:	f011 fc05 	bl	8015ef8 <puts>

		uint8_t* rawBytes = _pressure_data;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	3307      	adds	r3, #7
 80046f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	    std::string msb_byte = std::bitset<8>(rawBytes[0]).to_string();
 80046f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2200      	movs	r2, #0
 8004700:	461c      	mov	r4, r3
 8004702:	4615      	mov	r5, r2
 8004704:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8004708:	4622      	mov	r2, r4
 800470a:	462b      	mov	r3, r5
 800470c:	4608      	mov	r0, r1
 800470e:	f000 f943 	bl	8004998 <_ZNSt6bitsetILj8EEC1Ey>
 8004712:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8004716:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f000 f950 	bl	80049c2 <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>
	    std::string csb_byte = std::bitset<8>(rawBytes[1]).to_string();
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004726:	3301      	adds	r3, #1
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2200      	movs	r2, #0
 800472e:	4698      	mov	r8, r3
 8004730:	4691      	mov	r9, r2
 8004732:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8004736:	4642      	mov	r2, r8
 8004738:	464b      	mov	r3, r9
 800473a:	4608      	mov	r0, r1
 800473c:	f000 f92c 	bl	8004998 <_ZNSt6bitsetILj8EEC1Ey>
 8004740:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004744:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f939 	bl	80049c2 <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>
	    std::string lsb_byte = std::bitset<8>(rawBytes[2]).to_string();
 8004750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004754:	3302      	adds	r3, #2
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2200      	movs	r2, #0
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	61fa      	str	r2, [r7, #28]
 8004760:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8004764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004768:	4608      	mov	r0, r1
 800476a:	f000 f915 	bl	8004998 <_ZNSt6bitsetILj8EEC1Ey>
 800476e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004772:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f922 	bl	80049c2 <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>

	    uint32_t shifted_msb_byte = uint32_t(rawBytes[0]) << 16;
 800477e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	    uint32_t shifted_csb_byte = uint32_t(rawBytes[1]) << 8;
 800478a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800478e:	3301      	adds	r3, #1
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	    uint32_t shifted_lsb_byte = uint32_t(rawBytes[2]);
 8004798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800479c:	3302      	adds	r3, #2
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	    std::string shifted_msb_byte_str = std::bitset<32>(shifted_msb_byte).to_string();
 80047a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047a8:	2200      	movs	r2, #0
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	617a      	str	r2, [r7, #20]
 80047ae:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80047b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047b6:	4608      	mov	r0, r1
 80047b8:	f000 f911 	bl	80049de <_ZNSt6bitsetILj32EEC1Ey>
 80047bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047c0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f91e 	bl	8004a08 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>
	    std::string shifted_csb_byte_str = std::bitset<32>(shifted_csb_byte).to_string();
 80047cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d0:	2200      	movs	r2, #0
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	60fa      	str	r2, [r7, #12]
 80047d6:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80047da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047de:	4608      	mov	r0, r1
 80047e0:	f000 f8fd 	bl	80049de <_ZNSt6bitsetILj32EEC1Ey>
 80047e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80047e8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80047ec:	4611      	mov	r1, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f90a 	bl	8004a08 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>
	    std::string shifted_lsb_byte_str = std::bitset<32>(shifted_lsb_byte).to_string();
 80047f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047f8:	2200      	movs	r2, #0
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8004802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004806:	4608      	mov	r0, r1
 8004808:	f000 f8e9 	bl	80049de <_ZNSt6bitsetILj32EEC1Ey>
 800480c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004810:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f8f6 	bl	8004a08 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>

		uint32_t pressure_raw = (shifted_msb_byte | shifted_csb_byte | shifted_lsb_byte) >> 4;
 800481c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004824:	431a      	orrs	r2, r3
 8004826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800482a:	4313      	orrs	r3, r2
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	    std::string pressure_raw_str = std::bitset<32>(pressure_raw).to_string();
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	2200      	movs	r2, #0
 8004838:	469a      	mov	sl, r3
 800483a:	4693      	mov	fp, r2
 800483c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8004840:	4652      	mov	r2, sl
 8004842:	465b      	mov	r3, fp
 8004844:	4608      	mov	r0, r1
 8004846:	f000 f8ca 	bl	80049de <_ZNSt6bitsetILj32EEC1Ey>
 800484a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800484e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f8d7 	bl	8004a08 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>



	    printf("MSB byte: %s \r\n", msb_byte.c_str());
 800485a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800485e:	4618      	mov	r0, r3
 8004860:	f010 fce4 	bl	801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004864:	4603      	mov	r3, r0
 8004866:	4619      	mov	r1, r3
 8004868:	4843      	ldr	r0, [pc, #268]	; (8004978 <_ZN9Altimeter13read_altitudeEv+0x36c>)
 800486a:	f011 fabf 	bl	8015dec <iprintf>
	    printf("shifted MSB byte %s \r\n", shifted_msb_byte_str.c_str());
 800486e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004872:	4618      	mov	r0, r3
 8004874:	f010 fcda 	bl	801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004878:	4603      	mov	r3, r0
 800487a:	4619      	mov	r1, r3
 800487c:	483f      	ldr	r0, [pc, #252]	; (800497c <_ZN9Altimeter13read_altitudeEv+0x370>)
 800487e:	f011 fab5 	bl	8015dec <iprintf>
	    printf("CSB byte: %s \r\n", csb_byte.c_str());
 8004882:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004886:	4618      	mov	r0, r3
 8004888:	f010 fcd0 	bl	801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800488c:	4603      	mov	r3, r0
 800488e:	4619      	mov	r1, r3
 8004890:	483b      	ldr	r0, [pc, #236]	; (8004980 <_ZN9Altimeter13read_altitudeEv+0x374>)
 8004892:	f011 faab 	bl	8015dec <iprintf>
	    printf("shifted SB byte %s \r\n", shifted_csb_byte_str.c_str());
 8004896:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800489a:	4618      	mov	r0, r3
 800489c:	f010 fcc6 	bl	801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80048a0:	4603      	mov	r3, r0
 80048a2:	4619      	mov	r1, r3
 80048a4:	4837      	ldr	r0, [pc, #220]	; (8004984 <_ZN9Altimeter13read_altitudeEv+0x378>)
 80048a6:	f011 faa1 	bl	8015dec <iprintf>
	    printf("LSB byte: %s \r\n", lsb_byte.c_str());
 80048aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80048ae:	4618      	mov	r0, r3
 80048b0:	f010 fcbc 	bl	801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4619      	mov	r1, r3
 80048b8:	4833      	ldr	r0, [pc, #204]	; (8004988 <_ZN9Altimeter13read_altitudeEv+0x37c>)
 80048ba:	f011 fa97 	bl	8015dec <iprintf>
	    printf("shifted LSB byte %s \r\n", shifted_lsb_byte_str.c_str());
 80048be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048c2:	4618      	mov	r0, r3
 80048c4:	f010 fcb2 	bl	801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80048c8:	4603      	mov	r3, r0
 80048ca:	4619      	mov	r1, r3
 80048cc:	482f      	ldr	r0, [pc, #188]	; (800498c <_ZN9Altimeter13read_altitudeEv+0x380>)
 80048ce:	f011 fa8d 	bl	8015dec <iprintf>
	    printf("\r\n");
 80048d2:	4828      	ldr	r0, [pc, #160]	; (8004974 <_ZN9Altimeter13read_altitudeEv+0x368>)
 80048d4:	f011 fb10 	bl	8015ef8 <puts>
	    printf("raw_pressure_bits %s \r\n", pressure_raw_str.c_str());
 80048d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048dc:	4618      	mov	r0, r3
 80048de:	f010 fca5 	bl	801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4619      	mov	r1, r3
 80048e6:	482a      	ldr	r0, [pc, #168]	; (8004990 <_ZN9Altimeter13read_altitudeEv+0x384>)
 80048e8:	f011 fa80 	bl	8015dec <iprintf>
	    printf("\r\n");
 80048ec:	4821      	ldr	r0, [pc, #132]	; (8004974 <_ZN9Altimeter13read_altitudeEv+0x368>)
 80048ee:	f011 fb03 	bl	8015ef8 <puts>

	    return pressure_raw/ 64.0;
 80048f2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80048f6:	f7fb fe2d 	bl	8000554 <__aeabi_ui2d>
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <_ZN9Altimeter13read_altitudeEv+0x388>)
 8004900:	f7fb ffcc 	bl	800089c <__aeabi_ddiv>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc f974 	bl	8000bf8 <__aeabi_d2f>
 8004910:	4604      	mov	r4, r0
	    std::string pressure_raw_str = std::bitset<32>(pressure_raw).to_string();
 8004912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004916:	4618      	mov	r0, r3
 8004918:	f010 fc34 	bl	8015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string shifted_lsb_byte_str = std::bitset<32>(shifted_lsb_byte).to_string();
 800491c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004920:	4618      	mov	r0, r3
 8004922:	f010 fc2f 	bl	8015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string shifted_csb_byte_str = std::bitset<32>(shifted_csb_byte).to_string();
 8004926:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800492a:	4618      	mov	r0, r3
 800492c:	f010 fc2a 	bl	8015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string shifted_msb_byte_str = std::bitset<32>(shifted_msb_byte).to_string();
 8004930:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004934:	4618      	mov	r0, r3
 8004936:	f010 fc25 	bl	8015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string lsb_byte = std::bitset<8>(rawBytes[2]).to_string();
 800493a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800493e:	4618      	mov	r0, r3
 8004940:	f010 fc20 	bl	8015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string csb_byte = std::bitset<8>(rawBytes[1]).to_string();
 8004944:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004948:	4618      	mov	r0, r3
 800494a:	f010 fc1b 	bl	8015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    std::string msb_byte = std::bitset<8>(rawBytes[0]).to_string();
 800494e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004952:	4618      	mov	r0, r3
 8004954:	f010 fc16 	bl	8015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    return pressure_raw/ 64.0;
 8004958:	ee07 4a90 	vmov	s15, r4

}
 800495c:	eeb0 0a67 	vmov.f32	s0, s15
 8004960:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004964:	46bd      	mov	sp, r7
 8004966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800496a:	bf00      	nop
 800496c:	08017fb8 	.word	0x08017fb8
 8004970:	08017fd8 	.word	0x08017fd8
 8004974:	08017ffc 	.word	0x08017ffc
 8004978:	08018000 	.word	0x08018000
 800497c:	08018010 	.word	0x08018010
 8004980:	08018028 	.word	0x08018028
 8004984:	08018038 	.word	0x08018038
 8004988:	08018050 	.word	0x08018050
 800498c:	08018060 	.word	0x08018060
 8004990:	08018078 	.word	0x08018078
 8004994:	40500000 	.word	0x40500000

08004998 <_ZNSt6bitsetILj8EEC1Ey>:
      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT
      { }

      /// Initial bits bitwise-copied from a single word (others set to zero).
#if __cplusplus >= 201103L
      constexpr bitset(unsigned long long __val) noexcept
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 80049a4:	68fc      	ldr	r4, [r7, #12]
 80049a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049aa:	f000 f83b 	bl	8004a24 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fcf1 	bl	800439a <_ZNSt12_Base_bitsetILj1EEC1Ey>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}

080049c2 <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>:
	  return to_string<_CharT, std::char_traits<_CharT>,
	                   std::allocator<_CharT> >(__zero, __one);
	}

      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
      {
	return to_string<char, std::char_traits<char>,
	                 std::allocator<char> >();
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6839      	ldr	r1, [r7, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f839 	bl	8004a48 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <_ZNSt6bitsetILj32EEC1Ey>:
      constexpr bitset(unsigned long long __val) noexcept
 80049de:	b590      	push	{r4, r7, lr}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 80049ea:	68fc      	ldr	r4, [r7, #12]
 80049ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049f0:	f000 f83d 	bl	8004a6e <_ZNSt13_Sanitize_valILj32ELb1EE18_S_do_sanitize_valEy>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff fcce 	bl	800439a <_ZNSt12_Base_bitsetILj1EEC1Ey>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd90      	pop	{r4, r7, pc}

08004a08 <_ZNKSt6bitsetILj32EE9to_stringB5cxx11Ev>:
      to_string() const
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
	                 std::allocator<char> >();
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6839      	ldr	r1, [r7, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f83a 	bl	8004a90 <_ZNKSt6bitsetILj32EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 8004a24:	b4b0      	push	{r4, r5, r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8004a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a32:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8004a36:	2500      	movs	r5, #0
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bcb0      	pop	{r4, r5, r7}
 8004a46:	4770      	bx	lr

08004a48 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f010 fb8f 	bl	8015176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 8004a58:	2331      	movs	r3, #49	; 0x31
 8004a5a:	2230      	movs	r2, #48	; 0x30
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	6838      	ldr	r0, [r7, #0]
 8004a60:	f000 f829 	bl	8004ab6 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 8004a64:	bf00      	nop
	}
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_ZNSt13_Sanitize_valILj32ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 8004a6e:	b4b0      	push	{r4, r5, r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8004a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	2500      	movs	r5, #0
 8004a80:	4622      	mov	r2, r4
 8004a82:	462b      	mov	r3, r5
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bcb0      	pop	{r4, r5, r7}
 8004a8e:	4770      	bx	lr

08004a90 <_ZNKSt6bitsetILj32EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f010 fb6b 	bl	8015176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 8004aa0:	2331      	movs	r3, #49	; 0x31
 8004aa2:	2230      	movs	r2, #48	; 0x30
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	6838      	ldr	r0, [r7, #0]
 8004aa8:	f000 f839 	bl	8004b1e <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 8004aac:	bf00      	nop
	}
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      }

  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
      void
      bitset<_Nb>::
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	71fb      	strb	r3, [r7, #7]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71bb      	strb	r3, [r7, #6]
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
			_CharT __zero, _CharT __one) const
      {
	__s.assign(_Nb, __zero);
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2108      	movs	r1, #8
 8004ad2:	68b8      	ldr	r0, [r7, #8]
 8004ad4:	f010 fba0 	bl	8015218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004ad8:	2308      	movs	r3, #8
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d019      	beq.n	8004b16 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x60>
	  if (_Unchecked_test(__i - 1))
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f84c 	bl	8004b86 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x58>
	    _Traits::assign(__s[_Nb - __i], __one);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f1c3 0308 	rsb	r3, r3, #8
 8004afa:	4619      	mov	r1, r3
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f010 fb47 	bl	8015190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004b02:	4602      	mov	r2, r0
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7ff fc37 	bl	800437c <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e7e2      	b.n	8004adc <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x26>
      }
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      bitset<_Nb>::
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	4611      	mov	r1, r2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	71fb      	strb	r3, [r7, #7]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71bb      	strb	r3, [r7, #6]
	__s.assign(_Nb, __zero);
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	461a      	mov	r2, r3
 8004b38:	2120      	movs	r1, #32
 8004b3a:	68b8      	ldr	r0, [r7, #8]
 8004b3c:	f010 fb6c 	bl	8015218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004b40:	2320      	movs	r3, #32
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d019      	beq.n	8004b7e <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x60>
	  if (_Unchecked_test(__i - 1))
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f831 	bl	8004bb8 <_ZNKSt6bitsetILj32EE15_Unchecked_testEj>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00c      	beq.n	8004b76 <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x58>
	    _Traits::assign(__s[_Nb - __i], __one);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f1c3 0320 	rsb	r3, r3, #32
 8004b62:	4619      	mov	r1, r3
 8004b64:	68b8      	ldr	r0, [r7, #8]
 8004b66:	f010 fb13 	bl	8015190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	1dbb      	adds	r3, r7, #6
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7ff fc03 	bl	800437c <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e7e2      	b.n	8004b44 <_ZNKSt6bitsetILj32EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x26>
      }
 8004b7e:	bf00      	nop
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 8004b86:	b590      	push	{r4, r7, lr}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fc2c 	bl	80043f2 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	6838      	ldr	r0, [r7, #0]
 8004b9e:	f7ff fc19 	bl	80043d4 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bf14      	ite	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	2300      	moveq	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd90      	pop	{r4, r7, pc}

08004bb8 <_ZNKSt6bitsetILj32EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fc13 	bl	80043f2 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	6838      	ldr	r0, [r7, #0]
 8004bd0:	f7ff fc00 	bl	80043d4 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd90      	pop	{r4, r7, pc}
	...

08004bec <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b1d      	cmp	r3, #29
 8004bfc:	d80e      	bhi.n	8004c1c <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8004bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c02:	4808      	ldr	r0, [pc, #32]	; (8004c24 <_ZN10Components13Error_HandlerEv+0x38>)
 8004c04:	f004 ff44 	bl	8009a90 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8004c08:	20c8      	movs	r0, #200	; 0xc8
 8004c0a:	f002 f841 	bl	8006c90 <HAL_Delay>
		printf("Components error handler !! \r\n");
 8004c0e:	4806      	ldr	r0, [pc, #24]	; (8004c28 <_ZN10Components13Error_HandlerEv+0x3c>)
 8004c10:	f011 f972 	bl	8015ef8 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	3301      	adds	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
 8004c1a:	e7ed      	b.n	8004bf8 <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	48000800 	.word	0x48000800
 8004c28:	08018090 	.word	0x08018090

08004c2c <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fb09 	bl	800524c <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb42 	bl	80052c4 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fb7b 	bl	800533c <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fbb0 	bl	80053ac <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fbe9 	bl	8005424 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f86a 	bl	8004d2c <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fc19 	bl	8005490 <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fc7e 	bl	8005560 <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fccf 	bl	8005608 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fd1e 	bl	80056ac <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fd6d 	bl	8005750 <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fdae 	bl	80057d8 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f95f 	bl	8004f40 <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fdec 	bl	8005860 <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fe2d 	bl	80058e8 <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa1a 	bl	80050c8 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fe6b 	bl	8005970 <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f005 fef8 	bl	800aa94 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f005 fef3 	bl	800aa94 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f005 feee 	bl	800aa94 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f005 fee9 	bl	800aa94 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f005 fee4 	bl	800aa94 <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f005 ff10 	bl	800aaf6 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f005 ff0b 	bl	800aaf6 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f005 ff06 	bl	800aaf6 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f005 ff01 	bl	800aaf6 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f005 fefc 	bl	800aaf6 <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	217f      	movs	r1, #127	; 0x7f
 8004d04:	4618      	mov	r0, r3
 8004d06:	f003 fac9 	bl	800829c <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	217f      	movs	r1, #127	; 0x7f
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 fac3 	bl	800829c <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	217f      	movs	r1, #127	; 0x7f
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f003 fabd 	bl	800829c <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	; 0x38
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 8004d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 8004d40:	f107 030c 	add.w	r3, r7, #12
 8004d44:	2220      	movs	r2, #32
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f010 fafd 	bl	8015348 <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004d56:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004d60:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	2208      	movs	r2, #8
 8004d88:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	2200      	movs	r2, #0
 8004d90:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	2200      	movs	r2, #0
 8004d98:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 3;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	2203      	movs	r2, #3
 8004da0:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	2200      	movs	r2, #0
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	221c      	movs	r2, #28
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de8:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	2200      	movs	r2, #0
 8004df0:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	2201      	movs	r2, #1
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f002 f9b0 	bl	8007164 <HAL_ADC_Init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fee9 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 8004e1a:	4842      	ldr	r0, [pc, #264]	; (8004f24 <_ZN10Components10init_ADC_1Ev+0x1f8>)
 8004e1c:	f010 ffe6 	bl	8015dec <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f003 fa96 	bl	8008360 <HAL_ADCEx_MultiModeConfigChannel>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fed1 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 8004e4a:	4837      	ldr	r0, [pc, #220]	; (8004f28 <_ZN10Components10init_ADC_1Ev+0x1fc>)
 8004e4c:	f010 ffce 	bl	8015dec <iprintf>

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN


		  //KANAAL VOOR DE SELECTOR POT
		  sConfig.Channel = ADC_CHANNEL_11;
 8004e50:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <_ZN10Components10init_ADC_1Ev+0x200>)
 8004e52:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e54:	2306      	movs	r3, #6
 8004e56:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004e58:	2304      	movs	r3, #4
 8004e5a:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004e5c:	237f      	movs	r3, #127	; 0x7f
 8004e5e:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004e60:	2304      	movs	r3, #4
 8004e62:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f107 020c 	add.w	r2, r7, #12
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 fc2a 	bl	80076cc <HAL_ADC_ConfigChannel>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff feaf 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 8004e8e:	4828      	ldr	r0, [pc, #160]	; (8004f30 <_ZN10Components10init_ADC_1Ev+0x204>)
 8004e90:	f010 ffac 	bl	8015dec <iprintf>
		  }


		  //KANAAL VOOR DE PUSH POT
		  sConfig.Channel = ADC_CHANNEL_14;
 8004e94:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <_ZN10Components10init_ADC_1Ev+0x208>)
 8004e96:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004e98:	2312      	movs	r3, #18
 8004e9a:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004ea0:	237f      	movs	r3, #127	; 0x7f
 8004ea2:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	f107 020c 	add.w	r2, r7, #12
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f002 fc08 	bl	80076cc <HAL_ADC_ConfigChannel>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fe8d 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8004ed2:	4819      	ldr	r0, [pc, #100]	; (8004f38 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004ed4:	f010 ff8a 	bl	8015dec <iprintf>
		  }

		  //KANAAL VOOR DE FLUID POT
		  sConfig.Channel = ADC_CHANNEL_12;
 8004ed8:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <_ZN10Components10init_ADC_1Ev+0x210>)
 8004eda:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004edc:	2318      	movs	r3, #24
 8004ede:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004ee4:	237f      	movs	r3, #127	; 0x7f
 8004ee6:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ee8:	2304      	movs	r3, #4
 8004eea:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	f107 020c 	add.w	r2, r7, #12
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 fbe6 	bl	80076cc <HAL_ADC_ConfigChannel>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <_ZN10Components10init_ADC_1Ev+0x1f0>
		  {
		    this->Error_Handler();
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fe6b 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8004f16:	4808      	ldr	r0, [pc, #32]	; (8004f38 <_ZN10Components10init_ADC_1Ev+0x20c>)
 8004f18:	f010 ff68 	bl	8015dec <iprintf>
		  }


}
 8004f1c:	bf00      	nop
 8004f1e:	3738      	adds	r7, #56	; 0x38
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	080180b0 	.word	0x080180b0
 8004f28:	080180c4 	.word	0x080180c4
 8004f2c:	2e300800 	.word	0x2e300800
 8004f30:	080180f4 	.word	0x080180f4
 8004f34:	3ac04000 	.word	0x3ac04000
 8004f38:	08018118 	.word	0x08018118
 8004f3c:	32601000 	.word	0x32601000

08004f40 <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 8004f48:	f107 0308 	add.w	r3, r7, #8
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f010 f9f9 	bl	8015348 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	4a55      	ldr	r2, [pc, #340]	; (80050b0 <_ZN10Components10init_ADC_2Ev+0x170>)
 8004f5c:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f66:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	2200      	movs	r2, #0
 8004f76:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	2201      	movs	r2, #1
 8004f86:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2218      	movs	r2, #24
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	22e0      	movs	r2, #224	; 0xe0
 8004fec:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005002:	4618      	mov	r0, r3
 8005004:	f002 f8ae 	bl	8007164 <HAL_ADC_Init>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fde7 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 800501e:	4825      	ldr	r0, [pc, #148]	; (80050b4 <_ZN10Components10init_ADC_2Ev+0x174>)
 8005020:	f010 ff6a 	bl	8015ef8 <puts>
	  /** Configure Regular Channel
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <_ZN10Components10init_ADC_2Ev+0x178>)
 8005026:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005028:	2306      	movs	r3, #6
 800502a:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005030:	237f      	movs	r3, #127	; 0x7f
 8005032:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005034:	2304      	movs	r3, #4
 8005036:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005040:	f107 0208 	add.w	r2, r7, #8
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f002 fb40 	bl	80076cc <HAL_ADC_ConfigChannel>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fdc5 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 8005062:	4816      	ldr	r0, [pc, #88]	; (80050bc <_ZN10Components10init_ADC_2Ev+0x17c>)
 8005064:	f010 ff48 	bl	8015ef8 <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <_ZN10Components10init_ADC_2Ev+0x180>)
 800506a:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 800506c:	230c      	movs	r3, #12
 800506e:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005070:	2304      	movs	r3, #4
 8005072:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005074:	237f      	movs	r3, #127	; 0x7f
 8005076:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005078:	2304      	movs	r3, #4
 800507a:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005080:	f107 0208 	add.w	r2, r7, #8
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f002 fb20 	bl	80076cc <HAL_ADC_ConfigChannel>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf14      	ite	ne
 8005092:	2301      	movne	r3, #1
 8005094:	2300      	moveq	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fda5 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 80050a2:	4808      	ldr	r0, [pc, #32]	; (80050c4 <_ZN10Components10init_ADC_2Ev+0x184>)
 80050a4:	f010 ff28 	bl	8015ef8 <puts>

	  }


}
 80050a8:	bf00      	nop
 80050aa:	3728      	adds	r7, #40	; 0x28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	50000100 	.word	0x50000100
 80050b4:	08018144 	.word	0x08018144
 80050b8:	c3290000 	.word	0xc3290000
 80050bc:	08018160 	.word	0x08018160
 80050c0:	cb8c0000 	.word	0xcb8c0000
 80050c4:	08018188 	.word	0x08018188

080050c8 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 80050d0:	f107 0308 	add.w	r3, r7, #8
 80050d4:	2220      	movs	r2, #32
 80050d6:	2100      	movs	r1, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f010 f935 	bl	8015348 <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	4a55      	ldr	r2, [pc, #340]	; (8005238 <_ZN10Components10init_ADC_5Ev+0x170>)
 80050e4:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80050ee:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	2200      	movs	r2, #0
 80050f6:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	2200      	movs	r2, #0
 80050fe:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	2200      	movs	r2, #0
 8005106:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2201      	movs	r2, #1
 800510e:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	2208      	movs	r2, #8
 8005116:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	2200      	movs	r2, #0
 8005126:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	2202      	movs	r2, #2
 800512e:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2200      	movs	r2, #0
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	2200      	movs	r2, #0
 800515a:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	2218      	movs	r2, #24
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	22e0      	movs	r2, #224	; 0xe0
 8005174:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2200      	movs	r2, #0
 800517c:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2201      	movs	r2, #1
 8005184:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4618      	mov	r0, r3
 800518c:	f001 ffea 	bl	8007164 <HAL_ADC_Init>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf14      	ite	ne
 8005196:	2301      	movne	r3, #1
 8005198:	2300      	moveq	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fd23 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 80051a6:	4825      	ldr	r0, [pc, #148]	; (800523c <_ZN10Components10init_ADC_5Ev+0x174>)
 80051a8:	f010 fe20 	bl	8015dec <iprintf>
	  }

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 80051ac:	4b24      	ldr	r3, [pc, #144]	; (8005240 <_ZN10Components10init_ADC_5Ev+0x178>)
 80051ae:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80051b0:	2306      	movs	r3, #6
 80051b2:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80051b8:	237f      	movs	r3, #127	; 0x7f
 80051ba:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80051bc:	2304      	movs	r3, #4
 80051be:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f107 0208 	add.w	r2, r7, #8
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f002 fa7c 	bl	80076cc <HAL_ADC_ConfigChannel>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fd01 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 80051ea:	4816      	ldr	r0, [pc, #88]	; (8005244 <_ZN10Components10init_ADC_5Ev+0x17c>)
 80051ec:	f010 fdfe 	bl	8015dec <iprintf>

	  }

	  //selector motor (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 80051f0:	4b15      	ldr	r3, [pc, #84]	; (8005248 <_ZN10Components10init_ADC_5Ev+0x180>)
 80051f2:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80051f4:	230c      	movs	r3, #12
 80051f6:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80051f8:	2304      	movs	r3, #4
 80051fa:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80051fc:	237f      	movs	r3, #127	; 0x7f
 80051fe:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005200:	2304      	movs	r3, #4
 8005202:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f107 0208 	add.w	r2, r7, #8
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f002 fa5c 	bl	80076cc <HAL_ADC_ConfigChannel>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fce1 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 800522a:	4806      	ldr	r0, [pc, #24]	; (8005244 <_ZN10Components10init_ADC_5Ev+0x17c>)
 800522c:	f010 fdde 	bl	8015dec <iprintf>
	  }




}
 8005230:	bf00      	nop
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	50000600 	.word	0x50000600
 800523c:	080181b0 	.word	0x080181b0
 8005240:	94f00020 	.word	0x94f00020
 8005244:	080181c8 	.word	0x080181c8
 8005248:	8c900008 	.word	0x8c900008

0800524c <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <_ZN10Components11init_COMP_1Ev+0x70>)
 800525a:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2250      	movs	r2, #80	; 0x50
 800526a:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2200      	movs	r2, #0
 8005272:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2200      	movs	r2, #0
 8005282:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f003 fabd 	bl	8008810 <HAL_COMP_Init>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fca0 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 80052ac:	4804      	ldr	r0, [pc, #16]	; (80052c0 <_ZN10Components11init_COMP_1Ev+0x74>)
 80052ae:	f010 fd9d 	bl	8015dec <iprintf>

	  }
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40010200 	.word	0x40010200
 80052c0:	080181ec 	.word	0x080181ec

080052c4 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a18      	ldr	r2, [pc, #96]	; (8005334 <_ZN10Components11init_COMP_2Ev+0x70>)
 80052d2:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2250      	movs	r2, #80	; 0x50
 80052e2:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4618      	mov	r0, r3
 800530a:	f003 fa81 	bl	8008810 <HAL_COMP_Init>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fc64 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 8005324:	4804      	ldr	r0, [pc, #16]	; (8005338 <_ZN10Components11init_COMP_2Ev+0x74>)
 8005326:	f010 fd61 	bl	8015dec <iprintf>
	    }




}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40010204 	.word	0x40010204
 8005338:	08018204 	.word	0x08018204

0800533c <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <_ZN10Components11init_COMP_4Ev+0x68>)
 800534a:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2240      	movs	r2, #64	; 0x40
 800535a:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4618      	mov	r0, r3
 800537a:	f003 fa49 	bl	8008810 <HAL_COMP_Init>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fc2c 	bl	8004bec <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8005394:	4804      	ldr	r0, [pc, #16]	; (80053a8 <_ZN10Components11init_COMP_4Ev+0x6c>)
 8005396:	f010 fd29 	bl	8015dec <iprintf>
    }
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	4001020c 	.word	0x4001020c
 80053a8:	0801821c 	.word	0x0801821c

080053ac <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <_ZN10Components11init_COMP_5Ev+0x70>)
 80053ba:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2240      	movs	r2, #64	; 0x40
 80053ca:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f003 fa0d 	bl	8008810 <HAL_COMP_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fbf0 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 800540c:	4804      	ldr	r0, [pc, #16]	; (8005420 <_ZN10Components11init_COMP_5Ev+0x74>)
 800540e:	f010 fced 	bl	8015dec <iprintf>

	  }

}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40010210 	.word	0x40010210
 8005420:	08018234 	.word	0x08018234

08005424 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <_ZN10Components11init_COMP_7Ev+0x68>)
 8005432:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2200      	movs	r2, #0
 800543a:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2250      	movs	r2, #80	; 0x50
 8005442:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2200      	movs	r2, #0
 800544a:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2200      	movs	r2, #0
 8005452:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2200      	movs	r2, #0
 800545a:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2200      	movs	r2, #0
 8005462:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4618      	mov	r0, r3
 800546a:	f003 f9d1 	bl	8008810 <HAL_COMP_Init>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fbb4 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	   }



}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40010218 	.word	0x40010218

08005490 <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	; 0x38
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8005498:	f107 0308 	add.w	r3, r7, #8
 800549c:	2230      	movs	r2, #48	; 0x30
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f00f ff51 	bl	8015348 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <_ZN10Components10init_DAC_1Ev+0xc8>)
 80054ac:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f003 fc55 	bl	8008d62 <HAL_DAC_Init>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fb8f 	bl	8004bec <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 80054ce:	4823      	ldr	r0, [pc, #140]	; (800555c <_ZN10Components10init_DAC_1Ev+0xcc>)
 80054d0:	f010 fc8c 	bl	8015dec <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80054d4:	2302      	movs	r3, #2
 80054d6:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 80054dc:	2300      	movs	r3, #0
 80054de:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80054ec:	2302      	movs	r3, #2
 80054ee:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80054f0:	2302      	movs	r3, #2
 80054f2:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80054f4:	2300      	movs	r3, #0
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f107 0108 	add.w	r1, r7, #8
 8005500:	2200      	movs	r2, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f003 fc50 	bl	8008da8 <HAL_DAC_ConfigChannel>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fb67 	bl	8004bec <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 800551e:	480f      	ldr	r0, [pc, #60]	; (800555c <_ZN10Components10init_DAC_1Ev+0xcc>)
 8005520:	f010 fc64 	bl	8015dec <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f107 0108 	add.w	r1, r7, #8
 800552c:	2210      	movs	r2, #16
 800552e:	4618      	mov	r0, r3
 8005530:	f003 fc3a 	bl	8008da8 <HAL_DAC_ConfigChannel>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fb51 	bl	8004bec <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 800554a:	4804      	ldr	r0, [pc, #16]	; (800555c <_ZN10Components10init_DAC_1Ev+0xcc>)
 800554c:	f010 fc4e 	bl	8015dec <iprintf>

    }

}
 8005550:	bf00      	nop
 8005552:	3738      	adds	r7, #56	; 0x38
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	50000800 	.word	0x50000800
 800555c:	0801824c 	.word	0x0801824c

08005560 <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 8005560:	b580      	push	{r7, lr}
 8005562:	b08e      	sub	sp, #56	; 0x38
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8005568:	f107 0308 	add.w	r3, r7, #8
 800556c:	2230      	movs	r2, #48	; 0x30
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f00f fee9 	bl	8015348 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	4a20      	ldr	r2, [pc, #128]	; (80055fc <_ZN10Components10init_DAC_2Ev+0x9c>)
 800557c:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	4618      	mov	r0, r3
 8005584:	f003 fbed 	bl	8008d62 <HAL_DAC_Init>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fb27 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 800559e:	4818      	ldr	r0, [pc, #96]	; (8005600 <_ZN10Components10init_DAC_2Ev+0xa0>)
 80055a0:	f010 fc24 	bl	8015dec <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80055a4:	2302      	movs	r3, #2
 80055a6:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80055bc:	2302      	movs	r3, #2
 80055be:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80055c0:	2302      	movs	r3, #2
 80055c2:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80055c4:	2300      	movs	r3, #0
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80055c8:	f107 0308 	add.w	r3, r7, #8
 80055cc:	2200      	movs	r2, #0
 80055ce:	4619      	mov	r1, r3
 80055d0:	480c      	ldr	r0, [pc, #48]	; (8005604 <_ZN10Components10init_DAC_2Ev+0xa4>)
 80055d2:	f003 fbe9 	bl	8008da8 <HAL_DAC_ConfigChannel>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fb00 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 80055ec:	4804      	ldr	r0, [pc, #16]	; (8005600 <_ZN10Components10init_DAC_2Ev+0xa0>)
 80055ee:	f010 fbfd 	bl	8015dec <iprintf>

	  }


}
 80055f2:	bf00      	nop
 80055f4:	3738      	adds	r7, #56	; 0x38
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	50000c00 	.word	0x50000c00
 8005600:	08018264 	.word	0x08018264
 8005604:	200004a4 	.word	0x200004a4

08005608 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 8005608:	b580      	push	{r7, lr}
 800560a:	b08e      	sub	sp, #56	; 0x38
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	2230      	movs	r2, #48	; 0x30
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f00f fe95 	bl	8015348 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <_ZN10Components10init_DAC_3Ev+0x9c>)
 8005624:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4618      	mov	r0, r3
 800562c:	f003 fb99 	bl	8008d62 <HAL_DAC_Init>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf14      	ite	ne
 8005636:	2301      	movne	r3, #1
 8005638:	2300      	moveq	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fad3 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8005646:	4818      	ldr	r0, [pc, #96]	; (80056a8 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8005648:	f010 fbd0 	bl	8015dec <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800564c:	2302      	movs	r3, #2
 800564e:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005650:	2300      	movs	r3, #0
 8005652:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8005664:	2302      	movs	r3, #2
 8005666:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8005668:	2302      	movs	r3, #2
 800566a:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800566c:	2300      	movs	r3, #0
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f107 0108 	add.w	r1, r7, #8
 8005678:	2210      	movs	r2, #16
 800567a:	4618      	mov	r0, r3
 800567c:	f003 fb94 	bl	8008da8 <HAL_DAC_ConfigChannel>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf14      	ite	ne
 8005686:	2301      	movne	r3, #1
 8005688:	2300      	moveq	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff faab 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 8005696:	4804      	ldr	r0, [pc, #16]	; (80056a8 <_ZN10Components10init_DAC_3Ev+0xa0>)
 8005698:	f010 fba8 	bl	8015dec <iprintf>

	  }



}
 800569c:	bf00      	nop
 800569e:	3738      	adds	r7, #56	; 0x38
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	50001000 	.word	0x50001000
 80056a8:	0801827c 	.word	0x0801827c

080056ac <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	; 0x38
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 80056b4:	f107 0308 	add.w	r3, r7, #8
 80056b8:	2230      	movs	r2, #48	; 0x30
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f00f fe43 	bl	8015348 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	4a20      	ldr	r2, [pc, #128]	; (8005748 <_ZN10Components10init_DAC_4Ev+0x9c>)
 80056c8:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f003 fb47 	bl	8008d62 <HAL_DAC_Init>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fa81 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 80056ea:	4818      	ldr	r0, [pc, #96]	; (800574c <_ZN10Components10init_DAC_4Ev+0xa0>)
 80056ec:	f010 fb7e 	bl	8015dec <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80056f0:	2302      	movs	r3, #2
 80056f2:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8005708:	2302      	movs	r3, #2
 800570a:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800570c:	2302      	movs	r3, #2
 800570e:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005710:	2300      	movs	r3, #0
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f107 0108 	add.w	r1, r7, #8
 800571c:	2200      	movs	r2, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f003 fb42 	bl	8008da8 <HAL_DAC_ConfigChannel>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf14      	ite	ne
 800572a:	2301      	movne	r3, #1
 800572c:	2300      	moveq	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fa59 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 800573a:	4804      	ldr	r0, [pc, #16]	; (800574c <_ZN10Components10init_DAC_4Ev+0xa0>)
 800573c:	f010 fb56 	bl	8015dec <iprintf>

	  }


}
 8005740:	bf00      	nop
 8005742:	3738      	adds	r7, #56	; 0x38
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	50001400 	.word	0x50001400
 800574c:	08018294 	.word	0x08018294

08005750 <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <_ZN10Components9init_OA_1Ev+0x80>)
 800575e:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2200      	movs	r2, #0
 8005766:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2200      	movs	r2, #0
 8005776:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2201      	movs	r2, #1
 800577e:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2200      	movs	r2, #0
 8005786:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2200      	movs	r2, #0
 800578e:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	2200      	movs	r2, #0
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2200      	movs	r2, #0
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f005 f8a5 	bl	800a8f4 <HAL_OPAMP_Init>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fa16 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 80057c0:	4804      	ldr	r0, [pc, #16]	; (80057d4 <_ZN10Components9init_OA_1Ev+0x84>)
 80057c2:	f010 fb13 	bl	8015dec <iprintf>
	  }


}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40010300 	.word	0x40010300
 80057d4:	080182ac 	.word	0x080182ac

080057d8 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <_ZN10Components9init_OA_2Ev+0x80>)
 80057e6:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	2200      	movs	r2, #0
 80057ee:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	2240      	movs	r2, #64	; 0x40
 80057f6:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	2200      	movs	r2, #0
 80057fe:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	2201      	movs	r2, #1
 8005806:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	2200      	movs	r2, #0
 8005816:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005820:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	2200      	movs	r2, #0
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	4618      	mov	r0, r3
 8005830:	f005 f860 	bl	800a8f4 <HAL_OPAMP_Init>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff f9d1 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 800584a:	4804      	ldr	r0, [pc, #16]	; (800585c <_ZN10Components9init_OA_2Ev+0x84>)
 800584c:	f010 face 	bl	8015dec <iprintf>

	    }


}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40010304 	.word	0x40010304
 800585c:	080182c4 	.word	0x080182c4

08005860 <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <_ZN10Components9init_OA_3Ev+0x80>)
 800586e:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2240      	movs	r2, #64	; 0x40
 800587e:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	2200      	movs	r2, #0
 8005886:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	2201      	movs	r2, #1
 800588e:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	2200      	movs	r2, #0
 8005896:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	2200      	movs	r2, #0
 800589e:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	2200      	movs	r2, #0
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	2200      	movs	r2, #0
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	4618      	mov	r0, r3
 80058b6:	f005 f81d 	bl	800a8f4 <HAL_OPAMP_Init>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff f98e 	bl	8004bec <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 80058d0:	4804      	ldr	r0, [pc, #16]	; (80058e4 <_ZN10Components9init_OA_3Ev+0x84>)
 80058d2:	f010 fa8b 	bl	8015dec <iprintf>

	   }

}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40010308 	.word	0x40010308
 80058e4:	080182dc 	.word	0x080182dc

080058e8 <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <_ZN10Components9init_OA_4Ev+0x80>)
 80058f6:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	2240      	movs	r2, #64	; 0x40
 8005906:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	2200      	movs	r2, #0
 800590e:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	2201      	movs	r2, #1
 8005916:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	2200      	movs	r2, #0
 800591e:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	2200      	movs	r2, #0
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005930:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	2200      	movs	r2, #0
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	4618      	mov	r0, r3
 8005940:	f004 ffd8 	bl	800a8f4 <HAL_OPAMP_Init>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff f949 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 800595a:	4804      	ldr	r0, [pc, #16]	; (800596c <_ZN10Components9init_OA_4Ev+0x84>)
 800595c:	f010 fa46 	bl	8015dec <iprintf>

	  }
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	4001030c 	.word	0x4001030c
 800596c:	080182f4 	.word	0x080182f4

08005970 <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <_ZN10Components9init_OA_5Ev+0x80>)
 800597e:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	2200      	movs	r2, #0
 8005986:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	2200      	movs	r2, #0
 8005996:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599c:	2201      	movs	r2, #1
 800599e:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a4:	2200      	movs	r2, #0
 80059a6:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	2200      	movs	r2, #0
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80059b8:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	2200      	movs	r2, #0
 80059c0:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	4618      	mov	r0, r3
 80059c8:	f004 ff94 	bl	800a8f4 <HAL_OPAMP_Init>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff f905 	bl	8004bec <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 80059e2:	4804      	ldr	r0, [pc, #16]	; (80059f4 <_ZN10Components9init_OA_5Ev+0x84>)
 80059e4:	f010 fa02 	bl	8015dec <iprintf>

	  }

}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40010310 	.word	0x40010310
 80059f4:	0801830c 	.word	0x0801830c

080059f8 <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

	return &hadc2;
 8005a18:	4b03      	ldr	r3, [pc, #12]	; (8005a28 <_ZN10Components9get_ADC_2Ev+0x18>)
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000678 	.word	0x20000678

08005a2c <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]

	return &hadc5;
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <_ZN10Components9get_ADC_5Ev+0x18>)

}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200006e4 	.word	0x200006e4

08005a48 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9ConvertorP9Altimeter>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, MavlinkControl* mavlink, Convertor *convertor, Altimeter* altimeter){
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]

	this->_sbus = sbus;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	605a      	str	r2, [r3, #4]
	this->_mavlink = mavlink;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]
	this->_altimeter = altimeter;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	60da      	str	r2, [r3, #12]

}
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <main>:
//UART HANDLES IN MAIN FOR NOW, DMA HANDLES are created in stm32g4xx_hal_msp.c file
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


int main(void){
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	f2ad 7dec 	subw	sp, sp, #2028	; 0x7ec
 8005a82:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 8005a84:	f001 f893 	bl	8006bae <HAL_Init>
	//Initialize clock/DMA/... configurations and components.
	HAL_Delay(100);
 8005a88:	2064      	movs	r0, #100	; 0x64
 8005a8a:	f001 f901 	bl	8006c90 <HAL_Delay>
	Initializer init(&huart1, &huart2);
 8005a8e:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8005a92:	4a42      	ldr	r2, [pc, #264]	; (8005b9c <main+0x120>)
 8005a94:	4942      	ldr	r1, [pc, #264]	; (8005ba0 <main+0x124>)
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fb fda2 	bl	80015e0 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8005a9c:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fb fdb9 	bl	8001618 <_ZN11Initializer12init_ConfigsEv>

	Components components;
 8005aa6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8005aaa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8005aae:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <main+0x128>)
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	2344      	movs	r3, #68	; 0x44
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f00f fc1e 	bl	80152f8 <memcpy>
	components.init_Components();
 8005abc:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff f8b3 	bl	8004c2c <_ZN10Components15init_ComponentsEv>

	HAL_Delay(100);
 8005ac6:	2064      	movs	r0, #100	; 0x64
 8005ac8:	f001 f8e2 	bl	8006c90 <HAL_Delay>
	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8005acc:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8005ad0:	4932      	ldr	r1, [pc, #200]	; (8005b9c <main+0x120>)
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fd ffcc 	bl	8003a70 <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	MavlinkControl mavlink(&huart1, init.get_i2c());
 8005ad8:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fc fe67 	bl	80027b0 <_ZN11Initializer7get_i2cEv>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ae8:	492d      	ldr	r1, [pc, #180]	; (8005ba0 <main+0x124>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd fdea 	bl	80036c4 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP19__I2C_HandleTypeDef>

	Convertor convertor(&sbus, &init, &components);
 8005af0:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8005af4:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 8005af8:	f207 5184 	addw	r1, r7, #1412	; 0x584
 8005afc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b00:	f7fb fa4c 	bl	8000f9c <_ZN9ConvertorC1EP4SBUSP11InitializerP10Components>
	Altimeter altimeter(&hi2c2);
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	4927      	ldr	r1, [pc, #156]	; (8005ba8 <main+0x12c>)
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fc7e 	bl	800440c <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>
	Debugger debugger(&sbus, &mavlink, &convertor, &altimeter);
 8005b10:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005b14:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005b18:	f207 5184 	addw	r1, r7, #1412	; 0x584
 8005b1c:	1d38      	adds	r0, r7, #4
 8005b1e:	f107 0314 	add.w	r3, r7, #20
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4623      	mov	r3, r4
 8005b26:	f7ff ff8f 	bl	8005a48 <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9ConvertorP9Altimeter>


	HAL_Delay(5000);
 8005b2a:	f241 3088 	movw	r0, #5000	; 0x1388
 8005b2e:	f001 f8af 	bl	8006c90 <HAL_Delay>

	printf(" sanity check \r \n");
 8005b32:	481e      	ldr	r0, [pc, #120]	; (8005bac <main+0x130>)
 8005b34:	f010 f9e0 	bl	8015ef8 <puts>


    altimeter.init_altimeter();
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fc7b 	bl	8004438 <_ZN9Altimeter14init_altimeterEv>
    uint32_t last_altimeter_tick = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc

	/* Main loop */
	while (1){


		sbus.update();
 8005b48:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fd ffad 	bl	8003aac <_ZN4SBUS6updateEv>
		convertor.process();
 8005b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fb fd25 	bl	80015a6 <_ZN9Convertor7processEv>
		mavlink.update_TX();
 8005b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd fe37 	bl	80037d4 <_ZN14MavlinkControl9update_TXEv>
		mavlink.update_RX();
 8005b66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fd fe20 	bl	80037b0 <_ZN14MavlinkControl9update_RXEv>
		printf("testing %f \r\n", altimeter.read_altitude());
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe fd49 	bl	800460c <_ZN9Altimeter13read_altitudeEv>
 8005b7a:	ee10 3a10 	vmov	r3, s0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fa fd0a 	bl	8000598 <__aeabi_f2d>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4809      	ldr	r0, [pc, #36]	; (8005bb0 <main+0x134>)
 8005b8a:	f010 f92f 	bl	8015dec <iprintf>
		//debugger.displayDebugInfo();
		//debugger.displayMavlink_header();
		//debugger.displaySBUS_channels();
		//debugger.displayMavlink_RAW();

		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 8005b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b92:	4808      	ldr	r0, [pc, #32]	; (8005bb4 <main+0x138>)
 8005b94:	f003 ff7c 	bl	8009a90 <HAL_GPIO_TogglePin>
		sbus.update();
 8005b98:	e7d6      	b.n	8005b48 <main+0xcc>
 8005b9a:	bf00      	nop
 8005b9c:	2000082c 	.word	0x2000082c
 8005ba0:	2000079c 	.word	0x2000079c
 8005ba4:	08018348 	.word	0x08018348
 8005ba8:	20000750 	.word	0x20000750
 8005bac:	08018324 	.word	0x08018324
 8005bb0:	08018338 	.word	0x08018338
 8005bb4:	48000800 	.word	0x48000800

08005bb8 <Error_Handler>:
}




void Error_Handler(void){
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	71fb      	strb	r3, [r7, #7]
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	2b1d      	cmp	r3, #29
 8005bc6:	d80e      	bhi.n	8005be6 <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8005bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bcc:	4808      	ldr	r0, [pc, #32]	; (8005bf0 <Error_Handler+0x38>)
 8005bce:	f003 ff5f 	bl	8009a90 <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 8005bd2:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <Error_Handler+0x3c>)
 8005bd4:	f010 f990 	bl	8015ef8 <puts>
		HAL_Delay(100);
 8005bd8:	2064      	movs	r0, #100	; 0x64
 8005bda:	f001 f859 	bl	8006c90 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	3301      	adds	r3, #1
 8005be2:	71fb      	strb	r3, [r7, #7]
 8005be4:	e7ed      	b.n	8005bc2 <Error_Handler+0xa>
	}

}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	48000800 	.word	0x48000800
 8005bf4:	0801838c 	.word	0x0801838c

08005bf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <HAL_MspInit+0x44>)
 8005c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c02:	4a0e      	ldr	r2, [pc, #56]	; (8005c3c <HAL_MspInit+0x44>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6613      	str	r3, [r2, #96]	; 0x60
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <HAL_MspInit+0x44>)
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	607b      	str	r3, [r7, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <HAL_MspInit+0x44>)
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <HAL_MspInit+0x44>)
 8005c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c20:	6593      	str	r3, [r2, #88]	; 0x58
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_MspInit+0x44>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40021000 	.word	0x40021000

08005c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b0a2      	sub	sp, #136	; 0x88
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	609a      	str	r2, [r3, #8]
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c58:	f107 0320 	add.w	r3, r7, #32
 8005c5c:	2254      	movs	r2, #84	; 0x54
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f00f fb71 	bl	8015348 <memset>
  if(hadc->Instance==ADC1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c6e:	f040 8087 	bne.w	8005d80 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005c78:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005c7c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c7e:	f107 0320 	add.w	r3, r7, #32
 8005c82:	4618      	mov	r0, r3
 8005c84:	f007 fb68 	bl	800d358 <HAL_RCCEx_PeriphCLKConfig>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005c8e:	f7ff ff93 	bl	8005bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005c92:	4b8f      	ldr	r3, [pc, #572]	; (8005ed0 <HAL_ADC_MspInit+0x290>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	4a8d      	ldr	r2, [pc, #564]	; (8005ed0 <HAL_ADC_MspInit+0x290>)
 8005c9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005c9c:	4b8c      	ldr	r3, [pc, #560]	; (8005ed0 <HAL_ADC_MspInit+0x290>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10b      	bne.n	8005cbc <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005ca4:	4b8b      	ldr	r3, [pc, #556]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca8:	4a8a      	ldr	r2, [pc, #552]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005caa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cb0:	4b88      	ldr	r3, [pc, #544]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cbc:	4b85      	ldr	r3, [pc, #532]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc0:	4a84      	ldr	r2, [pc, #528]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cc8:	4b82      	ldr	r3, [pc, #520]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd4:	4b7f      	ldr	r3, [pc, #508]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd8:	4a7e      	ldr	r2, [pc, #504]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005cda:	f043 0302 	orr.w	r3, r3, #2
 8005cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ce0:	4b7c      	ldr	r3, [pc, #496]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8005cec:	2301      	movs	r3, #1
 8005cee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8005cf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d02:	f003 fd2b 	bl	800975c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8005d06:	f641 0302 	movw	r3, #6146	; 0x1802
 8005d0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005d18:	4619      	mov	r1, r3
 8005d1a:	486f      	ldr	r0, [pc, #444]	; (8005ed8 <HAL_ADC_MspInit+0x298>)
 8005d1c:	f003 fd1e 	bl	800975c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8005d20:	4b6e      	ldr	r3, [pc, #440]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d22:	4a6f      	ldr	r2, [pc, #444]	; (8005ee0 <HAL_ADC_MspInit+0x2a0>)
 8005d24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005d26:	4b6d      	ldr	r3, [pc, #436]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d28:	2205      	movs	r2, #5
 8005d2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d2c:	4b6b      	ldr	r3, [pc, #428]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d32:	4b6a      	ldr	r3, [pc, #424]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005d38:	4b68      	ldr	r3, [pc, #416]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d3e:	4b67      	ldr	r3, [pc, #412]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d46:	4b65      	ldr	r3, [pc, #404]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005d4e:	4b63      	ldr	r3, [pc, #396]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d54:	4b61      	ldr	r3, [pc, #388]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d5c:	485f      	ldr	r0, [pc, #380]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d5e:	f003 f9cb 	bl	80090f8 <HAL_DMA_Init>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8005d68:	f7ff ff26 	bl	8005bb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a5b      	ldr	r2, [pc, #364]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
 8005d72:	4a5a      	ldr	r2, [pc, #360]	; (8005edc <HAL_ADC_MspInit+0x29c>)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 8005d78:	485a      	ldr	r0, [pc, #360]	; (8005ee4 <HAL_ADC_MspInit+0x2a4>)
 8005d7a:	f010 f8bd 	bl	8015ef8 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8005d7e:	e0a3      	b.n	8005ec8 <HAL_ADC_MspInit+0x288>
  else if(hadc->Instance==ADC2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a58      	ldr	r2, [pc, #352]	; (8005ee8 <HAL_ADC_MspInit+0x2a8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d151      	bne.n	8005e2e <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005d90:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005d94:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d96:	f107 0320 	add.w	r3, r7, #32
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f007 fadc 	bl	800d358 <HAL_RCCEx_PeriphCLKConfig>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 8005da6:	f7ff ff07 	bl	8005bb8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005daa:	4b49      	ldr	r3, [pc, #292]	; (8005ed0 <HAL_ADC_MspInit+0x290>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3301      	adds	r3, #1
 8005db0:	4a47      	ldr	r2, [pc, #284]	; (8005ed0 <HAL_ADC_MspInit+0x290>)
 8005db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005db4:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <HAL_ADC_MspInit+0x290>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d10b      	bne.n	8005dd4 <HAL_ADC_MspInit+0x194>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005dbc:	4b45      	ldr	r3, [pc, #276]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc0:	4a44      	ldr	r2, [pc, #272]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005dc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dc8:	4b42      	ldr	r3, [pc, #264]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 8005dd4:	4b45      	ldr	r3, [pc, #276]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005dd6:	4a46      	ldr	r2, [pc, #280]	; (8005ef0 <HAL_ADC_MspInit+0x2b0>)
 8005dd8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005dda:	4b44      	ldr	r3, [pc, #272]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005ddc:	2224      	movs	r2, #36	; 0x24
 8005dde:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005de0:	4b42      	ldr	r3, [pc, #264]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005de6:	4b41      	ldr	r3, [pc, #260]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005dec:	4b3f      	ldr	r3, [pc, #252]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005dee:	2280      	movs	r2, #128	; 0x80
 8005df0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005df2:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005df8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005dfa:	4b3c      	ldr	r3, [pc, #240]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e00:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005e02:	4b3a      	ldr	r3, [pc, #232]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e08:	4b38      	ldr	r3, [pc, #224]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005e0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005e10:	4836      	ldr	r0, [pc, #216]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005e12:	f003 f971 	bl	80090f8 <HAL_DMA_Init>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8005e1c:	f7ff fecc 	bl	8005bb8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a32      	ldr	r2, [pc, #200]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
 8005e26:	4a31      	ldr	r2, [pc, #196]	; (8005eec <HAL_ADC_MspInit+0x2ac>)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005e2c:	e04c      	b.n	8005ec8 <HAL_ADC_MspInit+0x288>
  else if(hadc->Instance==ADC5)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a30      	ldr	r2, [pc, #192]	; (8005ef4 <HAL_ADC_MspInit+0x2b4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d147      	bne.n	8005ec8 <HAL_ADC_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8005e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e3c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8005e3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e42:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e44:	f107 0320 	add.w	r3, r7, #32
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f007 fa85 	bl	800d358 <HAL_RCCEx_PeriphCLKConfig>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8005e54:	f7ff feb0 	bl	8005bb8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_ADC_MspInit+0x294>)
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 8005e70:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005e72:	4a22      	ldr	r2, [pc, #136]	; (8005efc <HAL_ADC_MspInit+0x2bc>)
 8005e74:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8005e76:	4b20      	ldr	r3, [pc, #128]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005e78:	2227      	movs	r2, #39	; 0x27
 8005e7a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e82:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8005e88:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e94:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e9c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8005e9e:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ea4:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005eaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8005eac:	4812      	ldr	r0, [pc, #72]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005eae:	f003 f923 	bl	80090f8 <HAL_DMA_Init>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8005eb8:	f7ff fe7e 	bl	8005bb8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54
 8005ec2:	4a0d      	ldr	r2, [pc, #52]	; (8005ef8 <HAL_ADC_MspInit+0x2b8>)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005ec8:	bf00      	nop
 8005eca:	3788      	adds	r7, #136	; 0x88
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000a9c 	.word	0x20000a9c
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	48000400 	.word	0x48000400
 8005edc:	200008bc 	.word	0x200008bc
 8005ee0:	4002001c 	.word	0x4002001c
 8005ee4:	080183b0 	.word	0x080183b0
 8005ee8:	50000100 	.word	0x50000100
 8005eec:	2000091c 	.word	0x2000091c
 8005ef0:	40020030 	.word	0x40020030
 8005ef4:	50000600 	.word	0x50000600
 8005ef8:	2000097c 	.word	0x2000097c
 8005efc:	40020044 	.word	0x40020044

08005f00 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08c      	sub	sp, #48	; 0x30
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f08:	f107 031c 	add.w	r3, r7, #28
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a3d      	ldr	r2, [pc, #244]	; (8006014 <HAL_COMP_MspInit+0x114>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d119      	bne.n	8005f56 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	4b3d      	ldr	r3, [pc, #244]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f26:	4a3c      	ldr	r2, [pc, #240]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f46:	f107 031c 	add.w	r3, r7, #28
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f50:	f003 fc04 	bl	800975c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8005f54:	e05a      	b.n	800600c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a30      	ldr	r2, [pc, #192]	; (800601c <HAL_COMP_MspInit+0x11c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d118      	bne.n	8005f92 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f60:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	4a2c      	ldr	r2, [pc, #176]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005f66:	f043 0302 	orr.w	r3, r3, #2
 8005f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f6c:	4b2a      	ldr	r3, [pc, #168]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 8005f84:	f107 031c 	add.w	r3, r7, #28
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4825      	ldr	r0, [pc, #148]	; (8006020 <HAL_COMP_MspInit+0x120>)
 8005f8c:	f003 fbe6 	bl	800975c <HAL_GPIO_Init>
}
 8005f90:	e03c      	b.n	800600c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a23      	ldr	r2, [pc, #140]	; (8006024 <HAL_COMP_MspInit+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d119      	bne.n	8005fd0 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa0:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005fa2:	f043 0302 	orr.w	r3, r3, #2
 8005fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8005fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 8005fc2:	f107 031c 	add.w	r3, r7, #28
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4815      	ldr	r0, [pc, #84]	; (8006020 <HAL_COMP_MspInit+0x120>)
 8005fca:	f003 fbc7 	bl	800975c <HAL_GPIO_Init>
}
 8005fce:	e01d      	b.n	800600c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a14      	ldr	r2, [pc, #80]	; (8006028 <HAL_COMP_MspInit+0x128>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d118      	bne.n	800600c <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fda:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	4a0e      	ldr	r2, [pc, #56]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <HAL_COMP_MspInit+0x118>)
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8005ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8006000:	f107 031c 	add.w	r3, r7, #28
 8006004:	4619      	mov	r1, r3
 8006006:	4806      	ldr	r0, [pc, #24]	; (8006020 <HAL_COMP_MspInit+0x120>)
 8006008:	f003 fba8 	bl	800975c <HAL_GPIO_Init>
}
 800600c:	bf00      	nop
 800600e:	3730      	adds	r7, #48	; 0x30
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40010204 	.word	0x40010204
 8006018:	40021000 	.word	0x40021000
 800601c:	4001020c 	.word	0x4001020c
 8006020:	48000400 	.word	0x48000400
 8006024:	40010210 	.word	0x40010210
 8006028:	40010218 	.word	0x40010218

0800602c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <HAL_DAC_MspInit+0xa4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d10c      	bne.n	8006058 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800603e:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 8006040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006042:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 8006044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 800604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8006056:	e034      	b.n	80060c2 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <HAL_DAC_MspInit+0xac>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d10c      	bne.n	800607c <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 8006064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 8006068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800606e:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 8006070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	693b      	ldr	r3, [r7, #16]
}
 800607a:	e022      	b.n	80060c2 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a16      	ldr	r2, [pc, #88]	; (80060dc <HAL_DAC_MspInit+0xb0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10c      	bne.n	80060a0 <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 8006088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608a:	4a12      	ldr	r2, [pc, #72]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 800608c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 8006094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
}
 800609e:	e010      	b.n	80060c2 <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <HAL_DAC_MspInit+0xb4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10b      	bne.n	80060c2 <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 80060ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 80060b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <HAL_DAC_MspInit+0xa8>)
 80060b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	50000800 	.word	0x50000800
 80060d4:	40021000 	.word	0x40021000
 80060d8:	50000c00 	.word	0x50000c00
 80060dc:	50001000 	.word	0x50001000
 80060e0:	50001400 	.word	0x50001400

080060e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b09e      	sub	sp, #120	; 0x78
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	605a      	str	r2, [r3, #4]
 80060f6:	609a      	str	r2, [r3, #8]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060fc:	f107 0310 	add.w	r3, r7, #16
 8006100:	2254      	movs	r2, #84	; 0x54
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f00f f91f 	bl	8015348 <memset>
  if(hi2c->Instance==I2C2)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a23      	ldr	r2, [pc, #140]	; (800619c <HAL_I2C_MspInit+0xb8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d13f      	bne.n	8006194 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006118:	2300      	movs	r3, #0
 800611a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800611c:	f107 0310 	add.w	r3, r7, #16
 8006120:	4618      	mov	r0, r3
 8006122:	f007 f919 	bl	800d358 <HAL_RCCEx_PeriphCLKConfig>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800612c:	f7ff fd44 	bl	8005bb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <HAL_I2C_MspInit+0xbc>)
 8006132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006134:	4a1a      	ldr	r2, [pc, #104]	; (80061a0 <HAL_I2C_MspInit+0xbc>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800613c:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <HAL_I2C_MspInit+0xbc>)
 800613e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800614c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800614e:	2312      	movs	r3, #18
 8006150:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006156:	2300      	movs	r3, #0
 8006158:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800615a:	2304      	movs	r3, #4
 800615c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800615e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006162:	4619      	mov	r1, r3
 8006164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006168:	f003 faf8 	bl	800975c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <HAL_I2C_MspInit+0xbc>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	4a0b      	ldr	r2, [pc, #44]	; (80061a0 <HAL_I2C_MspInit+0xbc>)
 8006172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006176:	6593      	str	r3, [r2, #88]	; 0x58
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <HAL_I2C_MspInit+0xbc>)
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8006184:	2200      	movs	r2, #0
 8006186:	2100      	movs	r1, #0
 8006188:	2021      	movs	r0, #33	; 0x21
 800618a:	f002 fdb6 	bl	8008cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800618e:	2021      	movs	r0, #33	; 0x21
 8006190:	f002 fdcd 	bl	8008d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006194:	bf00      	nop
 8006196:	3778      	adds	r7, #120	; 0x78
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40005800 	.word	0x40005800
 80061a0:	40021000 	.word	0x40021000

080061a4 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08c      	sub	sp, #48	; 0x30
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ac:	f107 031c 	add.w	r3, r7, #28
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a4d      	ldr	r2, [pc, #308]	; (80062f8 <HAL_OPAMP_MspInit+0x154>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d119      	bne.n	80061fa <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c6:	4b4d      	ldr	r3, [pc, #308]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 80061c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ca:	4a4c      	ldr	r2, [pc, #304]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061d2:	4b4a      	ldr	r3, [pc, #296]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 80061de:	230a      	movs	r3, #10
 80061e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061e2:	2303      	movs	r3, #3
 80061e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ea:	f107 031c 	add.w	r3, r7, #28
 80061ee:	4619      	mov	r1, r3
 80061f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061f4:	f003 fab2 	bl	800975c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 80061f8:	e079      	b.n	80062ee <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a40      	ldr	r2, [pc, #256]	; (8006300 <HAL_OPAMP_MspInit+0x15c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d119      	bne.n	8006238 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006204:	4b3d      	ldr	r3, [pc, #244]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 8006206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006208:	4a3c      	ldr	r2, [pc, #240]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006210:	4b3a      	ldr	r3, [pc, #232]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 8006212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800621c:	23a0      	movs	r3, #160	; 0xa0
 800621e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006220:	2303      	movs	r3, #3
 8006222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006224:	2300      	movs	r3, #0
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006228:	f107 031c 	add.w	r3, r7, #28
 800622c:	4619      	mov	r1, r3
 800622e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006232:	f003 fa93 	bl	800975c <HAL_GPIO_Init>
}
 8006236:	e05a      	b.n	80062ee <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a31      	ldr	r2, [pc, #196]	; (8006304 <HAL_OPAMP_MspInit+0x160>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d118      	bne.n	8006274 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006242:	4b2e      	ldr	r3, [pc, #184]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	4a2d      	ldr	r2, [pc, #180]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800624e:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 8006250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 800625a:	2305      	movs	r3, #5
 800625c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800625e:	2303      	movs	r3, #3
 8006260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006262:	2300      	movs	r3, #0
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006266:	f107 031c 	add.w	r3, r7, #28
 800626a:	4619      	mov	r1, r3
 800626c:	4826      	ldr	r0, [pc, #152]	; (8006308 <HAL_OPAMP_MspInit+0x164>)
 800626e:	f003 fa75 	bl	800975c <HAL_GPIO_Init>
}
 8006272:	e03c      	b.n	80062ee <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a24      	ldr	r2, [pc, #144]	; (800630c <HAL_OPAMP_MspInit+0x168>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d119      	bne.n	80062b2 <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800627e:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 8006280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006282:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800628a:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 800628c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8006296:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800629a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800629c:	2303      	movs	r3, #3
 800629e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a4:	f107 031c 	add.w	r3, r7, #28
 80062a8:	4619      	mov	r1, r3
 80062aa:	4817      	ldr	r0, [pc, #92]	; (8006308 <HAL_OPAMP_MspInit+0x164>)
 80062ac:	f003 fa56 	bl	800975c <HAL_GPIO_Init>
}
 80062b0:	e01d      	b.n	80062ee <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a16      	ldr	r2, [pc, #88]	; (8006310 <HAL_OPAMP_MspInit+0x16c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d118      	bne.n	80062ee <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 80062be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c0:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 80062c2:	f043 0302 	orr.w	r3, r3, #2
 80062c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062c8:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <HAL_OPAMP_MspInit+0x158>)
 80062ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 80062d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80062d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062da:	2303      	movs	r3, #3
 80062dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062e2:	f107 031c 	add.w	r3, r7, #28
 80062e6:	4619      	mov	r1, r3
 80062e8:	4807      	ldr	r0, [pc, #28]	; (8006308 <HAL_OPAMP_MspInit+0x164>)
 80062ea:	f003 fa37 	bl	800975c <HAL_GPIO_Init>
}
 80062ee:	bf00      	nop
 80062f0:	3730      	adds	r7, #48	; 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40010300 	.word	0x40010300
 80062fc:	40021000 	.word	0x40021000
 8006300:	40010304 	.word	0x40010304
 8006304:	40010308 	.word	0x40010308
 8006308:	48000400 	.word	0x48000400
 800630c:	4001030c 	.word	0x4001030c
 8006310:	40010310 	.word	0x40010310

08006314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006314:	b480      	push	{r7}
 8006316:	b089      	sub	sp, #36	; 0x24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a37      	ldr	r2, [pc, #220]	; (8006400 <HAL_TIM_Base_MspInit+0xec>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10c      	bne.n	8006340 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006326:	4b37      	ldr	r3, [pc, #220]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632a:	4a36      	ldr	r2, [pc, #216]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 800632c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006330:	6613      	str	r3, [r2, #96]	; 0x60
 8006332:	4b34      	ldr	r3, [pc, #208]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 800633e:	e058      	b.n	80063f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d10c      	bne.n	8006364 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800634a:	4b2e      	ldr	r3, [pc, #184]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	4a2d      	ldr	r2, [pc, #180]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6593      	str	r3, [r2, #88]	; 0x58
 8006356:	4b2b      	ldr	r3, [pc, #172]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	69bb      	ldr	r3, [r7, #24]
}
 8006362:	e046      	b.n	80063f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a27      	ldr	r2, [pc, #156]	; (8006408 <HAL_TIM_Base_MspInit+0xf4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d10c      	bne.n	8006388 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800636e:	4b25      	ldr	r3, [pc, #148]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	4a24      	ldr	r2, [pc, #144]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006374:	f043 0304 	orr.w	r3, r3, #4
 8006378:	6593      	str	r3, [r2, #88]	; 0x58
 800637a:	4b22      	ldr	r3, [pc, #136]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	697b      	ldr	r3, [r7, #20]
}
 8006386:	e034      	b.n	80063f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <HAL_TIM_Base_MspInit+0xf8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10c      	bne.n	80063ac <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 8006398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800639c:	6613      	str	r3, [r2, #96]	; 0x60
 800639e:	4b19      	ldr	r3, [pc, #100]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 80063a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	693b      	ldr	r3, [r7, #16]
}
 80063aa:	e022      	b.n	80063f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a17      	ldr	r2, [pc, #92]	; (8006410 <HAL_TIM_Base_MspInit+0xfc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d10c      	bne.n	80063d0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80063b6:	4b13      	ldr	r3, [pc, #76]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 80063b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ba:	4a12      	ldr	r2, [pc, #72]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c0:	6613      	str	r3, [r2, #96]	; 0x60
 80063c2:	4b10      	ldr	r3, [pc, #64]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 80063c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	e010      	b.n	80063f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0f      	ldr	r2, [pc, #60]	; (8006414 <HAL_TIM_Base_MspInit+0x100>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d10b      	bne.n	80063f2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80063da:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 80063dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 80063e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e4:	6613      	str	r3, [r2, #96]	; 0x60
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <HAL_TIM_Base_MspInit+0xf0>)
 80063e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ee:	60bb      	str	r3, [r7, #8]
 80063f0:	68bb      	ldr	r3, [r7, #8]
}
 80063f2:	bf00      	nop
 80063f4:	3724      	adds	r7, #36	; 0x24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40021000 	.word	0x40021000
 8006408:	40000800 	.word	0x40000800
 800640c:	40013400 	.word	0x40013400
 8006410:	40014400 	.word	0x40014400
 8006414:	40015000 	.word	0x40015000

08006418 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <HAL_TIM_PWM_MspInit+0x38>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d10b      	bne.n	8006442 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800642a:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <HAL_TIM_PWM_MspInit+0x3c>)
 800642c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642e:	4a09      	ldr	r2, [pc, #36]	; (8006454 <HAL_TIM_PWM_MspInit+0x3c>)
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	6593      	str	r3, [r2, #88]	; 0x58
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <HAL_TIM_PWM_MspInit+0x3c>)
 8006438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40000400 	.word	0x40000400
 8006454:	40021000 	.word	0x40021000

08006458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08e      	sub	sp, #56	; 0x38
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	609a      	str	r2, [r3, #8]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a65      	ldr	r2, [pc, #404]	; (800660c <HAL_TIM_MspPostInit+0x1b4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d11c      	bne.n	80064b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800647a:	4b65      	ldr	r3, [pc, #404]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 800647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647e:	4a64      	ldr	r2, [pc, #400]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006480:	f043 0320 	orr.w	r3, r3, #32
 8006484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006486:	4b62      	ldr	r3, [pc, #392]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 8006492:	2301      	movs	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006496:	2302      	movs	r3, #2
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649a:	2300      	movs	r3, #0
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800649e:	2300      	movs	r3, #0
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80064a2:	2306      	movs	r3, #6
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 80064a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064aa:	4619      	mov	r1, r3
 80064ac:	4859      	ldr	r0, [pc, #356]	; (8006614 <HAL_TIM_MspPostInit+0x1bc>)
 80064ae:	f003 f955 	bl	800975c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80064b2:	e0a6      	b.n	8006602 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a57      	ldr	r2, [pc, #348]	; (8006618 <HAL_TIM_MspPostInit+0x1c0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d11c      	bne.n	80064f8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064be:	4b54      	ldr	r3, [pc, #336]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	4a53      	ldr	r2, [pc, #332]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 80064c4:	f043 0302 	orr.w	r3, r3, #2
 80064c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064ca:	4b51      	ldr	r3, [pc, #324]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 80064d6:	2330      	movs	r3, #48	; 0x30
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064da:	2302      	movs	r3, #2
 80064dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e2:	2300      	movs	r3, #0
 80064e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80064e6:	2302      	movs	r3, #2
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ee:	4619      	mov	r1, r3
 80064f0:	484a      	ldr	r0, [pc, #296]	; (800661c <HAL_TIM_MspPostInit+0x1c4>)
 80064f2:	f003 f933 	bl	800975c <HAL_GPIO_Init>
}
 80064f6:	e084      	b.n	8006602 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a48      	ldr	r2, [pc, #288]	; (8006620 <HAL_TIM_MspPostInit+0x1c8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d11d      	bne.n	800653e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006502:	4b43      	ldr	r3, [pc, #268]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006506:	4a42      	ldr	r2, [pc, #264]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006508:	f043 0302 	orr.w	r3, r3, #2
 800650c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800650e:	4b40      	ldr	r3, [pc, #256]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 800651a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006520:	2302      	movs	r3, #2
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006524:	2300      	movs	r3, #0
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006528:	2300      	movs	r3, #0
 800652a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800652c:	2302      	movs	r3, #2
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006534:	4619      	mov	r1, r3
 8006536:	4839      	ldr	r0, [pc, #228]	; (800661c <HAL_TIM_MspPostInit+0x1c4>)
 8006538:	f003 f910 	bl	800975c <HAL_GPIO_Init>
}
 800653c:	e061      	b.n	8006602 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a38      	ldr	r2, [pc, #224]	; (8006624 <HAL_TIM_MspPostInit+0x1cc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d13a      	bne.n	80065be <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006548:	4b31      	ldr	r3, [pc, #196]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 800654a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654c:	4a30      	ldr	r2, [pc, #192]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 800654e:	f043 0304 	orr.w	r3, r3, #4
 8006552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006554:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006560:	4b2b      	ldr	r3, [pc, #172]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006564:	4a2a      	ldr	r2, [pc, #168]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 8006566:	f043 0302 	orr.w	r3, r3, #2
 800656a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800656c:	4b28      	ldr	r3, [pc, #160]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 800656e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 8006578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657e:	2302      	movs	r3, #2
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006582:	2300      	movs	r3, #0
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006586:	2300      	movs	r3, #0
 8006588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 800658a:	2306      	movs	r3, #6
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 800658e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006592:	4619      	mov	r1, r3
 8006594:	4824      	ldr	r0, [pc, #144]	; (8006628 <HAL_TIM_MspPostInit+0x1d0>)
 8006596:	f003 f8e1 	bl	800975c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 800659a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a0:	2302      	movs	r3, #2
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a8:	2300      	movs	r3, #0
 80065aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80065ac:	230a      	movs	r3, #10
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 80065b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b4:	4619      	mov	r1, r3
 80065b6:	4819      	ldr	r0, [pc, #100]	; (800661c <HAL_TIM_MspPostInit+0x1c4>)
 80065b8:	f003 f8d0 	bl	800975c <HAL_GPIO_Init>
}
 80065bc:	e021      	b.n	8006602 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1a      	ldr	r2, [pc, #104]	; (800662c <HAL_TIM_MspPostInit+0x1d4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d11c      	bne.n	8006602 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c8:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 80065ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065cc:	4a10      	ldr	r2, [pc, #64]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <HAL_TIM_MspPostInit+0x1b8>)
 80065d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e4:	2302      	movs	r3, #2
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ec:	2300      	movs	r3, #0
 80065ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80065f0:	2301      	movs	r3, #1
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 80065f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065f8:	4619      	mov	r1, r3
 80065fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065fe:	f003 f8ad 	bl	800975c <HAL_GPIO_Init>
}
 8006602:	bf00      	nop
 8006604:	3738      	adds	r7, #56	; 0x38
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40021000 	.word	0x40021000
 8006614:	48001400 	.word	0x48001400
 8006618:	40000400 	.word	0x40000400
 800661c:	48000400 	.word	0x48000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40013400 	.word	0x40013400
 8006628:	48000800 	.word	0x48000800
 800662c:	40014400 	.word	0x40014400

08006630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b0a2      	sub	sp, #136	; 0x88
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006638:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	609a      	str	r2, [r3, #8]
 8006644:	60da      	str	r2, [r3, #12]
 8006646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006648:	f107 0320 	add.w	r3, r7, #32
 800664c:	2254      	movs	r2, #84	; 0x54
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f00e fe79 	bl	8015348 <memset>
  if(huart->Instance==USART1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a82      	ldr	r2, [pc, #520]	; (8006864 <HAL_UART_MspInit+0x234>)
 800665c:	4293      	cmp	r3, r2
 800665e:	f040 808b 	bne.w	8006778 <HAL_UART_MspInit+0x148>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006662:	2301      	movs	r3, #1
 8006664:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006666:	2300      	movs	r3, #0
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800666a:	f107 0320 	add.w	r3, r7, #32
 800666e:	4618      	mov	r0, r3
 8006670:	f006 fe72 	bl	800d358 <HAL_RCCEx_PeriphCLKConfig>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800667a:	f7ff fa9d 	bl	8005bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800667e:	4b7a      	ldr	r3, [pc, #488]	; (8006868 <HAL_UART_MspInit+0x238>)
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	4a79      	ldr	r2, [pc, #484]	; (8006868 <HAL_UART_MspInit+0x238>)
 8006684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006688:	6613      	str	r3, [r2, #96]	; 0x60
 800668a:	4b77      	ldr	r3, [pc, #476]	; (8006868 <HAL_UART_MspInit+0x238>)
 800668c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006696:	4b74      	ldr	r3, [pc, #464]	; (8006868 <HAL_UART_MspInit+0x238>)
 8006698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669a:	4a73      	ldr	r2, [pc, #460]	; (8006868 <HAL_UART_MspInit+0x238>)
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066a2:	4b71      	ldr	r3, [pc, #452]	; (8006868 <HAL_UART_MspInit+0x238>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ae:	4b6e      	ldr	r3, [pc, #440]	; (8006868 <HAL_UART_MspInit+0x238>)
 80066b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b2:	4a6d      	ldr	r2, [pc, #436]	; (8006868 <HAL_UART_MspInit+0x238>)
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ba:	4b6b      	ldr	r3, [pc, #428]	; (8006868 <HAL_UART_MspInit+0x238>)
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80066c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066cc:	2302      	movs	r3, #2
 80066ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d4:	2300      	movs	r3, #0
 80066d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80066da:	2307      	movs	r3, #7
 80066dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80066e4:	4619      	mov	r1, r3
 80066e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066ea:	f003 f837 	bl	800975c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80066ee:	2340      	movs	r3, #64	; 0x40
 80066f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f2:	2302      	movs	r3, #2
 80066f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006700:	2307      	movs	r3, #7
 8006702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006706:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800670a:	4619      	mov	r1, r3
 800670c:	4857      	ldr	r0, [pc, #348]	; (800686c <HAL_UART_MspInit+0x23c>)
 800670e:	f003 f825 	bl	800975c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8006712:	4b57      	ldr	r3, [pc, #348]	; (8006870 <HAL_UART_MspInit+0x240>)
 8006714:	4a57      	ldr	r2, [pc, #348]	; (8006874 <HAL_UART_MspInit+0x244>)
 8006716:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006718:	4b55      	ldr	r3, [pc, #340]	; (8006870 <HAL_UART_MspInit+0x240>)
 800671a:	2218      	movs	r2, #24
 800671c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800671e:	4b54      	ldr	r3, [pc, #336]	; (8006870 <HAL_UART_MspInit+0x240>)
 8006720:	2200      	movs	r2, #0
 8006722:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006724:	4b52      	ldr	r3, [pc, #328]	; (8006870 <HAL_UART_MspInit+0x240>)
 8006726:	2200      	movs	r2, #0
 8006728:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800672a:	4b51      	ldr	r3, [pc, #324]	; (8006870 <HAL_UART_MspInit+0x240>)
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006730:	4b4f      	ldr	r3, [pc, #316]	; (8006870 <HAL_UART_MspInit+0x240>)
 8006732:	2200      	movs	r2, #0
 8006734:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006736:	4b4e      	ldr	r3, [pc, #312]	; (8006870 <HAL_UART_MspInit+0x240>)
 8006738:	2200      	movs	r2, #0
 800673a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800673c:	4b4c      	ldr	r3, [pc, #304]	; (8006870 <HAL_UART_MspInit+0x240>)
 800673e:	2200      	movs	r2, #0
 8006740:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006742:	4b4b      	ldr	r3, [pc, #300]	; (8006870 <HAL_UART_MspInit+0x240>)
 8006744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800674a:	4849      	ldr	r0, [pc, #292]	; (8006870 <HAL_UART_MspInit+0x240>)
 800674c:	f002 fcd4 	bl	80090f8 <HAL_DMA_Init>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8006756:	f7ff fa2f 	bl	8005bb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a44      	ldr	r2, [pc, #272]	; (8006870 <HAL_UART_MspInit+0x240>)
 800675e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006760:	4a43      	ldr	r2, [pc, #268]	; (8006870 <HAL_UART_MspInit+0x240>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006766:	2200      	movs	r2, #0
 8006768:	2100      	movs	r1, #0
 800676a:	2025      	movs	r0, #37	; 0x25
 800676c:	f002 fac5 	bl	8008cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006770:	2025      	movs	r0, #37	; 0x25
 8006772:	f002 fadc 	bl	8008d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006776:	e070      	b.n	800685a <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a3e      	ldr	r2, [pc, #248]	; (8006878 <HAL_UART_MspInit+0x248>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d16b      	bne.n	800685a <HAL_UART_MspInit+0x22a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006782:	2302      	movs	r3, #2
 8006784:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006786:	2300      	movs	r3, #0
 8006788:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800678a:	f107 0320 	add.w	r3, r7, #32
 800678e:	4618      	mov	r0, r3
 8006790:	f006 fde2 	bl	800d358 <HAL_RCCEx_PeriphCLKConfig>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_UART_MspInit+0x16e>
      Error_Handler();
 800679a:	f7ff fa0d 	bl	8005bb8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800679e:	4b32      	ldr	r3, [pc, #200]	; (8006868 <HAL_UART_MspInit+0x238>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a2:	4a31      	ldr	r2, [pc, #196]	; (8006868 <HAL_UART_MspInit+0x238>)
 80067a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a8:	6593      	str	r3, [r2, #88]	; 0x58
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <HAL_UART_MspInit+0x238>)
 80067ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067b6:	4b2c      	ldr	r3, [pc, #176]	; (8006868 <HAL_UART_MspInit+0x238>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	4a2b      	ldr	r2, [pc, #172]	; (8006868 <HAL_UART_MspInit+0x238>)
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067c2:	4b29      	ldr	r3, [pc, #164]	; (8006868 <HAL_UART_MspInit+0x238>)
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80067ce:	f248 0304 	movw	r3, #32772	; 0x8004
 80067d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d4:	2302      	movs	r3, #2
 80067d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80067e2:	2307      	movs	r3, #7
 80067e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80067ec:	4619      	mov	r1, r3
 80067ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067f2:	f002 ffb3 	bl	800975c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <HAL_UART_MspInit+0x24c>)
 80067f8:	4a21      	ldr	r2, [pc, #132]	; (8006880 <HAL_UART_MspInit+0x250>)
 80067fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80067fc:	4b1f      	ldr	r3, [pc, #124]	; (800687c <HAL_UART_MspInit+0x24c>)
 80067fe:	221a      	movs	r2, #26
 8006800:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006802:	4b1e      	ldr	r3, [pc, #120]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006804:	2200      	movs	r2, #0
 8006806:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006808:	4b1c      	ldr	r3, [pc, #112]	; (800687c <HAL_UART_MspInit+0x24c>)
 800680a:	2200      	movs	r2, #0
 800680c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800680e:	4b1b      	ldr	r3, [pc, #108]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006810:	2280      	movs	r2, #128	; 0x80
 8006812:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006814:	4b19      	ldr	r3, [pc, #100]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006816:	2200      	movs	r2, #0
 8006818:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800681a:	4b18      	ldr	r3, [pc, #96]	; (800687c <HAL_UART_MspInit+0x24c>)
 800681c:	2200      	movs	r2, #0
 800681e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006820:	4b16      	ldr	r3, [pc, #88]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006822:	2200      	movs	r2, #0
 8006824:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800682c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800682e:	4813      	ldr	r0, [pc, #76]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006830:	f002 fc62 	bl	80090f8 <HAL_DMA_Init>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_UART_MspInit+0x20e>
      Error_Handler();
 800683a:	f7ff f9bd 	bl	8005bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a0e      	ldr	r2, [pc, #56]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006842:	67da      	str	r2, [r3, #124]	; 0x7c
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <HAL_UART_MspInit+0x24c>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800684a:	2200      	movs	r2, #0
 800684c:	2100      	movs	r1, #0
 800684e:	2026      	movs	r0, #38	; 0x26
 8006850:	f002 fa53 	bl	8008cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006854:	2026      	movs	r0, #38	; 0x26
 8006856:	f002 fa6a 	bl	8008d2e <HAL_NVIC_EnableIRQ>
}
 800685a:	bf00      	nop
 800685c:	3788      	adds	r7, #136	; 0x88
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40013800 	.word	0x40013800
 8006868:	40021000 	.word	0x40021000
 800686c:	48000400 	.word	0x48000400
 8006870:	200009dc 	.word	0x200009dc
 8006874:	40020008 	.word	0x40020008
 8006878:	40004400 	.word	0x40004400
 800687c:	20000a3c 	.word	0x20000a3c
 8006880:	40020408 	.word	0x40020408

08006884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006888:	e7fe      	b.n	8006888 <NMI_Handler+0x4>

0800688a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800688a:	b480      	push	{r7}
 800688c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800688e:	e7fe      	b.n	800688e <HardFault_Handler+0x4>

08006890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006894:	e7fe      	b.n	8006894 <MemManage_Handler+0x4>

08006896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006896:	b480      	push	{r7}
 8006898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800689a:	e7fe      	b.n	800689a <BusFault_Handler+0x4>

0800689c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068a0:	e7fe      	b.n	80068a0 <UsageFault_Handler+0x4>

080068a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068a2:	b480      	push	{r7}
 80068a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068be:	b480      	push	{r7}
 80068c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068c2:	bf00      	nop
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068d0:	f000 f9c0 	bl	8006c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068d4:	bf00      	nop
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80068dc:	4802      	ldr	r0, [pc, #8]	; (80068e8 <DMA1_Channel1_IRQHandler+0x10>)
 80068de:	f002 fdee 	bl	80094be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80068e2:	bf00      	nop
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200009dc 	.word	0x200009dc

080068ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80068f0:	4802      	ldr	r0, [pc, #8]	; (80068fc <DMA1_Channel2_IRQHandler+0x10>)
 80068f2:	f002 fde4 	bl	80094be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80068f6:	bf00      	nop
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	200008bc 	.word	0x200008bc

08006900 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006904:	4802      	ldr	r0, [pc, #8]	; (8006910 <DMA1_Channel3_IRQHandler+0x10>)
 8006906:	f002 fdda 	bl	80094be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800690a:	bf00      	nop
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	2000091c 	.word	0x2000091c

08006914 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8006918:	4802      	ldr	r0, [pc, #8]	; (8006924 <DMA1_Channel4_IRQHandler+0x10>)
 800691a:	f002 fdd0 	bl	80094be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800691e:	bf00      	nop
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	2000097c 	.word	0x2000097c

08006928 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800692c:	4802      	ldr	r0, [pc, #8]	; (8006938 <USB_LP_IRQHandler+0x10>)
 800692e:	f004 fb0e 	bl	800af4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20001fc0 	.word	0x20001fc0

0800693c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006940:	4802      	ldr	r0, [pc, #8]	; (800694c <I2C2_EV_IRQHandler+0x10>)
 8006942:	f003 fc71 	bl	800a228 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8006946:	bf00      	nop
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000750 	.word	0x20000750

08006950 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006954:	4802      	ldr	r0, [pc, #8]	; (8006960 <USART1_IRQHandler+0x10>)
 8006956:	f008 fae1 	bl	800ef1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800695a:	bf00      	nop
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2000079c 	.word	0x2000079c

08006964 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006968:	4802      	ldr	r0, [pc, #8]	; (8006974 <USART2_IRQHandler+0x10>)
 800696a:	f008 fad7 	bl	800ef1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	2000082c 	.word	0x2000082c

08006978 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800697c:	4802      	ldr	r0, [pc, #8]	; (8006988 <DMA2_Channel1_IRQHandler+0x10>)
 800697e:	f002 fd9e 	bl	80094be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000a3c 	.word	0x20000a3c

0800698c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  return 1;
 8006990:	2301      	movs	r3, #1
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_kill>:

int _kill(int pid, int sig)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80069a6:	f00e fc6d 	bl	8015284 <__errno>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2216      	movs	r2, #22
 80069ae:	601a      	str	r2, [r3, #0]
  return -1;
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_exit>:

void _exit (int status)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80069c4:	f04f 31ff 	mov.w	r1, #4294967295
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ffe7 	bl	800699c <_kill>
  while (1) {}    /* Make sure we hang here */
 80069ce:	e7fe      	b.n	80069ce <_exit+0x12>

080069d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e00a      	b.n	80069f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80069e2:	f3af 8000 	nop.w
 80069e6:	4601      	mov	r1, r0
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	60ba      	str	r2, [r7, #8]
 80069ee:	b2ca      	uxtb	r2, r1
 80069f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	3301      	adds	r3, #1
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	dbf0      	blt.n	80069e2 <_read+0x12>
  }

  return len;
 8006a00:	687b      	ldr	r3, [r7, #4]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d002      	beq.n	8006a22 <_write+0x18>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d115      	bne.n	8006a4e <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	68b8      	ldr	r0, [r7, #8]
 8006a26:	f00d fe65 	bl	80146f4 <CDC_Transmit_FS>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d0f6      	beq.n	8006a22 <_write+0x18>
		        if (result != USBD_OK)
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <_write+0x40>
		        {
		            errno = EIO;
 8006a3a:	f00e fc23 	bl	8015284 <__errno>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2205      	movs	r2, #5
 8006a42:	601a      	str	r2, [r3, #0]
		            return -1;
 8006a44:	f04f 33ff 	mov.w	r3, #4294967295
 8006a48:	e008      	b.n	8006a5c <_write+0x52>
		        }
		        return len;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	e006      	b.n	8006a5c <_write+0x52>
		    }
		    errno = EBADF;
 8006a4e:	f00e fc19 	bl	8015284 <__errno>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2209      	movs	r2, #9
 8006a56:	601a      	str	r2, [r3, #0]
		    return -1;
 8006a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <_close>:

int _close(int file)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a8c:	605a      	str	r2, [r3, #4]
  return 0;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <_isatty>:

int _isatty(int file)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006aa4:	2301      	movs	r3, #1
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ad4:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <_sbrk+0x5c>)
 8006ad6:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <_sbrk+0x60>)
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ae0:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <_sbrk+0x64>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ae8:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <_sbrk+0x64>)
 8006aea:	4a12      	ldr	r2, [pc, #72]	; (8006b34 <_sbrk+0x68>)
 8006aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <_sbrk+0x64>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4413      	add	r3, r2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d207      	bcs.n	8006b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006afc:	f00e fbc2 	bl	8015284 <__errno>
 8006b00:	4603      	mov	r3, r0
 8006b02:	220c      	movs	r2, #12
 8006b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	e009      	b.n	8006b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b0c:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <_sbrk+0x64>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b12:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <_sbrk+0x64>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4413      	add	r3, r2
 8006b1a:	4a05      	ldr	r2, [pc, #20]	; (8006b30 <_sbrk+0x64>)
 8006b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20020000 	.word	0x20020000
 8006b2c:	00000400 	.word	0x00000400
 8006b30:	20000aa0 	.word	0x20000aa0
 8006b34:	200024e8 	.word	0x200024e8

08006b38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <SystemInit+0x20>)
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b42:	4a05      	ldr	r2, [pc, #20]	; (8006b58 <SystemInit+0x20>)
 8006b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b4c:	bf00      	nop
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	e000ed00 	.word	0xe000ed00

08006b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006b5c:	480d      	ldr	r0, [pc, #52]	; (8006b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006b5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b60:	480d      	ldr	r0, [pc, #52]	; (8006b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b62:	490e      	ldr	r1, [pc, #56]	; (8006b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b64:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <LoopForever+0xe>)
  movs r3, #0
 8006b66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006b68:	e002      	b.n	8006b70 <LoopCopyDataInit>

08006b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b6e:	3304      	adds	r3, #4

08006b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b74:	d3f9      	bcc.n	8006b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b76:	4a0b      	ldr	r2, [pc, #44]	; (8006ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b78:	4c0b      	ldr	r4, [pc, #44]	; (8006ba8 <LoopForever+0x16>)
  movs r3, #0
 8006b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b7c:	e001      	b.n	8006b82 <LoopFillZerobss>

08006b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b80:	3204      	adds	r2, #4

08006b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b84:	d3fb      	bcc.n	8006b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b86:	f7ff ffd7 	bl	8006b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b8a:	f00e fb81 	bl	8015290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006b8e:	f7fe ff75 	bl	8005a7c <main>

08006b92 <LoopForever>:

LoopForever:
    b LoopForever
 8006b92:	e7fe      	b.n	8006b92 <LoopForever>
  ldr   r0, =_estack
 8006b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b9c:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8006ba0:	08018974 	.word	0x08018974
  ldr r2, =_sbss
 8006ba4:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8006ba8:	200024e8 	.word	0x200024e8

08006bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006bac:	e7fe      	b.n	8006bac <ADC1_2_IRQHandler>

08006bae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bb8:	2003      	movs	r0, #3
 8006bba:	f002 f893 	bl	8008ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006bbe:	200f      	movs	r0, #15
 8006bc0:	f000 f80e 	bl	8006be0 <HAL_InitTick>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	71fb      	strb	r3, [r7, #7]
 8006bce:	e001      	b.n	8006bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006bd0:	f7ff f812 	bl	8005bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006bd4:	79fb      	ldrb	r3, [r7, #7]

}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006bec:	4b16      	ldr	r3, [pc, #88]	; (8006c48 <HAL_InitTick+0x68>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d022      	beq.n	8006c3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006bf4:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <HAL_InitTick+0x6c>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <HAL_InitTick+0x68>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f002 f89e 	bl	8008d4a <HAL_SYSTICK_Config>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10f      	bne.n	8006c34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b0f      	cmp	r3, #15
 8006c18:	d809      	bhi.n	8006c2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c22:	f002 f86a 	bl	8008cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c26:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <HAL_InitTick+0x70>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	e007      	b.n	8006c3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	e004      	b.n	8006c3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
 8006c38:	e001      	b.n	8006c3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20000008 	.word	0x20000008
 8006c4c:	20000000 	.word	0x20000000
 8006c50:	20000004 	.word	0x20000004

08006c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <HAL_IncTick+0x1c>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_IncTick+0x20>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	4a03      	ldr	r2, [pc, #12]	; (8006c70 <HAL_IncTick+0x1c>)
 8006c64:	6013      	str	r3, [r2, #0]
}
 8006c66:	bf00      	nop
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	20000aa4 	.word	0x20000aa4
 8006c74:	20000008 	.word	0x20000008

08006c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c7c:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <HAL_GetTick+0x14>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000aa4 	.word	0x20000aa4

08006c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c98:	f7ff ffee 	bl	8006c78 <HAL_GetTick>
 8006c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d004      	beq.n	8006cb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <HAL_Delay+0x40>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006cb4:	bf00      	nop
 8006cb6:	f7ff ffdf 	bl	8006c78 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d8f7      	bhi.n	8006cb6 <HAL_Delay+0x26>
  {
  }
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000008 	.word	0x20000008

08006cd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	609a      	str	r2, [r3, #8]
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3360      	adds	r3, #96	; 0x60
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <LL_ADC_SetOffset+0x44>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	03fff000 	.word	0x03fff000

08006d84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3360      	adds	r3, #96	; 0x60
 8006d92:	461a      	mov	r2, r3
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3360      	adds	r3, #96	; 0x60
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b087      	sub	sp, #28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3360      	adds	r3, #96	; 0x60
 8006df6:	461a      	mov	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3360      	adds	r3, #96	; 0x60
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	615a      	str	r2, [r3, #20]
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b087      	sub	sp, #28
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3330      	adds	r3, #48	; 0x30
 8006eae:	461a      	mov	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	f003 030c 	and.w	r3, r3, #12
 8006eba:	4413      	add	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f003 031f 	and.w	r3, r3, #31
 8006ec8:	211f      	movs	r1, #31
 8006eca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ece:	43db      	mvns	r3, r3
 8006ed0:	401a      	ands	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0e9b      	lsrs	r3, r3, #26
 8006ed6:	f003 011f 	and.w	r1, r3, #31
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 031f 	and.w	r3, r3, #31
 8006ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b087      	sub	sp, #28
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3314      	adds	r3, #20
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	0e5b      	lsrs	r3, r3, #25
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	4413      	add	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	0d1b      	lsrs	r3, r3, #20
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2107      	movs	r1, #7
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	401a      	ands	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006f40:	bf00      	nop
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a0f      	ldr	r2, [pc, #60]	; (8006f98 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10a      	bne.n	8006f76 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006f74:	e00a      	b.n	8006f8c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f82:	43db      	mvns	r3, r3
 8006f84:	401a      	ands	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	407f0000 	.word	0x407f0000

08006f9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 031f 	and.w	r3, r3, #31
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6093      	str	r3, [r2, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff0:	d101      	bne.n	8006ff6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007018:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800703c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007040:	d101      	bne.n	8007046 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007068:	f043 0201 	orr.w	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800708c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007090:	f043 0202 	orr.w	r2, r3, #2
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <LL_ADC_IsEnabled+0x18>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <LL_ADC_IsEnabled+0x1a>
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d101      	bne.n	80070e2 <LL_ADC_IsDisableOngoing+0x18>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <LL_ADC_IsDisableOngoing+0x1a>
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007104:	f043 0204 	orr.w	r2, r3, #4
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b04      	cmp	r3, #4
 800712a:	d101      	bne.n	8007130 <LL_ADC_REG_IsConversionOngoing+0x18>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b08      	cmp	r3, #8
 8007150:	d101      	bne.n	8007156 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b089      	sub	sp, #36	; 0x24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e1af      	b.n	80074de <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fe fd57 	bl	8005c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff ff19 	bl	8006fdc <LL_ADC_IsDeepPowerDownEnabled>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff feff 	bl	8006fb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff34 	bl	800702c <LL_ADC_IsInternalRegulatorEnabled>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d115      	bne.n	80071f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff ff18 	bl	8007004 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071d4:	4b9f      	ldr	r3, [pc, #636]	; (8007454 <HAL_ADC_Init+0x2f0>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	099b      	lsrs	r3, r3, #6
 80071da:	4a9f      	ldr	r2, [pc, #636]	; (8007458 <HAL_ADC_Init+0x2f4>)
 80071dc:	fba2 2303 	umull	r2, r3, r2, r3
 80071e0:	099b      	lsrs	r3, r3, #6
 80071e2:	3301      	adds	r3, #1
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80071e8:	e002      	b.n	80071f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f9      	bne.n	80071ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff ff16 	bl	800702c <LL_ADC_IsInternalRegulatorEnabled>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720a:	f043 0210 	orr.w	r2, r3, #16
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007216:	f043 0201 	orr.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff ff76 	bl	8007118 <LL_ADC_REG_IsConversionOngoing>
 800722c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	f040 8148 	bne.w	80074cc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 8144 	bne.w	80074cc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800724c:	f043 0202 	orr.w	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff ff23 	bl	80070a4 <LL_ADC_IsEnabled>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d141      	bne.n	80072e8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800726c:	d004      	beq.n	8007278 <HAL_ADC_Init+0x114>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a7a      	ldr	r2, [pc, #488]	; (800745c <HAL_ADC_Init+0x2f8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d10f      	bne.n	8007298 <HAL_ADC_Init+0x134>
 8007278:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800727c:	f7ff ff12 	bl	80070a4 <LL_ADC_IsEnabled>
 8007280:	4604      	mov	r4, r0
 8007282:	4876      	ldr	r0, [pc, #472]	; (800745c <HAL_ADC_Init+0x2f8>)
 8007284:	f7ff ff0e 	bl	80070a4 <LL_ADC_IsEnabled>
 8007288:	4603      	mov	r3, r0
 800728a:	4323      	orrs	r3, r4
 800728c:	2b00      	cmp	r3, #0
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	e012      	b.n	80072be <HAL_ADC_Init+0x15a>
 8007298:	4871      	ldr	r0, [pc, #452]	; (8007460 <HAL_ADC_Init+0x2fc>)
 800729a:	f7ff ff03 	bl	80070a4 <LL_ADC_IsEnabled>
 800729e:	4604      	mov	r4, r0
 80072a0:	4870      	ldr	r0, [pc, #448]	; (8007464 <HAL_ADC_Init+0x300>)
 80072a2:	f7ff feff 	bl	80070a4 <LL_ADC_IsEnabled>
 80072a6:	4603      	mov	r3, r0
 80072a8:	431c      	orrs	r4, r3
 80072aa:	486f      	ldr	r0, [pc, #444]	; (8007468 <HAL_ADC_Init+0x304>)
 80072ac:	f7ff fefa 	bl	80070a4 <LL_ADC_IsEnabled>
 80072b0:	4603      	mov	r3, r0
 80072b2:	4323      	orrs	r3, r4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf0c      	ite	eq
 80072b8:	2301      	moveq	r3, #1
 80072ba:	2300      	movne	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d012      	beq.n	80072e8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ca:	d004      	beq.n	80072d6 <HAL_ADC_Init+0x172>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a62      	ldr	r2, [pc, #392]	; (800745c <HAL_ADC_Init+0x2f8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d101      	bne.n	80072da <HAL_ADC_Init+0x176>
 80072d6:	4a65      	ldr	r2, [pc, #404]	; (800746c <HAL_ADC_Init+0x308>)
 80072d8:	e000      	b.n	80072dc <HAL_ADC_Init+0x178>
 80072da:	4a65      	ldr	r2, [pc, #404]	; (8007470 <HAL_ADC_Init+0x30c>)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7ff fcf6 	bl	8006cd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7f5b      	ldrb	r3, [r3, #29]
 80072ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80072f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80072f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80072fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007306:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007308:	4313      	orrs	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007312:	2b01      	cmp	r3, #1
 8007314:	d106      	bne.n	8007324 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	3b01      	subs	r3, #1
 800731c:	045b      	lsls	r3, r3, #17
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	4313      	orrs	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	4313      	orrs	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <HAL_ADC_Init+0x310>)
 8007348:	4013      	ands	r3, r2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	69b9      	ldr	r1, [r7, #24]
 8007350:	430b      	orrs	r3, r1
 8007352:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fed2 	bl	8007118 <LL_ADC_REG_IsConversionOngoing>
 8007374:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff fedf 	bl	800713e <LL_ADC_INJ_IsConversionOngoing>
 8007380:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d17f      	bne.n	8007488 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d17c      	bne.n	8007488 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007392:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800739a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800739c:	4313      	orrs	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073aa:	f023 0302 	bic.w	r3, r3, #2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	69b9      	ldr	r1, [r7, #24]
 80073b4:	430b      	orrs	r3, r1
 80073b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691a      	ldr	r2, [r3, #16]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80073ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80073d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80073dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6911      	ldr	r1, [r2, #16]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6812      	ldr	r2, [r2, #0]
 80073e8:	430b      	orrs	r3, r1
 80073ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80073ee:	e013      	b.n	8007418 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80073fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007414:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800741e:	2b01      	cmp	r3, #1
 8007420:	d12a      	bne.n	8007478 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800742c:	f023 0304 	bic.w	r3, r3, #4
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007438:	4311      	orrs	r1, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800743e:	4311      	orrs	r1, r2
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007444:	430a      	orrs	r2, r1
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0201 	orr.w	r2, r2, #1
 8007450:	611a      	str	r2, [r3, #16]
 8007452:	e019      	b.n	8007488 <HAL_ADC_Init+0x324>
 8007454:	20000000 	.word	0x20000000
 8007458:	053e2d63 	.word	0x053e2d63
 800745c:	50000100 	.word	0x50000100
 8007460:	50000400 	.word	0x50000400
 8007464:	50000500 	.word	0x50000500
 8007468:	50000600 	.word	0x50000600
 800746c:	50000300 	.word	0x50000300
 8007470:	50000700 	.word	0x50000700
 8007474:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691a      	ldr	r2, [r3, #16]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0201 	bic.w	r2, r2, #1
 8007486:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10c      	bne.n	80074aa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	f023 010f 	bic.w	r1, r3, #15
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	1e5a      	subs	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
 80074a8:	e007      	b.n	80074ba <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 020f 	bic.w	r2, r2, #15
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	f043 0201 	orr.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80074ca:	e007      	b.n	80074dc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d0:	f043 0210 	orr.w	r2, r3, #16
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80074dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3724      	adds	r7, #36	; 0x24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd90      	pop	{r4, r7, pc}
 80074e6:	bf00      	nop

080074e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074fc:	d004      	beq.n	8007508 <HAL_ADC_Start_DMA+0x20>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a5a      	ldr	r2, [pc, #360]	; (800766c <HAL_ADC_Start_DMA+0x184>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d101      	bne.n	800750c <HAL_ADC_Start_DMA+0x24>
 8007508:	4b59      	ldr	r3, [pc, #356]	; (8007670 <HAL_ADC_Start_DMA+0x188>)
 800750a:	e000      	b.n	800750e <HAL_ADC_Start_DMA+0x26>
 800750c:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_ADC_Start_DMA+0x18c>)
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fd44 	bl	8006f9c <LL_ADC_GetMultimode>
 8007514:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff fdfc 	bl	8007118 <LL_ADC_REG_IsConversionOngoing>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 809b 	bne.w	800765e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_ADC_Start_DMA+0x4e>
 8007532:	2302      	movs	r3, #2
 8007534:	e096      	b.n	8007664 <HAL_ADC_Start_DMA+0x17c>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a4d      	ldr	r2, [pc, #308]	; (8007678 <HAL_ADC_Start_DMA+0x190>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d008      	beq.n	800755a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b05      	cmp	r3, #5
 8007552:	d002      	beq.n	800755a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b09      	cmp	r3, #9
 8007558:	d17a      	bne.n	8007650 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fcf6 	bl	8007f4c <ADC_Enable>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d16d      	bne.n	8007646 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a3a      	ldr	r2, [pc, #232]	; (800766c <HAL_ADC_Start_DMA+0x184>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d009      	beq.n	800759c <HAL_ADC_Start_DMA+0xb4>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a3b      	ldr	r2, [pc, #236]	; (800767c <HAL_ADC_Start_DMA+0x194>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d002      	beq.n	8007598 <HAL_ADC_Start_DMA+0xb0>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	e003      	b.n	80075a0 <HAL_ADC_Start_DMA+0xb8>
 8007598:	4b39      	ldr	r3, [pc, #228]	; (8007680 <HAL_ADC_Start_DMA+0x198>)
 800759a:	e001      	b.n	80075a0 <HAL_ADC_Start_DMA+0xb8>
 800759c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d002      	beq.n	80075ae <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d105      	bne.n	80075ba <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d006      	beq.n	80075d4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ca:	f023 0206 	bic.w	r2, r3, #6
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	661a      	str	r2, [r3, #96]	; 0x60
 80075d2:	e002      	b.n	80075da <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	4a29      	ldr	r2, [pc, #164]	; (8007684 <HAL_ADC_Start_DMA+0x19c>)
 80075e0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e6:	4a28      	ldr	r2, [pc, #160]	; (8007688 <HAL_ADC_Start_DMA+0x1a0>)
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	4a27      	ldr	r2, [pc, #156]	; (800768c <HAL_ADC_Start_DMA+0x1a4>)
 80075f0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	221c      	movs	r2, #28
 80075f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0210 	orr.w	r2, r2, #16
 8007610:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0201 	orr.w	r2, r2, #1
 8007620:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3340      	adds	r3, #64	; 0x40
 800762c:	4619      	mov	r1, r3
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f001 fe09 	bl	8009248 <HAL_DMA_Start_IT>
 8007636:	4603      	mov	r3, r0
 8007638:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fd56 	bl	80070f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007644:	e00d      	b.n	8007662 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800764e:	e008      	b.n	8007662 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800765c:	e001      	b.n	8007662 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800765e:	2302      	movs	r3, #2
 8007660:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	50000100 	.word	0x50000100
 8007670:	50000300 	.word	0x50000300
 8007674:	50000700 	.word	0x50000700
 8007678:	50000600 	.word	0x50000600
 800767c:	50000500 	.word	0x50000500
 8007680:	50000400 	.word	0x50000400
 8007684:	080080cf 	.word	0x080080cf
 8007688:	080081a7 	.word	0x080081a7
 800768c:	080081c3 	.word	0x080081c3

08007690 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b0b6      	sub	sp, #216	; 0xd8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d102      	bne.n	80076f0 <HAL_ADC_ConfigChannel+0x24>
 80076ea:	2302      	movs	r3, #2
 80076ec:	f000 bc13 	b.w	8007f16 <HAL_ADC_ConfigChannel+0x84a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff fd0b 	bl	8007118 <LL_ADC_REG_IsConversionOngoing>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 83f3 	bne.w	8007ef0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	f7ff fbc1 	bl	8006e9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fcf9 	bl	8007118 <LL_ADC_REG_IsConversionOngoing>
 8007726:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fd05 	bl	800713e <LL_ADC_INJ_IsConversionOngoing>
 8007734:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007738:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800773c:	2b00      	cmp	r3, #0
 800773e:	f040 81d9 	bne.w	8007af4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007742:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007746:	2b00      	cmp	r3, #0
 8007748:	f040 81d4 	bne.w	8007af4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007754:	d10f      	bne.n	8007776 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	4619      	mov	r1, r3
 8007762:	f7ff fbc8 	bl	8006ef6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fb6f 	bl	8006e52 <LL_ADC_SetSamplingTimeCommonConfig>
 8007774:	e00e      	b.n	8007794 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6819      	ldr	r1, [r3, #0]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	461a      	mov	r2, r3
 8007784:	f7ff fbb7 	bl	8006ef6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff fb5f 	bl	8006e52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695a      	ldr	r2, [r3, #20]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d022      	beq.n	80077fc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6919      	ldr	r1, [r3, #16]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077c6:	f7ff fab9 	bl	8006d3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6919      	ldr	r1, [r3, #16]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f7ff fb05 	bl	8006de6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	6919      	ldr	r1, [r3, #16]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	7f1b      	ldrb	r3, [r3, #28]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d102      	bne.n	80077f2 <HAL_ADC_ConfigChannel+0x126>
 80077ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077f0:	e000      	b.n	80077f4 <HAL_ADC_ConfigChannel+0x128>
 80077f2:	2300      	movs	r3, #0
 80077f4:	461a      	mov	r2, r3
 80077f6:	f7ff fb11 	bl	8006e1c <LL_ADC_SetOffsetSaturation>
 80077fa:	e17b      	b.n	8007af4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2100      	movs	r1, #0
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff fabe 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 8007808:	4603      	mov	r3, r0
 800780a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <HAL_ADC_ConfigChannel+0x15c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff fab3 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 800781e:	4603      	mov	r3, r0
 8007820:	0e9b      	lsrs	r3, r3, #26
 8007822:	f003 021f 	and.w	r2, r3, #31
 8007826:	e01e      	b.n	8007866 <HAL_ADC_ConfigChannel+0x19a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff faa8 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 8007834:	4603      	mov	r3, r0
 8007836:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800783a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800783e:	fa93 f3a3 	rbit	r3, r3
 8007842:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800784a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800784e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007856:	2320      	movs	r3, #32
 8007858:	e004      	b.n	8007864 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800785a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800785e:	fab3 f383 	clz	r3, r3
 8007862:	b2db      	uxtb	r3, r3
 8007864:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <HAL_ADC_ConfigChannel+0x1b2>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	0e9b      	lsrs	r3, r3, #26
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	e018      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x1e4>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800788a:	fa93 f3a3 	rbit	r3, r3
 800788e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800789a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80078a2:	2320      	movs	r3, #32
 80078a4:	e004      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80078a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078aa:	fab3 f383 	clz	r3, r3
 80078ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d106      	bne.n	80078c2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fa77 	bl	8006db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2101      	movs	r1, #1
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fa5b 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <HAL_ADC_ConfigChannel+0x222>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2101      	movs	r1, #1
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fa50 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 80078e4:	4603      	mov	r3, r0
 80078e6:	0e9b      	lsrs	r3, r3, #26
 80078e8:	f003 021f 	and.w	r2, r3, #31
 80078ec:	e01e      	b.n	800792c <HAL_ADC_ConfigChannel+0x260>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2101      	movs	r1, #1
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff fa45 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007904:	fa93 f3a3 	rbit	r3, r3
 8007908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800790c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800791c:	2320      	movs	r3, #32
 800791e:	e004      	b.n	800792a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007924:	fab3 f383 	clz	r3, r3
 8007928:	b2db      	uxtb	r3, r3
 800792a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <HAL_ADC_ConfigChannel+0x278>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	0e9b      	lsrs	r3, r3, #26
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	e018      	b.n	8007976 <HAL_ADC_ConfigChannel+0x2aa>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007950:	fa93 f3a3 	rbit	r3, r3
 8007954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007958:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800795c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007968:	2320      	movs	r3, #32
 800796a:	e004      	b.n	8007976 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800796c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007970:	fab3 f383 	clz	r3, r3
 8007974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007976:	429a      	cmp	r2, r3
 8007978:	d106      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2200      	movs	r2, #0
 8007980:	2101      	movs	r1, #1
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fa14 	bl	8006db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2102      	movs	r1, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff f9f8 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 8007994:	4603      	mov	r3, r0
 8007996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x2e8>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2102      	movs	r1, #2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff f9ed 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 80079aa:	4603      	mov	r3, r0
 80079ac:	0e9b      	lsrs	r3, r3, #26
 80079ae:	f003 021f 	and.w	r2, r3, #31
 80079b2:	e01e      	b.n	80079f2 <HAL_ADC_ConfigChannel+0x326>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2102      	movs	r1, #2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff f9e2 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ca:	fa93 f3a3 	rbit	r3, r3
 80079ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80079d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80079da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80079e2:	2320      	movs	r3, #32
 80079e4:	e004      	b.n	80079f0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80079e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079ea:	fab3 f383 	clz	r3, r3
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d105      	bne.n	8007a0a <HAL_ADC_ConfigChannel+0x33e>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	0e9b      	lsrs	r3, r3, #26
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	e016      	b.n	8007a38 <HAL_ADC_ConfigChannel+0x36c>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a16:	fa93 f3a3 	rbit	r3, r3
 8007a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007a1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007a2a:	2320      	movs	r3, #32
 8007a2c:	e004      	b.n	8007a38 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a32:	fab3 f383 	clz	r3, r3
 8007a36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d106      	bne.n	8007a4a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2200      	movs	r2, #0
 8007a42:	2102      	movs	r1, #2
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff f9b3 	bl	8006db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2103      	movs	r1, #3
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff f997 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <HAL_ADC_ConfigChannel+0x3aa>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2103      	movs	r1, #3
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff f98c 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	0e9b      	lsrs	r3, r3, #26
 8007a70:	f003 021f 	and.w	r2, r3, #31
 8007a74:	e017      	b.n	8007aa6 <HAL_ADC_ConfigChannel+0x3da>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2103      	movs	r1, #3
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff f981 	bl	8006d84 <LL_ADC_GetOffsetChannel>
 8007a82:	4603      	mov	r3, r0
 8007a84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a88:	fa93 f3a3 	rbit	r3, r3
 8007a8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007a98:	2320      	movs	r3, #32
 8007a9a:	e003      	b.n	8007aa4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a9e:	fab3 f383 	clz	r3, r3
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d105      	bne.n	8007abe <HAL_ADC_ConfigChannel+0x3f2>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	0e9b      	lsrs	r3, r3, #26
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	e011      	b.n	8007ae2 <HAL_ADC_ConfigChannel+0x416>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac6:	fa93 f3a3 	rbit	r3, r3
 8007aca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ace:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007ad6:	2320      	movs	r3, #32
 8007ad8:	e003      	b.n	8007ae2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007adc:	fab3 f383 	clz	r3, r3
 8007ae0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d106      	bne.n	8007af4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	2103      	movs	r1, #3
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff f95e 	bl	8006db0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff fad3 	bl	80070a4 <LL_ADC_IsEnabled>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f040 813d 	bne.w	8007d80 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f7ff fa1a 	bl	8006f4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	4aa2      	ldr	r2, [pc, #648]	; (8007da8 <HAL_ADC_ConfigChannel+0x6dc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	f040 812e 	bne.w	8007d80 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <HAL_ADC_ConfigChannel+0x480>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	0e9b      	lsrs	r3, r3, #26
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	2b09      	cmp	r3, #9
 8007b42:	bf94      	ite	ls
 8007b44:	2301      	movls	r3, #1
 8007b46:	2300      	movhi	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	e019      	b.n	8007b80 <HAL_ADC_ConfigChannel+0x4b4>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b54:	fa93 f3a3 	rbit	r3, r3
 8007b58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007b64:	2320      	movs	r3, #32
 8007b66:	e003      	b.n	8007b70 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b6a:	fab3 f383 	clz	r3, r3
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	3301      	adds	r3, #1
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	bf94      	ite	ls
 8007b7a:	2301      	movls	r3, #1
 8007b7c:	2300      	movhi	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d079      	beq.n	8007c78 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d107      	bne.n	8007ba0 <HAL_ADC_ConfigChannel+0x4d4>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	0e9b      	lsrs	r3, r3, #26
 8007b96:	3301      	adds	r3, #1
 8007b98:	069b      	lsls	r3, r3, #26
 8007b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007b9e:	e015      	b.n	8007bcc <HAL_ADC_ConfigChannel+0x500>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba8:	fa93 f3a3 	rbit	r3, r3
 8007bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007bb8:	2320      	movs	r3, #32
 8007bba:	e003      	b.n	8007bc4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbe:	fab3 f383 	clz	r3, r3
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	069b      	lsls	r3, r3, #26
 8007bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <HAL_ADC_ConfigChannel+0x520>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	0e9b      	lsrs	r3, r3, #26
 8007bde:	3301      	adds	r3, #1
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	2101      	movs	r1, #1
 8007be6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bea:	e017      	b.n	8007c1c <HAL_ADC_ConfigChannel+0x550>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf4:	fa93 f3a3 	rbit	r3, r3
 8007bf8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007c04:	2320      	movs	r3, #32
 8007c06:	e003      	b.n	8007c10 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0a:	fab3 f383 	clz	r3, r3
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	3301      	adds	r3, #1
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	2101      	movs	r1, #1
 8007c18:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1c:	ea42 0103 	orr.w	r1, r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <HAL_ADC_ConfigChannel+0x576>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	0e9b      	lsrs	r3, r3, #26
 8007c32:	3301      	adds	r3, #1
 8007c34:	f003 021f 	and.w	r2, r3, #31
 8007c38:	4613      	mov	r3, r2
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	4413      	add	r3, r2
 8007c3e:	051b      	lsls	r3, r3, #20
 8007c40:	e018      	b.n	8007c74 <HAL_ADC_ConfigChannel+0x5a8>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	fa93 f3a3 	rbit	r3, r3
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007c5a:	2320      	movs	r3, #32
 8007c5c:	e003      	b.n	8007c66 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c60:	fab3 f383 	clz	r3, r3
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3301      	adds	r3, #1
 8007c68:	f003 021f 	and.w	r2, r3, #31
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	4413      	add	r3, r2
 8007c72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c74:	430b      	orrs	r3, r1
 8007c76:	e07e      	b.n	8007d76 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d107      	bne.n	8007c94 <HAL_ADC_ConfigChannel+0x5c8>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	0e9b      	lsrs	r3, r3, #26
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	069b      	lsls	r3, r3, #26
 8007c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c92:	e015      	b.n	8007cc0 <HAL_ADC_ConfigChannel+0x5f4>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	fa93 f3a3 	rbit	r3, r3
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007cac:	2320      	movs	r3, #32
 8007cae:	e003      	b.n	8007cb8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	fab3 f383 	clz	r3, r3
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	3301      	adds	r3, #1
 8007cba:	069b      	lsls	r3, r3, #26
 8007cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d109      	bne.n	8007ce0 <HAL_ADC_ConfigChannel+0x614>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	0e9b      	lsrs	r3, r3, #26
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	2101      	movs	r1, #1
 8007cda:	fa01 f303 	lsl.w	r3, r1, r3
 8007cde:	e017      	b.n	8007d10 <HAL_ADC_ConfigChannel+0x644>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	fa93 f3a3 	rbit	r3, r3
 8007cec:	61fb      	str	r3, [r7, #28]
  return result;
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	e003      	b.n	8007d04 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	fab3 f383 	clz	r3, r3
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	3301      	adds	r3, #1
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d10:	ea42 0103 	orr.w	r1, r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <HAL_ADC_ConfigChannel+0x670>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	0e9b      	lsrs	r3, r3, #26
 8007d26:	3301      	adds	r3, #1
 8007d28:	f003 021f 	and.w	r2, r3, #31
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	4413      	add	r3, r2
 8007d32:	3b1e      	subs	r3, #30
 8007d34:	051b      	lsls	r3, r3, #20
 8007d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d3a:	e01b      	b.n	8007d74 <HAL_ADC_ConfigChannel+0x6a8>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	fa93 f3a3 	rbit	r3, r3
 8007d48:	613b      	str	r3, [r7, #16]
  return result;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007d54:	2320      	movs	r3, #32
 8007d56:	e003      	b.n	8007d60 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	fab3 f383 	clz	r3, r3
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	3301      	adds	r3, #1
 8007d62:	f003 021f 	and.w	r2, r3, #31
 8007d66:	4613      	mov	r3, r2
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	4413      	add	r3, r2
 8007d6c:	3b1e      	subs	r3, #30
 8007d6e:	051b      	lsls	r3, r3, #20
 8007d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d74:	430b      	orrs	r3, r1
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	6892      	ldr	r2, [r2, #8]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	f7ff f8bb 	bl	8006ef6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4b09      	ldr	r3, [pc, #36]	; (8007dac <HAL_ADC_ConfigChannel+0x6e0>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80be 	beq.w	8007f0a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d96:	d004      	beq.n	8007da2 <HAL_ADC_ConfigChannel+0x6d6>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a04      	ldr	r2, [pc, #16]	; (8007db0 <HAL_ADC_ConfigChannel+0x6e4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10a      	bne.n	8007db8 <HAL_ADC_ConfigChannel+0x6ec>
 8007da2:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <HAL_ADC_ConfigChannel+0x6e8>)
 8007da4:	e009      	b.n	8007dba <HAL_ADC_ConfigChannel+0x6ee>
 8007da6:	bf00      	nop
 8007da8:	407f0000 	.word	0x407f0000
 8007dac:	80080000 	.word	0x80080000
 8007db0:	50000100 	.word	0x50000100
 8007db4:	50000300 	.word	0x50000300
 8007db8:	4b59      	ldr	r3, [pc, #356]	; (8007f20 <HAL_ADC_ConfigChannel+0x854>)
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe ffb0 	bl	8006d20 <LL_ADC_GetCommonPathInternalCh>
 8007dc0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a56      	ldr	r2, [pc, #344]	; (8007f24 <HAL_ADC_ConfigChannel+0x858>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d004      	beq.n	8007dd8 <HAL_ADC_ConfigChannel+0x70c>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a55      	ldr	r2, [pc, #340]	; (8007f28 <HAL_ADC_ConfigChannel+0x85c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d13a      	bne.n	8007e4e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d134      	bne.n	8007e4e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dec:	d005      	beq.n	8007dfa <HAL_ADC_ConfigChannel+0x72e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a4e      	ldr	r2, [pc, #312]	; (8007f2c <HAL_ADC_ConfigChannel+0x860>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	f040 8085 	bne.w	8007f04 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e02:	d004      	beq.n	8007e0e <HAL_ADC_ConfigChannel+0x742>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a49      	ldr	r2, [pc, #292]	; (8007f30 <HAL_ADC_ConfigChannel+0x864>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d101      	bne.n	8007e12 <HAL_ADC_ConfigChannel+0x746>
 8007e0e:	4a49      	ldr	r2, [pc, #292]	; (8007f34 <HAL_ADC_ConfigChannel+0x868>)
 8007e10:	e000      	b.n	8007e14 <HAL_ADC_ConfigChannel+0x748>
 8007e12:	4a43      	ldr	r2, [pc, #268]	; (8007f20 <HAL_ADC_ConfigChannel+0x854>)
 8007e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f7fe ff6b 	bl	8006cfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e24:	4b44      	ldr	r3, [pc, #272]	; (8007f38 <HAL_ADC_ConfigChannel+0x86c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	099b      	lsrs	r3, r3, #6
 8007e2a:	4a44      	ldr	r2, [pc, #272]	; (8007f3c <HAL_ADC_ConfigChannel+0x870>)
 8007e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e30:	099b      	lsrs	r3, r3, #6
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	4613      	mov	r3, r2
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e3e:	e002      	b.n	8007e46 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f9      	bne.n	8007e40 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e4c:	e05a      	b.n	8007f04 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a3b      	ldr	r2, [pc, #236]	; (8007f40 <HAL_ADC_ConfigChannel+0x874>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d125      	bne.n	8007ea4 <HAL_ADC_ConfigChannel+0x7d8>
 8007e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11f      	bne.n	8007ea4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a31      	ldr	r2, [pc, #196]	; (8007f30 <HAL_ADC_ConfigChannel+0x864>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d104      	bne.n	8007e78 <HAL_ADC_ConfigChannel+0x7ac>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a34      	ldr	r2, [pc, #208]	; (8007f44 <HAL_ADC_ConfigChannel+0x878>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d047      	beq.n	8007f08 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e80:	d004      	beq.n	8007e8c <HAL_ADC_ConfigChannel+0x7c0>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a2a      	ldr	r2, [pc, #168]	; (8007f30 <HAL_ADC_ConfigChannel+0x864>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d101      	bne.n	8007e90 <HAL_ADC_ConfigChannel+0x7c4>
 8007e8c:	4a29      	ldr	r2, [pc, #164]	; (8007f34 <HAL_ADC_ConfigChannel+0x868>)
 8007e8e:	e000      	b.n	8007e92 <HAL_ADC_ConfigChannel+0x7c6>
 8007e90:	4a23      	ldr	r2, [pc, #140]	; (8007f20 <HAL_ADC_ConfigChannel+0x854>)
 8007e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7fe ff2c 	bl	8006cfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007ea2:	e031      	b.n	8007f08 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <HAL_ADC_ConfigChannel+0x87c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d12d      	bne.n	8007f0a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d127      	bne.n	8007f0a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1c      	ldr	r2, [pc, #112]	; (8007f30 <HAL_ADC_ConfigChannel+0x864>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ecc:	d004      	beq.n	8007ed8 <HAL_ADC_ConfigChannel+0x80c>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a17      	ldr	r2, [pc, #92]	; (8007f30 <HAL_ADC_ConfigChannel+0x864>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d101      	bne.n	8007edc <HAL_ADC_ConfigChannel+0x810>
 8007ed8:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <HAL_ADC_ConfigChannel+0x868>)
 8007eda:	e000      	b.n	8007ede <HAL_ADC_ConfigChannel+0x812>
 8007edc:	4a10      	ldr	r2, [pc, #64]	; (8007f20 <HAL_ADC_ConfigChannel+0x854>)
 8007ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f7fe ff06 	bl	8006cfa <LL_ADC_SetCommonPathInternalCh>
 8007eee:	e00c      	b.n	8007f0a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef4:	f043 0220 	orr.w	r2, r3, #32
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007f02:	e002      	b.n	8007f0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f04:	bf00      	nop
 8007f06:	e000      	b.n	8007f0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007f12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	37d8      	adds	r7, #216	; 0xd8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	50000700 	.word	0x50000700
 8007f24:	c3210000 	.word	0xc3210000
 8007f28:	90c00010 	.word	0x90c00010
 8007f2c:	50000600 	.word	0x50000600
 8007f30:	50000100 	.word	0x50000100
 8007f34:	50000300 	.word	0x50000300
 8007f38:	20000000 	.word	0x20000000
 8007f3c:	053e2d63 	.word	0x053e2d63
 8007f40:	c7520000 	.word	0xc7520000
 8007f44:	50000500 	.word	0x50000500
 8007f48:	cb840000 	.word	0xcb840000

08007f4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff f8a3 	bl	80070a4 <LL_ADC_IsEnabled>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d14d      	bne.n	8008000 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	4b28      	ldr	r3, [pc, #160]	; (800800c <ADC_Enable+0xc0>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00d      	beq.n	8007f8e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f76:	f043 0210 	orr.w	r2, r3, #16
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f82:	f043 0201 	orr.w	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e039      	b.n	8008002 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff f85e 	bl	8007054 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007f98:	f7fe fe6e 	bl	8006c78 <HAL_GetTick>
 8007f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f9e:	e028      	b.n	8007ff2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff f87d 	bl	80070a4 <LL_ADC_IsEnabled>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f84d 	bl	8007054 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007fba:	f7fe fe5d 	bl	8006c78 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d914      	bls.n	8007ff2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d00d      	beq.n	8007ff2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	f043 0210 	orr.w	r2, r3, #16
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe6:	f043 0201 	orr.w	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e007      	b.n	8008002 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d1cf      	bne.n	8007fa0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	8000003f 	.word	0x8000003f

08008010 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff f854 	bl	80070ca <LL_ADC_IsDisableOngoing>
 8008022:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff f83b 	bl	80070a4 <LL_ADC_IsEnabled>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d047      	beq.n	80080c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d144      	bne.n	80080c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 030d 	and.w	r3, r3, #13
 8008044:	2b01      	cmp	r3, #1
 8008046:	d10c      	bne.n	8008062 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff f815 	bl	800707c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2203      	movs	r2, #3
 8008058:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800805a:	f7fe fe0d 	bl	8006c78 <HAL_GetTick>
 800805e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008060:	e029      	b.n	80080b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008066:	f043 0210 	orr.w	r2, r3, #16
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008072:	f043 0201 	orr.w	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e023      	b.n	80080c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800807e:	f7fe fdfb 	bl	8006c78 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d914      	bls.n	80080b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00d      	beq.n	80080b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809e:	f043 0210 	orr.w	r2, r3, #16
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	f043 0201 	orr.w	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e007      	b.n	80080c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1dc      	bne.n	800807e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d14b      	bne.n	8008180 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d021      	beq.n	8008146 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f7fe feb6 	bl	8006e78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d032      	beq.n	8008178 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d12b      	bne.n	8008178 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d11f      	bne.n	8008178 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813c:	f043 0201 	orr.w	r2, r3, #1
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	65da      	str	r2, [r3, #92]	; 0x5c
 8008144:	e018      	b.n	8008178 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d111      	bne.n	8008178 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d105      	bne.n	8008178 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008170:	f043 0201 	orr.w	r2, r3, #1
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f7ff fa89 	bl	8007690 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800817e:	e00e      	b.n	800819e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008184:	f003 0310 	and.w	r3, r3, #16
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7ff fa93 	bl	80076b8 <HAL_ADC_ErrorCallback>
}
 8008192:	e004      	b.n	800819e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	4798      	blx	r3
}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f7ff fa75 	bl	80076a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e0:	f043 0204 	orr.w	r2, r3, #4
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff fa65 	bl	80076b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <LL_ADC_IsEnabled>:
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b01      	cmp	r3, #1
 8008208:	d101      	bne.n	800820e <LL_ADC_IsEnabled+0x18>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <LL_ADC_IsEnabled+0x1a>
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <LL_ADC_StartCalibration>:
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800822e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008238:	4313      	orrs	r3, r2
 800823a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	609a      	str	r2, [r3, #8]
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <LL_ADC_IsCalibrationOnGoing>:
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800825e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008262:	d101      	bne.n	8008268 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008264:	2301      	movs	r3, #1
 8008266:	e000      	b.n	800826a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <LL_ADC_REG_IsConversionOngoing>:
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b04      	cmp	r3, #4
 8008288:	d101      	bne.n	800828e <LL_ADC_REG_IsConversionOngoing+0x18>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e04d      	b.n	8008354 <HAL_ADCEx_Calibration_Start+0xb8>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff fea5 	bl	8008010 <ADC_Disable>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d136      	bne.n	800833e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80082d8:	f023 0302 	bic.w	r3, r3, #2
 80082dc:	f043 0202 	orr.w	r2, r3, #2
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff ff96 	bl	800821c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80082f0:	e014      	b.n	800831c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4a18      	ldr	r2, [pc, #96]	; (800835c <HAL_ADCEx_Calibration_Start+0xc0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d90d      	bls.n	800831c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008304:	f023 0312 	bic.w	r3, r3, #18
 8008308:	f043 0210 	orr.w	r2, r3, #16
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e01b      	b.n	8008354 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff ff94 	bl	800824e <LL_ADC_IsCalibrationOnGoing>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e2      	bne.n	80082f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	f043 0201 	orr.w	r2, r3, #1
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	65da      	str	r2, [r3, #92]	; 0x5c
 800833c:	e005      	b.n	800834a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008342:	f043 0210 	orr.w	r2, r3, #16
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	0004de01 	.word	0x0004de01

08008360 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b0a1      	sub	sp, #132	; 0x84
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800837a:	2302      	movs	r3, #2
 800837c:	e0e7      	b.n	800854e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8008386:	2300      	movs	r3, #0
 8008388:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800838a:	2300      	movs	r3, #0
 800838c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008396:	d102      	bne.n	800839e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008398:	4b6f      	ldr	r3, [pc, #444]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800839a:	60bb      	str	r3, [r7, #8]
 800839c:	e009      	b.n	80083b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a6e      	ldr	r2, [pc, #440]	; (800855c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d102      	bne.n	80083ae <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80083a8:	4b6d      	ldr	r3, [pc, #436]	; (8008560 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80083aa:	60bb      	str	r3, [r7, #8]
 80083ac:	e001      	b.n	80083b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083bc:	f043 0220 	orr.w	r2, r3, #32
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0be      	b.n	800854e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff ff4f 	bl	8008276 <LL_ADC_REG_IsConversionOngoing>
 80083d8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f7ff ff49 	bl	8008276 <LL_ADC_REG_IsConversionOngoing>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 80a0 	bne.w	800852c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80083ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 809c 	bne.w	800852c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083fc:	d004      	beq.n	8008408 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a55      	ldr	r2, [pc, #340]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d101      	bne.n	800840c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008408:	4b56      	ldr	r3, [pc, #344]	; (8008564 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800840a:	e000      	b.n	800840e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800840c:	4b56      	ldr	r3, [pc, #344]	; (8008568 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800840e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d04b      	beq.n	80084b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	6859      	ldr	r1, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800842a:	035b      	lsls	r3, r3, #13
 800842c:	430b      	orrs	r3, r1
 800842e:	431a      	orrs	r2, r3
 8008430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008432:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800843c:	d004      	beq.n	8008448 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a45      	ldr	r2, [pc, #276]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d10f      	bne.n	8008468 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008448:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800844c:	f7ff fed3 	bl	80081f6 <LL_ADC_IsEnabled>
 8008450:	4604      	mov	r4, r0
 8008452:	4841      	ldr	r0, [pc, #260]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008454:	f7ff fecf 	bl	80081f6 <LL_ADC_IsEnabled>
 8008458:	4603      	mov	r3, r0
 800845a:	4323      	orrs	r3, r4
 800845c:	2b00      	cmp	r3, #0
 800845e:	bf0c      	ite	eq
 8008460:	2301      	moveq	r3, #1
 8008462:	2300      	movne	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	e012      	b.n	800848e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008468:	483c      	ldr	r0, [pc, #240]	; (800855c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800846a:	f7ff fec4 	bl	80081f6 <LL_ADC_IsEnabled>
 800846e:	4604      	mov	r4, r0
 8008470:	483b      	ldr	r0, [pc, #236]	; (8008560 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008472:	f7ff fec0 	bl	80081f6 <LL_ADC_IsEnabled>
 8008476:	4603      	mov	r3, r0
 8008478:	431c      	orrs	r4, r3
 800847a:	483c      	ldr	r0, [pc, #240]	; (800856c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800847c:	f7ff febb 	bl	80081f6 <LL_ADC_IsEnabled>
 8008480:	4603      	mov	r3, r0
 8008482:	4323      	orrs	r3, r4
 8008484:	2b00      	cmp	r3, #0
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d056      	beq.n	8008540 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800849a:	f023 030f 	bic.w	r3, r3, #15
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	6811      	ldr	r1, [r2, #0]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	6892      	ldr	r2, [r2, #8]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	431a      	orrs	r2, r3
 80084aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80084ae:	e047      	b.n	8008540 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80084b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084c4:	d004      	beq.n	80084d0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a23      	ldr	r2, [pc, #140]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d10f      	bne.n	80084f0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80084d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80084d4:	f7ff fe8f 	bl	80081f6 <LL_ADC_IsEnabled>
 80084d8:	4604      	mov	r4, r0
 80084da:	481f      	ldr	r0, [pc, #124]	; (8008558 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80084dc:	f7ff fe8b 	bl	80081f6 <LL_ADC_IsEnabled>
 80084e0:	4603      	mov	r3, r0
 80084e2:	4323      	orrs	r3, r4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	bf0c      	ite	eq
 80084e8:	2301      	moveq	r3, #1
 80084ea:	2300      	movne	r3, #0
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	e012      	b.n	8008516 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80084f0:	481a      	ldr	r0, [pc, #104]	; (800855c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80084f2:	f7ff fe80 	bl	80081f6 <LL_ADC_IsEnabled>
 80084f6:	4604      	mov	r4, r0
 80084f8:	4819      	ldr	r0, [pc, #100]	; (8008560 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80084fa:	f7ff fe7c 	bl	80081f6 <LL_ADC_IsEnabled>
 80084fe:	4603      	mov	r3, r0
 8008500:	431c      	orrs	r4, r3
 8008502:	481a      	ldr	r0, [pc, #104]	; (800856c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008504:	f7ff fe77 	bl	80081f6 <LL_ADC_IsEnabled>
 8008508:	4603      	mov	r3, r0
 800850a:	4323      	orrs	r3, r4
 800850c:	2b00      	cmp	r3, #0
 800850e:	bf0c      	ite	eq
 8008510:	2301      	moveq	r3, #1
 8008512:	2300      	movne	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d012      	beq.n	8008540 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800851a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008522:	f023 030f 	bic.w	r3, r3, #15
 8008526:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008528:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800852a:	e009      	b.n	8008540 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008530:	f043 0220 	orr.w	r2, r3, #32
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800853e:	e000      	b.n	8008542 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008540:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800854a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800854e:	4618      	mov	r0, r3
 8008550:	3784      	adds	r7, #132	; 0x84
 8008552:	46bd      	mov	sp, r7
 8008554:	bd90      	pop	{r4, r7, pc}
 8008556:	bf00      	nop
 8008558:	50000100 	.word	0x50000100
 800855c:	50000400 	.word	0x50000400
 8008560:	50000500 	.word	0x50000500
 8008564:	50000300 	.word	0x50000300
 8008568:	50000700 	.word	0x50000700
 800856c:	50000600 	.word	0x50000600

08008570 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <LL_EXTI_EnableIT_0_31+0x20>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	4904      	ldr	r1, [pc, #16]	; (8008590 <LL_EXTI_EnableIT_0_31+0x20>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4313      	orrs	r3, r2
 8008582:	600b      	str	r3, [r1, #0]
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	40010400 	.word	0x40010400

08008594 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800859c:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <LL_EXTI_EnableIT_32_63+0x20>)
 800859e:	6a1a      	ldr	r2, [r3, #32]
 80085a0:	4904      	ldr	r1, [pc, #16]	; (80085b4 <LL_EXTI_EnableIT_32_63+0x20>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	620b      	str	r3, [r1, #32]
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40010400 	.word	0x40010400

080085b8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80085c0:	4b06      	ldr	r3, [pc, #24]	; (80085dc <LL_EXTI_DisableIT_0_31+0x24>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	43db      	mvns	r3, r3
 80085c8:	4904      	ldr	r1, [pc, #16]	; (80085dc <LL_EXTI_DisableIT_0_31+0x24>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	600b      	str	r3, [r1, #0]
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010400 	.word	0x40010400

080085e0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <LL_EXTI_DisableIT_32_63+0x24>)
 80085ea:	6a1a      	ldr	r2, [r3, #32]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	43db      	mvns	r3, r3
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <LL_EXTI_DisableIT_32_63+0x24>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	620b      	str	r3, [r1, #32]
}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	40010400 	.word	0x40010400

08008608 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	4904      	ldr	r1, [pc, #16]	; (8008628 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4313      	orrs	r3, r2
 800861a:	604b      	str	r3, [r1, #4]

}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	40010400 	.word	0x40010400

0800862c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <LL_EXTI_EnableEvent_32_63+0x20>)
 8008636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008638:	4904      	ldr	r1, [pc, #16]	; (800864c <LL_EXTI_EnableEvent_32_63+0x20>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4313      	orrs	r3, r2
 800863e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40010400 	.word	0x40010400

08008650 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008658:	4b06      	ldr	r3, [pc, #24]	; (8008674 <LL_EXTI_DisableEvent_0_31+0x24>)
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	43db      	mvns	r3, r3
 8008660:	4904      	ldr	r1, [pc, #16]	; (8008674 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008662:	4013      	ands	r3, r2
 8008664:	604b      	str	r3, [r1, #4]
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	40010400 	.word	0x40010400

08008678 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <LL_EXTI_DisableEvent_32_63+0x24>)
 8008682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	43db      	mvns	r3, r3
 8008688:	4904      	ldr	r1, [pc, #16]	; (800869c <LL_EXTI_DisableEvent_32_63+0x24>)
 800868a:	4013      	ands	r3, r2
 800868c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40010400 	.word	0x40010400

080086a0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80086a8:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	4904      	ldr	r1, [pc, #16]	; (80086c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	608b      	str	r3, [r1, #8]

}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40010400 	.word	0x40010400

080086c4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80086cc:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80086ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086d0:	4904      	ldr	r1, [pc, #16]	; (80086e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	40010400 	.word	0x40010400

080086e8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	43db      	mvns	r3, r3
 80086f8:	4904      	ldr	r1, [pc, #16]	; (800870c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80086fa:	4013      	ands	r3, r2
 80086fc:	608b      	str	r3, [r1, #8]

}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40010400 	.word	0x40010400

08008710 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800871a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	43db      	mvns	r3, r3
 8008720:	4904      	ldr	r1, [pc, #16]	; (8008734 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008722:	4013      	ands	r3, r2
 8008724:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	40010400 	.word	0x40010400

08008738 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008740:	4b05      	ldr	r3, [pc, #20]	; (8008758 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	4904      	ldr	r1, [pc, #16]	; (8008758 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4313      	orrs	r3, r2
 800874a:	60cb      	str	r3, [r1, #12]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	40010400 	.word	0x40010400

0800875c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4904      	ldr	r1, [pc, #16]	; (800877c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4313      	orrs	r3, r2
 800876e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	40010400 	.word	0x40010400

08008780 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	43db      	mvns	r3, r3
 8008790:	4904      	ldr	r1, [pc, #16]	; (80087a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008792:	4013      	ands	r3, r2
 8008794:	60cb      	str	r3, [r1, #12]
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010400 	.word	0x40010400

080087a8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	43db      	mvns	r3, r3
 80087b8:	4904      	ldr	r1, [pc, #16]	; (80087cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40010400 	.word	0x40010400

080087d0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80087d8:	4a04      	ldr	r2, [pc, #16]	; (80087ec <LL_EXTI_ClearFlag_0_31+0x1c>)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6153      	str	r3, [r2, #20]
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40010400 	.word	0x40010400

080087f0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80087f8:	4a04      	ldr	r2, [pc, #16]	; (800880c <LL_EXTI_ClearFlag_32_63+0x1c>)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40010400 	.word	0x40010400

08008810 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	77fb      	strb	r3, [r7, #31]
 800882a:	e181      	b.n	8008b30 <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800883a:	d102      	bne.n	8008842 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e176      	b.n	8008b30 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7f5b      	ldrb	r3, [r3, #29]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d108      	bne.n	800885e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7fd fb51 	bl	8005f00 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008868:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	4b90      	ldr	r3, [pc, #576]	; (8008ad0 <HAL_COMP_Init+0x2c0>)
 8008890:	4013      	ands	r3, r2
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	6979      	ldr	r1, [r7, #20]
 8008898:	430b      	orrs	r3, r1
 800889a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d016      	beq.n	80088d8 <HAL_COMP_Init+0xc8>
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d113      	bne.n	80088d8 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80088b0:	4b88      	ldr	r3, [pc, #544]	; (8008ad4 <HAL_COMP_Init+0x2c4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	099b      	lsrs	r3, r3, #6
 80088b6:	4a88      	ldr	r2, [pc, #544]	; (8008ad8 <HAL_COMP_Init+0x2c8>)
 80088b8:	fba2 2303 	umull	r2, r3, r2, r3
 80088bc:	099b      	lsrs	r3, r3, #6
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80088ca:	e002      	b.n	80088d2 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f9      	bne.n	80088cc <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a7f      	ldr	r2, [pc, #508]	; (8008adc <HAL_COMP_Init+0x2cc>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d028      	beq.n	8008934 <HAL_COMP_Init+0x124>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a7e      	ldr	r2, [pc, #504]	; (8008ae0 <HAL_COMP_Init+0x2d0>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d020      	beq.n	800892e <HAL_COMP_Init+0x11e>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a7c      	ldr	r2, [pc, #496]	; (8008ae4 <HAL_COMP_Init+0x2d4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d018      	beq.n	8008928 <HAL_COMP_Init+0x118>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a7b      	ldr	r2, [pc, #492]	; (8008ae8 <HAL_COMP_Init+0x2d8>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d010      	beq.n	8008922 <HAL_COMP_Init+0x112>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a79      	ldr	r2, [pc, #484]	; (8008aec <HAL_COMP_Init+0x2dc>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d008      	beq.n	800891c <HAL_COMP_Init+0x10c>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a78      	ldr	r2, [pc, #480]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d101      	bne.n	8008918 <HAL_COMP_Init+0x108>
 8008914:	2301      	movs	r3, #1
 8008916:	e00f      	b.n	8008938 <HAL_COMP_Init+0x128>
 8008918:	2302      	movs	r3, #2
 800891a:	e00d      	b.n	8008938 <HAL_COMP_Init+0x128>
 800891c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008920:	e00a      	b.n	8008938 <HAL_COMP_Init+0x128>
 8008922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008926:	e007      	b.n	8008938 <HAL_COMP_Init+0x128>
 8008928:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800892c:	e004      	b.n	8008938 <HAL_COMP_Init+0x128>
 800892e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008932:	e001      	b.n	8008938 <HAL_COMP_Init+0x128>
 8008934:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008938:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 80b6 	beq.w	8008ab4 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b00      	cmp	r3, #0
 8008952:	d011      	beq.n	8008978 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a65      	ldr	r2, [pc, #404]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d004      	beq.n	8008968 <HAL_COMP_Init+0x158>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a64      	ldr	r2, [pc, #400]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d103      	bne.n	8008970 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8008968:	6938      	ldr	r0, [r7, #16]
 800896a:	f7ff feab 	bl	80086c4 <LL_EXTI_EnableRisingTrig_32_63>
 800896e:	e014      	b.n	800899a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8008970:	6938      	ldr	r0, [r7, #16]
 8008972:	f7ff fe95 	bl	80086a0 <LL_EXTI_EnableRisingTrig_0_31>
 8008976:	e010      	b.n	800899a <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a5c      	ldr	r2, [pc, #368]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d004      	beq.n	800898c <HAL_COMP_Init+0x17c>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a5b      	ldr	r2, [pc, #364]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d103      	bne.n	8008994 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800898c:	6938      	ldr	r0, [r7, #16]
 800898e:	f7ff febf 	bl	8008710 <LL_EXTI_DisableRisingTrig_32_63>
 8008992:	e002      	b.n	800899a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8008994:	6938      	ldr	r0, [r7, #16]
 8008996:	f7ff fea7 	bl	80086e8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d011      	beq.n	80089ca <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a51      	ldr	r2, [pc, #324]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d004      	beq.n	80089ba <HAL_COMP_Init+0x1aa>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a4f      	ldr	r2, [pc, #316]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d103      	bne.n	80089c2 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80089ba:	6938      	ldr	r0, [r7, #16]
 80089bc:	f7ff fece 	bl	800875c <LL_EXTI_EnableFallingTrig_32_63>
 80089c0:	e014      	b.n	80089ec <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80089c2:	6938      	ldr	r0, [r7, #16]
 80089c4:	f7ff feb8 	bl	8008738 <LL_EXTI_EnableFallingTrig_0_31>
 80089c8:	e010      	b.n	80089ec <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a48      	ldr	r2, [pc, #288]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d004      	beq.n	80089de <HAL_COMP_Init+0x1ce>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a46      	ldr	r2, [pc, #280]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d103      	bne.n	80089e6 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f7ff fee2 	bl	80087a8 <LL_EXTI_DisableFallingTrig_32_63>
 80089e4:	e002      	b.n	80089ec <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80089e6:	6938      	ldr	r0, [r7, #16]
 80089e8:	f7ff feca 	bl	8008780 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a3f      	ldr	r2, [pc, #252]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d004      	beq.n	8008a00 <HAL_COMP_Init+0x1f0>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a3e      	ldr	r2, [pc, #248]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d103      	bne.n	8008a08 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8008a00:	6938      	ldr	r0, [r7, #16]
 8008a02:	f7ff fef5 	bl	80087f0 <LL_EXTI_ClearFlag_32_63>
 8008a06:	e002      	b.n	8008a0e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8008a08:	6938      	ldr	r0, [r7, #16]
 8008a0a:	f7ff fee1 	bl	80087d0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a34      	ldr	r2, [pc, #208]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <HAL_COMP_Init+0x21e>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a32      	ldr	r2, [pc, #200]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d103      	bne.n	8008a36 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8008a2e:	6938      	ldr	r0, [r7, #16]
 8008a30:	f7ff fdfc 	bl	800862c <LL_EXTI_EnableEvent_32_63>
 8008a34:	e014      	b.n	8008a60 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8008a36:	6938      	ldr	r0, [r7, #16]
 8008a38:	f7ff fde6 	bl	8008608 <LL_EXTI_EnableEvent_0_31>
 8008a3c:	e010      	b.n	8008a60 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a2b      	ldr	r2, [pc, #172]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d004      	beq.n	8008a52 <HAL_COMP_Init+0x242>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a29      	ldr	r2, [pc, #164]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d103      	bne.n	8008a5a <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8008a52:	6938      	ldr	r0, [r7, #16]
 8008a54:	f7ff fe10 	bl	8008678 <LL_EXTI_DisableEvent_32_63>
 8008a58:	e002      	b.n	8008a60 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8008a5a:	6938      	ldr	r0, [r7, #16]
 8008a5c:	f7ff fdf8 	bl	8008650 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d011      	beq.n	8008a90 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <HAL_COMP_Init+0x270>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d103      	bne.n	8008a88 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8008a80:	6938      	ldr	r0, [r7, #16]
 8008a82:	f7ff fd87 	bl	8008594 <LL_EXTI_EnableIT_32_63>
 8008a86:	e04b      	b.n	8008b20 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8008a88:	6938      	ldr	r0, [r7, #16]
 8008a8a:	f7ff fd71 	bl	8008570 <LL_EXTI_EnableIT_0_31>
 8008a8e:	e047      	b.n	8008b20 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a16      	ldr	r2, [pc, #88]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d004      	beq.n	8008aa4 <HAL_COMP_Init+0x294>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a15      	ldr	r2, [pc, #84]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d103      	bne.n	8008aac <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8008aa4:	6938      	ldr	r0, [r7, #16]
 8008aa6:	f7ff fd9b 	bl	80085e0 <LL_EXTI_DisableIT_32_63>
 8008aaa:	e039      	b.n	8008b20 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8008aac:	6938      	ldr	r0, [r7, #16]
 8008aae:	f7ff fd83 	bl	80085b8 <LL_EXTI_DisableIT_0_31>
 8008ab2:	e035      	b.n	8008b20 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a0d      	ldr	r2, [pc, #52]	; (8008af0 <HAL_COMP_Init+0x2e0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d004      	beq.n	8008ac8 <HAL_COMP_Init+0x2b8>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a0c      	ldr	r2, [pc, #48]	; (8008af4 <HAL_COMP_Init+0x2e4>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d117      	bne.n	8008af8 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8008ac8:	6938      	ldr	r0, [r7, #16]
 8008aca:	f7ff fdd5 	bl	8008678 <LL_EXTI_DisableEvent_32_63>
 8008ace:	e016      	b.n	8008afe <HAL_COMP_Init+0x2ee>
 8008ad0:	ff007e0f 	.word	0xff007e0f
 8008ad4:	20000000 	.word	0x20000000
 8008ad8:	053e2d63 	.word	0x053e2d63
 8008adc:	40010200 	.word	0x40010200
 8008ae0:	40010204 	.word	0x40010204
 8008ae4:	40010208 	.word	0x40010208
 8008ae8:	4001020c 	.word	0x4001020c
 8008aec:	40010210 	.word	0x40010210
 8008af0:	40010214 	.word	0x40010214
 8008af4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8008af8:	6938      	ldr	r0, [r7, #16]
 8008afa:	f7ff fda9 	bl	8008650 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a0e      	ldr	r2, [pc, #56]	; (8008b3c <HAL_COMP_Init+0x32c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d004      	beq.n	8008b12 <HAL_COMP_Init+0x302>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a0c      	ldr	r2, [pc, #48]	; (8008b40 <HAL_COMP_Init+0x330>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d103      	bne.n	8008b1a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8008b12:	6938      	ldr	r0, [r7, #16]
 8008b14:	f7ff fd64 	bl	80085e0 <LL_EXTI_DisableIT_32_63>
 8008b18:	e002      	b.n	8008b20 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f7ff fd4c 	bl	80085b8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	7f5b      	ldrb	r3, [r3, #29]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d102      	bne.n	8008b30 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8008b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	40010214 	.word	0x40010214
 8008b40:	40010218 	.word	0x40010218

08008b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <__NVIC_SetPriorityGrouping+0x44>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b60:	4013      	ands	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b76:	4a04      	ldr	r2, [pc, #16]	; (8008b88 <__NVIC_SetPriorityGrouping+0x44>)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	60d3      	str	r3, [r2, #12]
}
 8008b7c:	bf00      	nop
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	e000ed00 	.word	0xe000ed00

08008b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b90:	4b04      	ldr	r3, [pc, #16]	; (8008ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	f003 0307 	and.w	r3, r3, #7
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	e000ed00 	.word	0xe000ed00

08008ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	db0b      	blt.n	8008bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	f003 021f 	and.w	r2, r3, #31
 8008bc0:	4907      	ldr	r1, [pc, #28]	; (8008be0 <__NVIC_EnableIRQ+0x38>)
 8008bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	2001      	movs	r0, #1
 8008bca:	fa00 f202 	lsl.w	r2, r0, r2
 8008bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	e000e100 	.word	0xe000e100

08008be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	db0a      	blt.n	8008c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	490c      	ldr	r1, [pc, #48]	; (8008c30 <__NVIC_SetPriority+0x4c>)
 8008bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c02:	0112      	lsls	r2, r2, #4
 8008c04:	b2d2      	uxtb	r2, r2
 8008c06:	440b      	add	r3, r1
 8008c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c0c:	e00a      	b.n	8008c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	4908      	ldr	r1, [pc, #32]	; (8008c34 <__NVIC_SetPriority+0x50>)
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	3b04      	subs	r3, #4
 8008c1c:	0112      	lsls	r2, r2, #4
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	440b      	add	r3, r1
 8008c22:	761a      	strb	r2, [r3, #24]
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	e000e100 	.word	0xe000e100
 8008c34:	e000ed00 	.word	0xe000ed00

08008c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b089      	sub	sp, #36	; 0x24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f1c3 0307 	rsb	r3, r3, #7
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	bf28      	it	cs
 8008c56:	2304      	movcs	r3, #4
 8008c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d902      	bls.n	8008c68 <NVIC_EncodePriority+0x30>
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	3b03      	subs	r3, #3
 8008c66:	e000      	b.n	8008c6a <NVIC_EncodePriority+0x32>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	43da      	mvns	r2, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	401a      	ands	r2, r3
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c80:	f04f 31ff 	mov.w	r1, #4294967295
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	fa01 f303 	lsl.w	r3, r1, r3
 8008c8a:	43d9      	mvns	r1, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c90:	4313      	orrs	r3, r2
         );
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3724      	adds	r7, #36	; 0x24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cb0:	d301      	bcc.n	8008cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e00f      	b.n	8008cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ce0 <SysTick_Config+0x40>)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cbe:	210f      	movs	r1, #15
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	f7ff ff8e 	bl	8008be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <SysTick_Config+0x40>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cce:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <SysTick_Config+0x40>)
 8008cd0:	2207      	movs	r2, #7
 8008cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	e000e010 	.word	0xe000e010

08008ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff ff29 	bl	8008b44 <__NVIC_SetPriorityGrouping>
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b086      	sub	sp, #24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	4603      	mov	r3, r0
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
 8008d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d08:	f7ff ff40 	bl	8008b8c <__NVIC_GetPriorityGrouping>
 8008d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	6978      	ldr	r0, [r7, #20]
 8008d14:	f7ff ff90 	bl	8008c38 <NVIC_EncodePriority>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff ff5f 	bl	8008be4 <__NVIC_SetPriority>
}
 8008d26:	bf00      	nop
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	4603      	mov	r3, r0
 8008d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff ff33 	bl	8008ba8 <__NVIC_EnableIRQ>
}
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff ffa4 	bl	8008ca0 <SysTick_Config>
 8008d58:	4603      	mov	r3, r0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e014      	b.n	8008d9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	791b      	ldrb	r3, [r3, #4]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d105      	bne.n	8008d8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7fd f951 	bl	800602c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	795b      	ldrb	r3, [r3, #5]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_DAC_ConfigChannel+0x18>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e192      	b.n	80090e6 <HAL_DAC_ConfigChannel+0x33e>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d174      	bne.n	8008ebe <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008dd4:	f7fd ff50 	bl	8006c78 <HAL_GetTick>
 8008dd8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d134      	bne.n	8008e4a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008de0:	e011      	b.n	8008e06 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008de2:	f7fd ff49 	bl	8006c78 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d90a      	bls.n	8008e06 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f043 0208 	orr.w	r2, r3, #8
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2203      	movs	r2, #3
 8008e00:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e16f      	b.n	80090e6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e6      	bne.n	8008de2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8008e14:	2001      	movs	r0, #1
 8008e16:	f7fd ff3b 	bl	8006c90 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40
 8008e24:	e01e      	b.n	8008e64 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008e26:	f7fd ff27 	bl	8006c78 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d90a      	bls.n	8008e4a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	f043 0208 	orr.w	r2, r3, #8
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2203      	movs	r2, #3
 8008e44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e14d      	b.n	80090e6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dbe8      	blt.n	8008e26 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8008e54:	2001      	movs	r0, #1
 8008e56:	f7fd ff1b 	bl	8006c90 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e62:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008e74:	fa01 f303 	lsl.w	r3, r1, r3
 8008e78:	43db      	mvns	r3, r3
 8008e7a:	ea02 0103 	and.w	r1, r2, r3
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	409a      	lsls	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	21ff      	movs	r1, #255	; 0xff
 8008ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea4:	43db      	mvns	r3, r3
 8008ea6:	ea02 0103 	and.w	r1, r2, r3
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f003 0310 	and.w	r3, r3, #16
 8008eb4:	409a      	lsls	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d11d      	bne.n	8008f02 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f003 0310 	and.w	r3, r3, #16
 8008ed4:	221f      	movs	r2, #31
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	43db      	mvns	r3, r3
 8008edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ede:	4013      	ands	r3, r2
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f003 0310 	and.w	r3, r3, #16
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2207      	movs	r2, #7
 8008f12:	fa02 f303 	lsl.w	r3, r2, r3
 8008f16:	43db      	mvns	r3, r3
 8008f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d102      	bne.n	8008f2c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	623b      	str	r3, [r7, #32]
 8008f2a:	e00f      	b.n	8008f4c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d102      	bne.n	8008f3a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008f34:	2301      	movs	r3, #1
 8008f36:	623b      	str	r3, [r7, #32]
 8008f38:	e008      	b.n	8008f4c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008f42:	2301      	movs	r3, #1
 8008f44:	623b      	str	r3, [r7, #32]
 8008f46:	e001      	b.n	8008f4c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	6a3a      	ldr	r2, [r7, #32]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f6e:	4013      	ands	r3, r2
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	791b      	ldrb	r3, [r3, #4]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d102      	bne.n	8008f80 <HAL_DAC_ConfigChannel+0x1d8>
 8008f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f7e:	e000      	b.n	8008f82 <HAL_DAC_ConfigChannel+0x1da>
 8008f80:	2300      	movs	r3, #0
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f003 0310 	and.w	r3, r3, #16
 8008f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f92:	fa02 f303 	lsl.w	r3, r2, r3
 8008f96:	43db      	mvns	r3, r3
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	795b      	ldrb	r3, [r3, #5]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d102      	bne.n	8008fac <HAL_DAC_ConfigChannel+0x204>
 8008fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008faa:	e000      	b.n	8008fae <HAL_DAC_ConfigChannel+0x206>
 8008fac:	2300      	movs	r3, #0
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d114      	bne.n	8008fee <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008fc4:	f004 f94a 	bl	800d25c <HAL_RCC_GetHCLKFreq>
 8008fc8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	4a48      	ldr	r2, [pc, #288]	; (80090f0 <HAL_DAC_ConfigChannel+0x348>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d904      	bls.n	8008fdc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fda:	e00f      	b.n	8008ffc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	4a45      	ldr	r2, [pc, #276]	; (80090f4 <HAL_DAC_ConfigChannel+0x34c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d90a      	bls.n	8008ffa <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
 8008fec:	e006      	b.n	8008ffc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff8:	e000      	b.n	8008ffc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008ffa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f003 0310 	and.w	r3, r3, #16
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	fa02 f303 	lsl.w	r3, r2, r3
 8009008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900a:	4313      	orrs	r3, r2
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6819      	ldr	r1, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43da      	mvns	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	400a      	ands	r2, r1
 8009032:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f003 0310 	and.w	r3, r3, #16
 8009042:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009046:	fa02 f303 	lsl.w	r3, r2, r3
 800904a:	43db      	mvns	r3, r3
 800904c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904e:	4013      	ands	r3, r2
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f003 0310 	and.w	r3, r3, #16
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009066:	4313      	orrs	r3, r2
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009070:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6819      	ldr	r1, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	22c0      	movs	r2, #192	; 0xc0
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	43da      	mvns	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	400a      	ands	r2, r1
 800908c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	089b      	lsrs	r3, r3, #2
 80090a0:	021b      	lsls	r3, r3, #8
 80090a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f003 0310 	and.w	r3, r3, #16
 80090b8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80090bc:	fa01 f303 	lsl.w	r3, r1, r3
 80090c0:	43db      	mvns	r3, r3
 80090c2:	ea02 0103 	and.w	r1, r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	409a      	lsls	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3728      	adds	r7, #40	; 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	09896800 	.word	0x09896800
 80090f4:	04c4b400 	.word	0x04c4b400

080090f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e08d      	b.n	8009226 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	4b47      	ldr	r3, [pc, #284]	; (8009230 <HAL_DMA_Init+0x138>)
 8009112:	429a      	cmp	r2, r3
 8009114:	d80f      	bhi.n	8009136 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	4b45      	ldr	r3, [pc, #276]	; (8009234 <HAL_DMA_Init+0x13c>)
 800911e:	4413      	add	r3, r2
 8009120:	4a45      	ldr	r2, [pc, #276]	; (8009238 <HAL_DMA_Init+0x140>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	091b      	lsrs	r3, r3, #4
 8009128:	009a      	lsls	r2, r3, #2
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a42      	ldr	r2, [pc, #264]	; (800923c <HAL_DMA_Init+0x144>)
 8009132:	641a      	str	r2, [r3, #64]	; 0x40
 8009134:	e00e      	b.n	8009154 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	4b40      	ldr	r3, [pc, #256]	; (8009240 <HAL_DMA_Init+0x148>)
 800913e:	4413      	add	r3, r2
 8009140:	4a3d      	ldr	r2, [pc, #244]	; (8009238 <HAL_DMA_Init+0x140>)
 8009142:	fba2 2303 	umull	r2, r3, r2, r3
 8009146:	091b      	lsrs	r3, r3, #4
 8009148:	009a      	lsls	r2, r3, #2
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a3c      	ldr	r2, [pc, #240]	; (8009244 <HAL_DMA_Init+0x14c>)
 8009152:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800916a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa76 	bl	8009698 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091b4:	d102      	bne.n	80091bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80091d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d010      	beq.n	80091fc <HAL_DMA_Init+0x104>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d80c      	bhi.n	80091fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa96 	bl	8009714 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ec:	2200      	movs	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	e008      	b.n	800920e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40020407 	.word	0x40020407
 8009234:	bffdfff8 	.word	0xbffdfff8
 8009238:	cccccccd 	.word	0xcccccccd
 800923c:	40020000 	.word	0x40020000
 8009240:	bffdfbf8 	.word	0xbffdfbf8
 8009244:	40020400 	.word	0x40020400

08009248 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_DMA_Start_IT+0x20>
 8009264:	2302      	movs	r3, #2
 8009266:	e066      	b.n	8009336 <HAL_DMA_Start_IT+0xee>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b01      	cmp	r3, #1
 800927a:	d155      	bne.n	8009328 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0201 	bic.w	r2, r2, #1
 8009298:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f9bb 	bl	800961c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f042 020e 	orr.w	r2, r2, #14
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	e00f      	b.n	80092e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0204 	bic.w	r2, r2, #4
 80092ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 020a 	orr.w	r2, r2, #10
 80092de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d007      	beq.n	80092fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009302:	2b00      	cmp	r3, #0
 8009304:	d007      	beq.n	8009316 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009314:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0201 	orr.w	r2, r2, #1
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	e005      	b.n	8009334 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009330:	2302      	movs	r3, #2
 8009332:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d005      	beq.n	8009362 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2204      	movs	r2, #4
 800935a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	73fb      	strb	r3, [r7, #15]
 8009360:	e037      	b.n	80093d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 020e 	bic.w	r2, r2, #14
 8009370:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009380:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0201 	bic.w	r2, r2, #1
 8009390:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	f003 021f 	and.w	r2, r3, #31
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	2101      	movs	r1, #1
 80093a0:	fa01 f202 	lsl.w	r2, r1, r2
 80093a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80093ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00c      	beq.n	80093d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80093d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b02      	cmp	r3, #2
 8009406:	d00d      	beq.n	8009424 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2204      	movs	r2, #4
 800940c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	73fb      	strb	r3, [r7, #15]
 8009422:	e047      	b.n	80094b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 020e 	bic.w	r2, r2, #14
 8009432:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0201 	bic.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800944e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009458:	f003 021f 	and.w	r2, r3, #31
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	2101      	movs	r1, #1
 8009462:	fa01 f202 	lsl.w	r2, r1, r2
 8009466:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009470:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009488:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009492:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
    }
  }
  return status;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	2204      	movs	r2, #4
 80094e0:	409a      	lsls	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4013      	ands	r3, r2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d026      	beq.n	8009538 <HAL_DMA_IRQHandler+0x7a>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d021      	beq.n	8009538 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d107      	bne.n	8009512 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0204 	bic.w	r2, r2, #4
 8009510:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009516:	f003 021f 	and.w	r2, r3, #31
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951e:	2104      	movs	r1, #4
 8009520:	fa01 f202 	lsl.w	r2, r1, r2
 8009524:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952a:	2b00      	cmp	r3, #0
 800952c:	d071      	beq.n	8009612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009536:	e06c      	b.n	8009612 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953c:	f003 031f 	and.w	r3, r3, #31
 8009540:	2202      	movs	r2, #2
 8009542:	409a      	lsls	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4013      	ands	r3, r2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d02e      	beq.n	80095aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d029      	beq.n	80095aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10b      	bne.n	800957c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 020a 	bic.w	r2, r2, #10
 8009572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	f003 021f 	and.w	r2, r3, #31
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009588:	2102      	movs	r1, #2
 800958a:	fa01 f202 	lsl.w	r2, r1, r2
 800958e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	2b00      	cmp	r3, #0
 800959e:	d038      	beq.n	8009612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80095a8:	e033      	b.n	8009612 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ae:	f003 031f 	and.w	r3, r3, #31
 80095b2:	2208      	movs	r2, #8
 80095b4:	409a      	lsls	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4013      	ands	r3, r2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d02a      	beq.n	8009614 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f003 0308 	and.w	r3, r3, #8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d025      	beq.n	8009614 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 020e 	bic.w	r2, r2, #14
 80095d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095dc:	f003 021f 	and.w	r2, r3, #31
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e4:	2101      	movs	r1, #1
 80095e6:	fa01 f202 	lsl.w	r2, r1, r2
 80095ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009606:	2b00      	cmp	r3, #0
 8009608:	d004      	beq.n	8009614 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009612:	bf00      	nop
 8009614:	bf00      	nop
}
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009632:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009644:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964a:	f003 021f 	and.w	r2, r3, #31
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	2101      	movs	r1, #1
 8009654:	fa01 f202 	lsl.w	r2, r1, r2
 8009658:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	2b10      	cmp	r3, #16
 8009668:	d108      	bne.n	800967c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800967a:	e007      	b.n	800968c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	60da      	str	r2, [r3, #12]
}
 800968c:	bf00      	nop
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	4b16      	ldr	r3, [pc, #88]	; (8009700 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d802      	bhi.n	80096b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80096ac:	4b15      	ldr	r3, [pc, #84]	; (8009704 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80096ae:	617b      	str	r3, [r7, #20]
 80096b0:	e001      	b.n	80096b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80096b2:	4b15      	ldr	r3, [pc, #84]	; (8009708 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80096b4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	3b08      	subs	r3, #8
 80096c2:	4a12      	ldr	r2, [pc, #72]	; (800970c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80096c4:	fba2 2303 	umull	r2, r3, r2, r3
 80096c8:	091b      	lsrs	r3, r3, #4
 80096ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d0:	089b      	lsrs	r3, r3, #2
 80096d2:	009a      	lsls	r2, r3, #2
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	4413      	add	r3, r2
 80096d8:	461a      	mov	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a0b      	ldr	r2, [pc, #44]	; (8009710 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80096e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f003 031f 	and.w	r3, r3, #31
 80096ea:	2201      	movs	r2, #1
 80096ec:	409a      	lsls	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80096f2:	bf00      	nop
 80096f4:	371c      	adds	r7, #28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40020407 	.word	0x40020407
 8009704:	40020800 	.word	0x40020800
 8009708:	40020820 	.word	0x40020820
 800970c:	cccccccd 	.word	0xcccccccd
 8009710:	40020880 	.word	0x40020880

08009714 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	461a      	mov	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a08      	ldr	r2, [pc, #32]	; (8009758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009736:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3b01      	subs	r3, #1
 800973c:	f003 031f 	and.w	r3, r3, #31
 8009740:	2201      	movs	r2, #1
 8009742:	409a      	lsls	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009748:	bf00      	nop
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	1000823f 	.word	0x1000823f
 8009758:	40020940 	.word	0x40020940

0800975c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009766:	2300      	movs	r3, #0
 8009768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800976a:	e15a      	b.n	8009a22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	2101      	movs	r1, #1
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	fa01 f303 	lsl.w	r3, r1, r3
 8009778:	4013      	ands	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 814c 	beq.w	8009a1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	2b01      	cmp	r3, #1
 800978e:	d005      	beq.n	800979c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009798:	2b02      	cmp	r3, #2
 800979a:	d130      	bne.n	80097fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	2203      	movs	r2, #3
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	43db      	mvns	r3, r3
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	4013      	ands	r3, r2
 80097b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	68da      	ldr	r2, [r3, #12]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	fa02 f303 	lsl.w	r3, r2, r3
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80097d2:	2201      	movs	r2, #1
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	43db      	mvns	r3, r3
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	4013      	ands	r3, r2
 80097e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	091b      	lsrs	r3, r3, #4
 80097e8:	f003 0201 	and.w	r2, r3, #1
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	fa02 f303 	lsl.w	r3, r2, r3
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	2b03      	cmp	r3, #3
 8009808:	d017      	beq.n	800983a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	2203      	movs	r2, #3
 8009816:	fa02 f303 	lsl.w	r3, r2, r3
 800981a:	43db      	mvns	r3, r3
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4013      	ands	r3, r2
 8009820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	689a      	ldr	r2, [r3, #8]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	fa02 f303 	lsl.w	r3, r2, r3
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d123      	bne.n	800988e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	08da      	lsrs	r2, r3, #3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	3208      	adds	r2, #8
 800984e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	220f      	movs	r2, #15
 800985e:	fa02 f303 	lsl.w	r3, r2, r3
 8009862:	43db      	mvns	r3, r3
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4013      	ands	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f003 0307 	and.w	r3, r3, #7
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	fa02 f303 	lsl.w	r3, r2, r3
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	08da      	lsrs	r2, r3, #3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3208      	adds	r2, #8
 8009888:	6939      	ldr	r1, [r7, #16]
 800988a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	2203      	movs	r2, #3
 800989a:	fa02 f303 	lsl.w	r3, r2, r3
 800989e:	43db      	mvns	r3, r3
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	4013      	ands	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f003 0203 	and.w	r2, r3, #3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	fa02 f303 	lsl.w	r3, r2, r3
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 80a6 	beq.w	8009a1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098d0:	4b5b      	ldr	r3, [pc, #364]	; (8009a40 <HAL_GPIO_Init+0x2e4>)
 80098d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d4:	4a5a      	ldr	r2, [pc, #360]	; (8009a40 <HAL_GPIO_Init+0x2e4>)
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	6613      	str	r3, [r2, #96]	; 0x60
 80098dc:	4b58      	ldr	r3, [pc, #352]	; (8009a40 <HAL_GPIO_Init+0x2e4>)
 80098de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	60bb      	str	r3, [r7, #8]
 80098e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80098e8:	4a56      	ldr	r2, [pc, #344]	; (8009a44 <HAL_GPIO_Init+0x2e8>)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	089b      	lsrs	r3, r3, #2
 80098ee:	3302      	adds	r3, #2
 80098f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f003 0303 	and.w	r3, r3, #3
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	220f      	movs	r2, #15
 8009900:	fa02 f303 	lsl.w	r3, r2, r3
 8009904:	43db      	mvns	r3, r3
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4013      	ands	r3, r2
 800990a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009912:	d01f      	beq.n	8009954 <HAL_GPIO_Init+0x1f8>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a4c      	ldr	r2, [pc, #304]	; (8009a48 <HAL_GPIO_Init+0x2ec>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d019      	beq.n	8009950 <HAL_GPIO_Init+0x1f4>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a4b      	ldr	r2, [pc, #300]	; (8009a4c <HAL_GPIO_Init+0x2f0>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d013      	beq.n	800994c <HAL_GPIO_Init+0x1f0>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a4a      	ldr	r2, [pc, #296]	; (8009a50 <HAL_GPIO_Init+0x2f4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00d      	beq.n	8009948 <HAL_GPIO_Init+0x1ec>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a49      	ldr	r2, [pc, #292]	; (8009a54 <HAL_GPIO_Init+0x2f8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d007      	beq.n	8009944 <HAL_GPIO_Init+0x1e8>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a48      	ldr	r2, [pc, #288]	; (8009a58 <HAL_GPIO_Init+0x2fc>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d101      	bne.n	8009940 <HAL_GPIO_Init+0x1e4>
 800993c:	2305      	movs	r3, #5
 800993e:	e00a      	b.n	8009956 <HAL_GPIO_Init+0x1fa>
 8009940:	2306      	movs	r3, #6
 8009942:	e008      	b.n	8009956 <HAL_GPIO_Init+0x1fa>
 8009944:	2304      	movs	r3, #4
 8009946:	e006      	b.n	8009956 <HAL_GPIO_Init+0x1fa>
 8009948:	2303      	movs	r3, #3
 800994a:	e004      	b.n	8009956 <HAL_GPIO_Init+0x1fa>
 800994c:	2302      	movs	r3, #2
 800994e:	e002      	b.n	8009956 <HAL_GPIO_Init+0x1fa>
 8009950:	2301      	movs	r3, #1
 8009952:	e000      	b.n	8009956 <HAL_GPIO_Init+0x1fa>
 8009954:	2300      	movs	r3, #0
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	f002 0203 	and.w	r2, r2, #3
 800995c:	0092      	lsls	r2, r2, #2
 800995e:	4093      	lsls	r3, r2
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009966:	4937      	ldr	r1, [pc, #220]	; (8009a44 <HAL_GPIO_Init+0x2e8>)
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	089b      	lsrs	r3, r3, #2
 800996c:	3302      	adds	r3, #2
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009974:	4b39      	ldr	r3, [pc, #228]	; (8009a5c <HAL_GPIO_Init+0x300>)
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	43db      	mvns	r3, r3
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	4013      	ands	r3, r2
 8009982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009998:	4a30      	ldr	r2, [pc, #192]	; (8009a5c <HAL_GPIO_Init+0x300>)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800999e:	4b2f      	ldr	r3, [pc, #188]	; (8009a5c <HAL_GPIO_Init+0x300>)
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	43db      	mvns	r3, r3
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	4013      	ands	r3, r2
 80099ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4313      	orrs	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099c2:	4a26      	ldr	r2, [pc, #152]	; (8009a5c <HAL_GPIO_Init+0x300>)
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80099c8:	4b24      	ldr	r3, [pc, #144]	; (8009a5c <HAL_GPIO_Init+0x300>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	43db      	mvns	r3, r3
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	4013      	ands	r3, r2
 80099d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80099ec:	4a1b      	ldr	r2, [pc, #108]	; (8009a5c <HAL_GPIO_Init+0x300>)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80099f2:	4b1a      	ldr	r3, [pc, #104]	; (8009a5c <HAL_GPIO_Init+0x300>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	43db      	mvns	r3, r3
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	4013      	ands	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a16:	4a11      	ldr	r2, [pc, #68]	; (8009a5c <HAL_GPIO_Init+0x300>)
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	fa22 f303 	lsr.w	r3, r2, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f47f ae9d 	bne.w	800976c <HAL_GPIO_Init+0x10>
  }
}
 8009a32:	bf00      	nop
 8009a34:	bf00      	nop
 8009a36:	371c      	adds	r7, #28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	40021000 	.word	0x40021000
 8009a44:	40010000 	.word	0x40010000
 8009a48:	48000400 	.word	0x48000400
 8009a4c:	48000800 	.word	0x48000800
 8009a50:	48000c00 	.word	0x48000c00
 8009a54:	48001000 	.word	0x48001000
 8009a58:	48001400 	.word	0x48001400
 8009a5c:	40010400 	.word	0x40010400

08009a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	807b      	strh	r3, [r7, #2]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a70:	787b      	ldrb	r3, [r7, #1]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a76:	887a      	ldrh	r2, [r7, #2]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009a7c:	e002      	b.n	8009a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009a7e:	887a      	ldrh	r2, [r7, #2]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009aa2:	887a      	ldrh	r2, [r7, #2]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	041a      	lsls	r2, r3, #16
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	43d9      	mvns	r1, r3
 8009aae:	887b      	ldrh	r3, [r7, #2]
 8009ab0:	400b      	ands	r3, r1
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	619a      	str	r2, [r3, #24]
}
 8009ab8:	bf00      	nop
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e081      	b.n	8009bda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7fc fafa 	bl	80060e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2224      	movs	r2, #36	; 0x24
 8009af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0201 	bic.w	r2, r2, #1
 8009b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d107      	bne.n	8009b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b3a:	609a      	str	r2, [r3, #8]
 8009b3c:	e006      	b.n	8009b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689a      	ldr	r2, [r3, #8]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d104      	bne.n	8009b5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6812      	ldr	r2, [r2, #0]
 8009b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691a      	ldr	r2, [r3, #16]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	69d9      	ldr	r1, [r3, #28]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a1a      	ldr	r2, [r3, #32]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0201 	orr.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	817b      	strh	r3, [r7, #10]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	f040 80da 	bne.w	8009dba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_I2C_Master_Transmit+0x30>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e0d3      	b.n	8009dbc <HAL_I2C_Master_Transmit+0x1d8>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c1c:	f7fd f82c 	bl	8006c78 <HAL_GetTick>
 8009c20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	2319      	movs	r3, #25
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fbee 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e0be      	b.n	8009dbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2221      	movs	r2, #33	; 0x21
 8009c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2210      	movs	r2, #16
 8009c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	893a      	ldrh	r2, [r7, #8]
 8009c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	2bff      	cmp	r3, #255	; 0xff
 8009c6e:	d90e      	bls.n	8009c8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	22ff      	movs	r2, #255	; 0xff
 8009c74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	8979      	ldrh	r1, [r7, #10]
 8009c7e:	4b51      	ldr	r3, [pc, #324]	; (8009dc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fd6a 	bl	800a760 <I2C_TransferConfig>
 8009c8c:	e06c      	b.n	8009d68 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	8979      	ldrh	r1, [r7, #10]
 8009ca0:	4b48      	ldr	r3, [pc, #288]	; (8009dc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fd59 	bl	800a760 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009cae:	e05b      	b.n	8009d68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	6a39      	ldr	r1, [r7, #32]
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 fbeb 	bl	800a490 <I2C_WaitOnTXISFlagUntilTimeout>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e07b      	b.n	8009dbc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d034      	beq.n	8009d68 <HAL_I2C_Master_Transmit+0x184>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d130      	bne.n	8009d68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2180      	movs	r1, #128	; 0x80
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fb7d 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e04d      	b.n	8009dbc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2bff      	cmp	r3, #255	; 0xff
 8009d28:	d90e      	bls.n	8009d48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	22ff      	movs	r2, #255	; 0xff
 8009d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	8979      	ldrh	r1, [r7, #10]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fd0d 	bl	800a760 <I2C_TransferConfig>
 8009d46:	e00f      	b.n	8009d68 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	8979      	ldrh	r1, [r7, #10]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 fcfc 	bl	800a760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d19e      	bne.n	8009cb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	6a39      	ldr	r1, [r7, #32]
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 fbca 	bl	800a510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e01a      	b.n	8009dbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6859      	ldr	r1, [r3, #4]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <HAL_I2C_Master_Transmit+0x1e4>)
 8009d9a:	400b      	ands	r3, r1
 8009d9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2220      	movs	r2, #32
 8009da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	e000      	b.n	8009dbc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009dba:	2302      	movs	r3, #2
  }
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	80002000 	.word	0x80002000
 8009dc8:	fe00e800 	.word	0xfe00e800

08009dcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af02      	add	r7, sp, #8
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4603      	mov	r3, r0
 8009ddc:	817b      	strh	r3, [r7, #10]
 8009dde:	460b      	mov	r3, r1
 8009de0:	813b      	strh	r3, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	f040 80f9 	bne.w	8009fe6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <HAL_I2C_Mem_Write+0x34>
 8009dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e0ed      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <HAL_I2C_Mem_Write+0x4e>
 8009e16:	2302      	movs	r3, #2
 8009e18:	e0e6      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e22:	f7fc ff29 	bl	8006c78 <HAL_GetTick>
 8009e26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	2319      	movs	r3, #25
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 faeb 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0d1      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2221      	movs	r2, #33	; 0x21
 8009e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2240      	movs	r2, #64	; 0x40
 8009e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a3a      	ldr	r2, [r7, #32]
 8009e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e6c:	88f8      	ldrh	r0, [r7, #6]
 8009e6e:	893a      	ldrh	r2, [r7, #8]
 8009e70:	8979      	ldrh	r1, [r7, #10]
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f9fb 	bl	800a278 <I2C_RequestMemoryWrite>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d005      	beq.n	8009e94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e0a9      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2bff      	cmp	r3, #255	; 0xff
 8009e9c:	d90e      	bls.n	8009ebc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	22ff      	movs	r2, #255	; 0xff
 8009ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	8979      	ldrh	r1, [r7, #10]
 8009eac:	2300      	movs	r3, #0
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 fc53 	bl	800a760 <I2C_TransferConfig>
 8009eba:	e00f      	b.n	8009edc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	8979      	ldrh	r1, [r7, #10]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 fc42 	bl	800a760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 fad5 	bl	800a490 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e07b      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	781a      	ldrb	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d034      	beq.n	8009f94 <HAL_I2C_Mem_Write+0x1c8>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d130      	bne.n	8009f94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2180      	movs	r1, #128	; 0x80
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 fa67 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e04d      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2bff      	cmp	r3, #255	; 0xff
 8009f54:	d90e      	bls.n	8009f74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	22ff      	movs	r2, #255	; 0xff
 8009f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	8979      	ldrh	r1, [r7, #10]
 8009f64:	2300      	movs	r3, #0
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 fbf7 	bl	800a760 <I2C_TransferConfig>
 8009f72:	e00f      	b.n	8009f94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	8979      	ldrh	r1, [r7, #10]
 8009f86:	2300      	movs	r3, #0
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fbe6 	bl	800a760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d19e      	bne.n	8009edc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fab4 	bl	800a510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e01a      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6859      	ldr	r1, [r3, #4]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <HAL_I2C_Mem_Write+0x224>)
 8009fc6:	400b      	ands	r3, r1
 8009fc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e000      	b.n	8009fe8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009fe6:	2302      	movs	r3, #2
  }
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	fe00e800 	.word	0xfe00e800

08009ff4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	461a      	mov	r2, r3
 800a002:	4603      	mov	r3, r0
 800a004:	817b      	strh	r3, [r7, #10]
 800a006:	460b      	mov	r3, r1
 800a008:	813b      	strh	r3, [r7, #8]
 800a00a:	4613      	mov	r3, r2
 800a00c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b20      	cmp	r3, #32
 800a018:	f040 80fd 	bne.w	800a216 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <HAL_I2C_Mem_Read+0x34>
 800a022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a024:	2b00      	cmp	r3, #0
 800a026:	d105      	bne.n	800a034 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a02e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e0f1      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d101      	bne.n	800a042 <HAL_I2C_Mem_Read+0x4e>
 800a03e:	2302      	movs	r3, #2
 800a040:	e0ea      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a04a:	f7fc fe15 	bl	8006c78 <HAL_GetTick>
 800a04e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	2319      	movs	r3, #25
 800a056:	2201      	movs	r2, #1
 800a058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f9d7 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e0d5      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2222      	movs	r2, #34	; 0x22
 800a070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2240      	movs	r2, #64	; 0x40
 800a078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6a3a      	ldr	r2, [r7, #32]
 800a086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a08c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a094:	88f8      	ldrh	r0, [r7, #6]
 800a096:	893a      	ldrh	r2, [r7, #8]
 800a098:	8979      	ldrh	r1, [r7, #10]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 f93b 	bl	800a320 <I2C_RequestMemoryRead>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d005      	beq.n	800a0bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e0ad      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	2bff      	cmp	r3, #255	; 0xff
 800a0c4:	d90e      	bls.n	800a0e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	22ff      	movs	r2, #255	; 0xff
 800a0ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	8979      	ldrh	r1, [r7, #10]
 800a0d4:	4b52      	ldr	r3, [pc, #328]	; (800a220 <HAL_I2C_Mem_Read+0x22c>)
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 fb3f 	bl	800a760 <I2C_TransferConfig>
 800a0e2:	e00f      	b.n	800a104 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	8979      	ldrh	r1, [r7, #10]
 800a0f6:	4b4a      	ldr	r3, [pc, #296]	; (800a220 <HAL_I2C_Mem_Read+0x22c>)
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 fb2e 	bl	800a760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	2200      	movs	r2, #0
 800a10c:	2104      	movs	r1, #4
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 f97e 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e07c      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	b2d2      	uxtb	r2, r2
 800a12a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a13a:	3b01      	subs	r3, #1
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a146:	b29b      	uxth	r3, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a154:	b29b      	uxth	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d034      	beq.n	800a1c4 <HAL_I2C_Mem_Read+0x1d0>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d130      	bne.n	800a1c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	2200      	movs	r2, #0
 800a16a:	2180      	movs	r1, #128	; 0x80
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f94f 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e04d      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a180:	b29b      	uxth	r3, r3
 800a182:	2bff      	cmp	r3, #255	; 0xff
 800a184:	d90e      	bls.n	800a1a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	22ff      	movs	r2, #255	; 0xff
 800a18a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a190:	b2da      	uxtb	r2, r3
 800a192:	8979      	ldrh	r1, [r7, #10]
 800a194:	2300      	movs	r3, #0
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fadf 	bl	800a760 <I2C_TransferConfig>
 800a1a2:	e00f      	b.n	800a1c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	8979      	ldrh	r1, [r7, #10]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 face 	bl	800a760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d19a      	bne.n	800a104 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 f99c 	bl	800a510 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e01a      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6859      	ldr	r1, [r3, #4]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <HAL_I2C_Mem_Read+0x230>)
 800a1f6:	400b      	ands	r3, r1
 800a1f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	e000      	b.n	800a218 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a216:	2302      	movs	r3, #2
  }
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	80002400 	.word	0x80002400
 800a224:	fe00e800 	.word	0xfe00e800

0800a228 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a244:	2b00      	cmp	r3, #0
 800a246:	d005      	beq.n	800a254 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	68f9      	ldr	r1, [r7, #12]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	4798      	blx	r3
  }
}
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a26a:	b2db      	uxtb	r3, r3
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	4608      	mov	r0, r1
 800a282:	4611      	mov	r1, r2
 800a284:	461a      	mov	r2, r3
 800a286:	4603      	mov	r3, r0
 800a288:	817b      	strh	r3, [r7, #10]
 800a28a:	460b      	mov	r3, r1
 800a28c:	813b      	strh	r3, [r7, #8]
 800a28e:	4613      	mov	r3, r2
 800a290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	b2da      	uxtb	r2, r3
 800a296:	8979      	ldrh	r1, [r7, #10]
 800a298:	4b20      	ldr	r3, [pc, #128]	; (800a31c <I2C_RequestMemoryWrite+0xa4>)
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 fa5d 	bl	800a760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	69b9      	ldr	r1, [r7, #24]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f8f0 	bl	800a490 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e02c      	b.n	800a314 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d105      	bne.n	800a2cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2c0:	893b      	ldrh	r3, [r7, #8]
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	629a      	str	r2, [r3, #40]	; 0x28
 800a2ca:	e015      	b.n	800a2f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a2cc:	893b      	ldrh	r3, [r7, #8]
 800a2ce:	0a1b      	lsrs	r3, r3, #8
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2da:	69fa      	ldr	r2, [r7, #28]
 800a2dc:	69b9      	ldr	r1, [r7, #24]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f8d6 	bl	800a490 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e012      	b.n	800a314 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2200      	movs	r2, #0
 800a300:	2180      	movs	r1, #128	; 0x80
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 f884 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	80002000 	.word	0x80002000

0800a320 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	4608      	mov	r0, r1
 800a32a:	4611      	mov	r1, r2
 800a32c:	461a      	mov	r2, r3
 800a32e:	4603      	mov	r3, r0
 800a330:	817b      	strh	r3, [r7, #10]
 800a332:	460b      	mov	r3, r1
 800a334:	813b      	strh	r3, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a33a:	88fb      	ldrh	r3, [r7, #6]
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	8979      	ldrh	r1, [r7, #10]
 800a340:	4b20      	ldr	r3, [pc, #128]	; (800a3c4 <I2C_RequestMemoryRead+0xa4>)
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	2300      	movs	r3, #0
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fa0a 	bl	800a760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	69b9      	ldr	r1, [r7, #24]
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 f89d 	bl	800a490 <I2C_WaitOnTXISFlagUntilTimeout>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e02c      	b.n	800a3ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a360:	88fb      	ldrh	r3, [r7, #6]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d105      	bne.n	800a372 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a366:	893b      	ldrh	r3, [r7, #8]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	629a      	str	r2, [r3, #40]	; 0x28
 800a370:	e015      	b.n	800a39e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a372:	893b      	ldrh	r3, [r7, #8]
 800a374:	0a1b      	lsrs	r3, r3, #8
 800a376:	b29b      	uxth	r3, r3
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a380:	69fa      	ldr	r2, [r7, #28]
 800a382:	69b9      	ldr	r1, [r7, #24]
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f883 	bl	800a490 <I2C_WaitOnTXISFlagUntilTimeout>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e012      	b.n	800a3ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a394:	893b      	ldrh	r3, [r7, #8]
 800a396:	b2da      	uxtb	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2140      	movs	r1, #64	; 0x40
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f831 	bl	800a410 <I2C_WaitOnFlagUntilTimeout>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e000      	b.n	800a3ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	80002000 	.word	0x80002000

0800a3c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d103      	bne.n	800a3e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d007      	beq.n	800a404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	699a      	ldr	r2, [r3, #24]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0201 	orr.w	r2, r2, #1
 800a402:	619a      	str	r2, [r3, #24]
  }
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a420:	e022      	b.n	800a468 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d01e      	beq.n	800a468 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42a:	f7fc fc25 	bl	8006c78 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d113      	bne.n	800a468 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2220      	movs	r2, #32
 800a450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e00f      	b.n	800a488 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4013      	ands	r3, r2
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	429a      	cmp	r2, r3
 800a476:	bf0c      	ite	eq
 800a478:	2301      	moveq	r3, #1
 800a47a:	2300      	movne	r3, #0
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	461a      	mov	r2, r3
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	429a      	cmp	r2, r3
 800a484:	d0cd      	beq.n	800a422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a49c:	e02c      	b.n	800a4f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 f870 	bl	800a588 <I2C_IsErrorOccurred>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e02a      	b.n	800a508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b8:	d01e      	beq.n	800a4f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ba:	f7fc fbdd 	bl	8006c78 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d302      	bcc.n	800a4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d113      	bne.n	800a4f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e007      	b.n	800a508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b02      	cmp	r3, #2
 800a504:	d1cb      	bne.n	800a49e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a51c:	e028      	b.n	800a570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 f830 	bl	800a588 <I2C_IsErrorOccurred>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e026      	b.n	800a580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a532:	f7fc fba1 	bl	8006c78 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d302      	bcc.n	800a548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d113      	bne.n	800a570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54c:	f043 0220 	orr.w	r2, r3, #32
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e007      	b.n	800a580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	d1cf      	bne.n	800a51e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08a      	sub	sp, #40	; 0x28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f003 0310 	and.w	r3, r3, #16
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d075      	beq.n	800a6a0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2210      	movs	r2, #16
 800a5ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a5bc:	e056      	b.n	800a66c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c4:	d052      	beq.n	800a66c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a5c6:	f7fc fb57 	bl	8006c78 <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d302      	bcc.n	800a5dc <I2C_IsErrorOccurred+0x54>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d147      	bne.n	800a66c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5fe:	d12e      	bne.n	800a65e <I2C_IsErrorOccurred+0xd6>
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a606:	d02a      	beq.n	800a65e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a608:	7cfb      	ldrb	r3, [r7, #19]
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	d027      	beq.n	800a65e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a61c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a61e:	f7fc fb2b 	bl	8006c78 <HAL_GetTick>
 800a622:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a624:	e01b      	b.n	800a65e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a626:	f7fc fb27 	bl	8006c78 <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	2b19      	cmp	r3, #25
 800a632:	d914      	bls.n	800a65e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a638:	f043 0220 	orr.w	r2, r3, #32
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2220      	movs	r2, #32
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b20      	cmp	r3, #32
 800a66a:	d1dc      	bne.n	800a626 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b20      	cmp	r3, #32
 800a678:	d003      	beq.n	800a682 <I2C_IsErrorOccurred+0xfa>
 800a67a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d09d      	beq.n	800a5be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a686:	2b00      	cmp	r3, #0
 800a688:	d103      	bne.n	800a692 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2220      	movs	r2, #32
 800a690:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	f043 0304 	orr.w	r3, r3, #4
 800a698:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00b      	beq.n	800a6ca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
 800a6b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	f043 0308 	orr.w	r3, r3, #8
 800a6da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00b      	beq.n	800a70e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	f043 0302 	orr.w	r3, r3, #2
 800a6fc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a706:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a712:	2b00      	cmp	r3, #0
 800a714:	d01c      	beq.n	800a750 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7ff fe56 	bl	800a3c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6859      	ldr	r1, [r3, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <I2C_IsErrorOccurred+0x1d4>)
 800a728:	400b      	ands	r3, r1
 800a72a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	431a      	orrs	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2220      	movs	r2, #32
 800a73c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a754:	4618      	mov	r0, r3
 800a756:	3728      	adds	r7, #40	; 0x28
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	fe00e800 	.word	0xfe00e800

0800a760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	607b      	str	r3, [r7, #4]
 800a76a:	460b      	mov	r3, r1
 800a76c:	817b      	strh	r3, [r7, #10]
 800a76e:	4613      	mov	r3, r2
 800a770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a772:	897b      	ldrh	r3, [r7, #10]
 800a774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a778:	7a7b      	ldrb	r3, [r7, #9]
 800a77a:	041b      	lsls	r3, r3, #16
 800a77c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a780:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	4313      	orrs	r3, r2
 800a78a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a78e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	0d5b      	lsrs	r3, r3, #21
 800a79a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a79e:	4b08      	ldr	r3, [pc, #32]	; (800a7c0 <I2C_TransferConfig+0x60>)
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	43db      	mvns	r3, r3
 800a7a4:	ea02 0103 	and.w	r1, r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	03ff63ff 	.word	0x03ff63ff

0800a7c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d138      	bne.n	800a84c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e032      	b.n	800a84e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2224      	movs	r2, #36	; 0x24
 800a7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f022 0201 	bic.w	r2, r2, #1
 800a806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6819      	ldr	r1, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0201 	orr.w	r2, r2, #1
 800a836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2220      	movs	r2, #32
 800a83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	e000      	b.n	800a84e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a84c:	2302      	movs	r3, #2
  }
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b20      	cmp	r3, #32
 800a86e:	d139      	bne.n	800a8e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e033      	b.n	800a8e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2224      	movs	r2, #36	; 0x24
 800a88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 0201 	bic.w	r2, r2, #1
 800a89c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a8ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	021b      	lsls	r3, r3, #8
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e000      	b.n	800a8e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a8e4:	2302      	movs	r3, #2
  }
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e0bb      	b.n	800aa82 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b05      	cmp	r3, #5
 800a914:	d101      	bne.n	800a91a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e0b3      	b.n	800aa82 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d101      	bne.n	800a92a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e0ab      	b.n	800aa82 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a92a:	4b58      	ldr	r3, [pc, #352]	; (800aa8c <HAL_OPAMP_Init+0x198>)
 800a92c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a92e:	4a57      	ldr	r2, [pc, #348]	; (800aa8c <HAL_OPAMP_Init+0x198>)
 800a930:	f043 0301 	orr.w	r3, r3, #1
 800a934:	6613      	str	r3, [r2, #96]	; 0x60
 800a936:	4b55      	ldr	r3, [pc, #340]	; (800aa8c <HAL_OPAMP_Init+0x198>)
 800a938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	60bb      	str	r3, [r7, #8]
 800a940:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d103      	bne.n	800a956 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7fb fc24 	bl	80061a4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d003      	beq.n	800a96c <HAL_OPAMP_Init+0x78>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	2b60      	cmp	r3, #96	; 0x60
 800a96a:	d133      	bne.n	800a9d4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f023 0110 	bic.w	r1, r3, #16
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	4b41      	ldr	r3, [pc, #260]	; (800aa90 <HAL_OPAMP_Init+0x19c>)
 800a98a:	4013      	ands	r3, r2
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	6851      	ldr	r1, [r2, #4]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	6892      	ldr	r2, [r2, #8]
 800a994:	4311      	orrs	r1, r2
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	6912      	ldr	r2, [r2, #16]
 800a99a:	430a      	orrs	r2, r1
 800a99c:	6879      	ldr	r1, [r7, #4]
 800a99e:	7d09      	ldrb	r1, [r1, #20]
 800a9a0:	2901      	cmp	r1, #1
 800a9a2:	d102      	bne.n	800a9aa <HAL_OPAMP_Init+0xb6>
 800a9a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9a8:	e000      	b.n	800a9ac <HAL_OPAMP_Init+0xb8>
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	4311      	orrs	r1, r2
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a9b2:	4311      	orrs	r1, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9b8:	4311      	orrs	r1, r2
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a9be:	04d2      	lsls	r2, r2, #19
 800a9c0:	4311      	orrs	r1, r2
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a9c6:	0612      	lsls	r2, r2, #24
 800a9c8:	4311      	orrs	r1, r2
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	6812      	ldr	r2, [r2, #0]
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	e035      	b.n	800aa40 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f023 0110 	bic.w	r1, r3, #16
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	4b27      	ldr	r3, [pc, #156]	; (800aa90 <HAL_OPAMP_Init+0x19c>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	6851      	ldr	r1, [r2, #4]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6892      	ldr	r2, [r2, #8]
 800a9fc:	4311      	orrs	r1, r2
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	68d2      	ldr	r2, [r2, #12]
 800aa02:	4311      	orrs	r1, r2
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	6912      	ldr	r2, [r2, #16]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	7d09      	ldrb	r1, [r1, #20]
 800aa0e:	2901      	cmp	r1, #1
 800aa10:	d102      	bne.n	800aa18 <HAL_OPAMP_Init+0x124>
 800aa12:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa16:	e000      	b.n	800aa1a <HAL_OPAMP_Init+0x126>
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4311      	orrs	r1, r2
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa20:	4311      	orrs	r1, r2
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aa26:	4311      	orrs	r1, r2
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa2c:	04d2      	lsls	r2, r2, #19
 800aa2e:	4311      	orrs	r1, r2
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa34:	0612      	lsls	r2, r2, #24
 800aa36:	4311      	orrs	r1, r2
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	6812      	ldr	r2, [r2, #0]
 800aa3c:	430b      	orrs	r3, r1
 800aa3e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	db10      	blt.n	800aa6c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d103      	bne.n	800aa80 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	40021000 	.word	0x40021000
 800aa90:	e0003e11 	.word	0xe0003e11

0800aa94 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d102      	bne.n	800aaac <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	73fb      	strb	r3, [r7, #15]
 800aaaa:	e01d      	b.n	800aae8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b05      	cmp	r3, #5
 800aab6:	d102      	bne.n	800aabe <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]
 800aabc:	e014      	b.n	800aae8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d10c      	bne.n	800aae4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 0201 	orr.w	r2, r2, #1
 800aad8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2204      	movs	r2, #4
 800aade:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800aae2:	e001      	b.n	800aae8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d102      	bne.n	800ab0e <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	75fb      	strb	r3, [r7, #23]
 800ab0c:	e113      	b.n	800ad36 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b05      	cmp	r3, #5
 800ab18:	d102      	bne.n	800ab20 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
 800ab1e:	e10a      	b.n	800ad36 <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	f040 8102 	bne.w	800ad32 <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0202 	orr.w	r2, r2, #2
 800ab3c:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0210 	orr.w	r2, r2, #16
 800ab4c:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab5c:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800ab6c:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0201 	orr.w	r2, r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 800ab7e:	2310      	movs	r3, #16
 800ab80:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 800ab82:	2308      	movs	r3, #8
 800ab84:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800ab86:	e020      	b.n	800abca <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	061a      	lsls	r2, r3, #24
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800ab9e:	2002      	movs	r0, #2
 800aba0:	f7fc f876 	bl	8006c90 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	4413      	add	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]
 800abba:	e003      	b.n	800abc4 <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	085b      	lsrs	r3, r3, #1
 800abc8:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1db      	bne.n	800ab88 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	061a      	lsls	r2, r3, #24
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800abe6:	2002      	movs	r0, #2
 800abe8:	f7fc f852 	bl	8006c90 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00d      	beq.n	800ac16 <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	3301      	adds	r3, #1
 800abfe:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	061a      	lsls	r2, r3, #24
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	430a      	orrs	r2, r1
 800ac14:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac28:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 800ac2a:	2310      	movs	r3, #16
 800ac2c:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 800ac2e:	2308      	movs	r3, #8
 800ac30:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800ac32:	e020      	b.n	800ac76 <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	04da      	lsls	r2, r3, #19
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800ac4a:	2002      	movs	r0, #2
 800ac4c:	f7fc f820 	bl	8006c90 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d004      	beq.n	800ac68 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	4413      	add	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	e003      	b.n	800ac70 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1db      	bne.n	800ac34 <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	04da      	lsls	r2, r3, #19
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800ac92:	2002      	movs	r0, #2
 800ac94:	f7fb fffc 	bl	8006c90 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00d      	beq.n	800acc2 <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	04da      	lsls	r2, r3, #19
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acd0:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 0201 	bic.w	r2, r2, #1
 800ace0:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0202 	bic.w	r2, r2, #2
 800acf0:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2210      	movs	r2, #16
 800ad02:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	04da      	lsls	r2, r3, #19
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	061a      	lsls	r2, r3, #24
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	e001      	b.n	800ad36 <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad42:	b08b      	sub	sp, #44	; 0x2c
 800ad44:	af06      	add	r7, sp, #24
 800ad46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e0d7      	b.n	800af02 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f009 fe18 	bl	801499c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2203      	movs	r2, #3
 800ad70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f005 fcd4 	bl	8010726 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]
 800ad82:	e04c      	b.n	800ae1e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	440b      	add	r3, r1
 800ad94:	3301      	adds	r3, #1
 800ad96:	2201      	movs	r2, #1
 800ad98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	4613      	mov	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	440b      	add	r3, r1
 800adaa:	7bfa      	ldrb	r2, [r7, #15]
 800adac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800adae:	7bfa      	ldrb	r2, [r7, #15]
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	b298      	uxth	r0, r3
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	440b      	add	r3, r1
 800adc0:	3336      	adds	r3, #54	; 0x36
 800adc2:	4602      	mov	r2, r0
 800adc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	440b      	add	r3, r1
 800add6:	3303      	adds	r3, #3
 800add8:	2200      	movs	r2, #0
 800adda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800addc:	7bfa      	ldrb	r2, [r7, #15]
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	440b      	add	r3, r1
 800adea:	3338      	adds	r3, #56	; 0x38
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800adf0:	7bfa      	ldrb	r2, [r7, #15]
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	440b      	add	r3, r1
 800adfe:	333c      	adds	r3, #60	; 0x3c
 800ae00:	2200      	movs	r2, #0
 800ae02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae04:	7bfa      	ldrb	r2, [r7, #15]
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	440b      	add	r3, r1
 800ae12:	3340      	adds	r3, #64	; 0x40
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	73fb      	strb	r3, [r7, #15]
 800ae1e:	7bfa      	ldrb	r2, [r7, #15]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d3ad      	bcc.n	800ad84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
 800ae2c:	e044      	b.n	800aeb8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ae2e:	7bfa      	ldrb	r2, [r7, #15]
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	440b      	add	r3, r1
 800ae3c:	f203 1369 	addw	r3, r3, #361	; 0x169
 800ae40:	2200      	movs	r2, #0
 800ae42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae44:	7bfa      	ldrb	r2, [r7, #15]
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	440b      	add	r3, r1
 800ae52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae56:	7bfa      	ldrb	r2, [r7, #15]
 800ae58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae5a:	7bfa      	ldrb	r2, [r7, #15]
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	440b      	add	r3, r1
 800ae68:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae70:	7bfa      	ldrb	r2, [r7, #15]
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	00db      	lsls	r3, r3, #3
 800ae7c:	440b      	add	r3, r1
 800ae7e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ae82:	2200      	movs	r2, #0
 800ae84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae86:	7bfa      	ldrb	r2, [r7, #15]
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	440b      	add	r3, r1
 800ae94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae9c:	7bfa      	ldrb	r2, [r7, #15]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	440b      	add	r3, r1
 800aeaa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	73fb      	strb	r3, [r7, #15]
 800aeb8:	7bfa      	ldrb	r2, [r7, #15]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d3b5      	bcc.n	800ae2e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	603b      	str	r3, [r7, #0]
 800aec8:	687e      	ldr	r6, [r7, #4]
 800aeca:	466d      	mov	r5, sp
 800aecc:	f106 0410 	add.w	r4, r6, #16
 800aed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	602b      	str	r3, [r5, #0]
 800aed8:	1d33      	adds	r3, r6, #4
 800aeda:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aedc:	6838      	ldr	r0, [r7, #0]
 800aede:	f005 fc3d 	bl	801075c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d102      	bne.n	800af00 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f001 fc29 	bl	800c752 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <HAL_PCD_Start+0x16>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e012      	b.n	800af46 <HAL_PCD_Start+0x3c>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f005 fbe3 	bl	80106f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4618      	mov	r0, r3
 800af38:	f007 fdfc 	bl	8012b34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f007 fe01 	bl	8012b62 <USB_ReadInterrupts>
 800af60:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fb26 	bl	800b5be <PCD_EP_ISR_Handler>

    return;
 800af72:	e110      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d013      	beq.n	800afa6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af86:	b29a      	uxth	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af90:	b292      	uxth	r2, r2
 800af92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f009 fd91 	bl	8014abe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800af9c:	2100      	movs	r1, #0
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f8fc 	bl	800b19c <HAL_PCD_SetAddress>

    return;
 800afa4:	e0f7      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00c      	beq.n	800afca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800afc2:	b292      	uxth	r2, r2
 800afc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800afc8:	e0e5      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00c      	beq.n	800afee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afdc:	b29a      	uxth	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afe6:	b292      	uxth	r2, r2
 800afe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800afec:	e0d3      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d034      	beq.n	800b062 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b000:	b29a      	uxth	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0204 	bic.w	r2, r2, #4
 800b00a:	b292      	uxth	r2, r2
 800b00c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 0208 	bic.w	r2, r2, #8
 800b022:	b292      	uxth	r2, r2
 800b024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d107      	bne.n	800b042 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b03a:	2100      	movs	r1, #0
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f009 ff33 	bl	8014ea8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f009 fd74 	bl	8014b30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b050:	b29a      	uxth	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b05a:	b292      	uxth	r2, r2
 800b05c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b060:	e099      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d027      	beq.n	800b0bc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b074:	b29a      	uxth	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0208 	orr.w	r2, r2, #8
 800b07e:	b292      	uxth	r2, r2
 800b080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b096:	b292      	uxth	r2, r2
 800b098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0204 	orr.w	r2, r2, #4
 800b0ae:	b292      	uxth	r2, r2
 800b0b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f009 fd21 	bl	8014afc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b0ba:	e06c      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d040      	beq.n	800b148 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0d8:	b292      	uxth	r2, r2
 800b0da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d12b      	bne.n	800b140 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f042 0204 	orr.w	r2, r2, #4
 800b0fa:	b292      	uxth	r2, r2
 800b0fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b108:	b29a      	uxth	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0208 	orr.w	r2, r2, #8
 800b112:	b292      	uxth	r2, r2
 800b114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b128:	b29b      	uxth	r3, r3
 800b12a:	089b      	lsrs	r3, r3, #2
 800b12c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b136:	2101      	movs	r1, #1
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f009 feb5 	bl	8014ea8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b13e:	e02a      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f009 fcdb 	bl	8014afc <HAL_PCD_SuspendCallback>
    return;
 800b146:	e026      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00f      	beq.n	800b172 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b164:	b292      	uxth	r2, r2
 800b166:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f009 fc99 	bl	8014aa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b170:	e011      	b.n	800b196 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00c      	beq.n	800b196 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b184:	b29a      	uxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b18e:	b292      	uxth	r2, r2
 800b190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b194:	bf00      	nop
  }
}
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d101      	bne.n	800b1b6 <HAL_PCD_SetAddress+0x1a>
 800b1b2:	2302      	movs	r3, #2
 800b1b4:	e013      	b.n	800b1de <HAL_PCD_SetAddress+0x42>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	78fa      	ldrb	r2, [r7, #3]
 800b1c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	78fa      	ldrb	r2, [r7, #3]
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f007 fc9c 	bl	8012b0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	4608      	mov	r0, r1
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	70fb      	strb	r3, [r7, #3]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	803b      	strh	r3, [r7, #0]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	da0e      	bge.n	800b22a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	4613      	mov	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2201      	movs	r2, #1
 800b226:	705a      	strb	r2, [r3, #1]
 800b228:	e00e      	b.n	800b248 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	f003 0207 	and.w	r2, r3, #7
 800b230:	4613      	mov	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	4413      	add	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b254:	883a      	ldrh	r2, [r7, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	78ba      	ldrb	r2, [r7, #2]
 800b25e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	785b      	ldrb	r3, [r3, #1]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b272:	78bb      	ldrb	r3, [r7, #2]
 800b274:	2b02      	cmp	r3, #2
 800b276:	d102      	bne.n	800b27e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b284:	2b01      	cmp	r3, #1
 800b286:	d101      	bne.n	800b28c <HAL_PCD_EP_Open+0xa6>
 800b288:	2302      	movs	r3, #2
 800b28a:	e00e      	b.n	800b2aa <HAL_PCD_EP_Open+0xc4>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68f9      	ldr	r1, [r7, #12]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f005 fa80 	bl	80107a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b2be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	da0e      	bge.n	800b2e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2c6:	78fb      	ldrb	r3, [r7, #3]
 800b2c8:	f003 0307 	and.w	r3, r3, #7
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	4413      	add	r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	705a      	strb	r2, [r3, #1]
 800b2e2:	e00e      	b.n	800b302 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b2e4:	78fb      	ldrb	r3, [r7, #3]
 800b2e6:	f003 0207 	and.w	r2, r3, #7
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b302:	78fb      	ldrb	r3, [r7, #3]
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b314:	2b01      	cmp	r3, #1
 800b316:	d101      	bne.n	800b31c <HAL_PCD_EP_Close+0x6a>
 800b318:	2302      	movs	r3, #2
 800b31a:	e00e      	b.n	800b33a <HAL_PCD_EP_Close+0x88>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68f9      	ldr	r1, [r7, #12]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f005 fdcc 	bl	8010ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b086      	sub	sp, #24
 800b346:	af00      	add	r7, sp, #0
 800b348:	60f8      	str	r0, [r7, #12]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]
 800b34e:	460b      	mov	r3, r1
 800b350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	f003 0207 	and.w	r2, r3, #7
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	00db      	lsls	r3, r3, #3
 800b360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4413      	add	r3, r2
 800b368:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2200      	movs	r2, #0
 800b37a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2200      	movs	r2, #0
 800b380:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b382:	7afb      	ldrb	r3, [r7, #11]
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6979      	ldr	r1, [r7, #20]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f005 ff7f 	bl	80112a2 <USB_EPStartXfer>
 800b3a4:	e005      	b.n	800b3b2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6979      	ldr	r1, [r7, #20]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f005 ff78 	bl	80112a2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	f003 0207 	and.w	r2, r3, #7
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	440b      	add	r3, r1
 800b3da:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b3de:	681b      	ldr	r3, [r3, #0]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3fc:	7afb      	ldrb	r3, [r7, #11]
 800b3fe:	f003 0307 	and.w	r3, r3, #7
 800b402:	1c5a      	adds	r2, r3, #1
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	00db      	lsls	r3, r3, #3
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	4413      	add	r3, r2
 800b410:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	2200      	movs	r2, #0
 800b430:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2201      	movs	r2, #1
 800b436:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b438:	7afb      	ldrb	r3, [r7, #11]
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b444:	7afb      	ldrb	r3, [r7, #11]
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	6979      	ldr	r1, [r7, #20]
 800b454:	4618      	mov	r0, r3
 800b456:	f005 ff24 	bl	80112a2 <USB_EPStartXfer>
 800b45a:	e005      	b.n	800b468 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6979      	ldr	r1, [r7, #20]
 800b462:	4618      	mov	r0, r3
 800b464:	f005 ff1d 	bl	80112a2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b084      	sub	sp, #16
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	460b      	mov	r3, r1
 800b47c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b47e:	78fb      	ldrb	r3, [r7, #3]
 800b480:	f003 0207 	and.w	r2, r3, #7
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d901      	bls.n	800b490 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e03e      	b.n	800b50e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b494:	2b00      	cmp	r3, #0
 800b496:	da0e      	bge.n	800b4b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	f003 0307 	and.w	r3, r3, #7
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	00db      	lsls	r3, r3, #3
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	705a      	strb	r2, [r3, #1]
 800b4b4:	e00c      	b.n	800b4d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b4b6:	78fa      	ldrb	r2, [r7, #3]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4d6:	78fb      	ldrb	r3, [r7, #3]
 800b4d8:	f003 0307 	and.w	r3, r3, #7
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d101      	bne.n	800b4f0 <HAL_PCD_EP_SetStall+0x7e>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e00e      	b.n	800b50e <HAL_PCD_EP_SetStall+0x9c>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68f9      	ldr	r1, [r7, #12]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f007 fa05 	bl	801290e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	f003 020f 	and.w	r2, r3, #15
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d901      	bls.n	800b534 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e040      	b.n	800b5b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	da0e      	bge.n	800b55a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b53c:	78fb      	ldrb	r3, [r7, #3]
 800b53e:	f003 0307 	and.w	r3, r3, #7
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	4413      	add	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2201      	movs	r2, #1
 800b556:	705a      	strb	r2, [r3, #1]
 800b558:	e00e      	b.n	800b578 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b55a:	78fb      	ldrb	r3, [r7, #3]
 800b55c:	f003 0207 	and.w	r2, r3, #7
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	00db      	lsls	r3, r3, #3
 800b568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	4413      	add	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	b2da      	uxtb	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_PCD_EP_ClrStall+0x82>
 800b594:	2302      	movs	r3, #2
 800b596:	e00e      	b.n	800b5b6 <HAL_PCD_EP_ClrStall+0xa0>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68f9      	ldr	r1, [r7, #12]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f007 fa02 	bl	80129b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b096      	sub	sp, #88	; 0x58
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b5c6:	e39c      	b.n	800bd02 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b5d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	f003 030f 	and.w	r3, r3, #15
 800b5de:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b5e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f040 815e 	bne.w	800b8a8 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b5ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d150      	bne.n	800b69a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b608:	81fb      	strh	r3, [r7, #14]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	89fb      	ldrh	r3, [r7, #14]
 800b610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b618:	b29b      	uxth	r3, r3
 800b61a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3328      	adds	r3, #40	; 0x28
 800b620:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	461a      	mov	r2, r3
 800b62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	4413      	add	r3, r2
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	6812      	ldr	r2, [r2, #0]
 800b63a:	4413      	add	r3, r2
 800b63c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b648:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64c:	695a      	ldr	r2, [r3, #20]
 800b64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	441a      	add	r2, r3
 800b654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b656:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b658:	2100      	movs	r1, #0
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f009 fa07 	bl	8014a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 834a 	beq.w	800bd02 <PCD_EP_ISR_Handler+0x744>
 800b66e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b670:	699b      	ldr	r3, [r3, #24]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f040 8345 	bne.w	800bd02 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b684:	b2da      	uxtb	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	b292      	uxth	r2, r2
 800b68c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b698:	e333      	b.n	800bd02 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b6a0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	881b      	ldrh	r3, [r3, #0]
 800b6a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b6ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b6b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d032      	beq.n	800b71e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	00db      	lsls	r3, r3, #3
 800b6ca:	4413      	add	r3, r2
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	6812      	ldr	r2, [r2, #0]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	f007 fa87 	bl	8012c06 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	881b      	ldrh	r3, [r3, #0]
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b704:	4013      	ands	r3, r2
 800b706:	823b      	strh	r3, [r7, #16]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	8a3a      	ldrh	r2, [r7, #16]
 800b70e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b712:	b292      	uxth	r2, r2
 800b714:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f009 f97c 	bl	8014a14 <HAL_PCD_SetupStageCallback>
 800b71c:	e2f1      	b.n	800bd02 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b71e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b722:	2b00      	cmp	r3, #0
 800b724:	f280 82ed 	bge.w	800bd02 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	b29a      	uxth	r2, r3
 800b730:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b734:	4013      	ands	r3, r2
 800b736:	83fb      	strh	r3, [r7, #30]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	8bfa      	ldrh	r2, [r7, #30]
 800b73e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b742:	b292      	uxth	r2, r2
 800b744:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b74e:	b29b      	uxth	r3, r3
 800b750:	461a      	mov	r2, r3
 800b752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	00db      	lsls	r3, r3, #3
 800b758:	4413      	add	r3, r2
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6812      	ldr	r2, [r2, #0]
 800b75e:	4413      	add	r3, r2
 800b760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d019      	beq.n	800b7aa <PCD_EP_ISR_Handler+0x1ec>
 800b776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d015      	beq.n	800b7aa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b784:	6959      	ldr	r1, [r3, #20]
 800b786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b788:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b78c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b78e:	b29b      	uxth	r3, r3
 800b790:	f007 fa39 	bl	8012c06 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b796:	695a      	ldr	r2, [r3, #20]
 800b798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b79a:	69db      	ldr	r3, [r3, #28]
 800b79c:	441a      	add	r2, r3
 800b79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f009 f947 	bl	8014a38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f040 82a3 	bne.w	800bd02 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	61bb      	str	r3, [r7, #24]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	61bb      	str	r3, [r7, #24]
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	2b3e      	cmp	r3, #62	; 0x3e
 800b7e2:	d918      	bls.n	800b816 <PCD_EP_ISR_Handler+0x258>
 800b7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	095b      	lsrs	r3, r3, #5
 800b7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	f003 031f 	and.w	r3, r3, #31
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <PCD_EP_ISR_Handler+0x240>
 800b7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800b7fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b800:	b29b      	uxth	r3, r3
 800b802:	029b      	lsls	r3, r3, #10
 800b804:	b29b      	uxth	r3, r3
 800b806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b80a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b80e:	b29a      	uxth	r2, r3
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	801a      	strh	r2, [r3, #0]
 800b814:	e029      	b.n	800b86a <PCD_EP_ISR_Handler+0x2ac>
 800b816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d112      	bne.n	800b844 <PCD_EP_ISR_Handler+0x286>
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b828:	b29a      	uxth	r2, r3
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	801a      	strh	r2, [r3, #0]
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	b29b      	uxth	r3, r3
 800b834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	801a      	strh	r2, [r3, #0]
 800b842:	e012      	b.n	800b86a <PCD_EP_ISR_Handler+0x2ac>
 800b844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	085b      	lsrs	r3, r3, #1
 800b84a:	647b      	str	r3, [r7, #68]	; 0x44
 800b84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <PCD_EP_ISR_Handler+0x2a0>
 800b858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b85a:	3301      	adds	r3, #1
 800b85c:	647b      	str	r3, [r7, #68]	; 0x44
 800b85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b860:	b29b      	uxth	r3, r3
 800b862:	029b      	lsls	r3, r3, #10
 800b864:	b29a      	uxth	r2, r3
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	b29b      	uxth	r3, r3
 800b872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87a:	827b      	strh	r3, [r7, #18]
 800b87c:	8a7b      	ldrh	r3, [r7, #18]
 800b87e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b882:	827b      	strh	r3, [r7, #18]
 800b884:	8a7b      	ldrh	r3, [r7, #18]
 800b886:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b88a:	827b      	strh	r3, [r7, #18]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	8a7b      	ldrh	r3, [r7, #18]
 800b892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b89a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	8013      	strh	r3, [r2, #0]
 800b8a6:	e22c      	b.n	800bd02 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b8bc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f280 80f6 	bge.w	800bab2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b8dc:	4013      	ands	r3, r2
 800b8de:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b8f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8f8:	b292      	uxth	r2, r2
 800b8fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b8fc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800b900:	4613      	mov	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	4413      	add	r3, r2
 800b910:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b914:	7b1b      	ldrb	r3, [r3, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d123      	bne.n	800b962 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b922:	b29b      	uxth	r3, r3
 800b924:	461a      	mov	r2, r3
 800b926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	00db      	lsls	r3, r3, #3
 800b92c:	4413      	add	r3, r2
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	4413      	add	r3, r2
 800b934:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b93e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800b942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 808e 	beq.w	800ba68 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b952:	6959      	ldr	r1, [r3, #20]
 800b954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b956:	88da      	ldrh	r2, [r3, #6]
 800b958:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b95c:	f007 f953 	bl	8012c06 <USB_ReadPMA>
 800b960:	e082      	b.n	800ba68 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b964:	78db      	ldrb	r3, [r3, #3]
 800b966:	2b02      	cmp	r3, #2
 800b968:	d10a      	bne.n	800b980 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b96a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b96e:	461a      	mov	r2, r3
 800b970:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f9d3 	bl	800bd1e <HAL_PCD_EP_DB_Receive>
 800b978:	4603      	mov	r3, r0
 800b97a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b97e:	e073      	b.n	800ba68 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	b29b      	uxth	r3, r3
 800b992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b99a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	441a      	add	r2, r3
 800b9ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b9b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d022      	beq.n	800ba24 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	4413      	add	r3, r2
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	6812      	ldr	r2, [r2, #0]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800ba06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d02c      	beq.n	800ba68 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba14:	6959      	ldr	r1, [r3, #20]
 800ba16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba18:	891a      	ldrh	r2, [r3, #8]
 800ba1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba1e:	f007 f8f2 	bl	8012c06 <USB_ReadPMA>
 800ba22:	e021      	b.n	800ba68 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	4413      	add	r3, r2
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	6812      	ldr	r2, [r2, #0]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800ba4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d009      	beq.n	800ba68 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5a:	6959      	ldr	r1, [r3, #20]
 800ba5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5e:	895a      	ldrh	r2, [r3, #10]
 800ba60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba64:	f007 f8cf 	bl	8012c06 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ba68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6a:	69da      	ldr	r2, [r3, #28]
 800ba6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba70:	441a      	add	r2, r3
 800ba72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ba76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba78:	695a      	ldr	r2, [r3, #20]
 800ba7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba7e:	441a      	add	r2, r3
 800ba80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba82:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ba84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d005      	beq.n	800ba98 <PCD_EP_ISR_Handler+0x4da>
 800ba8c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800ba90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d206      	bcs.n	800baa6 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ba98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f008 ffca 	bl	8014a38 <HAL_PCD_DataOutStageCallback>
 800baa4:	e005      	b.n	800bab2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800baac:	4618      	mov	r0, r3
 800baae:	f005 fbf8 	bl	80112a2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bab2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 8121 	beq.w	800bd02 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800bac0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	4613      	mov	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	4413      	add	r3, r2
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	4413      	add	r3, r2
 800bad2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	461a      	mov	r2, r3
 800bada:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800baea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	441a      	add	r2, r3
 800bb00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800bb10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb12:	78db      	ldrb	r3, [r3, #3]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	f000 80a2 	beq.w	800bc5e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800bb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb22:	7b1b      	ldrb	r3, [r3, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 8093 	beq.w	800bc50 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bb2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d046      	beq.n	800bbc4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bb36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb38:	785b      	ldrb	r3, [r3, #1]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d126      	bne.n	800bb8c <PCD_EP_ISR_Handler+0x5ce>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	461a      	mov	r2, r3
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	4413      	add	r3, r2
 800bb54:	627b      	str	r3, [r7, #36]	; 0x24
 800bb56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	00da      	lsls	r2, r3, #3
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	4413      	add	r3, r2
 800bb60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb64:	623b      	str	r3, [r7, #32]
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb70:	b29a      	uxth	r2, r3
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	801a      	strh	r2, [r3, #0]
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	801a      	strh	r2, [r3, #0]
 800bb8a:	e061      	b.n	800bc50 <PCD_EP_ISR_Handler+0x692>
 800bb8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb8e:	785b      	ldrb	r3, [r3, #1]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d15d      	bne.n	800bc50 <PCD_EP_ISR_Handler+0x692>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	461a      	mov	r2, r3
 800bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba8:	4413      	add	r3, r2
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	00da      	lsls	r2, r3, #3
 800bbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbba:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	801a      	strh	r2, [r3, #0]
 800bbc2:	e045      	b.n	800bc50 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d126      	bne.n	800bc20 <PCD_EP_ISR_Handler+0x662>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe6:	4413      	add	r3, r2
 800bbe8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	00da      	lsls	r2, r3, #3
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbf8:	633b      	str	r3, [r7, #48]	; 0x30
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	801a      	strh	r2, [r3, #0]
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	801a      	strh	r2, [r3, #0]
 800bc1e:	e017      	b.n	800bc50 <PCD_EP_ISR_Handler+0x692>
 800bc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc22:	785b      	ldrb	r3, [r3, #1]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d113      	bne.n	800bc50 <PCD_EP_ISR_Handler+0x692>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	461a      	mov	r2, r3
 800bc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc36:	4413      	add	r3, r2
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	00da      	lsls	r2, r3, #3
 800bc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc42:	4413      	add	r3, r2
 800bc44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc48:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f008 ff09 	bl	8014a6e <HAL_PCD_DataInStageCallback>
 800bc5c:	e051      	b.n	800bd02 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bc5e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d144      	bne.n	800bcf4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	00db      	lsls	r3, r3, #3
 800bc7c:	4413      	add	r3, r2
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	6812      	ldr	r2, [r2, #0]
 800bc82:	4413      	add	r3, r2
 800bc84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800bc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc94:	699a      	ldr	r2, [r3, #24]
 800bc96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d907      	bls.n	800bcae <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800bc9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca0:	699a      	ldr	r2, [r3, #24]
 800bca2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bca6:	1ad2      	subs	r2, r2, r3
 800bca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcaa:	619a      	str	r2, [r3, #24]
 800bcac:	e002      	b.n	800bcb4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800bcae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bcb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d106      	bne.n	800bcca <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f008 fed3 	bl	8014a6e <HAL_PCD_DataInStageCallback>
 800bcc8:	e01b      	b.n	800bd02 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bccc:	695a      	ldr	r2, [r3, #20]
 800bcce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bcd2:	441a      	add	r2, r3
 800bcd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800bcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcda:	69da      	ldr	r2, [r3, #28]
 800bcdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bce0:	441a      	add	r2, r3
 800bce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bcec:	4618      	mov	r0, r3
 800bcee:	f005 fad8 	bl	80112a2 <USB_EPStartXfer>
 800bcf2:	e006      	b.n	800bd02 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bcf4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 f917 	bl	800bf30 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f6ff ac5a 	blt.w	800b5c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3758      	adds	r7, #88	; 0x58
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b088      	sub	sp, #32
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d07c      	beq.n	800be30 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	461a      	mov	r2, r3
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	4413      	add	r3, r2
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	6812      	ldr	r2, [r2, #0]
 800bd4e:	4413      	add	r3, r2
 800bd50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	699a      	ldr	r2, [r3, #24]
 800bd60:	8b7b      	ldrh	r3, [r7, #26]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d306      	bcc.n	800bd74 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	699a      	ldr	r2, [r3, #24]
 800bd6a:	8b7b      	ldrh	r3, [r7, #26]
 800bd6c:	1ad2      	subs	r2, r2, r3
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	619a      	str	r2, [r3, #24]
 800bd72:	e002      	b.n	800bd7a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2200      	movs	r2, #0
 800bd78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d123      	bne.n	800bdca <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd9c:	833b      	strh	r3, [r7, #24]
 800bd9e:	8b3b      	ldrh	r3, [r7, #24]
 800bda0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bda4:	833b      	strh	r3, [r7, #24]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	441a      	add	r2, r3
 800bdb4:	8b3b      	ldrh	r3, [r7, #24]
 800bdb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bdca:	88fb      	ldrh	r3, [r7, #6]
 800bdcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d01f      	beq.n	800be14 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdee:	82fb      	strh	r3, [r7, #22]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	441a      	add	r2, r3
 800bdfe:	8afb      	ldrh	r3, [r7, #22]
 800be00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be10:	b29b      	uxth	r3, r3
 800be12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800be14:	8b7b      	ldrh	r3, [r7, #26]
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 8085 	beq.w	800bf26 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	6959      	ldr	r1, [r3, #20]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	891a      	ldrh	r2, [r3, #8]
 800be28:	8b7b      	ldrh	r3, [r7, #26]
 800be2a:	f006 feec 	bl	8012c06 <USB_ReadPMA>
 800be2e:	e07a      	b.n	800bf26 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be38:	b29b      	uxth	r3, r3
 800be3a:	461a      	mov	r2, r3
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	00db      	lsls	r3, r3, #3
 800be42:	4413      	add	r3, r2
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	6812      	ldr	r2, [r2, #0]
 800be48:	4413      	add	r3, r2
 800be4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	699a      	ldr	r2, [r3, #24]
 800be5a:	8b7b      	ldrh	r3, [r7, #26]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d306      	bcc.n	800be6e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	699a      	ldr	r2, [r3, #24]
 800be64:	8b7b      	ldrh	r3, [r7, #26]
 800be66:	1ad2      	subs	r2, r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	619a      	str	r2, [r3, #24]
 800be6c:	e002      	b.n	800be74 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	2200      	movs	r2, #0
 800be72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d123      	bne.n	800bec4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be96:	83fb      	strh	r3, [r7, #30]
 800be98:	8bfb      	ldrh	r3, [r7, #30]
 800be9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be9e:	83fb      	strh	r3, [r7, #30]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	461a      	mov	r2, r3
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	441a      	add	r2, r3
 800beae:	8bfb      	ldrh	r3, [r7, #30]
 800beb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800bec4:	88fb      	ldrh	r3, [r7, #6]
 800bec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beca:	2b00      	cmp	r3, #0
 800becc:	d11f      	bne.n	800bf0e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	461a      	mov	r2, r3
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bee8:	83bb      	strh	r3, [r7, #28]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	441a      	add	r2, r3
 800bef8:	8bbb      	ldrh	r3, [r7, #28]
 800befa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800befe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bf0e:	8b7b      	ldrh	r3, [r7, #26]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d008      	beq.n	800bf26 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	6959      	ldr	r1, [r3, #20]
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	895a      	ldrh	r2, [r3, #10]
 800bf20:	8b7b      	ldrh	r3, [r7, #26]
 800bf22:	f006 fe70 	bl	8012c06 <USB_ReadPMA>
    }
  }

  return count;
 800bf26:	8b7b      	ldrh	r3, [r7, #26]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b0a2      	sub	sp, #136	; 0x88
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bf3e:	88fb      	ldrh	r3, [r7, #6]
 800bf40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 81c5 	beq.w	800c2d4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	461a      	mov	r2, r3
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	6812      	ldr	r2, [r2, #0]
 800bf62:	4413      	add	r3, r2
 800bf64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	699a      	ldr	r2, [r3, #24]
 800bf76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d907      	bls.n	800bf8e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	699a      	ldr	r2, [r3, #24]
 800bf82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf86:	1ad2      	subs	r2, r2, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	619a      	str	r2, [r3, #24]
 800bf8c:	e002      	b.n	800bf94 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2200      	movs	r2, #0
 800bf92:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f040 80b9 	bne.w	800c110 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d126      	bne.n	800bff4 <HAL_PCD_EP_DB_Transmit+0xc4>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	4413      	add	r3, r2
 800bfbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	00da      	lsls	r2, r3, #3
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	4413      	add	r3, r2
 800bfc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	801a      	strh	r2, [r3, #0]
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff0:	801a      	strh	r2, [r3, #0]
 800bff2:	e01a      	b.n	800c02a <HAL_PCD_EP_DB_Transmit+0xfa>
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	785b      	ldrb	r3, [r3, #1]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d116      	bne.n	800c02a <HAL_PCD_EP_DB_Transmit+0xfa>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	633b      	str	r3, [r7, #48]	; 0x30
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	4413      	add	r3, r2
 800c012:	633b      	str	r3, [r7, #48]	; 0x30
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	00da      	lsls	r2, r3, #3
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	4413      	add	r3, r2
 800c01e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c022:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c026:	2200      	movs	r2, #0
 800c028:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	623b      	str	r3, [r7, #32]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	785b      	ldrb	r3, [r3, #1]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d126      	bne.n	800c086 <HAL_PCD_EP_DB_Transmit+0x156>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	61bb      	str	r3, [r7, #24]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c046:	b29b      	uxth	r3, r3
 800c048:	461a      	mov	r2, r3
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	4413      	add	r3, r2
 800c04e:	61bb      	str	r3, [r7, #24]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	00da      	lsls	r2, r3, #3
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	4413      	add	r3, r2
 800c05a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c05e:	617b      	str	r3, [r7, #20]
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	b29b      	uxth	r3, r3
 800c066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	801a      	strh	r2, [r3, #0]
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c07a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07e:	b29a      	uxth	r2, r3
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	801a      	strh	r2, [r3, #0]
 800c084:	e017      	b.n	800c0b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	785b      	ldrb	r3, [r3, #1]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d113      	bne.n	800c0b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c096:	b29b      	uxth	r3, r3
 800c098:	461a      	mov	r2, r3
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	4413      	add	r3, r2
 800c09e:	623b      	str	r3, [r7, #32]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	00da      	lsls	r2, r3, #3
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0ae:	61fb      	str	r3, [r7, #28]
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f008 fcd6 	bl	8014a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c0c2:	88fb      	ldrh	r3, [r7, #6]
 800c0c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 82d2 	beq.w	800c672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0e8:	827b      	strh	r3, [r7, #18]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	441a      	add	r2, r3
 800c0f8:	8a7b      	ldrh	r3, [r7, #18]
 800c0fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	8013      	strh	r3, [r2, #0]
 800c10e:	e2b0      	b.n	800c672 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c116:	2b00      	cmp	r3, #0
 800c118:	d021      	beq.n	800c15e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c134:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	441a      	add	r2, r3
 800c146:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c14a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c14e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c164:	2b01      	cmp	r3, #1
 800c166:	f040 8284 	bne.w	800c672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	695a      	ldr	r2, [r3, #20]
 800c16e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c172:	441a      	add	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	69da      	ldr	r2, [r3, #28]
 800c17c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c180:	441a      	add	r2, r3
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	6a1a      	ldr	r2, [r3, #32]
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d309      	bcc.n	800c1a6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	6a1a      	ldr	r2, [r3, #32]
 800c19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c19e:	1ad2      	subs	r2, r2, r3
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	621a      	str	r2, [r3, #32]
 800c1a4:	e015      	b.n	800c1d2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d107      	bne.n	800c1be <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800c1ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c1b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c1bc:	e009      	b.n	800c1d2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d155      	bne.n	800c286 <HAL_PCD_EP_DB_Transmit+0x356>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	4413      	add	r3, r2
 800c1f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	00da      	lsls	r2, r3, #3
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c200:	637b      	str	r3, [r7, #52]	; 0x34
 800c202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c204:	2b3e      	cmp	r3, #62	; 0x3e
 800c206:	d916      	bls.n	800c236 <HAL_PCD_EP_DB_Transmit+0x306>
 800c208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20a:	095b      	lsrs	r3, r3, #5
 800c20c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c210:	f003 031f 	and.w	r3, r3, #31
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <HAL_PCD_EP_DB_Transmit+0x2ee>
 800c218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c21a:	3b01      	subs	r3, #1
 800c21c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c220:	b29b      	uxth	r3, r3
 800c222:	029b      	lsls	r3, r3, #10
 800c224:	b29b      	uxth	r3, r3
 800c226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c22a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c22e:	b29a      	uxth	r2, r3
 800c230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c232:	801a      	strh	r2, [r3, #0]
 800c234:	e043      	b.n	800c2be <HAL_PCD_EP_DB_Transmit+0x38e>
 800c236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d112      	bne.n	800c262 <HAL_PCD_EP_DB_Transmit+0x332>
 800c23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	b29b      	uxth	r3, r3
 800c242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c246:	b29a      	uxth	r2, r3
 800c248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24a:	801a      	strh	r2, [r3, #0]
 800c24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	b29b      	uxth	r3, r3
 800c252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25e:	801a      	strh	r2, [r3, #0]
 800c260:	e02d      	b.n	800c2be <HAL_PCD_EP_DB_Transmit+0x38e>
 800c262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c264:	085b      	lsrs	r3, r3, #1
 800c266:	64bb      	str	r3, [r7, #72]	; 0x48
 800c268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <HAL_PCD_EP_DB_Transmit+0x348>
 800c272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c274:	3301      	adds	r3, #1
 800c276:	64bb      	str	r3, [r7, #72]	; 0x48
 800c278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	029b      	lsls	r3, r3, #10
 800c27e:	b29a      	uxth	r2, r3
 800c280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c282:	801a      	strh	r2, [r3, #0]
 800c284:	e01b      	b.n	800c2be <HAL_PCD_EP_DB_Transmit+0x38e>
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	785b      	ldrb	r3, [r3, #1]
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d117      	bne.n	800c2be <HAL_PCD_EP_DB_Transmit+0x38e>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	643b      	str	r3, [r7, #64]	; 0x40
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	461a      	mov	r2, r3
 800c2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a2:	4413      	add	r3, r2
 800c2a4:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	00da      	lsls	r2, r3, #3
 800c2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	6959      	ldr	r1, [r3, #20]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	891a      	ldrh	r2, [r3, #8]
 800c2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	f006 fc58 	bl	8012b82 <USB_WritePMA>
 800c2d2:	e1ce      	b.n	800c672 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	461a      	mov	r2, r3
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	00db      	lsls	r3, r3, #3
 800c2e6:	4413      	add	r3, r2
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	6812      	ldr	r2, [r2, #0]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	699a      	ldr	r2, [r3, #24]
 800c300:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c304:	429a      	cmp	r2, r3
 800c306:	d307      	bcc.n	800c318 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	699a      	ldr	r2, [r3, #24]
 800c30c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c310:	1ad2      	subs	r2, r2, r3
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	619a      	str	r2, [r3, #24]
 800c316:	e002      	b.n	800c31e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2200      	movs	r2, #0
 800c31c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f040 80c4 	bne.w	800c4b0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	785b      	ldrb	r3, [r3, #1]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d126      	bne.n	800c37e <HAL_PCD_EP_DB_Transmit+0x44e>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	66bb      	str	r3, [r7, #104]	; 0x68
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c33e:	b29b      	uxth	r3, r3
 800c340:	461a      	mov	r2, r3
 800c342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c344:	4413      	add	r3, r2
 800c346:	66bb      	str	r3, [r7, #104]	; 0x68
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	00da      	lsls	r2, r3, #3
 800c34e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c350:	4413      	add	r3, r2
 800c352:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c356:	667b      	str	r3, [r7, #100]	; 0x64
 800c358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c362:	b29a      	uxth	r2, r3
 800c364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c366:	801a      	strh	r2, [r3, #0]
 800c368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c376:	b29a      	uxth	r2, r3
 800c378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c37a:	801a      	strh	r2, [r3, #0]
 800c37c:	e01a      	b.n	800c3b4 <HAL_PCD_EP_DB_Transmit+0x484>
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d116      	bne.n	800c3b4 <HAL_PCD_EP_DB_Transmit+0x484>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	673b      	str	r3, [r7, #112]	; 0x70
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c394:	b29b      	uxth	r3, r3
 800c396:	461a      	mov	r2, r3
 800c398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c39a:	4413      	add	r3, r2
 800c39c:	673b      	str	r3, [r7, #112]	; 0x70
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	00da      	lsls	r2, r3, #3
 800c3a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	785b      	ldrb	r3, [r3, #1]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d12f      	bne.n	800c422 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3da:	4413      	add	r3, r2
 800c3dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	00da      	lsls	r2, r3, #3
 800c3e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c400:	b29a      	uxth	r2, r3
 800c402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c406:	801a      	strh	r2, [r3, #0]
 800c408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c418:	b29a      	uxth	r2, r3
 800c41a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c41e:	801a      	strh	r2, [r3, #0]
 800c420:	e017      	b.n	800c452 <HAL_PCD_EP_DB_Transmit+0x522>
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	785b      	ldrb	r3, [r3, #1]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d113      	bne.n	800c452 <HAL_PCD_EP_DB_Transmit+0x522>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c432:	b29b      	uxth	r3, r3
 800c434:	461a      	mov	r2, r3
 800c436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c438:	4413      	add	r3, r2
 800c43a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	00da      	lsls	r2, r3, #3
 800c442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c444:	4413      	add	r3, r2
 800c446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c44a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c44c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c44e:	2200      	movs	r2, #0
 800c450:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	4619      	mov	r1, r3
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f008 fb08 	bl	8014a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c45e:	88fb      	ldrh	r3, [r7, #6]
 800c460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c464:	2b00      	cmp	r3, #0
 800c466:	f040 8104 	bne.w	800c672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c484:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	461a      	mov	r2, r3
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	441a      	add	r2, r3
 800c496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c49a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c49e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	8013      	strh	r3, [r2, #0]
 800c4ae:	e0e0      	b.n	800c672 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c4b0:	88fb      	ldrh	r3, [r7, #6]
 800c4b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d121      	bne.n	800c4fe <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	441a      	add	r2, r3
 800c4e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c4ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c504:	2b01      	cmp	r3, #1
 800c506:	f040 80b4 	bne.w	800c672 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	695a      	ldr	r2, [r3, #20]
 800c50e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c512:	441a      	add	r2, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	69da      	ldr	r2, [r3, #28]
 800c51c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c520:	441a      	add	r2, r3
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	6a1a      	ldr	r2, [r3, #32]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d309      	bcc.n	800c546 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	6a1a      	ldr	r2, [r3, #32]
 800c53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	621a      	str	r2, [r3, #32]
 800c544:	e015      	b.n	800c572 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d107      	bne.n	800c55e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800c54e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c552:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c55c:	e009      	b.n	800c572 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2200      	movs	r2, #0
 800c568:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	663b      	str	r3, [r7, #96]	; 0x60
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	785b      	ldrb	r3, [r3, #1]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d155      	bne.n	800c62c <HAL_PCD_EP_DB_Transmit+0x6fc>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	65bb      	str	r3, [r7, #88]	; 0x58
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c58e:	b29b      	uxth	r3, r3
 800c590:	461a      	mov	r2, r3
 800c592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c594:	4413      	add	r3, r2
 800c596:	65bb      	str	r3, [r7, #88]	; 0x58
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	00da      	lsls	r2, r3, #3
 800c59e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5a6:	657b      	str	r3, [r7, #84]	; 0x54
 800c5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5aa:	2b3e      	cmp	r3, #62	; 0x3e
 800c5ac:	d916      	bls.n	800c5dc <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b0:	095b      	lsrs	r3, r3, #5
 800c5b2:	677b      	str	r3, [r7, #116]	; 0x74
 800c5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b6:	f003 031f 	and.w	r3, r3, #31
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d102      	bne.n	800c5c4 <HAL_PCD_EP_DB_Transmit+0x694>
 800c5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	677b      	str	r3, [r7, #116]	; 0x74
 800c5c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	029b      	lsls	r3, r3, #10
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5d8:	801a      	strh	r2, [r3, #0]
 800c5da:	e040      	b.n	800c65e <HAL_PCD_EP_DB_Transmit+0x72e>
 800c5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d112      	bne.n	800c608 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800c5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5f0:	801a      	strh	r2, [r3, #0]
 800c5f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c600:	b29a      	uxth	r2, r3
 800c602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c604:	801a      	strh	r2, [r3, #0]
 800c606:	e02a      	b.n	800c65e <HAL_PCD_EP_DB_Transmit+0x72e>
 800c608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60a:	085b      	lsrs	r3, r3, #1
 800c60c:	677b      	str	r3, [r7, #116]	; 0x74
 800c60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <HAL_PCD_EP_DB_Transmit+0x6ee>
 800c618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c61a:	3301      	adds	r3, #1
 800c61c:	677b      	str	r3, [r7, #116]	; 0x74
 800c61e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c620:	b29b      	uxth	r3, r3
 800c622:	029b      	lsls	r3, r3, #10
 800c624:	b29a      	uxth	r2, r3
 800c626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c628:	801a      	strh	r2, [r3, #0]
 800c62a:	e018      	b.n	800c65e <HAL_PCD_EP_DB_Transmit+0x72e>
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	785b      	ldrb	r3, [r3, #1]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d114      	bne.n	800c65e <HAL_PCD_EP_DB_Transmit+0x72e>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	461a      	mov	r2, r3
 800c640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c642:	4413      	add	r3, r2
 800c644:	663b      	str	r3, [r7, #96]	; 0x60
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	00da      	lsls	r2, r3, #3
 800c64c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c64e:	4413      	add	r3, r2
 800c650:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c654:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c658:	b29a      	uxth	r2, r3
 800c65a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c65c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6818      	ldr	r0, [r3, #0]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	6959      	ldr	r1, [r3, #20]
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	895a      	ldrh	r2, [r3, #10]
 800c66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	f006 fa88 	bl	8012b82 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	b29b      	uxth	r3, r3
 800c684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c68c:	823b      	strh	r3, [r7, #16]
 800c68e:	8a3b      	ldrh	r3, [r7, #16]
 800c690:	f083 0310 	eor.w	r3, r3, #16
 800c694:	823b      	strh	r3, [r7, #16]
 800c696:	8a3b      	ldrh	r3, [r7, #16]
 800c698:	f083 0320 	eor.w	r3, r3, #32
 800c69c:	823b      	strh	r3, [r7, #16]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	441a      	add	r2, r3
 800c6ac:	8a3b      	ldrh	r3, [r7, #16]
 800c6ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3788      	adds	r7, #136	; 0x88
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	607b      	str	r3, [r7, #4]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	817b      	strh	r3, [r7, #10]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c6de:	897b      	ldrh	r3, [r7, #10]
 800c6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00b      	beq.n	800c702 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6ea:	897b      	ldrh	r3, [r7, #10]
 800c6ec:	f003 0307 	and.w	r3, r3, #7
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	617b      	str	r3, [r7, #20]
 800c700:	e009      	b.n	800c716 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c702:	897a      	ldrh	r2, [r7, #10]
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	4413      	add	r3, r2
 800c714:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c716:	893b      	ldrh	r3, [r7, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d107      	bne.n	800c72c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2200      	movs	r2, #0
 800c720:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	b29a      	uxth	r2, r3
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	80da      	strh	r2, [r3, #6]
 800c72a:	e00b      	b.n	800c744 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	2201      	movs	r2, #1
 800c730:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	b29a      	uxth	r2, r3
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	0c1b      	lsrs	r3, r3, #16
 800c73e:	b29a      	uxth	r2, r3
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	371c      	adds	r7, #28
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c752:	b480      	push	{r7}
 800c754:	b085      	sub	sp, #20
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c776:	b29b      	uxth	r3, r3
 800c778:	f043 0301 	orr.w	r3, r3, #1
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	f043 0302 	orr.w	r3, r3, #2
 800c790:	b29a      	uxth	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
	...

0800c7a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d141      	bne.n	800c83a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c7b6:	4b4b      	ldr	r3, [pc, #300]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7c2:	d131      	bne.n	800c828 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c7c4:	4b47      	ldr	r3, [pc, #284]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ca:	4a46      	ldr	r2, [pc, #280]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c7d4:	4b43      	ldr	r3, [pc, #268]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c7dc:	4a41      	ldr	r2, [pc, #260]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c7de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c7e4:	4b40      	ldr	r3, [pc, #256]	; (800c8e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2232      	movs	r2, #50	; 0x32
 800c7ea:	fb02 f303 	mul.w	r3, r2, r3
 800c7ee:	4a3f      	ldr	r2, [pc, #252]	; (800c8ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f4:	0c9b      	lsrs	r3, r3, #18
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c7fa:	e002      	b.n	800c802 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3b01      	subs	r3, #1
 800c800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c802:	4b38      	ldr	r3, [pc, #224]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c80a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c80e:	d102      	bne.n	800c816 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1f2      	bne.n	800c7fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c816:	4b33      	ldr	r3, [pc, #204]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c81e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c822:	d158      	bne.n	800c8d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e057      	b.n	800c8d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c828:	4b2e      	ldr	r3, [pc, #184]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c82e:	4a2d      	ldr	r2, [pc, #180]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c838:	e04d      	b.n	800c8d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c840:	d141      	bne.n	800c8c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c842:	4b28      	ldr	r3, [pc, #160]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c84e:	d131      	bne.n	800c8b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c850:	4b24      	ldr	r3, [pc, #144]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c856:	4a23      	ldr	r2, [pc, #140]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c85c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c860:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c868:	4a1e      	ldr	r2, [pc, #120]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c86a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c86e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c870:	4b1d      	ldr	r3, [pc, #116]	; (800c8e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2232      	movs	r2, #50	; 0x32
 800c876:	fb02 f303 	mul.w	r3, r2, r3
 800c87a:	4a1c      	ldr	r2, [pc, #112]	; (800c8ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c87c:	fba2 2303 	umull	r2, r3, r2, r3
 800c880:	0c9b      	lsrs	r3, r3, #18
 800c882:	3301      	adds	r3, #1
 800c884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c886:	e002      	b.n	800c88e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c88e:	4b15      	ldr	r3, [pc, #84]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c89a:	d102      	bne.n	800c8a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1f2      	bne.n	800c888 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c8a2:	4b10      	ldr	r3, [pc, #64]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8a4:	695b      	ldr	r3, [r3, #20]
 800c8a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8ae:	d112      	bne.n	800c8d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e011      	b.n	800c8d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c8b4:	4b0b      	ldr	r3, [pc, #44]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8ba:	4a0a      	ldr	r2, [pc, #40]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c8c4:	e007      	b.n	800c8d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c8c6:	4b07      	ldr	r3, [pc, #28]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c8ce:	4a05      	ldr	r2, [pc, #20]	; (800c8e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c8d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	40007000 	.word	0x40007000
 800c8e8:	20000000 	.word	0x20000000
 800c8ec:	431bde83 	.word	0x431bde83

0800c8f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b088      	sub	sp, #32
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e306      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d075      	beq.n	800c9fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c90e:	4b97      	ldr	r3, [pc, #604]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f003 030c 	and.w	r3, r3, #12
 800c916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c918:	4b94      	ldr	r3, [pc, #592]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	f003 0303 	and.w	r3, r3, #3
 800c920:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b0c      	cmp	r3, #12
 800c926:	d102      	bne.n	800c92e <HAL_RCC_OscConfig+0x3e>
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d002      	beq.n	800c934 <HAL_RCC_OscConfig+0x44>
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	2b08      	cmp	r3, #8
 800c932:	d10b      	bne.n	800c94c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c934:	4b8d      	ldr	r3, [pc, #564]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d05b      	beq.n	800c9f8 <HAL_RCC_OscConfig+0x108>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d157      	bne.n	800c9f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	e2e1      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c954:	d106      	bne.n	800c964 <HAL_RCC_OscConfig+0x74>
 800c956:	4b85      	ldr	r3, [pc, #532]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a84      	ldr	r2, [pc, #528]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c95c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	e01d      	b.n	800c9a0 <HAL_RCC_OscConfig+0xb0>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c96c:	d10c      	bne.n	800c988 <HAL_RCC_OscConfig+0x98>
 800c96e:	4b7f      	ldr	r3, [pc, #508]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a7e      	ldr	r2, [pc, #504]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c978:	6013      	str	r3, [r2, #0]
 800c97a:	4b7c      	ldr	r3, [pc, #496]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a7b      	ldr	r2, [pc, #492]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	e00b      	b.n	800c9a0 <HAL_RCC_OscConfig+0xb0>
 800c988:	4b78      	ldr	r3, [pc, #480]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a77      	ldr	r2, [pc, #476]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c98e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c992:	6013      	str	r3, [r2, #0]
 800c994:	4b75      	ldr	r3, [pc, #468]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a74      	ldr	r2, [pc, #464]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c99a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c99e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d013      	beq.n	800c9d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a8:	f7fa f966 	bl	8006c78 <HAL_GetTick>
 800c9ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9ae:	e008      	b.n	800c9c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9b0:	f7fa f962 	bl	8006c78 <HAL_GetTick>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	2b64      	cmp	r3, #100	; 0x64
 800c9bc:	d901      	bls.n	800c9c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e2a6      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9c2:	4b6a      	ldr	r3, [pc, #424]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0f0      	beq.n	800c9b0 <HAL_RCC_OscConfig+0xc0>
 800c9ce:	e014      	b.n	800c9fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9d0:	f7fa f952 	bl	8006c78 <HAL_GetTick>
 800c9d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c9d6:	e008      	b.n	800c9ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9d8:	f7fa f94e 	bl	8006c78 <HAL_GetTick>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	2b64      	cmp	r3, #100	; 0x64
 800c9e4:	d901      	bls.n	800c9ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	e292      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c9ea:	4b60      	ldr	r3, [pc, #384]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1f0      	bne.n	800c9d8 <HAL_RCC_OscConfig+0xe8>
 800c9f6:	e000      	b.n	800c9fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0302 	and.w	r3, r3, #2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d075      	beq.n	800caf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca06:	4b59      	ldr	r3, [pc, #356]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	f003 030c 	and.w	r3, r3, #12
 800ca0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca10:	4b56      	ldr	r3, [pc, #344]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f003 0303 	and.w	r3, r3, #3
 800ca18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	2b0c      	cmp	r3, #12
 800ca1e:	d102      	bne.n	800ca26 <HAL_RCC_OscConfig+0x136>
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d002      	beq.n	800ca2c <HAL_RCC_OscConfig+0x13c>
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d11f      	bne.n	800ca6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca2c:	4b4f      	ldr	r3, [pc, #316]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d005      	beq.n	800ca44 <HAL_RCC_OscConfig+0x154>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e265      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca44:	4b49      	ldr	r3, [pc, #292]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	061b      	lsls	r3, r3, #24
 800ca52:	4946      	ldr	r1, [pc, #280]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca54:	4313      	orrs	r3, r2
 800ca56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ca58:	4b45      	ldr	r3, [pc, #276]	; (800cb70 <HAL_RCC_OscConfig+0x280>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fa f8bf 	bl	8006be0 <HAL_InitTick>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d043      	beq.n	800caf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e251      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d023      	beq.n	800cabc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca74:	4b3d      	ldr	r3, [pc, #244]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a3c      	ldr	r2, [pc, #240]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca80:	f7fa f8fa 	bl	8006c78 <HAL_GetTick>
 800ca84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca86:	e008      	b.n	800ca9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca88:	f7fa f8f6 	bl	8006c78 <HAL_GetTick>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d901      	bls.n	800ca9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e23a      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca9a:	4b34      	ldr	r3, [pc, #208]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d0f0      	beq.n	800ca88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caa6:	4b31      	ldr	r3, [pc, #196]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	061b      	lsls	r3, r3, #24
 800cab4:	492d      	ldr	r1, [pc, #180]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cab6:	4313      	orrs	r3, r2
 800cab8:	604b      	str	r3, [r1, #4]
 800caba:	e01a      	b.n	800caf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cabc:	4b2b      	ldr	r3, [pc, #172]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a2a      	ldr	r2, [pc, #168]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac8:	f7fa f8d6 	bl	8006c78 <HAL_GetTick>
 800cacc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cace:	e008      	b.n	800cae2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cad0:	f7fa f8d2 	bl	8006c78 <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d901      	bls.n	800cae2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cade:	2303      	movs	r3, #3
 800cae0:	e216      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cae2:	4b22      	ldr	r3, [pc, #136]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1f0      	bne.n	800cad0 <HAL_RCC_OscConfig+0x1e0>
 800caee:	e000      	b.n	800caf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800caf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0308 	and.w	r3, r3, #8
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d041      	beq.n	800cb82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d01c      	beq.n	800cb40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb06:	4b19      	ldr	r3, [pc, #100]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cb08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb0c:	4a17      	ldr	r2, [pc, #92]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cb0e:	f043 0301 	orr.w	r3, r3, #1
 800cb12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb16:	f7fa f8af 	bl	8006c78 <HAL_GetTick>
 800cb1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb1c:	e008      	b.n	800cb30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb1e:	f7fa f8ab 	bl	8006c78 <HAL_GetTick>
 800cb22:	4602      	mov	r2, r0
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	d901      	bls.n	800cb30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e1ef      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb30:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cb32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb36:	f003 0302 	and.w	r3, r3, #2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0ef      	beq.n	800cb1e <HAL_RCC_OscConfig+0x22e>
 800cb3e:	e020      	b.n	800cb82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb40:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cb42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb46:	4a09      	ldr	r2, [pc, #36]	; (800cb6c <HAL_RCC_OscConfig+0x27c>)
 800cb48:	f023 0301 	bic.w	r3, r3, #1
 800cb4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb50:	f7fa f892 	bl	8006c78 <HAL_GetTick>
 800cb54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb56:	e00d      	b.n	800cb74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb58:	f7fa f88e 	bl	8006c78 <HAL_GetTick>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d906      	bls.n	800cb74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cb66:	2303      	movs	r3, #3
 800cb68:	e1d2      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
 800cb6a:	bf00      	nop
 800cb6c:	40021000 	.word	0x40021000
 800cb70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb74:	4b8c      	ldr	r3, [pc, #560]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cb76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb7a:	f003 0302 	and.w	r3, r3, #2
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1ea      	bne.n	800cb58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 0304 	and.w	r3, r3, #4
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f000 80a6 	beq.w	800ccdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb90:	2300      	movs	r3, #0
 800cb92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cb94:	4b84      	ldr	r3, [pc, #528]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <HAL_RCC_OscConfig+0x2b4>
 800cba0:	2301      	movs	r3, #1
 800cba2:	e000      	b.n	800cba6 <HAL_RCC_OscConfig+0x2b6>
 800cba4:	2300      	movs	r3, #0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00d      	beq.n	800cbc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbaa:	4b7f      	ldr	r3, [pc, #508]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbae:	4a7e      	ldr	r2, [pc, #504]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cbb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbb4:	6593      	str	r3, [r2, #88]	; 0x58
 800cbb6:	4b7c      	ldr	r3, [pc, #496]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbc6:	4b79      	ldr	r3, [pc, #484]	; (800cdac <HAL_RCC_OscConfig+0x4bc>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d118      	bne.n	800cc04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cbd2:	4b76      	ldr	r3, [pc, #472]	; (800cdac <HAL_RCC_OscConfig+0x4bc>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a75      	ldr	r2, [pc, #468]	; (800cdac <HAL_RCC_OscConfig+0x4bc>)
 800cbd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbde:	f7fa f84b 	bl	8006c78 <HAL_GetTick>
 800cbe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbe4:	e008      	b.n	800cbf8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbe6:	f7fa f847 	bl	8006c78 <HAL_GetTick>
 800cbea:	4602      	mov	r2, r0
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d901      	bls.n	800cbf8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e18b      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbf8:	4b6c      	ldr	r3, [pc, #432]	; (800cdac <HAL_RCC_OscConfig+0x4bc>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0f0      	beq.n	800cbe6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d108      	bne.n	800cc1e <HAL_RCC_OscConfig+0x32e>
 800cc0c:	4b66      	ldr	r3, [pc, #408]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc12:	4a65      	ldr	r2, [pc, #404]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc14:	f043 0301 	orr.w	r3, r3, #1
 800cc18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc1c:	e024      	b.n	800cc68 <HAL_RCC_OscConfig+0x378>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	2b05      	cmp	r3, #5
 800cc24:	d110      	bne.n	800cc48 <HAL_RCC_OscConfig+0x358>
 800cc26:	4b60      	ldr	r3, [pc, #384]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc2c:	4a5e      	ldr	r2, [pc, #376]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc2e:	f043 0304 	orr.w	r3, r3, #4
 800cc32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc36:	4b5c      	ldr	r3, [pc, #368]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc3c:	4a5a      	ldr	r2, [pc, #360]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc3e:	f043 0301 	orr.w	r3, r3, #1
 800cc42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc46:	e00f      	b.n	800cc68 <HAL_RCC_OscConfig+0x378>
 800cc48:	4b57      	ldr	r3, [pc, #348]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc4e:	4a56      	ldr	r2, [pc, #344]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc50:	f023 0301 	bic.w	r3, r3, #1
 800cc54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc58:	4b53      	ldr	r3, [pc, #332]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc5e:	4a52      	ldr	r2, [pc, #328]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc60:	f023 0304 	bic.w	r3, r3, #4
 800cc64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d016      	beq.n	800cc9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc70:	f7fa f802 	bl	8006c78 <HAL_GetTick>
 800cc74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc76:	e00a      	b.n	800cc8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc78:	f7f9 fffe 	bl	8006c78 <HAL_GetTick>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d901      	bls.n	800cc8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	e140      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc8e:	4b46      	ldr	r3, [pc, #280]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc94:	f003 0302 	and.w	r3, r3, #2
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d0ed      	beq.n	800cc78 <HAL_RCC_OscConfig+0x388>
 800cc9c:	e015      	b.n	800ccca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc9e:	f7f9 ffeb 	bl	8006c78 <HAL_GetTick>
 800cca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cca4:	e00a      	b.n	800ccbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cca6:	f7f9 ffe7 	bl	8006c78 <HAL_GetTick>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d901      	bls.n	800ccbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e129      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccbc:	4b3a      	ldr	r3, [pc, #232]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800ccbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc2:	f003 0302 	and.w	r3, r3, #2
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1ed      	bne.n	800cca6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d105      	bne.n	800ccdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ccd0:	4b35      	ldr	r3, [pc, #212]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800ccd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd4:	4a34      	ldr	r2, [pc, #208]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800ccd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0320 	and.w	r3, r3, #32
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d03c      	beq.n	800cd62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d01c      	beq.n	800cd2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ccf0:	4b2d      	ldr	r3, [pc, #180]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800ccf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ccf6:	4a2c      	ldr	r2, [pc, #176]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800ccf8:	f043 0301 	orr.w	r3, r3, #1
 800ccfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd00:	f7f9 ffba 	bl	8006c78 <HAL_GetTick>
 800cd04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cd06:	e008      	b.n	800cd1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd08:	f7f9 ffb6 	bl	8006c78 <HAL_GetTick>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d901      	bls.n	800cd1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cd16:	2303      	movs	r3, #3
 800cd18:	e0fa      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cd1a:	4b23      	ldr	r3, [pc, #140]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cd1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd20:	f003 0302 	and.w	r3, r3, #2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0ef      	beq.n	800cd08 <HAL_RCC_OscConfig+0x418>
 800cd28:	e01b      	b.n	800cd62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cd2a:	4b1f      	ldr	r3, [pc, #124]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cd2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd30:	4a1d      	ldr	r2, [pc, #116]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cd32:	f023 0301 	bic.w	r3, r3, #1
 800cd36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd3a:	f7f9 ff9d 	bl	8006c78 <HAL_GetTick>
 800cd3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd40:	e008      	b.n	800cd54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd42:	f7f9 ff99 	bl	8006c78 <HAL_GetTick>
 800cd46:	4602      	mov	r2, r0
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d901      	bls.n	800cd54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cd50:	2303      	movs	r3, #3
 800cd52:	e0dd      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd54:	4b14      	ldr	r3, [pc, #80]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cd56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd5a:	f003 0302 	and.w	r3, r3, #2
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1ef      	bne.n	800cd42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	69db      	ldr	r3, [r3, #28]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 80d1 	beq.w	800cf0e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd6c:	4b0e      	ldr	r3, [pc, #56]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	f003 030c 	and.w	r3, r3, #12
 800cd74:	2b0c      	cmp	r3, #12
 800cd76:	f000 808b 	beq.w	800ce90 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	69db      	ldr	r3, [r3, #28]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d15e      	bne.n	800ce40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd82:	4b09      	ldr	r3, [pc, #36]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a08      	ldr	r2, [pc, #32]	; (800cda8 <HAL_RCC_OscConfig+0x4b8>)
 800cd88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd8e:	f7f9 ff73 	bl	8006c78 <HAL_GetTick>
 800cd92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd94:	e00c      	b.n	800cdb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd96:	f7f9 ff6f 	bl	8006c78 <HAL_GetTick>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d905      	bls.n	800cdb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e0b3      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
 800cda8:	40021000 	.word	0x40021000
 800cdac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cdb0:	4b59      	ldr	r3, [pc, #356]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1ec      	bne.n	800cd96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cdbc:	4b56      	ldr	r3, [pc, #344]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800cdbe:	68da      	ldr	r2, [r3, #12]
 800cdc0:	4b56      	ldr	r3, [pc, #344]	; (800cf1c <HAL_RCC_OscConfig+0x62c>)
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	6a11      	ldr	r1, [r2, #32]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cdcc:	3a01      	subs	r2, #1
 800cdce:	0112      	lsls	r2, r2, #4
 800cdd0:	4311      	orrs	r1, r2
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cdd6:	0212      	lsls	r2, r2, #8
 800cdd8:	4311      	orrs	r1, r2
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cdde:	0852      	lsrs	r2, r2, #1
 800cde0:	3a01      	subs	r2, #1
 800cde2:	0552      	lsls	r2, r2, #21
 800cde4:	4311      	orrs	r1, r2
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cdea:	0852      	lsrs	r2, r2, #1
 800cdec:	3a01      	subs	r2, #1
 800cdee:	0652      	lsls	r2, r2, #25
 800cdf0:	4311      	orrs	r1, r2
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cdf6:	06d2      	lsls	r2, r2, #27
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	4947      	ldr	r1, [pc, #284]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce00:	4b45      	ldr	r3, [pc, #276]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a44      	ldr	r2, [pc, #272]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce0c:	4b42      	ldr	r3, [pc, #264]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	4a41      	ldr	r2, [pc, #260]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce18:	f7f9 ff2e 	bl	8006c78 <HAL_GetTick>
 800ce1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce1e:	e008      	b.n	800ce32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce20:	f7f9 ff2a 	bl	8006c78 <HAL_GetTick>
 800ce24:	4602      	mov	r2, r0
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d901      	bls.n	800ce32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e06e      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce32:	4b39      	ldr	r3, [pc, #228]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d0f0      	beq.n	800ce20 <HAL_RCC_OscConfig+0x530>
 800ce3e:	e066      	b.n	800cf0e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce40:	4b35      	ldr	r3, [pc, #212]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a34      	ldr	r2, [pc, #208]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ce4c:	4b32      	ldr	r3, [pc, #200]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	4a31      	ldr	r2, [pc, #196]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ce58:	4b2f      	ldr	r3, [pc, #188]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	4a2e      	ldr	r2, [pc, #184]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ce62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce68:	f7f9 ff06 	bl	8006c78 <HAL_GetTick>
 800ce6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce6e:	e008      	b.n	800ce82 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce70:	f7f9 ff02 	bl	8006c78 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d901      	bls.n	800ce82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e046      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce82:	4b25      	ldr	r3, [pc, #148]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1f0      	bne.n	800ce70 <HAL_RCC_OscConfig+0x580>
 800ce8e:	e03e      	b.n	800cf0e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d101      	bne.n	800ce9c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e039      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ce9c:	4b1e      	ldr	r3, [pc, #120]	; (800cf18 <HAL_RCC_OscConfig+0x628>)
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	f003 0203 	and.w	r2, r3, #3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d12c      	bne.n	800cf0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceba:	3b01      	subs	r3, #1
 800cebc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d123      	bne.n	800cf0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cecc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cece:	429a      	cmp	r2, r3
 800ced0:	d11b      	bne.n	800cf0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cedc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cede:	429a      	cmp	r2, r3
 800cee0:	d113      	bne.n	800cf0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceec:	085b      	lsrs	r3, r3, #1
 800ceee:	3b01      	subs	r3, #1
 800cef0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d109      	bne.n	800cf0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf00:	085b      	lsrs	r3, r3, #1
 800cf02:	3b01      	subs	r3, #1
 800cf04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d001      	beq.n	800cf0e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e000      	b.n	800cf10 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3720      	adds	r7, #32
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	40021000 	.word	0x40021000
 800cf1c:	019f800c 	.word	0x019f800c

0800cf20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d101      	bne.n	800cf38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	e11e      	b.n	800d176 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cf38:	4b91      	ldr	r3, [pc, #580]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 030f 	and.w	r3, r3, #15
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d910      	bls.n	800cf68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf46:	4b8e      	ldr	r3, [pc, #568]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f023 020f 	bic.w	r2, r3, #15
 800cf4e:	498c      	ldr	r1, [pc, #560]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf56:	4b8a      	ldr	r3, [pc, #552]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 030f 	and.w	r3, r3, #15
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d001      	beq.n	800cf68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e106      	b.n	800d176 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 0301 	and.w	r3, r3, #1
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d073      	beq.n	800d05c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	2b03      	cmp	r3, #3
 800cf7a:	d129      	bne.n	800cfd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf7c:	4b81      	ldr	r3, [pc, #516]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e0f4      	b.n	800d176 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cf8c:	f000 f99e 	bl	800d2cc <RCC_GetSysClockFreqFromPLLSource>
 800cf90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	4a7c      	ldr	r2, [pc, #496]	; (800d188 <HAL_RCC_ClockConfig+0x268>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d93f      	bls.n	800d01a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cf9a:	4b7a      	ldr	r3, [pc, #488]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d009      	beq.n	800cfba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d033      	beq.n	800d01a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d12f      	bne.n	800d01a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cfba:	4b72      	ldr	r3, [pc, #456]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfc2:	4a70      	ldr	r2, [pc, #448]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800cfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cfca:	2380      	movs	r3, #128	; 0x80
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	e024      	b.n	800d01a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d107      	bne.n	800cfe8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cfd8:	4b6a      	ldr	r3, [pc, #424]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d109      	bne.n	800cff8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e0c6      	b.n	800d176 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cfe8:	4b66      	ldr	r3, [pc, #408]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e0be      	b.n	800d176 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cff8:	f000 f8ce 	bl	800d198 <HAL_RCC_GetSysClockFreq>
 800cffc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	4a61      	ldr	r2, [pc, #388]	; (800d188 <HAL_RCC_ClockConfig+0x268>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d909      	bls.n	800d01a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d006:	4b5f      	ldr	r3, [pc, #380]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d00e:	4a5d      	ldr	r2, [pc, #372]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d014:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d016:	2380      	movs	r3, #128	; 0x80
 800d018:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d01a:	4b5a      	ldr	r3, [pc, #360]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f023 0203 	bic.w	r2, r3, #3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	4957      	ldr	r1, [pc, #348]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d028:	4313      	orrs	r3, r2
 800d02a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d02c:	f7f9 fe24 	bl	8006c78 <HAL_GetTick>
 800d030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d032:	e00a      	b.n	800d04a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d034:	f7f9 fe20 	bl	8006c78 <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d042:	4293      	cmp	r3, r2
 800d044:	d901      	bls.n	800d04a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d046:	2303      	movs	r3, #3
 800d048:	e095      	b.n	800d176 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d04a:	4b4e      	ldr	r3, [pc, #312]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	f003 020c 	and.w	r2, r3, #12
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	429a      	cmp	r2, r3
 800d05a:	d1eb      	bne.n	800d034 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f003 0302 	and.w	r3, r3, #2
 800d064:	2b00      	cmp	r3, #0
 800d066:	d023      	beq.n	800d0b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 0304 	and.w	r3, r3, #4
 800d070:	2b00      	cmp	r3, #0
 800d072:	d005      	beq.n	800d080 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d074:	4b43      	ldr	r3, [pc, #268]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	4a42      	ldr	r2, [pc, #264]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d07a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d07e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 0308 	and.w	r3, r3, #8
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d007      	beq.n	800d09c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d08c:	4b3d      	ldr	r3, [pc, #244]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d094:	4a3b      	ldr	r2, [pc, #236]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d09a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d09c:	4b39      	ldr	r3, [pc, #228]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	4936      	ldr	r1, [pc, #216]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	608b      	str	r3, [r1, #8]
 800d0ae:	e008      	b.n	800d0c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2b80      	cmp	r3, #128	; 0x80
 800d0b4:	d105      	bne.n	800d0c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d0b6:	4b33      	ldr	r3, [pc, #204]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	4a32      	ldr	r2, [pc, #200]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d0bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d0c2:	4b2f      	ldr	r3, [pc, #188]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f003 030f 	and.w	r3, r3, #15
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d21d      	bcs.n	800d10c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0d0:	4b2b      	ldr	r3, [pc, #172]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f023 020f 	bic.w	r2, r3, #15
 800d0d8:	4929      	ldr	r1, [pc, #164]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d0e0:	f7f9 fdca 	bl	8006c78 <HAL_GetTick>
 800d0e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0e6:	e00a      	b.n	800d0fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0e8:	f7f9 fdc6 	bl	8006c78 <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d901      	bls.n	800d0fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e03b      	b.n	800d176 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0fe:	4b20      	ldr	r3, [pc, #128]	; (800d180 <HAL_RCC_ClockConfig+0x260>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 030f 	and.w	r3, r3, #15
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d1ed      	bne.n	800d0e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 0304 	and.w	r3, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	d008      	beq.n	800d12a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d118:	4b1a      	ldr	r3, [pc, #104]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	4917      	ldr	r1, [pc, #92]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d126:	4313      	orrs	r3, r2
 800d128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f003 0308 	and.w	r3, r3, #8
 800d132:	2b00      	cmp	r3, #0
 800d134:	d009      	beq.n	800d14a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d136:	4b13      	ldr	r3, [pc, #76]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	490f      	ldr	r1, [pc, #60]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d146:	4313      	orrs	r3, r2
 800d148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d14a:	f000 f825 	bl	800d198 <HAL_RCC_GetSysClockFreq>
 800d14e:	4602      	mov	r2, r0
 800d150:	4b0c      	ldr	r3, [pc, #48]	; (800d184 <HAL_RCC_ClockConfig+0x264>)
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	091b      	lsrs	r3, r3, #4
 800d156:	f003 030f 	and.w	r3, r3, #15
 800d15a:	490c      	ldr	r1, [pc, #48]	; (800d18c <HAL_RCC_ClockConfig+0x26c>)
 800d15c:	5ccb      	ldrb	r3, [r1, r3]
 800d15e:	f003 031f 	and.w	r3, r3, #31
 800d162:	fa22 f303 	lsr.w	r3, r2, r3
 800d166:	4a0a      	ldr	r2, [pc, #40]	; (800d190 <HAL_RCC_ClockConfig+0x270>)
 800d168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d16a:	4b0a      	ldr	r3, [pc, #40]	; (800d194 <HAL_RCC_ClockConfig+0x274>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f9 fd36 	bl	8006be0 <HAL_InitTick>
 800d174:	4603      	mov	r3, r0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	40022000 	.word	0x40022000
 800d184:	40021000 	.word	0x40021000
 800d188:	04c4b400 	.word	0x04c4b400
 800d18c:	08018514 	.word	0x08018514
 800d190:	20000000 	.word	0x20000000
 800d194:	20000004 	.word	0x20000004

0800d198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d198:	b480      	push	{r7}
 800d19a:	b087      	sub	sp, #28
 800d19c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d19e:	4b2c      	ldr	r3, [pc, #176]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f003 030c 	and.w	r3, r3, #12
 800d1a6:	2b04      	cmp	r3, #4
 800d1a8:	d102      	bne.n	800d1b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d1aa:	4b2a      	ldr	r3, [pc, #168]	; (800d254 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d1ac:	613b      	str	r3, [r7, #16]
 800d1ae:	e047      	b.n	800d240 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d1b0:	4b27      	ldr	r3, [pc, #156]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	f003 030c 	and.w	r3, r3, #12
 800d1b8:	2b08      	cmp	r3, #8
 800d1ba:	d102      	bne.n	800d1c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d1bc:	4b26      	ldr	r3, [pc, #152]	; (800d258 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d1be:	613b      	str	r3, [r7, #16]
 800d1c0:	e03e      	b.n	800d240 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d1c2:	4b23      	ldr	r3, [pc, #140]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	f003 030c 	and.w	r3, r3, #12
 800d1ca:	2b0c      	cmp	r3, #12
 800d1cc:	d136      	bne.n	800d23c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d1ce:	4b20      	ldr	r3, [pc, #128]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d1d8:	4b1d      	ldr	r3, [pc, #116]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	091b      	lsrs	r3, r3, #4
 800d1de:	f003 030f 	and.w	r3, r3, #15
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d10c      	bne.n	800d206 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d1ec:	4a1a      	ldr	r2, [pc, #104]	; (800d258 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1f4:	4a16      	ldr	r2, [pc, #88]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d1f6:	68d2      	ldr	r2, [r2, #12]
 800d1f8:	0a12      	lsrs	r2, r2, #8
 800d1fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d1fe:	fb02 f303 	mul.w	r3, r2, r3
 800d202:	617b      	str	r3, [r7, #20]
      break;
 800d204:	e00c      	b.n	800d220 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d206:	4a13      	ldr	r2, [pc, #76]	; (800d254 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20e:	4a10      	ldr	r2, [pc, #64]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d210:	68d2      	ldr	r2, [r2, #12]
 800d212:	0a12      	lsrs	r2, r2, #8
 800d214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d218:	fb02 f303 	mul.w	r3, r2, r3
 800d21c:	617b      	str	r3, [r7, #20]
      break;
 800d21e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d220:	4b0b      	ldr	r3, [pc, #44]	; (800d250 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	0e5b      	lsrs	r3, r3, #25
 800d226:	f003 0303 	and.w	r3, r3, #3
 800d22a:	3301      	adds	r3, #1
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	fbb2 f3f3 	udiv	r3, r2, r3
 800d238:	613b      	str	r3, [r7, #16]
 800d23a:	e001      	b.n	800d240 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d23c:	2300      	movs	r3, #0
 800d23e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d240:	693b      	ldr	r3, [r7, #16]
}
 800d242:	4618      	mov	r0, r3
 800d244:	371c      	adds	r7, #28
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	40021000 	.word	0x40021000
 800d254:	00f42400 	.word	0x00f42400
 800d258:	007a1200 	.word	0x007a1200

0800d25c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d25c:	b480      	push	{r7}
 800d25e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d260:	4b03      	ldr	r3, [pc, #12]	; (800d270 <HAL_RCC_GetHCLKFreq+0x14>)
 800d262:	681b      	ldr	r3, [r3, #0]
}
 800d264:	4618      	mov	r0, r3
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	20000000 	.word	0x20000000

0800d274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d278:	f7ff fff0 	bl	800d25c <HAL_RCC_GetHCLKFreq>
 800d27c:	4602      	mov	r2, r0
 800d27e:	4b06      	ldr	r3, [pc, #24]	; (800d298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	0a1b      	lsrs	r3, r3, #8
 800d284:	f003 0307 	and.w	r3, r3, #7
 800d288:	4904      	ldr	r1, [pc, #16]	; (800d29c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d28a:	5ccb      	ldrb	r3, [r1, r3]
 800d28c:	f003 031f 	and.w	r3, r3, #31
 800d290:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d294:	4618      	mov	r0, r3
 800d296:	bd80      	pop	{r7, pc}
 800d298:	40021000 	.word	0x40021000
 800d29c:	08018524 	.word	0x08018524

0800d2a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d2a4:	f7ff ffda 	bl	800d25c <HAL_RCC_GetHCLKFreq>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	0adb      	lsrs	r3, r3, #11
 800d2b0:	f003 0307 	and.w	r3, r3, #7
 800d2b4:	4904      	ldr	r1, [pc, #16]	; (800d2c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d2b6:	5ccb      	ldrb	r3, [r1, r3]
 800d2b8:	f003 031f 	and.w	r3, r3, #31
 800d2bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	40021000 	.word	0x40021000
 800d2c8:	08018524 	.word	0x08018524

0800d2cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d2d2:	4b1e      	ldr	r3, [pc, #120]	; (800d34c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	f003 0303 	and.w	r3, r3, #3
 800d2da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d2dc:	4b1b      	ldr	r3, [pc, #108]	; (800d34c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	091b      	lsrs	r3, r3, #4
 800d2e2:	f003 030f 	and.w	r3, r3, #15
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b03      	cmp	r3, #3
 800d2ee:	d10c      	bne.n	800d30a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d2f0:	4a17      	ldr	r2, [pc, #92]	; (800d350 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f8:	4a14      	ldr	r2, [pc, #80]	; (800d34c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d2fa:	68d2      	ldr	r2, [r2, #12]
 800d2fc:	0a12      	lsrs	r2, r2, #8
 800d2fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d302:	fb02 f303 	mul.w	r3, r2, r3
 800d306:	617b      	str	r3, [r7, #20]
    break;
 800d308:	e00c      	b.n	800d324 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d30a:	4a12      	ldr	r2, [pc, #72]	; (800d354 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d312:	4a0e      	ldr	r2, [pc, #56]	; (800d34c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d314:	68d2      	ldr	r2, [r2, #12]
 800d316:	0a12      	lsrs	r2, r2, #8
 800d318:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d31c:	fb02 f303 	mul.w	r3, r2, r3
 800d320:	617b      	str	r3, [r7, #20]
    break;
 800d322:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d324:	4b09      	ldr	r3, [pc, #36]	; (800d34c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	0e5b      	lsrs	r3, r3, #25
 800d32a:	f003 0303 	and.w	r3, r3, #3
 800d32e:	3301      	adds	r3, #1
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d334:	697a      	ldr	r2, [r7, #20]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	fbb2 f3f3 	udiv	r3, r2, r3
 800d33c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d33e:	687b      	ldr	r3, [r7, #4]
}
 800d340:	4618      	mov	r0, r3
 800d342:	371c      	adds	r7, #28
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	40021000 	.word	0x40021000
 800d350:	007a1200 	.word	0x007a1200
 800d354:	00f42400 	.word	0x00f42400

0800d358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d360:	2300      	movs	r3, #0
 800d362:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d364:	2300      	movs	r3, #0
 800d366:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 8098 	beq.w	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d376:	2300      	movs	r3, #0
 800d378:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d37a:	4b43      	ldr	r3, [pc, #268]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d37e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10d      	bne.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d386:	4b40      	ldr	r3, [pc, #256]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d38a:	4a3f      	ldr	r2, [pc, #252]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d38c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d390:	6593      	str	r3, [r2, #88]	; 0x58
 800d392:	4b3d      	ldr	r3, [pc, #244]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d39a:	60bb      	str	r3, [r7, #8]
 800d39c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d3a2:	4b3a      	ldr	r3, [pc, #232]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a39      	ldr	r2, [pc, #228]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d3ae:	f7f9 fc63 	bl	8006c78 <HAL_GetTick>
 800d3b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3b4:	e009      	b.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3b6:	f7f9 fc5f 	bl	8006c78 <HAL_GetTick>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d902      	bls.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d3c4:	2303      	movs	r3, #3
 800d3c6:	74fb      	strb	r3, [r7, #19]
        break;
 800d3c8:	e005      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3ca:	4b30      	ldr	r3, [pc, #192]	; (800d48c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0ef      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d3d6:	7cfb      	ldrb	r3, [r7, #19]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d159      	bne.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d3dc:	4b2a      	ldr	r3, [pc, #168]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d01e      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d019      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d3f8:	4b23      	ldr	r3, [pc, #140]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d402:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d404:	4b20      	ldr	r3, [pc, #128]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d40a:	4a1f      	ldr	r2, [pc, #124]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d40c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d414:	4b1c      	ldr	r3, [pc, #112]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d41a:	4a1b      	ldr	r2, [pc, #108]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d41c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d424:	4a18      	ldr	r2, [pc, #96]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	2b00      	cmp	r3, #0
 800d434:	d016      	beq.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d436:	f7f9 fc1f 	bl	8006c78 <HAL_GetTick>
 800d43a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d43c:	e00b      	b.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d43e:	f7f9 fc1b 	bl	8006c78 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	f241 3288 	movw	r2, #5000	; 0x1388
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d902      	bls.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d450:	2303      	movs	r3, #3
 800d452:	74fb      	strb	r3, [r7, #19]
            break;
 800d454:	e006      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d45c:	f003 0302 	and.w	r3, r3, #2
 800d460:	2b00      	cmp	r3, #0
 800d462:	d0ec      	beq.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d464:	7cfb      	ldrb	r3, [r7, #19]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10b      	bne.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d46a:	4b07      	ldr	r3, [pc, #28]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d478:	4903      	ldr	r1, [pc, #12]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d47a:	4313      	orrs	r3, r2
 800d47c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d480:	e008      	b.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d482:	7cfb      	ldrb	r3, [r7, #19]
 800d484:	74bb      	strb	r3, [r7, #18]
 800d486:	e005      	b.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d488:	40021000 	.word	0x40021000
 800d48c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d490:	7cfb      	ldrb	r3, [r7, #19]
 800d492:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d494:	7c7b      	ldrb	r3, [r7, #17]
 800d496:	2b01      	cmp	r3, #1
 800d498:	d105      	bne.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d49a:	4ba7      	ldr	r3, [pc, #668]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d49e:	4aa6      	ldr	r2, [pc, #664]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00a      	beq.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d4b2:	4ba1      	ldr	r3, [pc, #644]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b8:	f023 0203 	bic.w	r2, r3, #3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	499d      	ldr	r1, [pc, #628]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 0302 	and.w	r3, r3, #2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00a      	beq.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d4d4:	4b98      	ldr	r3, [pc, #608]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4da:	f023 020c 	bic.w	r2, r3, #12
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	4995      	ldr	r1, [pc, #596]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 0304 	and.w	r3, r3, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00a      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d4f6:	4b90      	ldr	r3, [pc, #576]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	498c      	ldr	r1, [pc, #560]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d506:	4313      	orrs	r3, r2
 800d508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 0308 	and.w	r3, r3, #8
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00a      	beq.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d518:	4b87      	ldr	r3, [pc, #540]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d51e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	4984      	ldr	r1, [pc, #528]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d528:	4313      	orrs	r3, r2
 800d52a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f003 0310 	and.w	r3, r3, #16
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00a      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d53a:	4b7f      	ldr	r3, [pc, #508]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	695b      	ldr	r3, [r3, #20]
 800d548:	497b      	ldr	r1, [pc, #492]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d54a:	4313      	orrs	r3, r2
 800d54c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 0320 	and.w	r3, r3, #32
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00a      	beq.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d55c:	4b76      	ldr	r3, [pc, #472]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d562:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	4973      	ldr	r1, [pc, #460]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d56c:	4313      	orrs	r3, r2
 800d56e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00a      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d57e:	4b6e      	ldr	r3, [pc, #440]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	69db      	ldr	r3, [r3, #28]
 800d58c:	496a      	ldr	r1, [pc, #424]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d58e:	4313      	orrs	r3, r2
 800d590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00a      	beq.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d5a0:	4b65      	ldr	r3, [pc, #404]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	4962      	ldr	r1, [pc, #392]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00a      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d5c2:	4b5d      	ldr	r3, [pc, #372]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	4959      	ldr	r1, [pc, #356]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00a      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d5e4:	4b54      	ldr	r3, [pc, #336]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5ea:	f023 0203 	bic.w	r2, r3, #3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f2:	4951      	ldr	r1, [pc, #324]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00a      	beq.n	800d61c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d606:	4b4c      	ldr	r3, [pc, #304]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d60c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d614:	4948      	ldr	r1, [pc, #288]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d616:	4313      	orrs	r3, r2
 800d618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d624:	2b00      	cmp	r3, #0
 800d626:	d015      	beq.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d628:	4b43      	ldr	r3, [pc, #268]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d62e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d636:	4940      	ldr	r1, [pc, #256]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d638:	4313      	orrs	r3, r2
 800d63a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d646:	d105      	bne.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d648:	4b3b      	ldr	r3, [pc, #236]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	4a3a      	ldr	r2, [pc, #232]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d64e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d652:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d015      	beq.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d660:	4b35      	ldr	r3, [pc, #212]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66e:	4932      	ldr	r1, [pc, #200]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d670:	4313      	orrs	r3, r2
 800d672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d67e:	d105      	bne.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d680:	4b2d      	ldr	r3, [pc, #180]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	4a2c      	ldr	r2, [pc, #176]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d68a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d694:	2b00      	cmp	r3, #0
 800d696:	d015      	beq.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d698:	4b27      	ldr	r3, [pc, #156]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a6:	4924      	ldr	r1, [pc, #144]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d6b6:	d105      	bne.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d6b8:	4b1f      	ldr	r3, [pc, #124]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	4a1e      	ldr	r2, [pc, #120]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d015      	beq.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d6d0:	4b19      	ldr	r3, [pc, #100]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6de:	4916      	ldr	r1, [pc, #88]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6ee:	d105      	bne.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d6f0:	4b11      	ldr	r3, [pc, #68]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	4a10      	ldr	r2, [pc, #64]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d704:	2b00      	cmp	r3, #0
 800d706:	d019      	beq.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d708:	4b0b      	ldr	r3, [pc, #44]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d70e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d716:	4908      	ldr	r1, [pc, #32]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d718:	4313      	orrs	r3, r2
 800d71a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d726:	d109      	bne.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d728:	4b03      	ldr	r3, [pc, #12]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	4a02      	ldr	r2, [pc, #8]	; (800d738 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d72e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d732:	60d3      	str	r3, [r2, #12]
 800d734:	e002      	b.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d736:	bf00      	nop
 800d738:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d015      	beq.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d748:	4b29      	ldr	r3, [pc, #164]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d74e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d756:	4926      	ldr	r1, [pc, #152]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d758:	4313      	orrs	r3, r2
 800d75a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d766:	d105      	bne.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d768:	4b21      	ldr	r3, [pc, #132]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	4a20      	ldr	r2, [pc, #128]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d76e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d772:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d015      	beq.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d780:	4b1b      	ldr	r3, [pc, #108]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d786:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78e:	4918      	ldr	r1, [pc, #96]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d790:	4313      	orrs	r3, r2
 800d792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d79e:	d105      	bne.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d7a0:	4b13      	ldr	r3, [pc, #76]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	4a12      	ldr	r2, [pc, #72]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d015      	beq.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d7b8:	4b0d      	ldr	r3, [pc, #52]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d7be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7c6:	490a      	ldr	r1, [pc, #40]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d7d6:	d105      	bne.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7d8:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	4a04      	ldr	r2, [pc, #16]	; (800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d7de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d7e4:	7cbb      	ldrb	r3, [r7, #18]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	40021000 	.word	0x40021000

0800d7f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e049      	b.n	800d89a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7f8 fd7a 	bl	8006314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2202      	movs	r2, #2
 800d824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3304      	adds	r3, #4
 800d830:	4619      	mov	r1, r3
 800d832:	4610      	mov	r0, r2
 800d834:	f000 fbc8 	bl	800dfc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b082      	sub	sp, #8
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d101      	bne.n	800d8b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e049      	b.n	800d948 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7f8 fda5 	bl	8006418 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f000 fb71 	bl	800dfc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2201      	movs	r2, #1
 800d902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2201      	movs	r2, #1
 800d90a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2201      	movs	r2, #1
 800d91a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2201      	movs	r2, #1
 800d922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2201      	movs	r2, #1
 800d942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <HAL_TIM_PWM_Start+0x24>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b01      	cmp	r3, #1
 800d96a:	bf14      	ite	ne
 800d96c:	2301      	movne	r3, #1
 800d96e:	2300      	moveq	r3, #0
 800d970:	b2db      	uxtb	r3, r3
 800d972:	e03c      	b.n	800d9ee <HAL_TIM_PWM_Start+0x9e>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b04      	cmp	r3, #4
 800d978:	d109      	bne.n	800d98e <HAL_TIM_PWM_Start+0x3e>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b01      	cmp	r3, #1
 800d984:	bf14      	ite	ne
 800d986:	2301      	movne	r3, #1
 800d988:	2300      	moveq	r3, #0
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	e02f      	b.n	800d9ee <HAL_TIM_PWM_Start+0x9e>
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	2b08      	cmp	r3, #8
 800d992:	d109      	bne.n	800d9a8 <HAL_TIM_PWM_Start+0x58>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	bf14      	ite	ne
 800d9a0:	2301      	movne	r3, #1
 800d9a2:	2300      	moveq	r3, #0
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	e022      	b.n	800d9ee <HAL_TIM_PWM_Start+0x9e>
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	2b0c      	cmp	r3, #12
 800d9ac:	d109      	bne.n	800d9c2 <HAL_TIM_PWM_Start+0x72>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	bf14      	ite	ne
 800d9ba:	2301      	movne	r3, #1
 800d9bc:	2300      	moveq	r3, #0
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	e015      	b.n	800d9ee <HAL_TIM_PWM_Start+0x9e>
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b10      	cmp	r3, #16
 800d9c6:	d109      	bne.n	800d9dc <HAL_TIM_PWM_Start+0x8c>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	bf14      	ite	ne
 800d9d4:	2301      	movne	r3, #1
 800d9d6:	2300      	moveq	r3, #0
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	e008      	b.n	800d9ee <HAL_TIM_PWM_Start+0x9e>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	bf14      	ite	ne
 800d9e8:	2301      	movne	r3, #1
 800d9ea:	2300      	moveq	r3, #0
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e0a6      	b.n	800db44 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d104      	bne.n	800da06 <HAL_TIM_PWM_Start+0xb6>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2202      	movs	r2, #2
 800da00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da04:	e023      	b.n	800da4e <HAL_TIM_PWM_Start+0xfe>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b04      	cmp	r3, #4
 800da0a:	d104      	bne.n	800da16 <HAL_TIM_PWM_Start+0xc6>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2202      	movs	r2, #2
 800da10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da14:	e01b      	b.n	800da4e <HAL_TIM_PWM_Start+0xfe>
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	2b08      	cmp	r3, #8
 800da1a:	d104      	bne.n	800da26 <HAL_TIM_PWM_Start+0xd6>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2202      	movs	r2, #2
 800da20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da24:	e013      	b.n	800da4e <HAL_TIM_PWM_Start+0xfe>
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	2b0c      	cmp	r3, #12
 800da2a:	d104      	bne.n	800da36 <HAL_TIM_PWM_Start+0xe6>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2202      	movs	r2, #2
 800da30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da34:	e00b      	b.n	800da4e <HAL_TIM_PWM_Start+0xfe>
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b10      	cmp	r3, #16
 800da3a:	d104      	bne.n	800da46 <HAL_TIM_PWM_Start+0xf6>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2202      	movs	r2, #2
 800da40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da44:	e003      	b.n	800da4e <HAL_TIM_PWM_Start+0xfe>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2202      	movs	r2, #2
 800da4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2201      	movs	r2, #1
 800da54:	6839      	ldr	r1, [r7, #0]
 800da56:	4618      	mov	r0, r3
 800da58:	f000 ff24 	bl	800e8a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a3a      	ldr	r2, [pc, #232]	; (800db4c <HAL_TIM_PWM_Start+0x1fc>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d018      	beq.n	800da98 <HAL_TIM_PWM_Start+0x148>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a39      	ldr	r2, [pc, #228]	; (800db50 <HAL_TIM_PWM_Start+0x200>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d013      	beq.n	800da98 <HAL_TIM_PWM_Start+0x148>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a37      	ldr	r2, [pc, #220]	; (800db54 <HAL_TIM_PWM_Start+0x204>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d00e      	beq.n	800da98 <HAL_TIM_PWM_Start+0x148>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a36      	ldr	r2, [pc, #216]	; (800db58 <HAL_TIM_PWM_Start+0x208>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d009      	beq.n	800da98 <HAL_TIM_PWM_Start+0x148>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a34      	ldr	r2, [pc, #208]	; (800db5c <HAL_TIM_PWM_Start+0x20c>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d004      	beq.n	800da98 <HAL_TIM_PWM_Start+0x148>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a33      	ldr	r2, [pc, #204]	; (800db60 <HAL_TIM_PWM_Start+0x210>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d101      	bne.n	800da9c <HAL_TIM_PWM_Start+0x14c>
 800da98:	2301      	movs	r3, #1
 800da9a:	e000      	b.n	800da9e <HAL_TIM_PWM_Start+0x14e>
 800da9c:	2300      	movs	r3, #0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d007      	beq.n	800dab2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a25      	ldr	r2, [pc, #148]	; (800db4c <HAL_TIM_PWM_Start+0x1fc>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d022      	beq.n	800db02 <HAL_TIM_PWM_Start+0x1b2>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dac4:	d01d      	beq.n	800db02 <HAL_TIM_PWM_Start+0x1b2>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a26      	ldr	r2, [pc, #152]	; (800db64 <HAL_TIM_PWM_Start+0x214>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d018      	beq.n	800db02 <HAL_TIM_PWM_Start+0x1b2>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a24      	ldr	r2, [pc, #144]	; (800db68 <HAL_TIM_PWM_Start+0x218>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d013      	beq.n	800db02 <HAL_TIM_PWM_Start+0x1b2>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a23      	ldr	r2, [pc, #140]	; (800db6c <HAL_TIM_PWM_Start+0x21c>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d00e      	beq.n	800db02 <HAL_TIM_PWM_Start+0x1b2>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a19      	ldr	r2, [pc, #100]	; (800db50 <HAL_TIM_PWM_Start+0x200>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d009      	beq.n	800db02 <HAL_TIM_PWM_Start+0x1b2>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a18      	ldr	r2, [pc, #96]	; (800db54 <HAL_TIM_PWM_Start+0x204>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d004      	beq.n	800db02 <HAL_TIM_PWM_Start+0x1b2>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a18      	ldr	r2, [pc, #96]	; (800db60 <HAL_TIM_PWM_Start+0x210>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d115      	bne.n	800db2e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689a      	ldr	r2, [r3, #8]
 800db08:	4b19      	ldr	r3, [pc, #100]	; (800db70 <HAL_TIM_PWM_Start+0x220>)
 800db0a:	4013      	ands	r3, r2
 800db0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b06      	cmp	r3, #6
 800db12:	d015      	beq.n	800db40 <HAL_TIM_PWM_Start+0x1f0>
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db1a:	d011      	beq.n	800db40 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f042 0201 	orr.w	r2, r2, #1
 800db2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db2c:	e008      	b.n	800db40 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f042 0201 	orr.w	r2, r2, #1
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	e000      	b.n	800db42 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db42:	2300      	movs	r3, #0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	40012c00 	.word	0x40012c00
 800db50:	40013400 	.word	0x40013400
 800db54:	40014000 	.word	0x40014000
 800db58:	40014400 	.word	0x40014400
 800db5c:	40014800 	.word	0x40014800
 800db60:	40015000 	.word	0x40015000
 800db64:	40000400 	.word	0x40000400
 800db68:	40000800 	.word	0x40000800
 800db6c:	40000c00 	.word	0x40000c00
 800db70:	00010007 	.word	0x00010007

0800db74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d101      	bne.n	800db92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db8e:	2302      	movs	r3, #2
 800db90:	e0ff      	b.n	800dd92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b14      	cmp	r3, #20
 800db9e:	f200 80f0 	bhi.w	800dd82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dba2:	a201      	add	r2, pc, #4	; (adr r2, 800dba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba8:	0800dbfd 	.word	0x0800dbfd
 800dbac:	0800dd83 	.word	0x0800dd83
 800dbb0:	0800dd83 	.word	0x0800dd83
 800dbb4:	0800dd83 	.word	0x0800dd83
 800dbb8:	0800dc3d 	.word	0x0800dc3d
 800dbbc:	0800dd83 	.word	0x0800dd83
 800dbc0:	0800dd83 	.word	0x0800dd83
 800dbc4:	0800dd83 	.word	0x0800dd83
 800dbc8:	0800dc7f 	.word	0x0800dc7f
 800dbcc:	0800dd83 	.word	0x0800dd83
 800dbd0:	0800dd83 	.word	0x0800dd83
 800dbd4:	0800dd83 	.word	0x0800dd83
 800dbd8:	0800dcbf 	.word	0x0800dcbf
 800dbdc:	0800dd83 	.word	0x0800dd83
 800dbe0:	0800dd83 	.word	0x0800dd83
 800dbe4:	0800dd83 	.word	0x0800dd83
 800dbe8:	0800dd01 	.word	0x0800dd01
 800dbec:	0800dd83 	.word	0x0800dd83
 800dbf0:	0800dd83 	.word	0x0800dd83
 800dbf4:	0800dd83 	.word	0x0800dd83
 800dbf8:	0800dd41 	.word	0x0800dd41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68b9      	ldr	r1, [r7, #8]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 fa88 	bl	800e118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	699a      	ldr	r2, [r3, #24]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f042 0208 	orr.w	r2, r2, #8
 800dc16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	699a      	ldr	r2, [r3, #24]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f022 0204 	bic.w	r2, r2, #4
 800dc26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6999      	ldr	r1, [r3, #24]
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	691a      	ldr	r2, [r3, #16]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	430a      	orrs	r2, r1
 800dc38:	619a      	str	r2, [r3, #24]
      break;
 800dc3a:	e0a5      	b.n	800dd88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68b9      	ldr	r1, [r7, #8]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 fb02 	bl	800e24c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	699a      	ldr	r2, [r3, #24]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	699a      	ldr	r2, [r3, #24]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6999      	ldr	r1, [r3, #24]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	021a      	lsls	r2, r3, #8
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	619a      	str	r2, [r3, #24]
      break;
 800dc7c:	e084      	b.n	800dd88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 fb75 	bl	800e374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	69da      	ldr	r2, [r3, #28]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f042 0208 	orr.w	r2, r2, #8
 800dc98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	69da      	ldr	r2, [r3, #28]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f022 0204 	bic.w	r2, r2, #4
 800dca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69d9      	ldr	r1, [r3, #28]
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	691a      	ldr	r2, [r3, #16]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	61da      	str	r2, [r3, #28]
      break;
 800dcbc:	e064      	b.n	800dd88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	68b9      	ldr	r1, [r7, #8]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 fbe7 	bl	800e498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	69da      	ldr	r2, [r3, #28]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	69da      	ldr	r2, [r3, #28]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	69d9      	ldr	r1, [r3, #28]
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	021a      	lsls	r2, r3, #8
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	430a      	orrs	r2, r1
 800dcfc:	61da      	str	r2, [r3, #28]
      break;
 800dcfe:	e043      	b.n	800dd88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	68b9      	ldr	r1, [r7, #8]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 fc5a 	bl	800e5c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f042 0208 	orr.w	r2, r2, #8
 800dd1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f022 0204 	bic.w	r2, r2, #4
 800dd2a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	691a      	ldr	r2, [r3, #16]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	430a      	orrs	r2, r1
 800dd3c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dd3e:	e023      	b.n	800dd88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68b9      	ldr	r1, [r7, #8]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fca4 	bl	800e694 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd6a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	021a      	lsls	r2, r3, #8
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	430a      	orrs	r2, r1
 800dd7e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dd80:	e002      	b.n	800dd88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd82:	2301      	movs	r3, #1
 800dd84:	75fb      	strb	r3, [r7, #23]
      break;
 800dd86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop

0800dd9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d101      	bne.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1c>
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	e0f6      	b.n	800dfa6 <HAL_TIM_ConfigClockSource+0x20a>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2202      	movs	r2, #2
 800ddc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ddd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ddda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dde2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a6f      	ldr	r2, [pc, #444]	; (800dfb0 <HAL_TIM_ConfigClockSource+0x214>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	f000 80c1 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800ddf8:	4a6d      	ldr	r2, [pc, #436]	; (800dfb0 <HAL_TIM_ConfigClockSource+0x214>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	f200 80c6 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de00:	4a6c      	ldr	r2, [pc, #432]	; (800dfb4 <HAL_TIM_ConfigClockSource+0x218>)
 800de02:	4293      	cmp	r3, r2
 800de04:	f000 80b9 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800de08:	4a6a      	ldr	r2, [pc, #424]	; (800dfb4 <HAL_TIM_ConfigClockSource+0x218>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	f200 80be 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de10:	4a69      	ldr	r2, [pc, #420]	; (800dfb8 <HAL_TIM_ConfigClockSource+0x21c>)
 800de12:	4293      	cmp	r3, r2
 800de14:	f000 80b1 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800de18:	4a67      	ldr	r2, [pc, #412]	; (800dfb8 <HAL_TIM_ConfigClockSource+0x21c>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	f200 80b6 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de20:	4a66      	ldr	r2, [pc, #408]	; (800dfbc <HAL_TIM_ConfigClockSource+0x220>)
 800de22:	4293      	cmp	r3, r2
 800de24:	f000 80a9 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800de28:	4a64      	ldr	r2, [pc, #400]	; (800dfbc <HAL_TIM_ConfigClockSource+0x220>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	f200 80ae 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de30:	4a63      	ldr	r2, [pc, #396]	; (800dfc0 <HAL_TIM_ConfigClockSource+0x224>)
 800de32:	4293      	cmp	r3, r2
 800de34:	f000 80a1 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800de38:	4a61      	ldr	r2, [pc, #388]	; (800dfc0 <HAL_TIM_ConfigClockSource+0x224>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	f200 80a6 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de40:	4a60      	ldr	r2, [pc, #384]	; (800dfc4 <HAL_TIM_ConfigClockSource+0x228>)
 800de42:	4293      	cmp	r3, r2
 800de44:	f000 8099 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800de48:	4a5e      	ldr	r2, [pc, #376]	; (800dfc4 <HAL_TIM_ConfigClockSource+0x228>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	f200 809e 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de54:	f000 8091 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800de58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de5c:	f200 8096 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de64:	f000 8089 	beq.w	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800de68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de6c:	f200 808e 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de74:	d03e      	beq.n	800def4 <HAL_TIM_ConfigClockSource+0x158>
 800de76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de7a:	f200 8087 	bhi.w	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de82:	f000 8086 	beq.w	800df92 <HAL_TIM_ConfigClockSource+0x1f6>
 800de86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de8a:	d87f      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de8c:	2b70      	cmp	r3, #112	; 0x70
 800de8e:	d01a      	beq.n	800dec6 <HAL_TIM_ConfigClockSource+0x12a>
 800de90:	2b70      	cmp	r3, #112	; 0x70
 800de92:	d87b      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de94:	2b60      	cmp	r3, #96	; 0x60
 800de96:	d050      	beq.n	800df3a <HAL_TIM_ConfigClockSource+0x19e>
 800de98:	2b60      	cmp	r3, #96	; 0x60
 800de9a:	d877      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800de9c:	2b50      	cmp	r3, #80	; 0x50
 800de9e:	d03c      	beq.n	800df1a <HAL_TIM_ConfigClockSource+0x17e>
 800dea0:	2b50      	cmp	r3, #80	; 0x50
 800dea2:	d873      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800dea4:	2b40      	cmp	r3, #64	; 0x40
 800dea6:	d058      	beq.n	800df5a <HAL_TIM_ConfigClockSource+0x1be>
 800dea8:	2b40      	cmp	r3, #64	; 0x40
 800deaa:	d86f      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800deac:	2b30      	cmp	r3, #48	; 0x30
 800deae:	d064      	beq.n	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800deb0:	2b30      	cmp	r3, #48	; 0x30
 800deb2:	d86b      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800deb4:	2b20      	cmp	r3, #32
 800deb6:	d060      	beq.n	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800deb8:	2b20      	cmp	r3, #32
 800deba:	d867      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
 800debc:	2b00      	cmp	r3, #0
 800debe:	d05c      	beq.n	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800dec0:	2b10      	cmp	r3, #16
 800dec2:	d05a      	beq.n	800df7a <HAL_TIM_ConfigClockSource+0x1de>
 800dec4:	e062      	b.n	800df8c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6818      	ldr	r0, [r3, #0]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	6899      	ldr	r1, [r3, #8]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f000 fcc5 	bl	800e864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	68ba      	ldr	r2, [r7, #8]
 800def0:	609a      	str	r2, [r3, #8]
      break;
 800def2:	e04f      	b.n	800df94 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6818      	ldr	r0, [r3, #0]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	6899      	ldr	r1, [r3, #8]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	f000 fcae 	bl	800e864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	689a      	ldr	r2, [r3, #8]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df16:	609a      	str	r2, [r3, #8]
      break;
 800df18:	e03c      	b.n	800df94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6818      	ldr	r0, [r3, #0]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	6859      	ldr	r1, [r3, #4]
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	461a      	mov	r2, r3
 800df28:	f000 fc20 	bl	800e76c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2150      	movs	r1, #80	; 0x50
 800df32:	4618      	mov	r0, r3
 800df34:	f000 fc79 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800df38:	e02c      	b.n	800df94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6818      	ldr	r0, [r3, #0]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	6859      	ldr	r1, [r3, #4]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	461a      	mov	r2, r3
 800df48:	f000 fc3f 	bl	800e7ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2160      	movs	r1, #96	; 0x60
 800df52:	4618      	mov	r0, r3
 800df54:	f000 fc69 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800df58:	e01c      	b.n	800df94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6818      	ldr	r0, [r3, #0]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	6859      	ldr	r1, [r3, #4]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	461a      	mov	r2, r3
 800df68:	f000 fc00 	bl	800e76c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2140      	movs	r1, #64	; 0x40
 800df72:	4618      	mov	r0, r3
 800df74:	f000 fc59 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800df78:	e00c      	b.n	800df94 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4619      	mov	r1, r3
 800df84:	4610      	mov	r0, r2
 800df86:	f000 fc50 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800df8a:	e003      	b.n	800df94 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800df8c:	2301      	movs	r3, #1
 800df8e:	73fb      	strb	r3, [r7, #15]
      break;
 800df90:	e000      	b.n	800df94 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800df92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	00100070 	.word	0x00100070
 800dfb4:	00100060 	.word	0x00100060
 800dfb8:	00100050 	.word	0x00100050
 800dfbc:	00100040 	.word	0x00100040
 800dfc0:	00100030 	.word	0x00100030
 800dfc4:	00100020 	.word	0x00100020

0800dfc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a46      	ldr	r2, [pc, #280]	; (800e0f4 <TIM_Base_SetConfig+0x12c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d017      	beq.n	800e010 <TIM_Base_SetConfig+0x48>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfe6:	d013      	beq.n	800e010 <TIM_Base_SetConfig+0x48>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a43      	ldr	r2, [pc, #268]	; (800e0f8 <TIM_Base_SetConfig+0x130>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d00f      	beq.n	800e010 <TIM_Base_SetConfig+0x48>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4a42      	ldr	r2, [pc, #264]	; (800e0fc <TIM_Base_SetConfig+0x134>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d00b      	beq.n	800e010 <TIM_Base_SetConfig+0x48>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4a41      	ldr	r2, [pc, #260]	; (800e100 <TIM_Base_SetConfig+0x138>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d007      	beq.n	800e010 <TIM_Base_SetConfig+0x48>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4a40      	ldr	r2, [pc, #256]	; (800e104 <TIM_Base_SetConfig+0x13c>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d003      	beq.n	800e010 <TIM_Base_SetConfig+0x48>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	4a3f      	ldr	r2, [pc, #252]	; (800e108 <TIM_Base_SetConfig+0x140>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d108      	bne.n	800e022 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	4313      	orrs	r3, r2
 800e020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a33      	ldr	r2, [pc, #204]	; (800e0f4 <TIM_Base_SetConfig+0x12c>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d023      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e030:	d01f      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a30      	ldr	r2, [pc, #192]	; (800e0f8 <TIM_Base_SetConfig+0x130>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d01b      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a2f      	ldr	r2, [pc, #188]	; (800e0fc <TIM_Base_SetConfig+0x134>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d017      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a2e      	ldr	r2, [pc, #184]	; (800e100 <TIM_Base_SetConfig+0x138>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d013      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4a2d      	ldr	r2, [pc, #180]	; (800e104 <TIM_Base_SetConfig+0x13c>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d00f      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a2d      	ldr	r2, [pc, #180]	; (800e10c <TIM_Base_SetConfig+0x144>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d00b      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4a2c      	ldr	r2, [pc, #176]	; (800e110 <TIM_Base_SetConfig+0x148>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d007      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a2b      	ldr	r2, [pc, #172]	; (800e114 <TIM_Base_SetConfig+0x14c>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d003      	beq.n	800e072 <TIM_Base_SetConfig+0xaa>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4a26      	ldr	r2, [pc, #152]	; (800e108 <TIM_Base_SetConfig+0x140>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d108      	bne.n	800e084 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	4313      	orrs	r3, r2
 800e082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	4313      	orrs	r3, r2
 800e090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	689a      	ldr	r2, [r3, #8]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4a12      	ldr	r2, [pc, #72]	; (800e0f4 <TIM_Base_SetConfig+0x12c>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d013      	beq.n	800e0d8 <TIM_Base_SetConfig+0x110>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a14      	ldr	r2, [pc, #80]	; (800e104 <TIM_Base_SetConfig+0x13c>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d00f      	beq.n	800e0d8 <TIM_Base_SetConfig+0x110>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	4a14      	ldr	r2, [pc, #80]	; (800e10c <TIM_Base_SetConfig+0x144>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d00b      	beq.n	800e0d8 <TIM_Base_SetConfig+0x110>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	4a13      	ldr	r2, [pc, #76]	; (800e110 <TIM_Base_SetConfig+0x148>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d007      	beq.n	800e0d8 <TIM_Base_SetConfig+0x110>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4a12      	ldr	r2, [pc, #72]	; (800e114 <TIM_Base_SetConfig+0x14c>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d003      	beq.n	800e0d8 <TIM_Base_SetConfig+0x110>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4a0d      	ldr	r2, [pc, #52]	; (800e108 <TIM_Base_SetConfig+0x140>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d103      	bne.n	800e0e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	691a      	ldr	r2, [r3, #16]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	615a      	str	r2, [r3, #20]
}
 800e0e6:	bf00      	nop
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	40012c00 	.word	0x40012c00
 800e0f8:	40000400 	.word	0x40000400
 800e0fc:	40000800 	.word	0x40000800
 800e100:	40000c00 	.word	0x40000c00
 800e104:	40013400 	.word	0x40013400
 800e108:	40015000 	.word	0x40015000
 800e10c:	40014000 	.word	0x40014000
 800e110:	40014400 	.word	0x40014400
 800e114:	40014800 	.word	0x40014800

0800e118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e118:	b480      	push	{r7}
 800e11a:	b087      	sub	sp, #28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	f023 0201 	bic.w	r2, r3, #1
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	699b      	ldr	r3, [r3, #24]
 800e13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f023 0303 	bic.w	r3, r3, #3
 800e152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f023 0302 	bic.w	r3, r3, #2
 800e164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a30      	ldr	r2, [pc, #192]	; (800e234 <TIM_OC1_SetConfig+0x11c>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d013      	beq.n	800e1a0 <TIM_OC1_SetConfig+0x88>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a2f      	ldr	r2, [pc, #188]	; (800e238 <TIM_OC1_SetConfig+0x120>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00f      	beq.n	800e1a0 <TIM_OC1_SetConfig+0x88>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a2e      	ldr	r2, [pc, #184]	; (800e23c <TIM_OC1_SetConfig+0x124>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d00b      	beq.n	800e1a0 <TIM_OC1_SetConfig+0x88>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a2d      	ldr	r2, [pc, #180]	; (800e240 <TIM_OC1_SetConfig+0x128>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d007      	beq.n	800e1a0 <TIM_OC1_SetConfig+0x88>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a2c      	ldr	r2, [pc, #176]	; (800e244 <TIM_OC1_SetConfig+0x12c>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d003      	beq.n	800e1a0 <TIM_OC1_SetConfig+0x88>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a2b      	ldr	r2, [pc, #172]	; (800e248 <TIM_OC1_SetConfig+0x130>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d10c      	bne.n	800e1ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	f023 0308 	bic.w	r3, r3, #8
 800e1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f023 0304 	bic.w	r3, r3, #4
 800e1b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a1d      	ldr	r2, [pc, #116]	; (800e234 <TIM_OC1_SetConfig+0x11c>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d013      	beq.n	800e1ea <TIM_OC1_SetConfig+0xd2>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a1c      	ldr	r2, [pc, #112]	; (800e238 <TIM_OC1_SetConfig+0x120>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d00f      	beq.n	800e1ea <TIM_OC1_SetConfig+0xd2>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4a1b      	ldr	r2, [pc, #108]	; (800e23c <TIM_OC1_SetConfig+0x124>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d00b      	beq.n	800e1ea <TIM_OC1_SetConfig+0xd2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a1a      	ldr	r2, [pc, #104]	; (800e240 <TIM_OC1_SetConfig+0x128>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d007      	beq.n	800e1ea <TIM_OC1_SetConfig+0xd2>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a19      	ldr	r2, [pc, #100]	; (800e244 <TIM_OC1_SetConfig+0x12c>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d003      	beq.n	800e1ea <TIM_OC1_SetConfig+0xd2>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4a18      	ldr	r2, [pc, #96]	; (800e248 <TIM_OC1_SetConfig+0x130>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d111      	bne.n	800e20e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	693a      	ldr	r2, [r7, #16]
 800e200:	4313      	orrs	r3, r2
 800e202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	699b      	ldr	r3, [r3, #24]
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	4313      	orrs	r3, r2
 800e20c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	621a      	str	r2, [r3, #32]
}
 800e228:	bf00      	nop
 800e22a:	371c      	adds	r7, #28
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	40012c00 	.word	0x40012c00
 800e238:	40013400 	.word	0x40013400
 800e23c:	40014000 	.word	0x40014000
 800e240:	40014400 	.word	0x40014400
 800e244:	40014800 	.word	0x40014800
 800e248:	40015000 	.word	0x40015000

0800e24c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b087      	sub	sp, #28
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	f023 0210 	bic.w	r2, r3, #16
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	021b      	lsls	r3, r3, #8
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	4313      	orrs	r3, r2
 800e292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f023 0320 	bic.w	r3, r3, #32
 800e29a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	011b      	lsls	r3, r3, #4
 800e2a2:	697a      	ldr	r2, [r7, #20]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a2c      	ldr	r2, [pc, #176]	; (800e35c <TIM_OC2_SetConfig+0x110>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d007      	beq.n	800e2c0 <TIM_OC2_SetConfig+0x74>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a2b      	ldr	r2, [pc, #172]	; (800e360 <TIM_OC2_SetConfig+0x114>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d003      	beq.n	800e2c0 <TIM_OC2_SetConfig+0x74>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a2a      	ldr	r2, [pc, #168]	; (800e364 <TIM_OC2_SetConfig+0x118>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d10d      	bne.n	800e2dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	011b      	lsls	r3, r3, #4
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a1f      	ldr	r2, [pc, #124]	; (800e35c <TIM_OC2_SetConfig+0x110>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d013      	beq.n	800e30c <TIM_OC2_SetConfig+0xc0>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a1e      	ldr	r2, [pc, #120]	; (800e360 <TIM_OC2_SetConfig+0x114>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d00f      	beq.n	800e30c <TIM_OC2_SetConfig+0xc0>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a1e      	ldr	r2, [pc, #120]	; (800e368 <TIM_OC2_SetConfig+0x11c>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d00b      	beq.n	800e30c <TIM_OC2_SetConfig+0xc0>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4a1d      	ldr	r2, [pc, #116]	; (800e36c <TIM_OC2_SetConfig+0x120>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d007      	beq.n	800e30c <TIM_OC2_SetConfig+0xc0>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4a1c      	ldr	r2, [pc, #112]	; (800e370 <TIM_OC2_SetConfig+0x124>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d003      	beq.n	800e30c <TIM_OC2_SetConfig+0xc0>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a17      	ldr	r2, [pc, #92]	; (800e364 <TIM_OC2_SetConfig+0x118>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d113      	bne.n	800e334 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e31a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	695b      	ldr	r3, [r3, #20]
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	4313      	orrs	r3, r2
 800e326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	693a      	ldr	r2, [r7, #16]
 800e330:	4313      	orrs	r3, r2
 800e332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	685a      	ldr	r2, [r3, #4]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	621a      	str	r2, [r3, #32]
}
 800e34e:	bf00      	nop
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	40012c00 	.word	0x40012c00
 800e360:	40013400 	.word	0x40013400
 800e364:	40015000 	.word	0x40015000
 800e368:	40014000 	.word	0x40014000
 800e36c:	40014400 	.word	0x40014400
 800e370:	40014800 	.word	0x40014800

0800e374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e374:	b480      	push	{r7}
 800e376:	b087      	sub	sp, #28
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6a1b      	ldr	r3, [r3, #32]
 800e382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a1b      	ldr	r3, [r3, #32]
 800e38e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	69db      	ldr	r3, [r3, #28]
 800e39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f023 0303 	bic.w	r3, r3, #3
 800e3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	021b      	lsls	r3, r3, #8
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a2b      	ldr	r2, [pc, #172]	; (800e480 <TIM_OC3_SetConfig+0x10c>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d007      	beq.n	800e3e6 <TIM_OC3_SetConfig+0x72>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4a2a      	ldr	r2, [pc, #168]	; (800e484 <TIM_OC3_SetConfig+0x110>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d003      	beq.n	800e3e6 <TIM_OC3_SetConfig+0x72>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4a29      	ldr	r2, [pc, #164]	; (800e488 <TIM_OC3_SetConfig+0x114>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d10d      	bne.n	800e402 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	021b      	lsls	r3, r3, #8
 800e3f4:	697a      	ldr	r2, [r7, #20]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4a1e      	ldr	r2, [pc, #120]	; (800e480 <TIM_OC3_SetConfig+0x10c>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d013      	beq.n	800e432 <TIM_OC3_SetConfig+0xbe>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <TIM_OC3_SetConfig+0x110>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d00f      	beq.n	800e432 <TIM_OC3_SetConfig+0xbe>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4a1d      	ldr	r2, [pc, #116]	; (800e48c <TIM_OC3_SetConfig+0x118>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d00b      	beq.n	800e432 <TIM_OC3_SetConfig+0xbe>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4a1c      	ldr	r2, [pc, #112]	; (800e490 <TIM_OC3_SetConfig+0x11c>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d007      	beq.n	800e432 <TIM_OC3_SetConfig+0xbe>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a1b      	ldr	r2, [pc, #108]	; (800e494 <TIM_OC3_SetConfig+0x120>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d003      	beq.n	800e432 <TIM_OC3_SetConfig+0xbe>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4a16      	ldr	r2, [pc, #88]	; (800e488 <TIM_OC3_SetConfig+0x114>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d113      	bne.n	800e45a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	011b      	lsls	r3, r3, #4
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	011b      	lsls	r3, r3, #4
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	4313      	orrs	r3, r2
 800e458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	685a      	ldr	r2, [r3, #4]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	621a      	str	r2, [r3, #32]
}
 800e474:	bf00      	nop
 800e476:	371c      	adds	r7, #28
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr
 800e480:	40012c00 	.word	0x40012c00
 800e484:	40013400 	.word	0x40013400
 800e488:	40015000 	.word	0x40015000
 800e48c:	40014000 	.word	0x40014000
 800e490:	40014400 	.word	0x40014400
 800e494:	40014800 	.word	0x40014800

0800e498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e498:	b480      	push	{r7}
 800e49a:	b087      	sub	sp, #28
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a1b      	ldr	r3, [r3, #32]
 800e4b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	69db      	ldr	r3, [r3, #28]
 800e4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	021b      	lsls	r3, r3, #8
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	031b      	lsls	r3, r3, #12
 800e4ee:	697a      	ldr	r2, [r7, #20]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4a2c      	ldr	r2, [pc, #176]	; (800e5a8 <TIM_OC4_SetConfig+0x110>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d007      	beq.n	800e50c <TIM_OC4_SetConfig+0x74>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a2b      	ldr	r2, [pc, #172]	; (800e5ac <TIM_OC4_SetConfig+0x114>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d003      	beq.n	800e50c <TIM_OC4_SetConfig+0x74>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4a2a      	ldr	r2, [pc, #168]	; (800e5b0 <TIM_OC4_SetConfig+0x118>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d10d      	bne.n	800e528 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	031b      	lsls	r3, r3, #12
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	4313      	orrs	r3, r2
 800e51e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a1f      	ldr	r2, [pc, #124]	; (800e5a8 <TIM_OC4_SetConfig+0x110>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d013      	beq.n	800e558 <TIM_OC4_SetConfig+0xc0>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4a1e      	ldr	r2, [pc, #120]	; (800e5ac <TIM_OC4_SetConfig+0x114>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d00f      	beq.n	800e558 <TIM_OC4_SetConfig+0xc0>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a1e      	ldr	r2, [pc, #120]	; (800e5b4 <TIM_OC4_SetConfig+0x11c>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d00b      	beq.n	800e558 <TIM_OC4_SetConfig+0xc0>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a1d      	ldr	r2, [pc, #116]	; (800e5b8 <TIM_OC4_SetConfig+0x120>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d007      	beq.n	800e558 <TIM_OC4_SetConfig+0xc0>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a1c      	ldr	r2, [pc, #112]	; (800e5bc <TIM_OC4_SetConfig+0x124>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d003      	beq.n	800e558 <TIM_OC4_SetConfig+0xc0>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4a17      	ldr	r2, [pc, #92]	; (800e5b0 <TIM_OC4_SetConfig+0x118>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d113      	bne.n	800e580 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e55e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e566:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	019b      	lsls	r3, r3, #6
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	4313      	orrs	r3, r2
 800e572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	699b      	ldr	r3, [r3, #24]
 800e578:	019b      	lsls	r3, r3, #6
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	693a      	ldr	r2, [r7, #16]
 800e584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	685a      	ldr	r2, [r3, #4]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	621a      	str	r2, [r3, #32]
}
 800e59a:	bf00      	nop
 800e59c:	371c      	adds	r7, #28
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	40012c00 	.word	0x40012c00
 800e5ac:	40013400 	.word	0x40013400
 800e5b0:	40015000 	.word	0x40015000
 800e5b4:	40014000 	.word	0x40014000
 800e5b8:	40014400 	.word	0x40014400
 800e5bc:	40014800 	.word	0x40014800

0800e5c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b087      	sub	sp, #28
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6a1b      	ldr	r3, [r3, #32]
 800e5ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a1b      	ldr	r3, [r3, #32]
 800e5da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e604:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	041b      	lsls	r3, r3, #16
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	4313      	orrs	r3, r2
 800e610:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4a19      	ldr	r2, [pc, #100]	; (800e67c <TIM_OC5_SetConfig+0xbc>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d013      	beq.n	800e642 <TIM_OC5_SetConfig+0x82>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4a18      	ldr	r2, [pc, #96]	; (800e680 <TIM_OC5_SetConfig+0xc0>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d00f      	beq.n	800e642 <TIM_OC5_SetConfig+0x82>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4a17      	ldr	r2, [pc, #92]	; (800e684 <TIM_OC5_SetConfig+0xc4>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d00b      	beq.n	800e642 <TIM_OC5_SetConfig+0x82>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4a16      	ldr	r2, [pc, #88]	; (800e688 <TIM_OC5_SetConfig+0xc8>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d007      	beq.n	800e642 <TIM_OC5_SetConfig+0x82>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4a15      	ldr	r2, [pc, #84]	; (800e68c <TIM_OC5_SetConfig+0xcc>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d003      	beq.n	800e642 <TIM_OC5_SetConfig+0x82>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4a14      	ldr	r2, [pc, #80]	; (800e690 <TIM_OC5_SetConfig+0xd0>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d109      	bne.n	800e656 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	695b      	ldr	r3, [r3, #20]
 800e64e:	021b      	lsls	r3, r3, #8
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	4313      	orrs	r3, r2
 800e654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	697a      	ldr	r2, [r7, #20]
 800e65a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	685a      	ldr	r2, [r3, #4]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	693a      	ldr	r2, [r7, #16]
 800e66e:	621a      	str	r2, [r3, #32]
}
 800e670:	bf00      	nop
 800e672:	371c      	adds	r7, #28
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	40012c00 	.word	0x40012c00
 800e680:	40013400 	.word	0x40013400
 800e684:	40014000 	.word	0x40014000
 800e688:	40014400 	.word	0x40014400
 800e68c:	40014800 	.word	0x40014800
 800e690:	40015000 	.word	0x40015000

0800e694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e694:	b480      	push	{r7}
 800e696:	b087      	sub	sp, #28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a1b      	ldr	r3, [r3, #32]
 800e6a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a1b      	ldr	r3, [r3, #32]
 800e6ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e6c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	021b      	lsls	r3, r3, #8
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e6da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	051b      	lsls	r3, r3, #20
 800e6e2:	693a      	ldr	r2, [r7, #16]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a1a      	ldr	r2, [pc, #104]	; (800e754 <TIM_OC6_SetConfig+0xc0>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d013      	beq.n	800e718 <TIM_OC6_SetConfig+0x84>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	4a19      	ldr	r2, [pc, #100]	; (800e758 <TIM_OC6_SetConfig+0xc4>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d00f      	beq.n	800e718 <TIM_OC6_SetConfig+0x84>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4a18      	ldr	r2, [pc, #96]	; (800e75c <TIM_OC6_SetConfig+0xc8>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d00b      	beq.n	800e718 <TIM_OC6_SetConfig+0x84>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a17      	ldr	r2, [pc, #92]	; (800e760 <TIM_OC6_SetConfig+0xcc>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d007      	beq.n	800e718 <TIM_OC6_SetConfig+0x84>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a16      	ldr	r2, [pc, #88]	; (800e764 <TIM_OC6_SetConfig+0xd0>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d003      	beq.n	800e718 <TIM_OC6_SetConfig+0x84>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4a15      	ldr	r2, [pc, #84]	; (800e768 <TIM_OC6_SetConfig+0xd4>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d109      	bne.n	800e72c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e71e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	695b      	ldr	r3, [r3, #20]
 800e724:	029b      	lsls	r3, r3, #10
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	4313      	orrs	r3, r2
 800e72a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	697a      	ldr	r2, [r7, #20]
 800e730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	68fa      	ldr	r2, [r7, #12]
 800e736:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	685a      	ldr	r2, [r3, #4]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	693a      	ldr	r2, [r7, #16]
 800e744:	621a      	str	r2, [r3, #32]
}
 800e746:	bf00      	nop
 800e748:	371c      	adds	r7, #28
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	40012c00 	.word	0x40012c00
 800e758:	40013400 	.word	0x40013400
 800e75c:	40014000 	.word	0x40014000
 800e760:	40014400 	.word	0x40014400
 800e764:	40014800 	.word	0x40014800
 800e768:	40015000 	.word	0x40015000

0800e76c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b087      	sub	sp, #28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6a1b      	ldr	r3, [r3, #32]
 800e77c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6a1b      	ldr	r3, [r3, #32]
 800e782:	f023 0201 	bic.w	r2, r3, #1
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	011b      	lsls	r3, r3, #4
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f023 030a 	bic.w	r3, r3, #10
 800e7a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	697a      	ldr	r2, [r7, #20]
 800e7bc:	621a      	str	r2, [r3, #32]
}
 800e7be:	bf00      	nop
 800e7c0:	371c      	adds	r7, #28
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7ca:	b480      	push	{r7}
 800e7cc:	b087      	sub	sp, #28
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	f023 0210 	bic.w	r2, r3, #16
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6a1b      	ldr	r3, [r3, #32]
 800e7ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	031b      	lsls	r3, r3, #12
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	011b      	lsls	r3, r3, #4
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	4313      	orrs	r3, r2
 800e810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	697a      	ldr	r2, [r7, #20]
 800e816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	693a      	ldr	r2, [r7, #16]
 800e81c:	621a      	str	r2, [r3, #32]
}
 800e81e:	bf00      	nop
 800e820:	371c      	adds	r7, #28
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e82a:	b480      	push	{r7}
 800e82c:	b085      	sub	sp, #20
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	f043 0307 	orr.w	r3, r3, #7
 800e850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	609a      	str	r2, [r3, #8]
}
 800e858:	bf00      	nop
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e87e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	021a      	lsls	r2, r3, #8
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	431a      	orrs	r2, r3
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	4313      	orrs	r3, r2
 800e890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	697a      	ldr	r2, [r7, #20]
 800e896:	609a      	str	r2, [r3, #8]
}
 800e898:	bf00      	nop
 800e89a:	371c      	adds	r7, #28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b087      	sub	sp, #28
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	f003 031f 	and.w	r3, r3, #31
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6a1a      	ldr	r2, [r3, #32]
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	43db      	mvns	r3, r3
 800e8c6:	401a      	ands	r2, r3
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6a1a      	ldr	r2, [r3, #32]
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	f003 031f 	and.w	r3, r3, #31
 800e8d6:	6879      	ldr	r1, [r7, #4]
 800e8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e8dc:	431a      	orrs	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	621a      	str	r2, [r3, #32]
}
 800e8e2:	bf00      	nop
 800e8e4:	371c      	adds	r7, #28
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
	...

0800e8f0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d109      	bne.n	800e914 <HAL_TIMEx_PWMN_Start+0x24>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e906:	b2db      	uxtb	r3, r3
 800e908:	2b01      	cmp	r3, #1
 800e90a:	bf14      	ite	ne
 800e90c:	2301      	movne	r3, #1
 800e90e:	2300      	moveq	r3, #0
 800e910:	b2db      	uxtb	r3, r3
 800e912:	e022      	b.n	800e95a <HAL_TIMEx_PWMN_Start+0x6a>
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b04      	cmp	r3, #4
 800e918:	d109      	bne.n	800e92e <HAL_TIMEx_PWMN_Start+0x3e>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b01      	cmp	r3, #1
 800e924:	bf14      	ite	ne
 800e926:	2301      	movne	r3, #1
 800e928:	2300      	moveq	r3, #0
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	e015      	b.n	800e95a <HAL_TIMEx_PWMN_Start+0x6a>
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	2b08      	cmp	r3, #8
 800e932:	d109      	bne.n	800e948 <HAL_TIMEx_PWMN_Start+0x58>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	bf14      	ite	ne
 800e940:	2301      	movne	r3, #1
 800e942:	2300      	moveq	r3, #0
 800e944:	b2db      	uxtb	r3, r3
 800e946:	e008      	b.n	800e95a <HAL_TIMEx_PWMN_Start+0x6a>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b01      	cmp	r3, #1
 800e952:	bf14      	ite	ne
 800e954:	2301      	movne	r3, #1
 800e956:	2300      	moveq	r3, #0
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800e95e:	2301      	movs	r3, #1
 800e960:	e073      	b.n	800ea4a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d104      	bne.n	800e972 <HAL_TIMEx_PWMN_Start+0x82>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2202      	movs	r2, #2
 800e96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e970:	e013      	b.n	800e99a <HAL_TIMEx_PWMN_Start+0xaa>
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b04      	cmp	r3, #4
 800e976:	d104      	bne.n	800e982 <HAL_TIMEx_PWMN_Start+0x92>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2202      	movs	r2, #2
 800e97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e980:	e00b      	b.n	800e99a <HAL_TIMEx_PWMN_Start+0xaa>
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	2b08      	cmp	r3, #8
 800e986:	d104      	bne.n	800e992 <HAL_TIMEx_PWMN_Start+0xa2>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2202      	movs	r2, #2
 800e98c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e990:	e003      	b.n	800e99a <HAL_TIMEx_PWMN_Start+0xaa>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2202      	movs	r2, #2
 800e996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2204      	movs	r2, #4
 800e9a0:	6839      	ldr	r1, [r7, #0]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 f9ae 	bl	800ed04 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a25      	ldr	r2, [pc, #148]	; (800ea54 <HAL_TIMEx_PWMN_Start+0x164>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d022      	beq.n	800ea08 <HAL_TIMEx_PWMN_Start+0x118>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9ca:	d01d      	beq.n	800ea08 <HAL_TIMEx_PWMN_Start+0x118>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a21      	ldr	r2, [pc, #132]	; (800ea58 <HAL_TIMEx_PWMN_Start+0x168>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d018      	beq.n	800ea08 <HAL_TIMEx_PWMN_Start+0x118>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a20      	ldr	r2, [pc, #128]	; (800ea5c <HAL_TIMEx_PWMN_Start+0x16c>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d013      	beq.n	800ea08 <HAL_TIMEx_PWMN_Start+0x118>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a1e      	ldr	r2, [pc, #120]	; (800ea60 <HAL_TIMEx_PWMN_Start+0x170>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d00e      	beq.n	800ea08 <HAL_TIMEx_PWMN_Start+0x118>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a1d      	ldr	r2, [pc, #116]	; (800ea64 <HAL_TIMEx_PWMN_Start+0x174>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d009      	beq.n	800ea08 <HAL_TIMEx_PWMN_Start+0x118>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ea68 <HAL_TIMEx_PWMN_Start+0x178>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d004      	beq.n	800ea08 <HAL_TIMEx_PWMN_Start+0x118>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a1a      	ldr	r2, [pc, #104]	; (800ea6c <HAL_TIMEx_PWMN_Start+0x17c>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d115      	bne.n	800ea34 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689a      	ldr	r2, [r3, #8]
 800ea0e:	4b18      	ldr	r3, [pc, #96]	; (800ea70 <HAL_TIMEx_PWMN_Start+0x180>)
 800ea10:	4013      	ands	r3, r2
 800ea12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b06      	cmp	r3, #6
 800ea18:	d015      	beq.n	800ea46 <HAL_TIMEx_PWMN_Start+0x156>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea20:	d011      	beq.n	800ea46 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f042 0201 	orr.w	r2, r2, #1
 800ea30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea32:	e008      	b.n	800ea46 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f042 0201 	orr.w	r2, r2, #1
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	e000      	b.n	800ea48 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	40012c00 	.word	0x40012c00
 800ea58:	40000400 	.word	0x40000400
 800ea5c:	40000800 	.word	0x40000800
 800ea60:	40000c00 	.word	0x40000c00
 800ea64:	40013400 	.word	0x40013400
 800ea68:	40014000 	.word	0x40014000
 800ea6c:	40015000 	.word	0x40015000
 800ea70:	00010007 	.word	0x00010007

0800ea74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d101      	bne.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea88:	2302      	movs	r3, #2
 800ea8a:	e074      	b.n	800eb76 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2202      	movs	r2, #2
 800ea98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a34      	ldr	r2, [pc, #208]	; (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d009      	beq.n	800eaca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a33      	ldr	r2, [pc, #204]	; (800eb88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d004      	beq.n	800eaca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a31      	ldr	r2, [pc, #196]	; (800eb8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d108      	bne.n	800eadc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ead0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	68fa      	ldr	r2, [r7, #12]
 800ead8:	4313      	orrs	r3, r2
 800eada:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800eae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4a21      	ldr	r2, [pc, #132]	; (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d022      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb0c:	d01d      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4a1f      	ldr	r2, [pc, #124]	; (800eb90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d018      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a1d      	ldr	r2, [pc, #116]	; (800eb94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d013      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a1c      	ldr	r2, [pc, #112]	; (800eb98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d00e      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a15      	ldr	r2, [pc, #84]	; (800eb88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d009      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4a18      	ldr	r2, [pc, #96]	; (800eb9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d004      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a11      	ldr	r2, [pc, #68]	; (800eb8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d10c      	bne.n	800eb64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	689b      	ldr	r3, [r3, #8]
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68ba      	ldr	r2, [r7, #8]
 800eb62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	40012c00 	.word	0x40012c00
 800eb88:	40013400 	.word	0x40013400
 800eb8c:	40015000 	.word	0x40015000
 800eb90:	40000400 	.word	0x40000400
 800eb94:	40000800 	.word	0x40000800
 800eb98:	40000c00 	.word	0x40000c00
 800eb9c:	40014000 	.word	0x40014000

0800eba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d101      	bne.n	800ebbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ebb8:	2302      	movs	r3, #2
 800ebba:	e096      	b.n	800ecea <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	4313      	orrs	r3, r2
 800ebec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	4313      	orrs	r3, r2
 800ec08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	4313      	orrs	r3, r2
 800ec16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec22:	4313      	orrs	r3, r2
 800ec24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	041b      	lsls	r3, r3, #16
 800ec32:	4313      	orrs	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a2f      	ldr	r2, [pc, #188]	; (800ecf8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d009      	beq.n	800ec54 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a2d      	ldr	r2, [pc, #180]	; (800ecfc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d004      	beq.n	800ec54 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4a2c      	ldr	r2, [pc, #176]	; (800ed00 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d106      	bne.n	800ec62 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	69db      	ldr	r3, [r3, #28]
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a24      	ldr	r2, [pc, #144]	; (800ecf8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d009      	beq.n	800ec80 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a22      	ldr	r2, [pc, #136]	; (800ecfc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d004      	beq.n	800ec80 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a21      	ldr	r2, [pc, #132]	; (800ed00 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d12b      	bne.n	800ecd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8a:	051b      	lsls	r3, r3, #20
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4a11      	ldr	r2, [pc, #68]	; (800ecf8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d009      	beq.n	800ecca <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a10      	ldr	r2, [pc, #64]	; (800ecfc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d004      	beq.n	800ecca <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4a0e      	ldr	r2, [pc, #56]	; (800ed00 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d106      	bne.n	800ecd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3714      	adds	r7, #20
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	40012c00 	.word	0x40012c00
 800ecfc:	40013400 	.word	0x40013400
 800ed00:	40015000 	.word	0x40015000

0800ed04 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f003 031f 	and.w	r3, r3, #31
 800ed16:	2204      	movs	r2, #4
 800ed18:	fa02 f303 	lsl.w	r3, r2, r3
 800ed1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a1a      	ldr	r2, [r3, #32]
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	43db      	mvns	r3, r3
 800ed26:	401a      	ands	r2, r3
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6a1a      	ldr	r2, [r3, #32]
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	f003 031f 	and.w	r3, r3, #31
 800ed36:	6879      	ldr	r1, [r7, #4]
 800ed38:	fa01 f303 	lsl.w	r3, r1, r3
 800ed3c:	431a      	orrs	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	621a      	str	r2, [r3, #32]
}
 800ed42:	bf00      	nop
 800ed44:	371c      	adds	r7, #28
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr

0800ed4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d101      	bne.n	800ed60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e042      	b.n	800ede6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d106      	bne.n	800ed78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7f7 fc5c 	bl	8006630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2224      	movs	r2, #36	; 0x24
 800ed7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f022 0201 	bic.w	r2, r2, #1
 800ed8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fc03 	bl	800f59c <UART_SetConfig>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d101      	bne.n	800eda0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	e022      	b.n	800ede6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d002      	beq.n	800edae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 fef3 	bl	800fb94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	685a      	ldr	r2, [r3, #4]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800edbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800edcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f042 0201 	orr.w	r2, r2, #1
 800eddc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 ff7a 	bl	800fcd8 <UART_CheckIdleState>
 800ede4:	4603      	mov	r3, r0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b08a      	sub	sp, #40	; 0x28
 800edf2:	af02      	add	r7, sp, #8
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	60b9      	str	r1, [r7, #8]
 800edf8:	603b      	str	r3, [r7, #0]
 800edfa:	4613      	mov	r3, r2
 800edfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee04:	2b20      	cmp	r3, #32
 800ee06:	f040 8083 	bne.w	800ef10 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <HAL_UART_Transmit+0x28>
 800ee10:	88fb      	ldrh	r3, [r7, #6]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	e07b      	b.n	800ef12 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d101      	bne.n	800ee28 <HAL_UART_Transmit+0x3a>
 800ee24:	2302      	movs	r3, #2
 800ee26:	e074      	b.n	800ef12 <HAL_UART_Transmit+0x124>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2221      	movs	r2, #33	; 0x21
 800ee3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ee40:	f7f7 ff1a 	bl	8006c78 <HAL_GetTick>
 800ee44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	88fa      	ldrh	r2, [r7, #6]
 800ee4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	88fa      	ldrh	r2, [r7, #6]
 800ee52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee5e:	d108      	bne.n	800ee72 <HAL_UART_Transmit+0x84>
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d104      	bne.n	800ee72 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	61bb      	str	r3, [r7, #24]
 800ee70:	e003      	b.n	800ee7a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ee76:	2300      	movs	r3, #0
 800ee78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ee82:	e02c      	b.n	800eede <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	2180      	movs	r1, #128	; 0x80
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f000 ff6d 	bl	800fd6e <UART_WaitOnFlagUntilTimeout>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e039      	b.n	800ef12 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d10b      	bne.n	800eebc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	881b      	ldrh	r3, [r3, #0]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eeb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	3302      	adds	r3, #2
 800eeb8:	61bb      	str	r3, [r7, #24]
 800eeba:	e007      	b.n	800eecc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	781a      	ldrb	r2, [r3, #0]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	3301      	adds	r3, #1
 800eeca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	3b01      	subs	r3, #1
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d1cc      	bne.n	800ee84 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	2200      	movs	r2, #0
 800eef2:	2140      	movs	r1, #64	; 0x40
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f000 ff3a 	bl	800fd6e <UART_WaitOnFlagUntilTimeout>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ef00:	2303      	movs	r3, #3
 800ef02:	e006      	b.n	800ef12 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2220      	movs	r2, #32
 800ef08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	e000      	b.n	800ef12 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ef10:	2302      	movs	r3, #2
  }
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3720      	adds	r7, #32
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
	...

0800ef1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b0ba      	sub	sp, #232	; 0xe8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	69db      	ldr	r3, [r3, #28]
 800ef2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ef42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ef46:	f640 030f 	movw	r3, #2063	; 0x80f
 800ef4a:	4013      	ands	r3, r2
 800ef4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ef50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d11b      	bne.n	800ef90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ef58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef5c:	f003 0320 	and.w	r3, r3, #32
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d015      	beq.n	800ef90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ef64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef68:	f003 0320 	and.w	r3, r3, #32
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d105      	bne.n	800ef7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ef70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d009      	beq.n	800ef90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f000 82d6 	beq.w	800f532 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	4798      	blx	r3
      }
      return;
 800ef8e:	e2d0      	b.n	800f532 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ef90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	f000 811f 	beq.w	800f1d8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ef9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ef9e:	4b8b      	ldr	r3, [pc, #556]	; (800f1cc <HAL_UART_IRQHandler+0x2b0>)
 800efa0:	4013      	ands	r3, r2
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d106      	bne.n	800efb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800efa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800efaa:	4b89      	ldr	r3, [pc, #548]	; (800f1d0 <HAL_UART_IRQHandler+0x2b4>)
 800efac:	4013      	ands	r3, r2
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f000 8112 	beq.w	800f1d8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800efb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efb8:	f003 0301 	and.w	r3, r3, #1
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d011      	beq.n	800efe4 <HAL_UART_IRQHandler+0xc8>
 800efc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00b      	beq.n	800efe4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2201      	movs	r2, #1
 800efd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efda:	f043 0201 	orr.w	r2, r3, #1
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efe8:	f003 0302 	and.w	r3, r3, #2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d011      	beq.n	800f014 <HAL_UART_IRQHandler+0xf8>
 800eff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eff4:	f003 0301 	and.w	r3, r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00b      	beq.n	800f014 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2202      	movs	r2, #2
 800f002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f00a:	f043 0204 	orr.w	r2, r3, #4
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f018:	f003 0304 	and.w	r3, r3, #4
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d011      	beq.n	800f044 <HAL_UART_IRQHandler+0x128>
 800f020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00b      	beq.n	800f044 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2204      	movs	r2, #4
 800f032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f03a:	f043 0202 	orr.w	r2, r3, #2
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f048:	f003 0308 	and.w	r3, r3, #8
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d017      	beq.n	800f080 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f054:	f003 0320 	and.w	r3, r3, #32
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d105      	bne.n	800f068 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f05c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f060:	4b5a      	ldr	r3, [pc, #360]	; (800f1cc <HAL_UART_IRQHandler+0x2b0>)
 800f062:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00b      	beq.n	800f080 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2208      	movs	r2, #8
 800f06e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f076:	f043 0208 	orr.w	r2, r3, #8
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d012      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x196>
 800f08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f094:	2b00      	cmp	r3, #0
 800f096:	d00c      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0a8:	f043 0220 	orr.w	r2, r3, #32
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f000 823c 	beq.w	800f536 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0c2:	f003 0320 	and.w	r3, r3, #32
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d013      	beq.n	800f0f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f0ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0ce:	f003 0320 	and.w	r3, r3, #32
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d105      	bne.n	800f0e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f0d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d007      	beq.n	800f0f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f106:	2b40      	cmp	r3, #64	; 0x40
 800f108:	d005      	beq.n	800f116 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f10a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f10e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f112:	2b00      	cmp	r3, #0
 800f114:	d04f      	beq.n	800f1b6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 ffdb 	bl	80100d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f126:	2b40      	cmp	r3, #64	; 0x40
 800f128:	d141      	bne.n	800f1ae <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	3308      	adds	r3, #8
 800f130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f138:	e853 3f00 	ldrex	r3, [r3]
 800f13c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	3308      	adds	r3, #8
 800f152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f15a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f166:	e841 2300 	strex	r3, r2, [r1]
 800f16a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f16e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1d9      	bne.n	800f12a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d013      	beq.n	800f1a6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f182:	4a14      	ldr	r2, [pc, #80]	; (800f1d4 <HAL_UART_IRQHandler+0x2b8>)
 800f184:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fa f930 	bl	80093f0 <HAL_DMA_Abort_IT>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d017      	beq.n	800f1c6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f1a0:	4610      	mov	r0, r2
 800f1a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1a4:	e00f      	b.n	800f1c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f9ee 	bl	800f588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1ac:	e00b      	b.n	800f1c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f9ea 	bl	800f588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1b4:	e007      	b.n	800f1c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 f9e6 	bl	800f588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f1c4:	e1b7      	b.n	800f536 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1c6:	bf00      	nop
    return;
 800f1c8:	e1b5      	b.n	800f536 <HAL_UART_IRQHandler+0x61a>
 800f1ca:	bf00      	nop
 800f1cc:	10000001 	.word	0x10000001
 800f1d0:	04000120 	.word	0x04000120
 800f1d4:	0801037d 	.word	0x0801037d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	f040 814a 	bne.w	800f476 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1e6:	f003 0310 	and.w	r3, r3, #16
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f000 8143 	beq.w	800f476 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1f4:	f003 0310 	and.w	r3, r3, #16
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f000 813c 	beq.w	800f476 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2210      	movs	r2, #16
 800f204:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f210:	2b40      	cmp	r3, #64	; 0x40
 800f212:	f040 80b5 	bne.w	800f380 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f222:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f226:	2b00      	cmp	r3, #0
 800f228:	f000 8187 	beq.w	800f53a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f236:	429a      	cmp	r2, r3
 800f238:	f080 817f 	bcs.w	800f53a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f242:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0320 	and.w	r3, r3, #32
 800f252:	2b00      	cmp	r3, #0
 800f254:	f040 8086 	bne.w	800f364 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f264:	e853 3f00 	ldrex	r3, [r3]
 800f268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f26c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	461a      	mov	r2, r3
 800f27e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f286:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f28a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f28e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f292:	e841 2300 	strex	r3, r2, [r1]
 800f296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f29a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1da      	bne.n	800f258 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2ac:	e853 3f00 	ldrex	r3, [r3]
 800f2b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f2b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2b4:	f023 0301 	bic.w	r3, r3, #1
 800f2b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f2c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f2ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f2ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2d2:	e841 2300 	strex	r3, r2, [r1]
 800f2d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f2d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1e1      	bne.n	800f2a2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3308      	adds	r3, #8
 800f2e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2e8:	e853 3f00 	ldrex	r3, [r3]
 800f2ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	3308      	adds	r3, #8
 800f2fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f302:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f30a:	e841 2300 	strex	r3, r2, [r1]
 800f30e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f312:	2b00      	cmp	r3, #0
 800f314:	d1e3      	bne.n	800f2de <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2220      	movs	r2, #32
 800f31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f32c:	e853 3f00 	ldrex	r3, [r3]
 800f330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f334:	f023 0310 	bic.w	r3, r3, #16
 800f338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f346:	65bb      	str	r3, [r7, #88]	; 0x58
 800f348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f34c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f34e:	e841 2300 	strex	r3, r2, [r1]
 800f352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1e4      	bne.n	800f324 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f35e:	4618      	mov	r0, r3
 800f360:	f7f9 ffed 	bl	800933e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f370:	b29b      	uxth	r3, r3
 800f372:	1ad3      	subs	r3, r2, r3
 800f374:	b29b      	uxth	r3, r3
 800f376:	4619      	mov	r1, r3
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7f4 fa07 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f37e:	e0dc      	b.n	800f53a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 80ce 	beq.w	800f53e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800f3a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f000 80c9 	beq.w	800f53e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b4:	e853 3f00 	ldrex	r3, [r3]
 800f3b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f3ce:	647b      	str	r3, [r7, #68]	; 0x44
 800f3d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3d6:	e841 2300 	strex	r3, r2, [r1]
 800f3da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1e4      	bne.n	800f3ac <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3308      	adds	r3, #8
 800f3e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	e853 3f00 	ldrex	r3, [r3]
 800f3f0:	623b      	str	r3, [r7, #32]
   return(result);
 800f3f2:	6a3b      	ldr	r3, [r7, #32]
 800f3f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f3f8:	f023 0301 	bic.w	r3, r3, #1
 800f3fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	3308      	adds	r3, #8
 800f406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f40a:	633a      	str	r2, [r7, #48]	; 0x30
 800f40c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f412:	e841 2300 	strex	r3, r2, [r1]
 800f416:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d1e1      	bne.n	800f3e2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2220      	movs	r2, #32
 800f422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	e853 3f00 	ldrex	r3, [r3]
 800f43e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f023 0310 	bic.w	r3, r3, #16
 800f446:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	461a      	mov	r2, r3
 800f450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f454:	61fb      	str	r3, [r7, #28]
 800f456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f458:	69b9      	ldr	r1, [r7, #24]
 800f45a:	69fa      	ldr	r2, [r7, #28]
 800f45c:	e841 2300 	strex	r3, r2, [r1]
 800f460:	617b      	str	r3, [r7, #20]
   return(result);
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d1e4      	bne.n	800f432 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f46c:	4619      	mov	r1, r3
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7f4 f98c 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f474:	e063      	b.n	800f53e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f47a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00e      	beq.n	800f4a0 <HAL_UART_IRQHandler+0x584>
 800f482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d008      	beq.n	800f4a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 ffb0 	bl	80103fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f49e:	e051      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d014      	beq.n	800f4d6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d105      	bne.n	800f4c4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f4b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d008      	beq.n	800f4d6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d03a      	beq.n	800f542 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	4798      	blx	r3
    }
    return;
 800f4d4:	e035      	b.n	800f542 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <HAL_UART_IRQHandler+0x5da>
 800f4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d003      	beq.n	800f4f6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 ff5a 	bl	80103a8 <UART_EndTransmit_IT>
    return;
 800f4f4:	e026      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d009      	beq.n	800f516 <HAL_UART_IRQHandler+0x5fa>
 800f502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d003      	beq.n	800f516 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 ff89 	bl	8010426 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f514:	e016      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f51a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d010      	beq.n	800f544 <HAL_UART_IRQHandler+0x628>
 800f522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f526:	2b00      	cmp	r3, #0
 800f528:	da0c      	bge.n	800f544 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 ff71 	bl	8010412 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f530:	e008      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
      return;
 800f532:	bf00      	nop
 800f534:	e006      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
    return;
 800f536:	bf00      	nop
 800f538:	e004      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
      return;
 800f53a:	bf00      	nop
 800f53c:	e002      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
      return;
 800f53e:	bf00      	nop
 800f540:	e000      	b.n	800f544 <HAL_UART_IRQHandler+0x628>
    return;
 800f542:	bf00      	nop
  }
}
 800f544:	37e8      	adds	r7, #232	; 0xe8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop

0800f54c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f560:	b480      	push	{r7}
 800f562:	b083      	sub	sp, #12
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f568:	bf00      	nop
 800f56a:	370c      	adds	r7, #12
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr

0800f574 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f57c:	bf00      	nop
 800f57e:	370c      	adds	r7, #12
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr

0800f588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f590:	bf00      	nop
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr

0800f59c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f59c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5a0:	b08c      	sub	sp, #48	; 0x30
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	689a      	ldr	r2, [r3, #8]
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	431a      	orrs	r2, r3
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	695b      	ldr	r3, [r3, #20]
 800f5ba:	431a      	orrs	r2, r3
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	69db      	ldr	r3, [r3, #28]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	4baa      	ldr	r3, [pc, #680]	; (800f874 <UART_SetConfig+0x2d8>)
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	6812      	ldr	r2, [r2, #0]
 800f5d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5d4:	430b      	orrs	r3, r1
 800f5d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	68da      	ldr	r2, [r3, #12]
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	430a      	orrs	r2, r1
 800f5ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a9f      	ldr	r2, [pc, #636]	; (800f878 <UART_SetConfig+0x2dc>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d004      	beq.n	800f608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	6a1b      	ldr	r3, [r3, #32]
 800f602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f604:	4313      	orrs	r3, r2
 800f606:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f612:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f616:	697a      	ldr	r2, [r7, #20]
 800f618:	6812      	ldr	r2, [r2, #0]
 800f61a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f61c:	430b      	orrs	r3, r1
 800f61e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f626:	f023 010f 	bic.w	r1, r3, #15
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	430a      	orrs	r2, r1
 800f634:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a90      	ldr	r2, [pc, #576]	; (800f87c <UART_SetConfig+0x2e0>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d125      	bne.n	800f68c <UART_SetConfig+0xf0>
 800f640:	4b8f      	ldr	r3, [pc, #572]	; (800f880 <UART_SetConfig+0x2e4>)
 800f642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f646:	f003 0303 	and.w	r3, r3, #3
 800f64a:	2b03      	cmp	r3, #3
 800f64c:	d81a      	bhi.n	800f684 <UART_SetConfig+0xe8>
 800f64e:	a201      	add	r2, pc, #4	; (adr r2, 800f654 <UART_SetConfig+0xb8>)
 800f650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f654:	0800f665 	.word	0x0800f665
 800f658:	0800f675 	.word	0x0800f675
 800f65c:	0800f66d 	.word	0x0800f66d
 800f660:	0800f67d 	.word	0x0800f67d
 800f664:	2301      	movs	r3, #1
 800f666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f66a:	e116      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f66c:	2302      	movs	r3, #2
 800f66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f672:	e112      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f674:	2304      	movs	r3, #4
 800f676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f67a:	e10e      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f67c:	2308      	movs	r3, #8
 800f67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f682:	e10a      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f684:	2310      	movs	r3, #16
 800f686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f68a:	e106      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a7c      	ldr	r2, [pc, #496]	; (800f884 <UART_SetConfig+0x2e8>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d138      	bne.n	800f708 <UART_SetConfig+0x16c>
 800f696:	4b7a      	ldr	r3, [pc, #488]	; (800f880 <UART_SetConfig+0x2e4>)
 800f698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f69c:	f003 030c 	and.w	r3, r3, #12
 800f6a0:	2b0c      	cmp	r3, #12
 800f6a2:	d82d      	bhi.n	800f700 <UART_SetConfig+0x164>
 800f6a4:	a201      	add	r2, pc, #4	; (adr r2, 800f6ac <UART_SetConfig+0x110>)
 800f6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6aa:	bf00      	nop
 800f6ac:	0800f6e1 	.word	0x0800f6e1
 800f6b0:	0800f701 	.word	0x0800f701
 800f6b4:	0800f701 	.word	0x0800f701
 800f6b8:	0800f701 	.word	0x0800f701
 800f6bc:	0800f6f1 	.word	0x0800f6f1
 800f6c0:	0800f701 	.word	0x0800f701
 800f6c4:	0800f701 	.word	0x0800f701
 800f6c8:	0800f701 	.word	0x0800f701
 800f6cc:	0800f6e9 	.word	0x0800f6e9
 800f6d0:	0800f701 	.word	0x0800f701
 800f6d4:	0800f701 	.word	0x0800f701
 800f6d8:	0800f701 	.word	0x0800f701
 800f6dc:	0800f6f9 	.word	0x0800f6f9
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6e6:	e0d8      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f6e8:	2302      	movs	r3, #2
 800f6ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6ee:	e0d4      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f6f0:	2304      	movs	r3, #4
 800f6f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6f6:	e0d0      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f6f8:	2308      	movs	r3, #8
 800f6fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6fe:	e0cc      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f700:	2310      	movs	r3, #16
 800f702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f706:	e0c8      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a5e      	ldr	r2, [pc, #376]	; (800f888 <UART_SetConfig+0x2ec>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d125      	bne.n	800f75e <UART_SetConfig+0x1c2>
 800f712:	4b5b      	ldr	r3, [pc, #364]	; (800f880 <UART_SetConfig+0x2e4>)
 800f714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f718:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f71c:	2b30      	cmp	r3, #48	; 0x30
 800f71e:	d016      	beq.n	800f74e <UART_SetConfig+0x1b2>
 800f720:	2b30      	cmp	r3, #48	; 0x30
 800f722:	d818      	bhi.n	800f756 <UART_SetConfig+0x1ba>
 800f724:	2b20      	cmp	r3, #32
 800f726:	d00a      	beq.n	800f73e <UART_SetConfig+0x1a2>
 800f728:	2b20      	cmp	r3, #32
 800f72a:	d814      	bhi.n	800f756 <UART_SetConfig+0x1ba>
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d002      	beq.n	800f736 <UART_SetConfig+0x19a>
 800f730:	2b10      	cmp	r3, #16
 800f732:	d008      	beq.n	800f746 <UART_SetConfig+0x1aa>
 800f734:	e00f      	b.n	800f756 <UART_SetConfig+0x1ba>
 800f736:	2300      	movs	r3, #0
 800f738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f73c:	e0ad      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f73e:	2302      	movs	r3, #2
 800f740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f744:	e0a9      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f746:	2304      	movs	r3, #4
 800f748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f74c:	e0a5      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f74e:	2308      	movs	r3, #8
 800f750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f754:	e0a1      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f756:	2310      	movs	r3, #16
 800f758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f75c:	e09d      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4a4a      	ldr	r2, [pc, #296]	; (800f88c <UART_SetConfig+0x2f0>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d125      	bne.n	800f7b4 <UART_SetConfig+0x218>
 800f768:	4b45      	ldr	r3, [pc, #276]	; (800f880 <UART_SetConfig+0x2e4>)
 800f76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f76e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f772:	2bc0      	cmp	r3, #192	; 0xc0
 800f774:	d016      	beq.n	800f7a4 <UART_SetConfig+0x208>
 800f776:	2bc0      	cmp	r3, #192	; 0xc0
 800f778:	d818      	bhi.n	800f7ac <UART_SetConfig+0x210>
 800f77a:	2b80      	cmp	r3, #128	; 0x80
 800f77c:	d00a      	beq.n	800f794 <UART_SetConfig+0x1f8>
 800f77e:	2b80      	cmp	r3, #128	; 0x80
 800f780:	d814      	bhi.n	800f7ac <UART_SetConfig+0x210>
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <UART_SetConfig+0x1f0>
 800f786:	2b40      	cmp	r3, #64	; 0x40
 800f788:	d008      	beq.n	800f79c <UART_SetConfig+0x200>
 800f78a:	e00f      	b.n	800f7ac <UART_SetConfig+0x210>
 800f78c:	2300      	movs	r3, #0
 800f78e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f792:	e082      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f794:	2302      	movs	r3, #2
 800f796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f79a:	e07e      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f79c:	2304      	movs	r3, #4
 800f79e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7a2:	e07a      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f7a4:	2308      	movs	r3, #8
 800f7a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7aa:	e076      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f7ac:	2310      	movs	r3, #16
 800f7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7b2:	e072      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4a35      	ldr	r2, [pc, #212]	; (800f890 <UART_SetConfig+0x2f4>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d12a      	bne.n	800f814 <UART_SetConfig+0x278>
 800f7be:	4b30      	ldr	r3, [pc, #192]	; (800f880 <UART_SetConfig+0x2e4>)
 800f7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7cc:	d01a      	beq.n	800f804 <UART_SetConfig+0x268>
 800f7ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7d2:	d81b      	bhi.n	800f80c <UART_SetConfig+0x270>
 800f7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7d8:	d00c      	beq.n	800f7f4 <UART_SetConfig+0x258>
 800f7da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7de:	d815      	bhi.n	800f80c <UART_SetConfig+0x270>
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d003      	beq.n	800f7ec <UART_SetConfig+0x250>
 800f7e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7e8:	d008      	beq.n	800f7fc <UART_SetConfig+0x260>
 800f7ea:	e00f      	b.n	800f80c <UART_SetConfig+0x270>
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7f2:	e052      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7fa:	e04e      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f7fc:	2304      	movs	r3, #4
 800f7fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f802:	e04a      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f804:	2308      	movs	r3, #8
 800f806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f80a:	e046      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f80c:	2310      	movs	r3, #16
 800f80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f812:	e042      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4a17      	ldr	r2, [pc, #92]	; (800f878 <UART_SetConfig+0x2dc>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d13a      	bne.n	800f894 <UART_SetConfig+0x2f8>
 800f81e:	4b18      	ldr	r3, [pc, #96]	; (800f880 <UART_SetConfig+0x2e4>)
 800f820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f82c:	d01a      	beq.n	800f864 <UART_SetConfig+0x2c8>
 800f82e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f832:	d81b      	bhi.n	800f86c <UART_SetConfig+0x2d0>
 800f834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f838:	d00c      	beq.n	800f854 <UART_SetConfig+0x2b8>
 800f83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f83e:	d815      	bhi.n	800f86c <UART_SetConfig+0x2d0>
 800f840:	2b00      	cmp	r3, #0
 800f842:	d003      	beq.n	800f84c <UART_SetConfig+0x2b0>
 800f844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f848:	d008      	beq.n	800f85c <UART_SetConfig+0x2c0>
 800f84a:	e00f      	b.n	800f86c <UART_SetConfig+0x2d0>
 800f84c:	2300      	movs	r3, #0
 800f84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f852:	e022      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f854:	2302      	movs	r3, #2
 800f856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f85a:	e01e      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f85c:	2304      	movs	r3, #4
 800f85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f862:	e01a      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f864:	2308      	movs	r3, #8
 800f866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f86a:	e016      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f86c:	2310      	movs	r3, #16
 800f86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f872:	e012      	b.n	800f89a <UART_SetConfig+0x2fe>
 800f874:	cfff69f3 	.word	0xcfff69f3
 800f878:	40008000 	.word	0x40008000
 800f87c:	40013800 	.word	0x40013800
 800f880:	40021000 	.word	0x40021000
 800f884:	40004400 	.word	0x40004400
 800f888:	40004800 	.word	0x40004800
 800f88c:	40004c00 	.word	0x40004c00
 800f890:	40005000 	.word	0x40005000
 800f894:	2310      	movs	r3, #16
 800f896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4aae      	ldr	r2, [pc, #696]	; (800fb58 <UART_SetConfig+0x5bc>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	f040 8097 	bne.w	800f9d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f8a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8aa:	2b08      	cmp	r3, #8
 800f8ac:	d823      	bhi.n	800f8f6 <UART_SetConfig+0x35a>
 800f8ae:	a201      	add	r2, pc, #4	; (adr r2, 800f8b4 <UART_SetConfig+0x318>)
 800f8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b4:	0800f8d9 	.word	0x0800f8d9
 800f8b8:	0800f8f7 	.word	0x0800f8f7
 800f8bc:	0800f8e1 	.word	0x0800f8e1
 800f8c0:	0800f8f7 	.word	0x0800f8f7
 800f8c4:	0800f8e7 	.word	0x0800f8e7
 800f8c8:	0800f8f7 	.word	0x0800f8f7
 800f8cc:	0800f8f7 	.word	0x0800f8f7
 800f8d0:	0800f8f7 	.word	0x0800f8f7
 800f8d4:	0800f8ef 	.word	0x0800f8ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8d8:	f7fd fccc 	bl	800d274 <HAL_RCC_GetPCLK1Freq>
 800f8dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8de:	e010      	b.n	800f902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f8e0:	4b9e      	ldr	r3, [pc, #632]	; (800fb5c <UART_SetConfig+0x5c0>)
 800f8e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f8e4:	e00d      	b.n	800f902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f8e6:	f7fd fc57 	bl	800d198 <HAL_RCC_GetSysClockFreq>
 800f8ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8ec:	e009      	b.n	800f902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f8f4:	e005      	b.n	800f902 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 8130 	beq.w	800fb6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90e:	4a94      	ldr	r2, [pc, #592]	; (800fb60 <UART_SetConfig+0x5c4>)
 800f910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f914:	461a      	mov	r2, r3
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	fbb3 f3f2 	udiv	r3, r3, r2
 800f91c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	685a      	ldr	r2, [r3, #4]
 800f922:	4613      	mov	r3, r2
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	4413      	add	r3, r2
 800f928:	69ba      	ldr	r2, [r7, #24]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d305      	bcc.n	800f93a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f934:	69ba      	ldr	r2, [r7, #24]
 800f936:	429a      	cmp	r2, r3
 800f938:	d903      	bls.n	800f942 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f93a:	2301      	movs	r3, #1
 800f93c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f940:	e113      	b.n	800fb6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	2200      	movs	r2, #0
 800f946:	60bb      	str	r3, [r7, #8]
 800f948:	60fa      	str	r2, [r7, #12]
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94e:	4a84      	ldr	r2, [pc, #528]	; (800fb60 <UART_SetConfig+0x5c4>)
 800f950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f954:	b29b      	uxth	r3, r3
 800f956:	2200      	movs	r2, #0
 800f958:	603b      	str	r3, [r7, #0]
 800f95a:	607a      	str	r2, [r7, #4]
 800f95c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f960:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f964:	f7f1 f998 	bl	8000c98 <__aeabi_uldivmod>
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4610      	mov	r0, r2
 800f96e:	4619      	mov	r1, r3
 800f970:	f04f 0200 	mov.w	r2, #0
 800f974:	f04f 0300 	mov.w	r3, #0
 800f978:	020b      	lsls	r3, r1, #8
 800f97a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f97e:	0202      	lsls	r2, r0, #8
 800f980:	6979      	ldr	r1, [r7, #20]
 800f982:	6849      	ldr	r1, [r1, #4]
 800f984:	0849      	lsrs	r1, r1, #1
 800f986:	2000      	movs	r0, #0
 800f988:	460c      	mov	r4, r1
 800f98a:	4605      	mov	r5, r0
 800f98c:	eb12 0804 	adds.w	r8, r2, r4
 800f990:	eb43 0905 	adc.w	r9, r3, r5
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	469a      	mov	sl, r3
 800f99c:	4693      	mov	fp, r2
 800f99e:	4652      	mov	r2, sl
 800f9a0:	465b      	mov	r3, fp
 800f9a2:	4640      	mov	r0, r8
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	f7f1 f977 	bl	8000c98 <__aeabi_uldivmod>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f9b2:	6a3b      	ldr	r3, [r7, #32]
 800f9b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f9b8:	d308      	bcc.n	800f9cc <UART_SetConfig+0x430>
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9c0:	d204      	bcs.n	800f9cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	6a3a      	ldr	r2, [r7, #32]
 800f9c8:	60da      	str	r2, [r3, #12]
 800f9ca:	e0ce      	b.n	800fb6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f9d2:	e0ca      	b.n	800fb6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	69db      	ldr	r3, [r3, #28]
 800f9d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9dc:	d166      	bne.n	800faac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f9de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f9e2:	2b08      	cmp	r3, #8
 800f9e4:	d827      	bhi.n	800fa36 <UART_SetConfig+0x49a>
 800f9e6:	a201      	add	r2, pc, #4	; (adr r2, 800f9ec <UART_SetConfig+0x450>)
 800f9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ec:	0800fa11 	.word	0x0800fa11
 800f9f0:	0800fa19 	.word	0x0800fa19
 800f9f4:	0800fa21 	.word	0x0800fa21
 800f9f8:	0800fa37 	.word	0x0800fa37
 800f9fc:	0800fa27 	.word	0x0800fa27
 800fa00:	0800fa37 	.word	0x0800fa37
 800fa04:	0800fa37 	.word	0x0800fa37
 800fa08:	0800fa37 	.word	0x0800fa37
 800fa0c:	0800fa2f 	.word	0x0800fa2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa10:	f7fd fc30 	bl	800d274 <HAL_RCC_GetPCLK1Freq>
 800fa14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa16:	e014      	b.n	800fa42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa18:	f7fd fc42 	bl	800d2a0 <HAL_RCC_GetPCLK2Freq>
 800fa1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa1e:	e010      	b.n	800fa42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa20:	4b4e      	ldr	r3, [pc, #312]	; (800fb5c <UART_SetConfig+0x5c0>)
 800fa22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fa24:	e00d      	b.n	800fa42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa26:	f7fd fbb7 	bl	800d198 <HAL_RCC_GetSysClockFreq>
 800fa2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa2c:	e009      	b.n	800fa42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fa34:	e005      	b.n	800fa42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800fa36:	2300      	movs	r3, #0
 800fa38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fa40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f000 8090 	beq.w	800fb6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4e:	4a44      	ldr	r2, [pc, #272]	; (800fb60 <UART_SetConfig+0x5c4>)
 800fa50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa54:	461a      	mov	r2, r3
 800fa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa58:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa5c:	005a      	lsls	r2, r3, #1
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	085b      	lsrs	r3, r3, #1
 800fa64:	441a      	add	r2, r3
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	2b0f      	cmp	r3, #15
 800fa74:	d916      	bls.n	800faa4 <UART_SetConfig+0x508>
 800fa76:	6a3b      	ldr	r3, [r7, #32]
 800fa78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa7c:	d212      	bcs.n	800faa4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa7e:	6a3b      	ldr	r3, [r7, #32]
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	f023 030f 	bic.w	r3, r3, #15
 800fa86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa88:	6a3b      	ldr	r3, [r7, #32]
 800fa8a:	085b      	lsrs	r3, r3, #1
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	f003 0307 	and.w	r3, r3, #7
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	8bfb      	ldrh	r3, [r7, #30]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	8bfa      	ldrh	r2, [r7, #30]
 800faa0:	60da      	str	r2, [r3, #12]
 800faa2:	e062      	b.n	800fb6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800faa4:	2301      	movs	r3, #1
 800faa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800faaa:	e05e      	b.n	800fb6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800faac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fab0:	2b08      	cmp	r3, #8
 800fab2:	d828      	bhi.n	800fb06 <UART_SetConfig+0x56a>
 800fab4:	a201      	add	r2, pc, #4	; (adr r2, 800fabc <UART_SetConfig+0x520>)
 800fab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faba:	bf00      	nop
 800fabc:	0800fae1 	.word	0x0800fae1
 800fac0:	0800fae9 	.word	0x0800fae9
 800fac4:	0800faf1 	.word	0x0800faf1
 800fac8:	0800fb07 	.word	0x0800fb07
 800facc:	0800faf7 	.word	0x0800faf7
 800fad0:	0800fb07 	.word	0x0800fb07
 800fad4:	0800fb07 	.word	0x0800fb07
 800fad8:	0800fb07 	.word	0x0800fb07
 800fadc:	0800faff 	.word	0x0800faff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fae0:	f7fd fbc8 	bl	800d274 <HAL_RCC_GetPCLK1Freq>
 800fae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fae6:	e014      	b.n	800fb12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fae8:	f7fd fbda 	bl	800d2a0 <HAL_RCC_GetPCLK2Freq>
 800faec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800faee:	e010      	b.n	800fb12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800faf0:	4b1a      	ldr	r3, [pc, #104]	; (800fb5c <UART_SetConfig+0x5c0>)
 800faf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800faf4:	e00d      	b.n	800fb12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800faf6:	f7fd fb4f 	bl	800d198 <HAL_RCC_GetSysClockFreq>
 800fafa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fafc:	e009      	b.n	800fb12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fafe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fb04:	e005      	b.n	800fb12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800fb06:	2300      	movs	r3, #0
 800fb08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fb10:	bf00      	nop
    }

    if (pclk != 0U)
 800fb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d028      	beq.n	800fb6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1c:	4a10      	ldr	r2, [pc, #64]	; (800fb60 <UART_SetConfig+0x5c4>)
 800fb1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb22:	461a      	mov	r2, r3
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	fbb3 f2f2 	udiv	r2, r3, r2
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	085b      	lsrs	r3, r3, #1
 800fb30:	441a      	add	r2, r3
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	2b0f      	cmp	r3, #15
 800fb40:	d910      	bls.n	800fb64 <UART_SetConfig+0x5c8>
 800fb42:	6a3b      	ldr	r3, [r7, #32]
 800fb44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb48:	d20c      	bcs.n	800fb64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fb4a:	6a3b      	ldr	r3, [r7, #32]
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	60da      	str	r2, [r3, #12]
 800fb54:	e009      	b.n	800fb6a <UART_SetConfig+0x5ce>
 800fb56:	bf00      	nop
 800fb58:	40008000 	.word	0x40008000
 800fb5c:	00f42400 	.word	0x00f42400
 800fb60:	0801852c 	.word	0x0801852c
      }
      else
      {
        ret = HAL_ERROR;
 800fb64:	2301      	movs	r3, #1
 800fb66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	2201      	movs	r2, #1
 800fb76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2200      	movs	r2, #0
 800fb84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fb86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3730      	adds	r7, #48	; 0x30
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fb94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba0:	f003 0301 	and.w	r3, r3, #1
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00a      	beq.n	800fbbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	430a      	orrs	r2, r1
 800fbbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc2:	f003 0302 	and.w	r3, r3, #2
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00a      	beq.n	800fbe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	430a      	orrs	r2, r1
 800fbde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe4:	f003 0304 	and.w	r3, r3, #4
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00a      	beq.n	800fc02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	430a      	orrs	r2, r1
 800fc00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc06:	f003 0308 	and.w	r3, r3, #8
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00a      	beq.n	800fc24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	430a      	orrs	r2, r1
 800fc22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc28:	f003 0310 	and.w	r3, r3, #16
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00a      	beq.n	800fc46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	430a      	orrs	r2, r1
 800fc44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc4a:	f003 0320 	and.w	r3, r3, #32
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00a      	beq.n	800fc68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	430a      	orrs	r2, r1
 800fc66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d01a      	beq.n	800fcaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	430a      	orrs	r2, r1
 800fc88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc92:	d10a      	bne.n	800fcaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	430a      	orrs	r2, r1
 800fca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00a      	beq.n	800fccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	430a      	orrs	r2, r1
 800fcca:	605a      	str	r2, [r3, #4]
  }
}
 800fccc:	bf00      	nop
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af02      	add	r7, sp, #8
 800fcde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fce8:	f7f6 ffc6 	bl	8006c78 <HAL_GetTick>
 800fcec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f003 0308 	and.w	r3, r3, #8
 800fcf8:	2b08      	cmp	r3, #8
 800fcfa:	d10e      	bne.n	800fd1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f82f 	bl	800fd6e <UART_WaitOnFlagUntilTimeout>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd16:	2303      	movs	r3, #3
 800fd18:	e025      	b.n	800fd66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f003 0304 	and.w	r3, r3, #4
 800fd24:	2b04      	cmp	r3, #4
 800fd26:	d10e      	bne.n	800fd46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2200      	movs	r2, #0
 800fd32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f819 	bl	800fd6e <UART_WaitOnFlagUntilTimeout>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd42:	2303      	movs	r3, #3
 800fd44:	e00f      	b.n	800fd66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2220      	movs	r2, #32
 800fd4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2220      	movs	r2, #32
 800fd52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b09c      	sub	sp, #112	; 0x70
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	60f8      	str	r0, [r7, #12]
 800fd76:	60b9      	str	r1, [r7, #8]
 800fd78:	603b      	str	r3, [r7, #0]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd7e:	e0a9      	b.n	800fed4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd86:	f000 80a5 	beq.w	800fed4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd8a:	f7f6 ff75 	bl	8006c78 <HAL_GetTick>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d302      	bcc.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x32>
 800fd9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d140      	bne.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fda8:	e853 3f00 	ldrex	r3, [r3]
 800fdac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fdae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fdb4:	667b      	str	r3, [r7, #100]	; 0x64
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fdc6:	e841 2300 	strex	r3, r2, [r1]
 800fdca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fdcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1e6      	bne.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	3308      	adds	r3, #8
 800fdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fddc:	e853 3f00 	ldrex	r3, [r3]
 800fde0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde4:	f023 0301 	bic.w	r3, r3, #1
 800fde8:	663b      	str	r3, [r7, #96]	; 0x60
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3308      	adds	r3, #8
 800fdf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fdf2:	64ba      	str	r2, [r7, #72]	; 0x48
 800fdf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdfa:	e841 2300 	strex	r3, r2, [r1]
 800fdfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fe00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1e5      	bne.n	800fdd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2220      	movs	r2, #32
 800fe0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2220      	movs	r2, #32
 800fe12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fe1e:	2303      	movs	r3, #3
 800fe20:	e069      	b.n	800fef6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f003 0304 	and.w	r3, r3, #4
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d051      	beq.n	800fed4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	69db      	ldr	r3, [r3, #28]
 800fe36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe3e:	d149      	bne.n	800fed4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	e853 3f00 	ldrex	r3, [r3]
 800fe56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fe5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	461a      	mov	r2, r3
 800fe66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe68:	637b      	str	r3, [r7, #52]	; 0x34
 800fe6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe70:	e841 2300 	strex	r3, r2, [r1]
 800fe74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fe76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d1e6      	bne.n	800fe4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3308      	adds	r3, #8
 800fe82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	e853 3f00 	ldrex	r3, [r3]
 800fe8a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	f023 0301 	bic.w	r3, r3, #1
 800fe92:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	3308      	adds	r3, #8
 800fe9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe9c:	623a      	str	r2, [r7, #32]
 800fe9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea0:	69f9      	ldr	r1, [r7, #28]
 800fea2:	6a3a      	ldr	r2, [r7, #32]
 800fea4:	e841 2300 	strex	r3, r2, [r1]
 800fea8:	61bb      	str	r3, [r7, #24]
   return(result);
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1e5      	bne.n	800fe7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2220      	movs	r2, #32
 800feb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2220      	movs	r2, #32
 800febc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2220      	movs	r2, #32
 800fec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fed0:	2303      	movs	r3, #3
 800fed2:	e010      	b.n	800fef6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	69da      	ldr	r2, [r3, #28]
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	4013      	ands	r3, r2
 800fede:	68ba      	ldr	r2, [r7, #8]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	bf0c      	ite	eq
 800fee4:	2301      	moveq	r3, #1
 800fee6:	2300      	movne	r3, #0
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	461a      	mov	r2, r3
 800feec:	79fb      	ldrb	r3, [r7, #7]
 800feee:	429a      	cmp	r2, r3
 800fef0:	f43f af46 	beq.w	800fd80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3770      	adds	r7, #112	; 0x70
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
	...

0800ff00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b096      	sub	sp, #88	; 0x58
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	60f8      	str	r0, [r7, #12]
 800ff08:	60b9      	str	r1, [r7, #8]
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	68ba      	ldr	r2, [r7, #8]
 800ff12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	88fa      	ldrh	r2, [r7, #6]
 800ff18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2222      	movs	r2, #34	; 0x22
 800ff28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d02c      	beq.n	800ff8e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff38:	4a42      	ldr	r2, [pc, #264]	; (8010044 <UART_Start_Receive_DMA+0x144>)
 800ff3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff40:	4a41      	ldr	r2, [pc, #260]	; (8010048 <UART_Start_Receive_DMA+0x148>)
 800ff42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff48:	4a40      	ldr	r2, [pc, #256]	; (801004c <UART_Start_Receive_DMA+0x14c>)
 800ff4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff50:	2200      	movs	r2, #0
 800ff52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	3324      	adds	r3, #36	; 0x24
 800ff5e:	4619      	mov	r1, r3
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff64:	461a      	mov	r2, r3
 800ff66:	88fb      	ldrh	r3, [r7, #6]
 800ff68:	f7f9 f96e 	bl	8009248 <HAL_DMA_Start_IT>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d00d      	beq.n	800ff8e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2210      	movs	r2, #16
 800ff76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2220      	movs	r2, #32
 800ff86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e055      	b.n	801003a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d018      	beq.n	800ffd0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa6:	e853 3f00 	ldrex	r3, [r3]
 800ffaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ffb2:	657b      	str	r3, [r7, #84]	; 0x54
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	461a      	mov	r2, r3
 800ffba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffbe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffc4:	e841 2300 	strex	r3, r2, [r1]
 800ffc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ffca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e6      	bne.n	800ff9e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	e853 3f00 	ldrex	r3, [r3]
 800ffde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	f043 0301 	orr.w	r3, r3, #1
 800ffe6:	653b      	str	r3, [r7, #80]	; 0x50
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3308      	adds	r3, #8
 800ffee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fff0:	637a      	str	r2, [r7, #52]	; 0x34
 800fff2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fff8:	e841 2300 	strex	r3, r2, [r1]
 800fffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1e5      	bne.n	800ffd0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	3308      	adds	r3, #8
 801000a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	e853 3f00 	ldrex	r3, [r3]
 8010012:	613b      	str	r3, [r7, #16]
   return(result);
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801001a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	3308      	adds	r3, #8
 8010022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010024:	623a      	str	r2, [r7, #32]
 8010026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010028:	69f9      	ldr	r1, [r7, #28]
 801002a:	6a3a      	ldr	r2, [r7, #32]
 801002c:	e841 2300 	strex	r3, r2, [r1]
 8010030:	61bb      	str	r3, [r7, #24]
   return(result);
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e5      	bne.n	8010004 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3758      	adds	r7, #88	; 0x58
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	0801019f 	.word	0x0801019f
 8010048:	080102c5 	.word	0x080102c5
 801004c:	080102fd 	.word	0x080102fd

08010050 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010050:	b480      	push	{r7}
 8010052:	b08f      	sub	sp, #60	; 0x3c
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005e:	6a3b      	ldr	r3, [r7, #32]
 8010060:	e853 3f00 	ldrex	r3, [r3]
 8010064:	61fb      	str	r3, [r7, #28]
   return(result);
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801006c:	637b      	str	r3, [r7, #52]	; 0x34
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	461a      	mov	r2, r3
 8010074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010078:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801007c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801007e:	e841 2300 	strex	r3, r2, [r1]
 8010082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1e6      	bne.n	8010058 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	3308      	adds	r3, #8
 8010090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	60bb      	str	r3, [r7, #8]
   return(result);
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80100a0:	633b      	str	r3, [r7, #48]	; 0x30
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3308      	adds	r3, #8
 80100a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100aa:	61ba      	str	r2, [r7, #24]
 80100ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	6979      	ldr	r1, [r7, #20]
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	e841 2300 	strex	r3, r2, [r1]
 80100b6:	613b      	str	r3, [r7, #16]
   return(result);
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1e5      	bne.n	801008a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2220      	movs	r2, #32
 80100c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80100c6:	bf00      	nop
 80100c8:	373c      	adds	r7, #60	; 0x3c
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80100d2:	b480      	push	{r7}
 80100d4:	b095      	sub	sp, #84	; 0x54
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e2:	e853 3f00 	ldrex	r3, [r3]
 80100e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80100e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	461a      	mov	r2, r3
 80100f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f8:	643b      	str	r3, [r7, #64]	; 0x40
 80100fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010100:	e841 2300 	strex	r3, r2, [r1]
 8010104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010108:	2b00      	cmp	r3, #0
 801010a:	d1e6      	bne.n	80100da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	3308      	adds	r3, #8
 8010112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010114:	6a3b      	ldr	r3, [r7, #32]
 8010116:	e853 3f00 	ldrex	r3, [r3]
 801011a:	61fb      	str	r3, [r7, #28]
   return(result);
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010122:	f023 0301 	bic.w	r3, r3, #1
 8010126:	64bb      	str	r3, [r7, #72]	; 0x48
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3308      	adds	r3, #8
 801012e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010138:	e841 2300 	strex	r3, r2, [r1]
 801013c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1e3      	bne.n	801010c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010148:	2b01      	cmp	r3, #1
 801014a:	d118      	bne.n	801017e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	e853 3f00 	ldrex	r3, [r3]
 8010158:	60bb      	str	r3, [r7, #8]
   return(result);
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	f023 0310 	bic.w	r3, r3, #16
 8010160:	647b      	str	r3, [r7, #68]	; 0x44
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	461a      	mov	r2, r3
 8010168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801016a:	61bb      	str	r3, [r7, #24]
 801016c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016e:	6979      	ldr	r1, [r7, #20]
 8010170:	69ba      	ldr	r2, [r7, #24]
 8010172:	e841 2300 	strex	r3, r2, [r1]
 8010176:	613b      	str	r3, [r7, #16]
   return(result);
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1e6      	bne.n	801014c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2220      	movs	r2, #32
 8010182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010192:	bf00      	nop
 8010194:	3754      	adds	r7, #84	; 0x54
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b09c      	sub	sp, #112	; 0x70
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f003 0320 	and.w	r3, r3, #32
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d171      	bne.n	801029e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80101ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101bc:	2200      	movs	r2, #0
 80101be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ca:	e853 3f00 	ldrex	r3, [r3]
 80101ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80101d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80101d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	461a      	mov	r2, r3
 80101de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80101e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101e8:	e841 2300 	strex	r3, r2, [r1]
 80101ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80101ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d1e6      	bne.n	80101c2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	3308      	adds	r3, #8
 80101fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fe:	e853 3f00 	ldrex	r3, [r3]
 8010202:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010206:	f023 0301 	bic.w	r3, r3, #1
 801020a:	667b      	str	r3, [r7, #100]	; 0x64
 801020c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	3308      	adds	r3, #8
 8010212:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010214:	647a      	str	r2, [r7, #68]	; 0x44
 8010216:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801021a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801021c:	e841 2300 	strex	r3, r2, [r1]
 8010220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010224:	2b00      	cmp	r3, #0
 8010226:	d1e5      	bne.n	80101f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	3308      	adds	r3, #8
 801022e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010232:	e853 3f00 	ldrex	r3, [r3]
 8010236:	623b      	str	r3, [r7, #32]
   return(result);
 8010238:	6a3b      	ldr	r3, [r7, #32]
 801023a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801023e:	663b      	str	r3, [r7, #96]	; 0x60
 8010240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	3308      	adds	r3, #8
 8010246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010248:	633a      	str	r2, [r7, #48]	; 0x30
 801024a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801024c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801024e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010250:	e841 2300 	strex	r3, r2, [r1]
 8010254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1e5      	bne.n	8010228 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801025c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801025e:	2220      	movs	r2, #32
 8010260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010268:	2b01      	cmp	r3, #1
 801026a:	d118      	bne.n	801029e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801026c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	e853 3f00 	ldrex	r3, [r3]
 8010278:	60fb      	str	r3, [r7, #12]
   return(result);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f023 0310 	bic.w	r3, r3, #16
 8010280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	461a      	mov	r2, r3
 8010288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801028a:	61fb      	str	r3, [r7, #28]
 801028c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028e:	69b9      	ldr	r1, [r7, #24]
 8010290:	69fa      	ldr	r2, [r7, #28]
 8010292:	e841 2300 	strex	r3, r2, [r1]
 8010296:	617b      	str	r3, [r7, #20]
   return(result);
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1e6      	bne.n	801026c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801029e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d107      	bne.n	80102b6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80102a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80102ac:	4619      	mov	r1, r3
 80102ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102b0:	f7f3 fa6c 	bl	800378c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80102b4:	e002      	b.n	80102bc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80102b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102b8:	f7ff f952 	bl	800f560 <HAL_UART_RxCpltCallback>
}
 80102bc:	bf00      	nop
 80102be:	3770      	adds	r7, #112	; 0x70
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d109      	bne.n	80102ee <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80102e0:	085b      	lsrs	r3, r3, #1
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	4619      	mov	r1, r3
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f7f3 fa50 	bl	800378c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80102ec:	e002      	b.n	80102f4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7ff f940 	bl	800f574 <HAL_UART_RxHalfCpltCallback>
}
 80102f4:	bf00      	nop
 80102f6:	3710      	adds	r7, #16
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b086      	sub	sp, #24
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010308:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010310:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010318:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010324:	2b80      	cmp	r3, #128	; 0x80
 8010326:	d109      	bne.n	801033c <UART_DMAError+0x40>
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	2b21      	cmp	r3, #33	; 0x21
 801032c:	d106      	bne.n	801033c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	2200      	movs	r2, #0
 8010332:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010336:	6978      	ldr	r0, [r7, #20]
 8010338:	f7ff fe8a 	bl	8010050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	689b      	ldr	r3, [r3, #8]
 8010342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010346:	2b40      	cmp	r3, #64	; 0x40
 8010348:	d109      	bne.n	801035e <UART_DMAError+0x62>
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b22      	cmp	r3, #34	; 0x22
 801034e:	d106      	bne.n	801035e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	2200      	movs	r2, #0
 8010354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010358:	6978      	ldr	r0, [r7, #20]
 801035a:	f7ff feba 	bl	80100d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010364:	f043 0210 	orr.w	r2, r3, #16
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801036e:	6978      	ldr	r0, [r7, #20]
 8010370:	f7ff f90a 	bl	800f588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010374:	bf00      	nop
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2200      	movs	r2, #0
 801038e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2200      	movs	r2, #0
 8010396:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f7ff f8f4 	bl	800f588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103a0:	bf00      	nop
 80103a2:	3710      	adds	r7, #16
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b088      	sub	sp, #32
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	e853 3f00 	ldrex	r3, [r3]
 80103bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103c4:	61fb      	str	r3, [r7, #28]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	461a      	mov	r2, r3
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	61bb      	str	r3, [r7, #24]
 80103d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d2:	6979      	ldr	r1, [r7, #20]
 80103d4:	69ba      	ldr	r2, [r7, #24]
 80103d6:	e841 2300 	strex	r3, r2, [r1]
 80103da:	613b      	str	r3, [r7, #16]
   return(result);
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1e6      	bne.n	80103b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2220      	movs	r2, #32
 80103e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2200      	movs	r2, #0
 80103ee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f7ff f8ab 	bl	800f54c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103f6:	bf00      	nop
 80103f8:	3720      	adds	r7, #32
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80103fe:	b480      	push	{r7}
 8010400:	b083      	sub	sp, #12
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010406:	bf00      	nop
 8010408:	370c      	adds	r7, #12
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010412:	b480      	push	{r7}
 8010414:	b083      	sub	sp, #12
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801041a:	bf00      	nop
 801041c:	370c      	adds	r7, #12
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr

08010426 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010426:	b480      	push	{r7}
 8010428:	b083      	sub	sp, #12
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801042e:	bf00      	nop
 8010430:	370c      	adds	r7, #12
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr

0801043a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801043a:	b480      	push	{r7}
 801043c:	b085      	sub	sp, #20
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010448:	2b01      	cmp	r3, #1
 801044a:	d101      	bne.n	8010450 <HAL_UARTEx_DisableFifoMode+0x16>
 801044c:	2302      	movs	r3, #2
 801044e:	e027      	b.n	80104a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2201      	movs	r2, #1
 8010454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2224      	movs	r2, #36	; 0x24
 801045c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f022 0201 	bic.w	r2, r2, #1
 8010476:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801047e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2200      	movs	r2, #0
 8010484:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2220      	movs	r2, #32
 8010492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3714      	adds	r7, #20
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80104bc:	2b01      	cmp	r3, #1
 80104be:	d101      	bne.n	80104c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80104c0:	2302      	movs	r3, #2
 80104c2:	e02d      	b.n	8010520 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2201      	movs	r2, #1
 80104c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2224      	movs	r2, #36	; 0x24
 80104d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f022 0201 	bic.w	r2, r2, #1
 80104ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	430a      	orrs	r2, r1
 80104fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f000 f8ab 	bl	801065c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2220      	movs	r2, #32
 8010512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010538:	2b01      	cmp	r3, #1
 801053a:	d101      	bne.n	8010540 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801053c:	2302      	movs	r3, #2
 801053e:	e02d      	b.n	801059c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2201      	movs	r2, #1
 8010544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2224      	movs	r2, #36	; 0x24
 801054c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f022 0201 	bic.w	r2, r2, #1
 8010566:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	689b      	ldr	r3, [r3, #8]
 801056e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	683a      	ldr	r2, [r7, #0]
 8010578:	430a      	orrs	r2, r1
 801057a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 f86d 	bl	801065c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2220      	movs	r2, #32
 801058e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801059a:	2300      	movs	r3, #0
}
 801059c:	4618      	mov	r0, r3
 801059e:	3710      	adds	r7, #16
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b08c      	sub	sp, #48	; 0x30
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	4613      	mov	r3, r2
 80105b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105b8:	2b20      	cmp	r3, #32
 80105ba:	d14a      	bne.n	8010652 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d002      	beq.n	80105c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80105c2:	88fb      	ldrh	r3, [r7, #6]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d101      	bne.n	80105cc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80105c8:	2301      	movs	r3, #1
 80105ca:	e043      	b.n	8010654 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d101      	bne.n	80105da <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80105d6:	2302      	movs	r3, #2
 80105d8:	e03c      	b.n	8010654 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2201      	movs	r2, #1
 80105de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2201      	movs	r2, #1
 80105e6:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80105e8:	88fb      	ldrh	r3, [r7, #6]
 80105ea:	461a      	mov	r2, r3
 80105ec:	68b9      	ldr	r1, [r7, #8]
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f7ff fc86 	bl	800ff00 <UART_Start_Receive_DMA>
 80105f4:	4603      	mov	r3, r0
 80105f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80105fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d124      	bne.n	801064c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010606:	2b01      	cmp	r3, #1
 8010608:	d11d      	bne.n	8010646 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2210      	movs	r2, #16
 8010610:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	e853 3f00 	ldrex	r3, [r3]
 801061e:	617b      	str	r3, [r7, #20]
   return(result);
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	f043 0310 	orr.w	r3, r3, #16
 8010626:	62bb      	str	r3, [r7, #40]	; 0x28
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	461a      	mov	r2, r3
 801062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010630:	627b      	str	r3, [r7, #36]	; 0x24
 8010632:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010634:	6a39      	ldr	r1, [r7, #32]
 8010636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010638:	e841 2300 	strex	r3, r2, [r1]
 801063c:	61fb      	str	r3, [r7, #28]
   return(result);
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d1e6      	bne.n	8010612 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010644:	e002      	b.n	801064c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010646:	2301      	movs	r3, #1
 8010648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801064c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010650:	e000      	b.n	8010654 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010652:	2302      	movs	r3, #2
  }
}
 8010654:	4618      	mov	r0, r3
 8010656:	3730      	adds	r7, #48	; 0x30
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010668:	2b00      	cmp	r3, #0
 801066a:	d108      	bne.n	801067e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2201      	movs	r2, #1
 8010670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2201      	movs	r2, #1
 8010678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801067c:	e031      	b.n	80106e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801067e:	2308      	movs	r3, #8
 8010680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010682:	2308      	movs	r3, #8
 8010684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	0e5b      	lsrs	r3, r3, #25
 801068e:	b2db      	uxtb	r3, r3
 8010690:	f003 0307 	and.w	r3, r3, #7
 8010694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	689b      	ldr	r3, [r3, #8]
 801069c:	0f5b      	lsrs	r3, r3, #29
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	f003 0307 	and.w	r3, r3, #7
 80106a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106a6:	7bbb      	ldrb	r3, [r7, #14]
 80106a8:	7b3a      	ldrb	r2, [r7, #12]
 80106aa:	4911      	ldr	r1, [pc, #68]	; (80106f0 <UARTEx_SetNbDataToProcess+0x94>)
 80106ac:	5c8a      	ldrb	r2, [r1, r2]
 80106ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80106b2:	7b3a      	ldrb	r2, [r7, #12]
 80106b4:	490f      	ldr	r1, [pc, #60]	; (80106f4 <UARTEx_SetNbDataToProcess+0x98>)
 80106b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80106bc:	b29a      	uxth	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106c4:	7bfb      	ldrb	r3, [r7, #15]
 80106c6:	7b7a      	ldrb	r2, [r7, #13]
 80106c8:	4909      	ldr	r1, [pc, #36]	; (80106f0 <UARTEx_SetNbDataToProcess+0x94>)
 80106ca:	5c8a      	ldrb	r2, [r1, r2]
 80106cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80106d0:	7b7a      	ldrb	r2, [r7, #13]
 80106d2:	4908      	ldr	r1, [pc, #32]	; (80106f4 <UARTEx_SetNbDataToProcess+0x98>)
 80106d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80106da:	b29a      	uxth	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80106e2:	bf00      	nop
 80106e4:	3714      	adds	r7, #20
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	08018544 	.word	0x08018544
 80106f4:	0801854c 	.word	0x0801854c

080106f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010708:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801070c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	b29a      	uxth	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3714      	adds	r7, #20
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010726:	b480      	push	{r7}
 8010728:	b085      	sub	sp, #20
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801072e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010732:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801073a:	b29a      	uxth	r2, r3
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	b29b      	uxth	r3, r3
 8010740:	43db      	mvns	r3, r3
 8010742:	b29b      	uxth	r3, r3
 8010744:	4013      	ands	r3, r2
 8010746:	b29a      	uxth	r2, r3
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801075c:	b084      	sub	sp, #16
 801075e:	b480      	push	{r7}
 8010760:	b083      	sub	sp, #12
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	f107 0014 	add.w	r0, r7, #20
 801076a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2201      	movs	r2, #1
 8010772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2200      	movs	r2, #0
 801078a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	b004      	add	sp, #16
 801079c:	4770      	bx	lr
	...

080107a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b09d      	sub	sp, #116	; 0x74
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80107aa:	2300      	movs	r3, #0
 80107ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	4413      	add	r3, r2
 80107ba:	881b      	ldrh	r3, [r3, #0]
 80107bc:	b29b      	uxth	r3, r3
 80107be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80107c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	78db      	ldrb	r3, [r3, #3]
 80107ce:	2b03      	cmp	r3, #3
 80107d0:	d81f      	bhi.n	8010812 <USB_ActivateEndpoint+0x72>
 80107d2:	a201      	add	r2, pc, #4	; (adr r2, 80107d8 <USB_ActivateEndpoint+0x38>)
 80107d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d8:	080107e9 	.word	0x080107e9
 80107dc:	08010805 	.word	0x08010805
 80107e0:	0801081b 	.word	0x0801081b
 80107e4:	080107f7 	.word	0x080107f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80107e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80107ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80107f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80107f4:	e012      	b.n	801081c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80107f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80107fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80107fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010802:	e00b      	b.n	801081c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010804:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801080c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010810:	e004      	b.n	801081c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010812:	2301      	movs	r3, #1
 8010814:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010818:	e000      	b.n	801081c <USB_ActivateEndpoint+0x7c>
      break;
 801081a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	441a      	add	r2, r3
 8010826:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801082a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801082e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801083a:	b29b      	uxth	r3, r3
 801083c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	4413      	add	r3, r2
 8010848:	881b      	ldrh	r3, [r3, #0]
 801084a:	b29b      	uxth	r3, r3
 801084c:	b21b      	sxth	r3, r3
 801084e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010856:	b21a      	sxth	r2, r3
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	b21b      	sxth	r3, r3
 801085e:	4313      	orrs	r3, r2
 8010860:	b21b      	sxth	r3, r3
 8010862:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	441a      	add	r2, r3
 8010870:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801087c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010884:	b29b      	uxth	r3, r3
 8010886:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	7b1b      	ldrb	r3, [r3, #12]
 801088c:	2b00      	cmp	r3, #0
 801088e:	f040 8149 	bne.w	8010b24 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	785b      	ldrb	r3, [r3, #1]
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 8084 	beq.w	80109a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	61bb      	str	r3, [r7, #24]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	461a      	mov	r2, r3
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	4413      	add	r3, r2
 80108ae:	61bb      	str	r3, [r7, #24]
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	00da      	lsls	r2, r3, #3
 80108b6:	69bb      	ldr	r3, [r7, #24]
 80108b8:	4413      	add	r3, r2
 80108ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108be:	617b      	str	r3, [r7, #20]
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	88db      	ldrh	r3, [r3, #6]
 80108c4:	085b      	lsrs	r3, r3, #1
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	b29a      	uxth	r2, r3
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	4413      	add	r3, r2
 80108da:	881b      	ldrh	r3, [r3, #0]
 80108dc:	827b      	strh	r3, [r7, #18]
 80108de:	8a7b      	ldrh	r3, [r7, #18]
 80108e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d01b      	beq.n	8010920 <USB_ActivateEndpoint+0x180>
 80108e8:	687a      	ldr	r2, [r7, #4]
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	4413      	add	r3, r2
 80108f2:	881b      	ldrh	r3, [r3, #0]
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108fe:	823b      	strh	r3, [r7, #16]
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	441a      	add	r2, r3
 801090a:	8a3b      	ldrh	r3, [r7, #16]
 801090c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801091c:	b29b      	uxth	r3, r3
 801091e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	78db      	ldrb	r3, [r3, #3]
 8010924:	2b01      	cmp	r3, #1
 8010926:	d020      	beq.n	801096a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	4413      	add	r3, r2
 8010932:	881b      	ldrh	r3, [r3, #0]
 8010934:	b29b      	uxth	r3, r3
 8010936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801093a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801093e:	81bb      	strh	r3, [r7, #12]
 8010940:	89bb      	ldrh	r3, [r7, #12]
 8010942:	f083 0320 	eor.w	r3, r3, #32
 8010946:	81bb      	strh	r3, [r7, #12]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	441a      	add	r2, r3
 8010952:	89bb      	ldrh	r3, [r7, #12]
 8010954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801095c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010964:	b29b      	uxth	r3, r3
 8010966:	8013      	strh	r3, [r2, #0]
 8010968:	e2a6      	b.n	8010eb8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	4413      	add	r3, r2
 8010974:	881b      	ldrh	r3, [r3, #0]
 8010976:	b29b      	uxth	r3, r3
 8010978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801097c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010980:	81fb      	strh	r3, [r7, #14]
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	441a      	add	r2, r3
 801098c:	89fb      	ldrh	r3, [r7, #14]
 801098e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801099a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801099e:	b29b      	uxth	r3, r3
 80109a0:	8013      	strh	r3, [r2, #0]
 80109a2:	e289      	b.n	8010eb8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	633b      	str	r3, [r7, #48]	; 0x30
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	461a      	mov	r2, r3
 80109b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b4:	4413      	add	r3, r2
 80109b6:	633b      	str	r3, [r7, #48]	; 0x30
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	00da      	lsls	r2, r3, #3
 80109be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c0:	4413      	add	r3, r2
 80109c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80109c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	88db      	ldrh	r3, [r3, #6]
 80109cc:	085b      	lsrs	r3, r3, #1
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	005b      	lsls	r3, r3, #1
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	62bb      	str	r3, [r7, #40]	; 0x28
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	461a      	mov	r2, r3
 80109e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e8:	4413      	add	r3, r2
 80109ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	00da      	lsls	r2, r3, #3
 80109f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f4:	4413      	add	r3, r2
 80109f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80109fa:	627b      	str	r3, [r7, #36]	; 0x24
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	691b      	ldr	r3, [r3, #16]
 8010a00:	2b3e      	cmp	r3, #62	; 0x3e
 8010a02:	d918      	bls.n	8010a36 <USB_ActivateEndpoint+0x296>
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	691b      	ldr	r3, [r3, #16]
 8010a08:	095b      	lsrs	r3, r3, #5
 8010a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	691b      	ldr	r3, [r3, #16]
 8010a10:	f003 031f 	and.w	r3, r3, #31
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d102      	bne.n	8010a1e <USB_ActivateEndpoint+0x27e>
 8010a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a1a:	3b01      	subs	r3, #1
 8010a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	029b      	lsls	r3, r3, #10
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	801a      	strh	r2, [r3, #0]
 8010a34:	e029      	b.n	8010a8a <USB_ActivateEndpoint+0x2ea>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	691b      	ldr	r3, [r3, #16]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d112      	bne.n	8010a64 <USB_ActivateEndpoint+0x2c4>
 8010a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a40:	881b      	ldrh	r3, [r3, #0]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	801a      	strh	r2, [r3, #0]
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a50:	881b      	ldrh	r3, [r3, #0]
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	801a      	strh	r2, [r3, #0]
 8010a62:	e012      	b.n	8010a8a <USB_ActivateEndpoint+0x2ea>
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	691b      	ldr	r3, [r3, #16]
 8010a68:	085b      	lsrs	r3, r3, #1
 8010a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	691b      	ldr	r3, [r3, #16]
 8010a70:	f003 0301 	and.w	r3, r3, #1
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d002      	beq.n	8010a7e <USB_ActivateEndpoint+0x2de>
 8010a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	029b      	lsls	r3, r3, #10
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	4413      	add	r3, r2
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	847b      	strh	r3, [r7, #34]	; 0x22
 8010a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d01b      	beq.n	8010ada <USB_ActivateEndpoint+0x33a>
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	4413      	add	r3, r2
 8010aac:	881b      	ldrh	r3, [r3, #0]
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ab8:	843b      	strh	r3, [r7, #32]
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	441a      	add	r2, r3
 8010ac4:	8c3b      	ldrh	r3, [r7, #32]
 8010ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	4413      	add	r3, r2
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010af0:	83fb      	strh	r3, [r7, #30]
 8010af2:	8bfb      	ldrh	r3, [r7, #30]
 8010af4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010af8:	83fb      	strh	r3, [r7, #30]
 8010afa:	8bfb      	ldrh	r3, [r7, #30]
 8010afc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010b00:	83fb      	strh	r3, [r7, #30]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	441a      	add	r2, r3
 8010b0c:	8bfb      	ldrh	r3, [r7, #30]
 8010b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	8013      	strh	r3, [r2, #0]
 8010b22:	e1c9      	b.n	8010eb8 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	78db      	ldrb	r3, [r3, #3]
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d11e      	bne.n	8010b6a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	4413      	add	r3, r2
 8010b36:	881b      	ldrh	r3, [r3, #0]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b42:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	441a      	add	r2, r3
 8010b50:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	8013      	strh	r3, [r2, #0]
 8010b68:	e01d      	b.n	8010ba6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	4413      	add	r3, r2
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	441a      	add	r2, r3
 8010b8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bb6:	4413      	add	r3, r2
 8010bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	00da      	lsls	r2, r3, #3
 8010bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bc2:	4413      	add	r3, r2
 8010bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	891b      	ldrh	r3, [r3, #8]
 8010bce:	085b      	lsrs	r3, r3, #1
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010bd8:	801a      	strh	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	461a      	mov	r2, r3
 8010be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bea:	4413      	add	r3, r2
 8010bec:	657b      	str	r3, [r7, #84]	; 0x54
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	00da      	lsls	r2, r3, #3
 8010bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	895b      	ldrh	r3, [r3, #10]
 8010c02:	085b      	lsrs	r3, r3, #1
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	005b      	lsls	r3, r3, #1
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	785b      	ldrb	r3, [r3, #1]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f040 8093 	bne.w	8010d3e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010c28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d01b      	beq.n	8010c6c <USB_ActivateEndpoint+0x4cc>
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	4413      	add	r3, r2
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	441a      	add	r2, r3
 8010c56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	4413      	add	r3, r2
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010c7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d01b      	beq.n	8010cbc <USB_ActivateEndpoint+0x51c>
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	4413      	add	r3, r2
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c9a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	441a      	add	r2, r3
 8010ca6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	881b      	ldrh	r3, [r3, #0]
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cd2:	873b      	strh	r3, [r7, #56]	; 0x38
 8010cd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010cd6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010cda:	873b      	strh	r3, [r7, #56]	; 0x38
 8010cdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010cde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010ce2:	873b      	strh	r3, [r7, #56]	; 0x38
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	009b      	lsls	r3, r3, #2
 8010cec:	441a      	add	r2, r3
 8010cee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	4413      	add	r3, r2
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d1a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	441a      	add	r2, r3
 8010d26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	8013      	strh	r3, [r2, #0]
 8010d3c:	e0bc      	b.n	8010eb8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	4413      	add	r3, r2
 8010d48:	881b      	ldrh	r3, [r3, #0]
 8010d4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d01d      	beq.n	8010d96 <USB_ActivateEndpoint+0x5f6>
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4413      	add	r3, r2
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d70:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	441a      	add	r2, r3
 8010d7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	4413      	add	r3, r2
 8010da0:	881b      	ldrh	r3, [r3, #0]
 8010da2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010da6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d01d      	beq.n	8010dee <USB_ActivateEndpoint+0x64e>
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	4413      	add	r3, r2
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dc8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	441a      	add	r2, r3
 8010dd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	78db      	ldrb	r3, [r3, #3]
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d024      	beq.n	8010e40 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	4413      	add	r3, r2
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e14:	f083 0320 	eor.w	r3, r3, #32
 8010e18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	441a      	add	r2, r3
 8010e26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	8013      	strh	r3, [r2, #0]
 8010e3e:	e01d      	b.n	8010e7c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	009b      	lsls	r3, r3, #2
 8010e48:	4413      	add	r3, r2
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	441a      	add	r2, r3
 8010e64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	4413      	add	r3, r2
 8010e86:	881b      	ldrh	r3, [r3, #0]
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	009b      	lsls	r3, r3, #2
 8010e9e:	441a      	add	r2, r3
 8010ea0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010eb8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3774      	adds	r7, #116	; 0x74
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b08d      	sub	sp, #52	; 0x34
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	7b1b      	ldrb	r3, [r3, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f040 808e 	bne.w	8010ff8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	785b      	ldrb	r3, [r3, #1]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d044      	beq.n	8010f6e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	4413      	add	r3, r2
 8010eee:	881b      	ldrh	r3, [r3, #0]
 8010ef0:	81bb      	strh	r3, [r7, #12]
 8010ef2:	89bb      	ldrh	r3, [r7, #12]
 8010ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d01b      	beq.n	8010f34 <USB_DeactivateEndpoint+0x6c>
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	4413      	add	r3, r2
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f12:	817b      	strh	r3, [r7, #10]
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	009b      	lsls	r3, r3, #2
 8010f1c:	441a      	add	r2, r3
 8010f1e:	897b      	ldrh	r3, [r7, #10]
 8010f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	881b      	ldrh	r3, [r3, #0]
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f4a:	813b      	strh	r3, [r7, #8]
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	441a      	add	r2, r3
 8010f56:	893b      	ldrh	r3, [r7, #8]
 8010f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	8013      	strh	r3, [r2, #0]
 8010f6c:	e192      	b.n	8011294 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	009b      	lsls	r3, r3, #2
 8010f76:	4413      	add	r3, r2
 8010f78:	881b      	ldrh	r3, [r3, #0]
 8010f7a:	827b      	strh	r3, [r7, #18]
 8010f7c:	8a7b      	ldrh	r3, [r7, #18]
 8010f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d01b      	beq.n	8010fbe <USB_DeactivateEndpoint+0xf6>
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	4413      	add	r3, r2
 8010f90:	881b      	ldrh	r3, [r3, #0]
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f9c:	823b      	strh	r3, [r7, #16]
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	441a      	add	r2, r3
 8010fa8:	8a3b      	ldrh	r3, [r7, #16]
 8010faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	009b      	lsls	r3, r3, #2
 8010fc6:	4413      	add	r3, r2
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fd4:	81fb      	strh	r3, [r7, #14]
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	441a      	add	r2, r3
 8010fe0:	89fb      	ldrh	r3, [r7, #14]
 8010fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	8013      	strh	r3, [r2, #0]
 8010ff6:	e14d      	b.n	8011294 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	785b      	ldrb	r3, [r3, #1]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f040 80a5 	bne.w	801114c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	4413      	add	r3, r2
 801100c:	881b      	ldrh	r3, [r3, #0]
 801100e:	843b      	strh	r3, [r7, #32]
 8011010:	8c3b      	ldrh	r3, [r7, #32]
 8011012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011016:	2b00      	cmp	r3, #0
 8011018:	d01b      	beq.n	8011052 <USB_DeactivateEndpoint+0x18a>
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	4413      	add	r3, r2
 8011024:	881b      	ldrh	r3, [r3, #0]
 8011026:	b29b      	uxth	r3, r3
 8011028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801102c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011030:	83fb      	strh	r3, [r7, #30]
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	441a      	add	r2, r3
 801103c:	8bfb      	ldrh	r3, [r7, #30]
 801103e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801104a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801104e:	b29b      	uxth	r3, r3
 8011050:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	4413      	add	r3, r2
 801105c:	881b      	ldrh	r3, [r3, #0]
 801105e:	83bb      	strh	r3, [r7, #28]
 8011060:	8bbb      	ldrh	r3, [r7, #28]
 8011062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011066:	2b00      	cmp	r3, #0
 8011068:	d01b      	beq.n	80110a2 <USB_DeactivateEndpoint+0x1da>
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4413      	add	r3, r2
 8011074:	881b      	ldrh	r3, [r3, #0]
 8011076:	b29b      	uxth	r3, r3
 8011078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801107c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011080:	837b      	strh	r3, [r7, #26]
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	441a      	add	r2, r3
 801108c:	8b7b      	ldrh	r3, [r7, #26]
 801108e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801109a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801109e:	b29b      	uxth	r3, r3
 80110a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	4413      	add	r3, r2
 80110ac:	881b      	ldrh	r3, [r3, #0]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110b8:	833b      	strh	r3, [r7, #24]
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	441a      	add	r2, r3
 80110c4:	8b3b      	ldrh	r3, [r7, #24]
 80110c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4413      	add	r3, r2
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80110ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110f0:	82fb      	strh	r3, [r7, #22]
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	441a      	add	r2, r3
 80110fc:	8afb      	ldrh	r3, [r7, #22]
 80110fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801110a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801110e:	b29b      	uxth	r3, r3
 8011110:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	4413      	add	r3, r2
 801111c:	881b      	ldrh	r3, [r3, #0]
 801111e:	b29b      	uxth	r3, r3
 8011120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011128:	82bb      	strh	r3, [r7, #20]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	009b      	lsls	r3, r3, #2
 8011132:	441a      	add	r2, r3
 8011134:	8abb      	ldrh	r3, [r7, #20]
 8011136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801113a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801113e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011146:	b29b      	uxth	r3, r3
 8011148:	8013      	strh	r3, [r2, #0]
 801114a:	e0a3      	b.n	8011294 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	4413      	add	r3, r2
 8011156:	881b      	ldrh	r3, [r3, #0]
 8011158:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801115a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801115c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011160:	2b00      	cmp	r3, #0
 8011162:	d01b      	beq.n	801119c <USB_DeactivateEndpoint+0x2d4>
 8011164:	687a      	ldr	r2, [r7, #4]
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	4413      	add	r3, r2
 801116e:	881b      	ldrh	r3, [r3, #0]
 8011170:	b29b      	uxth	r3, r3
 8011172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801117a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	441a      	add	r2, r3
 8011186:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801118c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011198:	b29b      	uxth	r3, r3
 801119a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	4413      	add	r3, r2
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80111aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80111ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d01b      	beq.n	80111ec <USB_DeactivateEndpoint+0x324>
 80111b4:	687a      	ldr	r2, [r7, #4]
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	4413      	add	r3, r2
 80111be:	881b      	ldrh	r3, [r3, #0]
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	441a      	add	r2, r3
 80111d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80111d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	009b      	lsls	r3, r3, #2
 80111f4:	4413      	add	r3, r2
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011202:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011204:	687a      	ldr	r2, [r7, #4]
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	009b      	lsls	r3, r3, #2
 801120c:	441a      	add	r2, r3
 801120e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011220:	b29b      	uxth	r3, r3
 8011222:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	4413      	add	r3, r2
 801122e:	881b      	ldrh	r3, [r3, #0]
 8011230:	b29b      	uxth	r3, r3
 8011232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801123a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801123c:	687a      	ldr	r2, [r7, #4]
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	009b      	lsls	r3, r3, #2
 8011244:	441a      	add	r2, r3
 8011246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801124c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011258:	b29b      	uxth	r3, r3
 801125a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	4413      	add	r3, r2
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	b29b      	uxth	r3, r3
 801126a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801126e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011272:	847b      	strh	r3, [r7, #34]	; 0x22
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	441a      	add	r2, r3
 801127e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011290:	b29b      	uxth	r3, r3
 8011292:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	3734      	adds	r7, #52	; 0x34
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80112a2:	b580      	push	{r7, lr}
 80112a4:	b0c2      	sub	sp, #264	; 0x108
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112b0:	6018      	str	r0, [r3, #0]
 80112b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80112bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	785b      	ldrb	r3, [r3, #1]
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	f040 867b 	bne.w	8011fc4 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80112ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	699a      	ldr	r2, [r3, #24]
 80112da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	691b      	ldr	r3, [r3, #16]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d908      	bls.n	80112fc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80112ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	691b      	ldr	r3, [r3, #16]
 80112f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80112fa:	e007      	b.n	801130c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	699b      	ldr	r3, [r3, #24]
 8011308:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801130c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	7b1b      	ldrb	r3, [r3, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d13a      	bne.n	8011392 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801131c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	6959      	ldr	r1, [r3, #20]
 8011328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801132c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	88da      	ldrh	r2, [r3, #6]
 8011334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011338:	b29b      	uxth	r3, r3
 801133a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801133e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011342:	6800      	ldr	r0, [r0, #0]
 8011344:	f001 fc1d 	bl	8012b82 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801134c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	613b      	str	r3, [r7, #16]
 8011354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011362:	b29b      	uxth	r3, r3
 8011364:	461a      	mov	r2, r3
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	4413      	add	r3, r2
 801136a:	613b      	str	r3, [r7, #16]
 801136c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	00da      	lsls	r2, r3, #3
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	4413      	add	r3, r2
 801137e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011382:	60fb      	str	r3, [r7, #12]
 8011384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011388:	b29a      	uxth	r2, r3
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	801a      	strh	r2, [r3, #0]
 801138e:	f000 bde3 	b.w	8011f58 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	78db      	ldrb	r3, [r3, #3]
 801139e:	2b02      	cmp	r3, #2
 80113a0:	f040 843a 	bne.w	8011c18 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80113a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	6a1a      	ldr	r2, [r3, #32]
 80113b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	691b      	ldr	r3, [r3, #16]
 80113bc:	429a      	cmp	r2, r3
 80113be:	f240 83b7 	bls.w	8011b30 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80113c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	4413      	add	r3, r2
 80113dc:	881b      	ldrh	r3, [r3, #0]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80113ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	009b      	lsls	r3, r3, #2
 8011404:	441a      	add	r2, r3
 8011406:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801140a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801140e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011412:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801141a:	b29b      	uxth	r3, r3
 801141c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801141e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6a1a      	ldr	r2, [r3, #32]
 801142a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801142e:	1ad2      	subs	r2, r2, r3
 8011430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801143c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801144a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	009b      	lsls	r3, r3, #2
 8011454:	4413      	add	r3, r2
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	b29b      	uxth	r3, r3
 801145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 81b3 	beq.w	80117ca <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	633b      	str	r3, [r7, #48]	; 0x30
 8011470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	785b      	ldrb	r3, [r3, #1]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d16d      	bne.n	801155c <USB_EPStartXfer+0x2ba>
 8011480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	62bb      	str	r3, [r7, #40]	; 0x28
 801148c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801149a:	b29b      	uxth	r3, r3
 801149c:	461a      	mov	r2, r3
 801149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a0:	4413      	add	r3, r2
 80114a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80114a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	00da      	lsls	r2, r3, #3
 80114b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b4:	4413      	add	r3, r2
 80114b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80114ba:	627b      	str	r3, [r7, #36]	; 0x24
 80114bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c0:	2b3e      	cmp	r3, #62	; 0x3e
 80114c2:	d91c      	bls.n	80114fe <USB_EPStartXfer+0x25c>
 80114c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c8:	095b      	lsrs	r3, r3, #5
 80114ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80114ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114d2:	f003 031f 	and.w	r3, r3, #31
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d104      	bne.n	80114e4 <USB_EPStartXfer+0x242>
 80114da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114de:	3b01      	subs	r3, #1
 80114e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80114e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	029b      	lsls	r3, r3, #10
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fa:	801a      	strh	r2, [r3, #0]
 80114fc:	e053      	b.n	80115a6 <USB_EPStartXfer+0x304>
 80114fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011502:	2b00      	cmp	r3, #0
 8011504:	d112      	bne.n	801152c <USB_EPStartXfer+0x28a>
 8011506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011508:	881b      	ldrh	r3, [r3, #0]
 801150a:	b29b      	uxth	r3, r3
 801150c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011510:	b29a      	uxth	r2, r3
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	801a      	strh	r2, [r3, #0]
 8011516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	b29b      	uxth	r3, r3
 801151c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011524:	b29a      	uxth	r2, r3
 8011526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011528:	801a      	strh	r2, [r3, #0]
 801152a:	e03c      	b.n	80115a6 <USB_EPStartXfer+0x304>
 801152c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011530:	085b      	lsrs	r3, r3, #1
 8011532:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801153a:	f003 0301 	and.w	r3, r3, #1
 801153e:	2b00      	cmp	r3, #0
 8011540:	d004      	beq.n	801154c <USB_EPStartXfer+0x2aa>
 8011542:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011546:	3301      	adds	r3, #1
 8011548:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801154c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011550:	b29b      	uxth	r3, r3
 8011552:	029b      	lsls	r3, r3, #10
 8011554:	b29a      	uxth	r2, r3
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	801a      	strh	r2, [r3, #0]
 801155a:	e024      	b.n	80115a6 <USB_EPStartXfer+0x304>
 801155c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	785b      	ldrb	r3, [r3, #1]
 8011568:	2b01      	cmp	r3, #1
 801156a:	d11c      	bne.n	80115a6 <USB_EPStartXfer+0x304>
 801156c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801157a:	b29b      	uxth	r3, r3
 801157c:	461a      	mov	r2, r3
 801157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011580:	4413      	add	r3, r2
 8011582:	633b      	str	r3, [r7, #48]	; 0x30
 8011584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	00da      	lsls	r2, r3, #3
 8011592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011594:	4413      	add	r3, r2
 8011596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801159c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80115a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	895b      	ldrh	r3, [r3, #10]
 80115b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80115b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	6959      	ldr	r1, [r3, #20]
 80115c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80115cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80115d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80115d4:	6800      	ldr	r0, [r0, #0]
 80115d6:	f001 fad4 	bl	8012b82 <USB_WritePMA>
            ep->xfer_buff += len;
 80115da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	695a      	ldr	r2, [r3, #20]
 80115e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115ea:	441a      	add	r2, r3
 80115ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80115f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	6a1a      	ldr	r2, [r3, #32]
 8011604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	691b      	ldr	r3, [r3, #16]
 8011610:	429a      	cmp	r2, r3
 8011612:	d90f      	bls.n	8011634 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	6a1a      	ldr	r2, [r3, #32]
 8011620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011624:	1ad2      	subs	r2, r2, r3
 8011626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801162a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	621a      	str	r2, [r3, #32]
 8011632:	e00e      	b.n	8011652 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8011634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	6a1b      	ldr	r3, [r3, #32]
 8011640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2200      	movs	r2, #0
 8011650:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	785b      	ldrb	r3, [r3, #1]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d16d      	bne.n	801173e <USB_EPStartXfer+0x49c>
 8011662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	61bb      	str	r3, [r7, #24]
 801166e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801167c:	b29b      	uxth	r3, r3
 801167e:	461a      	mov	r2, r3
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	4413      	add	r3, r2
 8011684:	61bb      	str	r3, [r7, #24]
 8011686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	00da      	lsls	r2, r3, #3
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	4413      	add	r3, r2
 8011698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801169c:	617b      	str	r3, [r7, #20]
 801169e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116a2:	2b3e      	cmp	r3, #62	; 0x3e
 80116a4:	d91c      	bls.n	80116e0 <USB_EPStartXfer+0x43e>
 80116a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116aa:	095b      	lsrs	r3, r3, #5
 80116ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80116b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116b4:	f003 031f 	and.w	r3, r3, #31
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d104      	bne.n	80116c6 <USB_EPStartXfer+0x424>
 80116bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116c0:	3b01      	subs	r3, #1
 80116c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80116c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	029b      	lsls	r3, r3, #10
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116d8:	b29a      	uxth	r2, r3
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	801a      	strh	r2, [r3, #0]
 80116de:	e059      	b.n	8011794 <USB_EPStartXfer+0x4f2>
 80116e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d112      	bne.n	801170e <USB_EPStartXfer+0x46c>
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	881b      	ldrh	r3, [r3, #0]
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	801a      	strh	r2, [r3, #0]
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	881b      	ldrh	r3, [r3, #0]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011706:	b29a      	uxth	r2, r3
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	801a      	strh	r2, [r3, #0]
 801170c:	e042      	b.n	8011794 <USB_EPStartXfer+0x4f2>
 801170e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011712:	085b      	lsrs	r3, r3, #1
 8011714:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801171c:	f003 0301 	and.w	r3, r3, #1
 8011720:	2b00      	cmp	r3, #0
 8011722:	d004      	beq.n	801172e <USB_EPStartXfer+0x48c>
 8011724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011728:	3301      	adds	r3, #1
 801172a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801172e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011732:	b29b      	uxth	r3, r3
 8011734:	029b      	lsls	r3, r3, #10
 8011736:	b29a      	uxth	r2, r3
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	801a      	strh	r2, [r3, #0]
 801173c:	e02a      	b.n	8011794 <USB_EPStartXfer+0x4f2>
 801173e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	785b      	ldrb	r3, [r3, #1]
 801174a:	2b01      	cmp	r3, #1
 801174c:	d122      	bne.n	8011794 <USB_EPStartXfer+0x4f2>
 801174e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	623b      	str	r3, [r7, #32]
 801175a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801175e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011768:	b29b      	uxth	r3, r3
 801176a:	461a      	mov	r2, r3
 801176c:	6a3b      	ldr	r3, [r7, #32]
 801176e:	4413      	add	r3, r2
 8011770:	623b      	str	r3, [r7, #32]
 8011772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	00da      	lsls	r2, r3, #3
 8011780:	6a3b      	ldr	r3, [r7, #32]
 8011782:	4413      	add	r3, r2
 8011784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011788:	61fb      	str	r3, [r7, #28]
 801178a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801178e:	b29a      	uxth	r2, r3
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	891b      	ldrh	r3, [r3, #8]
 80117a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80117a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	6959      	ldr	r1, [r3, #20]
 80117b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80117ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80117be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80117c2:	6800      	ldr	r0, [r0, #0]
 80117c4:	f001 f9dd 	bl	8012b82 <USB_WritePMA>
 80117c8:	e3c6      	b.n	8011f58 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80117ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	785b      	ldrb	r3, [r3, #1]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d16d      	bne.n	80118b6 <USB_EPStartXfer+0x614>
 80117da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80117e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	461a      	mov	r2, r3
 80117f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117fa:	4413      	add	r3, r2
 80117fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80117fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	00da      	lsls	r2, r3, #3
 801180c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801180e:	4413      	add	r3, r2
 8011810:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011814:	647b      	str	r3, [r7, #68]	; 0x44
 8011816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801181a:	2b3e      	cmp	r3, #62	; 0x3e
 801181c:	d91c      	bls.n	8011858 <USB_EPStartXfer+0x5b6>
 801181e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011822:	095b      	lsrs	r3, r3, #5
 8011824:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801182c:	f003 031f 	and.w	r3, r3, #31
 8011830:	2b00      	cmp	r3, #0
 8011832:	d104      	bne.n	801183e <USB_EPStartXfer+0x59c>
 8011834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011838:	3b01      	subs	r3, #1
 801183a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801183e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011842:	b29b      	uxth	r3, r3
 8011844:	029b      	lsls	r3, r3, #10
 8011846:	b29b      	uxth	r3, r3
 8011848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801184c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011850:	b29a      	uxth	r2, r3
 8011852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011854:	801a      	strh	r2, [r3, #0]
 8011856:	e059      	b.n	801190c <USB_EPStartXfer+0x66a>
 8011858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801185c:	2b00      	cmp	r3, #0
 801185e:	d112      	bne.n	8011886 <USB_EPStartXfer+0x5e4>
 8011860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	b29b      	uxth	r3, r3
 8011866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801186a:	b29a      	uxth	r2, r3
 801186c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801186e:	801a      	strh	r2, [r3, #0]
 8011870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011872:	881b      	ldrh	r3, [r3, #0]
 8011874:	b29b      	uxth	r3, r3
 8011876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801187a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801187e:	b29a      	uxth	r2, r3
 8011880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011882:	801a      	strh	r2, [r3, #0]
 8011884:	e042      	b.n	801190c <USB_EPStartXfer+0x66a>
 8011886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801188a:	085b      	lsrs	r3, r3, #1
 801188c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011894:	f003 0301 	and.w	r3, r3, #1
 8011898:	2b00      	cmp	r3, #0
 801189a:	d004      	beq.n	80118a6 <USB_EPStartXfer+0x604>
 801189c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80118a0:	3301      	adds	r3, #1
 80118a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80118a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	029b      	lsls	r3, r3, #10
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118b2:	801a      	strh	r2, [r3, #0]
 80118b4:	e02a      	b.n	801190c <USB_EPStartXfer+0x66a>
 80118b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	785b      	ldrb	r3, [r3, #1]
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	d122      	bne.n	801190c <USB_EPStartXfer+0x66a>
 80118c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	653b      	str	r3, [r7, #80]	; 0x50
 80118d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	461a      	mov	r2, r3
 80118e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e6:	4413      	add	r3, r2
 80118e8:	653b      	str	r3, [r7, #80]	; 0x50
 80118ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	00da      	lsls	r2, r3, #3
 80118f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118fa:	4413      	add	r3, r2
 80118fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011900:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011906:	b29a      	uxth	r2, r3
 8011908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801190a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801190c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	891b      	ldrh	r3, [r3, #8]
 8011918:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801191c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	6959      	ldr	r1, [r3, #20]
 8011928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801192c:	b29b      	uxth	r3, r3
 801192e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011932:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011936:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801193a:	6800      	ldr	r0, [r0, #0]
 801193c:	f001 f921 	bl	8012b82 <USB_WritePMA>
            ep->xfer_buff += len;
 8011940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	695a      	ldr	r2, [r3, #20]
 801194c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011950:	441a      	add	r2, r3
 8011952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801195e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	6a1a      	ldr	r2, [r3, #32]
 801196a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801196e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	691b      	ldr	r3, [r3, #16]
 8011976:	429a      	cmp	r2, r3
 8011978:	d90f      	bls.n	801199a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 801197a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801197e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	6a1a      	ldr	r2, [r3, #32]
 8011986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801198a:	1ad2      	subs	r2, r2, r3
 801198c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	621a      	str	r2, [r3, #32]
 8011998:	e00e      	b.n	80119b8 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 801199a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801199e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	6a1b      	ldr	r3, [r3, #32]
 80119a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80119aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2200      	movs	r2, #0
 80119b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80119b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	643b      	str	r3, [r7, #64]	; 0x40
 80119c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	785b      	ldrb	r3, [r3, #1]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d16d      	bne.n	8011ab0 <USB_EPStartXfer+0x80e>
 80119d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	63bb      	str	r3, [r7, #56]	; 0x38
 80119e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	461a      	mov	r2, r3
 80119f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f4:	4413      	add	r3, r2
 80119f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80119f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	00da      	lsls	r2, r3, #3
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	4413      	add	r3, r2
 8011a0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a14:	2b3e      	cmp	r3, #62	; 0x3e
 8011a16:	d91c      	bls.n	8011a52 <USB_EPStartXfer+0x7b0>
 8011a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a1c:	095b      	lsrs	r3, r3, #5
 8011a1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a26:	f003 031f 	and.w	r3, r3, #31
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d104      	bne.n	8011a38 <USB_EPStartXfer+0x796>
 8011a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a32:	3b01      	subs	r3, #1
 8011a34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	029b      	lsls	r3, r3, #10
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4e:	801a      	strh	r2, [r3, #0]
 8011a50:	e053      	b.n	8011afa <USB_EPStartXfer+0x858>
 8011a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d112      	bne.n	8011a80 <USB_EPStartXfer+0x7de>
 8011a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a68:	801a      	strh	r2, [r3, #0]
 8011a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a6c:	881b      	ldrh	r3, [r3, #0]
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7c:	801a      	strh	r2, [r3, #0]
 8011a7e:	e03c      	b.n	8011afa <USB_EPStartXfer+0x858>
 8011a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a84:	085b      	lsrs	r3, r3, #1
 8011a86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a8e:	f003 0301 	and.w	r3, r3, #1
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d004      	beq.n	8011aa0 <USB_EPStartXfer+0x7fe>
 8011a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	029b      	lsls	r3, r3, #10
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aac:	801a      	strh	r2, [r3, #0]
 8011aae:	e024      	b.n	8011afa <USB_EPStartXfer+0x858>
 8011ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	785b      	ldrb	r3, [r3, #1]
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d11c      	bne.n	8011afa <USB_EPStartXfer+0x858>
 8011ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ad4:	4413      	add	r3, r2
 8011ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8011ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	00da      	lsls	r2, r3, #3
 8011ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ae8:	4413      	add	r3, r2
 8011aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	895b      	ldrh	r3, [r3, #10]
 8011b06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	6959      	ldr	r1, [r3, #20]
 8011b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011b20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011b24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b28:	6800      	ldr	r0, [r0, #0]
 8011b2a:	f001 f82a 	bl	8012b82 <USB_WritePMA>
 8011b2e:	e213      	b.n	8011f58 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	6a1b      	ldr	r3, [r3, #32]
 8011b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	4413      	add	r3, r2
 8011b5a:	881b      	ldrh	r3, [r3, #0]
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	441a      	add	r2, r3
 8011b84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	461a      	mov	r2, r3
 8011bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bbc:	4413      	add	r3, r2
 8011bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	00da      	lsls	r2, r3, #3
 8011bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bd0:	4413      	add	r3, r2
 8011bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8011bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011be0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	891b      	ldrh	r3, [r3, #8]
 8011bee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	6959      	ldr	r1, [r3, #20]
 8011bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011c08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011c0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011c10:	6800      	ldr	r0, [r0, #0]
 8011c12:	f000 ffb6 	bl	8012b82 <USB_WritePMA>
 8011c16:	e19f      	b.n	8011f58 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	6a1a      	ldr	r2, [r3, #32]
 8011c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c28:	1ad2      	subs	r2, r2, r3
 8011c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	009b      	lsls	r3, r3, #2
 8011c4e:	4413      	add	r3, r2
 8011c50:	881b      	ldrh	r3, [r3, #0]
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f000 80bc 	beq.w	8011dd6 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	673b      	str	r3, [r7, #112]	; 0x70
 8011c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	785b      	ldrb	r3, [r3, #1]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d16d      	bne.n	8011d56 <USB_EPStartXfer+0xab4>
 8011c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	461a      	mov	r2, r3
 8011c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c9a:	4413      	add	r3, r2
 8011c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	00da      	lsls	r2, r3, #3
 8011cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cae:	4413      	add	r3, r2
 8011cb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8011cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cba:	2b3e      	cmp	r3, #62	; 0x3e
 8011cbc:	d91c      	bls.n	8011cf8 <USB_EPStartXfer+0xa56>
 8011cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cc2:	095b      	lsrs	r3, r3, #5
 8011cc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ccc:	f003 031f 	and.w	r3, r3, #31
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d104      	bne.n	8011cde <USB_EPStartXfer+0xa3c>
 8011cd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011cde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	029b      	lsls	r3, r3, #10
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011cf0:	b29a      	uxth	r2, r3
 8011cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cf4:	801a      	strh	r2, [r3, #0]
 8011cf6:	e053      	b.n	8011da0 <USB_EPStartXfer+0xafe>
 8011cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d112      	bne.n	8011d26 <USB_EPStartXfer+0xa84>
 8011d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d02:	881b      	ldrh	r3, [r3, #0]
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d0e:	801a      	strh	r2, [r3, #0]
 8011d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d12:	881b      	ldrh	r3, [r3, #0]
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d22:	801a      	strh	r2, [r3, #0]
 8011d24:	e03c      	b.n	8011da0 <USB_EPStartXfer+0xafe>
 8011d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d2a:	085b      	lsrs	r3, r3, #1
 8011d2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d34:	f003 0301 	and.w	r3, r3, #1
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d004      	beq.n	8011d46 <USB_EPStartXfer+0xaa4>
 8011d3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011d40:	3301      	adds	r3, #1
 8011d42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011d46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	029b      	lsls	r3, r3, #10
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d52:	801a      	strh	r2, [r3, #0]
 8011d54:	e024      	b.n	8011da0 <USB_EPStartXfer+0xafe>
 8011d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	785b      	ldrb	r3, [r3, #1]
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d11c      	bne.n	8011da0 <USB_EPStartXfer+0xafe>
 8011d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	461a      	mov	r2, r3
 8011d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d7a:	4413      	add	r3, r2
 8011d7c:	673b      	str	r3, [r7, #112]	; 0x70
 8011d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	00da      	lsls	r2, r3, #3
 8011d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d8e:	4413      	add	r3, r2
 8011d90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	895b      	ldrh	r3, [r3, #10]
 8011dac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	6959      	ldr	r1, [r3, #20]
 8011dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011dc6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011dca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011dce:	6800      	ldr	r0, [r0, #0]
 8011dd0:	f000 fed7 	bl	8012b82 <USB_WritePMA>
 8011dd4:	e0c0      	b.n	8011f58 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	785b      	ldrb	r3, [r3, #1]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d16d      	bne.n	8011ec2 <USB_EPStartXfer+0xc20>
 8011de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	461a      	mov	r2, r3
 8011e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011e06:	4413      	add	r3, r2
 8011e08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	00da      	lsls	r2, r3, #3
 8011e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011e1a:	4413      	add	r3, r2
 8011e1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e26:	2b3e      	cmp	r3, #62	; 0x3e
 8011e28:	d91c      	bls.n	8011e64 <USB_EPStartXfer+0xbc2>
 8011e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e2e:	095b      	lsrs	r3, r3, #5
 8011e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e38:	f003 031f 	and.w	r3, r3, #31
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d104      	bne.n	8011e4a <USB_EPStartXfer+0xba8>
 8011e40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e44:	3b01      	subs	r3, #1
 8011e46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	029b      	lsls	r3, r3, #10
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e60:	801a      	strh	r2, [r3, #0]
 8011e62:	e05f      	b.n	8011f24 <USB_EPStartXfer+0xc82>
 8011e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d112      	bne.n	8011e92 <USB_EPStartXfer+0xbf0>
 8011e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e6e:	881b      	ldrh	r3, [r3, #0]
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e7a:	801a      	strh	r2, [r3, #0]
 8011e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e7e:	881b      	ldrh	r3, [r3, #0]
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e8e:	801a      	strh	r2, [r3, #0]
 8011e90:	e048      	b.n	8011f24 <USB_EPStartXfer+0xc82>
 8011e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e96:	085b      	lsrs	r3, r3, #1
 8011e98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ea0:	f003 0301 	and.w	r3, r3, #1
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <USB_EPStartXfer+0xc10>
 8011ea8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011eac:	3301      	adds	r3, #1
 8011eae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011eb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	029b      	lsls	r3, r3, #10
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ebe:	801a      	strh	r2, [r3, #0]
 8011ec0:	e030      	b.n	8011f24 <USB_EPStartXfer+0xc82>
 8011ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	785b      	ldrb	r3, [r3, #1]
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d128      	bne.n	8011f24 <USB_EPStartXfer+0xc82>
 8011ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ef6:	4413      	add	r3, r2
 8011ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	00da      	lsls	r2, r3, #3
 8011f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f0e:	4413      	add	r3, r2
 8011f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011f14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	891b      	ldrh	r3, [r3, #8]
 8011f30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	6959      	ldr	r1, [r3, #20]
 8011f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011f4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011f52:	6800      	ldr	r0, [r0, #0]
 8011f54:	f000 fe15 	bl	8012b82 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	4413      	add	r3, r2
 8011f72:	881b      	ldrh	r3, [r3, #0]
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f7e:	817b      	strh	r3, [r7, #10]
 8011f80:	897b      	ldrh	r3, [r7, #10]
 8011f82:	f083 0310 	eor.w	r3, r3, #16
 8011f86:	817b      	strh	r3, [r7, #10]
 8011f88:	897b      	ldrh	r3, [r7, #10]
 8011f8a:	f083 0320 	eor.w	r3, r3, #32
 8011f8e:	817b      	strh	r3, [r7, #10]
 8011f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	441a      	add	r2, r3
 8011faa:	897b      	ldrh	r3, [r7, #10]
 8011fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	8013      	strh	r3, [r2, #0]
 8011fc0:	f000 bc9f 	b.w	8012902 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	7b1b      	ldrb	r3, [r3, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f040 80ae 	bne.w	8012132 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	699a      	ldr	r2, [r3, #24]
 8011fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	691b      	ldr	r3, [r3, #16]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d917      	bls.n	8012022 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8011ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8012002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	699a      	ldr	r2, [r3, #24]
 801200e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012012:	1ad2      	subs	r2, r2, r3
 8012014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	619a      	str	r2, [r3, #24]
 8012020:	e00e      	b.n	8012040 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8012022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8012032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	2200      	movs	r2, #0
 801203e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801204e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801205c:	b29b      	uxth	r3, r3
 801205e:	461a      	mov	r2, r3
 8012060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012064:	4413      	add	r3, r2
 8012066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801206a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801206e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	00da      	lsls	r2, r3, #3
 8012078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801207c:	4413      	add	r3, r2
 801207e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801208a:	2b3e      	cmp	r3, #62	; 0x3e
 801208c:	d91d      	bls.n	80120ca <USB_EPStartXfer+0xe28>
 801208e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012092:	095b      	lsrs	r3, r3, #5
 8012094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801209c:	f003 031f 	and.w	r3, r3, #31
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d104      	bne.n	80120ae <USB_EPStartXfer+0xe0c>
 80120a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80120a8:	3b01      	subs	r3, #1
 80120aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80120ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	029b      	lsls	r3, r3, #10
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120c0:	b29a      	uxth	r2, r3
 80120c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120c6:	801a      	strh	r2, [r3, #0]
 80120c8:	e3e1      	b.n	801288e <USB_EPStartXfer+0x15ec>
 80120ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d116      	bne.n	8012100 <USB_EPStartXfer+0xe5e>
 80120d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	b29b      	uxth	r3, r3
 80120da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80120de:	b29a      	uxth	r2, r3
 80120e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120e4:	801a      	strh	r2, [r3, #0]
 80120e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120ea:	881b      	ldrh	r3, [r3, #0]
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120fc:	801a      	strh	r2, [r3, #0]
 80120fe:	e3c6      	b.n	801288e <USB_EPStartXfer+0x15ec>
 8012100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012104:	085b      	lsrs	r3, r3, #1
 8012106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801210a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801210e:	f003 0301 	and.w	r3, r3, #1
 8012112:	2b00      	cmp	r3, #0
 8012114:	d004      	beq.n	8012120 <USB_EPStartXfer+0xe7e>
 8012116:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801211a:	3301      	adds	r3, #1
 801211c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012120:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012124:	b29b      	uxth	r3, r3
 8012126:	029b      	lsls	r3, r3, #10
 8012128:	b29a      	uxth	r2, r3
 801212a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801212e:	801a      	strh	r2, [r3, #0]
 8012130:	e3ad      	b.n	801288e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	78db      	ldrb	r3, [r3, #3]
 801213e:	2b02      	cmp	r3, #2
 8012140:	f040 8200 	bne.w	8012544 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	785b      	ldrb	r3, [r3, #1]
 8012150:	2b00      	cmp	r3, #0
 8012152:	f040 8091 	bne.w	8012278 <USB_EPStartXfer+0xfd6>
 8012156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801215a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012172:	b29b      	uxth	r3, r3
 8012174:	461a      	mov	r2, r3
 8012176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801217a:	4413      	add	r3, r2
 801217c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	00da      	lsls	r2, r3, #3
 801218e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012192:	4413      	add	r3, r2
 8012194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801219c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	691b      	ldr	r3, [r3, #16]
 80121a8:	2b3e      	cmp	r3, #62	; 0x3e
 80121aa:	d925      	bls.n	80121f8 <USB_EPStartXfer+0xf56>
 80121ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	691b      	ldr	r3, [r3, #16]
 80121b8:	095b      	lsrs	r3, r3, #5
 80121ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80121be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	691b      	ldr	r3, [r3, #16]
 80121ca:	f003 031f 	and.w	r3, r3, #31
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d104      	bne.n	80121dc <USB_EPStartXfer+0xf3a>
 80121d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121d6:	3b01      	subs	r3, #1
 80121d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80121dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	029b      	lsls	r3, r3, #10
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121f4:	801a      	strh	r2, [r3, #0]
 80121f6:	e074      	b.n	80122e2 <USB_EPStartXfer+0x1040>
 80121f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	691b      	ldr	r3, [r3, #16]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d116      	bne.n	8012236 <USB_EPStartXfer+0xf94>
 8012208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	b29b      	uxth	r3, r3
 8012210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012214:	b29a      	uxth	r2, r3
 8012216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801221a:	801a      	strh	r2, [r3, #0]
 801221c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	b29b      	uxth	r3, r3
 8012224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801222c:	b29a      	uxth	r2, r3
 801222e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012232:	801a      	strh	r2, [r3, #0]
 8012234:	e055      	b.n	80122e2 <USB_EPStartXfer+0x1040>
 8012236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801223a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	691b      	ldr	r3, [r3, #16]
 8012242:	085b      	lsrs	r3, r3, #1
 8012244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801224c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	691b      	ldr	r3, [r3, #16]
 8012254:	f003 0301 	and.w	r3, r3, #1
 8012258:	2b00      	cmp	r3, #0
 801225a:	d004      	beq.n	8012266 <USB_EPStartXfer+0xfc4>
 801225c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012260:	3301      	adds	r3, #1
 8012262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801226a:	b29b      	uxth	r3, r3
 801226c:	029b      	lsls	r3, r3, #10
 801226e:	b29a      	uxth	r2, r3
 8012270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012274:	801a      	strh	r2, [r3, #0]
 8012276:	e034      	b.n	80122e2 <USB_EPStartXfer+0x1040>
 8012278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801227c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	785b      	ldrb	r3, [r3, #1]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d12c      	bne.n	80122e2 <USB_EPStartXfer+0x1040>
 8012288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801228c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801229a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	461a      	mov	r2, r3
 80122a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122ac:	4413      	add	r3, r2
 80122ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80122b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	00da      	lsls	r2, r3, #3
 80122c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122c4:	4413      	add	r3, r2
 80122c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80122ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80122ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	691b      	ldr	r3, [r3, #16]
 80122da:	b29a      	uxth	r2, r3
 80122dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80122e0:	801a      	strh	r2, [r3, #0]
 80122e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80122f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	785b      	ldrb	r3, [r3, #1]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f040 8091 	bne.w	8012424 <USB_EPStartXfer+0x1182>
 8012302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801231e:	b29b      	uxth	r3, r3
 8012320:	461a      	mov	r2, r3
 8012322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012326:	4413      	add	r3, r2
 8012328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801232c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	00da      	lsls	r2, r3, #3
 801233a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801233e:	4413      	add	r3, r2
 8012340:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801234c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	691b      	ldr	r3, [r3, #16]
 8012354:	2b3e      	cmp	r3, #62	; 0x3e
 8012356:	d925      	bls.n	80123a4 <USB_EPStartXfer+0x1102>
 8012358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801235c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	095b      	lsrs	r3, r3, #5
 8012366:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801236a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801236e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	691b      	ldr	r3, [r3, #16]
 8012376:	f003 031f 	and.w	r3, r3, #31
 801237a:	2b00      	cmp	r3, #0
 801237c:	d104      	bne.n	8012388 <USB_EPStartXfer+0x10e6>
 801237e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012382:	3b01      	subs	r3, #1
 8012384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801238c:	b29b      	uxth	r3, r3
 801238e:	029b      	lsls	r3, r3, #10
 8012390:	b29b      	uxth	r3, r3
 8012392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801239a:	b29a      	uxth	r2, r3
 801239c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123a0:	801a      	strh	r2, [r3, #0]
 80123a2:	e06d      	b.n	8012480 <USB_EPStartXfer+0x11de>
 80123a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	691b      	ldr	r3, [r3, #16]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d116      	bne.n	80123e2 <USB_EPStartXfer+0x1140>
 80123b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123c6:	801a      	strh	r2, [r3, #0]
 80123c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123d8:	b29a      	uxth	r2, r3
 80123da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123de:	801a      	strh	r2, [r3, #0]
 80123e0:	e04e      	b.n	8012480 <USB_EPStartXfer+0x11de>
 80123e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	691b      	ldr	r3, [r3, #16]
 80123ee:	085b      	lsrs	r3, r3, #1
 80123f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80123f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	691b      	ldr	r3, [r3, #16]
 8012400:	f003 0301 	and.w	r3, r3, #1
 8012404:	2b00      	cmp	r3, #0
 8012406:	d004      	beq.n	8012412 <USB_EPStartXfer+0x1170>
 8012408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801240c:	3301      	adds	r3, #1
 801240e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012416:	b29b      	uxth	r3, r3
 8012418:	029b      	lsls	r3, r3, #10
 801241a:	b29a      	uxth	r2, r3
 801241c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012420:	801a      	strh	r2, [r3, #0]
 8012422:	e02d      	b.n	8012480 <USB_EPStartXfer+0x11de>
 8012424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	785b      	ldrb	r3, [r3, #1]
 8012430:	2b01      	cmp	r3, #1
 8012432:	d125      	bne.n	8012480 <USB_EPStartXfer+0x11de>
 8012434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012442:	b29b      	uxth	r3, r3
 8012444:	461a      	mov	r2, r3
 8012446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801244a:	4413      	add	r3, r2
 801244c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	00da      	lsls	r2, r3, #3
 801245e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012462:	4413      	add	r3, r2
 8012464:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801246c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	691b      	ldr	r3, [r3, #16]
 8012478:	b29a      	uxth	r2, r3
 801247a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801247e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	69db      	ldr	r3, [r3, #28]
 801248c:	2b00      	cmp	r3, #0
 801248e:	f000 81fe 	beq.w	801288e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	4413      	add	r3, r2
 80124ac:	881b      	ldrh	r3, [r3, #0]
 80124ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80124b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d005      	beq.n	80124ca <USB_EPStartXfer+0x1228>
 80124be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d10d      	bne.n	80124e6 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80124ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	f040 81db 	bne.w	801288e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80124d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80124dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f040 81d4 	bne.w	801288e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80124e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	4413      	add	r3, r2
 8012500:	881b      	ldrh	r3, [r3, #0]
 8012502:	b29b      	uxth	r3, r3
 8012504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801250c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012518:	681a      	ldr	r2, [r3, #0]
 801251a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801251e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	441a      	add	r2, r3
 801252a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801252e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801253a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801253e:	b29b      	uxth	r3, r3
 8012540:	8013      	strh	r3, [r2, #0]
 8012542:	e1a4      	b.n	801288e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	78db      	ldrb	r3, [r3, #3]
 8012550:	2b01      	cmp	r3, #1
 8012552:	f040 819a 	bne.w	801288a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801255a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	699a      	ldr	r2, [r3, #24]
 8012562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	429a      	cmp	r2, r3
 8012570:	d917      	bls.n	80125a2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8012572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	691b      	ldr	r3, [r3, #16]
 801257e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	699a      	ldr	r2, [r3, #24]
 801258e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012592:	1ad2      	subs	r2, r2, r3
 8012594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	619a      	str	r2, [r3, #24]
 80125a0:	e00e      	b.n	80125c0 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80125a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	699b      	ldr	r3, [r3, #24]
 80125ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80125b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	2200      	movs	r2, #0
 80125be:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80125c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	785b      	ldrb	r3, [r3, #1]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d178      	bne.n	80126c2 <USB_EPStartXfer+0x1420>
 80125d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80125de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	461a      	mov	r2, r3
 80125f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80125f4:	4413      	add	r3, r2
 80125f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80125fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	00da      	lsls	r2, r3, #3
 8012608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801260c:	4413      	add	r3, r2
 801260e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801261a:	2b3e      	cmp	r3, #62	; 0x3e
 801261c:	d91d      	bls.n	801265a <USB_EPStartXfer+0x13b8>
 801261e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012622:	095b      	lsrs	r3, r3, #5
 8012624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801262c:	f003 031f 	and.w	r3, r3, #31
 8012630:	2b00      	cmp	r3, #0
 8012632:	d104      	bne.n	801263e <USB_EPStartXfer+0x139c>
 8012634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012638:	3b01      	subs	r3, #1
 801263a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801263e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012642:	b29b      	uxth	r3, r3
 8012644:	029b      	lsls	r3, r3, #10
 8012646:	b29b      	uxth	r3, r3
 8012648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801264c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012650:	b29a      	uxth	r2, r3
 8012652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012656:	801a      	strh	r2, [r3, #0]
 8012658:	e064      	b.n	8012724 <USB_EPStartXfer+0x1482>
 801265a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801265e:	2b00      	cmp	r3, #0
 8012660:	d116      	bne.n	8012690 <USB_EPStartXfer+0x13ee>
 8012662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012666:	881b      	ldrh	r3, [r3, #0]
 8012668:	b29b      	uxth	r3, r3
 801266a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801266e:	b29a      	uxth	r2, r3
 8012670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012674:	801a      	strh	r2, [r3, #0]
 8012676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	b29b      	uxth	r3, r3
 801267e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012686:	b29a      	uxth	r2, r3
 8012688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801268c:	801a      	strh	r2, [r3, #0]
 801268e:	e049      	b.n	8012724 <USB_EPStartXfer+0x1482>
 8012690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012694:	085b      	lsrs	r3, r3, #1
 8012696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801269a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801269e:	f003 0301 	and.w	r3, r3, #1
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d004      	beq.n	80126b0 <USB_EPStartXfer+0x140e>
 80126a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126aa:	3301      	adds	r3, #1
 80126ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80126b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	029b      	lsls	r3, r3, #10
 80126b8:	b29a      	uxth	r2, r3
 80126ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80126be:	801a      	strh	r2, [r3, #0]
 80126c0:	e030      	b.n	8012724 <USB_EPStartXfer+0x1482>
 80126c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	785b      	ldrb	r3, [r3, #1]
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d128      	bne.n	8012724 <USB_EPStartXfer+0x1482>
 80126d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80126e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	461a      	mov	r2, r3
 80126f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80126f6:	4413      	add	r3, r2
 80126f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80126fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	00da      	lsls	r2, r3, #3
 801270a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801270e:	4413      	add	r3, r2
 8012710:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801271c:	b29a      	uxth	r2, r3
 801271e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012722:	801a      	strh	r2, [r3, #0]
 8012724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	785b      	ldrb	r3, [r3, #1]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d178      	bne.n	8012834 <USB_EPStartXfer+0x1592>
 8012742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801275e:	b29b      	uxth	r3, r3
 8012760:	461a      	mov	r2, r3
 8012762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012766:	4413      	add	r3, r2
 8012768:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801276c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	00da      	lsls	r2, r3, #3
 801277a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801277e:	4413      	add	r3, r2
 8012780:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801278c:	2b3e      	cmp	r3, #62	; 0x3e
 801278e:	d91d      	bls.n	80127cc <USB_EPStartXfer+0x152a>
 8012790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012794:	095b      	lsrs	r3, r3, #5
 8012796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801279a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801279e:	f003 031f 	and.w	r3, r3, #31
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d104      	bne.n	80127b0 <USB_EPStartXfer+0x150e>
 80127a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80127aa:	3b01      	subs	r3, #1
 80127ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80127b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	029b      	lsls	r3, r3, #10
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127c2:	b29a      	uxth	r2, r3
 80127c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127c8:	801a      	strh	r2, [r3, #0]
 80127ca:	e060      	b.n	801288e <USB_EPStartXfer+0x15ec>
 80127cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d116      	bne.n	8012802 <USB_EPStartXfer+0x1560>
 80127d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127d8:	881b      	ldrh	r3, [r3, #0]
 80127da:	b29b      	uxth	r3, r3
 80127dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127e6:	801a      	strh	r2, [r3, #0]
 80127e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127ec:	881b      	ldrh	r3, [r3, #0]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127f8:	b29a      	uxth	r2, r3
 80127fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80127fe:	801a      	strh	r2, [r3, #0]
 8012800:	e045      	b.n	801288e <USB_EPStartXfer+0x15ec>
 8012802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012806:	085b      	lsrs	r3, r3, #1
 8012808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801280c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012810:	f003 0301 	and.w	r3, r3, #1
 8012814:	2b00      	cmp	r3, #0
 8012816:	d004      	beq.n	8012822 <USB_EPStartXfer+0x1580>
 8012818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801281c:	3301      	adds	r3, #1
 801281e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012826:	b29b      	uxth	r3, r3
 8012828:	029b      	lsls	r3, r3, #10
 801282a:	b29a      	uxth	r2, r3
 801282c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012830:	801a      	strh	r2, [r3, #0]
 8012832:	e02c      	b.n	801288e <USB_EPStartXfer+0x15ec>
 8012834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	785b      	ldrb	r3, [r3, #1]
 8012840:	2b01      	cmp	r3, #1
 8012842:	d124      	bne.n	801288e <USB_EPStartXfer+0x15ec>
 8012844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012852:	b29b      	uxth	r3, r3
 8012854:	461a      	mov	r2, r3
 8012856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801285a:	4413      	add	r3, r2
 801285c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	00da      	lsls	r2, r3, #3
 801286e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012872:	4413      	add	r3, r2
 8012874:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012878:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801287c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012880:	b29a      	uxth	r2, r3
 8012882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012886:	801a      	strh	r2, [r3, #0]
 8012888:	e001      	b.n	801288e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 801288a:	2301      	movs	r3, #1
 801288c:	e03a      	b.n	8012904 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801288e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801289c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	4413      	add	r3, r2
 80128a8:	881b      	ldrh	r3, [r3, #0]
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80128b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80128b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80128c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80128c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80128cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80128d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	009b      	lsls	r3, r3, #2
 80128e8:	441a      	add	r2, r3
 80128ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128fe:	b29b      	uxth	r3, r3
 8012900:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012902:	2300      	movs	r3, #0
}
 8012904:	4618      	mov	r0, r3
 8012906:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}

0801290e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801290e:	b480      	push	{r7}
 8012910:	b085      	sub	sp, #20
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	785b      	ldrb	r3, [r3, #1]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d020      	beq.n	8012962 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	4413      	add	r3, r2
 801292a:	881b      	ldrh	r3, [r3, #0]
 801292c:	b29b      	uxth	r3, r3
 801292e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012936:	81bb      	strh	r3, [r7, #12]
 8012938:	89bb      	ldrh	r3, [r7, #12]
 801293a:	f083 0310 	eor.w	r3, r3, #16
 801293e:	81bb      	strh	r3, [r7, #12]
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	441a      	add	r2, r3
 801294a:	89bb      	ldrh	r3, [r7, #12]
 801294c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801295c:	b29b      	uxth	r3, r3
 801295e:	8013      	strh	r3, [r2, #0]
 8012960:	e01f      	b.n	80129a2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	009b      	lsls	r3, r3, #2
 801296a:	4413      	add	r3, r2
 801296c:	881b      	ldrh	r3, [r3, #0]
 801296e:	b29b      	uxth	r3, r3
 8012970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012978:	81fb      	strh	r3, [r7, #14]
 801297a:	89fb      	ldrh	r3, [r7, #14]
 801297c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012980:	81fb      	strh	r3, [r7, #14]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	441a      	add	r2, r3
 801298c:	89fb      	ldrh	r3, [r7, #14]
 801298e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801299a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801299e:	b29b      	uxth	r3, r3
 80129a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3714      	adds	r7, #20
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b087      	sub	sp, #28
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	7b1b      	ldrb	r3, [r3, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f040 809d 	bne.w	8012afe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	785b      	ldrb	r3, [r3, #1]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d04c      	beq.n	8012a66 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80129cc:	687a      	ldr	r2, [r7, #4]
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	4413      	add	r3, r2
 80129d6:	881b      	ldrh	r3, [r3, #0]
 80129d8:	823b      	strh	r3, [r7, #16]
 80129da:	8a3b      	ldrh	r3, [r7, #16]
 80129dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d01b      	beq.n	8012a1c <USB_EPClearStall+0x6c>
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129fa:	81fb      	strh	r3, [r7, #14]
 80129fc:	687a      	ldr	r2, [r7, #4]
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	441a      	add	r2, r3
 8012a06:	89fb      	ldrh	r3, [r7, #14]
 8012a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	78db      	ldrb	r3, [r3, #3]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d06c      	beq.n	8012afe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	009b      	lsls	r3, r3, #2
 8012a2c:	4413      	add	r3, r2
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a3a:	81bb      	strh	r3, [r7, #12]
 8012a3c:	89bb      	ldrh	r3, [r7, #12]
 8012a3e:	f083 0320 	eor.w	r3, r3, #32
 8012a42:	81bb      	strh	r3, [r7, #12]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	441a      	add	r2, r3
 8012a4e:	89bb      	ldrh	r3, [r7, #12]
 8012a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	8013      	strh	r3, [r2, #0]
 8012a64:	e04b      	b.n	8012afe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4413      	add	r3, r2
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	82fb      	strh	r3, [r7, #22]
 8012a74:	8afb      	ldrh	r3, [r7, #22]
 8012a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d01b      	beq.n	8012ab6 <USB_EPClearStall+0x106>
 8012a7e:	687a      	ldr	r2, [r7, #4]
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	4413      	add	r3, r2
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a94:	82bb      	strh	r3, [r7, #20]
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	441a      	add	r2, r3
 8012aa0:	8abb      	ldrh	r3, [r7, #20]
 8012aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	009b      	lsls	r3, r3, #2
 8012abe:	4413      	add	r3, r2
 8012ac0:	881b      	ldrh	r3, [r3, #0]
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012acc:	827b      	strh	r3, [r7, #18]
 8012ace:	8a7b      	ldrh	r3, [r7, #18]
 8012ad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012ad4:	827b      	strh	r3, [r7, #18]
 8012ad6:	8a7b      	ldrh	r3, [r7, #18]
 8012ad8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012adc:	827b      	strh	r3, [r7, #18]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	009b      	lsls	r3, r3, #2
 8012ae6:	441a      	add	r2, r3
 8012ae8:	8a7b      	ldrh	r3, [r7, #18]
 8012aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	371c      	adds	r7, #28
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b083      	sub	sp, #12
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	460b      	mov	r3, r1
 8012b16:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012b18:	78fb      	ldrb	r3, [r7, #3]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d103      	bne.n	8012b26 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2280      	movs	r2, #128	; 0x80
 8012b22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012b26:	2300      	movs	r3, #0
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8012b62:	b480      	push	{r7}
 8012b64:	b085      	sub	sp, #20
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012b74:	68fb      	ldr	r3, [r7, #12]
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3714      	adds	r7, #20
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr

08012b82 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012b82:	b480      	push	{r7}
 8012b84:	b08d      	sub	sp, #52	; 0x34
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	60f8      	str	r0, [r7, #12]
 8012b8a:	60b9      	str	r1, [r7, #8]
 8012b8c:	4611      	mov	r1, r2
 8012b8e:	461a      	mov	r2, r3
 8012b90:	460b      	mov	r3, r1
 8012b92:	80fb      	strh	r3, [r7, #6]
 8012b94:	4613      	mov	r3, r2
 8012b96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012b98:	88bb      	ldrh	r3, [r7, #4]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	085b      	lsrs	r3, r3, #1
 8012b9e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012ba8:	88fa      	ldrh	r2, [r7, #6]
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	4413      	add	r3, r2
 8012bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8012bb4:	6a3b      	ldr	r3, [r7, #32]
 8012bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bb8:	e01b      	b.n	8012bf2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8012bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	021b      	lsls	r3, r3, #8
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	4313      	orrs	r3, r2
 8012bd6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bde:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be2:	3302      	adds	r3, #2
 8012be4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be8:	3301      	adds	r3, #1
 8012bea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	3b01      	subs	r3, #1
 8012bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1e0      	bne.n	8012bba <USB_WritePMA+0x38>
  }
}
 8012bf8:	bf00      	nop
 8012bfa:	bf00      	nop
 8012bfc:	3734      	adds	r7, #52	; 0x34
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr

08012c06 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012c06:	b480      	push	{r7}
 8012c08:	b08b      	sub	sp, #44	; 0x2c
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	60f8      	str	r0, [r7, #12]
 8012c0e:	60b9      	str	r1, [r7, #8]
 8012c10:	4611      	mov	r1, r2
 8012c12:	461a      	mov	r2, r3
 8012c14:	460b      	mov	r3, r1
 8012c16:	80fb      	strh	r3, [r7, #6]
 8012c18:	4613      	mov	r3, r2
 8012c1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012c1c:	88bb      	ldrh	r3, [r7, #4]
 8012c1e:	085b      	lsrs	r3, r3, #1
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012c2c:	88fa      	ldrh	r2, [r7, #6]
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	4413      	add	r3, r2
 8012c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c36:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c3c:	e018      	b.n	8012c70 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8012c3e:	6a3b      	ldr	r3, [r7, #32]
 8012c40:	881b      	ldrh	r3, [r3, #0]
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	3302      	adds	r3, #2
 8012c4a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	b2da      	uxtb	r2, r3
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	3301      	adds	r3, #1
 8012c58:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	0a1b      	lsrs	r3, r3, #8
 8012c5e:	b2da      	uxtb	r2, r3
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	3301      	adds	r3, #1
 8012c68:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8012c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6c:	3b01      	subs	r3, #1
 8012c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1e3      	bne.n	8012c3e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012c76:	88bb      	ldrh	r3, [r7, #4]
 8012c78:	f003 0301 	and.w	r3, r3, #1
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d007      	beq.n	8012c92 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8012c82:	6a3b      	ldr	r3, [r7, #32]
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	b2da      	uxtb	r2, r3
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	701a      	strb	r2, [r3, #0]
  }
}
 8012c92:	bf00      	nop
 8012c94:	372c      	adds	r7, #44	; 0x2c
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr

08012c9e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c9e:	b580      	push	{r7, lr}
 8012ca0:	b084      	sub	sp, #16
 8012ca2:	af00      	add	r7, sp, #0
 8012ca4:	6078      	str	r0, [r7, #4]
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012caa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012cae:	f002 f931 	bl	8014f14 <USBD_static_malloc>
 8012cb2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d105      	bne.n	8012cc6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012cc2:	2302      	movs	r3, #2
 8012cc4:	e066      	b.n	8012d94 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	7c1b      	ldrb	r3, [r3, #16]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d119      	bne.n	8012d0a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cda:	2202      	movs	r2, #2
 8012cdc:	2181      	movs	r1, #129	; 0x81
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f001 ffbd 	bl	8014c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cee:	2202      	movs	r2, #2
 8012cf0:	2101      	movs	r1, #1
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f001 ffb3 	bl	8014c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2201      	movs	r2, #1
 8012cfc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2210      	movs	r2, #16
 8012d04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012d08:	e016      	b.n	8012d38 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012d0a:	2340      	movs	r3, #64	; 0x40
 8012d0c:	2202      	movs	r2, #2
 8012d0e:	2181      	movs	r1, #129	; 0x81
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f001 ffa4 	bl	8014c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2201      	movs	r2, #1
 8012d1a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012d1c:	2340      	movs	r3, #64	; 0x40
 8012d1e:	2202      	movs	r2, #2
 8012d20:	2101      	movs	r1, #1
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f001 ff9b 	bl	8014c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2210      	movs	r2, #16
 8012d34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012d38:	2308      	movs	r3, #8
 8012d3a:	2203      	movs	r2, #3
 8012d3c:	2182      	movs	r1, #130	; 0x82
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f001 ff8d 	bl	8014c5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2201      	movs	r2, #1
 8012d48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2200      	movs	r2, #0
 8012d62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	7c1b      	ldrb	r3, [r3, #16]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d109      	bne.n	8012d82 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d78:	2101      	movs	r1, #1
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f002 f85f 	bl	8014e3e <USBD_LL_PrepareReceive>
 8012d80:	e007      	b.n	8012d92 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d88:	2340      	movs	r3, #64	; 0x40
 8012d8a:	2101      	movs	r1, #1
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f002 f856 	bl	8014e3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d92:	2300      	movs	r3, #0
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3710      	adds	r7, #16
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	460b      	mov	r3, r1
 8012da6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012da8:	2181      	movs	r1, #129	; 0x81
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f001 ff7d 	bl	8014caa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2200      	movs	r2, #0
 8012db4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012db6:	2101      	movs	r1, #1
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f001 ff76 	bl	8014caa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012dc6:	2182      	movs	r1, #130	; 0x82
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f001 ff6e 	bl	8014caa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d00e      	beq.n	8012e06 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f002 f899 	bl	8014f30 <USBD_static_free>
    pdev->pClassData = NULL;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2200      	movs	r2, #0
 8012e02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012e06:	2300      	movs	r3, #0
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b086      	sub	sp, #24
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012e22:	2300      	movs	r3, #0
 8012e24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012e26:	2300      	movs	r3, #0
 8012e28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d101      	bne.n	8012e38 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012e34:	2303      	movs	r3, #3
 8012e36:	e0af      	b.n	8012f98 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d03f      	beq.n	8012ec4 <USBD_CDC_Setup+0xb4>
 8012e44:	2b20      	cmp	r3, #32
 8012e46:	f040 809f 	bne.w	8012f88 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	88db      	ldrh	r3, [r3, #6]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d02e      	beq.n	8012eb0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	b25b      	sxtb	r3, r3
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	da16      	bge.n	8012e8a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e62:	689b      	ldr	r3, [r3, #8]
 8012e64:	683a      	ldr	r2, [r7, #0]
 8012e66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012e68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012e6a:	683a      	ldr	r2, [r7, #0]
 8012e6c:	88d2      	ldrh	r2, [r2, #6]
 8012e6e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	88db      	ldrh	r3, [r3, #6]
 8012e74:	2b07      	cmp	r3, #7
 8012e76:	bf28      	it	cs
 8012e78:	2307      	movcs	r3, #7
 8012e7a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	89fa      	ldrh	r2, [r7, #14]
 8012e80:	4619      	mov	r1, r3
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f001 facf 	bl	8014426 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012e88:	e085      	b.n	8012f96 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	785a      	ldrb	r2, [r3, #1]
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	88db      	ldrh	r3, [r3, #6]
 8012e98:	b2da      	uxtb	r2, r3
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012ea0:	6939      	ldr	r1, [r7, #16]
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	88db      	ldrh	r3, [r3, #6]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f001 fae8 	bl	801447e <USBD_CtlPrepareRx>
      break;
 8012eae:	e072      	b.n	8012f96 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	683a      	ldr	r2, [r7, #0]
 8012eba:	7850      	ldrb	r0, [r2, #1]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	6839      	ldr	r1, [r7, #0]
 8012ec0:	4798      	blx	r3
      break;
 8012ec2:	e068      	b.n	8012f96 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	785b      	ldrb	r3, [r3, #1]
 8012ec8:	2b0b      	cmp	r3, #11
 8012eca:	d852      	bhi.n	8012f72 <USBD_CDC_Setup+0x162>
 8012ecc:	a201      	add	r2, pc, #4	; (adr r2, 8012ed4 <USBD_CDC_Setup+0xc4>)
 8012ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed2:	bf00      	nop
 8012ed4:	08012f05 	.word	0x08012f05
 8012ed8:	08012f81 	.word	0x08012f81
 8012edc:	08012f73 	.word	0x08012f73
 8012ee0:	08012f73 	.word	0x08012f73
 8012ee4:	08012f73 	.word	0x08012f73
 8012ee8:	08012f73 	.word	0x08012f73
 8012eec:	08012f73 	.word	0x08012f73
 8012ef0:	08012f73 	.word	0x08012f73
 8012ef4:	08012f73 	.word	0x08012f73
 8012ef8:	08012f73 	.word	0x08012f73
 8012efc:	08012f2f 	.word	0x08012f2f
 8012f00:	08012f59 	.word	0x08012f59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f0a:	b2db      	uxtb	r3, r3
 8012f0c:	2b03      	cmp	r3, #3
 8012f0e:	d107      	bne.n	8012f20 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012f10:	f107 030a 	add.w	r3, r7, #10
 8012f14:	2202      	movs	r2, #2
 8012f16:	4619      	mov	r1, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f001 fa84 	bl	8014426 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f1e:	e032      	b.n	8012f86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012f20:	6839      	ldr	r1, [r7, #0]
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f001 fa0e 	bl	8014344 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f28:	2303      	movs	r3, #3
 8012f2a:	75fb      	strb	r3, [r7, #23]
          break;
 8012f2c:	e02b      	b.n	8012f86 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	2b03      	cmp	r3, #3
 8012f38:	d107      	bne.n	8012f4a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f3a:	f107 030d 	add.w	r3, r7, #13
 8012f3e:	2201      	movs	r2, #1
 8012f40:	4619      	mov	r1, r3
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f001 fa6f 	bl	8014426 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f48:	e01d      	b.n	8012f86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012f4a:	6839      	ldr	r1, [r7, #0]
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f001 f9f9 	bl	8014344 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f52:	2303      	movs	r3, #3
 8012f54:	75fb      	strb	r3, [r7, #23]
          break;
 8012f56:	e016      	b.n	8012f86 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	2b03      	cmp	r3, #3
 8012f62:	d00f      	beq.n	8012f84 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012f64:	6839      	ldr	r1, [r7, #0]
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f001 f9ec 	bl	8014344 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f6c:	2303      	movs	r3, #3
 8012f6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012f70:	e008      	b.n	8012f84 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012f72:	6839      	ldr	r1, [r7, #0]
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f001 f9e5 	bl	8014344 <USBD_CtlError>
          ret = USBD_FAIL;
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8012f7e:	e002      	b.n	8012f86 <USBD_CDC_Setup+0x176>
          break;
 8012f80:	bf00      	nop
 8012f82:	e008      	b.n	8012f96 <USBD_CDC_Setup+0x186>
          break;
 8012f84:	bf00      	nop
      }
      break;
 8012f86:	e006      	b.n	8012f96 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012f88:	6839      	ldr	r1, [r7, #0]
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f001 f9da 	bl	8014344 <USBD_CtlError>
      ret = USBD_FAIL;
 8012f90:	2303      	movs	r3, #3
 8012f92:	75fb      	strb	r3, [r7, #23]
      break;
 8012f94:	bf00      	nop
  }

  return (uint8_t)ret;
 8012f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3718      	adds	r7, #24
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012fb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d101      	bne.n	8012fc2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012fbe:	2303      	movs	r3, #3
 8012fc0:	e04f      	b.n	8013062 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012fca:	78fa      	ldrb	r2, [r7, #3]
 8012fcc:	6879      	ldr	r1, [r7, #4]
 8012fce:	4613      	mov	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	4413      	add	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	440b      	add	r3, r1
 8012fd8:	3318      	adds	r3, #24
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d029      	beq.n	8013034 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012fe0:	78fa      	ldrb	r2, [r7, #3]
 8012fe2:	6879      	ldr	r1, [r7, #4]
 8012fe4:	4613      	mov	r3, r2
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	4413      	add	r3, r2
 8012fea:	009b      	lsls	r3, r3, #2
 8012fec:	440b      	add	r3, r1
 8012fee:	3318      	adds	r3, #24
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	78f9      	ldrb	r1, [r7, #3]
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	440b      	add	r3, r1
 8012ffc:	00db      	lsls	r3, r3, #3
 8012ffe:	4403      	add	r3, r0
 8013000:	3338      	adds	r3, #56	; 0x38
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	fbb2 f1f3 	udiv	r1, r2, r3
 8013008:	fb01 f303 	mul.w	r3, r1, r3
 801300c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801300e:	2b00      	cmp	r3, #0
 8013010:	d110      	bne.n	8013034 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8013012:	78fa      	ldrb	r2, [r7, #3]
 8013014:	6879      	ldr	r1, [r7, #4]
 8013016:	4613      	mov	r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	4413      	add	r3, r2
 801301c:	009b      	lsls	r3, r3, #2
 801301e:	440b      	add	r3, r1
 8013020:	3318      	adds	r3, #24
 8013022:	2200      	movs	r2, #0
 8013024:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013026:	78f9      	ldrb	r1, [r7, #3]
 8013028:	2300      	movs	r3, #0
 801302a:	2200      	movs	r2, #0
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f001 fee5 	bl	8014dfc <USBD_LL_Transmit>
 8013032:	e015      	b.n	8013060 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	2200      	movs	r2, #0
 8013038:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013042:	691b      	ldr	r3, [r3, #16]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d00b      	beq.n	8013060 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801304e:	691b      	ldr	r3, [r3, #16]
 8013050:	68ba      	ldr	r2, [r7, #8]
 8013052:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013056:	68ba      	ldr	r2, [r7, #8]
 8013058:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801305c:	78fa      	ldrb	r2, [r7, #3]
 801305e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013060:	2300      	movs	r3, #0
}
 8013062:	4618      	mov	r0, r3
 8013064:	3710      	adds	r7, #16
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}

0801306a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b084      	sub	sp, #16
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
 8013072:	460b      	mov	r3, r1
 8013074:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801307c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013084:	2b00      	cmp	r3, #0
 8013086:	d101      	bne.n	801308c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013088:	2303      	movs	r3, #3
 801308a:	e015      	b.n	80130b8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801308c:	78fb      	ldrb	r3, [r7, #3]
 801308e:	4619      	mov	r1, r3
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f001 fef5 	bl	8014e80 <USBD_LL_GetRxDataSize>
 8013096:	4602      	mov	r2, r0
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130a4:	68db      	ldr	r3, [r3, #12]
 80130a6:	68fa      	ldr	r2, [r7, #12]
 80130a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80130ac:	68fa      	ldr	r2, [r7, #12]
 80130ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80130b2:	4611      	mov	r1, r2
 80130b4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80130b6:	2300      	movs	r3, #0
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3710      	adds	r7, #16
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d101      	bne.n	80130da <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80130d6:	2303      	movs	r3, #3
 80130d8:	e01b      	b.n	8013112 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d015      	beq.n	8013110 <USBD_CDC_EP0_RxReady+0x50>
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80130ea:	2bff      	cmp	r3, #255	; 0xff
 80130ec:	d010      	beq.n	8013110 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130f4:	689b      	ldr	r3, [r3, #8]
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80130fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80130fe:	68fa      	ldr	r2, [r7, #12]
 8013100:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013104:	b292      	uxth	r2, r2
 8013106:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	22ff      	movs	r2, #255	; 0xff
 801310c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013110:	2300      	movs	r3, #0
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
	...

0801311c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801311c:	b480      	push	{r7}
 801311e:	b083      	sub	sp, #12
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2243      	movs	r2, #67	; 0x43
 8013128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801312a:	4b03      	ldr	r3, [pc, #12]	; (8013138 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801312c:	4618      	mov	r0, r3
 801312e:	370c      	adds	r7, #12
 8013130:	46bd      	mov	sp, r7
 8013132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013136:	4770      	bx	lr
 8013138:	20000094 	.word	0x20000094

0801313c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801313c:	b480      	push	{r7}
 801313e:	b083      	sub	sp, #12
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2243      	movs	r2, #67	; 0x43
 8013148:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801314a:	4b03      	ldr	r3, [pc, #12]	; (8013158 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801314c:	4618      	mov	r0, r3
 801314e:	370c      	adds	r7, #12
 8013150:	46bd      	mov	sp, r7
 8013152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013156:	4770      	bx	lr
 8013158:	20000050 	.word	0x20000050

0801315c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2243      	movs	r2, #67	; 0x43
 8013168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801316a:	4b03      	ldr	r3, [pc, #12]	; (8013178 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801316c:	4618      	mov	r0, r3
 801316e:	370c      	adds	r7, #12
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr
 8013178:	200000d8 	.word	0x200000d8

0801317c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801317c:	b480      	push	{r7}
 801317e:	b083      	sub	sp, #12
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	220a      	movs	r2, #10
 8013188:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801318a:	4b03      	ldr	r3, [pc, #12]	; (8013198 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801318c:	4618      	mov	r0, r3
 801318e:	370c      	adds	r7, #12
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr
 8013198:	2000000c 	.word	0x2000000c

0801319c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d101      	bne.n	80131b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80131ac:	2303      	movs	r3, #3
 80131ae:	e004      	b.n	80131ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	683a      	ldr	r2, [r7, #0]
 80131b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80131b8:	2300      	movs	r3, #0
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	370c      	adds	r7, #12
 80131be:	46bd      	mov	sp, r7
 80131c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c4:	4770      	bx	lr

080131c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80131c6:	b480      	push	{r7}
 80131c8:	b087      	sub	sp, #28
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	60f8      	str	r0, [r7, #12]
 80131ce:	60b9      	str	r1, [r7, #8]
 80131d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131d8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d101      	bne.n	80131e4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80131e0:	2303      	movs	r3, #3
 80131e2:	e008      	b.n	80131f6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80131f4:	2300      	movs	r3, #0
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	371c      	adds	r7, #28
 80131fa:	46bd      	mov	sp, r7
 80131fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013200:	4770      	bx	lr

08013202 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013202:	b480      	push	{r7}
 8013204:	b085      	sub	sp, #20
 8013206:	af00      	add	r7, sp, #0
 8013208:	6078      	str	r0, [r7, #4]
 801320a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013212:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d101      	bne.n	801321e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801321a:	2303      	movs	r3, #3
 801321c:	e004      	b.n	8013228 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013226:	2300      	movs	r3, #0
}
 8013228:	4618      	mov	r0, r3
 801322a:	3714      	adds	r7, #20
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr

08013234 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013242:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013244:	2301      	movs	r3, #1
 8013246:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801324e:	2b00      	cmp	r3, #0
 8013250:	d101      	bne.n	8013256 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013252:	2303      	movs	r3, #3
 8013254:	e01a      	b.n	801328c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801325c:	2b00      	cmp	r3, #0
 801325e:	d114      	bne.n	801328a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	2201      	movs	r2, #1
 8013264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801327e:	2181      	movs	r1, #129	; 0x81
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f001 fdbb 	bl	8014dfc <USBD_LL_Transmit>

    ret = USBD_OK;
 8013286:	2300      	movs	r3, #0
 8013288:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801328a:	7bfb      	ldrb	r3, [r7, #15]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b084      	sub	sp, #16
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d101      	bne.n	80132b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80132ae:	2303      	movs	r3, #3
 80132b0:	e016      	b.n	80132e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	7c1b      	ldrb	r3, [r3, #16]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d109      	bne.n	80132ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132c4:	2101      	movs	r1, #1
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f001 fdb9 	bl	8014e3e <USBD_LL_PrepareReceive>
 80132cc:	e007      	b.n	80132de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132d4:	2340      	movs	r3, #64	; 0x40
 80132d6:	2101      	movs	r1, #1
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f001 fdb0 	bl	8014e3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80132de:	2300      	movs	r3, #0
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3710      	adds	r7, #16
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b086      	sub	sp, #24
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	4613      	mov	r3, r2
 80132f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d101      	bne.n	8013300 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80132fc:	2303      	movs	r3, #3
 80132fe:	e01f      	b.n	8013340 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2200      	movs	r2, #0
 8013304:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2200      	movs	r2, #0
 801330c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2200      	movs	r2, #0
 8013314:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d003      	beq.n	8013326 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	68ba      	ldr	r2, [r7, #8]
 8013322:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2201      	movs	r2, #1
 801332a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	79fa      	ldrb	r2, [r7, #7]
 8013332:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013334:	68f8      	ldr	r0, [r7, #12]
 8013336:	f001 fc17 	bl	8014b68 <USBD_LL_Init>
 801333a:	4603      	mov	r3, r0
 801333c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801333e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013340:	4618      	mov	r0, r3
 8013342:	3718      	adds	r7, #24
 8013344:	46bd      	mov	sp, r7
 8013346:	bd80      	pop	{r7, pc}

08013348 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013352:	2300      	movs	r3, #0
 8013354:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d101      	bne.n	8013360 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801335c:	2303      	movs	r3, #3
 801335e:	e016      	b.n	801338e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	683a      	ldr	r2, [r7, #0]
 8013364:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00b      	beq.n	801338c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801337c:	f107 020e 	add.w	r2, r7, #14
 8013380:	4610      	mov	r0, r2
 8013382:	4798      	blx	r3
 8013384:	4602      	mov	r2, r0
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	4618      	mov	r0, r3
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013396:	b580      	push	{r7, lr}
 8013398:	b082      	sub	sp, #8
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f001 fc42 	bl	8014c28 <USBD_LL_Start>
 80133a4:	4603      	mov	r3, r0
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80133ae:	b480      	push	{r7}
 80133b0:	b083      	sub	sp, #12
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80133b6:	2300      	movs	r3, #0
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	370c      	adds	r7, #12
 80133bc:	46bd      	mov	sp, r7
 80133be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c2:	4770      	bx	lr

080133c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	460b      	mov	r3, r1
 80133ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80133d0:	2303      	movs	r3, #3
 80133d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d009      	beq.n	80133f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	78fa      	ldrb	r2, [r7, #3]
 80133e8:	4611      	mov	r1, r2
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	4798      	blx	r3
 80133ee:	4603      	mov	r3, r0
 80133f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80133f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3710      	adds	r7, #16
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	460b      	mov	r3, r1
 8013406:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801340e:	2b00      	cmp	r3, #0
 8013410:	d007      	beq.n	8013422 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	78fa      	ldrb	r2, [r7, #3]
 801341c:	4611      	mov	r1, r2
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	4798      	blx	r3
  }

  return USBD_OK;
 8013422:	2300      	movs	r3, #0
}
 8013424:	4618      	mov	r0, r3
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801343c:	6839      	ldr	r1, [r7, #0]
 801343e:	4618      	mov	r0, r3
 8013440:	f000 ff46 	bl	80142d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2201      	movs	r2, #1
 8013448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013452:	461a      	mov	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013460:	f003 031f 	and.w	r3, r3, #31
 8013464:	2b02      	cmp	r3, #2
 8013466:	d01a      	beq.n	801349e <USBD_LL_SetupStage+0x72>
 8013468:	2b02      	cmp	r3, #2
 801346a:	d822      	bhi.n	80134b2 <USBD_LL_SetupStage+0x86>
 801346c:	2b00      	cmp	r3, #0
 801346e:	d002      	beq.n	8013476 <USBD_LL_SetupStage+0x4a>
 8013470:	2b01      	cmp	r3, #1
 8013472:	d00a      	beq.n	801348a <USBD_LL_SetupStage+0x5e>
 8013474:	e01d      	b.n	80134b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801347c:	4619      	mov	r1, r3
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f9ee 	bl	8013860 <USBD_StdDevReq>
 8013484:	4603      	mov	r3, r0
 8013486:	73fb      	strb	r3, [r7, #15]
      break;
 8013488:	e020      	b.n	80134cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013490:	4619      	mov	r1, r3
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f000 fa52 	bl	801393c <USBD_StdItfReq>
 8013498:	4603      	mov	r3, r0
 801349a:	73fb      	strb	r3, [r7, #15]
      break;
 801349c:	e016      	b.n	80134cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80134a4:	4619      	mov	r1, r3
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f000 fa91 	bl	80139ce <USBD_StdEPReq>
 80134ac:	4603      	mov	r3, r0
 80134ae:	73fb      	strb	r3, [r7, #15]
      break;
 80134b0:	e00c      	b.n	80134cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80134b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	4619      	mov	r1, r3
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f001 fc11 	bl	8014ce8 <USBD_LL_StallEP>
 80134c6:	4603      	mov	r3, r0
 80134c8:	73fb      	strb	r3, [r7, #15]
      break;
 80134ca:	bf00      	nop
  }

  return ret;
 80134cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3710      	adds	r7, #16
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}

080134d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b086      	sub	sp, #24
 80134da:	af00      	add	r7, sp, #0
 80134dc:	60f8      	str	r0, [r7, #12]
 80134de:	460b      	mov	r3, r1
 80134e0:	607a      	str	r2, [r7, #4]
 80134e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80134e4:	7afb      	ldrb	r3, [r7, #11]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d138      	bne.n	801355c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80134f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80134f8:	2b03      	cmp	r3, #3
 80134fa:	d14a      	bne.n	8013592 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	689a      	ldr	r2, [r3, #8]
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	68db      	ldr	r3, [r3, #12]
 8013504:	429a      	cmp	r2, r3
 8013506:	d913      	bls.n	8013530 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	689a      	ldr	r2, [r3, #8]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	1ad2      	subs	r2, r2, r3
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	68da      	ldr	r2, [r3, #12]
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	4293      	cmp	r3, r2
 8013520:	bf28      	it	cs
 8013522:	4613      	movcs	r3, r2
 8013524:	461a      	mov	r2, r3
 8013526:	6879      	ldr	r1, [r7, #4]
 8013528:	68f8      	ldr	r0, [r7, #12]
 801352a:	f000 ffc5 	bl	80144b8 <USBD_CtlContinueRx>
 801352e:	e030      	b.n	8013592 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013536:	b2db      	uxtb	r3, r3
 8013538:	2b03      	cmp	r3, #3
 801353a:	d10b      	bne.n	8013554 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d005      	beq.n	8013554 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	68f8      	ldr	r0, [r7, #12]
 8013552:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013554:	68f8      	ldr	r0, [r7, #12]
 8013556:	f000 ffc0 	bl	80144da <USBD_CtlSendStatus>
 801355a:	e01a      	b.n	8013592 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013562:	b2db      	uxtb	r3, r3
 8013564:	2b03      	cmp	r3, #3
 8013566:	d114      	bne.n	8013592 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801356e:	699b      	ldr	r3, [r3, #24]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d00e      	beq.n	8013592 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801357a:	699b      	ldr	r3, [r3, #24]
 801357c:	7afa      	ldrb	r2, [r7, #11]
 801357e:	4611      	mov	r1, r2
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	4798      	blx	r3
 8013584:	4603      	mov	r3, r0
 8013586:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013588:	7dfb      	ldrb	r3, [r7, #23]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d001      	beq.n	8013592 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801358e:	7dfb      	ldrb	r3, [r7, #23]
 8013590:	e000      	b.n	8013594 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013592:	2300      	movs	r3, #0
}
 8013594:	4618      	mov	r0, r3
 8013596:	3718      	adds	r7, #24
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b086      	sub	sp, #24
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	460b      	mov	r3, r1
 80135a6:	607a      	str	r2, [r7, #4]
 80135a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80135aa:	7afb      	ldrb	r3, [r7, #11]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d16b      	bne.n	8013688 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	3314      	adds	r3, #20
 80135b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80135bc:	2b02      	cmp	r3, #2
 80135be:	d156      	bne.n	801366e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	689a      	ldr	r2, [r3, #8]
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d914      	bls.n	80135f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	689a      	ldr	r2, [r3, #8]
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	1ad2      	subs	r2, r2, r3
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	689b      	ldr	r3, [r3, #8]
 80135de:	461a      	mov	r2, r3
 80135e0:	6879      	ldr	r1, [r7, #4]
 80135e2:	68f8      	ldr	r0, [r7, #12]
 80135e4:	f000 ff3a 	bl	801445c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80135e8:	2300      	movs	r3, #0
 80135ea:	2200      	movs	r2, #0
 80135ec:	2100      	movs	r1, #0
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	f001 fc25 	bl	8014e3e <USBD_LL_PrepareReceive>
 80135f4:	e03b      	b.n	801366e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	68da      	ldr	r2, [r3, #12]
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	689b      	ldr	r3, [r3, #8]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d11c      	bne.n	801363c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	685a      	ldr	r2, [r3, #4]
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801360a:	429a      	cmp	r2, r3
 801360c:	d316      	bcc.n	801363c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	685a      	ldr	r2, [r3, #4]
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013618:	429a      	cmp	r2, r3
 801361a:	d20f      	bcs.n	801363c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801361c:	2200      	movs	r2, #0
 801361e:	2100      	movs	r1, #0
 8013620:	68f8      	ldr	r0, [r7, #12]
 8013622:	f000 ff1b 	bl	801445c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2200      	movs	r2, #0
 801362a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801362e:	2300      	movs	r3, #0
 8013630:	2200      	movs	r2, #0
 8013632:	2100      	movs	r1, #0
 8013634:	68f8      	ldr	r0, [r7, #12]
 8013636:	f001 fc02 	bl	8014e3e <USBD_LL_PrepareReceive>
 801363a:	e018      	b.n	801366e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013642:	b2db      	uxtb	r3, r3
 8013644:	2b03      	cmp	r3, #3
 8013646:	d10b      	bne.n	8013660 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d005      	beq.n	8013660 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	68f8      	ldr	r0, [r7, #12]
 801365e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013660:	2180      	movs	r1, #128	; 0x80
 8013662:	68f8      	ldr	r0, [r7, #12]
 8013664:	f001 fb40 	bl	8014ce8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f000 ff49 	bl	8014500 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013674:	2b01      	cmp	r3, #1
 8013676:	d122      	bne.n	80136be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013678:	68f8      	ldr	r0, [r7, #12]
 801367a:	f7ff fe98 	bl	80133ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2200      	movs	r2, #0
 8013682:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013686:	e01a      	b.n	80136be <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801368e:	b2db      	uxtb	r3, r3
 8013690:	2b03      	cmp	r3, #3
 8013692:	d114      	bne.n	80136be <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801369a:	695b      	ldr	r3, [r3, #20]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d00e      	beq.n	80136be <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136a6:	695b      	ldr	r3, [r3, #20]
 80136a8:	7afa      	ldrb	r2, [r7, #11]
 80136aa:	4611      	mov	r1, r2
 80136ac:	68f8      	ldr	r0, [r7, #12]
 80136ae:	4798      	blx	r3
 80136b0:	4603      	mov	r3, r0
 80136b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d001      	beq.n	80136be <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80136ba:	7dfb      	ldrb	r3, [r7, #23]
 80136bc:	e000      	b.n	80136c0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3718      	adds	r7, #24
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2201      	movs	r2, #1
 80136d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2200      	movs	r2, #0
 80136dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2200      	movs	r2, #0
 80136e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	2200      	movs	r2, #0
 80136ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d101      	bne.n	80136fc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80136f8:	2303      	movs	r3, #3
 80136fa:	e02f      	b.n	801375c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013702:	2b00      	cmp	r3, #0
 8013704:	d00f      	beq.n	8013726 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d009      	beq.n	8013726 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013718:	685b      	ldr	r3, [r3, #4]
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	6852      	ldr	r2, [r2, #4]
 801371e:	b2d2      	uxtb	r2, r2
 8013720:	4611      	mov	r1, r2
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013726:	2340      	movs	r3, #64	; 0x40
 8013728:	2200      	movs	r2, #0
 801372a:	2100      	movs	r1, #0
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f001 fa96 	bl	8014c5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2201      	movs	r2, #1
 8013736:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2240      	movs	r2, #64	; 0x40
 801373e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013742:	2340      	movs	r3, #64	; 0x40
 8013744:	2200      	movs	r2, #0
 8013746:	2180      	movs	r1, #128	; 0x80
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f001 fa88 	bl	8014c5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2201      	movs	r2, #1
 8013752:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2240      	movs	r2, #64	; 0x40
 8013758:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801375a:	2300      	movs	r3, #0
}
 801375c:	4618      	mov	r0, r3
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	460b      	mov	r3, r1
 801376e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	78fa      	ldrb	r2, [r7, #3]
 8013774:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013776:	2300      	movs	r3, #0
}
 8013778:	4618      	mov	r0, r3
 801377a:	370c      	adds	r7, #12
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013792:	b2da      	uxtb	r2, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2204      	movs	r2, #4
 801379e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80137a2:	2300      	movs	r3, #0
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80137b0:	b480      	push	{r7}
 80137b2:	b083      	sub	sp, #12
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	2b04      	cmp	r3, #4
 80137c2:	d106      	bne.n	80137d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80137ca:	b2da      	uxtb	r2, r3
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80137d2:	2300      	movs	r3, #0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d101      	bne.n	80137f6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80137f2:	2303      	movs	r3, #3
 80137f4:	e012      	b.n	801381c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	2b03      	cmp	r3, #3
 8013800:	d10b      	bne.n	801381a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013808:	69db      	ldr	r3, [r3, #28]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d005      	beq.n	801381a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013814:	69db      	ldr	r3, [r3, #28]
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801381a:	2300      	movs	r3, #0
}
 801381c:	4618      	mov	r0, r3
 801381e:	3708      	adds	r7, #8
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013824:	b480      	push	{r7}
 8013826:	b087      	sub	sp, #28
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	3301      	adds	r3, #1
 801383a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	781b      	ldrb	r3, [r3, #0]
 8013840:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013842:	8a3b      	ldrh	r3, [r7, #16]
 8013844:	021b      	lsls	r3, r3, #8
 8013846:	b21a      	sxth	r2, r3
 8013848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801384c:	4313      	orrs	r3, r2
 801384e:	b21b      	sxth	r3, r3
 8013850:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013852:	89fb      	ldrh	r3, [r7, #14]
}
 8013854:	4618      	mov	r0, r3
 8013856:	371c      	adds	r7, #28
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr

08013860 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b084      	sub	sp, #16
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801386a:	2300      	movs	r3, #0
 801386c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013876:	2b40      	cmp	r3, #64	; 0x40
 8013878:	d005      	beq.n	8013886 <USBD_StdDevReq+0x26>
 801387a:	2b40      	cmp	r3, #64	; 0x40
 801387c:	d853      	bhi.n	8013926 <USBD_StdDevReq+0xc6>
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00b      	beq.n	801389a <USBD_StdDevReq+0x3a>
 8013882:	2b20      	cmp	r3, #32
 8013884:	d14f      	bne.n	8013926 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801388c:	689b      	ldr	r3, [r3, #8]
 801388e:	6839      	ldr	r1, [r7, #0]
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	4798      	blx	r3
 8013894:	4603      	mov	r3, r0
 8013896:	73fb      	strb	r3, [r7, #15]
      break;
 8013898:	e04a      	b.n	8013930 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	785b      	ldrb	r3, [r3, #1]
 801389e:	2b09      	cmp	r3, #9
 80138a0:	d83b      	bhi.n	801391a <USBD_StdDevReq+0xba>
 80138a2:	a201      	add	r2, pc, #4	; (adr r2, 80138a8 <USBD_StdDevReq+0x48>)
 80138a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138a8:	080138fd 	.word	0x080138fd
 80138ac:	08013911 	.word	0x08013911
 80138b0:	0801391b 	.word	0x0801391b
 80138b4:	08013907 	.word	0x08013907
 80138b8:	0801391b 	.word	0x0801391b
 80138bc:	080138db 	.word	0x080138db
 80138c0:	080138d1 	.word	0x080138d1
 80138c4:	0801391b 	.word	0x0801391b
 80138c8:	080138f3 	.word	0x080138f3
 80138cc:	080138e5 	.word	0x080138e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80138d0:	6839      	ldr	r1, [r7, #0]
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f000 f9de 	bl	8013c94 <USBD_GetDescriptor>
          break;
 80138d8:	e024      	b.n	8013924 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80138da:	6839      	ldr	r1, [r7, #0]
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f000 fb6d 	bl	8013fbc <USBD_SetAddress>
          break;
 80138e2:	e01f      	b.n	8013924 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80138e4:	6839      	ldr	r1, [r7, #0]
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f000 fbac 	bl	8014044 <USBD_SetConfig>
 80138ec:	4603      	mov	r3, r0
 80138ee:	73fb      	strb	r3, [r7, #15]
          break;
 80138f0:	e018      	b.n	8013924 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80138f2:	6839      	ldr	r1, [r7, #0]
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f000 fc4b 	bl	8014190 <USBD_GetConfig>
          break;
 80138fa:	e013      	b.n	8013924 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80138fc:	6839      	ldr	r1, [r7, #0]
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f000 fc7c 	bl	80141fc <USBD_GetStatus>
          break;
 8013904:	e00e      	b.n	8013924 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013906:	6839      	ldr	r1, [r7, #0]
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f000 fcab 	bl	8014264 <USBD_SetFeature>
          break;
 801390e:	e009      	b.n	8013924 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013910:	6839      	ldr	r1, [r7, #0]
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f000 fcba 	bl	801428c <USBD_ClrFeature>
          break;
 8013918:	e004      	b.n	8013924 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f000 fd11 	bl	8014344 <USBD_CtlError>
          break;
 8013922:	bf00      	nop
      }
      break;
 8013924:	e004      	b.n	8013930 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013926:	6839      	ldr	r1, [r7, #0]
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f000 fd0b 	bl	8014344 <USBD_CtlError>
      break;
 801392e:	bf00      	nop
  }

  return ret;
 8013930:	7bfb      	ldrb	r3, [r7, #15]
}
 8013932:	4618      	mov	r0, r3
 8013934:	3710      	adds	r7, #16
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop

0801393c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b084      	sub	sp, #16
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013946:	2300      	movs	r3, #0
 8013948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013952:	2b40      	cmp	r3, #64	; 0x40
 8013954:	d005      	beq.n	8013962 <USBD_StdItfReq+0x26>
 8013956:	2b40      	cmp	r3, #64	; 0x40
 8013958:	d82f      	bhi.n	80139ba <USBD_StdItfReq+0x7e>
 801395a:	2b00      	cmp	r3, #0
 801395c:	d001      	beq.n	8013962 <USBD_StdItfReq+0x26>
 801395e:	2b20      	cmp	r3, #32
 8013960:	d12b      	bne.n	80139ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013968:	b2db      	uxtb	r3, r3
 801396a:	3b01      	subs	r3, #1
 801396c:	2b02      	cmp	r3, #2
 801396e:	d81d      	bhi.n	80139ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	889b      	ldrh	r3, [r3, #4]
 8013974:	b2db      	uxtb	r3, r3
 8013976:	2b01      	cmp	r3, #1
 8013978:	d813      	bhi.n	80139a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013980:	689b      	ldr	r3, [r3, #8]
 8013982:	6839      	ldr	r1, [r7, #0]
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	4798      	blx	r3
 8013988:	4603      	mov	r3, r0
 801398a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	88db      	ldrh	r3, [r3, #6]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d110      	bne.n	80139b6 <USBD_StdItfReq+0x7a>
 8013994:	7bfb      	ldrb	r3, [r7, #15]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10d      	bne.n	80139b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f000 fd9d 	bl	80144da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80139a0:	e009      	b.n	80139b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80139a2:	6839      	ldr	r1, [r7, #0]
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f000 fccd 	bl	8014344 <USBD_CtlError>
          break;
 80139aa:	e004      	b.n	80139b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80139ac:	6839      	ldr	r1, [r7, #0]
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f000 fcc8 	bl	8014344 <USBD_CtlError>
          break;
 80139b4:	e000      	b.n	80139b8 <USBD_StdItfReq+0x7c>
          break;
 80139b6:	bf00      	nop
      }
      break;
 80139b8:	e004      	b.n	80139c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80139ba:	6839      	ldr	r1, [r7, #0]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 fcc1 	bl	8014344 <USBD_CtlError>
      break;
 80139c2:	bf00      	nop
  }

  return ret;
 80139c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b084      	sub	sp, #16
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80139d8:	2300      	movs	r3, #0
 80139da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	889b      	ldrh	r3, [r3, #4]
 80139e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80139ea:	2b40      	cmp	r3, #64	; 0x40
 80139ec:	d007      	beq.n	80139fe <USBD_StdEPReq+0x30>
 80139ee:	2b40      	cmp	r3, #64	; 0x40
 80139f0:	f200 8145 	bhi.w	8013c7e <USBD_StdEPReq+0x2b0>
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00c      	beq.n	8013a12 <USBD_StdEPReq+0x44>
 80139f8:	2b20      	cmp	r3, #32
 80139fa:	f040 8140 	bne.w	8013c7e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a04:	689b      	ldr	r3, [r3, #8]
 8013a06:	6839      	ldr	r1, [r7, #0]
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	4798      	blx	r3
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8013a10:	e13a      	b.n	8013c88 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	785b      	ldrb	r3, [r3, #1]
 8013a16:	2b03      	cmp	r3, #3
 8013a18:	d007      	beq.n	8013a2a <USBD_StdEPReq+0x5c>
 8013a1a:	2b03      	cmp	r3, #3
 8013a1c:	f300 8129 	bgt.w	8013c72 <USBD_StdEPReq+0x2a4>
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d07f      	beq.n	8013b24 <USBD_StdEPReq+0x156>
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d03c      	beq.n	8013aa2 <USBD_StdEPReq+0xd4>
 8013a28:	e123      	b.n	8013c72 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	2b02      	cmp	r3, #2
 8013a34:	d002      	beq.n	8013a3c <USBD_StdEPReq+0x6e>
 8013a36:	2b03      	cmp	r3, #3
 8013a38:	d016      	beq.n	8013a68 <USBD_StdEPReq+0x9a>
 8013a3a:	e02c      	b.n	8013a96 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013a3c:	7bbb      	ldrb	r3, [r7, #14]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d00d      	beq.n	8013a5e <USBD_StdEPReq+0x90>
 8013a42:	7bbb      	ldrb	r3, [r7, #14]
 8013a44:	2b80      	cmp	r3, #128	; 0x80
 8013a46:	d00a      	beq.n	8013a5e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a48:	7bbb      	ldrb	r3, [r7, #14]
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f001 f94b 	bl	8014ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a52:	2180      	movs	r1, #128	; 0x80
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f001 f947 	bl	8014ce8 <USBD_LL_StallEP>
 8013a5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a5c:	e020      	b.n	8013aa0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013a5e:	6839      	ldr	r1, [r7, #0]
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f000 fc6f 	bl	8014344 <USBD_CtlError>
              break;
 8013a66:	e01b      	b.n	8013aa0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	885b      	ldrh	r3, [r3, #2]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d10e      	bne.n	8013a8e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013a70:	7bbb      	ldrb	r3, [r7, #14]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d00b      	beq.n	8013a8e <USBD_StdEPReq+0xc0>
 8013a76:	7bbb      	ldrb	r3, [r7, #14]
 8013a78:	2b80      	cmp	r3, #128	; 0x80
 8013a7a:	d008      	beq.n	8013a8e <USBD_StdEPReq+0xc0>
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	88db      	ldrh	r3, [r3, #6]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d104      	bne.n	8013a8e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a84:	7bbb      	ldrb	r3, [r7, #14]
 8013a86:	4619      	mov	r1, r3
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f001 f92d 	bl	8014ce8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 fd23 	bl	80144da <USBD_CtlSendStatus>

              break;
 8013a94:	e004      	b.n	8013aa0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013a96:	6839      	ldr	r1, [r7, #0]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fc53 	bl	8014344 <USBD_CtlError>
              break;
 8013a9e:	bf00      	nop
          }
          break;
 8013aa0:	e0ec      	b.n	8013c7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	2b02      	cmp	r3, #2
 8013aac:	d002      	beq.n	8013ab4 <USBD_StdEPReq+0xe6>
 8013aae:	2b03      	cmp	r3, #3
 8013ab0:	d016      	beq.n	8013ae0 <USBD_StdEPReq+0x112>
 8013ab2:	e030      	b.n	8013b16 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013ab4:	7bbb      	ldrb	r3, [r7, #14]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00d      	beq.n	8013ad6 <USBD_StdEPReq+0x108>
 8013aba:	7bbb      	ldrb	r3, [r7, #14]
 8013abc:	2b80      	cmp	r3, #128	; 0x80
 8013abe:	d00a      	beq.n	8013ad6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ac0:	7bbb      	ldrb	r3, [r7, #14]
 8013ac2:	4619      	mov	r1, r3
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f001 f90f 	bl	8014ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013aca:	2180      	movs	r1, #128	; 0x80
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f001 f90b 	bl	8014ce8 <USBD_LL_StallEP>
 8013ad2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ad4:	e025      	b.n	8013b22 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 fc33 	bl	8014344 <USBD_CtlError>
              break;
 8013ade:	e020      	b.n	8013b22 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	885b      	ldrh	r3, [r3, #2]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d11b      	bne.n	8013b20 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013ae8:	7bbb      	ldrb	r3, [r7, #14]
 8013aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d004      	beq.n	8013afc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013af2:	7bbb      	ldrb	r3, [r7, #14]
 8013af4:	4619      	mov	r1, r3
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f001 f915 	bl	8014d26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f000 fcec 	bl	80144da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b08:	689b      	ldr	r3, [r3, #8]
 8013b0a:	6839      	ldr	r1, [r7, #0]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	4798      	blx	r3
 8013b10:	4603      	mov	r3, r0
 8013b12:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013b14:	e004      	b.n	8013b20 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 fc13 	bl	8014344 <USBD_CtlError>
              break;
 8013b1e:	e000      	b.n	8013b22 <USBD_StdEPReq+0x154>
              break;
 8013b20:	bf00      	nop
          }
          break;
 8013b22:	e0ab      	b.n	8013c7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	2b02      	cmp	r3, #2
 8013b2e:	d002      	beq.n	8013b36 <USBD_StdEPReq+0x168>
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	d032      	beq.n	8013b9a <USBD_StdEPReq+0x1cc>
 8013b34:	e097      	b.n	8013c66 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b36:	7bbb      	ldrb	r3, [r7, #14]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d007      	beq.n	8013b4c <USBD_StdEPReq+0x17e>
 8013b3c:	7bbb      	ldrb	r3, [r7, #14]
 8013b3e:	2b80      	cmp	r3, #128	; 0x80
 8013b40:	d004      	beq.n	8013b4c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013b42:	6839      	ldr	r1, [r7, #0]
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f000 fbfd 	bl	8014344 <USBD_CtlError>
                break;
 8013b4a:	e091      	b.n	8013c70 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	da0b      	bge.n	8013b6c <USBD_StdEPReq+0x19e>
 8013b54:	7bbb      	ldrb	r3, [r7, #14]
 8013b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	009b      	lsls	r3, r3, #2
 8013b5e:	4413      	add	r3, r2
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	3310      	adds	r3, #16
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	4413      	add	r3, r2
 8013b68:	3304      	adds	r3, #4
 8013b6a:	e00b      	b.n	8013b84 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013b6c:	7bbb      	ldrb	r3, [r7, #14]
 8013b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b72:	4613      	mov	r3, r2
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	4413      	add	r3, r2
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	4413      	add	r3, r2
 8013b82:	3304      	adds	r3, #4
 8013b84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	2202      	movs	r2, #2
 8013b90:	4619      	mov	r1, r3
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f000 fc47 	bl	8014426 <USBD_CtlSendData>
              break;
 8013b98:	e06a      	b.n	8013c70 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013b9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	da11      	bge.n	8013bc6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013ba2:	7bbb      	ldrb	r3, [r7, #14]
 8013ba4:	f003 020f 	and.w	r2, r3, #15
 8013ba8:	6879      	ldr	r1, [r7, #4]
 8013baa:	4613      	mov	r3, r2
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	4413      	add	r3, r2
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	440b      	add	r3, r1
 8013bb4:	3324      	adds	r3, #36	; 0x24
 8013bb6:	881b      	ldrh	r3, [r3, #0]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d117      	bne.n	8013bec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013bbc:	6839      	ldr	r1, [r7, #0]
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f000 fbc0 	bl	8014344 <USBD_CtlError>
                  break;
 8013bc4:	e054      	b.n	8013c70 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013bc6:	7bbb      	ldrb	r3, [r7, #14]
 8013bc8:	f003 020f 	and.w	r2, r3, #15
 8013bcc:	6879      	ldr	r1, [r7, #4]
 8013bce:	4613      	mov	r3, r2
 8013bd0:	009b      	lsls	r3, r3, #2
 8013bd2:	4413      	add	r3, r2
 8013bd4:	009b      	lsls	r3, r3, #2
 8013bd6:	440b      	add	r3, r1
 8013bd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013bdc:	881b      	ldrh	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d104      	bne.n	8013bec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013be2:	6839      	ldr	r1, [r7, #0]
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 fbad 	bl	8014344 <USBD_CtlError>
                  break;
 8013bea:	e041      	b.n	8013c70 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	da0b      	bge.n	8013c0c <USBD_StdEPReq+0x23e>
 8013bf4:	7bbb      	ldrb	r3, [r7, #14]
 8013bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013bfa:	4613      	mov	r3, r2
 8013bfc:	009b      	lsls	r3, r3, #2
 8013bfe:	4413      	add	r3, r2
 8013c00:	009b      	lsls	r3, r3, #2
 8013c02:	3310      	adds	r3, #16
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	4413      	add	r3, r2
 8013c08:	3304      	adds	r3, #4
 8013c0a:	e00b      	b.n	8013c24 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013c0c:	7bbb      	ldrb	r3, [r7, #14]
 8013c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c12:	4613      	mov	r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4413      	add	r3, r2
 8013c18:	009b      	lsls	r3, r3, #2
 8013c1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	4413      	add	r3, r2
 8013c22:	3304      	adds	r3, #4
 8013c24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013c26:	7bbb      	ldrb	r3, [r7, #14]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d002      	beq.n	8013c32 <USBD_StdEPReq+0x264>
 8013c2c:	7bbb      	ldrb	r3, [r7, #14]
 8013c2e:	2b80      	cmp	r3, #128	; 0x80
 8013c30:	d103      	bne.n	8013c3a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	2200      	movs	r2, #0
 8013c36:	601a      	str	r2, [r3, #0]
 8013c38:	e00e      	b.n	8013c58 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013c3a:	7bbb      	ldrb	r3, [r7, #14]
 8013c3c:	4619      	mov	r1, r3
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f001 f890 	bl	8014d64 <USBD_LL_IsStallEP>
 8013c44:	4603      	mov	r3, r0
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d003      	beq.n	8013c52 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	601a      	str	r2, [r3, #0]
 8013c50:	e002      	b.n	8013c58 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	2200      	movs	r2, #0
 8013c56:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	2202      	movs	r2, #2
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f000 fbe1 	bl	8014426 <USBD_CtlSendData>
              break;
 8013c64:	e004      	b.n	8013c70 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013c66:	6839      	ldr	r1, [r7, #0]
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 fb6b 	bl	8014344 <USBD_CtlError>
              break;
 8013c6e:	bf00      	nop
          }
          break;
 8013c70:	e004      	b.n	8013c7c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013c72:	6839      	ldr	r1, [r7, #0]
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f000 fb65 	bl	8014344 <USBD_CtlError>
          break;
 8013c7a:	bf00      	nop
      }
      break;
 8013c7c:	e004      	b.n	8013c88 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013c7e:	6839      	ldr	r1, [r7, #0]
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f000 fb5f 	bl	8014344 <USBD_CtlError>
      break;
 8013c86:	bf00      	nop
  }

  return ret;
 8013c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
	...

08013c94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	885b      	ldrh	r3, [r3, #2]
 8013cae:	0a1b      	lsrs	r3, r3, #8
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	2b0e      	cmp	r3, #14
 8013cb6:	f200 8152 	bhi.w	8013f5e <USBD_GetDescriptor+0x2ca>
 8013cba:	a201      	add	r2, pc, #4	; (adr r2, 8013cc0 <USBD_GetDescriptor+0x2c>)
 8013cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cc0:	08013d31 	.word	0x08013d31
 8013cc4:	08013d49 	.word	0x08013d49
 8013cc8:	08013d89 	.word	0x08013d89
 8013ccc:	08013f5f 	.word	0x08013f5f
 8013cd0:	08013f5f 	.word	0x08013f5f
 8013cd4:	08013eff 	.word	0x08013eff
 8013cd8:	08013f2b 	.word	0x08013f2b
 8013cdc:	08013f5f 	.word	0x08013f5f
 8013ce0:	08013f5f 	.word	0x08013f5f
 8013ce4:	08013f5f 	.word	0x08013f5f
 8013ce8:	08013f5f 	.word	0x08013f5f
 8013cec:	08013f5f 	.word	0x08013f5f
 8013cf0:	08013f5f 	.word	0x08013f5f
 8013cf4:	08013f5f 	.word	0x08013f5f
 8013cf8:	08013cfd 	.word	0x08013cfd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d02:	69db      	ldr	r3, [r3, #28]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00b      	beq.n	8013d20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d0e:	69db      	ldr	r3, [r3, #28]
 8013d10:	687a      	ldr	r2, [r7, #4]
 8013d12:	7c12      	ldrb	r2, [r2, #16]
 8013d14:	f107 0108 	add.w	r1, r7, #8
 8013d18:	4610      	mov	r0, r2
 8013d1a:	4798      	blx	r3
 8013d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013d1e:	e126      	b.n	8013f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013d20:	6839      	ldr	r1, [r7, #0]
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f000 fb0e 	bl	8014344 <USBD_CtlError>
        err++;
 8013d28:	7afb      	ldrb	r3, [r7, #11]
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8013d2e:	e11e      	b.n	8013f6e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	7c12      	ldrb	r2, [r2, #16]
 8013d3c:	f107 0108 	add.w	r1, r7, #8
 8013d40:	4610      	mov	r0, r2
 8013d42:	4798      	blx	r3
 8013d44:	60f8      	str	r0, [r7, #12]
      break;
 8013d46:	e112      	b.n	8013f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	7c1b      	ldrb	r3, [r3, #16]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d10d      	bne.n	8013d6c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d58:	f107 0208 	add.w	r2, r7, #8
 8013d5c:	4610      	mov	r0, r2
 8013d5e:	4798      	blx	r3
 8013d60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	3301      	adds	r3, #1
 8013d66:	2202      	movs	r2, #2
 8013d68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013d6a:	e100      	b.n	8013f6e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d74:	f107 0208 	add.w	r2, r7, #8
 8013d78:	4610      	mov	r0, r2
 8013d7a:	4798      	blx	r3
 8013d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	3301      	adds	r3, #1
 8013d82:	2202      	movs	r2, #2
 8013d84:	701a      	strb	r2, [r3, #0]
      break;
 8013d86:	e0f2      	b.n	8013f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	885b      	ldrh	r3, [r3, #2]
 8013d8c:	b2db      	uxtb	r3, r3
 8013d8e:	2b05      	cmp	r3, #5
 8013d90:	f200 80ac 	bhi.w	8013eec <USBD_GetDescriptor+0x258>
 8013d94:	a201      	add	r2, pc, #4	; (adr r2, 8013d9c <USBD_GetDescriptor+0x108>)
 8013d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d9a:	bf00      	nop
 8013d9c:	08013db5 	.word	0x08013db5
 8013da0:	08013de9 	.word	0x08013de9
 8013da4:	08013e1d 	.word	0x08013e1d
 8013da8:	08013e51 	.word	0x08013e51
 8013dac:	08013e85 	.word	0x08013e85
 8013db0:	08013eb9 	.word	0x08013eb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d00b      	beq.n	8013dd8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	7c12      	ldrb	r2, [r2, #16]
 8013dcc:	f107 0108 	add.w	r1, r7, #8
 8013dd0:	4610      	mov	r0, r2
 8013dd2:	4798      	blx	r3
 8013dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dd6:	e091      	b.n	8013efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013dd8:	6839      	ldr	r1, [r7, #0]
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f000 fab2 	bl	8014344 <USBD_CtlError>
            err++;
 8013de0:	7afb      	ldrb	r3, [r7, #11]
 8013de2:	3301      	adds	r3, #1
 8013de4:	72fb      	strb	r3, [r7, #11]
          break;
 8013de6:	e089      	b.n	8013efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d00b      	beq.n	8013e0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	7c12      	ldrb	r2, [r2, #16]
 8013e00:	f107 0108 	add.w	r1, r7, #8
 8013e04:	4610      	mov	r0, r2
 8013e06:	4798      	blx	r3
 8013e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e0a:	e077      	b.n	8013efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e0c:	6839      	ldr	r1, [r7, #0]
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f000 fa98 	bl	8014344 <USBD_CtlError>
            err++;
 8013e14:	7afb      	ldrb	r3, [r7, #11]
 8013e16:	3301      	adds	r3, #1
 8013e18:	72fb      	strb	r3, [r7, #11]
          break;
 8013e1a:	e06f      	b.n	8013efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d00b      	beq.n	8013e40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e2e:	68db      	ldr	r3, [r3, #12]
 8013e30:	687a      	ldr	r2, [r7, #4]
 8013e32:	7c12      	ldrb	r2, [r2, #16]
 8013e34:	f107 0108 	add.w	r1, r7, #8
 8013e38:	4610      	mov	r0, r2
 8013e3a:	4798      	blx	r3
 8013e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e3e:	e05d      	b.n	8013efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e40:	6839      	ldr	r1, [r7, #0]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 fa7e 	bl	8014344 <USBD_CtlError>
            err++;
 8013e48:	7afb      	ldrb	r3, [r7, #11]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8013e4e:	e055      	b.n	8013efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e56:	691b      	ldr	r3, [r3, #16]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d00b      	beq.n	8013e74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e62:	691b      	ldr	r3, [r3, #16]
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	7c12      	ldrb	r2, [r2, #16]
 8013e68:	f107 0108 	add.w	r1, r7, #8
 8013e6c:	4610      	mov	r0, r2
 8013e6e:	4798      	blx	r3
 8013e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e72:	e043      	b.n	8013efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e74:	6839      	ldr	r1, [r7, #0]
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f000 fa64 	bl	8014344 <USBD_CtlError>
            err++;
 8013e7c:	7afb      	ldrb	r3, [r7, #11]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	72fb      	strb	r3, [r7, #11]
          break;
 8013e82:	e03b      	b.n	8013efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e8a:	695b      	ldr	r3, [r3, #20]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00b      	beq.n	8013ea8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e96:	695b      	ldr	r3, [r3, #20]
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	7c12      	ldrb	r2, [r2, #16]
 8013e9c:	f107 0108 	add.w	r1, r7, #8
 8013ea0:	4610      	mov	r0, r2
 8013ea2:	4798      	blx	r3
 8013ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ea6:	e029      	b.n	8013efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ea8:	6839      	ldr	r1, [r7, #0]
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f000 fa4a 	bl	8014344 <USBD_CtlError>
            err++;
 8013eb0:	7afb      	ldrb	r3, [r7, #11]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8013eb6:	e021      	b.n	8013efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ebe:	699b      	ldr	r3, [r3, #24]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d00b      	beq.n	8013edc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eca:	699b      	ldr	r3, [r3, #24]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	7c12      	ldrb	r2, [r2, #16]
 8013ed0:	f107 0108 	add.w	r1, r7, #8
 8013ed4:	4610      	mov	r0, r2
 8013ed6:	4798      	blx	r3
 8013ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013eda:	e00f      	b.n	8013efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013edc:	6839      	ldr	r1, [r7, #0]
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f000 fa30 	bl	8014344 <USBD_CtlError>
            err++;
 8013ee4:	7afb      	ldrb	r3, [r7, #11]
 8013ee6:	3301      	adds	r3, #1
 8013ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8013eea:	e007      	b.n	8013efc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013eec:	6839      	ldr	r1, [r7, #0]
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f000 fa28 	bl	8014344 <USBD_CtlError>
          err++;
 8013ef4:	7afb      	ldrb	r3, [r7, #11]
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013efa:	bf00      	nop
      }
      break;
 8013efc:	e037      	b.n	8013f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	7c1b      	ldrb	r3, [r3, #16]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d109      	bne.n	8013f1a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f0e:	f107 0208 	add.w	r2, r7, #8
 8013f12:	4610      	mov	r0, r2
 8013f14:	4798      	blx	r3
 8013f16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f18:	e029      	b.n	8013f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f1a:	6839      	ldr	r1, [r7, #0]
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f000 fa11 	bl	8014344 <USBD_CtlError>
        err++;
 8013f22:	7afb      	ldrb	r3, [r7, #11]
 8013f24:	3301      	adds	r3, #1
 8013f26:	72fb      	strb	r3, [r7, #11]
      break;
 8013f28:	e021      	b.n	8013f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	7c1b      	ldrb	r3, [r3, #16]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10d      	bne.n	8013f4e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f3a:	f107 0208 	add.w	r2, r7, #8
 8013f3e:	4610      	mov	r0, r2
 8013f40:	4798      	blx	r3
 8013f42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	3301      	adds	r3, #1
 8013f48:	2207      	movs	r2, #7
 8013f4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f4c:	e00f      	b.n	8013f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f4e:	6839      	ldr	r1, [r7, #0]
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f000 f9f7 	bl	8014344 <USBD_CtlError>
        err++;
 8013f56:	7afb      	ldrb	r3, [r7, #11]
 8013f58:	3301      	adds	r3, #1
 8013f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8013f5c:	e007      	b.n	8013f6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013f5e:	6839      	ldr	r1, [r7, #0]
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f000 f9ef 	bl	8014344 <USBD_CtlError>
      err++;
 8013f66:	7afb      	ldrb	r3, [r7, #11]
 8013f68:	3301      	adds	r3, #1
 8013f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8013f6c:	bf00      	nop
  }

  if (err != 0U)
 8013f6e:	7afb      	ldrb	r3, [r7, #11]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d11e      	bne.n	8013fb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	88db      	ldrh	r3, [r3, #6]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d016      	beq.n	8013faa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013f7c:	893b      	ldrh	r3, [r7, #8]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d00e      	beq.n	8013fa0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	88da      	ldrh	r2, [r3, #6]
 8013f86:	893b      	ldrh	r3, [r7, #8]
 8013f88:	4293      	cmp	r3, r2
 8013f8a:	bf28      	it	cs
 8013f8c:	4613      	movcs	r3, r2
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013f92:	893b      	ldrh	r3, [r7, #8]
 8013f94:	461a      	mov	r2, r3
 8013f96:	68f9      	ldr	r1, [r7, #12]
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f000 fa44 	bl	8014426 <USBD_CtlSendData>
 8013f9e:	e009      	b.n	8013fb4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013fa0:	6839      	ldr	r1, [r7, #0]
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f000 f9ce 	bl	8014344 <USBD_CtlError>
 8013fa8:	e004      	b.n	8013fb4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f000 fa95 	bl	80144da <USBD_CtlSendStatus>
 8013fb0:	e000      	b.n	8013fb4 <USBD_GetDescriptor+0x320>
    return;
 8013fb2:	bf00      	nop
  }
}
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop

08013fbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	889b      	ldrh	r3, [r3, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d131      	bne.n	8014032 <USBD_SetAddress+0x76>
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	88db      	ldrh	r3, [r3, #6]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d12d      	bne.n	8014032 <USBD_SetAddress+0x76>
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	885b      	ldrh	r3, [r3, #2]
 8013fda:	2b7f      	cmp	r3, #127	; 0x7f
 8013fdc:	d829      	bhi.n	8014032 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	885b      	ldrh	r3, [r3, #2]
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ff0:	b2db      	uxtb	r3, r3
 8013ff2:	2b03      	cmp	r3, #3
 8013ff4:	d104      	bne.n	8014000 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013ff6:	6839      	ldr	r1, [r7, #0]
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f000 f9a3 	bl	8014344 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ffe:	e01d      	b.n	801403c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	7bfa      	ldrb	r2, [r7, #15]
 8014004:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014008:	7bfb      	ldrb	r3, [r7, #15]
 801400a:	4619      	mov	r1, r3
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 fed6 	bl	8014dbe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f000 fa61 	bl	80144da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014018:	7bfb      	ldrb	r3, [r7, #15]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d004      	beq.n	8014028 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2202      	movs	r2, #2
 8014022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014026:	e009      	b.n	801403c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2201      	movs	r2, #1
 801402c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014030:	e004      	b.n	801403c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f000 f985 	bl	8014344 <USBD_CtlError>
  }
}
 801403a:	bf00      	nop
 801403c:	bf00      	nop
 801403e:	3710      	adds	r7, #16
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b084      	sub	sp, #16
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801404e:	2300      	movs	r3, #0
 8014050:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	885b      	ldrh	r3, [r3, #2]
 8014056:	b2da      	uxtb	r2, r3
 8014058:	4b4c      	ldr	r3, [pc, #304]	; (801418c <USBD_SetConfig+0x148>)
 801405a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801405c:	4b4b      	ldr	r3, [pc, #300]	; (801418c <USBD_SetConfig+0x148>)
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d905      	bls.n	8014070 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014064:	6839      	ldr	r1, [r7, #0]
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 f96c 	bl	8014344 <USBD_CtlError>
    return USBD_FAIL;
 801406c:	2303      	movs	r3, #3
 801406e:	e088      	b.n	8014182 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014076:	b2db      	uxtb	r3, r3
 8014078:	2b02      	cmp	r3, #2
 801407a:	d002      	beq.n	8014082 <USBD_SetConfig+0x3e>
 801407c:	2b03      	cmp	r3, #3
 801407e:	d025      	beq.n	80140cc <USBD_SetConfig+0x88>
 8014080:	e071      	b.n	8014166 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014082:	4b42      	ldr	r3, [pc, #264]	; (801418c <USBD_SetConfig+0x148>)
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d01c      	beq.n	80140c4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801408a:	4b40      	ldr	r3, [pc, #256]	; (801418c <USBD_SetConfig+0x148>)
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	461a      	mov	r2, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014094:	4b3d      	ldr	r3, [pc, #244]	; (801418c <USBD_SetConfig+0x148>)
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	4619      	mov	r1, r3
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f7ff f992 	bl	80133c4 <USBD_SetClassConfig>
 80140a0:	4603      	mov	r3, r0
 80140a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80140a4:	7bfb      	ldrb	r3, [r7, #15]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d004      	beq.n	80140b4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80140aa:	6839      	ldr	r1, [r7, #0]
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f000 f949 	bl	8014344 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80140b2:	e065      	b.n	8014180 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f000 fa10 	bl	80144da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2203      	movs	r2, #3
 80140be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80140c2:	e05d      	b.n	8014180 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 fa08 	bl	80144da <USBD_CtlSendStatus>
      break;
 80140ca:	e059      	b.n	8014180 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80140cc:	4b2f      	ldr	r3, [pc, #188]	; (801418c <USBD_SetConfig+0x148>)
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d112      	bne.n	80140fa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2202      	movs	r2, #2
 80140d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80140dc:	4b2b      	ldr	r3, [pc, #172]	; (801418c <USBD_SetConfig+0x148>)
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	461a      	mov	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80140e6:	4b29      	ldr	r3, [pc, #164]	; (801418c <USBD_SetConfig+0x148>)
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	4619      	mov	r1, r3
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f7ff f985 	bl	80133fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 f9f1 	bl	80144da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80140f8:	e042      	b.n	8014180 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80140fa:	4b24      	ldr	r3, [pc, #144]	; (801418c <USBD_SetConfig+0x148>)
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	461a      	mov	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	429a      	cmp	r2, r3
 8014106:	d02a      	beq.n	801415e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	685b      	ldr	r3, [r3, #4]
 801410c:	b2db      	uxtb	r3, r3
 801410e:	4619      	mov	r1, r3
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f7ff f973 	bl	80133fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014116:	4b1d      	ldr	r3, [pc, #116]	; (801418c <USBD_SetConfig+0x148>)
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	461a      	mov	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014120:	4b1a      	ldr	r3, [pc, #104]	; (801418c <USBD_SetConfig+0x148>)
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	4619      	mov	r1, r3
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f7ff f94c 	bl	80133c4 <USBD_SetClassConfig>
 801412c:	4603      	mov	r3, r0
 801412e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014130:	7bfb      	ldrb	r3, [r7, #15]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d00f      	beq.n	8014156 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f000 f903 	bl	8014344 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	685b      	ldr	r3, [r3, #4]
 8014142:	b2db      	uxtb	r3, r3
 8014144:	4619      	mov	r1, r3
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f7ff f958 	bl	80133fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2202      	movs	r2, #2
 8014150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014154:	e014      	b.n	8014180 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 f9bf 	bl	80144da <USBD_CtlSendStatus>
      break;
 801415c:	e010      	b.n	8014180 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f000 f9bb 	bl	80144da <USBD_CtlSendStatus>
      break;
 8014164:	e00c      	b.n	8014180 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014166:	6839      	ldr	r1, [r7, #0]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 f8eb 	bl	8014344 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801416e:	4b07      	ldr	r3, [pc, #28]	; (801418c <USBD_SetConfig+0x148>)
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	4619      	mov	r1, r3
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7ff f941 	bl	80133fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801417a:	2303      	movs	r3, #3
 801417c:	73fb      	strb	r3, [r7, #15]
      break;
 801417e:	bf00      	nop
  }

  return ret;
 8014180:	7bfb      	ldrb	r3, [r7, #15]
}
 8014182:	4618      	mov	r0, r3
 8014184:	3710      	adds	r7, #16
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	20000aa8 	.word	0x20000aa8

08014190 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	88db      	ldrh	r3, [r3, #6]
 801419e:	2b01      	cmp	r3, #1
 80141a0:	d004      	beq.n	80141ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80141a2:	6839      	ldr	r1, [r7, #0]
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f000 f8cd 	bl	8014344 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80141aa:	e023      	b.n	80141f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	2b02      	cmp	r3, #2
 80141b6:	dc02      	bgt.n	80141be <USBD_GetConfig+0x2e>
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	dc03      	bgt.n	80141c4 <USBD_GetConfig+0x34>
 80141bc:	e015      	b.n	80141ea <USBD_GetConfig+0x5a>
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d00b      	beq.n	80141da <USBD_GetConfig+0x4a>
 80141c2:	e012      	b.n	80141ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2200      	movs	r2, #0
 80141c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	3308      	adds	r3, #8
 80141ce:	2201      	movs	r2, #1
 80141d0:	4619      	mov	r1, r3
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f000 f927 	bl	8014426 <USBD_CtlSendData>
        break;
 80141d8:	e00c      	b.n	80141f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	3304      	adds	r3, #4
 80141de:	2201      	movs	r2, #1
 80141e0:	4619      	mov	r1, r3
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f000 f91f 	bl	8014426 <USBD_CtlSendData>
        break;
 80141e8:	e004      	b.n	80141f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80141ea:	6839      	ldr	r1, [r7, #0]
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f000 f8a9 	bl	8014344 <USBD_CtlError>
        break;
 80141f2:	bf00      	nop
}
 80141f4:	bf00      	nop
 80141f6:	3708      	adds	r7, #8
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}

080141fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801420c:	b2db      	uxtb	r3, r3
 801420e:	3b01      	subs	r3, #1
 8014210:	2b02      	cmp	r3, #2
 8014212:	d81e      	bhi.n	8014252 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	88db      	ldrh	r3, [r3, #6]
 8014218:	2b02      	cmp	r3, #2
 801421a:	d004      	beq.n	8014226 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 f890 	bl	8014344 <USBD_CtlError>
        break;
 8014224:	e01a      	b.n	801425c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2201      	movs	r2, #1
 801422a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014232:	2b00      	cmp	r3, #0
 8014234:	d005      	beq.n	8014242 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	68db      	ldr	r3, [r3, #12]
 801423a:	f043 0202 	orr.w	r2, r3, #2
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	330c      	adds	r3, #12
 8014246:	2202      	movs	r2, #2
 8014248:	4619      	mov	r1, r3
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f000 f8eb 	bl	8014426 <USBD_CtlSendData>
      break;
 8014250:	e004      	b.n	801425c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014252:	6839      	ldr	r1, [r7, #0]
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f000 f875 	bl	8014344 <USBD_CtlError>
      break;
 801425a:	bf00      	nop
  }
}
 801425c:	bf00      	nop
 801425e:	3708      	adds	r7, #8
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	885b      	ldrh	r3, [r3, #2]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d106      	bne.n	8014284 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2201      	movs	r2, #1
 801427a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 f92b 	bl	80144da <USBD_CtlSendStatus>
  }
}
 8014284:	bf00      	nop
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801429c:	b2db      	uxtb	r3, r3
 801429e:	3b01      	subs	r3, #1
 80142a0:	2b02      	cmp	r3, #2
 80142a2:	d80b      	bhi.n	80142bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	885b      	ldrh	r3, [r3, #2]
 80142a8:	2b01      	cmp	r3, #1
 80142aa:	d10c      	bne.n	80142c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2200      	movs	r2, #0
 80142b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f000 f910 	bl	80144da <USBD_CtlSendStatus>
      }
      break;
 80142ba:	e004      	b.n	80142c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 f840 	bl	8014344 <USBD_CtlError>
      break;
 80142c4:	e000      	b.n	80142c8 <USBD_ClrFeature+0x3c>
      break;
 80142c6:	bf00      	nop
  }
}
 80142c8:	bf00      	nop
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	781a      	ldrb	r2, [r3, #0]
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	3301      	adds	r3, #1
 80142ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	781a      	ldrb	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	3301      	adds	r3, #1
 80142f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80142fa:	68f8      	ldr	r0, [r7, #12]
 80142fc:	f7ff fa92 	bl	8013824 <SWAPBYTE>
 8014300:	4603      	mov	r3, r0
 8014302:	461a      	mov	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	3301      	adds	r3, #1
 801430c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	3301      	adds	r3, #1
 8014312:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014314:	68f8      	ldr	r0, [r7, #12]
 8014316:	f7ff fa85 	bl	8013824 <SWAPBYTE>
 801431a:	4603      	mov	r3, r0
 801431c:	461a      	mov	r2, r3
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	3301      	adds	r3, #1
 8014326:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	3301      	adds	r3, #1
 801432c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801432e:	68f8      	ldr	r0, [r7, #12]
 8014330:	f7ff fa78 	bl	8013824 <SWAPBYTE>
 8014334:	4603      	mov	r3, r0
 8014336:	461a      	mov	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	80da      	strh	r2, [r3, #6]
}
 801433c:	bf00      	nop
 801433e:	3710      	adds	r7, #16
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}

08014344 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b082      	sub	sp, #8
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801434e:	2180      	movs	r1, #128	; 0x80
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f000 fcc9 	bl	8014ce8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014356:	2100      	movs	r1, #0
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f000 fcc5 	bl	8014ce8 <USBD_LL_StallEP>
}
 801435e:	bf00      	nop
 8014360:	3708      	adds	r7, #8
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}

08014366 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014366:	b580      	push	{r7, lr}
 8014368:	b086      	sub	sp, #24
 801436a:	af00      	add	r7, sp, #0
 801436c:	60f8      	str	r0, [r7, #12]
 801436e:	60b9      	str	r1, [r7, #8]
 8014370:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014372:	2300      	movs	r3, #0
 8014374:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d036      	beq.n	80143ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014380:	6938      	ldr	r0, [r7, #16]
 8014382:	f000 f836 	bl	80143f2 <USBD_GetLen>
 8014386:	4603      	mov	r3, r0
 8014388:	3301      	adds	r3, #1
 801438a:	b29b      	uxth	r3, r3
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	b29a      	uxth	r2, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014394:	7dfb      	ldrb	r3, [r7, #23]
 8014396:	68ba      	ldr	r2, [r7, #8]
 8014398:	4413      	add	r3, r2
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	7812      	ldrb	r2, [r2, #0]
 801439e:	701a      	strb	r2, [r3, #0]
  idx++;
 80143a0:	7dfb      	ldrb	r3, [r7, #23]
 80143a2:	3301      	adds	r3, #1
 80143a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80143a6:	7dfb      	ldrb	r3, [r7, #23]
 80143a8:	68ba      	ldr	r2, [r7, #8]
 80143aa:	4413      	add	r3, r2
 80143ac:	2203      	movs	r2, #3
 80143ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80143b0:	7dfb      	ldrb	r3, [r7, #23]
 80143b2:	3301      	adds	r3, #1
 80143b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80143b6:	e013      	b.n	80143e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80143b8:	7dfb      	ldrb	r3, [r7, #23]
 80143ba:	68ba      	ldr	r2, [r7, #8]
 80143bc:	4413      	add	r3, r2
 80143be:	693a      	ldr	r2, [r7, #16]
 80143c0:	7812      	ldrb	r2, [r2, #0]
 80143c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	3301      	adds	r3, #1
 80143c8:	613b      	str	r3, [r7, #16]
    idx++;
 80143ca:	7dfb      	ldrb	r3, [r7, #23]
 80143cc:	3301      	adds	r3, #1
 80143ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80143d0:	7dfb      	ldrb	r3, [r7, #23]
 80143d2:	68ba      	ldr	r2, [r7, #8]
 80143d4:	4413      	add	r3, r2
 80143d6:	2200      	movs	r2, #0
 80143d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80143da:	7dfb      	ldrb	r3, [r7, #23]
 80143dc:	3301      	adds	r3, #1
 80143de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d1e7      	bne.n	80143b8 <USBD_GetString+0x52>
 80143e8:	e000      	b.n	80143ec <USBD_GetString+0x86>
    return;
 80143ea:	bf00      	nop
  }
}
 80143ec:	3718      	adds	r7, #24
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}

080143f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80143f2:	b480      	push	{r7}
 80143f4:	b085      	sub	sp, #20
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80143fa:	2300      	movs	r3, #0
 80143fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014402:	e005      	b.n	8014410 <USBD_GetLen+0x1e>
  {
    len++;
 8014404:	7bfb      	ldrb	r3, [r7, #15]
 8014406:	3301      	adds	r3, #1
 8014408:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	3301      	adds	r3, #1
 801440e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d1f5      	bne.n	8014404 <USBD_GetLen+0x12>
  }

  return len;
 8014418:	7bfb      	ldrb	r3, [r7, #15]
}
 801441a:	4618      	mov	r0, r3
 801441c:	3714      	adds	r7, #20
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr

08014426 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014426:	b580      	push	{r7, lr}
 8014428:	b084      	sub	sp, #16
 801442a:	af00      	add	r7, sp, #0
 801442c:	60f8      	str	r0, [r7, #12]
 801442e:	60b9      	str	r1, [r7, #8]
 8014430:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	2202      	movs	r2, #2
 8014436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	68ba      	ldr	r2, [r7, #8]
 801444a:	2100      	movs	r1, #0
 801444c:	68f8      	ldr	r0, [r7, #12]
 801444e:	f000 fcd5 	bl	8014dfc <USBD_LL_Transmit>

  return USBD_OK;
 8014452:	2300      	movs	r3, #0
}
 8014454:	4618      	mov	r0, r3
 8014456:	3710      	adds	r7, #16
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b084      	sub	sp, #16
 8014460:	af00      	add	r7, sp, #0
 8014462:	60f8      	str	r0, [r7, #12]
 8014464:	60b9      	str	r1, [r7, #8]
 8014466:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	68ba      	ldr	r2, [r7, #8]
 801446c:	2100      	movs	r1, #0
 801446e:	68f8      	ldr	r0, [r7, #12]
 8014470:	f000 fcc4 	bl	8014dfc <USBD_LL_Transmit>

  return USBD_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3710      	adds	r7, #16
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}

0801447e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801447e:	b580      	push	{r7, lr}
 8014480:	b084      	sub	sp, #16
 8014482:	af00      	add	r7, sp, #0
 8014484:	60f8      	str	r0, [r7, #12]
 8014486:	60b9      	str	r1, [r7, #8]
 8014488:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2203      	movs	r2, #3
 801448e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	687a      	ldr	r2, [r7, #4]
 8014496:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	687a      	ldr	r2, [r7, #4]
 801449e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	68ba      	ldr	r2, [r7, #8]
 80144a6:	2100      	movs	r1, #0
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f000 fcc8 	bl	8014e3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144ae:	2300      	movs	r3, #0
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3710      	adds	r7, #16
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	68ba      	ldr	r2, [r7, #8]
 80144c8:	2100      	movs	r1, #0
 80144ca:	68f8      	ldr	r0, [r7, #12]
 80144cc:	f000 fcb7 	bl	8014e3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144d0:	2300      	movs	r3, #0
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	3710      	adds	r7, #16
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}

080144da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80144da:	b580      	push	{r7, lr}
 80144dc:	b082      	sub	sp, #8
 80144de:	af00      	add	r7, sp, #0
 80144e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2204      	movs	r2, #4
 80144e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80144ea:	2300      	movs	r3, #0
 80144ec:	2200      	movs	r2, #0
 80144ee:	2100      	movs	r1, #0
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f000 fc83 	bl	8014dfc <USBD_LL_Transmit>

  return USBD_OK;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2205      	movs	r2, #5
 801450c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014510:	2300      	movs	r3, #0
 8014512:	2200      	movs	r2, #0
 8014514:	2100      	movs	r1, #0
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f000 fc91 	bl	8014e3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3708      	adds	r7, #8
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
	...

08014528 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801452c:	2200      	movs	r2, #0
 801452e:	4912      	ldr	r1, [pc, #72]	; (8014578 <MX_USB_Device_Init+0x50>)
 8014530:	4812      	ldr	r0, [pc, #72]	; (801457c <MX_USB_Device_Init+0x54>)
 8014532:	f7fe fed9 	bl	80132e8 <USBD_Init>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d001      	beq.n	8014540 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801453c:	f7f1 fb3c 	bl	8005bb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014540:	490f      	ldr	r1, [pc, #60]	; (8014580 <MX_USB_Device_Init+0x58>)
 8014542:	480e      	ldr	r0, [pc, #56]	; (801457c <MX_USB_Device_Init+0x54>)
 8014544:	f7fe ff00 	bl	8013348 <USBD_RegisterClass>
 8014548:	4603      	mov	r3, r0
 801454a:	2b00      	cmp	r3, #0
 801454c:	d001      	beq.n	8014552 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801454e:	f7f1 fb33 	bl	8005bb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014552:	490c      	ldr	r1, [pc, #48]	; (8014584 <MX_USB_Device_Init+0x5c>)
 8014554:	4809      	ldr	r0, [pc, #36]	; (801457c <MX_USB_Device_Init+0x54>)
 8014556:	f7fe fe21 	bl	801319c <USBD_CDC_RegisterInterface>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	d001      	beq.n	8014564 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014560:	f7f1 fb2a 	bl	8005bb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014564:	4805      	ldr	r0, [pc, #20]	; (801457c <MX_USB_Device_Init+0x54>)
 8014566:	f7fe ff16 	bl	8013396 <USBD_Start>
 801456a:	4603      	mov	r3, r0
 801456c:	2b00      	cmp	r3, #0
 801456e:	d001      	beq.n	8014574 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014570:	f7f1 fb22 	bl	8005bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014574:	bf00      	nop
 8014576:	bd80      	pop	{r7, pc}
 8014578:	20000130 	.word	0x20000130
 801457c:	20000aac 	.word	0x20000aac
 8014580:	20000018 	.word	0x20000018
 8014584:	2000011c 	.word	0x2000011c

08014588 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801458c:	2200      	movs	r2, #0
 801458e:	4905      	ldr	r1, [pc, #20]	; (80145a4 <CDC_Init_FS+0x1c>)
 8014590:	4805      	ldr	r0, [pc, #20]	; (80145a8 <CDC_Init_FS+0x20>)
 8014592:	f7fe fe18 	bl	80131c6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014596:	4905      	ldr	r1, [pc, #20]	; (80145ac <CDC_Init_FS+0x24>)
 8014598:	4803      	ldr	r0, [pc, #12]	; (80145a8 <CDC_Init_FS+0x20>)
 801459a:	f7fe fe32 	bl	8013202 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 801459e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	200015bc 	.word	0x200015bc
 80145a8:	20000aac 	.word	0x20000aac
 80145ac:	20000dbc 	.word	0x20000dbc

080145b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80145b0:	b480      	push	{r7}
 80145b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80145b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	46bd      	mov	sp, r7
 80145ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145be:	4770      	bx	lr

080145c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80145c0:	b480      	push	{r7}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	4603      	mov	r3, r0
 80145c8:	6039      	str	r1, [r7, #0]
 80145ca:	71fb      	strb	r3, [r7, #7]
 80145cc:	4613      	mov	r3, r2
 80145ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80145d0:	79fb      	ldrb	r3, [r7, #7]
 80145d2:	2b23      	cmp	r3, #35	; 0x23
 80145d4:	d85a      	bhi.n	801468c <CDC_Control_FS+0xcc>
 80145d6:	a201      	add	r2, pc, #4	; (adr r2, 80145dc <CDC_Control_FS+0x1c>)
 80145d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145dc:	0801468d 	.word	0x0801468d
 80145e0:	0801468d 	.word	0x0801468d
 80145e4:	0801468d 	.word	0x0801468d
 80145e8:	0801468d 	.word	0x0801468d
 80145ec:	0801468d 	.word	0x0801468d
 80145f0:	0801468d 	.word	0x0801468d
 80145f4:	0801468d 	.word	0x0801468d
 80145f8:	0801468d 	.word	0x0801468d
 80145fc:	0801468d 	.word	0x0801468d
 8014600:	0801468d 	.word	0x0801468d
 8014604:	0801468d 	.word	0x0801468d
 8014608:	0801468d 	.word	0x0801468d
 801460c:	0801468d 	.word	0x0801468d
 8014610:	0801468d 	.word	0x0801468d
 8014614:	0801468d 	.word	0x0801468d
 8014618:	0801468d 	.word	0x0801468d
 801461c:	0801468d 	.word	0x0801468d
 8014620:	0801468d 	.word	0x0801468d
 8014624:	0801468d 	.word	0x0801468d
 8014628:	0801468d 	.word	0x0801468d
 801462c:	0801468d 	.word	0x0801468d
 8014630:	0801468d 	.word	0x0801468d
 8014634:	0801468d 	.word	0x0801468d
 8014638:	0801468d 	.word	0x0801468d
 801463c:	0801468d 	.word	0x0801468d
 8014640:	0801468d 	.word	0x0801468d
 8014644:	0801468d 	.word	0x0801468d
 8014648:	0801468d 	.word	0x0801468d
 801464c:	0801468d 	.word	0x0801468d
 8014650:	0801468d 	.word	0x0801468d
 8014654:	0801468d 	.word	0x0801468d
 8014658:	0801468d 	.word	0x0801468d
 801465c:	0801468d 	.word	0x0801468d
 8014660:	0801468d 	.word	0x0801468d
 8014664:	0801466d 	.word	0x0801466d
 8014668:	0801468d 	.word	0x0801468d

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	885b      	ldrh	r3, [r3, #2]
 8014674:	f003 0301 	and.w	r3, r3, #1
 8014678:	2b00      	cmp	r3, #0
 801467a:	d003      	beq.n	8014684 <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 801467c:	4b07      	ldr	r3, [pc, #28]	; (801469c <CDC_Control_FS+0xdc>)
 801467e:	2201      	movs	r2, #1
 8014680:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 8014682:	e004      	b.n	801468e <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 8014684:	4b05      	ldr	r3, [pc, #20]	; (801469c <CDC_Control_FS+0xdc>)
 8014686:	2200      	movs	r2, #0
 8014688:	701a      	strb	r2, [r3, #0]
		break;
 801468a:	e000      	b.n	801468e <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 801468c:	bf00      	nop
	}

	return (USBD_OK);
 801468e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014690:	4618      	mov	r0, r3
 8014692:	3714      	adds	r7, #20
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr
 801469c:	20001dbc 	.word	0x20001dbc

080146a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80146aa:	6879      	ldr	r1, [r7, #4]
 80146ac:	480f      	ldr	r0, [pc, #60]	; (80146ec <CDC_Receive_FS+0x4c>)
 80146ae:	f7fe fda8 	bl	8013202 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80146b2:	480e      	ldr	r0, [pc, #56]	; (80146ec <CDC_Receive_FS+0x4c>)
 80146b4:	f7fe fdee 	bl	8013294 <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 80146b8:	2240      	movs	r2, #64	; 0x40
 80146ba:	2100      	movs	r1, #0
 80146bc:	480c      	ldr	r0, [pc, #48]	; (80146f0 <CDC_Receive_FS+0x50>)
 80146be:	f000 fe43 	bl	8015348 <memset>
	uint8_t len = (uint8_t) *Len;
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 80146c8:	7bfb      	ldrb	r3, [r7, #15]
 80146ca:	461a      	mov	r2, r3
 80146cc:	6879      	ldr	r1, [r7, #4]
 80146ce:	4808      	ldr	r0, [pc, #32]	; (80146f0 <CDC_Receive_FS+0x50>)
 80146d0:	f000 fe12 	bl	80152f8 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 80146d4:	7bfb      	ldrb	r3, [r7, #15]
 80146d6:	461a      	mov	r2, r3
 80146d8:	2100      	movs	r1, #0
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 fe34 	bl	8015348 <memset>

	return (USBD_OK);
 80146e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	20000aac 	.word	0x20000aac
 80146f0:	20000d7c 	.word	0x20000d7c

080146f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	460b      	mov	r3, r1
 80146fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014700:	2300      	movs	r3, #0
 8014702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8014704:	4b12      	ldr	r3, [pc, #72]	; (8014750 <CDC_Transmit_FS+0x5c>)
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d01b      	beq.n	8014744 <CDC_Transmit_FS+0x50>
 801470c:	4b11      	ldr	r3, [pc, #68]	; (8014754 <CDC_Transmit_FS+0x60>)
 801470e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014712:	b2db      	uxtb	r3, r3
 8014714:	2b03      	cmp	r3, #3
 8014716:	d115      	bne.n	8014744 <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 8014718:	4b0e      	ldr	r3, [pc, #56]	; (8014754 <CDC_Transmit_FS+0x60>)
 801471a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801471e:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014726:	2b00      	cmp	r3, #0
 8014728:	d001      	beq.n	801472e <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 801472a:	2301      	movs	r3, #1
 801472c:	e00b      	b.n	8014746 <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801472e:	887b      	ldrh	r3, [r7, #2]
 8014730:	461a      	mov	r2, r3
 8014732:	6879      	ldr	r1, [r7, #4]
 8014734:	4807      	ldr	r0, [pc, #28]	; (8014754 <CDC_Transmit_FS+0x60>)
 8014736:	f7fe fd46 	bl	80131c6 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801473a:	4806      	ldr	r0, [pc, #24]	; (8014754 <CDC_Transmit_FS+0x60>)
 801473c:	f7fe fd7a 	bl	8013234 <USBD_CDC_TransmitPacket>
 8014740:	4603      	mov	r3, r0
 8014742:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 8014744:	7bfb      	ldrb	r3, [r7, #15]
}
 8014746:	4618      	mov	r0, r3
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	20001dbc 	.word	0x20001dbc
 8014754:	20000aac 	.word	0x20000aac

08014758 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014758:	b480      	push	{r7}
 801475a:	b087      	sub	sp, #28
 801475c:	af00      	add	r7, sp, #0
 801475e:	60f8      	str	r0, [r7, #12]
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	4613      	mov	r3, r2
 8014764:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014766:	2300      	movs	r3, #0
 8014768:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801476a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801476e:	4618      	mov	r0, r3
 8014770:	371c      	adds	r7, #28
 8014772:	46bd      	mov	sp, r7
 8014774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014778:	4770      	bx	lr
	...

0801477c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801477c:	b480      	push	{r7}
 801477e:	b083      	sub	sp, #12
 8014780:	af00      	add	r7, sp, #0
 8014782:	4603      	mov	r3, r0
 8014784:	6039      	str	r1, [r7, #0]
 8014786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	2212      	movs	r2, #18
 801478c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801478e:	4b03      	ldr	r3, [pc, #12]	; (801479c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014790:	4618      	mov	r0, r3
 8014792:	370c      	adds	r7, #12
 8014794:	46bd      	mov	sp, r7
 8014796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479a:	4770      	bx	lr
 801479c:	20000150 	.word	0x20000150

080147a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147a0:	b480      	push	{r7}
 80147a2:	b083      	sub	sp, #12
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	4603      	mov	r3, r0
 80147a8:	6039      	str	r1, [r7, #0]
 80147aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	2204      	movs	r2, #4
 80147b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80147b2:	4b03      	ldr	r3, [pc, #12]	; (80147c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	370c      	adds	r7, #12
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr
 80147c0:	20000164 	.word	0x20000164

080147c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	4603      	mov	r3, r0
 80147cc:	6039      	str	r1, [r7, #0]
 80147ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147d0:	79fb      	ldrb	r3, [r7, #7]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d105      	bne.n	80147e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80147d6:	683a      	ldr	r2, [r7, #0]
 80147d8:	4907      	ldr	r1, [pc, #28]	; (80147f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80147da:	4808      	ldr	r0, [pc, #32]	; (80147fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80147dc:	f7ff fdc3 	bl	8014366 <USBD_GetString>
 80147e0:	e004      	b.n	80147ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80147e2:	683a      	ldr	r2, [r7, #0]
 80147e4:	4904      	ldr	r1, [pc, #16]	; (80147f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80147e6:	4805      	ldr	r0, [pc, #20]	; (80147fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80147e8:	f7ff fdbd 	bl	8014366 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147ec:	4b02      	ldr	r3, [pc, #8]	; (80147f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3708      	adds	r7, #8
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	20001dc0 	.word	0x20001dc0
 80147fc:	080183cc 	.word	0x080183cc

08014800 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	4603      	mov	r3, r0
 8014808:	6039      	str	r1, [r7, #0]
 801480a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801480c:	683a      	ldr	r2, [r7, #0]
 801480e:	4904      	ldr	r1, [pc, #16]	; (8014820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014810:	4804      	ldr	r0, [pc, #16]	; (8014824 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8014812:	f7ff fda8 	bl	8014366 <USBD_GetString>
  return USBD_StrDesc;
 8014816:	4b02      	ldr	r3, [pc, #8]	; (8014820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	20001dc0 	.word	0x20001dc0
 8014824:	080183e4 	.word	0x080183e4

08014828 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	4603      	mov	r3, r0
 8014830:	6039      	str	r1, [r7, #0]
 8014832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	221a      	movs	r2, #26
 8014838:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801483a:	f000 f843 	bl	80148c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801483e:	4b02      	ldr	r3, [pc, #8]	; (8014848 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014840:	4618      	mov	r0, r3
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	20000168 	.word	0x20000168

0801484c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	4603      	mov	r3, r0
 8014854:	6039      	str	r1, [r7, #0]
 8014856:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014858:	79fb      	ldrb	r3, [r7, #7]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d105      	bne.n	801486a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801485e:	683a      	ldr	r2, [r7, #0]
 8014860:	4907      	ldr	r1, [pc, #28]	; (8014880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014862:	4808      	ldr	r0, [pc, #32]	; (8014884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014864:	f7ff fd7f 	bl	8014366 <USBD_GetString>
 8014868:	e004      	b.n	8014874 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801486a:	683a      	ldr	r2, [r7, #0]
 801486c:	4904      	ldr	r1, [pc, #16]	; (8014880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801486e:	4805      	ldr	r0, [pc, #20]	; (8014884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014870:	f7ff fd79 	bl	8014366 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014874:	4b02      	ldr	r3, [pc, #8]	; (8014880 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014876:	4618      	mov	r0, r3
 8014878:	3708      	adds	r7, #8
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	20001dc0 	.word	0x20001dc0
 8014884:	080183f8 	.word	0x080183f8

08014888 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b082      	sub	sp, #8
 801488c:	af00      	add	r7, sp, #0
 801488e:	4603      	mov	r3, r0
 8014890:	6039      	str	r1, [r7, #0]
 8014892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014894:	79fb      	ldrb	r3, [r7, #7]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d105      	bne.n	80148a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801489a:	683a      	ldr	r2, [r7, #0]
 801489c:	4907      	ldr	r1, [pc, #28]	; (80148bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801489e:	4808      	ldr	r0, [pc, #32]	; (80148c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80148a0:	f7ff fd61 	bl	8014366 <USBD_GetString>
 80148a4:	e004      	b.n	80148b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80148a6:	683a      	ldr	r2, [r7, #0]
 80148a8:	4904      	ldr	r1, [pc, #16]	; (80148bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80148aa:	4805      	ldr	r0, [pc, #20]	; (80148c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80148ac:	f7ff fd5b 	bl	8014366 <USBD_GetString>
  }
  return USBD_StrDesc;
 80148b0:	4b02      	ldr	r3, [pc, #8]	; (80148bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3708      	adds	r7, #8
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	20001dc0 	.word	0x20001dc0
 80148c0:	08018404 	.word	0x08018404

080148c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80148ca:	4b0f      	ldr	r3, [pc, #60]	; (8014908 <Get_SerialNum+0x44>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80148d0:	4b0e      	ldr	r3, [pc, #56]	; (801490c <Get_SerialNum+0x48>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80148d6:	4b0e      	ldr	r3, [pc, #56]	; (8014910 <Get_SerialNum+0x4c>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80148dc:	68fa      	ldr	r2, [r7, #12]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	4413      	add	r3, r2
 80148e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d009      	beq.n	80148fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80148ea:	2208      	movs	r2, #8
 80148ec:	4909      	ldr	r1, [pc, #36]	; (8014914 <Get_SerialNum+0x50>)
 80148ee:	68f8      	ldr	r0, [r7, #12]
 80148f0:	f000 f814 	bl	801491c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80148f4:	2204      	movs	r2, #4
 80148f6:	4908      	ldr	r1, [pc, #32]	; (8014918 <Get_SerialNum+0x54>)
 80148f8:	68b8      	ldr	r0, [r7, #8]
 80148fa:	f000 f80f 	bl	801491c <IntToUnicode>
  }
}
 80148fe:	bf00      	nop
 8014900:	3710      	adds	r7, #16
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	1fff7590 	.word	0x1fff7590
 801490c:	1fff7594 	.word	0x1fff7594
 8014910:	1fff7598 	.word	0x1fff7598
 8014914:	2000016a 	.word	0x2000016a
 8014918:	2000017a 	.word	0x2000017a

0801491c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801491c:	b480      	push	{r7}
 801491e:	b087      	sub	sp, #28
 8014920:	af00      	add	r7, sp, #0
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	4613      	mov	r3, r2
 8014928:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801492a:	2300      	movs	r3, #0
 801492c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801492e:	2300      	movs	r3, #0
 8014930:	75fb      	strb	r3, [r7, #23]
 8014932:	e027      	b.n	8014984 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	0f1b      	lsrs	r3, r3, #28
 8014938:	2b09      	cmp	r3, #9
 801493a:	d80b      	bhi.n	8014954 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	0f1b      	lsrs	r3, r3, #28
 8014940:	b2da      	uxtb	r2, r3
 8014942:	7dfb      	ldrb	r3, [r7, #23]
 8014944:	005b      	lsls	r3, r3, #1
 8014946:	4619      	mov	r1, r3
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	440b      	add	r3, r1
 801494c:	3230      	adds	r2, #48	; 0x30
 801494e:	b2d2      	uxtb	r2, r2
 8014950:	701a      	strb	r2, [r3, #0]
 8014952:	e00a      	b.n	801496a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	0f1b      	lsrs	r3, r3, #28
 8014958:	b2da      	uxtb	r2, r3
 801495a:	7dfb      	ldrb	r3, [r7, #23]
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	4619      	mov	r1, r3
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	440b      	add	r3, r1
 8014964:	3237      	adds	r2, #55	; 0x37
 8014966:	b2d2      	uxtb	r2, r2
 8014968:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	011b      	lsls	r3, r3, #4
 801496e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014970:	7dfb      	ldrb	r3, [r7, #23]
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	3301      	adds	r3, #1
 8014976:	68ba      	ldr	r2, [r7, #8]
 8014978:	4413      	add	r3, r2
 801497a:	2200      	movs	r2, #0
 801497c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801497e:	7dfb      	ldrb	r3, [r7, #23]
 8014980:	3301      	adds	r3, #1
 8014982:	75fb      	strb	r3, [r7, #23]
 8014984:	7dfa      	ldrb	r2, [r7, #23]
 8014986:	79fb      	ldrb	r3, [r7, #7]
 8014988:	429a      	cmp	r2, r3
 801498a:	d3d3      	bcc.n	8014934 <IntToUnicode+0x18>
  }
}
 801498c:	bf00      	nop
 801498e:	bf00      	nop
 8014990:	371c      	adds	r7, #28
 8014992:	46bd      	mov	sp, r7
 8014994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014998:	4770      	bx	lr
	...

0801499c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b098      	sub	sp, #96	; 0x60
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80149a4:	f107 030c 	add.w	r3, r7, #12
 80149a8:	2254      	movs	r2, #84	; 0x54
 80149aa:	2100      	movs	r1, #0
 80149ac:	4618      	mov	r0, r3
 80149ae:	f000 fccb 	bl	8015348 <memset>
  if(pcdHandle->Instance==USB)
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	4a15      	ldr	r2, [pc, #84]	; (8014a0c <HAL_PCD_MspInit+0x70>)
 80149b8:	4293      	cmp	r3, r2
 80149ba:	d122      	bne.n	8014a02 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80149bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80149c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80149c2:	2300      	movs	r3, #0
 80149c4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80149c6:	f107 030c 	add.w	r3, r7, #12
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7f8 fcc4 	bl	800d358 <HAL_RCCEx_PeriphCLKConfig>
 80149d0:	4603      	mov	r3, r0
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d001      	beq.n	80149da <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80149d6:	f7f1 f8ef 	bl	8005bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80149da:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <HAL_PCD_MspInit+0x74>)
 80149dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149de:	4a0c      	ldr	r2, [pc, #48]	; (8014a10 <HAL_PCD_MspInit+0x74>)
 80149e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80149e4:	6593      	str	r3, [r2, #88]	; 0x58
 80149e6:	4b0a      	ldr	r3, [pc, #40]	; (8014a10 <HAL_PCD_MspInit+0x74>)
 80149e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80149ee:	60bb      	str	r3, [r7, #8]
 80149f0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80149f2:	2200      	movs	r2, #0
 80149f4:	2100      	movs	r1, #0
 80149f6:	2014      	movs	r0, #20
 80149f8:	f7f4 f97f 	bl	8008cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80149fc:	2014      	movs	r0, #20
 80149fe:	f7f4 f996 	bl	8008d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014a02:	bf00      	nop
 8014a04:	3760      	adds	r7, #96	; 0x60
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop
 8014a0c:	40005c00 	.word	0x40005c00
 8014a10:	40021000 	.word	0x40021000

08014a14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014a28:	4619      	mov	r1, r3
 8014a2a:	4610      	mov	r0, r2
 8014a2c:	f7fe fcfe 	bl	801342c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014a30:	bf00      	nop
 8014a32:	3708      	adds	r7, #8
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}

08014a38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	460b      	mov	r3, r1
 8014a42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014a4a:	78fa      	ldrb	r2, [r7, #3]
 8014a4c:	6879      	ldr	r1, [r7, #4]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	4413      	add	r3, r2
 8014a54:	00db      	lsls	r3, r3, #3
 8014a56:	440b      	add	r3, r1
 8014a58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014a5c:	681a      	ldr	r2, [r3, #0]
 8014a5e:	78fb      	ldrb	r3, [r7, #3]
 8014a60:	4619      	mov	r1, r3
 8014a62:	f7fe fd38 	bl	80134d6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014a66:	bf00      	nop
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b082      	sub	sp, #8
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	460b      	mov	r3, r1
 8014a78:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8014a80:	78fa      	ldrb	r2, [r7, #3]
 8014a82:	6879      	ldr	r1, [r7, #4]
 8014a84:	4613      	mov	r3, r2
 8014a86:	009b      	lsls	r3, r3, #2
 8014a88:	4413      	add	r3, r2
 8014a8a:	00db      	lsls	r3, r3, #3
 8014a8c:	440b      	add	r3, r1
 8014a8e:	333c      	adds	r3, #60	; 0x3c
 8014a90:	681a      	ldr	r2, [r3, #0]
 8014a92:	78fb      	ldrb	r3, [r7, #3]
 8014a94:	4619      	mov	r1, r3
 8014a96:	f7fe fd81 	bl	801359c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014a9a:	bf00      	nop
 8014a9c:	3708      	adds	r7, #8
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}

08014aa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014aa2:	b580      	push	{r7, lr}
 8014aa4:	b082      	sub	sp, #8
 8014aa6:	af00      	add	r7, sp, #0
 8014aa8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fe fe95 	bl	80137e0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014ab6:	bf00      	nop
 8014ab8:	3708      	adds	r7, #8
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}

08014abe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014abe:	b580      	push	{r7, lr}
 8014ac0:	b084      	sub	sp, #16
 8014ac2:	af00      	add	r7, sp, #0
 8014ac4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	2b02      	cmp	r3, #2
 8014ad0:	d001      	beq.n	8014ad6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014ad2:	f7f1 f871 	bl	8005bb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014adc:	7bfa      	ldrb	r2, [r7, #15]
 8014ade:	4611      	mov	r1, r2
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7fe fe3f 	bl	8013764 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7fe fdeb 	bl	80136c8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014af2:	bf00      	nop
 8014af4:	3710      	adds	r7, #16
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
	...

08014afc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fe fe3a 	bl	8013784 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	699b      	ldr	r3, [r3, #24]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d005      	beq.n	8014b24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014b18:	4b04      	ldr	r3, [pc, #16]	; (8014b2c <HAL_PCD_SuspendCallback+0x30>)
 8014b1a:	691b      	ldr	r3, [r3, #16]
 8014b1c:	4a03      	ldr	r2, [pc, #12]	; (8014b2c <HAL_PCD_SuspendCallback+0x30>)
 8014b1e:	f043 0306 	orr.w	r3, r3, #6
 8014b22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014b24:	bf00      	nop
 8014b26:	3708      	adds	r7, #8
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	e000ed00 	.word	0xe000ed00

08014b30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	699b      	ldr	r3, [r3, #24]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d007      	beq.n	8014b50 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014b40:	4b08      	ldr	r3, [pc, #32]	; (8014b64 <HAL_PCD_ResumeCallback+0x34>)
 8014b42:	691b      	ldr	r3, [r3, #16]
 8014b44:	4a07      	ldr	r2, [pc, #28]	; (8014b64 <HAL_PCD_ResumeCallback+0x34>)
 8014b46:	f023 0306 	bic.w	r3, r3, #6
 8014b4a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014b4c:	f000 f9fa 	bl	8014f44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fe fe2a 	bl	80137b0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014b5c:	bf00      	nop
 8014b5e:	3708      	adds	r7, #8
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	e000ed00 	.word	0xe000ed00

08014b68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014b70:	4a2b      	ldr	r2, [pc, #172]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	4a29      	ldr	r2, [pc, #164]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014b7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8014b80:	4b27      	ldr	r3, [pc, #156]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014b82:	4a28      	ldr	r2, [pc, #160]	; (8014c24 <USBD_LL_Init+0xbc>)
 8014b84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014b86:	4b26      	ldr	r3, [pc, #152]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014b88:	2208      	movs	r2, #8
 8014b8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014b8c:	4b24      	ldr	r3, [pc, #144]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014b8e:	2202      	movs	r2, #2
 8014b90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014b92:	4b23      	ldr	r3, [pc, #140]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014b94:	2202      	movs	r2, #2
 8014b96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014b98:	4b21      	ldr	r3, [pc, #132]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014b9e:	4b20      	ldr	r3, [pc, #128]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014ba4:	4b1e      	ldr	r3, [pc, #120]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014baa:	4b1d      	ldr	r3, [pc, #116]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014bb0:	481b      	ldr	r0, [pc, #108]	; (8014c20 <USBD_LL_Init+0xb8>)
 8014bb2:	f7f6 f8c5 	bl	800ad40 <HAL_PCD_Init>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d001      	beq.n	8014bc0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8014bbc:	f7f0 fffc 	bl	8005bb8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bc6:	2318      	movs	r3, #24
 8014bc8:	2200      	movs	r2, #0
 8014bca:	2100      	movs	r1, #0
 8014bcc:	f7f7 fd7e 	bl	800c6cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bd6:	2358      	movs	r3, #88	; 0x58
 8014bd8:	2200      	movs	r2, #0
 8014bda:	2180      	movs	r1, #128	; 0x80
 8014bdc:	f7f7 fd76 	bl	800c6cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014be6:	23c0      	movs	r3, #192	; 0xc0
 8014be8:	2200      	movs	r2, #0
 8014bea:	2181      	movs	r1, #129	; 0x81
 8014bec:	f7f7 fd6e 	bl	800c6cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bf6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	2101      	movs	r1, #1
 8014bfe:	f7f7 fd65 	bl	800c6cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	2182      	movs	r1, #130	; 0x82
 8014c10:	f7f7 fd5c 	bl	800c6cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014c14:	2300      	movs	r3, #0
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	20001fc0 	.word	0x20001fc0
 8014c24:	40005c00 	.word	0x40005c00

08014c28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b084      	sub	sp, #16
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c30:	2300      	movs	r3, #0
 8014c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c34:	2300      	movs	r3, #0
 8014c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f6 f963 	bl	800af0a <HAL_PCD_Start>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c48:	7bfb      	ldrb	r3, [r7, #15]
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 f9c8 	bl	8014fe0 <USBD_Get_USB_Status>
 8014c50:	4603      	mov	r3, r0
 8014c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3710      	adds	r7, #16
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}

08014c5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014c5e:	b580      	push	{r7, lr}
 8014c60:	b084      	sub	sp, #16
 8014c62:	af00      	add	r7, sp, #0
 8014c64:	6078      	str	r0, [r7, #4]
 8014c66:	4608      	mov	r0, r1
 8014c68:	4611      	mov	r1, r2
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	70fb      	strb	r3, [r7, #3]
 8014c70:	460b      	mov	r3, r1
 8014c72:	70bb      	strb	r3, [r7, #2]
 8014c74:	4613      	mov	r3, r2
 8014c76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c86:	78bb      	ldrb	r3, [r7, #2]
 8014c88:	883a      	ldrh	r2, [r7, #0]
 8014c8a:	78f9      	ldrb	r1, [r7, #3]
 8014c8c:	f7f6 faab 	bl	800b1e6 <HAL_PCD_EP_Open>
 8014c90:	4603      	mov	r3, r0
 8014c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c94:	7bfb      	ldrb	r3, [r7, #15]
 8014c96:	4618      	mov	r0, r3
 8014c98:	f000 f9a2 	bl	8014fe0 <USBD_Get_USB_Status>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	3710      	adds	r7, #16
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b084      	sub	sp, #16
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	6078      	str	r0, [r7, #4]
 8014cb2:	460b      	mov	r3, r1
 8014cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014cc4:	78fa      	ldrb	r2, [r7, #3]
 8014cc6:	4611      	mov	r1, r2
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7f6 faf2 	bl	800b2b2 <HAL_PCD_EP_Close>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014cd2:	7bfb      	ldrb	r3, [r7, #15]
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f000 f983 	bl	8014fe0 <USBD_Get_USB_Status>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3710      	adds	r7, #16
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b084      	sub	sp, #16
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d02:	78fa      	ldrb	r2, [r7, #3]
 8014d04:	4611      	mov	r1, r2
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7f6 fbb3 	bl	800b472 <HAL_PCD_EP_SetStall>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d10:	7bfb      	ldrb	r3, [r7, #15]
 8014d12:	4618      	mov	r0, r3
 8014d14:	f000 f964 	bl	8014fe0 <USBD_Get_USB_Status>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3710      	adds	r7, #16
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}

08014d26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d26:	b580      	push	{r7, lr}
 8014d28:	b084      	sub	sp, #16
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
 8014d2e:	460b      	mov	r3, r1
 8014d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d36:	2300      	movs	r3, #0
 8014d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d40:	78fa      	ldrb	r2, [r7, #3]
 8014d42:	4611      	mov	r1, r2
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7f6 fbe6 	bl	800b516 <HAL_PCD_EP_ClrStall>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d4e:	7bfb      	ldrb	r3, [r7, #15]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f000 f945 	bl	8014fe0 <USBD_Get_USB_Status>
 8014d56:	4603      	mov	r3, r0
 8014d58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3710      	adds	r7, #16
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d64:	b480      	push	{r7}
 8014d66:	b085      	sub	sp, #20
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	da0c      	bge.n	8014d9a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014d80:	78fb      	ldrb	r3, [r7, #3]
 8014d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d86:	68f9      	ldr	r1, [r7, #12]
 8014d88:	1c5a      	adds	r2, r3, #1
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	4413      	add	r3, r2
 8014d90:	00db      	lsls	r3, r3, #3
 8014d92:	440b      	add	r3, r1
 8014d94:	3302      	adds	r3, #2
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	e00b      	b.n	8014db2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014d9a:	78fb      	ldrb	r3, [r7, #3]
 8014d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014da0:	68f9      	ldr	r1, [r7, #12]
 8014da2:	4613      	mov	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	4413      	add	r3, r2
 8014da8:	00db      	lsls	r3, r3, #3
 8014daa:	440b      	add	r3, r1
 8014dac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014db0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3714      	adds	r7, #20
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr

08014dbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014dbe:	b580      	push	{r7, lr}
 8014dc0:	b084      	sub	sp, #16
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	6078      	str	r0, [r7, #4]
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014dd8:	78fa      	ldrb	r2, [r7, #3]
 8014dda:	4611      	mov	r1, r2
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7f6 f9dd 	bl	800b19c <HAL_PCD_SetAddress>
 8014de2:	4603      	mov	r3, r0
 8014de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014de6:	7bfb      	ldrb	r3, [r7, #15]
 8014de8:	4618      	mov	r0, r3
 8014dea:	f000 f8f9 	bl	8014fe0 <USBD_Get_USB_Status>
 8014dee:	4603      	mov	r3, r0
 8014df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3710      	adds	r7, #16
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}

08014dfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b086      	sub	sp, #24
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	60f8      	str	r0, [r7, #12]
 8014e04:	607a      	str	r2, [r7, #4]
 8014e06:	603b      	str	r3, [r7, #0]
 8014e08:	460b      	mov	r3, r1
 8014e0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e10:	2300      	movs	r3, #0
 8014e12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e1a:	7af9      	ldrb	r1, [r7, #11]
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	f7f6 fae4 	bl	800b3ec <HAL_PCD_EP_Transmit>
 8014e24:	4603      	mov	r3, r0
 8014e26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e28:	7dfb      	ldrb	r3, [r7, #23]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f000 f8d8 	bl	8014fe0 <USBD_Get_USB_Status>
 8014e30:	4603      	mov	r3, r0
 8014e32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014e34:	7dbb      	ldrb	r3, [r7, #22]
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3718      	adds	r7, #24
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}

08014e3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014e3e:	b580      	push	{r7, lr}
 8014e40:	b086      	sub	sp, #24
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	60f8      	str	r0, [r7, #12]
 8014e46:	607a      	str	r2, [r7, #4]
 8014e48:	603b      	str	r3, [r7, #0]
 8014e4a:	460b      	mov	r3, r1
 8014e4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e52:	2300      	movs	r3, #0
 8014e54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e5c:	7af9      	ldrb	r1, [r7, #11]
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	f7f6 fa6e 	bl	800b342 <HAL_PCD_EP_Receive>
 8014e66:	4603      	mov	r3, r0
 8014e68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e6a:	7dfb      	ldrb	r3, [r7, #23]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f000 f8b7 	bl	8014fe0 <USBD_Get_USB_Status>
 8014e72:	4603      	mov	r3, r0
 8014e74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014e76:	7dbb      	ldrb	r3, [r7, #22]
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3718      	adds	r7, #24
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	460b      	mov	r3, r1
 8014e8a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e92:	78fa      	ldrb	r2, [r7, #3]
 8014e94:	4611      	mov	r1, r2
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7f6 fa90 	bl	800b3bc <HAL_PCD_EP_GetRxCount>
 8014e9c:	4603      	mov	r3, r0
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
	...

08014ea8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8014eb4:	78fb      	ldrb	r3, [r7, #3]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d002      	beq.n	8014ec0 <HAL_PCDEx_LPM_Callback+0x18>
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d013      	beq.n	8014ee6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8014ebe:	e023      	b.n	8014f08 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	699b      	ldr	r3, [r3, #24]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d007      	beq.n	8014ed8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014ec8:	f000 f83c 	bl	8014f44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ecc:	4b10      	ldr	r3, [pc, #64]	; (8014f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8014ece:	691b      	ldr	r3, [r3, #16]
 8014ed0:	4a0f      	ldr	r2, [pc, #60]	; (8014f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8014ed2:	f023 0306 	bic.w	r3, r3, #6
 8014ed6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7fe fc66 	bl	80137b0 <USBD_LL_Resume>
    break;
 8014ee4:	e010      	b.n	8014f08 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fe fc49 	bl	8013784 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	699b      	ldr	r3, [r3, #24]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d005      	beq.n	8014f06 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014efa:	4b05      	ldr	r3, [pc, #20]	; (8014f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8014efc:	691b      	ldr	r3, [r3, #16]
 8014efe:	4a04      	ldr	r2, [pc, #16]	; (8014f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8014f00:	f043 0306 	orr.w	r3, r3, #6
 8014f04:	6113      	str	r3, [r2, #16]
    break;
 8014f06:	bf00      	nop
}
 8014f08:	bf00      	nop
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	e000ed00 	.word	0xe000ed00

08014f14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014f1c:	4b03      	ldr	r3, [pc, #12]	; (8014f2c <USBD_static_malloc+0x18>)
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	370c      	adds	r7, #12
 8014f22:	46bd      	mov	sp, r7
 8014f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop
 8014f2c:	200022b4 	.word	0x200022b4

08014f30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014f30:	b480      	push	{r7}
 8014f32:	b083      	sub	sp, #12
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]

}
 8014f38:	bf00      	nop
 8014f3a:	370c      	adds	r7, #12
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f42:	4770      	bx	lr

08014f44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b094      	sub	sp, #80	; 0x50
 8014f48:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014f4a:	f107 0318 	add.w	r3, r7, #24
 8014f4e:	2238      	movs	r2, #56	; 0x38
 8014f50:	2100      	movs	r1, #0
 8014f52:	4618      	mov	r0, r3
 8014f54:	f000 f9f8 	bl	8015348 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014f58:	1d3b      	adds	r3, r7, #4
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	601a      	str	r2, [r3, #0]
 8014f5e:	605a      	str	r2, [r3, #4]
 8014f60:	609a      	str	r2, [r3, #8]
 8014f62:	60da      	str	r2, [r3, #12]
 8014f64:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014f6a:	f7f7 fc1d 	bl	800c7a8 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8014f6e:	2322      	movs	r3, #34	; 0x22
 8014f70:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8014f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014f76:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8014f78:	2340      	movs	r3, #64	; 0x40
 8014f7a:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014f80:	2302      	movs	r3, #2
 8014f82:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8014f84:	2302      	movs	r3, #2
 8014f86:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 8014f8c:	2310      	movs	r3, #16
 8014f8e:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8014f90:	2302      	movs	r3, #2
 8014f92:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8014f94:	2302      	movs	r3, #2
 8014f96:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8014f98:	2302      	movs	r3, #2
 8014f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014f9c:	f107 0318 	add.w	r3, r7, #24
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f7f7 fca5 	bl	800c8f0 <HAL_RCC_OscConfig>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d001      	beq.n	8014fb0 <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 8014fac:	f7f0 fe04 	bl	8005bb8 <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014fb0:	230f      	movs	r3, #15
 8014fb2:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014fb4:	2303      	movs	r3, #3
 8014fb6:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8014fc4:	1d3b      	adds	r3, r7, #4
 8014fc6:	2103      	movs	r1, #3
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7f7 ffa9 	bl	800cf20 <HAL_RCC_ClockConfig>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d001      	beq.n	8014fd8 <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 8014fd4:	f7f0 fdf0 	bl	8005bb8 <Error_Handler>
		  }

}
 8014fd8:	bf00      	nop
 8014fda:	3750      	adds	r7, #80	; 0x50
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b085      	sub	sp, #20
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fea:	2300      	movs	r3, #0
 8014fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014fee:	79fb      	ldrb	r3, [r7, #7]
 8014ff0:	2b03      	cmp	r3, #3
 8014ff2:	d817      	bhi.n	8015024 <USBD_Get_USB_Status+0x44>
 8014ff4:	a201      	add	r2, pc, #4	; (adr r2, 8014ffc <USBD_Get_USB_Status+0x1c>)
 8014ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ffa:	bf00      	nop
 8014ffc:	0801500d 	.word	0x0801500d
 8015000:	08015013 	.word	0x08015013
 8015004:	08015019 	.word	0x08015019
 8015008:	0801501f 	.word	0x0801501f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801500c:	2300      	movs	r3, #0
 801500e:	73fb      	strb	r3, [r7, #15]
    break;
 8015010:	e00b      	b.n	801502a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015012:	2303      	movs	r3, #3
 8015014:	73fb      	strb	r3, [r7, #15]
    break;
 8015016:	e008      	b.n	801502a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015018:	2301      	movs	r3, #1
 801501a:	73fb      	strb	r3, [r7, #15]
    break;
 801501c:	e005      	b.n	801502a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801501e:	2303      	movs	r3, #3
 8015020:	73fb      	strb	r3, [r7, #15]
    break;
 8015022:	e002      	b.n	801502a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015024:	2303      	movs	r3, #3
 8015026:	73fb      	strb	r3, [r7, #15]
    break;
 8015028:	bf00      	nop
  }
  return usb_status;
 801502a:	7bfb      	ldrb	r3, [r7, #15]
}
 801502c:	4618      	mov	r0, r3
 801502e:	3714      	adds	r7, #20
 8015030:	46bd      	mov	sp, r7
 8015032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015036:	4770      	bx	lr

08015038 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8015038:	b10a      	cbz	r2, 801503e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801503a:	f000 b95d 	b.w	80152f8 <memcpy>
 801503e:	4770      	bx	lr

08015040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015040:	b508      	push	{r3, lr}
 8015042:	680b      	ldr	r3, [r1, #0]
 8015044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015048:	d302      	bcc.n	8015050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801504a:	480d      	ldr	r0, [pc, #52]	; (8015080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801504c:	f000 f906 	bl	801525c <_ZSt20__throw_length_errorPKc>
 8015050:	4293      	cmp	r3, r2
 8015052:	d90b      	bls.n	801506c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015054:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015058:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801505c:	d206      	bcs.n	801506c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801505e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015062:	bf2a      	itet	cs
 8015064:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8015068:	6008      	strcc	r0, [r1, #0]
 801506a:	600b      	strcs	r3, [r1, #0]
 801506c:	6808      	ldr	r0, [r1, #0]
 801506e:	3001      	adds	r0, #1
 8015070:	d501      	bpl.n	8015076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8015072:	f000 f8f0 	bl	8015256 <_ZSt17__throw_bad_allocv>
 8015076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801507a:	f000 b8db 	b.w	8015234 <_Znwj>
 801507e:	bf00      	nop
 8015080:	08018554 	.word	0x08018554

08015084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8015084:	f850 3b08 	ldr.w	r3, [r0], #8
 8015088:	4283      	cmp	r3, r0
 801508a:	d002      	beq.n	8015092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801508c:	4618      	mov	r0, r3
 801508e:	f000 b8cf 	b.w	8015230 <_ZdlPv>
 8015092:	4770      	bx	lr

08015094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8015094:	6840      	ldr	r0, [r0, #4]
 8015096:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801509a:	3901      	subs	r1, #1
 801509c:	1a09      	subs	r1, r1, r0
 801509e:	4291      	cmp	r1, r2
 80150a0:	b508      	push	{r3, lr}
 80150a2:	d202      	bcs.n	80150aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80150a4:	4618      	mov	r0, r3
 80150a6:	f000 f8d9 	bl	801525c <_ZSt20__throw_length_errorPKc>
 80150aa:	bd08      	pop	{r3, pc}

080150ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80150ac:	2a01      	cmp	r2, #1
 80150ae:	b410      	push	{r4}
 80150b0:	d104      	bne.n	80150bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80150b2:	780a      	ldrb	r2, [r1, #0]
 80150b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150b8:	7002      	strb	r2, [r0, #0]
 80150ba:	4770      	bx	lr
 80150bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150c0:	f7ff bfba 	b.w	8015038 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080150c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80150c4:	2a01      	cmp	r2, #1
 80150c6:	b430      	push	{r4, r5}
 80150c8:	d103      	bne.n	80150d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80150ca:	780b      	ldrb	r3, [r1, #0]
 80150cc:	7003      	strb	r3, [r0, #0]
 80150ce:	bc30      	pop	{r4, r5}
 80150d0:	4770      	bx	lr
 80150d2:	2a00      	cmp	r2, #0
 80150d4:	d0fb      	beq.n	80150ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80150d6:	bc30      	pop	{r4, r5}
 80150d8:	f000 b91c 	b.w	8015314 <memmove>

080150dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80150dc:	460b      	mov	r3, r1
 80150de:	2b01      	cmp	r3, #1
 80150e0:	b410      	push	{r4}
 80150e2:	4611      	mov	r1, r2
 80150e4:	4604      	mov	r4, r0
 80150e6:	d103      	bne.n	80150f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80150e8:	7022      	strb	r2, [r4, #0]
 80150ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150ee:	4770      	bx	lr
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d0fa      	beq.n	80150ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80150f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150f8:	461a      	mov	r2, r3
 80150fa:	f000 b925 	b.w	8015348 <memset>

080150fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80150fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015102:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015104:	461f      	mov	r7, r3
 8015106:	6843      	ldr	r3, [r0, #4]
 8015108:	eb01 0802 	add.w	r8, r1, r2
 801510c:	1ab2      	subs	r2, r6, r2
 801510e:	441a      	add	r2, r3
 8015110:	eba3 0908 	sub.w	r9, r3, r8
 8015114:	4603      	mov	r3, r0
 8015116:	9201      	str	r2, [sp, #4]
 8015118:	f853 2b08 	ldr.w	r2, [r3], #8
 801511c:	429a      	cmp	r2, r3
 801511e:	bf18      	it	ne
 8015120:	6882      	ldrne	r2, [r0, #8]
 8015122:	460d      	mov	r5, r1
 8015124:	bf08      	it	eq
 8015126:	220f      	moveq	r2, #15
 8015128:	a901      	add	r1, sp, #4
 801512a:	4604      	mov	r4, r0
 801512c:	f7ff ff88 	bl	8015040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015130:	4682      	mov	sl, r0
 8015132:	b11d      	cbz	r5, 801513c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8015134:	6821      	ldr	r1, [r4, #0]
 8015136:	462a      	mov	r2, r5
 8015138:	f7ff ffb8 	bl	80150ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801513c:	b137      	cbz	r7, 801514c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801513e:	b12e      	cbz	r6, 801514c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8015140:	4632      	mov	r2, r6
 8015142:	4639      	mov	r1, r7
 8015144:	eb0a 0005 	add.w	r0, sl, r5
 8015148:	f7ff ffb0 	bl	80150ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801514c:	f1b9 0f00 	cmp.w	r9, #0
 8015150:	d007      	beq.n	8015162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8015152:	6821      	ldr	r1, [r4, #0]
 8015154:	4435      	add	r5, r6
 8015156:	464a      	mov	r2, r9
 8015158:	4441      	add	r1, r8
 801515a:	eb0a 0005 	add.w	r0, sl, r5
 801515e:	f7ff ffa5 	bl	80150ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015162:	4620      	mov	r0, r4
 8015164:	f7ff ff8e 	bl	8015084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015168:	9b01      	ldr	r3, [sp, #4]
 801516a:	f8c4 a000 	str.w	sl, [r4]
 801516e:	60a3      	str	r3, [r4, #8]
 8015170:	b002      	add	sp, #8
 8015172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8015176:	f100 0208 	add.w	r2, r0, #8
 801517a:	6002      	str	r2, [r0, #0]
 801517c:	2200      	movs	r2, #0
 801517e:	6042      	str	r2, [r0, #4]
 8015180:	7202      	strb	r2, [r0, #8]
 8015182:	4770      	bx	lr

08015184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8015184:	b510      	push	{r4, lr}
 8015186:	4604      	mov	r4, r0
 8015188:	f7ff ff7c 	bl	8015084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801518c:	4620      	mov	r0, r4
 801518e:	bd10      	pop	{r4, pc}

08015190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8015190:	6800      	ldr	r0, [r0, #0]
 8015192:	4408      	add	r0, r1
 8015194:	4770      	bx	lr
	...

08015198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8015198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801519c:	4616      	mov	r6, r2
 801519e:	461d      	mov	r5, r3
 80151a0:	4604      	mov	r4, r0
 80151a2:	4b1c      	ldr	r3, [pc, #112]	; (8015214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 80151a4:	462a      	mov	r2, r5
 80151a6:	460f      	mov	r7, r1
 80151a8:	4631      	mov	r1, r6
 80151aa:	f7ff ff73 	bl	8015094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80151ae:	4623      	mov	r3, r4
 80151b0:	6862      	ldr	r2, [r4, #4]
 80151b2:	f853 0b08 	ldr.w	r0, [r3], #8
 80151b6:	4298      	cmp	r0, r3
 80151b8:	bf18      	it	ne
 80151ba:	68a3      	ldrne	r3, [r4, #8]
 80151bc:	eba5 0806 	sub.w	r8, r5, r6
 80151c0:	4490      	add	r8, r2
 80151c2:	bf08      	it	eq
 80151c4:	230f      	moveq	r3, #15
 80151c6:	4543      	cmp	r3, r8
 80151c8:	d31b      	bcc.n	8015202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 80151ca:	19f3      	adds	r3, r6, r7
 80151cc:	1ad2      	subs	r2, r2, r3
 80151ce:	d006      	beq.n	80151de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80151d0:	42ae      	cmp	r6, r5
 80151d2:	d004      	beq.n	80151de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80151d4:	4438      	add	r0, r7
 80151d6:	1981      	adds	r1, r0, r6
 80151d8:	4428      	add	r0, r5
 80151da:	f7ff ff73 	bl	80150c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80151de:	b135      	cbz	r5, 80151ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 80151e0:	6820      	ldr	r0, [r4, #0]
 80151e2:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80151e6:	4629      	mov	r1, r5
 80151e8:	4438      	add	r0, r7
 80151ea:	f7ff ff77 	bl	80150dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	f8c4 8004 	str.w	r8, [r4, #4]
 80151f4:	2200      	movs	r2, #0
 80151f6:	4620      	mov	r0, r4
 80151f8:	f803 2008 	strb.w	r2, [r3, r8]
 80151fc:	b002      	add	sp, #8
 80151fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015202:	9500      	str	r5, [sp, #0]
 8015204:	2300      	movs	r3, #0
 8015206:	4632      	mov	r2, r6
 8015208:	4639      	mov	r1, r7
 801520a:	4620      	mov	r0, r4
 801520c:	f7ff ff77 	bl	80150fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8015210:	e7e5      	b.n	80151de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8015212:	bf00      	nop
 8015214:	0801856c 	.word	0x0801856c

08015218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
 8015218:	b507      	push	{r0, r1, r2, lr}
 801521a:	9200      	str	r2, [sp, #0]
 801521c:	460b      	mov	r3, r1
 801521e:	6842      	ldr	r2, [r0, #4]
 8015220:	2100      	movs	r1, #0
 8015222:	f7ff ffb9 	bl	8015198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8015226:	b003      	add	sp, #12
 8015228:	f85d fb04 	ldr.w	pc, [sp], #4

0801522c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801522c:	6800      	ldr	r0, [r0, #0]
 801522e:	4770      	bx	lr

08015230 <_ZdlPv>:
 8015230:	f000 b85a 	b.w	80152e8 <free>

08015234 <_Znwj>:
 8015234:	2801      	cmp	r0, #1
 8015236:	bf38      	it	cc
 8015238:	2001      	movcc	r0, #1
 801523a:	b510      	push	{r4, lr}
 801523c:	4604      	mov	r4, r0
 801523e:	4620      	mov	r0, r4
 8015240:	f000 f84a 	bl	80152d8 <malloc>
 8015244:	b930      	cbnz	r0, 8015254 <_Znwj+0x20>
 8015246:	f000 f80d 	bl	8015264 <_ZSt15get_new_handlerv>
 801524a:	b908      	cbnz	r0, 8015250 <_Znwj+0x1c>
 801524c:	f000 f812 	bl	8015274 <abort>
 8015250:	4780      	blx	r0
 8015252:	e7f4      	b.n	801523e <_Znwj+0xa>
 8015254:	bd10      	pop	{r4, pc}

08015256 <_ZSt17__throw_bad_allocv>:
 8015256:	b508      	push	{r3, lr}
 8015258:	f000 f80c 	bl	8015274 <abort>

0801525c <_ZSt20__throw_length_errorPKc>:
 801525c:	b508      	push	{r3, lr}
 801525e:	f000 f809 	bl	8015274 <abort>
	...

08015264 <_ZSt15get_new_handlerv>:
 8015264:	4b02      	ldr	r3, [pc, #8]	; (8015270 <_ZSt15get_new_handlerv+0xc>)
 8015266:	6818      	ldr	r0, [r3, #0]
 8015268:	f3bf 8f5b 	dmb	ish
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop
 8015270:	200024d4 	.word	0x200024d4

08015274 <abort>:
 8015274:	b508      	push	{r3, lr}
 8015276:	2006      	movs	r0, #6
 8015278:	f000 fe7e 	bl	8015f78 <raise>
 801527c:	2001      	movs	r0, #1
 801527e:	f7f1 fb9d 	bl	80069bc <_exit>
	...

08015284 <__errno>:
 8015284:	4b01      	ldr	r3, [pc, #4]	; (801528c <__errno+0x8>)
 8015286:	6818      	ldr	r0, [r3, #0]
 8015288:	4770      	bx	lr
 801528a:	bf00      	nop
 801528c:	20000184 	.word	0x20000184

08015290 <__libc_init_array>:
 8015290:	b570      	push	{r4, r5, r6, lr}
 8015292:	4d0d      	ldr	r5, [pc, #52]	; (80152c8 <__libc_init_array+0x38>)
 8015294:	4c0d      	ldr	r4, [pc, #52]	; (80152cc <__libc_init_array+0x3c>)
 8015296:	1b64      	subs	r4, r4, r5
 8015298:	10a4      	asrs	r4, r4, #2
 801529a:	2600      	movs	r6, #0
 801529c:	42a6      	cmp	r6, r4
 801529e:	d109      	bne.n	80152b4 <__libc_init_array+0x24>
 80152a0:	4d0b      	ldr	r5, [pc, #44]	; (80152d0 <__libc_init_array+0x40>)
 80152a2:	4c0c      	ldr	r4, [pc, #48]	; (80152d4 <__libc_init_array+0x44>)
 80152a4:	f002 fdde 	bl	8017e64 <_init>
 80152a8:	1b64      	subs	r4, r4, r5
 80152aa:	10a4      	asrs	r4, r4, #2
 80152ac:	2600      	movs	r6, #0
 80152ae:	42a6      	cmp	r6, r4
 80152b0:	d105      	bne.n	80152be <__libc_init_array+0x2e>
 80152b2:	bd70      	pop	{r4, r5, r6, pc}
 80152b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80152b8:	4798      	blx	r3
 80152ba:	3601      	adds	r6, #1
 80152bc:	e7ee      	b.n	801529c <__libc_init_array+0xc>
 80152be:	f855 3b04 	ldr.w	r3, [r5], #4
 80152c2:	4798      	blx	r3
 80152c4:	3601      	adds	r6, #1
 80152c6:	e7f2      	b.n	80152ae <__libc_init_array+0x1e>
 80152c8:	0801896c 	.word	0x0801896c
 80152cc:	0801896c 	.word	0x0801896c
 80152d0:	0801896c 	.word	0x0801896c
 80152d4:	08018970 	.word	0x08018970

080152d8 <malloc>:
 80152d8:	4b02      	ldr	r3, [pc, #8]	; (80152e4 <malloc+0xc>)
 80152da:	4601      	mov	r1, r0
 80152dc:	6818      	ldr	r0, [r3, #0]
 80152de:	f000 b8a7 	b.w	8015430 <_malloc_r>
 80152e2:	bf00      	nop
 80152e4:	20000184 	.word	0x20000184

080152e8 <free>:
 80152e8:	4b02      	ldr	r3, [pc, #8]	; (80152f4 <free+0xc>)
 80152ea:	4601      	mov	r1, r0
 80152ec:	6818      	ldr	r0, [r3, #0]
 80152ee:	f000 b833 	b.w	8015358 <_free_r>
 80152f2:	bf00      	nop
 80152f4:	20000184 	.word	0x20000184

080152f8 <memcpy>:
 80152f8:	440a      	add	r2, r1
 80152fa:	4291      	cmp	r1, r2
 80152fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8015300:	d100      	bne.n	8015304 <memcpy+0xc>
 8015302:	4770      	bx	lr
 8015304:	b510      	push	{r4, lr}
 8015306:	f811 4b01 	ldrb.w	r4, [r1], #1
 801530a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801530e:	4291      	cmp	r1, r2
 8015310:	d1f9      	bne.n	8015306 <memcpy+0xe>
 8015312:	bd10      	pop	{r4, pc}

08015314 <memmove>:
 8015314:	4288      	cmp	r0, r1
 8015316:	b510      	push	{r4, lr}
 8015318:	eb01 0402 	add.w	r4, r1, r2
 801531c:	d902      	bls.n	8015324 <memmove+0x10>
 801531e:	4284      	cmp	r4, r0
 8015320:	4623      	mov	r3, r4
 8015322:	d807      	bhi.n	8015334 <memmove+0x20>
 8015324:	1e43      	subs	r3, r0, #1
 8015326:	42a1      	cmp	r1, r4
 8015328:	d008      	beq.n	801533c <memmove+0x28>
 801532a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801532e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015332:	e7f8      	b.n	8015326 <memmove+0x12>
 8015334:	4402      	add	r2, r0
 8015336:	4601      	mov	r1, r0
 8015338:	428a      	cmp	r2, r1
 801533a:	d100      	bne.n	801533e <memmove+0x2a>
 801533c:	bd10      	pop	{r4, pc}
 801533e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015346:	e7f7      	b.n	8015338 <memmove+0x24>

08015348 <memset>:
 8015348:	4402      	add	r2, r0
 801534a:	4603      	mov	r3, r0
 801534c:	4293      	cmp	r3, r2
 801534e:	d100      	bne.n	8015352 <memset+0xa>
 8015350:	4770      	bx	lr
 8015352:	f803 1b01 	strb.w	r1, [r3], #1
 8015356:	e7f9      	b.n	801534c <memset+0x4>

08015358 <_free_r>:
 8015358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801535a:	2900      	cmp	r1, #0
 801535c:	d044      	beq.n	80153e8 <_free_r+0x90>
 801535e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015362:	9001      	str	r0, [sp, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	f1a1 0404 	sub.w	r4, r1, #4
 801536a:	bfb8      	it	lt
 801536c:	18e4      	addlt	r4, r4, r3
 801536e:	f001 ff7d 	bl	801726c <__malloc_lock>
 8015372:	4a1e      	ldr	r2, [pc, #120]	; (80153ec <_free_r+0x94>)
 8015374:	9801      	ldr	r0, [sp, #4]
 8015376:	6813      	ldr	r3, [r2, #0]
 8015378:	b933      	cbnz	r3, 8015388 <_free_r+0x30>
 801537a:	6063      	str	r3, [r4, #4]
 801537c:	6014      	str	r4, [r2, #0]
 801537e:	b003      	add	sp, #12
 8015380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015384:	f001 bf78 	b.w	8017278 <__malloc_unlock>
 8015388:	42a3      	cmp	r3, r4
 801538a:	d908      	bls.n	801539e <_free_r+0x46>
 801538c:	6825      	ldr	r5, [r4, #0]
 801538e:	1961      	adds	r1, r4, r5
 8015390:	428b      	cmp	r3, r1
 8015392:	bf01      	itttt	eq
 8015394:	6819      	ldreq	r1, [r3, #0]
 8015396:	685b      	ldreq	r3, [r3, #4]
 8015398:	1949      	addeq	r1, r1, r5
 801539a:	6021      	streq	r1, [r4, #0]
 801539c:	e7ed      	b.n	801537a <_free_r+0x22>
 801539e:	461a      	mov	r2, r3
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	b10b      	cbz	r3, 80153a8 <_free_r+0x50>
 80153a4:	42a3      	cmp	r3, r4
 80153a6:	d9fa      	bls.n	801539e <_free_r+0x46>
 80153a8:	6811      	ldr	r1, [r2, #0]
 80153aa:	1855      	adds	r5, r2, r1
 80153ac:	42a5      	cmp	r5, r4
 80153ae:	d10b      	bne.n	80153c8 <_free_r+0x70>
 80153b0:	6824      	ldr	r4, [r4, #0]
 80153b2:	4421      	add	r1, r4
 80153b4:	1854      	adds	r4, r2, r1
 80153b6:	42a3      	cmp	r3, r4
 80153b8:	6011      	str	r1, [r2, #0]
 80153ba:	d1e0      	bne.n	801537e <_free_r+0x26>
 80153bc:	681c      	ldr	r4, [r3, #0]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	6053      	str	r3, [r2, #4]
 80153c2:	4421      	add	r1, r4
 80153c4:	6011      	str	r1, [r2, #0]
 80153c6:	e7da      	b.n	801537e <_free_r+0x26>
 80153c8:	d902      	bls.n	80153d0 <_free_r+0x78>
 80153ca:	230c      	movs	r3, #12
 80153cc:	6003      	str	r3, [r0, #0]
 80153ce:	e7d6      	b.n	801537e <_free_r+0x26>
 80153d0:	6825      	ldr	r5, [r4, #0]
 80153d2:	1961      	adds	r1, r4, r5
 80153d4:	428b      	cmp	r3, r1
 80153d6:	bf04      	itt	eq
 80153d8:	6819      	ldreq	r1, [r3, #0]
 80153da:	685b      	ldreq	r3, [r3, #4]
 80153dc:	6063      	str	r3, [r4, #4]
 80153de:	bf04      	itt	eq
 80153e0:	1949      	addeq	r1, r1, r5
 80153e2:	6021      	streq	r1, [r4, #0]
 80153e4:	6054      	str	r4, [r2, #4]
 80153e6:	e7ca      	b.n	801537e <_free_r+0x26>
 80153e8:	b003      	add	sp, #12
 80153ea:	bd30      	pop	{r4, r5, pc}
 80153ec:	200024d8 	.word	0x200024d8

080153f0 <sbrk_aligned>:
 80153f0:	b570      	push	{r4, r5, r6, lr}
 80153f2:	4e0e      	ldr	r6, [pc, #56]	; (801542c <sbrk_aligned+0x3c>)
 80153f4:	460c      	mov	r4, r1
 80153f6:	6831      	ldr	r1, [r6, #0]
 80153f8:	4605      	mov	r5, r0
 80153fa:	b911      	cbnz	r1, 8015402 <sbrk_aligned+0x12>
 80153fc:	f000 fd84 	bl	8015f08 <_sbrk_r>
 8015400:	6030      	str	r0, [r6, #0]
 8015402:	4621      	mov	r1, r4
 8015404:	4628      	mov	r0, r5
 8015406:	f000 fd7f 	bl	8015f08 <_sbrk_r>
 801540a:	1c43      	adds	r3, r0, #1
 801540c:	d00a      	beq.n	8015424 <sbrk_aligned+0x34>
 801540e:	1cc4      	adds	r4, r0, #3
 8015410:	f024 0403 	bic.w	r4, r4, #3
 8015414:	42a0      	cmp	r0, r4
 8015416:	d007      	beq.n	8015428 <sbrk_aligned+0x38>
 8015418:	1a21      	subs	r1, r4, r0
 801541a:	4628      	mov	r0, r5
 801541c:	f000 fd74 	bl	8015f08 <_sbrk_r>
 8015420:	3001      	adds	r0, #1
 8015422:	d101      	bne.n	8015428 <sbrk_aligned+0x38>
 8015424:	f04f 34ff 	mov.w	r4, #4294967295
 8015428:	4620      	mov	r0, r4
 801542a:	bd70      	pop	{r4, r5, r6, pc}
 801542c:	200024dc 	.word	0x200024dc

08015430 <_malloc_r>:
 8015430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015434:	1ccd      	adds	r5, r1, #3
 8015436:	f025 0503 	bic.w	r5, r5, #3
 801543a:	3508      	adds	r5, #8
 801543c:	2d0c      	cmp	r5, #12
 801543e:	bf38      	it	cc
 8015440:	250c      	movcc	r5, #12
 8015442:	2d00      	cmp	r5, #0
 8015444:	4607      	mov	r7, r0
 8015446:	db01      	blt.n	801544c <_malloc_r+0x1c>
 8015448:	42a9      	cmp	r1, r5
 801544a:	d905      	bls.n	8015458 <_malloc_r+0x28>
 801544c:	230c      	movs	r3, #12
 801544e:	603b      	str	r3, [r7, #0]
 8015450:	2600      	movs	r6, #0
 8015452:	4630      	mov	r0, r6
 8015454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015458:	4e2e      	ldr	r6, [pc, #184]	; (8015514 <_malloc_r+0xe4>)
 801545a:	f001 ff07 	bl	801726c <__malloc_lock>
 801545e:	6833      	ldr	r3, [r6, #0]
 8015460:	461c      	mov	r4, r3
 8015462:	bb34      	cbnz	r4, 80154b2 <_malloc_r+0x82>
 8015464:	4629      	mov	r1, r5
 8015466:	4638      	mov	r0, r7
 8015468:	f7ff ffc2 	bl	80153f0 <sbrk_aligned>
 801546c:	1c43      	adds	r3, r0, #1
 801546e:	4604      	mov	r4, r0
 8015470:	d14d      	bne.n	801550e <_malloc_r+0xde>
 8015472:	6834      	ldr	r4, [r6, #0]
 8015474:	4626      	mov	r6, r4
 8015476:	2e00      	cmp	r6, #0
 8015478:	d140      	bne.n	80154fc <_malloc_r+0xcc>
 801547a:	6823      	ldr	r3, [r4, #0]
 801547c:	4631      	mov	r1, r6
 801547e:	4638      	mov	r0, r7
 8015480:	eb04 0803 	add.w	r8, r4, r3
 8015484:	f000 fd40 	bl	8015f08 <_sbrk_r>
 8015488:	4580      	cmp	r8, r0
 801548a:	d13a      	bne.n	8015502 <_malloc_r+0xd2>
 801548c:	6821      	ldr	r1, [r4, #0]
 801548e:	3503      	adds	r5, #3
 8015490:	1a6d      	subs	r5, r5, r1
 8015492:	f025 0503 	bic.w	r5, r5, #3
 8015496:	3508      	adds	r5, #8
 8015498:	2d0c      	cmp	r5, #12
 801549a:	bf38      	it	cc
 801549c:	250c      	movcc	r5, #12
 801549e:	4629      	mov	r1, r5
 80154a0:	4638      	mov	r0, r7
 80154a2:	f7ff ffa5 	bl	80153f0 <sbrk_aligned>
 80154a6:	3001      	adds	r0, #1
 80154a8:	d02b      	beq.n	8015502 <_malloc_r+0xd2>
 80154aa:	6823      	ldr	r3, [r4, #0]
 80154ac:	442b      	add	r3, r5
 80154ae:	6023      	str	r3, [r4, #0]
 80154b0:	e00e      	b.n	80154d0 <_malloc_r+0xa0>
 80154b2:	6822      	ldr	r2, [r4, #0]
 80154b4:	1b52      	subs	r2, r2, r5
 80154b6:	d41e      	bmi.n	80154f6 <_malloc_r+0xc6>
 80154b8:	2a0b      	cmp	r2, #11
 80154ba:	d916      	bls.n	80154ea <_malloc_r+0xba>
 80154bc:	1961      	adds	r1, r4, r5
 80154be:	42a3      	cmp	r3, r4
 80154c0:	6025      	str	r5, [r4, #0]
 80154c2:	bf18      	it	ne
 80154c4:	6059      	strne	r1, [r3, #4]
 80154c6:	6863      	ldr	r3, [r4, #4]
 80154c8:	bf08      	it	eq
 80154ca:	6031      	streq	r1, [r6, #0]
 80154cc:	5162      	str	r2, [r4, r5]
 80154ce:	604b      	str	r3, [r1, #4]
 80154d0:	4638      	mov	r0, r7
 80154d2:	f104 060b 	add.w	r6, r4, #11
 80154d6:	f001 fecf 	bl	8017278 <__malloc_unlock>
 80154da:	f026 0607 	bic.w	r6, r6, #7
 80154de:	1d23      	adds	r3, r4, #4
 80154e0:	1af2      	subs	r2, r6, r3
 80154e2:	d0b6      	beq.n	8015452 <_malloc_r+0x22>
 80154e4:	1b9b      	subs	r3, r3, r6
 80154e6:	50a3      	str	r3, [r4, r2]
 80154e8:	e7b3      	b.n	8015452 <_malloc_r+0x22>
 80154ea:	6862      	ldr	r2, [r4, #4]
 80154ec:	42a3      	cmp	r3, r4
 80154ee:	bf0c      	ite	eq
 80154f0:	6032      	streq	r2, [r6, #0]
 80154f2:	605a      	strne	r2, [r3, #4]
 80154f4:	e7ec      	b.n	80154d0 <_malloc_r+0xa0>
 80154f6:	4623      	mov	r3, r4
 80154f8:	6864      	ldr	r4, [r4, #4]
 80154fa:	e7b2      	b.n	8015462 <_malloc_r+0x32>
 80154fc:	4634      	mov	r4, r6
 80154fe:	6876      	ldr	r6, [r6, #4]
 8015500:	e7b9      	b.n	8015476 <_malloc_r+0x46>
 8015502:	230c      	movs	r3, #12
 8015504:	603b      	str	r3, [r7, #0]
 8015506:	4638      	mov	r0, r7
 8015508:	f001 feb6 	bl	8017278 <__malloc_unlock>
 801550c:	e7a1      	b.n	8015452 <_malloc_r+0x22>
 801550e:	6025      	str	r5, [r4, #0]
 8015510:	e7de      	b.n	80154d0 <_malloc_r+0xa0>
 8015512:	bf00      	nop
 8015514:	200024d8 	.word	0x200024d8

08015518 <__cvt>:
 8015518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801551c:	ec55 4b10 	vmov	r4, r5, d0
 8015520:	2d00      	cmp	r5, #0
 8015522:	460e      	mov	r6, r1
 8015524:	4619      	mov	r1, r3
 8015526:	462b      	mov	r3, r5
 8015528:	bfbb      	ittet	lt
 801552a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801552e:	461d      	movlt	r5, r3
 8015530:	2300      	movge	r3, #0
 8015532:	232d      	movlt	r3, #45	; 0x2d
 8015534:	700b      	strb	r3, [r1, #0]
 8015536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015538:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801553c:	4691      	mov	r9, r2
 801553e:	f023 0820 	bic.w	r8, r3, #32
 8015542:	bfbc      	itt	lt
 8015544:	4622      	movlt	r2, r4
 8015546:	4614      	movlt	r4, r2
 8015548:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801554c:	d005      	beq.n	801555a <__cvt+0x42>
 801554e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015552:	d100      	bne.n	8015556 <__cvt+0x3e>
 8015554:	3601      	adds	r6, #1
 8015556:	2102      	movs	r1, #2
 8015558:	e000      	b.n	801555c <__cvt+0x44>
 801555a:	2103      	movs	r1, #3
 801555c:	ab03      	add	r3, sp, #12
 801555e:	9301      	str	r3, [sp, #4]
 8015560:	ab02      	add	r3, sp, #8
 8015562:	9300      	str	r3, [sp, #0]
 8015564:	ec45 4b10 	vmov	d0, r4, r5
 8015568:	4653      	mov	r3, sl
 801556a:	4632      	mov	r2, r6
 801556c:	f000 fe6c 	bl	8016248 <_dtoa_r>
 8015570:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015574:	4607      	mov	r7, r0
 8015576:	d102      	bne.n	801557e <__cvt+0x66>
 8015578:	f019 0f01 	tst.w	r9, #1
 801557c:	d022      	beq.n	80155c4 <__cvt+0xac>
 801557e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015582:	eb07 0906 	add.w	r9, r7, r6
 8015586:	d110      	bne.n	80155aa <__cvt+0x92>
 8015588:	783b      	ldrb	r3, [r7, #0]
 801558a:	2b30      	cmp	r3, #48	; 0x30
 801558c:	d10a      	bne.n	80155a4 <__cvt+0x8c>
 801558e:	2200      	movs	r2, #0
 8015590:	2300      	movs	r3, #0
 8015592:	4620      	mov	r0, r4
 8015594:	4629      	mov	r1, r5
 8015596:	f7eb fabf 	bl	8000b18 <__aeabi_dcmpeq>
 801559a:	b918      	cbnz	r0, 80155a4 <__cvt+0x8c>
 801559c:	f1c6 0601 	rsb	r6, r6, #1
 80155a0:	f8ca 6000 	str.w	r6, [sl]
 80155a4:	f8da 3000 	ldr.w	r3, [sl]
 80155a8:	4499      	add	r9, r3
 80155aa:	2200      	movs	r2, #0
 80155ac:	2300      	movs	r3, #0
 80155ae:	4620      	mov	r0, r4
 80155b0:	4629      	mov	r1, r5
 80155b2:	f7eb fab1 	bl	8000b18 <__aeabi_dcmpeq>
 80155b6:	b108      	cbz	r0, 80155bc <__cvt+0xa4>
 80155b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80155bc:	2230      	movs	r2, #48	; 0x30
 80155be:	9b03      	ldr	r3, [sp, #12]
 80155c0:	454b      	cmp	r3, r9
 80155c2:	d307      	bcc.n	80155d4 <__cvt+0xbc>
 80155c4:	9b03      	ldr	r3, [sp, #12]
 80155c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155c8:	1bdb      	subs	r3, r3, r7
 80155ca:	4638      	mov	r0, r7
 80155cc:	6013      	str	r3, [r2, #0]
 80155ce:	b004      	add	sp, #16
 80155d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155d4:	1c59      	adds	r1, r3, #1
 80155d6:	9103      	str	r1, [sp, #12]
 80155d8:	701a      	strb	r2, [r3, #0]
 80155da:	e7f0      	b.n	80155be <__cvt+0xa6>

080155dc <__exponent>:
 80155dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155de:	4603      	mov	r3, r0
 80155e0:	2900      	cmp	r1, #0
 80155e2:	bfb8      	it	lt
 80155e4:	4249      	neglt	r1, r1
 80155e6:	f803 2b02 	strb.w	r2, [r3], #2
 80155ea:	bfb4      	ite	lt
 80155ec:	222d      	movlt	r2, #45	; 0x2d
 80155ee:	222b      	movge	r2, #43	; 0x2b
 80155f0:	2909      	cmp	r1, #9
 80155f2:	7042      	strb	r2, [r0, #1]
 80155f4:	dd2a      	ble.n	801564c <__exponent+0x70>
 80155f6:	f10d 0407 	add.w	r4, sp, #7
 80155fa:	46a4      	mov	ip, r4
 80155fc:	270a      	movs	r7, #10
 80155fe:	46a6      	mov	lr, r4
 8015600:	460a      	mov	r2, r1
 8015602:	fb91 f6f7 	sdiv	r6, r1, r7
 8015606:	fb07 1516 	mls	r5, r7, r6, r1
 801560a:	3530      	adds	r5, #48	; 0x30
 801560c:	2a63      	cmp	r2, #99	; 0x63
 801560e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015612:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015616:	4631      	mov	r1, r6
 8015618:	dcf1      	bgt.n	80155fe <__exponent+0x22>
 801561a:	3130      	adds	r1, #48	; 0x30
 801561c:	f1ae 0502 	sub.w	r5, lr, #2
 8015620:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015624:	1c44      	adds	r4, r0, #1
 8015626:	4629      	mov	r1, r5
 8015628:	4561      	cmp	r1, ip
 801562a:	d30a      	bcc.n	8015642 <__exponent+0x66>
 801562c:	f10d 0209 	add.w	r2, sp, #9
 8015630:	eba2 020e 	sub.w	r2, r2, lr
 8015634:	4565      	cmp	r5, ip
 8015636:	bf88      	it	hi
 8015638:	2200      	movhi	r2, #0
 801563a:	4413      	add	r3, r2
 801563c:	1a18      	subs	r0, r3, r0
 801563e:	b003      	add	sp, #12
 8015640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015646:	f804 2f01 	strb.w	r2, [r4, #1]!
 801564a:	e7ed      	b.n	8015628 <__exponent+0x4c>
 801564c:	2330      	movs	r3, #48	; 0x30
 801564e:	3130      	adds	r1, #48	; 0x30
 8015650:	7083      	strb	r3, [r0, #2]
 8015652:	70c1      	strb	r1, [r0, #3]
 8015654:	1d03      	adds	r3, r0, #4
 8015656:	e7f1      	b.n	801563c <__exponent+0x60>

08015658 <_printf_float>:
 8015658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565c:	ed2d 8b02 	vpush	{d8}
 8015660:	b08d      	sub	sp, #52	; 0x34
 8015662:	460c      	mov	r4, r1
 8015664:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015668:	4616      	mov	r6, r2
 801566a:	461f      	mov	r7, r3
 801566c:	4605      	mov	r5, r0
 801566e:	f001 fd91 	bl	8017194 <_localeconv_r>
 8015672:	f8d0 a000 	ldr.w	sl, [r0]
 8015676:	4650      	mov	r0, sl
 8015678:	f7ea fe22 	bl	80002c0 <strlen>
 801567c:	2300      	movs	r3, #0
 801567e:	930a      	str	r3, [sp, #40]	; 0x28
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	9305      	str	r3, [sp, #20]
 8015684:	f8d8 3000 	ldr.w	r3, [r8]
 8015688:	f894 b018 	ldrb.w	fp, [r4, #24]
 801568c:	3307      	adds	r3, #7
 801568e:	f023 0307 	bic.w	r3, r3, #7
 8015692:	f103 0208 	add.w	r2, r3, #8
 8015696:	f8c8 2000 	str.w	r2, [r8]
 801569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80156a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80156a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80156aa:	9307      	str	r3, [sp, #28]
 80156ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80156b0:	ee08 0a10 	vmov	s16, r0
 80156b4:	4b9f      	ldr	r3, [pc, #636]	; (8015934 <_printf_float+0x2dc>)
 80156b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156ba:	f04f 32ff 	mov.w	r2, #4294967295
 80156be:	f7eb fa5d 	bl	8000b7c <__aeabi_dcmpun>
 80156c2:	bb88      	cbnz	r0, 8015728 <_printf_float+0xd0>
 80156c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156c8:	4b9a      	ldr	r3, [pc, #616]	; (8015934 <_printf_float+0x2dc>)
 80156ca:	f04f 32ff 	mov.w	r2, #4294967295
 80156ce:	f7eb fa37 	bl	8000b40 <__aeabi_dcmple>
 80156d2:	bb48      	cbnz	r0, 8015728 <_printf_float+0xd0>
 80156d4:	2200      	movs	r2, #0
 80156d6:	2300      	movs	r3, #0
 80156d8:	4640      	mov	r0, r8
 80156da:	4649      	mov	r1, r9
 80156dc:	f7eb fa26 	bl	8000b2c <__aeabi_dcmplt>
 80156e0:	b110      	cbz	r0, 80156e8 <_printf_float+0x90>
 80156e2:	232d      	movs	r3, #45	; 0x2d
 80156e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156e8:	4b93      	ldr	r3, [pc, #588]	; (8015938 <_printf_float+0x2e0>)
 80156ea:	4894      	ldr	r0, [pc, #592]	; (801593c <_printf_float+0x2e4>)
 80156ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80156f0:	bf94      	ite	ls
 80156f2:	4698      	movls	r8, r3
 80156f4:	4680      	movhi	r8, r0
 80156f6:	2303      	movs	r3, #3
 80156f8:	6123      	str	r3, [r4, #16]
 80156fa:	9b05      	ldr	r3, [sp, #20]
 80156fc:	f023 0204 	bic.w	r2, r3, #4
 8015700:	6022      	str	r2, [r4, #0]
 8015702:	f04f 0900 	mov.w	r9, #0
 8015706:	9700      	str	r7, [sp, #0]
 8015708:	4633      	mov	r3, r6
 801570a:	aa0b      	add	r2, sp, #44	; 0x2c
 801570c:	4621      	mov	r1, r4
 801570e:	4628      	mov	r0, r5
 8015710:	f000 f9d8 	bl	8015ac4 <_printf_common>
 8015714:	3001      	adds	r0, #1
 8015716:	f040 8090 	bne.w	801583a <_printf_float+0x1e2>
 801571a:	f04f 30ff 	mov.w	r0, #4294967295
 801571e:	b00d      	add	sp, #52	; 0x34
 8015720:	ecbd 8b02 	vpop	{d8}
 8015724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015728:	4642      	mov	r2, r8
 801572a:	464b      	mov	r3, r9
 801572c:	4640      	mov	r0, r8
 801572e:	4649      	mov	r1, r9
 8015730:	f7eb fa24 	bl	8000b7c <__aeabi_dcmpun>
 8015734:	b140      	cbz	r0, 8015748 <_printf_float+0xf0>
 8015736:	464b      	mov	r3, r9
 8015738:	2b00      	cmp	r3, #0
 801573a:	bfbc      	itt	lt
 801573c:	232d      	movlt	r3, #45	; 0x2d
 801573e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015742:	487f      	ldr	r0, [pc, #508]	; (8015940 <_printf_float+0x2e8>)
 8015744:	4b7f      	ldr	r3, [pc, #508]	; (8015944 <_printf_float+0x2ec>)
 8015746:	e7d1      	b.n	80156ec <_printf_float+0x94>
 8015748:	6863      	ldr	r3, [r4, #4]
 801574a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801574e:	9206      	str	r2, [sp, #24]
 8015750:	1c5a      	adds	r2, r3, #1
 8015752:	d13f      	bne.n	80157d4 <_printf_float+0x17c>
 8015754:	2306      	movs	r3, #6
 8015756:	6063      	str	r3, [r4, #4]
 8015758:	9b05      	ldr	r3, [sp, #20]
 801575a:	6861      	ldr	r1, [r4, #4]
 801575c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015760:	2300      	movs	r3, #0
 8015762:	9303      	str	r3, [sp, #12]
 8015764:	ab0a      	add	r3, sp, #40	; 0x28
 8015766:	e9cd b301 	strd	fp, r3, [sp, #4]
 801576a:	ab09      	add	r3, sp, #36	; 0x24
 801576c:	ec49 8b10 	vmov	d0, r8, r9
 8015770:	9300      	str	r3, [sp, #0]
 8015772:	6022      	str	r2, [r4, #0]
 8015774:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015778:	4628      	mov	r0, r5
 801577a:	f7ff fecd 	bl	8015518 <__cvt>
 801577e:	9b06      	ldr	r3, [sp, #24]
 8015780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015782:	2b47      	cmp	r3, #71	; 0x47
 8015784:	4680      	mov	r8, r0
 8015786:	d108      	bne.n	801579a <_printf_float+0x142>
 8015788:	1cc8      	adds	r0, r1, #3
 801578a:	db02      	blt.n	8015792 <_printf_float+0x13a>
 801578c:	6863      	ldr	r3, [r4, #4]
 801578e:	4299      	cmp	r1, r3
 8015790:	dd41      	ble.n	8015816 <_printf_float+0x1be>
 8015792:	f1ab 0b02 	sub.w	fp, fp, #2
 8015796:	fa5f fb8b 	uxtb.w	fp, fp
 801579a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801579e:	d820      	bhi.n	80157e2 <_printf_float+0x18a>
 80157a0:	3901      	subs	r1, #1
 80157a2:	465a      	mov	r2, fp
 80157a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80157a8:	9109      	str	r1, [sp, #36]	; 0x24
 80157aa:	f7ff ff17 	bl	80155dc <__exponent>
 80157ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157b0:	1813      	adds	r3, r2, r0
 80157b2:	2a01      	cmp	r2, #1
 80157b4:	4681      	mov	r9, r0
 80157b6:	6123      	str	r3, [r4, #16]
 80157b8:	dc02      	bgt.n	80157c0 <_printf_float+0x168>
 80157ba:	6822      	ldr	r2, [r4, #0]
 80157bc:	07d2      	lsls	r2, r2, #31
 80157be:	d501      	bpl.n	80157c4 <_printf_float+0x16c>
 80157c0:	3301      	adds	r3, #1
 80157c2:	6123      	str	r3, [r4, #16]
 80157c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d09c      	beq.n	8015706 <_printf_float+0xae>
 80157cc:	232d      	movs	r3, #45	; 0x2d
 80157ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157d2:	e798      	b.n	8015706 <_printf_float+0xae>
 80157d4:	9a06      	ldr	r2, [sp, #24]
 80157d6:	2a47      	cmp	r2, #71	; 0x47
 80157d8:	d1be      	bne.n	8015758 <_printf_float+0x100>
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d1bc      	bne.n	8015758 <_printf_float+0x100>
 80157de:	2301      	movs	r3, #1
 80157e0:	e7b9      	b.n	8015756 <_printf_float+0xfe>
 80157e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80157e6:	d118      	bne.n	801581a <_printf_float+0x1c2>
 80157e8:	2900      	cmp	r1, #0
 80157ea:	6863      	ldr	r3, [r4, #4]
 80157ec:	dd0b      	ble.n	8015806 <_printf_float+0x1ae>
 80157ee:	6121      	str	r1, [r4, #16]
 80157f0:	b913      	cbnz	r3, 80157f8 <_printf_float+0x1a0>
 80157f2:	6822      	ldr	r2, [r4, #0]
 80157f4:	07d0      	lsls	r0, r2, #31
 80157f6:	d502      	bpl.n	80157fe <_printf_float+0x1a6>
 80157f8:	3301      	adds	r3, #1
 80157fa:	440b      	add	r3, r1
 80157fc:	6123      	str	r3, [r4, #16]
 80157fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8015800:	f04f 0900 	mov.w	r9, #0
 8015804:	e7de      	b.n	80157c4 <_printf_float+0x16c>
 8015806:	b913      	cbnz	r3, 801580e <_printf_float+0x1b6>
 8015808:	6822      	ldr	r2, [r4, #0]
 801580a:	07d2      	lsls	r2, r2, #31
 801580c:	d501      	bpl.n	8015812 <_printf_float+0x1ba>
 801580e:	3302      	adds	r3, #2
 8015810:	e7f4      	b.n	80157fc <_printf_float+0x1a4>
 8015812:	2301      	movs	r3, #1
 8015814:	e7f2      	b.n	80157fc <_printf_float+0x1a4>
 8015816:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801581a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801581c:	4299      	cmp	r1, r3
 801581e:	db05      	blt.n	801582c <_printf_float+0x1d4>
 8015820:	6823      	ldr	r3, [r4, #0]
 8015822:	6121      	str	r1, [r4, #16]
 8015824:	07d8      	lsls	r0, r3, #31
 8015826:	d5ea      	bpl.n	80157fe <_printf_float+0x1a6>
 8015828:	1c4b      	adds	r3, r1, #1
 801582a:	e7e7      	b.n	80157fc <_printf_float+0x1a4>
 801582c:	2900      	cmp	r1, #0
 801582e:	bfd4      	ite	le
 8015830:	f1c1 0202 	rsble	r2, r1, #2
 8015834:	2201      	movgt	r2, #1
 8015836:	4413      	add	r3, r2
 8015838:	e7e0      	b.n	80157fc <_printf_float+0x1a4>
 801583a:	6823      	ldr	r3, [r4, #0]
 801583c:	055a      	lsls	r2, r3, #21
 801583e:	d407      	bmi.n	8015850 <_printf_float+0x1f8>
 8015840:	6923      	ldr	r3, [r4, #16]
 8015842:	4642      	mov	r2, r8
 8015844:	4631      	mov	r1, r6
 8015846:	4628      	mov	r0, r5
 8015848:	47b8      	blx	r7
 801584a:	3001      	adds	r0, #1
 801584c:	d12c      	bne.n	80158a8 <_printf_float+0x250>
 801584e:	e764      	b.n	801571a <_printf_float+0xc2>
 8015850:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015854:	f240 80e0 	bls.w	8015a18 <_printf_float+0x3c0>
 8015858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801585c:	2200      	movs	r2, #0
 801585e:	2300      	movs	r3, #0
 8015860:	f7eb f95a 	bl	8000b18 <__aeabi_dcmpeq>
 8015864:	2800      	cmp	r0, #0
 8015866:	d034      	beq.n	80158d2 <_printf_float+0x27a>
 8015868:	4a37      	ldr	r2, [pc, #220]	; (8015948 <_printf_float+0x2f0>)
 801586a:	2301      	movs	r3, #1
 801586c:	4631      	mov	r1, r6
 801586e:	4628      	mov	r0, r5
 8015870:	47b8      	blx	r7
 8015872:	3001      	adds	r0, #1
 8015874:	f43f af51 	beq.w	801571a <_printf_float+0xc2>
 8015878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801587c:	429a      	cmp	r2, r3
 801587e:	db02      	blt.n	8015886 <_printf_float+0x22e>
 8015880:	6823      	ldr	r3, [r4, #0]
 8015882:	07d8      	lsls	r0, r3, #31
 8015884:	d510      	bpl.n	80158a8 <_printf_float+0x250>
 8015886:	ee18 3a10 	vmov	r3, s16
 801588a:	4652      	mov	r2, sl
 801588c:	4631      	mov	r1, r6
 801588e:	4628      	mov	r0, r5
 8015890:	47b8      	blx	r7
 8015892:	3001      	adds	r0, #1
 8015894:	f43f af41 	beq.w	801571a <_printf_float+0xc2>
 8015898:	f04f 0800 	mov.w	r8, #0
 801589c:	f104 091a 	add.w	r9, r4, #26
 80158a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158a2:	3b01      	subs	r3, #1
 80158a4:	4543      	cmp	r3, r8
 80158a6:	dc09      	bgt.n	80158bc <_printf_float+0x264>
 80158a8:	6823      	ldr	r3, [r4, #0]
 80158aa:	079b      	lsls	r3, r3, #30
 80158ac:	f100 8105 	bmi.w	8015aba <_printf_float+0x462>
 80158b0:	68e0      	ldr	r0, [r4, #12]
 80158b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158b4:	4298      	cmp	r0, r3
 80158b6:	bfb8      	it	lt
 80158b8:	4618      	movlt	r0, r3
 80158ba:	e730      	b.n	801571e <_printf_float+0xc6>
 80158bc:	2301      	movs	r3, #1
 80158be:	464a      	mov	r2, r9
 80158c0:	4631      	mov	r1, r6
 80158c2:	4628      	mov	r0, r5
 80158c4:	47b8      	blx	r7
 80158c6:	3001      	adds	r0, #1
 80158c8:	f43f af27 	beq.w	801571a <_printf_float+0xc2>
 80158cc:	f108 0801 	add.w	r8, r8, #1
 80158d0:	e7e6      	b.n	80158a0 <_printf_float+0x248>
 80158d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	dc39      	bgt.n	801594c <_printf_float+0x2f4>
 80158d8:	4a1b      	ldr	r2, [pc, #108]	; (8015948 <_printf_float+0x2f0>)
 80158da:	2301      	movs	r3, #1
 80158dc:	4631      	mov	r1, r6
 80158de:	4628      	mov	r0, r5
 80158e0:	47b8      	blx	r7
 80158e2:	3001      	adds	r0, #1
 80158e4:	f43f af19 	beq.w	801571a <_printf_float+0xc2>
 80158e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80158ec:	4313      	orrs	r3, r2
 80158ee:	d102      	bne.n	80158f6 <_printf_float+0x29e>
 80158f0:	6823      	ldr	r3, [r4, #0]
 80158f2:	07d9      	lsls	r1, r3, #31
 80158f4:	d5d8      	bpl.n	80158a8 <_printf_float+0x250>
 80158f6:	ee18 3a10 	vmov	r3, s16
 80158fa:	4652      	mov	r2, sl
 80158fc:	4631      	mov	r1, r6
 80158fe:	4628      	mov	r0, r5
 8015900:	47b8      	blx	r7
 8015902:	3001      	adds	r0, #1
 8015904:	f43f af09 	beq.w	801571a <_printf_float+0xc2>
 8015908:	f04f 0900 	mov.w	r9, #0
 801590c:	f104 0a1a 	add.w	sl, r4, #26
 8015910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015912:	425b      	negs	r3, r3
 8015914:	454b      	cmp	r3, r9
 8015916:	dc01      	bgt.n	801591c <_printf_float+0x2c4>
 8015918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801591a:	e792      	b.n	8015842 <_printf_float+0x1ea>
 801591c:	2301      	movs	r3, #1
 801591e:	4652      	mov	r2, sl
 8015920:	4631      	mov	r1, r6
 8015922:	4628      	mov	r0, r5
 8015924:	47b8      	blx	r7
 8015926:	3001      	adds	r0, #1
 8015928:	f43f aef7 	beq.w	801571a <_printf_float+0xc2>
 801592c:	f109 0901 	add.w	r9, r9, #1
 8015930:	e7ee      	b.n	8015910 <_printf_float+0x2b8>
 8015932:	bf00      	nop
 8015934:	7fefffff 	.word	0x7fefffff
 8015938:	08018590 	.word	0x08018590
 801593c:	08018594 	.word	0x08018594
 8015940:	0801859c 	.word	0x0801859c
 8015944:	08018598 	.word	0x08018598
 8015948:	080185a0 	.word	0x080185a0
 801594c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801594e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015950:	429a      	cmp	r2, r3
 8015952:	bfa8      	it	ge
 8015954:	461a      	movge	r2, r3
 8015956:	2a00      	cmp	r2, #0
 8015958:	4691      	mov	r9, r2
 801595a:	dc37      	bgt.n	80159cc <_printf_float+0x374>
 801595c:	f04f 0b00 	mov.w	fp, #0
 8015960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015964:	f104 021a 	add.w	r2, r4, #26
 8015968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801596a:	9305      	str	r3, [sp, #20]
 801596c:	eba3 0309 	sub.w	r3, r3, r9
 8015970:	455b      	cmp	r3, fp
 8015972:	dc33      	bgt.n	80159dc <_printf_float+0x384>
 8015974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015978:	429a      	cmp	r2, r3
 801597a:	db3b      	blt.n	80159f4 <_printf_float+0x39c>
 801597c:	6823      	ldr	r3, [r4, #0]
 801597e:	07da      	lsls	r2, r3, #31
 8015980:	d438      	bmi.n	80159f4 <_printf_float+0x39c>
 8015982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015984:	9a05      	ldr	r2, [sp, #20]
 8015986:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015988:	1a9a      	subs	r2, r3, r2
 801598a:	eba3 0901 	sub.w	r9, r3, r1
 801598e:	4591      	cmp	r9, r2
 8015990:	bfa8      	it	ge
 8015992:	4691      	movge	r9, r2
 8015994:	f1b9 0f00 	cmp.w	r9, #0
 8015998:	dc35      	bgt.n	8015a06 <_printf_float+0x3ae>
 801599a:	f04f 0800 	mov.w	r8, #0
 801599e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159a2:	f104 0a1a 	add.w	sl, r4, #26
 80159a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159aa:	1a9b      	subs	r3, r3, r2
 80159ac:	eba3 0309 	sub.w	r3, r3, r9
 80159b0:	4543      	cmp	r3, r8
 80159b2:	f77f af79 	ble.w	80158a8 <_printf_float+0x250>
 80159b6:	2301      	movs	r3, #1
 80159b8:	4652      	mov	r2, sl
 80159ba:	4631      	mov	r1, r6
 80159bc:	4628      	mov	r0, r5
 80159be:	47b8      	blx	r7
 80159c0:	3001      	adds	r0, #1
 80159c2:	f43f aeaa 	beq.w	801571a <_printf_float+0xc2>
 80159c6:	f108 0801 	add.w	r8, r8, #1
 80159ca:	e7ec      	b.n	80159a6 <_printf_float+0x34e>
 80159cc:	4613      	mov	r3, r2
 80159ce:	4631      	mov	r1, r6
 80159d0:	4642      	mov	r2, r8
 80159d2:	4628      	mov	r0, r5
 80159d4:	47b8      	blx	r7
 80159d6:	3001      	adds	r0, #1
 80159d8:	d1c0      	bne.n	801595c <_printf_float+0x304>
 80159da:	e69e      	b.n	801571a <_printf_float+0xc2>
 80159dc:	2301      	movs	r3, #1
 80159de:	4631      	mov	r1, r6
 80159e0:	4628      	mov	r0, r5
 80159e2:	9205      	str	r2, [sp, #20]
 80159e4:	47b8      	blx	r7
 80159e6:	3001      	adds	r0, #1
 80159e8:	f43f ae97 	beq.w	801571a <_printf_float+0xc2>
 80159ec:	9a05      	ldr	r2, [sp, #20]
 80159ee:	f10b 0b01 	add.w	fp, fp, #1
 80159f2:	e7b9      	b.n	8015968 <_printf_float+0x310>
 80159f4:	ee18 3a10 	vmov	r3, s16
 80159f8:	4652      	mov	r2, sl
 80159fa:	4631      	mov	r1, r6
 80159fc:	4628      	mov	r0, r5
 80159fe:	47b8      	blx	r7
 8015a00:	3001      	adds	r0, #1
 8015a02:	d1be      	bne.n	8015982 <_printf_float+0x32a>
 8015a04:	e689      	b.n	801571a <_printf_float+0xc2>
 8015a06:	9a05      	ldr	r2, [sp, #20]
 8015a08:	464b      	mov	r3, r9
 8015a0a:	4442      	add	r2, r8
 8015a0c:	4631      	mov	r1, r6
 8015a0e:	4628      	mov	r0, r5
 8015a10:	47b8      	blx	r7
 8015a12:	3001      	adds	r0, #1
 8015a14:	d1c1      	bne.n	801599a <_printf_float+0x342>
 8015a16:	e680      	b.n	801571a <_printf_float+0xc2>
 8015a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a1a:	2a01      	cmp	r2, #1
 8015a1c:	dc01      	bgt.n	8015a22 <_printf_float+0x3ca>
 8015a1e:	07db      	lsls	r3, r3, #31
 8015a20:	d538      	bpl.n	8015a94 <_printf_float+0x43c>
 8015a22:	2301      	movs	r3, #1
 8015a24:	4642      	mov	r2, r8
 8015a26:	4631      	mov	r1, r6
 8015a28:	4628      	mov	r0, r5
 8015a2a:	47b8      	blx	r7
 8015a2c:	3001      	adds	r0, #1
 8015a2e:	f43f ae74 	beq.w	801571a <_printf_float+0xc2>
 8015a32:	ee18 3a10 	vmov	r3, s16
 8015a36:	4652      	mov	r2, sl
 8015a38:	4631      	mov	r1, r6
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	47b8      	blx	r7
 8015a3e:	3001      	adds	r0, #1
 8015a40:	f43f ae6b 	beq.w	801571a <_printf_float+0xc2>
 8015a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015a48:	2200      	movs	r2, #0
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	f7eb f864 	bl	8000b18 <__aeabi_dcmpeq>
 8015a50:	b9d8      	cbnz	r0, 8015a8a <_printf_float+0x432>
 8015a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a54:	f108 0201 	add.w	r2, r8, #1
 8015a58:	3b01      	subs	r3, #1
 8015a5a:	4631      	mov	r1, r6
 8015a5c:	4628      	mov	r0, r5
 8015a5e:	47b8      	blx	r7
 8015a60:	3001      	adds	r0, #1
 8015a62:	d10e      	bne.n	8015a82 <_printf_float+0x42a>
 8015a64:	e659      	b.n	801571a <_printf_float+0xc2>
 8015a66:	2301      	movs	r3, #1
 8015a68:	4652      	mov	r2, sl
 8015a6a:	4631      	mov	r1, r6
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	47b8      	blx	r7
 8015a70:	3001      	adds	r0, #1
 8015a72:	f43f ae52 	beq.w	801571a <_printf_float+0xc2>
 8015a76:	f108 0801 	add.w	r8, r8, #1
 8015a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a7c:	3b01      	subs	r3, #1
 8015a7e:	4543      	cmp	r3, r8
 8015a80:	dcf1      	bgt.n	8015a66 <_printf_float+0x40e>
 8015a82:	464b      	mov	r3, r9
 8015a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015a88:	e6dc      	b.n	8015844 <_printf_float+0x1ec>
 8015a8a:	f04f 0800 	mov.w	r8, #0
 8015a8e:	f104 0a1a 	add.w	sl, r4, #26
 8015a92:	e7f2      	b.n	8015a7a <_printf_float+0x422>
 8015a94:	2301      	movs	r3, #1
 8015a96:	4642      	mov	r2, r8
 8015a98:	e7df      	b.n	8015a5a <_printf_float+0x402>
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	464a      	mov	r2, r9
 8015a9e:	4631      	mov	r1, r6
 8015aa0:	4628      	mov	r0, r5
 8015aa2:	47b8      	blx	r7
 8015aa4:	3001      	adds	r0, #1
 8015aa6:	f43f ae38 	beq.w	801571a <_printf_float+0xc2>
 8015aaa:	f108 0801 	add.w	r8, r8, #1
 8015aae:	68e3      	ldr	r3, [r4, #12]
 8015ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ab2:	1a5b      	subs	r3, r3, r1
 8015ab4:	4543      	cmp	r3, r8
 8015ab6:	dcf0      	bgt.n	8015a9a <_printf_float+0x442>
 8015ab8:	e6fa      	b.n	80158b0 <_printf_float+0x258>
 8015aba:	f04f 0800 	mov.w	r8, #0
 8015abe:	f104 0919 	add.w	r9, r4, #25
 8015ac2:	e7f4      	b.n	8015aae <_printf_float+0x456>

08015ac4 <_printf_common>:
 8015ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ac8:	4616      	mov	r6, r2
 8015aca:	4699      	mov	r9, r3
 8015acc:	688a      	ldr	r2, [r1, #8]
 8015ace:	690b      	ldr	r3, [r1, #16]
 8015ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ad4:	4293      	cmp	r3, r2
 8015ad6:	bfb8      	it	lt
 8015ad8:	4613      	movlt	r3, r2
 8015ada:	6033      	str	r3, [r6, #0]
 8015adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ae0:	4607      	mov	r7, r0
 8015ae2:	460c      	mov	r4, r1
 8015ae4:	b10a      	cbz	r2, 8015aea <_printf_common+0x26>
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	6033      	str	r3, [r6, #0]
 8015aea:	6823      	ldr	r3, [r4, #0]
 8015aec:	0699      	lsls	r1, r3, #26
 8015aee:	bf42      	ittt	mi
 8015af0:	6833      	ldrmi	r3, [r6, #0]
 8015af2:	3302      	addmi	r3, #2
 8015af4:	6033      	strmi	r3, [r6, #0]
 8015af6:	6825      	ldr	r5, [r4, #0]
 8015af8:	f015 0506 	ands.w	r5, r5, #6
 8015afc:	d106      	bne.n	8015b0c <_printf_common+0x48>
 8015afe:	f104 0a19 	add.w	sl, r4, #25
 8015b02:	68e3      	ldr	r3, [r4, #12]
 8015b04:	6832      	ldr	r2, [r6, #0]
 8015b06:	1a9b      	subs	r3, r3, r2
 8015b08:	42ab      	cmp	r3, r5
 8015b0a:	dc26      	bgt.n	8015b5a <_printf_common+0x96>
 8015b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b10:	1e13      	subs	r3, r2, #0
 8015b12:	6822      	ldr	r2, [r4, #0]
 8015b14:	bf18      	it	ne
 8015b16:	2301      	movne	r3, #1
 8015b18:	0692      	lsls	r2, r2, #26
 8015b1a:	d42b      	bmi.n	8015b74 <_printf_common+0xb0>
 8015b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b20:	4649      	mov	r1, r9
 8015b22:	4638      	mov	r0, r7
 8015b24:	47c0      	blx	r8
 8015b26:	3001      	adds	r0, #1
 8015b28:	d01e      	beq.n	8015b68 <_printf_common+0xa4>
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	68e5      	ldr	r5, [r4, #12]
 8015b2e:	6832      	ldr	r2, [r6, #0]
 8015b30:	f003 0306 	and.w	r3, r3, #6
 8015b34:	2b04      	cmp	r3, #4
 8015b36:	bf08      	it	eq
 8015b38:	1aad      	subeq	r5, r5, r2
 8015b3a:	68a3      	ldr	r3, [r4, #8]
 8015b3c:	6922      	ldr	r2, [r4, #16]
 8015b3e:	bf0c      	ite	eq
 8015b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b44:	2500      	movne	r5, #0
 8015b46:	4293      	cmp	r3, r2
 8015b48:	bfc4      	itt	gt
 8015b4a:	1a9b      	subgt	r3, r3, r2
 8015b4c:	18ed      	addgt	r5, r5, r3
 8015b4e:	2600      	movs	r6, #0
 8015b50:	341a      	adds	r4, #26
 8015b52:	42b5      	cmp	r5, r6
 8015b54:	d11a      	bne.n	8015b8c <_printf_common+0xc8>
 8015b56:	2000      	movs	r0, #0
 8015b58:	e008      	b.n	8015b6c <_printf_common+0xa8>
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	4652      	mov	r2, sl
 8015b5e:	4649      	mov	r1, r9
 8015b60:	4638      	mov	r0, r7
 8015b62:	47c0      	blx	r8
 8015b64:	3001      	adds	r0, #1
 8015b66:	d103      	bne.n	8015b70 <_printf_common+0xac>
 8015b68:	f04f 30ff 	mov.w	r0, #4294967295
 8015b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b70:	3501      	adds	r5, #1
 8015b72:	e7c6      	b.n	8015b02 <_printf_common+0x3e>
 8015b74:	18e1      	adds	r1, r4, r3
 8015b76:	1c5a      	adds	r2, r3, #1
 8015b78:	2030      	movs	r0, #48	; 0x30
 8015b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b7e:	4422      	add	r2, r4
 8015b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b88:	3302      	adds	r3, #2
 8015b8a:	e7c7      	b.n	8015b1c <_printf_common+0x58>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	4622      	mov	r2, r4
 8015b90:	4649      	mov	r1, r9
 8015b92:	4638      	mov	r0, r7
 8015b94:	47c0      	blx	r8
 8015b96:	3001      	adds	r0, #1
 8015b98:	d0e6      	beq.n	8015b68 <_printf_common+0xa4>
 8015b9a:	3601      	adds	r6, #1
 8015b9c:	e7d9      	b.n	8015b52 <_printf_common+0x8e>
	...

08015ba0 <_printf_i>:
 8015ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ba4:	7e0f      	ldrb	r7, [r1, #24]
 8015ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015ba8:	2f78      	cmp	r7, #120	; 0x78
 8015baa:	4691      	mov	r9, r2
 8015bac:	4680      	mov	r8, r0
 8015bae:	460c      	mov	r4, r1
 8015bb0:	469a      	mov	sl, r3
 8015bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015bb6:	d807      	bhi.n	8015bc8 <_printf_i+0x28>
 8015bb8:	2f62      	cmp	r7, #98	; 0x62
 8015bba:	d80a      	bhi.n	8015bd2 <_printf_i+0x32>
 8015bbc:	2f00      	cmp	r7, #0
 8015bbe:	f000 80d8 	beq.w	8015d72 <_printf_i+0x1d2>
 8015bc2:	2f58      	cmp	r7, #88	; 0x58
 8015bc4:	f000 80a3 	beq.w	8015d0e <_printf_i+0x16e>
 8015bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015bd0:	e03a      	b.n	8015c48 <_printf_i+0xa8>
 8015bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015bd6:	2b15      	cmp	r3, #21
 8015bd8:	d8f6      	bhi.n	8015bc8 <_printf_i+0x28>
 8015bda:	a101      	add	r1, pc, #4	; (adr r1, 8015be0 <_printf_i+0x40>)
 8015bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015be0:	08015c39 	.word	0x08015c39
 8015be4:	08015c4d 	.word	0x08015c4d
 8015be8:	08015bc9 	.word	0x08015bc9
 8015bec:	08015bc9 	.word	0x08015bc9
 8015bf0:	08015bc9 	.word	0x08015bc9
 8015bf4:	08015bc9 	.word	0x08015bc9
 8015bf8:	08015c4d 	.word	0x08015c4d
 8015bfc:	08015bc9 	.word	0x08015bc9
 8015c00:	08015bc9 	.word	0x08015bc9
 8015c04:	08015bc9 	.word	0x08015bc9
 8015c08:	08015bc9 	.word	0x08015bc9
 8015c0c:	08015d59 	.word	0x08015d59
 8015c10:	08015c7d 	.word	0x08015c7d
 8015c14:	08015d3b 	.word	0x08015d3b
 8015c18:	08015bc9 	.word	0x08015bc9
 8015c1c:	08015bc9 	.word	0x08015bc9
 8015c20:	08015d7b 	.word	0x08015d7b
 8015c24:	08015bc9 	.word	0x08015bc9
 8015c28:	08015c7d 	.word	0x08015c7d
 8015c2c:	08015bc9 	.word	0x08015bc9
 8015c30:	08015bc9 	.word	0x08015bc9
 8015c34:	08015d43 	.word	0x08015d43
 8015c38:	682b      	ldr	r3, [r5, #0]
 8015c3a:	1d1a      	adds	r2, r3, #4
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	602a      	str	r2, [r5, #0]
 8015c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e0a3      	b.n	8015d94 <_printf_i+0x1f4>
 8015c4c:	6820      	ldr	r0, [r4, #0]
 8015c4e:	6829      	ldr	r1, [r5, #0]
 8015c50:	0606      	lsls	r6, r0, #24
 8015c52:	f101 0304 	add.w	r3, r1, #4
 8015c56:	d50a      	bpl.n	8015c6e <_printf_i+0xce>
 8015c58:	680e      	ldr	r6, [r1, #0]
 8015c5a:	602b      	str	r3, [r5, #0]
 8015c5c:	2e00      	cmp	r6, #0
 8015c5e:	da03      	bge.n	8015c68 <_printf_i+0xc8>
 8015c60:	232d      	movs	r3, #45	; 0x2d
 8015c62:	4276      	negs	r6, r6
 8015c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c68:	485e      	ldr	r0, [pc, #376]	; (8015de4 <_printf_i+0x244>)
 8015c6a:	230a      	movs	r3, #10
 8015c6c:	e019      	b.n	8015ca2 <_printf_i+0x102>
 8015c6e:	680e      	ldr	r6, [r1, #0]
 8015c70:	602b      	str	r3, [r5, #0]
 8015c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015c76:	bf18      	it	ne
 8015c78:	b236      	sxthne	r6, r6
 8015c7a:	e7ef      	b.n	8015c5c <_printf_i+0xbc>
 8015c7c:	682b      	ldr	r3, [r5, #0]
 8015c7e:	6820      	ldr	r0, [r4, #0]
 8015c80:	1d19      	adds	r1, r3, #4
 8015c82:	6029      	str	r1, [r5, #0]
 8015c84:	0601      	lsls	r1, r0, #24
 8015c86:	d501      	bpl.n	8015c8c <_printf_i+0xec>
 8015c88:	681e      	ldr	r6, [r3, #0]
 8015c8a:	e002      	b.n	8015c92 <_printf_i+0xf2>
 8015c8c:	0646      	lsls	r6, r0, #25
 8015c8e:	d5fb      	bpl.n	8015c88 <_printf_i+0xe8>
 8015c90:	881e      	ldrh	r6, [r3, #0]
 8015c92:	4854      	ldr	r0, [pc, #336]	; (8015de4 <_printf_i+0x244>)
 8015c94:	2f6f      	cmp	r7, #111	; 0x6f
 8015c96:	bf0c      	ite	eq
 8015c98:	2308      	moveq	r3, #8
 8015c9a:	230a      	movne	r3, #10
 8015c9c:	2100      	movs	r1, #0
 8015c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015ca2:	6865      	ldr	r5, [r4, #4]
 8015ca4:	60a5      	str	r5, [r4, #8]
 8015ca6:	2d00      	cmp	r5, #0
 8015ca8:	bfa2      	ittt	ge
 8015caa:	6821      	ldrge	r1, [r4, #0]
 8015cac:	f021 0104 	bicge.w	r1, r1, #4
 8015cb0:	6021      	strge	r1, [r4, #0]
 8015cb2:	b90e      	cbnz	r6, 8015cb8 <_printf_i+0x118>
 8015cb4:	2d00      	cmp	r5, #0
 8015cb6:	d04d      	beq.n	8015d54 <_printf_i+0x1b4>
 8015cb8:	4615      	mov	r5, r2
 8015cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8015cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8015cc2:	5dc7      	ldrb	r7, [r0, r7]
 8015cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015cc8:	4637      	mov	r7, r6
 8015cca:	42bb      	cmp	r3, r7
 8015ccc:	460e      	mov	r6, r1
 8015cce:	d9f4      	bls.n	8015cba <_printf_i+0x11a>
 8015cd0:	2b08      	cmp	r3, #8
 8015cd2:	d10b      	bne.n	8015cec <_printf_i+0x14c>
 8015cd4:	6823      	ldr	r3, [r4, #0]
 8015cd6:	07de      	lsls	r6, r3, #31
 8015cd8:	d508      	bpl.n	8015cec <_printf_i+0x14c>
 8015cda:	6923      	ldr	r3, [r4, #16]
 8015cdc:	6861      	ldr	r1, [r4, #4]
 8015cde:	4299      	cmp	r1, r3
 8015ce0:	bfde      	ittt	le
 8015ce2:	2330      	movle	r3, #48	; 0x30
 8015ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015cec:	1b52      	subs	r2, r2, r5
 8015cee:	6122      	str	r2, [r4, #16]
 8015cf0:	f8cd a000 	str.w	sl, [sp]
 8015cf4:	464b      	mov	r3, r9
 8015cf6:	aa03      	add	r2, sp, #12
 8015cf8:	4621      	mov	r1, r4
 8015cfa:	4640      	mov	r0, r8
 8015cfc:	f7ff fee2 	bl	8015ac4 <_printf_common>
 8015d00:	3001      	adds	r0, #1
 8015d02:	d14c      	bne.n	8015d9e <_printf_i+0x1fe>
 8015d04:	f04f 30ff 	mov.w	r0, #4294967295
 8015d08:	b004      	add	sp, #16
 8015d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d0e:	4835      	ldr	r0, [pc, #212]	; (8015de4 <_printf_i+0x244>)
 8015d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015d14:	6829      	ldr	r1, [r5, #0]
 8015d16:	6823      	ldr	r3, [r4, #0]
 8015d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8015d1c:	6029      	str	r1, [r5, #0]
 8015d1e:	061d      	lsls	r5, r3, #24
 8015d20:	d514      	bpl.n	8015d4c <_printf_i+0x1ac>
 8015d22:	07df      	lsls	r7, r3, #31
 8015d24:	bf44      	itt	mi
 8015d26:	f043 0320 	orrmi.w	r3, r3, #32
 8015d2a:	6023      	strmi	r3, [r4, #0]
 8015d2c:	b91e      	cbnz	r6, 8015d36 <_printf_i+0x196>
 8015d2e:	6823      	ldr	r3, [r4, #0]
 8015d30:	f023 0320 	bic.w	r3, r3, #32
 8015d34:	6023      	str	r3, [r4, #0]
 8015d36:	2310      	movs	r3, #16
 8015d38:	e7b0      	b.n	8015c9c <_printf_i+0xfc>
 8015d3a:	6823      	ldr	r3, [r4, #0]
 8015d3c:	f043 0320 	orr.w	r3, r3, #32
 8015d40:	6023      	str	r3, [r4, #0]
 8015d42:	2378      	movs	r3, #120	; 0x78
 8015d44:	4828      	ldr	r0, [pc, #160]	; (8015de8 <_printf_i+0x248>)
 8015d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d4a:	e7e3      	b.n	8015d14 <_printf_i+0x174>
 8015d4c:	0659      	lsls	r1, r3, #25
 8015d4e:	bf48      	it	mi
 8015d50:	b2b6      	uxthmi	r6, r6
 8015d52:	e7e6      	b.n	8015d22 <_printf_i+0x182>
 8015d54:	4615      	mov	r5, r2
 8015d56:	e7bb      	b.n	8015cd0 <_printf_i+0x130>
 8015d58:	682b      	ldr	r3, [r5, #0]
 8015d5a:	6826      	ldr	r6, [r4, #0]
 8015d5c:	6961      	ldr	r1, [r4, #20]
 8015d5e:	1d18      	adds	r0, r3, #4
 8015d60:	6028      	str	r0, [r5, #0]
 8015d62:	0635      	lsls	r5, r6, #24
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	d501      	bpl.n	8015d6c <_printf_i+0x1cc>
 8015d68:	6019      	str	r1, [r3, #0]
 8015d6a:	e002      	b.n	8015d72 <_printf_i+0x1d2>
 8015d6c:	0670      	lsls	r0, r6, #25
 8015d6e:	d5fb      	bpl.n	8015d68 <_printf_i+0x1c8>
 8015d70:	8019      	strh	r1, [r3, #0]
 8015d72:	2300      	movs	r3, #0
 8015d74:	6123      	str	r3, [r4, #16]
 8015d76:	4615      	mov	r5, r2
 8015d78:	e7ba      	b.n	8015cf0 <_printf_i+0x150>
 8015d7a:	682b      	ldr	r3, [r5, #0]
 8015d7c:	1d1a      	adds	r2, r3, #4
 8015d7e:	602a      	str	r2, [r5, #0]
 8015d80:	681d      	ldr	r5, [r3, #0]
 8015d82:	6862      	ldr	r2, [r4, #4]
 8015d84:	2100      	movs	r1, #0
 8015d86:	4628      	mov	r0, r5
 8015d88:	f7ea fa4a 	bl	8000220 <memchr>
 8015d8c:	b108      	cbz	r0, 8015d92 <_printf_i+0x1f2>
 8015d8e:	1b40      	subs	r0, r0, r5
 8015d90:	6060      	str	r0, [r4, #4]
 8015d92:	6863      	ldr	r3, [r4, #4]
 8015d94:	6123      	str	r3, [r4, #16]
 8015d96:	2300      	movs	r3, #0
 8015d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d9c:	e7a8      	b.n	8015cf0 <_printf_i+0x150>
 8015d9e:	6923      	ldr	r3, [r4, #16]
 8015da0:	462a      	mov	r2, r5
 8015da2:	4649      	mov	r1, r9
 8015da4:	4640      	mov	r0, r8
 8015da6:	47d0      	blx	sl
 8015da8:	3001      	adds	r0, #1
 8015daa:	d0ab      	beq.n	8015d04 <_printf_i+0x164>
 8015dac:	6823      	ldr	r3, [r4, #0]
 8015dae:	079b      	lsls	r3, r3, #30
 8015db0:	d413      	bmi.n	8015dda <_printf_i+0x23a>
 8015db2:	68e0      	ldr	r0, [r4, #12]
 8015db4:	9b03      	ldr	r3, [sp, #12]
 8015db6:	4298      	cmp	r0, r3
 8015db8:	bfb8      	it	lt
 8015dba:	4618      	movlt	r0, r3
 8015dbc:	e7a4      	b.n	8015d08 <_printf_i+0x168>
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	4632      	mov	r2, r6
 8015dc2:	4649      	mov	r1, r9
 8015dc4:	4640      	mov	r0, r8
 8015dc6:	47d0      	blx	sl
 8015dc8:	3001      	adds	r0, #1
 8015dca:	d09b      	beq.n	8015d04 <_printf_i+0x164>
 8015dcc:	3501      	adds	r5, #1
 8015dce:	68e3      	ldr	r3, [r4, #12]
 8015dd0:	9903      	ldr	r1, [sp, #12]
 8015dd2:	1a5b      	subs	r3, r3, r1
 8015dd4:	42ab      	cmp	r3, r5
 8015dd6:	dcf2      	bgt.n	8015dbe <_printf_i+0x21e>
 8015dd8:	e7eb      	b.n	8015db2 <_printf_i+0x212>
 8015dda:	2500      	movs	r5, #0
 8015ddc:	f104 0619 	add.w	r6, r4, #25
 8015de0:	e7f5      	b.n	8015dce <_printf_i+0x22e>
 8015de2:	bf00      	nop
 8015de4:	080185a2 	.word	0x080185a2
 8015de8:	080185b3 	.word	0x080185b3

08015dec <iprintf>:
 8015dec:	b40f      	push	{r0, r1, r2, r3}
 8015dee:	4b0a      	ldr	r3, [pc, #40]	; (8015e18 <iprintf+0x2c>)
 8015df0:	b513      	push	{r0, r1, r4, lr}
 8015df2:	681c      	ldr	r4, [r3, #0]
 8015df4:	b124      	cbz	r4, 8015e00 <iprintf+0x14>
 8015df6:	69a3      	ldr	r3, [r4, #24]
 8015df8:	b913      	cbnz	r3, 8015e00 <iprintf+0x14>
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	f001 f92c 	bl	8017058 <__sinit>
 8015e00:	ab05      	add	r3, sp, #20
 8015e02:	9a04      	ldr	r2, [sp, #16]
 8015e04:	68a1      	ldr	r1, [r4, #8]
 8015e06:	9301      	str	r3, [sp, #4]
 8015e08:	4620      	mov	r0, r4
 8015e0a:	f001 fdff 	bl	8017a0c <_vfiprintf_r>
 8015e0e:	b002      	add	sp, #8
 8015e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e14:	b004      	add	sp, #16
 8015e16:	4770      	bx	lr
 8015e18:	20000184 	.word	0x20000184

08015e1c <_puts_r>:
 8015e1c:	b570      	push	{r4, r5, r6, lr}
 8015e1e:	460e      	mov	r6, r1
 8015e20:	4605      	mov	r5, r0
 8015e22:	b118      	cbz	r0, 8015e2c <_puts_r+0x10>
 8015e24:	6983      	ldr	r3, [r0, #24]
 8015e26:	b90b      	cbnz	r3, 8015e2c <_puts_r+0x10>
 8015e28:	f001 f916 	bl	8017058 <__sinit>
 8015e2c:	69ab      	ldr	r3, [r5, #24]
 8015e2e:	68ac      	ldr	r4, [r5, #8]
 8015e30:	b913      	cbnz	r3, 8015e38 <_puts_r+0x1c>
 8015e32:	4628      	mov	r0, r5
 8015e34:	f001 f910 	bl	8017058 <__sinit>
 8015e38:	4b2c      	ldr	r3, [pc, #176]	; (8015eec <_puts_r+0xd0>)
 8015e3a:	429c      	cmp	r4, r3
 8015e3c:	d120      	bne.n	8015e80 <_puts_r+0x64>
 8015e3e:	686c      	ldr	r4, [r5, #4]
 8015e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e42:	07db      	lsls	r3, r3, #31
 8015e44:	d405      	bmi.n	8015e52 <_puts_r+0x36>
 8015e46:	89a3      	ldrh	r3, [r4, #12]
 8015e48:	0598      	lsls	r0, r3, #22
 8015e4a:	d402      	bmi.n	8015e52 <_puts_r+0x36>
 8015e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e4e:	f001 f9a6 	bl	801719e <__retarget_lock_acquire_recursive>
 8015e52:	89a3      	ldrh	r3, [r4, #12]
 8015e54:	0719      	lsls	r1, r3, #28
 8015e56:	d51d      	bpl.n	8015e94 <_puts_r+0x78>
 8015e58:	6923      	ldr	r3, [r4, #16]
 8015e5a:	b1db      	cbz	r3, 8015e94 <_puts_r+0x78>
 8015e5c:	3e01      	subs	r6, #1
 8015e5e:	68a3      	ldr	r3, [r4, #8]
 8015e60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015e64:	3b01      	subs	r3, #1
 8015e66:	60a3      	str	r3, [r4, #8]
 8015e68:	bb39      	cbnz	r1, 8015eba <_puts_r+0x9e>
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	da38      	bge.n	8015ee0 <_puts_r+0xc4>
 8015e6e:	4622      	mov	r2, r4
 8015e70:	210a      	movs	r1, #10
 8015e72:	4628      	mov	r0, r5
 8015e74:	f000 f89c 	bl	8015fb0 <__swbuf_r>
 8015e78:	3001      	adds	r0, #1
 8015e7a:	d011      	beq.n	8015ea0 <_puts_r+0x84>
 8015e7c:	250a      	movs	r5, #10
 8015e7e:	e011      	b.n	8015ea4 <_puts_r+0x88>
 8015e80:	4b1b      	ldr	r3, [pc, #108]	; (8015ef0 <_puts_r+0xd4>)
 8015e82:	429c      	cmp	r4, r3
 8015e84:	d101      	bne.n	8015e8a <_puts_r+0x6e>
 8015e86:	68ac      	ldr	r4, [r5, #8]
 8015e88:	e7da      	b.n	8015e40 <_puts_r+0x24>
 8015e8a:	4b1a      	ldr	r3, [pc, #104]	; (8015ef4 <_puts_r+0xd8>)
 8015e8c:	429c      	cmp	r4, r3
 8015e8e:	bf08      	it	eq
 8015e90:	68ec      	ldreq	r4, [r5, #12]
 8015e92:	e7d5      	b.n	8015e40 <_puts_r+0x24>
 8015e94:	4621      	mov	r1, r4
 8015e96:	4628      	mov	r0, r5
 8015e98:	f000 f8dc 	bl	8016054 <__swsetup_r>
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	d0dd      	beq.n	8015e5c <_puts_r+0x40>
 8015ea0:	f04f 35ff 	mov.w	r5, #4294967295
 8015ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ea6:	07da      	lsls	r2, r3, #31
 8015ea8:	d405      	bmi.n	8015eb6 <_puts_r+0x9a>
 8015eaa:	89a3      	ldrh	r3, [r4, #12]
 8015eac:	059b      	lsls	r3, r3, #22
 8015eae:	d402      	bmi.n	8015eb6 <_puts_r+0x9a>
 8015eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eb2:	f001 f975 	bl	80171a0 <__retarget_lock_release_recursive>
 8015eb6:	4628      	mov	r0, r5
 8015eb8:	bd70      	pop	{r4, r5, r6, pc}
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	da04      	bge.n	8015ec8 <_puts_r+0xac>
 8015ebe:	69a2      	ldr	r2, [r4, #24]
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	dc06      	bgt.n	8015ed2 <_puts_r+0xb6>
 8015ec4:	290a      	cmp	r1, #10
 8015ec6:	d004      	beq.n	8015ed2 <_puts_r+0xb6>
 8015ec8:	6823      	ldr	r3, [r4, #0]
 8015eca:	1c5a      	adds	r2, r3, #1
 8015ecc:	6022      	str	r2, [r4, #0]
 8015ece:	7019      	strb	r1, [r3, #0]
 8015ed0:	e7c5      	b.n	8015e5e <_puts_r+0x42>
 8015ed2:	4622      	mov	r2, r4
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	f000 f86b 	bl	8015fb0 <__swbuf_r>
 8015eda:	3001      	adds	r0, #1
 8015edc:	d1bf      	bne.n	8015e5e <_puts_r+0x42>
 8015ede:	e7df      	b.n	8015ea0 <_puts_r+0x84>
 8015ee0:	6823      	ldr	r3, [r4, #0]
 8015ee2:	250a      	movs	r5, #10
 8015ee4:	1c5a      	adds	r2, r3, #1
 8015ee6:	6022      	str	r2, [r4, #0]
 8015ee8:	701d      	strb	r5, [r3, #0]
 8015eea:	e7db      	b.n	8015ea4 <_puts_r+0x88>
 8015eec:	08018674 	.word	0x08018674
 8015ef0:	08018694 	.word	0x08018694
 8015ef4:	08018654 	.word	0x08018654

08015ef8 <puts>:
 8015ef8:	4b02      	ldr	r3, [pc, #8]	; (8015f04 <puts+0xc>)
 8015efa:	4601      	mov	r1, r0
 8015efc:	6818      	ldr	r0, [r3, #0]
 8015efe:	f7ff bf8d 	b.w	8015e1c <_puts_r>
 8015f02:	bf00      	nop
 8015f04:	20000184 	.word	0x20000184

08015f08 <_sbrk_r>:
 8015f08:	b538      	push	{r3, r4, r5, lr}
 8015f0a:	4d06      	ldr	r5, [pc, #24]	; (8015f24 <_sbrk_r+0x1c>)
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	4604      	mov	r4, r0
 8015f10:	4608      	mov	r0, r1
 8015f12:	602b      	str	r3, [r5, #0]
 8015f14:	f7f0 fdda 	bl	8006acc <_sbrk>
 8015f18:	1c43      	adds	r3, r0, #1
 8015f1a:	d102      	bne.n	8015f22 <_sbrk_r+0x1a>
 8015f1c:	682b      	ldr	r3, [r5, #0]
 8015f1e:	b103      	cbz	r3, 8015f22 <_sbrk_r+0x1a>
 8015f20:	6023      	str	r3, [r4, #0]
 8015f22:	bd38      	pop	{r3, r4, r5, pc}
 8015f24:	200024e4 	.word	0x200024e4

08015f28 <_raise_r>:
 8015f28:	291f      	cmp	r1, #31
 8015f2a:	b538      	push	{r3, r4, r5, lr}
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	460d      	mov	r5, r1
 8015f30:	d904      	bls.n	8015f3c <_raise_r+0x14>
 8015f32:	2316      	movs	r3, #22
 8015f34:	6003      	str	r3, [r0, #0]
 8015f36:	f04f 30ff 	mov.w	r0, #4294967295
 8015f3a:	bd38      	pop	{r3, r4, r5, pc}
 8015f3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015f3e:	b112      	cbz	r2, 8015f46 <_raise_r+0x1e>
 8015f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f44:	b94b      	cbnz	r3, 8015f5a <_raise_r+0x32>
 8015f46:	4620      	mov	r0, r4
 8015f48:	f000 f830 	bl	8015fac <_getpid_r>
 8015f4c:	462a      	mov	r2, r5
 8015f4e:	4601      	mov	r1, r0
 8015f50:	4620      	mov	r0, r4
 8015f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f56:	f000 b817 	b.w	8015f88 <_kill_r>
 8015f5a:	2b01      	cmp	r3, #1
 8015f5c:	d00a      	beq.n	8015f74 <_raise_r+0x4c>
 8015f5e:	1c59      	adds	r1, r3, #1
 8015f60:	d103      	bne.n	8015f6a <_raise_r+0x42>
 8015f62:	2316      	movs	r3, #22
 8015f64:	6003      	str	r3, [r0, #0]
 8015f66:	2001      	movs	r0, #1
 8015f68:	e7e7      	b.n	8015f3a <_raise_r+0x12>
 8015f6a:	2400      	movs	r4, #0
 8015f6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f70:	4628      	mov	r0, r5
 8015f72:	4798      	blx	r3
 8015f74:	2000      	movs	r0, #0
 8015f76:	e7e0      	b.n	8015f3a <_raise_r+0x12>

08015f78 <raise>:
 8015f78:	4b02      	ldr	r3, [pc, #8]	; (8015f84 <raise+0xc>)
 8015f7a:	4601      	mov	r1, r0
 8015f7c:	6818      	ldr	r0, [r3, #0]
 8015f7e:	f7ff bfd3 	b.w	8015f28 <_raise_r>
 8015f82:	bf00      	nop
 8015f84:	20000184 	.word	0x20000184

08015f88 <_kill_r>:
 8015f88:	b538      	push	{r3, r4, r5, lr}
 8015f8a:	4d07      	ldr	r5, [pc, #28]	; (8015fa8 <_kill_r+0x20>)
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	4604      	mov	r4, r0
 8015f90:	4608      	mov	r0, r1
 8015f92:	4611      	mov	r1, r2
 8015f94:	602b      	str	r3, [r5, #0]
 8015f96:	f7f0 fd01 	bl	800699c <_kill>
 8015f9a:	1c43      	adds	r3, r0, #1
 8015f9c:	d102      	bne.n	8015fa4 <_kill_r+0x1c>
 8015f9e:	682b      	ldr	r3, [r5, #0]
 8015fa0:	b103      	cbz	r3, 8015fa4 <_kill_r+0x1c>
 8015fa2:	6023      	str	r3, [r4, #0]
 8015fa4:	bd38      	pop	{r3, r4, r5, pc}
 8015fa6:	bf00      	nop
 8015fa8:	200024e4 	.word	0x200024e4

08015fac <_getpid_r>:
 8015fac:	f7f0 bcee 	b.w	800698c <_getpid>

08015fb0 <__swbuf_r>:
 8015fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fb2:	460e      	mov	r6, r1
 8015fb4:	4614      	mov	r4, r2
 8015fb6:	4605      	mov	r5, r0
 8015fb8:	b118      	cbz	r0, 8015fc2 <__swbuf_r+0x12>
 8015fba:	6983      	ldr	r3, [r0, #24]
 8015fbc:	b90b      	cbnz	r3, 8015fc2 <__swbuf_r+0x12>
 8015fbe:	f001 f84b 	bl	8017058 <__sinit>
 8015fc2:	4b21      	ldr	r3, [pc, #132]	; (8016048 <__swbuf_r+0x98>)
 8015fc4:	429c      	cmp	r4, r3
 8015fc6:	d12b      	bne.n	8016020 <__swbuf_r+0x70>
 8015fc8:	686c      	ldr	r4, [r5, #4]
 8015fca:	69a3      	ldr	r3, [r4, #24]
 8015fcc:	60a3      	str	r3, [r4, #8]
 8015fce:	89a3      	ldrh	r3, [r4, #12]
 8015fd0:	071a      	lsls	r2, r3, #28
 8015fd2:	d52f      	bpl.n	8016034 <__swbuf_r+0x84>
 8015fd4:	6923      	ldr	r3, [r4, #16]
 8015fd6:	b36b      	cbz	r3, 8016034 <__swbuf_r+0x84>
 8015fd8:	6923      	ldr	r3, [r4, #16]
 8015fda:	6820      	ldr	r0, [r4, #0]
 8015fdc:	1ac0      	subs	r0, r0, r3
 8015fde:	6963      	ldr	r3, [r4, #20]
 8015fe0:	b2f6      	uxtb	r6, r6
 8015fe2:	4283      	cmp	r3, r0
 8015fe4:	4637      	mov	r7, r6
 8015fe6:	dc04      	bgt.n	8015ff2 <__swbuf_r+0x42>
 8015fe8:	4621      	mov	r1, r4
 8015fea:	4628      	mov	r0, r5
 8015fec:	f000 ffa0 	bl	8016f30 <_fflush_r>
 8015ff0:	bb30      	cbnz	r0, 8016040 <__swbuf_r+0x90>
 8015ff2:	68a3      	ldr	r3, [r4, #8]
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	60a3      	str	r3, [r4, #8]
 8015ff8:	6823      	ldr	r3, [r4, #0]
 8015ffa:	1c5a      	adds	r2, r3, #1
 8015ffc:	6022      	str	r2, [r4, #0]
 8015ffe:	701e      	strb	r6, [r3, #0]
 8016000:	6963      	ldr	r3, [r4, #20]
 8016002:	3001      	adds	r0, #1
 8016004:	4283      	cmp	r3, r0
 8016006:	d004      	beq.n	8016012 <__swbuf_r+0x62>
 8016008:	89a3      	ldrh	r3, [r4, #12]
 801600a:	07db      	lsls	r3, r3, #31
 801600c:	d506      	bpl.n	801601c <__swbuf_r+0x6c>
 801600e:	2e0a      	cmp	r6, #10
 8016010:	d104      	bne.n	801601c <__swbuf_r+0x6c>
 8016012:	4621      	mov	r1, r4
 8016014:	4628      	mov	r0, r5
 8016016:	f000 ff8b 	bl	8016f30 <_fflush_r>
 801601a:	b988      	cbnz	r0, 8016040 <__swbuf_r+0x90>
 801601c:	4638      	mov	r0, r7
 801601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016020:	4b0a      	ldr	r3, [pc, #40]	; (801604c <__swbuf_r+0x9c>)
 8016022:	429c      	cmp	r4, r3
 8016024:	d101      	bne.n	801602a <__swbuf_r+0x7a>
 8016026:	68ac      	ldr	r4, [r5, #8]
 8016028:	e7cf      	b.n	8015fca <__swbuf_r+0x1a>
 801602a:	4b09      	ldr	r3, [pc, #36]	; (8016050 <__swbuf_r+0xa0>)
 801602c:	429c      	cmp	r4, r3
 801602e:	bf08      	it	eq
 8016030:	68ec      	ldreq	r4, [r5, #12]
 8016032:	e7ca      	b.n	8015fca <__swbuf_r+0x1a>
 8016034:	4621      	mov	r1, r4
 8016036:	4628      	mov	r0, r5
 8016038:	f000 f80c 	bl	8016054 <__swsetup_r>
 801603c:	2800      	cmp	r0, #0
 801603e:	d0cb      	beq.n	8015fd8 <__swbuf_r+0x28>
 8016040:	f04f 37ff 	mov.w	r7, #4294967295
 8016044:	e7ea      	b.n	801601c <__swbuf_r+0x6c>
 8016046:	bf00      	nop
 8016048:	08018674 	.word	0x08018674
 801604c:	08018694 	.word	0x08018694
 8016050:	08018654 	.word	0x08018654

08016054 <__swsetup_r>:
 8016054:	4b32      	ldr	r3, [pc, #200]	; (8016120 <__swsetup_r+0xcc>)
 8016056:	b570      	push	{r4, r5, r6, lr}
 8016058:	681d      	ldr	r5, [r3, #0]
 801605a:	4606      	mov	r6, r0
 801605c:	460c      	mov	r4, r1
 801605e:	b125      	cbz	r5, 801606a <__swsetup_r+0x16>
 8016060:	69ab      	ldr	r3, [r5, #24]
 8016062:	b913      	cbnz	r3, 801606a <__swsetup_r+0x16>
 8016064:	4628      	mov	r0, r5
 8016066:	f000 fff7 	bl	8017058 <__sinit>
 801606a:	4b2e      	ldr	r3, [pc, #184]	; (8016124 <__swsetup_r+0xd0>)
 801606c:	429c      	cmp	r4, r3
 801606e:	d10f      	bne.n	8016090 <__swsetup_r+0x3c>
 8016070:	686c      	ldr	r4, [r5, #4]
 8016072:	89a3      	ldrh	r3, [r4, #12]
 8016074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016078:	0719      	lsls	r1, r3, #28
 801607a:	d42c      	bmi.n	80160d6 <__swsetup_r+0x82>
 801607c:	06dd      	lsls	r5, r3, #27
 801607e:	d411      	bmi.n	80160a4 <__swsetup_r+0x50>
 8016080:	2309      	movs	r3, #9
 8016082:	6033      	str	r3, [r6, #0]
 8016084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016088:	81a3      	strh	r3, [r4, #12]
 801608a:	f04f 30ff 	mov.w	r0, #4294967295
 801608e:	e03e      	b.n	801610e <__swsetup_r+0xba>
 8016090:	4b25      	ldr	r3, [pc, #148]	; (8016128 <__swsetup_r+0xd4>)
 8016092:	429c      	cmp	r4, r3
 8016094:	d101      	bne.n	801609a <__swsetup_r+0x46>
 8016096:	68ac      	ldr	r4, [r5, #8]
 8016098:	e7eb      	b.n	8016072 <__swsetup_r+0x1e>
 801609a:	4b24      	ldr	r3, [pc, #144]	; (801612c <__swsetup_r+0xd8>)
 801609c:	429c      	cmp	r4, r3
 801609e:	bf08      	it	eq
 80160a0:	68ec      	ldreq	r4, [r5, #12]
 80160a2:	e7e6      	b.n	8016072 <__swsetup_r+0x1e>
 80160a4:	0758      	lsls	r0, r3, #29
 80160a6:	d512      	bpl.n	80160ce <__swsetup_r+0x7a>
 80160a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160aa:	b141      	cbz	r1, 80160be <__swsetup_r+0x6a>
 80160ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160b0:	4299      	cmp	r1, r3
 80160b2:	d002      	beq.n	80160ba <__swsetup_r+0x66>
 80160b4:	4630      	mov	r0, r6
 80160b6:	f7ff f94f 	bl	8015358 <_free_r>
 80160ba:	2300      	movs	r3, #0
 80160bc:	6363      	str	r3, [r4, #52]	; 0x34
 80160be:	89a3      	ldrh	r3, [r4, #12]
 80160c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80160c4:	81a3      	strh	r3, [r4, #12]
 80160c6:	2300      	movs	r3, #0
 80160c8:	6063      	str	r3, [r4, #4]
 80160ca:	6923      	ldr	r3, [r4, #16]
 80160cc:	6023      	str	r3, [r4, #0]
 80160ce:	89a3      	ldrh	r3, [r4, #12]
 80160d0:	f043 0308 	orr.w	r3, r3, #8
 80160d4:	81a3      	strh	r3, [r4, #12]
 80160d6:	6923      	ldr	r3, [r4, #16]
 80160d8:	b94b      	cbnz	r3, 80160ee <__swsetup_r+0x9a>
 80160da:	89a3      	ldrh	r3, [r4, #12]
 80160dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80160e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160e4:	d003      	beq.n	80160ee <__swsetup_r+0x9a>
 80160e6:	4621      	mov	r1, r4
 80160e8:	4630      	mov	r0, r6
 80160ea:	f001 f87f 	bl	80171ec <__smakebuf_r>
 80160ee:	89a0      	ldrh	r0, [r4, #12]
 80160f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160f4:	f010 0301 	ands.w	r3, r0, #1
 80160f8:	d00a      	beq.n	8016110 <__swsetup_r+0xbc>
 80160fa:	2300      	movs	r3, #0
 80160fc:	60a3      	str	r3, [r4, #8]
 80160fe:	6963      	ldr	r3, [r4, #20]
 8016100:	425b      	negs	r3, r3
 8016102:	61a3      	str	r3, [r4, #24]
 8016104:	6923      	ldr	r3, [r4, #16]
 8016106:	b943      	cbnz	r3, 801611a <__swsetup_r+0xc6>
 8016108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801610c:	d1ba      	bne.n	8016084 <__swsetup_r+0x30>
 801610e:	bd70      	pop	{r4, r5, r6, pc}
 8016110:	0781      	lsls	r1, r0, #30
 8016112:	bf58      	it	pl
 8016114:	6963      	ldrpl	r3, [r4, #20]
 8016116:	60a3      	str	r3, [r4, #8]
 8016118:	e7f4      	b.n	8016104 <__swsetup_r+0xb0>
 801611a:	2000      	movs	r0, #0
 801611c:	e7f7      	b.n	801610e <__swsetup_r+0xba>
 801611e:	bf00      	nop
 8016120:	20000184 	.word	0x20000184
 8016124:	08018674 	.word	0x08018674
 8016128:	08018694 	.word	0x08018694
 801612c:	08018654 	.word	0x08018654

08016130 <quorem>:
 8016130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016134:	6903      	ldr	r3, [r0, #16]
 8016136:	690c      	ldr	r4, [r1, #16]
 8016138:	42a3      	cmp	r3, r4
 801613a:	4607      	mov	r7, r0
 801613c:	f2c0 8081 	blt.w	8016242 <quorem+0x112>
 8016140:	3c01      	subs	r4, #1
 8016142:	f101 0814 	add.w	r8, r1, #20
 8016146:	f100 0514 	add.w	r5, r0, #20
 801614a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801614e:	9301      	str	r3, [sp, #4]
 8016150:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016158:	3301      	adds	r3, #1
 801615a:	429a      	cmp	r2, r3
 801615c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016160:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016164:	fbb2 f6f3 	udiv	r6, r2, r3
 8016168:	d331      	bcc.n	80161ce <quorem+0x9e>
 801616a:	f04f 0e00 	mov.w	lr, #0
 801616e:	4640      	mov	r0, r8
 8016170:	46ac      	mov	ip, r5
 8016172:	46f2      	mov	sl, lr
 8016174:	f850 2b04 	ldr.w	r2, [r0], #4
 8016178:	b293      	uxth	r3, r2
 801617a:	fb06 e303 	mla	r3, r6, r3, lr
 801617e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016182:	b29b      	uxth	r3, r3
 8016184:	ebaa 0303 	sub.w	r3, sl, r3
 8016188:	f8dc a000 	ldr.w	sl, [ip]
 801618c:	0c12      	lsrs	r2, r2, #16
 801618e:	fa13 f38a 	uxtah	r3, r3, sl
 8016192:	fb06 e202 	mla	r2, r6, r2, lr
 8016196:	9300      	str	r3, [sp, #0]
 8016198:	9b00      	ldr	r3, [sp, #0]
 801619a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801619e:	b292      	uxth	r2, r2
 80161a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80161a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80161a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80161ac:	4581      	cmp	r9, r0
 80161ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161b2:	f84c 3b04 	str.w	r3, [ip], #4
 80161b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80161ba:	d2db      	bcs.n	8016174 <quorem+0x44>
 80161bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80161c0:	b92b      	cbnz	r3, 80161ce <quorem+0x9e>
 80161c2:	9b01      	ldr	r3, [sp, #4]
 80161c4:	3b04      	subs	r3, #4
 80161c6:	429d      	cmp	r5, r3
 80161c8:	461a      	mov	r2, r3
 80161ca:	d32e      	bcc.n	801622a <quorem+0xfa>
 80161cc:	613c      	str	r4, [r7, #16]
 80161ce:	4638      	mov	r0, r7
 80161d0:	f001 fada 	bl	8017788 <__mcmp>
 80161d4:	2800      	cmp	r0, #0
 80161d6:	db24      	blt.n	8016222 <quorem+0xf2>
 80161d8:	3601      	adds	r6, #1
 80161da:	4628      	mov	r0, r5
 80161dc:	f04f 0c00 	mov.w	ip, #0
 80161e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80161e4:	f8d0 e000 	ldr.w	lr, [r0]
 80161e8:	b293      	uxth	r3, r2
 80161ea:	ebac 0303 	sub.w	r3, ip, r3
 80161ee:	0c12      	lsrs	r2, r2, #16
 80161f0:	fa13 f38e 	uxtah	r3, r3, lr
 80161f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80161f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016202:	45c1      	cmp	r9, r8
 8016204:	f840 3b04 	str.w	r3, [r0], #4
 8016208:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801620c:	d2e8      	bcs.n	80161e0 <quorem+0xb0>
 801620e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016216:	b922      	cbnz	r2, 8016222 <quorem+0xf2>
 8016218:	3b04      	subs	r3, #4
 801621a:	429d      	cmp	r5, r3
 801621c:	461a      	mov	r2, r3
 801621e:	d30a      	bcc.n	8016236 <quorem+0x106>
 8016220:	613c      	str	r4, [r7, #16]
 8016222:	4630      	mov	r0, r6
 8016224:	b003      	add	sp, #12
 8016226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801622a:	6812      	ldr	r2, [r2, #0]
 801622c:	3b04      	subs	r3, #4
 801622e:	2a00      	cmp	r2, #0
 8016230:	d1cc      	bne.n	80161cc <quorem+0x9c>
 8016232:	3c01      	subs	r4, #1
 8016234:	e7c7      	b.n	80161c6 <quorem+0x96>
 8016236:	6812      	ldr	r2, [r2, #0]
 8016238:	3b04      	subs	r3, #4
 801623a:	2a00      	cmp	r2, #0
 801623c:	d1f0      	bne.n	8016220 <quorem+0xf0>
 801623e:	3c01      	subs	r4, #1
 8016240:	e7eb      	b.n	801621a <quorem+0xea>
 8016242:	2000      	movs	r0, #0
 8016244:	e7ee      	b.n	8016224 <quorem+0xf4>
	...

08016248 <_dtoa_r>:
 8016248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801624c:	ed2d 8b04 	vpush	{d8-d9}
 8016250:	ec57 6b10 	vmov	r6, r7, d0
 8016254:	b093      	sub	sp, #76	; 0x4c
 8016256:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016258:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801625c:	9106      	str	r1, [sp, #24]
 801625e:	ee10 aa10 	vmov	sl, s0
 8016262:	4604      	mov	r4, r0
 8016264:	9209      	str	r2, [sp, #36]	; 0x24
 8016266:	930c      	str	r3, [sp, #48]	; 0x30
 8016268:	46bb      	mov	fp, r7
 801626a:	b975      	cbnz	r5, 801628a <_dtoa_r+0x42>
 801626c:	2010      	movs	r0, #16
 801626e:	f7ff f833 	bl	80152d8 <malloc>
 8016272:	4602      	mov	r2, r0
 8016274:	6260      	str	r0, [r4, #36]	; 0x24
 8016276:	b920      	cbnz	r0, 8016282 <_dtoa_r+0x3a>
 8016278:	4ba7      	ldr	r3, [pc, #668]	; (8016518 <_dtoa_r+0x2d0>)
 801627a:	21ea      	movs	r1, #234	; 0xea
 801627c:	48a7      	ldr	r0, [pc, #668]	; (801651c <_dtoa_r+0x2d4>)
 801627e:	f001 fd4b 	bl	8017d18 <__assert_func>
 8016282:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016286:	6005      	str	r5, [r0, #0]
 8016288:	60c5      	str	r5, [r0, #12]
 801628a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801628c:	6819      	ldr	r1, [r3, #0]
 801628e:	b151      	cbz	r1, 80162a6 <_dtoa_r+0x5e>
 8016290:	685a      	ldr	r2, [r3, #4]
 8016292:	604a      	str	r2, [r1, #4]
 8016294:	2301      	movs	r3, #1
 8016296:	4093      	lsls	r3, r2
 8016298:	608b      	str	r3, [r1, #8]
 801629a:	4620      	mov	r0, r4
 801629c:	f001 f832 	bl	8017304 <_Bfree>
 80162a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162a2:	2200      	movs	r2, #0
 80162a4:	601a      	str	r2, [r3, #0]
 80162a6:	1e3b      	subs	r3, r7, #0
 80162a8:	bfaa      	itet	ge
 80162aa:	2300      	movge	r3, #0
 80162ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80162b0:	f8c8 3000 	strge.w	r3, [r8]
 80162b4:	4b9a      	ldr	r3, [pc, #616]	; (8016520 <_dtoa_r+0x2d8>)
 80162b6:	bfbc      	itt	lt
 80162b8:	2201      	movlt	r2, #1
 80162ba:	f8c8 2000 	strlt.w	r2, [r8]
 80162be:	ea33 030b 	bics.w	r3, r3, fp
 80162c2:	d11b      	bne.n	80162fc <_dtoa_r+0xb4>
 80162c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80162c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80162ca:	6013      	str	r3, [r2, #0]
 80162cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80162d0:	4333      	orrs	r3, r6
 80162d2:	f000 8592 	beq.w	8016dfa <_dtoa_r+0xbb2>
 80162d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162d8:	b963      	cbnz	r3, 80162f4 <_dtoa_r+0xac>
 80162da:	4b92      	ldr	r3, [pc, #584]	; (8016524 <_dtoa_r+0x2dc>)
 80162dc:	e022      	b.n	8016324 <_dtoa_r+0xdc>
 80162de:	4b92      	ldr	r3, [pc, #584]	; (8016528 <_dtoa_r+0x2e0>)
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	3308      	adds	r3, #8
 80162e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80162e6:	6013      	str	r3, [r2, #0]
 80162e8:	9801      	ldr	r0, [sp, #4]
 80162ea:	b013      	add	sp, #76	; 0x4c
 80162ec:	ecbd 8b04 	vpop	{d8-d9}
 80162f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f4:	4b8b      	ldr	r3, [pc, #556]	; (8016524 <_dtoa_r+0x2dc>)
 80162f6:	9301      	str	r3, [sp, #4]
 80162f8:	3303      	adds	r3, #3
 80162fa:	e7f3      	b.n	80162e4 <_dtoa_r+0x9c>
 80162fc:	2200      	movs	r2, #0
 80162fe:	2300      	movs	r3, #0
 8016300:	4650      	mov	r0, sl
 8016302:	4659      	mov	r1, fp
 8016304:	f7ea fc08 	bl	8000b18 <__aeabi_dcmpeq>
 8016308:	ec4b ab19 	vmov	d9, sl, fp
 801630c:	4680      	mov	r8, r0
 801630e:	b158      	cbz	r0, 8016328 <_dtoa_r+0xe0>
 8016310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016312:	2301      	movs	r3, #1
 8016314:	6013      	str	r3, [r2, #0]
 8016316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016318:	2b00      	cmp	r3, #0
 801631a:	f000 856b 	beq.w	8016df4 <_dtoa_r+0xbac>
 801631e:	4883      	ldr	r0, [pc, #524]	; (801652c <_dtoa_r+0x2e4>)
 8016320:	6018      	str	r0, [r3, #0]
 8016322:	1e43      	subs	r3, r0, #1
 8016324:	9301      	str	r3, [sp, #4]
 8016326:	e7df      	b.n	80162e8 <_dtoa_r+0xa0>
 8016328:	ec4b ab10 	vmov	d0, sl, fp
 801632c:	aa10      	add	r2, sp, #64	; 0x40
 801632e:	a911      	add	r1, sp, #68	; 0x44
 8016330:	4620      	mov	r0, r4
 8016332:	f001 facf 	bl	80178d4 <__d2b>
 8016336:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801633a:	ee08 0a10 	vmov	s16, r0
 801633e:	2d00      	cmp	r5, #0
 8016340:	f000 8084 	beq.w	801644c <_dtoa_r+0x204>
 8016344:	ee19 3a90 	vmov	r3, s19
 8016348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801634c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016350:	4656      	mov	r6, sl
 8016352:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801635a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801635e:	4b74      	ldr	r3, [pc, #464]	; (8016530 <_dtoa_r+0x2e8>)
 8016360:	2200      	movs	r2, #0
 8016362:	4630      	mov	r0, r6
 8016364:	4639      	mov	r1, r7
 8016366:	f7e9 ffb7 	bl	80002d8 <__aeabi_dsub>
 801636a:	a365      	add	r3, pc, #404	; (adr r3, 8016500 <_dtoa_r+0x2b8>)
 801636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016370:	f7ea f96a 	bl	8000648 <__aeabi_dmul>
 8016374:	a364      	add	r3, pc, #400	; (adr r3, 8016508 <_dtoa_r+0x2c0>)
 8016376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637a:	f7e9 ffaf 	bl	80002dc <__adddf3>
 801637e:	4606      	mov	r6, r0
 8016380:	4628      	mov	r0, r5
 8016382:	460f      	mov	r7, r1
 8016384:	f7ea f8f6 	bl	8000574 <__aeabi_i2d>
 8016388:	a361      	add	r3, pc, #388	; (adr r3, 8016510 <_dtoa_r+0x2c8>)
 801638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638e:	f7ea f95b 	bl	8000648 <__aeabi_dmul>
 8016392:	4602      	mov	r2, r0
 8016394:	460b      	mov	r3, r1
 8016396:	4630      	mov	r0, r6
 8016398:	4639      	mov	r1, r7
 801639a:	f7e9 ff9f 	bl	80002dc <__adddf3>
 801639e:	4606      	mov	r6, r0
 80163a0:	460f      	mov	r7, r1
 80163a2:	f7ea fc01 	bl	8000ba8 <__aeabi_d2iz>
 80163a6:	2200      	movs	r2, #0
 80163a8:	9000      	str	r0, [sp, #0]
 80163aa:	2300      	movs	r3, #0
 80163ac:	4630      	mov	r0, r6
 80163ae:	4639      	mov	r1, r7
 80163b0:	f7ea fbbc 	bl	8000b2c <__aeabi_dcmplt>
 80163b4:	b150      	cbz	r0, 80163cc <_dtoa_r+0x184>
 80163b6:	9800      	ldr	r0, [sp, #0]
 80163b8:	f7ea f8dc 	bl	8000574 <__aeabi_i2d>
 80163bc:	4632      	mov	r2, r6
 80163be:	463b      	mov	r3, r7
 80163c0:	f7ea fbaa 	bl	8000b18 <__aeabi_dcmpeq>
 80163c4:	b910      	cbnz	r0, 80163cc <_dtoa_r+0x184>
 80163c6:	9b00      	ldr	r3, [sp, #0]
 80163c8:	3b01      	subs	r3, #1
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	9b00      	ldr	r3, [sp, #0]
 80163ce:	2b16      	cmp	r3, #22
 80163d0:	d85a      	bhi.n	8016488 <_dtoa_r+0x240>
 80163d2:	9a00      	ldr	r2, [sp, #0]
 80163d4:	4b57      	ldr	r3, [pc, #348]	; (8016534 <_dtoa_r+0x2ec>)
 80163d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163de:	ec51 0b19 	vmov	r0, r1, d9
 80163e2:	f7ea fba3 	bl	8000b2c <__aeabi_dcmplt>
 80163e6:	2800      	cmp	r0, #0
 80163e8:	d050      	beq.n	801648c <_dtoa_r+0x244>
 80163ea:	9b00      	ldr	r3, [sp, #0]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	9300      	str	r3, [sp, #0]
 80163f0:	2300      	movs	r3, #0
 80163f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80163f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163f6:	1b5d      	subs	r5, r3, r5
 80163f8:	1e6b      	subs	r3, r5, #1
 80163fa:	9305      	str	r3, [sp, #20]
 80163fc:	bf45      	ittet	mi
 80163fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8016402:	9304      	strmi	r3, [sp, #16]
 8016404:	2300      	movpl	r3, #0
 8016406:	2300      	movmi	r3, #0
 8016408:	bf4c      	ite	mi
 801640a:	9305      	strmi	r3, [sp, #20]
 801640c:	9304      	strpl	r3, [sp, #16]
 801640e:	9b00      	ldr	r3, [sp, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	db3d      	blt.n	8016490 <_dtoa_r+0x248>
 8016414:	9b05      	ldr	r3, [sp, #20]
 8016416:	9a00      	ldr	r2, [sp, #0]
 8016418:	920a      	str	r2, [sp, #40]	; 0x28
 801641a:	4413      	add	r3, r2
 801641c:	9305      	str	r3, [sp, #20]
 801641e:	2300      	movs	r3, #0
 8016420:	9307      	str	r3, [sp, #28]
 8016422:	9b06      	ldr	r3, [sp, #24]
 8016424:	2b09      	cmp	r3, #9
 8016426:	f200 8089 	bhi.w	801653c <_dtoa_r+0x2f4>
 801642a:	2b05      	cmp	r3, #5
 801642c:	bfc4      	itt	gt
 801642e:	3b04      	subgt	r3, #4
 8016430:	9306      	strgt	r3, [sp, #24]
 8016432:	9b06      	ldr	r3, [sp, #24]
 8016434:	f1a3 0302 	sub.w	r3, r3, #2
 8016438:	bfcc      	ite	gt
 801643a:	2500      	movgt	r5, #0
 801643c:	2501      	movle	r5, #1
 801643e:	2b03      	cmp	r3, #3
 8016440:	f200 8087 	bhi.w	8016552 <_dtoa_r+0x30a>
 8016444:	e8df f003 	tbb	[pc, r3]
 8016448:	59383a2d 	.word	0x59383a2d
 801644c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016450:	441d      	add	r5, r3
 8016452:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016456:	2b20      	cmp	r3, #32
 8016458:	bfc1      	itttt	gt
 801645a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801645e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016462:	fa0b f303 	lslgt.w	r3, fp, r3
 8016466:	fa26 f000 	lsrgt.w	r0, r6, r0
 801646a:	bfda      	itte	le
 801646c:	f1c3 0320 	rsble	r3, r3, #32
 8016470:	fa06 f003 	lslle.w	r0, r6, r3
 8016474:	4318      	orrgt	r0, r3
 8016476:	f7ea f86d 	bl	8000554 <__aeabi_ui2d>
 801647a:	2301      	movs	r3, #1
 801647c:	4606      	mov	r6, r0
 801647e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016482:	3d01      	subs	r5, #1
 8016484:	930e      	str	r3, [sp, #56]	; 0x38
 8016486:	e76a      	b.n	801635e <_dtoa_r+0x116>
 8016488:	2301      	movs	r3, #1
 801648a:	e7b2      	b.n	80163f2 <_dtoa_r+0x1aa>
 801648c:	900b      	str	r0, [sp, #44]	; 0x2c
 801648e:	e7b1      	b.n	80163f4 <_dtoa_r+0x1ac>
 8016490:	9b04      	ldr	r3, [sp, #16]
 8016492:	9a00      	ldr	r2, [sp, #0]
 8016494:	1a9b      	subs	r3, r3, r2
 8016496:	9304      	str	r3, [sp, #16]
 8016498:	4253      	negs	r3, r2
 801649a:	9307      	str	r3, [sp, #28]
 801649c:	2300      	movs	r3, #0
 801649e:	930a      	str	r3, [sp, #40]	; 0x28
 80164a0:	e7bf      	b.n	8016422 <_dtoa_r+0x1da>
 80164a2:	2300      	movs	r3, #0
 80164a4:	9308      	str	r3, [sp, #32]
 80164a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	dc55      	bgt.n	8016558 <_dtoa_r+0x310>
 80164ac:	2301      	movs	r3, #1
 80164ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80164b2:	461a      	mov	r2, r3
 80164b4:	9209      	str	r2, [sp, #36]	; 0x24
 80164b6:	e00c      	b.n	80164d2 <_dtoa_r+0x28a>
 80164b8:	2301      	movs	r3, #1
 80164ba:	e7f3      	b.n	80164a4 <_dtoa_r+0x25c>
 80164bc:	2300      	movs	r3, #0
 80164be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164c0:	9308      	str	r3, [sp, #32]
 80164c2:	9b00      	ldr	r3, [sp, #0]
 80164c4:	4413      	add	r3, r2
 80164c6:	9302      	str	r3, [sp, #8]
 80164c8:	3301      	adds	r3, #1
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	9303      	str	r3, [sp, #12]
 80164ce:	bfb8      	it	lt
 80164d0:	2301      	movlt	r3, #1
 80164d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80164d4:	2200      	movs	r2, #0
 80164d6:	6042      	str	r2, [r0, #4]
 80164d8:	2204      	movs	r2, #4
 80164da:	f102 0614 	add.w	r6, r2, #20
 80164de:	429e      	cmp	r6, r3
 80164e0:	6841      	ldr	r1, [r0, #4]
 80164e2:	d93d      	bls.n	8016560 <_dtoa_r+0x318>
 80164e4:	4620      	mov	r0, r4
 80164e6:	f000 fecd 	bl	8017284 <_Balloc>
 80164ea:	9001      	str	r0, [sp, #4]
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d13b      	bne.n	8016568 <_dtoa_r+0x320>
 80164f0:	4b11      	ldr	r3, [pc, #68]	; (8016538 <_dtoa_r+0x2f0>)
 80164f2:	4602      	mov	r2, r0
 80164f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80164f8:	e6c0      	b.n	801627c <_dtoa_r+0x34>
 80164fa:	2301      	movs	r3, #1
 80164fc:	e7df      	b.n	80164be <_dtoa_r+0x276>
 80164fe:	bf00      	nop
 8016500:	636f4361 	.word	0x636f4361
 8016504:	3fd287a7 	.word	0x3fd287a7
 8016508:	8b60c8b3 	.word	0x8b60c8b3
 801650c:	3fc68a28 	.word	0x3fc68a28
 8016510:	509f79fb 	.word	0x509f79fb
 8016514:	3fd34413 	.word	0x3fd34413
 8016518:	080185d1 	.word	0x080185d1
 801651c:	080185e8 	.word	0x080185e8
 8016520:	7ff00000 	.word	0x7ff00000
 8016524:	080185cd 	.word	0x080185cd
 8016528:	080185c4 	.word	0x080185c4
 801652c:	080185a1 	.word	0x080185a1
 8016530:	3ff80000 	.word	0x3ff80000
 8016534:	08018738 	.word	0x08018738
 8016538:	08018643 	.word	0x08018643
 801653c:	2501      	movs	r5, #1
 801653e:	2300      	movs	r3, #0
 8016540:	9306      	str	r3, [sp, #24]
 8016542:	9508      	str	r5, [sp, #32]
 8016544:	f04f 33ff 	mov.w	r3, #4294967295
 8016548:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801654c:	2200      	movs	r2, #0
 801654e:	2312      	movs	r3, #18
 8016550:	e7b0      	b.n	80164b4 <_dtoa_r+0x26c>
 8016552:	2301      	movs	r3, #1
 8016554:	9308      	str	r3, [sp, #32]
 8016556:	e7f5      	b.n	8016544 <_dtoa_r+0x2fc>
 8016558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801655a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801655e:	e7b8      	b.n	80164d2 <_dtoa_r+0x28a>
 8016560:	3101      	adds	r1, #1
 8016562:	6041      	str	r1, [r0, #4]
 8016564:	0052      	lsls	r2, r2, #1
 8016566:	e7b8      	b.n	80164da <_dtoa_r+0x292>
 8016568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801656a:	9a01      	ldr	r2, [sp, #4]
 801656c:	601a      	str	r2, [r3, #0]
 801656e:	9b03      	ldr	r3, [sp, #12]
 8016570:	2b0e      	cmp	r3, #14
 8016572:	f200 809d 	bhi.w	80166b0 <_dtoa_r+0x468>
 8016576:	2d00      	cmp	r5, #0
 8016578:	f000 809a 	beq.w	80166b0 <_dtoa_r+0x468>
 801657c:	9b00      	ldr	r3, [sp, #0]
 801657e:	2b00      	cmp	r3, #0
 8016580:	dd32      	ble.n	80165e8 <_dtoa_r+0x3a0>
 8016582:	4ab7      	ldr	r2, [pc, #732]	; (8016860 <_dtoa_r+0x618>)
 8016584:	f003 030f 	and.w	r3, r3, #15
 8016588:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801658c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016590:	9b00      	ldr	r3, [sp, #0]
 8016592:	05d8      	lsls	r0, r3, #23
 8016594:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016598:	d516      	bpl.n	80165c8 <_dtoa_r+0x380>
 801659a:	4bb2      	ldr	r3, [pc, #712]	; (8016864 <_dtoa_r+0x61c>)
 801659c:	ec51 0b19 	vmov	r0, r1, d9
 80165a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80165a4:	f7ea f97a 	bl	800089c <__aeabi_ddiv>
 80165a8:	f007 070f 	and.w	r7, r7, #15
 80165ac:	4682      	mov	sl, r0
 80165ae:	468b      	mov	fp, r1
 80165b0:	2503      	movs	r5, #3
 80165b2:	4eac      	ldr	r6, [pc, #688]	; (8016864 <_dtoa_r+0x61c>)
 80165b4:	b957      	cbnz	r7, 80165cc <_dtoa_r+0x384>
 80165b6:	4642      	mov	r2, r8
 80165b8:	464b      	mov	r3, r9
 80165ba:	4650      	mov	r0, sl
 80165bc:	4659      	mov	r1, fp
 80165be:	f7ea f96d 	bl	800089c <__aeabi_ddiv>
 80165c2:	4682      	mov	sl, r0
 80165c4:	468b      	mov	fp, r1
 80165c6:	e028      	b.n	801661a <_dtoa_r+0x3d2>
 80165c8:	2502      	movs	r5, #2
 80165ca:	e7f2      	b.n	80165b2 <_dtoa_r+0x36a>
 80165cc:	07f9      	lsls	r1, r7, #31
 80165ce:	d508      	bpl.n	80165e2 <_dtoa_r+0x39a>
 80165d0:	4640      	mov	r0, r8
 80165d2:	4649      	mov	r1, r9
 80165d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80165d8:	f7ea f836 	bl	8000648 <__aeabi_dmul>
 80165dc:	3501      	adds	r5, #1
 80165de:	4680      	mov	r8, r0
 80165e0:	4689      	mov	r9, r1
 80165e2:	107f      	asrs	r7, r7, #1
 80165e4:	3608      	adds	r6, #8
 80165e6:	e7e5      	b.n	80165b4 <_dtoa_r+0x36c>
 80165e8:	f000 809b 	beq.w	8016722 <_dtoa_r+0x4da>
 80165ec:	9b00      	ldr	r3, [sp, #0]
 80165ee:	4f9d      	ldr	r7, [pc, #628]	; (8016864 <_dtoa_r+0x61c>)
 80165f0:	425e      	negs	r6, r3
 80165f2:	4b9b      	ldr	r3, [pc, #620]	; (8016860 <_dtoa_r+0x618>)
 80165f4:	f006 020f 	and.w	r2, r6, #15
 80165f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016600:	ec51 0b19 	vmov	r0, r1, d9
 8016604:	f7ea f820 	bl	8000648 <__aeabi_dmul>
 8016608:	1136      	asrs	r6, r6, #4
 801660a:	4682      	mov	sl, r0
 801660c:	468b      	mov	fp, r1
 801660e:	2300      	movs	r3, #0
 8016610:	2502      	movs	r5, #2
 8016612:	2e00      	cmp	r6, #0
 8016614:	d17a      	bne.n	801670c <_dtoa_r+0x4c4>
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1d3      	bne.n	80165c2 <_dtoa_r+0x37a>
 801661a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801661c:	2b00      	cmp	r3, #0
 801661e:	f000 8082 	beq.w	8016726 <_dtoa_r+0x4de>
 8016622:	4b91      	ldr	r3, [pc, #580]	; (8016868 <_dtoa_r+0x620>)
 8016624:	2200      	movs	r2, #0
 8016626:	4650      	mov	r0, sl
 8016628:	4659      	mov	r1, fp
 801662a:	f7ea fa7f 	bl	8000b2c <__aeabi_dcmplt>
 801662e:	2800      	cmp	r0, #0
 8016630:	d079      	beq.n	8016726 <_dtoa_r+0x4de>
 8016632:	9b03      	ldr	r3, [sp, #12]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d076      	beq.n	8016726 <_dtoa_r+0x4de>
 8016638:	9b02      	ldr	r3, [sp, #8]
 801663a:	2b00      	cmp	r3, #0
 801663c:	dd36      	ble.n	80166ac <_dtoa_r+0x464>
 801663e:	9b00      	ldr	r3, [sp, #0]
 8016640:	4650      	mov	r0, sl
 8016642:	4659      	mov	r1, fp
 8016644:	1e5f      	subs	r7, r3, #1
 8016646:	2200      	movs	r2, #0
 8016648:	4b88      	ldr	r3, [pc, #544]	; (801686c <_dtoa_r+0x624>)
 801664a:	f7e9 fffd 	bl	8000648 <__aeabi_dmul>
 801664e:	9e02      	ldr	r6, [sp, #8]
 8016650:	4682      	mov	sl, r0
 8016652:	468b      	mov	fp, r1
 8016654:	3501      	adds	r5, #1
 8016656:	4628      	mov	r0, r5
 8016658:	f7e9 ff8c 	bl	8000574 <__aeabi_i2d>
 801665c:	4652      	mov	r2, sl
 801665e:	465b      	mov	r3, fp
 8016660:	f7e9 fff2 	bl	8000648 <__aeabi_dmul>
 8016664:	4b82      	ldr	r3, [pc, #520]	; (8016870 <_dtoa_r+0x628>)
 8016666:	2200      	movs	r2, #0
 8016668:	f7e9 fe38 	bl	80002dc <__adddf3>
 801666c:	46d0      	mov	r8, sl
 801666e:	46d9      	mov	r9, fp
 8016670:	4682      	mov	sl, r0
 8016672:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016676:	2e00      	cmp	r6, #0
 8016678:	d158      	bne.n	801672c <_dtoa_r+0x4e4>
 801667a:	4b7e      	ldr	r3, [pc, #504]	; (8016874 <_dtoa_r+0x62c>)
 801667c:	2200      	movs	r2, #0
 801667e:	4640      	mov	r0, r8
 8016680:	4649      	mov	r1, r9
 8016682:	f7e9 fe29 	bl	80002d8 <__aeabi_dsub>
 8016686:	4652      	mov	r2, sl
 8016688:	465b      	mov	r3, fp
 801668a:	4680      	mov	r8, r0
 801668c:	4689      	mov	r9, r1
 801668e:	f7ea fa6b 	bl	8000b68 <__aeabi_dcmpgt>
 8016692:	2800      	cmp	r0, #0
 8016694:	f040 8295 	bne.w	8016bc2 <_dtoa_r+0x97a>
 8016698:	4652      	mov	r2, sl
 801669a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801669e:	4640      	mov	r0, r8
 80166a0:	4649      	mov	r1, r9
 80166a2:	f7ea fa43 	bl	8000b2c <__aeabi_dcmplt>
 80166a6:	2800      	cmp	r0, #0
 80166a8:	f040 8289 	bne.w	8016bbe <_dtoa_r+0x976>
 80166ac:	ec5b ab19 	vmov	sl, fp, d9
 80166b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	f2c0 8148 	blt.w	8016948 <_dtoa_r+0x700>
 80166b8:	9a00      	ldr	r2, [sp, #0]
 80166ba:	2a0e      	cmp	r2, #14
 80166bc:	f300 8144 	bgt.w	8016948 <_dtoa_r+0x700>
 80166c0:	4b67      	ldr	r3, [pc, #412]	; (8016860 <_dtoa_r+0x618>)
 80166c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80166c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80166ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	f280 80d5 	bge.w	801687c <_dtoa_r+0x634>
 80166d2:	9b03      	ldr	r3, [sp, #12]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f300 80d1 	bgt.w	801687c <_dtoa_r+0x634>
 80166da:	f040 826f 	bne.w	8016bbc <_dtoa_r+0x974>
 80166de:	4b65      	ldr	r3, [pc, #404]	; (8016874 <_dtoa_r+0x62c>)
 80166e0:	2200      	movs	r2, #0
 80166e2:	4640      	mov	r0, r8
 80166e4:	4649      	mov	r1, r9
 80166e6:	f7e9 ffaf 	bl	8000648 <__aeabi_dmul>
 80166ea:	4652      	mov	r2, sl
 80166ec:	465b      	mov	r3, fp
 80166ee:	f7ea fa31 	bl	8000b54 <__aeabi_dcmpge>
 80166f2:	9e03      	ldr	r6, [sp, #12]
 80166f4:	4637      	mov	r7, r6
 80166f6:	2800      	cmp	r0, #0
 80166f8:	f040 8245 	bne.w	8016b86 <_dtoa_r+0x93e>
 80166fc:	9d01      	ldr	r5, [sp, #4]
 80166fe:	2331      	movs	r3, #49	; 0x31
 8016700:	f805 3b01 	strb.w	r3, [r5], #1
 8016704:	9b00      	ldr	r3, [sp, #0]
 8016706:	3301      	adds	r3, #1
 8016708:	9300      	str	r3, [sp, #0]
 801670a:	e240      	b.n	8016b8e <_dtoa_r+0x946>
 801670c:	07f2      	lsls	r2, r6, #31
 801670e:	d505      	bpl.n	801671c <_dtoa_r+0x4d4>
 8016710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016714:	f7e9 ff98 	bl	8000648 <__aeabi_dmul>
 8016718:	3501      	adds	r5, #1
 801671a:	2301      	movs	r3, #1
 801671c:	1076      	asrs	r6, r6, #1
 801671e:	3708      	adds	r7, #8
 8016720:	e777      	b.n	8016612 <_dtoa_r+0x3ca>
 8016722:	2502      	movs	r5, #2
 8016724:	e779      	b.n	801661a <_dtoa_r+0x3d2>
 8016726:	9f00      	ldr	r7, [sp, #0]
 8016728:	9e03      	ldr	r6, [sp, #12]
 801672a:	e794      	b.n	8016656 <_dtoa_r+0x40e>
 801672c:	9901      	ldr	r1, [sp, #4]
 801672e:	4b4c      	ldr	r3, [pc, #304]	; (8016860 <_dtoa_r+0x618>)
 8016730:	4431      	add	r1, r6
 8016732:	910d      	str	r1, [sp, #52]	; 0x34
 8016734:	9908      	ldr	r1, [sp, #32]
 8016736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801673a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801673e:	2900      	cmp	r1, #0
 8016740:	d043      	beq.n	80167ca <_dtoa_r+0x582>
 8016742:	494d      	ldr	r1, [pc, #308]	; (8016878 <_dtoa_r+0x630>)
 8016744:	2000      	movs	r0, #0
 8016746:	f7ea f8a9 	bl	800089c <__aeabi_ddiv>
 801674a:	4652      	mov	r2, sl
 801674c:	465b      	mov	r3, fp
 801674e:	f7e9 fdc3 	bl	80002d8 <__aeabi_dsub>
 8016752:	9d01      	ldr	r5, [sp, #4]
 8016754:	4682      	mov	sl, r0
 8016756:	468b      	mov	fp, r1
 8016758:	4649      	mov	r1, r9
 801675a:	4640      	mov	r0, r8
 801675c:	f7ea fa24 	bl	8000ba8 <__aeabi_d2iz>
 8016760:	4606      	mov	r6, r0
 8016762:	f7e9 ff07 	bl	8000574 <__aeabi_i2d>
 8016766:	4602      	mov	r2, r0
 8016768:	460b      	mov	r3, r1
 801676a:	4640      	mov	r0, r8
 801676c:	4649      	mov	r1, r9
 801676e:	f7e9 fdb3 	bl	80002d8 <__aeabi_dsub>
 8016772:	3630      	adds	r6, #48	; 0x30
 8016774:	f805 6b01 	strb.w	r6, [r5], #1
 8016778:	4652      	mov	r2, sl
 801677a:	465b      	mov	r3, fp
 801677c:	4680      	mov	r8, r0
 801677e:	4689      	mov	r9, r1
 8016780:	f7ea f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8016784:	2800      	cmp	r0, #0
 8016786:	d163      	bne.n	8016850 <_dtoa_r+0x608>
 8016788:	4642      	mov	r2, r8
 801678a:	464b      	mov	r3, r9
 801678c:	4936      	ldr	r1, [pc, #216]	; (8016868 <_dtoa_r+0x620>)
 801678e:	2000      	movs	r0, #0
 8016790:	f7e9 fda2 	bl	80002d8 <__aeabi_dsub>
 8016794:	4652      	mov	r2, sl
 8016796:	465b      	mov	r3, fp
 8016798:	f7ea f9c8 	bl	8000b2c <__aeabi_dcmplt>
 801679c:	2800      	cmp	r0, #0
 801679e:	f040 80b5 	bne.w	801690c <_dtoa_r+0x6c4>
 80167a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167a4:	429d      	cmp	r5, r3
 80167a6:	d081      	beq.n	80166ac <_dtoa_r+0x464>
 80167a8:	4b30      	ldr	r3, [pc, #192]	; (801686c <_dtoa_r+0x624>)
 80167aa:	2200      	movs	r2, #0
 80167ac:	4650      	mov	r0, sl
 80167ae:	4659      	mov	r1, fp
 80167b0:	f7e9 ff4a 	bl	8000648 <__aeabi_dmul>
 80167b4:	4b2d      	ldr	r3, [pc, #180]	; (801686c <_dtoa_r+0x624>)
 80167b6:	4682      	mov	sl, r0
 80167b8:	468b      	mov	fp, r1
 80167ba:	4640      	mov	r0, r8
 80167bc:	4649      	mov	r1, r9
 80167be:	2200      	movs	r2, #0
 80167c0:	f7e9 ff42 	bl	8000648 <__aeabi_dmul>
 80167c4:	4680      	mov	r8, r0
 80167c6:	4689      	mov	r9, r1
 80167c8:	e7c6      	b.n	8016758 <_dtoa_r+0x510>
 80167ca:	4650      	mov	r0, sl
 80167cc:	4659      	mov	r1, fp
 80167ce:	f7e9 ff3b 	bl	8000648 <__aeabi_dmul>
 80167d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167d4:	9d01      	ldr	r5, [sp, #4]
 80167d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80167d8:	4682      	mov	sl, r0
 80167da:	468b      	mov	fp, r1
 80167dc:	4649      	mov	r1, r9
 80167de:	4640      	mov	r0, r8
 80167e0:	f7ea f9e2 	bl	8000ba8 <__aeabi_d2iz>
 80167e4:	4606      	mov	r6, r0
 80167e6:	f7e9 fec5 	bl	8000574 <__aeabi_i2d>
 80167ea:	3630      	adds	r6, #48	; 0x30
 80167ec:	4602      	mov	r2, r0
 80167ee:	460b      	mov	r3, r1
 80167f0:	4640      	mov	r0, r8
 80167f2:	4649      	mov	r1, r9
 80167f4:	f7e9 fd70 	bl	80002d8 <__aeabi_dsub>
 80167f8:	f805 6b01 	strb.w	r6, [r5], #1
 80167fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167fe:	429d      	cmp	r5, r3
 8016800:	4680      	mov	r8, r0
 8016802:	4689      	mov	r9, r1
 8016804:	f04f 0200 	mov.w	r2, #0
 8016808:	d124      	bne.n	8016854 <_dtoa_r+0x60c>
 801680a:	4b1b      	ldr	r3, [pc, #108]	; (8016878 <_dtoa_r+0x630>)
 801680c:	4650      	mov	r0, sl
 801680e:	4659      	mov	r1, fp
 8016810:	f7e9 fd64 	bl	80002dc <__adddf3>
 8016814:	4602      	mov	r2, r0
 8016816:	460b      	mov	r3, r1
 8016818:	4640      	mov	r0, r8
 801681a:	4649      	mov	r1, r9
 801681c:	f7ea f9a4 	bl	8000b68 <__aeabi_dcmpgt>
 8016820:	2800      	cmp	r0, #0
 8016822:	d173      	bne.n	801690c <_dtoa_r+0x6c4>
 8016824:	4652      	mov	r2, sl
 8016826:	465b      	mov	r3, fp
 8016828:	4913      	ldr	r1, [pc, #76]	; (8016878 <_dtoa_r+0x630>)
 801682a:	2000      	movs	r0, #0
 801682c:	f7e9 fd54 	bl	80002d8 <__aeabi_dsub>
 8016830:	4602      	mov	r2, r0
 8016832:	460b      	mov	r3, r1
 8016834:	4640      	mov	r0, r8
 8016836:	4649      	mov	r1, r9
 8016838:	f7ea f978 	bl	8000b2c <__aeabi_dcmplt>
 801683c:	2800      	cmp	r0, #0
 801683e:	f43f af35 	beq.w	80166ac <_dtoa_r+0x464>
 8016842:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016844:	1e6b      	subs	r3, r5, #1
 8016846:	930f      	str	r3, [sp, #60]	; 0x3c
 8016848:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801684c:	2b30      	cmp	r3, #48	; 0x30
 801684e:	d0f8      	beq.n	8016842 <_dtoa_r+0x5fa>
 8016850:	9700      	str	r7, [sp, #0]
 8016852:	e049      	b.n	80168e8 <_dtoa_r+0x6a0>
 8016854:	4b05      	ldr	r3, [pc, #20]	; (801686c <_dtoa_r+0x624>)
 8016856:	f7e9 fef7 	bl	8000648 <__aeabi_dmul>
 801685a:	4680      	mov	r8, r0
 801685c:	4689      	mov	r9, r1
 801685e:	e7bd      	b.n	80167dc <_dtoa_r+0x594>
 8016860:	08018738 	.word	0x08018738
 8016864:	08018710 	.word	0x08018710
 8016868:	3ff00000 	.word	0x3ff00000
 801686c:	40240000 	.word	0x40240000
 8016870:	401c0000 	.word	0x401c0000
 8016874:	40140000 	.word	0x40140000
 8016878:	3fe00000 	.word	0x3fe00000
 801687c:	9d01      	ldr	r5, [sp, #4]
 801687e:	4656      	mov	r6, sl
 8016880:	465f      	mov	r7, fp
 8016882:	4642      	mov	r2, r8
 8016884:	464b      	mov	r3, r9
 8016886:	4630      	mov	r0, r6
 8016888:	4639      	mov	r1, r7
 801688a:	f7ea f807 	bl	800089c <__aeabi_ddiv>
 801688e:	f7ea f98b 	bl	8000ba8 <__aeabi_d2iz>
 8016892:	4682      	mov	sl, r0
 8016894:	f7e9 fe6e 	bl	8000574 <__aeabi_i2d>
 8016898:	4642      	mov	r2, r8
 801689a:	464b      	mov	r3, r9
 801689c:	f7e9 fed4 	bl	8000648 <__aeabi_dmul>
 80168a0:	4602      	mov	r2, r0
 80168a2:	460b      	mov	r3, r1
 80168a4:	4630      	mov	r0, r6
 80168a6:	4639      	mov	r1, r7
 80168a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80168ac:	f7e9 fd14 	bl	80002d8 <__aeabi_dsub>
 80168b0:	f805 6b01 	strb.w	r6, [r5], #1
 80168b4:	9e01      	ldr	r6, [sp, #4]
 80168b6:	9f03      	ldr	r7, [sp, #12]
 80168b8:	1bae      	subs	r6, r5, r6
 80168ba:	42b7      	cmp	r7, r6
 80168bc:	4602      	mov	r2, r0
 80168be:	460b      	mov	r3, r1
 80168c0:	d135      	bne.n	801692e <_dtoa_r+0x6e6>
 80168c2:	f7e9 fd0b 	bl	80002dc <__adddf3>
 80168c6:	4642      	mov	r2, r8
 80168c8:	464b      	mov	r3, r9
 80168ca:	4606      	mov	r6, r0
 80168cc:	460f      	mov	r7, r1
 80168ce:	f7ea f94b 	bl	8000b68 <__aeabi_dcmpgt>
 80168d2:	b9d0      	cbnz	r0, 801690a <_dtoa_r+0x6c2>
 80168d4:	4642      	mov	r2, r8
 80168d6:	464b      	mov	r3, r9
 80168d8:	4630      	mov	r0, r6
 80168da:	4639      	mov	r1, r7
 80168dc:	f7ea f91c 	bl	8000b18 <__aeabi_dcmpeq>
 80168e0:	b110      	cbz	r0, 80168e8 <_dtoa_r+0x6a0>
 80168e2:	f01a 0f01 	tst.w	sl, #1
 80168e6:	d110      	bne.n	801690a <_dtoa_r+0x6c2>
 80168e8:	4620      	mov	r0, r4
 80168ea:	ee18 1a10 	vmov	r1, s16
 80168ee:	f000 fd09 	bl	8017304 <_Bfree>
 80168f2:	2300      	movs	r3, #0
 80168f4:	9800      	ldr	r0, [sp, #0]
 80168f6:	702b      	strb	r3, [r5, #0]
 80168f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168fa:	3001      	adds	r0, #1
 80168fc:	6018      	str	r0, [r3, #0]
 80168fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016900:	2b00      	cmp	r3, #0
 8016902:	f43f acf1 	beq.w	80162e8 <_dtoa_r+0xa0>
 8016906:	601d      	str	r5, [r3, #0]
 8016908:	e4ee      	b.n	80162e8 <_dtoa_r+0xa0>
 801690a:	9f00      	ldr	r7, [sp, #0]
 801690c:	462b      	mov	r3, r5
 801690e:	461d      	mov	r5, r3
 8016910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016914:	2a39      	cmp	r2, #57	; 0x39
 8016916:	d106      	bne.n	8016926 <_dtoa_r+0x6de>
 8016918:	9a01      	ldr	r2, [sp, #4]
 801691a:	429a      	cmp	r2, r3
 801691c:	d1f7      	bne.n	801690e <_dtoa_r+0x6c6>
 801691e:	9901      	ldr	r1, [sp, #4]
 8016920:	2230      	movs	r2, #48	; 0x30
 8016922:	3701      	adds	r7, #1
 8016924:	700a      	strb	r2, [r1, #0]
 8016926:	781a      	ldrb	r2, [r3, #0]
 8016928:	3201      	adds	r2, #1
 801692a:	701a      	strb	r2, [r3, #0]
 801692c:	e790      	b.n	8016850 <_dtoa_r+0x608>
 801692e:	4ba6      	ldr	r3, [pc, #664]	; (8016bc8 <_dtoa_r+0x980>)
 8016930:	2200      	movs	r2, #0
 8016932:	f7e9 fe89 	bl	8000648 <__aeabi_dmul>
 8016936:	2200      	movs	r2, #0
 8016938:	2300      	movs	r3, #0
 801693a:	4606      	mov	r6, r0
 801693c:	460f      	mov	r7, r1
 801693e:	f7ea f8eb 	bl	8000b18 <__aeabi_dcmpeq>
 8016942:	2800      	cmp	r0, #0
 8016944:	d09d      	beq.n	8016882 <_dtoa_r+0x63a>
 8016946:	e7cf      	b.n	80168e8 <_dtoa_r+0x6a0>
 8016948:	9a08      	ldr	r2, [sp, #32]
 801694a:	2a00      	cmp	r2, #0
 801694c:	f000 80d7 	beq.w	8016afe <_dtoa_r+0x8b6>
 8016950:	9a06      	ldr	r2, [sp, #24]
 8016952:	2a01      	cmp	r2, #1
 8016954:	f300 80ba 	bgt.w	8016acc <_dtoa_r+0x884>
 8016958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801695a:	2a00      	cmp	r2, #0
 801695c:	f000 80b2 	beq.w	8016ac4 <_dtoa_r+0x87c>
 8016960:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016964:	9e07      	ldr	r6, [sp, #28]
 8016966:	9d04      	ldr	r5, [sp, #16]
 8016968:	9a04      	ldr	r2, [sp, #16]
 801696a:	441a      	add	r2, r3
 801696c:	9204      	str	r2, [sp, #16]
 801696e:	9a05      	ldr	r2, [sp, #20]
 8016970:	2101      	movs	r1, #1
 8016972:	441a      	add	r2, r3
 8016974:	4620      	mov	r0, r4
 8016976:	9205      	str	r2, [sp, #20]
 8016978:	f000 fd7c 	bl	8017474 <__i2b>
 801697c:	4607      	mov	r7, r0
 801697e:	2d00      	cmp	r5, #0
 8016980:	dd0c      	ble.n	801699c <_dtoa_r+0x754>
 8016982:	9b05      	ldr	r3, [sp, #20]
 8016984:	2b00      	cmp	r3, #0
 8016986:	dd09      	ble.n	801699c <_dtoa_r+0x754>
 8016988:	42ab      	cmp	r3, r5
 801698a:	9a04      	ldr	r2, [sp, #16]
 801698c:	bfa8      	it	ge
 801698e:	462b      	movge	r3, r5
 8016990:	1ad2      	subs	r2, r2, r3
 8016992:	9204      	str	r2, [sp, #16]
 8016994:	9a05      	ldr	r2, [sp, #20]
 8016996:	1aed      	subs	r5, r5, r3
 8016998:	1ad3      	subs	r3, r2, r3
 801699a:	9305      	str	r3, [sp, #20]
 801699c:	9b07      	ldr	r3, [sp, #28]
 801699e:	b31b      	cbz	r3, 80169e8 <_dtoa_r+0x7a0>
 80169a0:	9b08      	ldr	r3, [sp, #32]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	f000 80af 	beq.w	8016b06 <_dtoa_r+0x8be>
 80169a8:	2e00      	cmp	r6, #0
 80169aa:	dd13      	ble.n	80169d4 <_dtoa_r+0x78c>
 80169ac:	4639      	mov	r1, r7
 80169ae:	4632      	mov	r2, r6
 80169b0:	4620      	mov	r0, r4
 80169b2:	f000 fe1f 	bl	80175f4 <__pow5mult>
 80169b6:	ee18 2a10 	vmov	r2, s16
 80169ba:	4601      	mov	r1, r0
 80169bc:	4607      	mov	r7, r0
 80169be:	4620      	mov	r0, r4
 80169c0:	f000 fd6e 	bl	80174a0 <__multiply>
 80169c4:	ee18 1a10 	vmov	r1, s16
 80169c8:	4680      	mov	r8, r0
 80169ca:	4620      	mov	r0, r4
 80169cc:	f000 fc9a 	bl	8017304 <_Bfree>
 80169d0:	ee08 8a10 	vmov	s16, r8
 80169d4:	9b07      	ldr	r3, [sp, #28]
 80169d6:	1b9a      	subs	r2, r3, r6
 80169d8:	d006      	beq.n	80169e8 <_dtoa_r+0x7a0>
 80169da:	ee18 1a10 	vmov	r1, s16
 80169de:	4620      	mov	r0, r4
 80169e0:	f000 fe08 	bl	80175f4 <__pow5mult>
 80169e4:	ee08 0a10 	vmov	s16, r0
 80169e8:	2101      	movs	r1, #1
 80169ea:	4620      	mov	r0, r4
 80169ec:	f000 fd42 	bl	8017474 <__i2b>
 80169f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	4606      	mov	r6, r0
 80169f6:	f340 8088 	ble.w	8016b0a <_dtoa_r+0x8c2>
 80169fa:	461a      	mov	r2, r3
 80169fc:	4601      	mov	r1, r0
 80169fe:	4620      	mov	r0, r4
 8016a00:	f000 fdf8 	bl	80175f4 <__pow5mult>
 8016a04:	9b06      	ldr	r3, [sp, #24]
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	4606      	mov	r6, r0
 8016a0a:	f340 8081 	ble.w	8016b10 <_dtoa_r+0x8c8>
 8016a0e:	f04f 0800 	mov.w	r8, #0
 8016a12:	6933      	ldr	r3, [r6, #16]
 8016a14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016a18:	6918      	ldr	r0, [r3, #16]
 8016a1a:	f000 fcdb 	bl	80173d4 <__hi0bits>
 8016a1e:	f1c0 0020 	rsb	r0, r0, #32
 8016a22:	9b05      	ldr	r3, [sp, #20]
 8016a24:	4418      	add	r0, r3
 8016a26:	f010 001f 	ands.w	r0, r0, #31
 8016a2a:	f000 8092 	beq.w	8016b52 <_dtoa_r+0x90a>
 8016a2e:	f1c0 0320 	rsb	r3, r0, #32
 8016a32:	2b04      	cmp	r3, #4
 8016a34:	f340 808a 	ble.w	8016b4c <_dtoa_r+0x904>
 8016a38:	f1c0 001c 	rsb	r0, r0, #28
 8016a3c:	9b04      	ldr	r3, [sp, #16]
 8016a3e:	4403      	add	r3, r0
 8016a40:	9304      	str	r3, [sp, #16]
 8016a42:	9b05      	ldr	r3, [sp, #20]
 8016a44:	4403      	add	r3, r0
 8016a46:	4405      	add	r5, r0
 8016a48:	9305      	str	r3, [sp, #20]
 8016a4a:	9b04      	ldr	r3, [sp, #16]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	dd07      	ble.n	8016a60 <_dtoa_r+0x818>
 8016a50:	ee18 1a10 	vmov	r1, s16
 8016a54:	461a      	mov	r2, r3
 8016a56:	4620      	mov	r0, r4
 8016a58:	f000 fe26 	bl	80176a8 <__lshift>
 8016a5c:	ee08 0a10 	vmov	s16, r0
 8016a60:	9b05      	ldr	r3, [sp, #20]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	dd05      	ble.n	8016a72 <_dtoa_r+0x82a>
 8016a66:	4631      	mov	r1, r6
 8016a68:	461a      	mov	r2, r3
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	f000 fe1c 	bl	80176a8 <__lshift>
 8016a70:	4606      	mov	r6, r0
 8016a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d06e      	beq.n	8016b56 <_dtoa_r+0x90e>
 8016a78:	ee18 0a10 	vmov	r0, s16
 8016a7c:	4631      	mov	r1, r6
 8016a7e:	f000 fe83 	bl	8017788 <__mcmp>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	da67      	bge.n	8016b56 <_dtoa_r+0x90e>
 8016a86:	9b00      	ldr	r3, [sp, #0]
 8016a88:	3b01      	subs	r3, #1
 8016a8a:	ee18 1a10 	vmov	r1, s16
 8016a8e:	9300      	str	r3, [sp, #0]
 8016a90:	220a      	movs	r2, #10
 8016a92:	2300      	movs	r3, #0
 8016a94:	4620      	mov	r0, r4
 8016a96:	f000 fc57 	bl	8017348 <__multadd>
 8016a9a:	9b08      	ldr	r3, [sp, #32]
 8016a9c:	ee08 0a10 	vmov	s16, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	f000 81b1 	beq.w	8016e08 <_dtoa_r+0xbc0>
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	4639      	mov	r1, r7
 8016aaa:	220a      	movs	r2, #10
 8016aac:	4620      	mov	r0, r4
 8016aae:	f000 fc4b 	bl	8017348 <__multadd>
 8016ab2:	9b02      	ldr	r3, [sp, #8]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	4607      	mov	r7, r0
 8016ab8:	f300 808e 	bgt.w	8016bd8 <_dtoa_r+0x990>
 8016abc:	9b06      	ldr	r3, [sp, #24]
 8016abe:	2b02      	cmp	r3, #2
 8016ac0:	dc51      	bgt.n	8016b66 <_dtoa_r+0x91e>
 8016ac2:	e089      	b.n	8016bd8 <_dtoa_r+0x990>
 8016ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016aca:	e74b      	b.n	8016964 <_dtoa_r+0x71c>
 8016acc:	9b03      	ldr	r3, [sp, #12]
 8016ace:	1e5e      	subs	r6, r3, #1
 8016ad0:	9b07      	ldr	r3, [sp, #28]
 8016ad2:	42b3      	cmp	r3, r6
 8016ad4:	bfbf      	itttt	lt
 8016ad6:	9b07      	ldrlt	r3, [sp, #28]
 8016ad8:	9607      	strlt	r6, [sp, #28]
 8016ada:	1af2      	sublt	r2, r6, r3
 8016adc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016ade:	bfb6      	itet	lt
 8016ae0:	189b      	addlt	r3, r3, r2
 8016ae2:	1b9e      	subge	r6, r3, r6
 8016ae4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016ae6:	9b03      	ldr	r3, [sp, #12]
 8016ae8:	bfb8      	it	lt
 8016aea:	2600      	movlt	r6, #0
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	bfb7      	itett	lt
 8016af0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8016af4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016af8:	1a9d      	sublt	r5, r3, r2
 8016afa:	2300      	movlt	r3, #0
 8016afc:	e734      	b.n	8016968 <_dtoa_r+0x720>
 8016afe:	9e07      	ldr	r6, [sp, #28]
 8016b00:	9d04      	ldr	r5, [sp, #16]
 8016b02:	9f08      	ldr	r7, [sp, #32]
 8016b04:	e73b      	b.n	801697e <_dtoa_r+0x736>
 8016b06:	9a07      	ldr	r2, [sp, #28]
 8016b08:	e767      	b.n	80169da <_dtoa_r+0x792>
 8016b0a:	9b06      	ldr	r3, [sp, #24]
 8016b0c:	2b01      	cmp	r3, #1
 8016b0e:	dc18      	bgt.n	8016b42 <_dtoa_r+0x8fa>
 8016b10:	f1ba 0f00 	cmp.w	sl, #0
 8016b14:	d115      	bne.n	8016b42 <_dtoa_r+0x8fa>
 8016b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b1a:	b993      	cbnz	r3, 8016b42 <_dtoa_r+0x8fa>
 8016b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016b20:	0d1b      	lsrs	r3, r3, #20
 8016b22:	051b      	lsls	r3, r3, #20
 8016b24:	b183      	cbz	r3, 8016b48 <_dtoa_r+0x900>
 8016b26:	9b04      	ldr	r3, [sp, #16]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	9304      	str	r3, [sp, #16]
 8016b2c:	9b05      	ldr	r3, [sp, #20]
 8016b2e:	3301      	adds	r3, #1
 8016b30:	9305      	str	r3, [sp, #20]
 8016b32:	f04f 0801 	mov.w	r8, #1
 8016b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	f47f af6a 	bne.w	8016a12 <_dtoa_r+0x7ca>
 8016b3e:	2001      	movs	r0, #1
 8016b40:	e76f      	b.n	8016a22 <_dtoa_r+0x7da>
 8016b42:	f04f 0800 	mov.w	r8, #0
 8016b46:	e7f6      	b.n	8016b36 <_dtoa_r+0x8ee>
 8016b48:	4698      	mov	r8, r3
 8016b4a:	e7f4      	b.n	8016b36 <_dtoa_r+0x8ee>
 8016b4c:	f43f af7d 	beq.w	8016a4a <_dtoa_r+0x802>
 8016b50:	4618      	mov	r0, r3
 8016b52:	301c      	adds	r0, #28
 8016b54:	e772      	b.n	8016a3c <_dtoa_r+0x7f4>
 8016b56:	9b03      	ldr	r3, [sp, #12]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	dc37      	bgt.n	8016bcc <_dtoa_r+0x984>
 8016b5c:	9b06      	ldr	r3, [sp, #24]
 8016b5e:	2b02      	cmp	r3, #2
 8016b60:	dd34      	ble.n	8016bcc <_dtoa_r+0x984>
 8016b62:	9b03      	ldr	r3, [sp, #12]
 8016b64:	9302      	str	r3, [sp, #8]
 8016b66:	9b02      	ldr	r3, [sp, #8]
 8016b68:	b96b      	cbnz	r3, 8016b86 <_dtoa_r+0x93e>
 8016b6a:	4631      	mov	r1, r6
 8016b6c:	2205      	movs	r2, #5
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f000 fbea 	bl	8017348 <__multadd>
 8016b74:	4601      	mov	r1, r0
 8016b76:	4606      	mov	r6, r0
 8016b78:	ee18 0a10 	vmov	r0, s16
 8016b7c:	f000 fe04 	bl	8017788 <__mcmp>
 8016b80:	2800      	cmp	r0, #0
 8016b82:	f73f adbb 	bgt.w	80166fc <_dtoa_r+0x4b4>
 8016b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b88:	9d01      	ldr	r5, [sp, #4]
 8016b8a:	43db      	mvns	r3, r3
 8016b8c:	9300      	str	r3, [sp, #0]
 8016b8e:	f04f 0800 	mov.w	r8, #0
 8016b92:	4631      	mov	r1, r6
 8016b94:	4620      	mov	r0, r4
 8016b96:	f000 fbb5 	bl	8017304 <_Bfree>
 8016b9a:	2f00      	cmp	r7, #0
 8016b9c:	f43f aea4 	beq.w	80168e8 <_dtoa_r+0x6a0>
 8016ba0:	f1b8 0f00 	cmp.w	r8, #0
 8016ba4:	d005      	beq.n	8016bb2 <_dtoa_r+0x96a>
 8016ba6:	45b8      	cmp	r8, r7
 8016ba8:	d003      	beq.n	8016bb2 <_dtoa_r+0x96a>
 8016baa:	4641      	mov	r1, r8
 8016bac:	4620      	mov	r0, r4
 8016bae:	f000 fba9 	bl	8017304 <_Bfree>
 8016bb2:	4639      	mov	r1, r7
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f000 fba5 	bl	8017304 <_Bfree>
 8016bba:	e695      	b.n	80168e8 <_dtoa_r+0x6a0>
 8016bbc:	2600      	movs	r6, #0
 8016bbe:	4637      	mov	r7, r6
 8016bc0:	e7e1      	b.n	8016b86 <_dtoa_r+0x93e>
 8016bc2:	9700      	str	r7, [sp, #0]
 8016bc4:	4637      	mov	r7, r6
 8016bc6:	e599      	b.n	80166fc <_dtoa_r+0x4b4>
 8016bc8:	40240000 	.word	0x40240000
 8016bcc:	9b08      	ldr	r3, [sp, #32]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f000 80ca 	beq.w	8016d68 <_dtoa_r+0xb20>
 8016bd4:	9b03      	ldr	r3, [sp, #12]
 8016bd6:	9302      	str	r3, [sp, #8]
 8016bd8:	2d00      	cmp	r5, #0
 8016bda:	dd05      	ble.n	8016be8 <_dtoa_r+0x9a0>
 8016bdc:	4639      	mov	r1, r7
 8016bde:	462a      	mov	r2, r5
 8016be0:	4620      	mov	r0, r4
 8016be2:	f000 fd61 	bl	80176a8 <__lshift>
 8016be6:	4607      	mov	r7, r0
 8016be8:	f1b8 0f00 	cmp.w	r8, #0
 8016bec:	d05b      	beq.n	8016ca6 <_dtoa_r+0xa5e>
 8016bee:	6879      	ldr	r1, [r7, #4]
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	f000 fb47 	bl	8017284 <_Balloc>
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	b928      	cbnz	r0, 8016c06 <_dtoa_r+0x9be>
 8016bfa:	4b87      	ldr	r3, [pc, #540]	; (8016e18 <_dtoa_r+0xbd0>)
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016c02:	f7ff bb3b 	b.w	801627c <_dtoa_r+0x34>
 8016c06:	693a      	ldr	r2, [r7, #16]
 8016c08:	3202      	adds	r2, #2
 8016c0a:	0092      	lsls	r2, r2, #2
 8016c0c:	f107 010c 	add.w	r1, r7, #12
 8016c10:	300c      	adds	r0, #12
 8016c12:	f7fe fb71 	bl	80152f8 <memcpy>
 8016c16:	2201      	movs	r2, #1
 8016c18:	4629      	mov	r1, r5
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	f000 fd44 	bl	80176a8 <__lshift>
 8016c20:	9b01      	ldr	r3, [sp, #4]
 8016c22:	f103 0901 	add.w	r9, r3, #1
 8016c26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	9305      	str	r3, [sp, #20]
 8016c2e:	f00a 0301 	and.w	r3, sl, #1
 8016c32:	46b8      	mov	r8, r7
 8016c34:	9304      	str	r3, [sp, #16]
 8016c36:	4607      	mov	r7, r0
 8016c38:	4631      	mov	r1, r6
 8016c3a:	ee18 0a10 	vmov	r0, s16
 8016c3e:	f7ff fa77 	bl	8016130 <quorem>
 8016c42:	4641      	mov	r1, r8
 8016c44:	9002      	str	r0, [sp, #8]
 8016c46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016c4a:	ee18 0a10 	vmov	r0, s16
 8016c4e:	f000 fd9b 	bl	8017788 <__mcmp>
 8016c52:	463a      	mov	r2, r7
 8016c54:	9003      	str	r0, [sp, #12]
 8016c56:	4631      	mov	r1, r6
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f000 fdb1 	bl	80177c0 <__mdiff>
 8016c5e:	68c2      	ldr	r2, [r0, #12]
 8016c60:	f109 3bff 	add.w	fp, r9, #4294967295
 8016c64:	4605      	mov	r5, r0
 8016c66:	bb02      	cbnz	r2, 8016caa <_dtoa_r+0xa62>
 8016c68:	4601      	mov	r1, r0
 8016c6a:	ee18 0a10 	vmov	r0, s16
 8016c6e:	f000 fd8b 	bl	8017788 <__mcmp>
 8016c72:	4602      	mov	r2, r0
 8016c74:	4629      	mov	r1, r5
 8016c76:	4620      	mov	r0, r4
 8016c78:	9207      	str	r2, [sp, #28]
 8016c7a:	f000 fb43 	bl	8017304 <_Bfree>
 8016c7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016c82:	ea43 0102 	orr.w	r1, r3, r2
 8016c86:	9b04      	ldr	r3, [sp, #16]
 8016c88:	430b      	orrs	r3, r1
 8016c8a:	464d      	mov	r5, r9
 8016c8c:	d10f      	bne.n	8016cae <_dtoa_r+0xa66>
 8016c8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016c92:	d02a      	beq.n	8016cea <_dtoa_r+0xaa2>
 8016c94:	9b03      	ldr	r3, [sp, #12]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	dd02      	ble.n	8016ca0 <_dtoa_r+0xa58>
 8016c9a:	9b02      	ldr	r3, [sp, #8]
 8016c9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016ca0:	f88b a000 	strb.w	sl, [fp]
 8016ca4:	e775      	b.n	8016b92 <_dtoa_r+0x94a>
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	e7ba      	b.n	8016c20 <_dtoa_r+0x9d8>
 8016caa:	2201      	movs	r2, #1
 8016cac:	e7e2      	b.n	8016c74 <_dtoa_r+0xa2c>
 8016cae:	9b03      	ldr	r3, [sp, #12]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	db04      	blt.n	8016cbe <_dtoa_r+0xa76>
 8016cb4:	9906      	ldr	r1, [sp, #24]
 8016cb6:	430b      	orrs	r3, r1
 8016cb8:	9904      	ldr	r1, [sp, #16]
 8016cba:	430b      	orrs	r3, r1
 8016cbc:	d122      	bne.n	8016d04 <_dtoa_r+0xabc>
 8016cbe:	2a00      	cmp	r2, #0
 8016cc0:	ddee      	ble.n	8016ca0 <_dtoa_r+0xa58>
 8016cc2:	ee18 1a10 	vmov	r1, s16
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f000 fced 	bl	80176a8 <__lshift>
 8016cce:	4631      	mov	r1, r6
 8016cd0:	ee08 0a10 	vmov	s16, r0
 8016cd4:	f000 fd58 	bl	8017788 <__mcmp>
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	dc03      	bgt.n	8016ce4 <_dtoa_r+0xa9c>
 8016cdc:	d1e0      	bne.n	8016ca0 <_dtoa_r+0xa58>
 8016cde:	f01a 0f01 	tst.w	sl, #1
 8016ce2:	d0dd      	beq.n	8016ca0 <_dtoa_r+0xa58>
 8016ce4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016ce8:	d1d7      	bne.n	8016c9a <_dtoa_r+0xa52>
 8016cea:	2339      	movs	r3, #57	; 0x39
 8016cec:	f88b 3000 	strb.w	r3, [fp]
 8016cf0:	462b      	mov	r3, r5
 8016cf2:	461d      	mov	r5, r3
 8016cf4:	3b01      	subs	r3, #1
 8016cf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016cfa:	2a39      	cmp	r2, #57	; 0x39
 8016cfc:	d071      	beq.n	8016de2 <_dtoa_r+0xb9a>
 8016cfe:	3201      	adds	r2, #1
 8016d00:	701a      	strb	r2, [r3, #0]
 8016d02:	e746      	b.n	8016b92 <_dtoa_r+0x94a>
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	dd07      	ble.n	8016d18 <_dtoa_r+0xad0>
 8016d08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016d0c:	d0ed      	beq.n	8016cea <_dtoa_r+0xaa2>
 8016d0e:	f10a 0301 	add.w	r3, sl, #1
 8016d12:	f88b 3000 	strb.w	r3, [fp]
 8016d16:	e73c      	b.n	8016b92 <_dtoa_r+0x94a>
 8016d18:	9b05      	ldr	r3, [sp, #20]
 8016d1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016d1e:	4599      	cmp	r9, r3
 8016d20:	d047      	beq.n	8016db2 <_dtoa_r+0xb6a>
 8016d22:	ee18 1a10 	vmov	r1, s16
 8016d26:	2300      	movs	r3, #0
 8016d28:	220a      	movs	r2, #10
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	f000 fb0c 	bl	8017348 <__multadd>
 8016d30:	45b8      	cmp	r8, r7
 8016d32:	ee08 0a10 	vmov	s16, r0
 8016d36:	f04f 0300 	mov.w	r3, #0
 8016d3a:	f04f 020a 	mov.w	r2, #10
 8016d3e:	4641      	mov	r1, r8
 8016d40:	4620      	mov	r0, r4
 8016d42:	d106      	bne.n	8016d52 <_dtoa_r+0xb0a>
 8016d44:	f000 fb00 	bl	8017348 <__multadd>
 8016d48:	4680      	mov	r8, r0
 8016d4a:	4607      	mov	r7, r0
 8016d4c:	f109 0901 	add.w	r9, r9, #1
 8016d50:	e772      	b.n	8016c38 <_dtoa_r+0x9f0>
 8016d52:	f000 faf9 	bl	8017348 <__multadd>
 8016d56:	4639      	mov	r1, r7
 8016d58:	4680      	mov	r8, r0
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	220a      	movs	r2, #10
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f000 faf2 	bl	8017348 <__multadd>
 8016d64:	4607      	mov	r7, r0
 8016d66:	e7f1      	b.n	8016d4c <_dtoa_r+0xb04>
 8016d68:	9b03      	ldr	r3, [sp, #12]
 8016d6a:	9302      	str	r3, [sp, #8]
 8016d6c:	9d01      	ldr	r5, [sp, #4]
 8016d6e:	ee18 0a10 	vmov	r0, s16
 8016d72:	4631      	mov	r1, r6
 8016d74:	f7ff f9dc 	bl	8016130 <quorem>
 8016d78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016d7c:	9b01      	ldr	r3, [sp, #4]
 8016d7e:	f805 ab01 	strb.w	sl, [r5], #1
 8016d82:	1aea      	subs	r2, r5, r3
 8016d84:	9b02      	ldr	r3, [sp, #8]
 8016d86:	4293      	cmp	r3, r2
 8016d88:	dd09      	ble.n	8016d9e <_dtoa_r+0xb56>
 8016d8a:	ee18 1a10 	vmov	r1, s16
 8016d8e:	2300      	movs	r3, #0
 8016d90:	220a      	movs	r2, #10
 8016d92:	4620      	mov	r0, r4
 8016d94:	f000 fad8 	bl	8017348 <__multadd>
 8016d98:	ee08 0a10 	vmov	s16, r0
 8016d9c:	e7e7      	b.n	8016d6e <_dtoa_r+0xb26>
 8016d9e:	9b02      	ldr	r3, [sp, #8]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	bfc8      	it	gt
 8016da4:	461d      	movgt	r5, r3
 8016da6:	9b01      	ldr	r3, [sp, #4]
 8016da8:	bfd8      	it	le
 8016daa:	2501      	movle	r5, #1
 8016dac:	441d      	add	r5, r3
 8016dae:	f04f 0800 	mov.w	r8, #0
 8016db2:	ee18 1a10 	vmov	r1, s16
 8016db6:	2201      	movs	r2, #1
 8016db8:	4620      	mov	r0, r4
 8016dba:	f000 fc75 	bl	80176a8 <__lshift>
 8016dbe:	4631      	mov	r1, r6
 8016dc0:	ee08 0a10 	vmov	s16, r0
 8016dc4:	f000 fce0 	bl	8017788 <__mcmp>
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	dc91      	bgt.n	8016cf0 <_dtoa_r+0xaa8>
 8016dcc:	d102      	bne.n	8016dd4 <_dtoa_r+0xb8c>
 8016dce:	f01a 0f01 	tst.w	sl, #1
 8016dd2:	d18d      	bne.n	8016cf0 <_dtoa_r+0xaa8>
 8016dd4:	462b      	mov	r3, r5
 8016dd6:	461d      	mov	r5, r3
 8016dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ddc:	2a30      	cmp	r2, #48	; 0x30
 8016dde:	d0fa      	beq.n	8016dd6 <_dtoa_r+0xb8e>
 8016de0:	e6d7      	b.n	8016b92 <_dtoa_r+0x94a>
 8016de2:	9a01      	ldr	r2, [sp, #4]
 8016de4:	429a      	cmp	r2, r3
 8016de6:	d184      	bne.n	8016cf2 <_dtoa_r+0xaaa>
 8016de8:	9b00      	ldr	r3, [sp, #0]
 8016dea:	3301      	adds	r3, #1
 8016dec:	9300      	str	r3, [sp, #0]
 8016dee:	2331      	movs	r3, #49	; 0x31
 8016df0:	7013      	strb	r3, [r2, #0]
 8016df2:	e6ce      	b.n	8016b92 <_dtoa_r+0x94a>
 8016df4:	4b09      	ldr	r3, [pc, #36]	; (8016e1c <_dtoa_r+0xbd4>)
 8016df6:	f7ff ba95 	b.w	8016324 <_dtoa_r+0xdc>
 8016dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	f47f aa6e 	bne.w	80162de <_dtoa_r+0x96>
 8016e02:	4b07      	ldr	r3, [pc, #28]	; (8016e20 <_dtoa_r+0xbd8>)
 8016e04:	f7ff ba8e 	b.w	8016324 <_dtoa_r+0xdc>
 8016e08:	9b02      	ldr	r3, [sp, #8]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	dcae      	bgt.n	8016d6c <_dtoa_r+0xb24>
 8016e0e:	9b06      	ldr	r3, [sp, #24]
 8016e10:	2b02      	cmp	r3, #2
 8016e12:	f73f aea8 	bgt.w	8016b66 <_dtoa_r+0x91e>
 8016e16:	e7a9      	b.n	8016d6c <_dtoa_r+0xb24>
 8016e18:	08018643 	.word	0x08018643
 8016e1c:	080185a0 	.word	0x080185a0
 8016e20:	080185c4 	.word	0x080185c4

08016e24 <__sflush_r>:
 8016e24:	898a      	ldrh	r2, [r1, #12]
 8016e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e2a:	4605      	mov	r5, r0
 8016e2c:	0710      	lsls	r0, r2, #28
 8016e2e:	460c      	mov	r4, r1
 8016e30:	d458      	bmi.n	8016ee4 <__sflush_r+0xc0>
 8016e32:	684b      	ldr	r3, [r1, #4]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	dc05      	bgt.n	8016e44 <__sflush_r+0x20>
 8016e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	dc02      	bgt.n	8016e44 <__sflush_r+0x20>
 8016e3e:	2000      	movs	r0, #0
 8016e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e46:	2e00      	cmp	r6, #0
 8016e48:	d0f9      	beq.n	8016e3e <__sflush_r+0x1a>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e50:	682f      	ldr	r7, [r5, #0]
 8016e52:	602b      	str	r3, [r5, #0]
 8016e54:	d032      	beq.n	8016ebc <__sflush_r+0x98>
 8016e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e58:	89a3      	ldrh	r3, [r4, #12]
 8016e5a:	075a      	lsls	r2, r3, #29
 8016e5c:	d505      	bpl.n	8016e6a <__sflush_r+0x46>
 8016e5e:	6863      	ldr	r3, [r4, #4]
 8016e60:	1ac0      	subs	r0, r0, r3
 8016e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e64:	b10b      	cbz	r3, 8016e6a <__sflush_r+0x46>
 8016e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e68:	1ac0      	subs	r0, r0, r3
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	4602      	mov	r2, r0
 8016e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e70:	6a21      	ldr	r1, [r4, #32]
 8016e72:	4628      	mov	r0, r5
 8016e74:	47b0      	blx	r6
 8016e76:	1c43      	adds	r3, r0, #1
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	d106      	bne.n	8016e8a <__sflush_r+0x66>
 8016e7c:	6829      	ldr	r1, [r5, #0]
 8016e7e:	291d      	cmp	r1, #29
 8016e80:	d82c      	bhi.n	8016edc <__sflush_r+0xb8>
 8016e82:	4a2a      	ldr	r2, [pc, #168]	; (8016f2c <__sflush_r+0x108>)
 8016e84:	40ca      	lsrs	r2, r1
 8016e86:	07d6      	lsls	r6, r2, #31
 8016e88:	d528      	bpl.n	8016edc <__sflush_r+0xb8>
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	6062      	str	r2, [r4, #4]
 8016e8e:	04d9      	lsls	r1, r3, #19
 8016e90:	6922      	ldr	r2, [r4, #16]
 8016e92:	6022      	str	r2, [r4, #0]
 8016e94:	d504      	bpl.n	8016ea0 <__sflush_r+0x7c>
 8016e96:	1c42      	adds	r2, r0, #1
 8016e98:	d101      	bne.n	8016e9e <__sflush_r+0x7a>
 8016e9a:	682b      	ldr	r3, [r5, #0]
 8016e9c:	b903      	cbnz	r3, 8016ea0 <__sflush_r+0x7c>
 8016e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8016ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ea2:	602f      	str	r7, [r5, #0]
 8016ea4:	2900      	cmp	r1, #0
 8016ea6:	d0ca      	beq.n	8016e3e <__sflush_r+0x1a>
 8016ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eac:	4299      	cmp	r1, r3
 8016eae:	d002      	beq.n	8016eb6 <__sflush_r+0x92>
 8016eb0:	4628      	mov	r0, r5
 8016eb2:	f7fe fa51 	bl	8015358 <_free_r>
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8016eba:	e7c1      	b.n	8016e40 <__sflush_r+0x1c>
 8016ebc:	6a21      	ldr	r1, [r4, #32]
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	47b0      	blx	r6
 8016ec4:	1c41      	adds	r1, r0, #1
 8016ec6:	d1c7      	bne.n	8016e58 <__sflush_r+0x34>
 8016ec8:	682b      	ldr	r3, [r5, #0]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d0c4      	beq.n	8016e58 <__sflush_r+0x34>
 8016ece:	2b1d      	cmp	r3, #29
 8016ed0:	d001      	beq.n	8016ed6 <__sflush_r+0xb2>
 8016ed2:	2b16      	cmp	r3, #22
 8016ed4:	d101      	bne.n	8016eda <__sflush_r+0xb6>
 8016ed6:	602f      	str	r7, [r5, #0]
 8016ed8:	e7b1      	b.n	8016e3e <__sflush_r+0x1a>
 8016eda:	89a3      	ldrh	r3, [r4, #12]
 8016edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ee0:	81a3      	strh	r3, [r4, #12]
 8016ee2:	e7ad      	b.n	8016e40 <__sflush_r+0x1c>
 8016ee4:	690f      	ldr	r7, [r1, #16]
 8016ee6:	2f00      	cmp	r7, #0
 8016ee8:	d0a9      	beq.n	8016e3e <__sflush_r+0x1a>
 8016eea:	0793      	lsls	r3, r2, #30
 8016eec:	680e      	ldr	r6, [r1, #0]
 8016eee:	bf08      	it	eq
 8016ef0:	694b      	ldreq	r3, [r1, #20]
 8016ef2:	600f      	str	r7, [r1, #0]
 8016ef4:	bf18      	it	ne
 8016ef6:	2300      	movne	r3, #0
 8016ef8:	eba6 0807 	sub.w	r8, r6, r7
 8016efc:	608b      	str	r3, [r1, #8]
 8016efe:	f1b8 0f00 	cmp.w	r8, #0
 8016f02:	dd9c      	ble.n	8016e3e <__sflush_r+0x1a>
 8016f04:	6a21      	ldr	r1, [r4, #32]
 8016f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f08:	4643      	mov	r3, r8
 8016f0a:	463a      	mov	r2, r7
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	47b0      	blx	r6
 8016f10:	2800      	cmp	r0, #0
 8016f12:	dc06      	bgt.n	8016f22 <__sflush_r+0xfe>
 8016f14:	89a3      	ldrh	r3, [r4, #12]
 8016f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f1a:	81a3      	strh	r3, [r4, #12]
 8016f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8016f20:	e78e      	b.n	8016e40 <__sflush_r+0x1c>
 8016f22:	4407      	add	r7, r0
 8016f24:	eba8 0800 	sub.w	r8, r8, r0
 8016f28:	e7e9      	b.n	8016efe <__sflush_r+0xda>
 8016f2a:	bf00      	nop
 8016f2c:	20400001 	.word	0x20400001

08016f30 <_fflush_r>:
 8016f30:	b538      	push	{r3, r4, r5, lr}
 8016f32:	690b      	ldr	r3, [r1, #16]
 8016f34:	4605      	mov	r5, r0
 8016f36:	460c      	mov	r4, r1
 8016f38:	b913      	cbnz	r3, 8016f40 <_fflush_r+0x10>
 8016f3a:	2500      	movs	r5, #0
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	bd38      	pop	{r3, r4, r5, pc}
 8016f40:	b118      	cbz	r0, 8016f4a <_fflush_r+0x1a>
 8016f42:	6983      	ldr	r3, [r0, #24]
 8016f44:	b90b      	cbnz	r3, 8016f4a <_fflush_r+0x1a>
 8016f46:	f000 f887 	bl	8017058 <__sinit>
 8016f4a:	4b14      	ldr	r3, [pc, #80]	; (8016f9c <_fflush_r+0x6c>)
 8016f4c:	429c      	cmp	r4, r3
 8016f4e:	d11b      	bne.n	8016f88 <_fflush_r+0x58>
 8016f50:	686c      	ldr	r4, [r5, #4]
 8016f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d0ef      	beq.n	8016f3a <_fflush_r+0xa>
 8016f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f5c:	07d0      	lsls	r0, r2, #31
 8016f5e:	d404      	bmi.n	8016f6a <_fflush_r+0x3a>
 8016f60:	0599      	lsls	r1, r3, #22
 8016f62:	d402      	bmi.n	8016f6a <_fflush_r+0x3a>
 8016f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f66:	f000 f91a 	bl	801719e <__retarget_lock_acquire_recursive>
 8016f6a:	4628      	mov	r0, r5
 8016f6c:	4621      	mov	r1, r4
 8016f6e:	f7ff ff59 	bl	8016e24 <__sflush_r>
 8016f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f74:	07da      	lsls	r2, r3, #31
 8016f76:	4605      	mov	r5, r0
 8016f78:	d4e0      	bmi.n	8016f3c <_fflush_r+0xc>
 8016f7a:	89a3      	ldrh	r3, [r4, #12]
 8016f7c:	059b      	lsls	r3, r3, #22
 8016f7e:	d4dd      	bmi.n	8016f3c <_fflush_r+0xc>
 8016f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f82:	f000 f90d 	bl	80171a0 <__retarget_lock_release_recursive>
 8016f86:	e7d9      	b.n	8016f3c <_fflush_r+0xc>
 8016f88:	4b05      	ldr	r3, [pc, #20]	; (8016fa0 <_fflush_r+0x70>)
 8016f8a:	429c      	cmp	r4, r3
 8016f8c:	d101      	bne.n	8016f92 <_fflush_r+0x62>
 8016f8e:	68ac      	ldr	r4, [r5, #8]
 8016f90:	e7df      	b.n	8016f52 <_fflush_r+0x22>
 8016f92:	4b04      	ldr	r3, [pc, #16]	; (8016fa4 <_fflush_r+0x74>)
 8016f94:	429c      	cmp	r4, r3
 8016f96:	bf08      	it	eq
 8016f98:	68ec      	ldreq	r4, [r5, #12]
 8016f9a:	e7da      	b.n	8016f52 <_fflush_r+0x22>
 8016f9c:	08018674 	.word	0x08018674
 8016fa0:	08018694 	.word	0x08018694
 8016fa4:	08018654 	.word	0x08018654

08016fa8 <std>:
 8016fa8:	2300      	movs	r3, #0
 8016faa:	b510      	push	{r4, lr}
 8016fac:	4604      	mov	r4, r0
 8016fae:	e9c0 3300 	strd	r3, r3, [r0]
 8016fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016fb6:	6083      	str	r3, [r0, #8]
 8016fb8:	8181      	strh	r1, [r0, #12]
 8016fba:	6643      	str	r3, [r0, #100]	; 0x64
 8016fbc:	81c2      	strh	r2, [r0, #14]
 8016fbe:	6183      	str	r3, [r0, #24]
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	2208      	movs	r2, #8
 8016fc4:	305c      	adds	r0, #92	; 0x5c
 8016fc6:	f7fe f9bf 	bl	8015348 <memset>
 8016fca:	4b05      	ldr	r3, [pc, #20]	; (8016fe0 <std+0x38>)
 8016fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8016fce:	4b05      	ldr	r3, [pc, #20]	; (8016fe4 <std+0x3c>)
 8016fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8016fd2:	4b05      	ldr	r3, [pc, #20]	; (8016fe8 <std+0x40>)
 8016fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016fd6:	4b05      	ldr	r3, [pc, #20]	; (8016fec <std+0x44>)
 8016fd8:	6224      	str	r4, [r4, #32]
 8016fda:	6323      	str	r3, [r4, #48]	; 0x30
 8016fdc:	bd10      	pop	{r4, pc}
 8016fde:	bf00      	nop
 8016fe0:	08017c6d 	.word	0x08017c6d
 8016fe4:	08017c8f 	.word	0x08017c8f
 8016fe8:	08017cc7 	.word	0x08017cc7
 8016fec:	08017ceb 	.word	0x08017ceb

08016ff0 <_cleanup_r>:
 8016ff0:	4901      	ldr	r1, [pc, #4]	; (8016ff8 <_cleanup_r+0x8>)
 8016ff2:	f000 b8af 	b.w	8017154 <_fwalk_reent>
 8016ff6:	bf00      	nop
 8016ff8:	08016f31 	.word	0x08016f31

08016ffc <__sfmoreglue>:
 8016ffc:	b570      	push	{r4, r5, r6, lr}
 8016ffe:	2268      	movs	r2, #104	; 0x68
 8017000:	1e4d      	subs	r5, r1, #1
 8017002:	4355      	muls	r5, r2
 8017004:	460e      	mov	r6, r1
 8017006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801700a:	f7fe fa11 	bl	8015430 <_malloc_r>
 801700e:	4604      	mov	r4, r0
 8017010:	b140      	cbz	r0, 8017024 <__sfmoreglue+0x28>
 8017012:	2100      	movs	r1, #0
 8017014:	e9c0 1600 	strd	r1, r6, [r0]
 8017018:	300c      	adds	r0, #12
 801701a:	60a0      	str	r0, [r4, #8]
 801701c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017020:	f7fe f992 	bl	8015348 <memset>
 8017024:	4620      	mov	r0, r4
 8017026:	bd70      	pop	{r4, r5, r6, pc}

08017028 <__sfp_lock_acquire>:
 8017028:	4801      	ldr	r0, [pc, #4]	; (8017030 <__sfp_lock_acquire+0x8>)
 801702a:	f000 b8b8 	b.w	801719e <__retarget_lock_acquire_recursive>
 801702e:	bf00      	nop
 8017030:	200024e1 	.word	0x200024e1

08017034 <__sfp_lock_release>:
 8017034:	4801      	ldr	r0, [pc, #4]	; (801703c <__sfp_lock_release+0x8>)
 8017036:	f000 b8b3 	b.w	80171a0 <__retarget_lock_release_recursive>
 801703a:	bf00      	nop
 801703c:	200024e1 	.word	0x200024e1

08017040 <__sinit_lock_acquire>:
 8017040:	4801      	ldr	r0, [pc, #4]	; (8017048 <__sinit_lock_acquire+0x8>)
 8017042:	f000 b8ac 	b.w	801719e <__retarget_lock_acquire_recursive>
 8017046:	bf00      	nop
 8017048:	200024e2 	.word	0x200024e2

0801704c <__sinit_lock_release>:
 801704c:	4801      	ldr	r0, [pc, #4]	; (8017054 <__sinit_lock_release+0x8>)
 801704e:	f000 b8a7 	b.w	80171a0 <__retarget_lock_release_recursive>
 8017052:	bf00      	nop
 8017054:	200024e2 	.word	0x200024e2

08017058 <__sinit>:
 8017058:	b510      	push	{r4, lr}
 801705a:	4604      	mov	r4, r0
 801705c:	f7ff fff0 	bl	8017040 <__sinit_lock_acquire>
 8017060:	69a3      	ldr	r3, [r4, #24]
 8017062:	b11b      	cbz	r3, 801706c <__sinit+0x14>
 8017064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017068:	f7ff bff0 	b.w	801704c <__sinit_lock_release>
 801706c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017070:	6523      	str	r3, [r4, #80]	; 0x50
 8017072:	4b13      	ldr	r3, [pc, #76]	; (80170c0 <__sinit+0x68>)
 8017074:	4a13      	ldr	r2, [pc, #76]	; (80170c4 <__sinit+0x6c>)
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	62a2      	str	r2, [r4, #40]	; 0x28
 801707a:	42a3      	cmp	r3, r4
 801707c:	bf04      	itt	eq
 801707e:	2301      	moveq	r3, #1
 8017080:	61a3      	streq	r3, [r4, #24]
 8017082:	4620      	mov	r0, r4
 8017084:	f000 f820 	bl	80170c8 <__sfp>
 8017088:	6060      	str	r0, [r4, #4]
 801708a:	4620      	mov	r0, r4
 801708c:	f000 f81c 	bl	80170c8 <__sfp>
 8017090:	60a0      	str	r0, [r4, #8]
 8017092:	4620      	mov	r0, r4
 8017094:	f000 f818 	bl	80170c8 <__sfp>
 8017098:	2200      	movs	r2, #0
 801709a:	60e0      	str	r0, [r4, #12]
 801709c:	2104      	movs	r1, #4
 801709e:	6860      	ldr	r0, [r4, #4]
 80170a0:	f7ff ff82 	bl	8016fa8 <std>
 80170a4:	68a0      	ldr	r0, [r4, #8]
 80170a6:	2201      	movs	r2, #1
 80170a8:	2109      	movs	r1, #9
 80170aa:	f7ff ff7d 	bl	8016fa8 <std>
 80170ae:	68e0      	ldr	r0, [r4, #12]
 80170b0:	2202      	movs	r2, #2
 80170b2:	2112      	movs	r1, #18
 80170b4:	f7ff ff78 	bl	8016fa8 <std>
 80170b8:	2301      	movs	r3, #1
 80170ba:	61a3      	str	r3, [r4, #24]
 80170bc:	e7d2      	b.n	8017064 <__sinit+0xc>
 80170be:	bf00      	nop
 80170c0:	0801858c 	.word	0x0801858c
 80170c4:	08016ff1 	.word	0x08016ff1

080170c8 <__sfp>:
 80170c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ca:	4607      	mov	r7, r0
 80170cc:	f7ff ffac 	bl	8017028 <__sfp_lock_acquire>
 80170d0:	4b1e      	ldr	r3, [pc, #120]	; (801714c <__sfp+0x84>)
 80170d2:	681e      	ldr	r6, [r3, #0]
 80170d4:	69b3      	ldr	r3, [r6, #24]
 80170d6:	b913      	cbnz	r3, 80170de <__sfp+0x16>
 80170d8:	4630      	mov	r0, r6
 80170da:	f7ff ffbd 	bl	8017058 <__sinit>
 80170de:	3648      	adds	r6, #72	; 0x48
 80170e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80170e4:	3b01      	subs	r3, #1
 80170e6:	d503      	bpl.n	80170f0 <__sfp+0x28>
 80170e8:	6833      	ldr	r3, [r6, #0]
 80170ea:	b30b      	cbz	r3, 8017130 <__sfp+0x68>
 80170ec:	6836      	ldr	r6, [r6, #0]
 80170ee:	e7f7      	b.n	80170e0 <__sfp+0x18>
 80170f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80170f4:	b9d5      	cbnz	r5, 801712c <__sfp+0x64>
 80170f6:	4b16      	ldr	r3, [pc, #88]	; (8017150 <__sfp+0x88>)
 80170f8:	60e3      	str	r3, [r4, #12]
 80170fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80170fe:	6665      	str	r5, [r4, #100]	; 0x64
 8017100:	f000 f84c 	bl	801719c <__retarget_lock_init_recursive>
 8017104:	f7ff ff96 	bl	8017034 <__sfp_lock_release>
 8017108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801710c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017110:	6025      	str	r5, [r4, #0]
 8017112:	61a5      	str	r5, [r4, #24]
 8017114:	2208      	movs	r2, #8
 8017116:	4629      	mov	r1, r5
 8017118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801711c:	f7fe f914 	bl	8015348 <memset>
 8017120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017128:	4620      	mov	r0, r4
 801712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801712c:	3468      	adds	r4, #104	; 0x68
 801712e:	e7d9      	b.n	80170e4 <__sfp+0x1c>
 8017130:	2104      	movs	r1, #4
 8017132:	4638      	mov	r0, r7
 8017134:	f7ff ff62 	bl	8016ffc <__sfmoreglue>
 8017138:	4604      	mov	r4, r0
 801713a:	6030      	str	r0, [r6, #0]
 801713c:	2800      	cmp	r0, #0
 801713e:	d1d5      	bne.n	80170ec <__sfp+0x24>
 8017140:	f7ff ff78 	bl	8017034 <__sfp_lock_release>
 8017144:	230c      	movs	r3, #12
 8017146:	603b      	str	r3, [r7, #0]
 8017148:	e7ee      	b.n	8017128 <__sfp+0x60>
 801714a:	bf00      	nop
 801714c:	0801858c 	.word	0x0801858c
 8017150:	ffff0001 	.word	0xffff0001

08017154 <_fwalk_reent>:
 8017154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017158:	4606      	mov	r6, r0
 801715a:	4688      	mov	r8, r1
 801715c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017160:	2700      	movs	r7, #0
 8017162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017166:	f1b9 0901 	subs.w	r9, r9, #1
 801716a:	d505      	bpl.n	8017178 <_fwalk_reent+0x24>
 801716c:	6824      	ldr	r4, [r4, #0]
 801716e:	2c00      	cmp	r4, #0
 8017170:	d1f7      	bne.n	8017162 <_fwalk_reent+0xe>
 8017172:	4638      	mov	r0, r7
 8017174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017178:	89ab      	ldrh	r3, [r5, #12]
 801717a:	2b01      	cmp	r3, #1
 801717c:	d907      	bls.n	801718e <_fwalk_reent+0x3a>
 801717e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017182:	3301      	adds	r3, #1
 8017184:	d003      	beq.n	801718e <_fwalk_reent+0x3a>
 8017186:	4629      	mov	r1, r5
 8017188:	4630      	mov	r0, r6
 801718a:	47c0      	blx	r8
 801718c:	4307      	orrs	r7, r0
 801718e:	3568      	adds	r5, #104	; 0x68
 8017190:	e7e9      	b.n	8017166 <_fwalk_reent+0x12>
	...

08017194 <_localeconv_r>:
 8017194:	4800      	ldr	r0, [pc, #0]	; (8017198 <_localeconv_r+0x4>)
 8017196:	4770      	bx	lr
 8017198:	200002d8 	.word	0x200002d8

0801719c <__retarget_lock_init_recursive>:
 801719c:	4770      	bx	lr

0801719e <__retarget_lock_acquire_recursive>:
 801719e:	4770      	bx	lr

080171a0 <__retarget_lock_release_recursive>:
 80171a0:	4770      	bx	lr

080171a2 <__swhatbuf_r>:
 80171a2:	b570      	push	{r4, r5, r6, lr}
 80171a4:	460e      	mov	r6, r1
 80171a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171aa:	2900      	cmp	r1, #0
 80171ac:	b096      	sub	sp, #88	; 0x58
 80171ae:	4614      	mov	r4, r2
 80171b0:	461d      	mov	r5, r3
 80171b2:	da08      	bge.n	80171c6 <__swhatbuf_r+0x24>
 80171b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171b8:	2200      	movs	r2, #0
 80171ba:	602a      	str	r2, [r5, #0]
 80171bc:	061a      	lsls	r2, r3, #24
 80171be:	d410      	bmi.n	80171e2 <__swhatbuf_r+0x40>
 80171c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171c4:	e00e      	b.n	80171e4 <__swhatbuf_r+0x42>
 80171c6:	466a      	mov	r2, sp
 80171c8:	f000 fde6 	bl	8017d98 <_fstat_r>
 80171cc:	2800      	cmp	r0, #0
 80171ce:	dbf1      	blt.n	80171b4 <__swhatbuf_r+0x12>
 80171d0:	9a01      	ldr	r2, [sp, #4]
 80171d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80171d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80171da:	425a      	negs	r2, r3
 80171dc:	415a      	adcs	r2, r3
 80171de:	602a      	str	r2, [r5, #0]
 80171e0:	e7ee      	b.n	80171c0 <__swhatbuf_r+0x1e>
 80171e2:	2340      	movs	r3, #64	; 0x40
 80171e4:	2000      	movs	r0, #0
 80171e6:	6023      	str	r3, [r4, #0]
 80171e8:	b016      	add	sp, #88	; 0x58
 80171ea:	bd70      	pop	{r4, r5, r6, pc}

080171ec <__smakebuf_r>:
 80171ec:	898b      	ldrh	r3, [r1, #12]
 80171ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171f0:	079d      	lsls	r5, r3, #30
 80171f2:	4606      	mov	r6, r0
 80171f4:	460c      	mov	r4, r1
 80171f6:	d507      	bpl.n	8017208 <__smakebuf_r+0x1c>
 80171f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80171fc:	6023      	str	r3, [r4, #0]
 80171fe:	6123      	str	r3, [r4, #16]
 8017200:	2301      	movs	r3, #1
 8017202:	6163      	str	r3, [r4, #20]
 8017204:	b002      	add	sp, #8
 8017206:	bd70      	pop	{r4, r5, r6, pc}
 8017208:	ab01      	add	r3, sp, #4
 801720a:	466a      	mov	r2, sp
 801720c:	f7ff ffc9 	bl	80171a2 <__swhatbuf_r>
 8017210:	9900      	ldr	r1, [sp, #0]
 8017212:	4605      	mov	r5, r0
 8017214:	4630      	mov	r0, r6
 8017216:	f7fe f90b 	bl	8015430 <_malloc_r>
 801721a:	b948      	cbnz	r0, 8017230 <__smakebuf_r+0x44>
 801721c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017220:	059a      	lsls	r2, r3, #22
 8017222:	d4ef      	bmi.n	8017204 <__smakebuf_r+0x18>
 8017224:	f023 0303 	bic.w	r3, r3, #3
 8017228:	f043 0302 	orr.w	r3, r3, #2
 801722c:	81a3      	strh	r3, [r4, #12]
 801722e:	e7e3      	b.n	80171f8 <__smakebuf_r+0xc>
 8017230:	4b0d      	ldr	r3, [pc, #52]	; (8017268 <__smakebuf_r+0x7c>)
 8017232:	62b3      	str	r3, [r6, #40]	; 0x28
 8017234:	89a3      	ldrh	r3, [r4, #12]
 8017236:	6020      	str	r0, [r4, #0]
 8017238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801723c:	81a3      	strh	r3, [r4, #12]
 801723e:	9b00      	ldr	r3, [sp, #0]
 8017240:	6163      	str	r3, [r4, #20]
 8017242:	9b01      	ldr	r3, [sp, #4]
 8017244:	6120      	str	r0, [r4, #16]
 8017246:	b15b      	cbz	r3, 8017260 <__smakebuf_r+0x74>
 8017248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801724c:	4630      	mov	r0, r6
 801724e:	f000 fdb5 	bl	8017dbc <_isatty_r>
 8017252:	b128      	cbz	r0, 8017260 <__smakebuf_r+0x74>
 8017254:	89a3      	ldrh	r3, [r4, #12]
 8017256:	f023 0303 	bic.w	r3, r3, #3
 801725a:	f043 0301 	orr.w	r3, r3, #1
 801725e:	81a3      	strh	r3, [r4, #12]
 8017260:	89a0      	ldrh	r0, [r4, #12]
 8017262:	4305      	orrs	r5, r0
 8017264:	81a5      	strh	r5, [r4, #12]
 8017266:	e7cd      	b.n	8017204 <__smakebuf_r+0x18>
 8017268:	08016ff1 	.word	0x08016ff1

0801726c <__malloc_lock>:
 801726c:	4801      	ldr	r0, [pc, #4]	; (8017274 <__malloc_lock+0x8>)
 801726e:	f7ff bf96 	b.w	801719e <__retarget_lock_acquire_recursive>
 8017272:	bf00      	nop
 8017274:	200024e0 	.word	0x200024e0

08017278 <__malloc_unlock>:
 8017278:	4801      	ldr	r0, [pc, #4]	; (8017280 <__malloc_unlock+0x8>)
 801727a:	f7ff bf91 	b.w	80171a0 <__retarget_lock_release_recursive>
 801727e:	bf00      	nop
 8017280:	200024e0 	.word	0x200024e0

08017284 <_Balloc>:
 8017284:	b570      	push	{r4, r5, r6, lr}
 8017286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017288:	4604      	mov	r4, r0
 801728a:	460d      	mov	r5, r1
 801728c:	b976      	cbnz	r6, 80172ac <_Balloc+0x28>
 801728e:	2010      	movs	r0, #16
 8017290:	f7fe f822 	bl	80152d8 <malloc>
 8017294:	4602      	mov	r2, r0
 8017296:	6260      	str	r0, [r4, #36]	; 0x24
 8017298:	b920      	cbnz	r0, 80172a4 <_Balloc+0x20>
 801729a:	4b18      	ldr	r3, [pc, #96]	; (80172fc <_Balloc+0x78>)
 801729c:	4818      	ldr	r0, [pc, #96]	; (8017300 <_Balloc+0x7c>)
 801729e:	2166      	movs	r1, #102	; 0x66
 80172a0:	f000 fd3a 	bl	8017d18 <__assert_func>
 80172a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80172a8:	6006      	str	r6, [r0, #0]
 80172aa:	60c6      	str	r6, [r0, #12]
 80172ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80172ae:	68f3      	ldr	r3, [r6, #12]
 80172b0:	b183      	cbz	r3, 80172d4 <_Balloc+0x50>
 80172b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172b4:	68db      	ldr	r3, [r3, #12]
 80172b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80172ba:	b9b8      	cbnz	r0, 80172ec <_Balloc+0x68>
 80172bc:	2101      	movs	r1, #1
 80172be:	fa01 f605 	lsl.w	r6, r1, r5
 80172c2:	1d72      	adds	r2, r6, #5
 80172c4:	0092      	lsls	r2, r2, #2
 80172c6:	4620      	mov	r0, r4
 80172c8:	f000 fb60 	bl	801798c <_calloc_r>
 80172cc:	b160      	cbz	r0, 80172e8 <_Balloc+0x64>
 80172ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80172d2:	e00e      	b.n	80172f2 <_Balloc+0x6e>
 80172d4:	2221      	movs	r2, #33	; 0x21
 80172d6:	2104      	movs	r1, #4
 80172d8:	4620      	mov	r0, r4
 80172da:	f000 fb57 	bl	801798c <_calloc_r>
 80172de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172e0:	60f0      	str	r0, [r6, #12]
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d1e4      	bne.n	80172b2 <_Balloc+0x2e>
 80172e8:	2000      	movs	r0, #0
 80172ea:	bd70      	pop	{r4, r5, r6, pc}
 80172ec:	6802      	ldr	r2, [r0, #0]
 80172ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172f2:	2300      	movs	r3, #0
 80172f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80172f8:	e7f7      	b.n	80172ea <_Balloc+0x66>
 80172fa:	bf00      	nop
 80172fc:	080185d1 	.word	0x080185d1
 8017300:	080186b4 	.word	0x080186b4

08017304 <_Bfree>:
 8017304:	b570      	push	{r4, r5, r6, lr}
 8017306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017308:	4605      	mov	r5, r0
 801730a:	460c      	mov	r4, r1
 801730c:	b976      	cbnz	r6, 801732c <_Bfree+0x28>
 801730e:	2010      	movs	r0, #16
 8017310:	f7fd ffe2 	bl	80152d8 <malloc>
 8017314:	4602      	mov	r2, r0
 8017316:	6268      	str	r0, [r5, #36]	; 0x24
 8017318:	b920      	cbnz	r0, 8017324 <_Bfree+0x20>
 801731a:	4b09      	ldr	r3, [pc, #36]	; (8017340 <_Bfree+0x3c>)
 801731c:	4809      	ldr	r0, [pc, #36]	; (8017344 <_Bfree+0x40>)
 801731e:	218a      	movs	r1, #138	; 0x8a
 8017320:	f000 fcfa 	bl	8017d18 <__assert_func>
 8017324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017328:	6006      	str	r6, [r0, #0]
 801732a:	60c6      	str	r6, [r0, #12]
 801732c:	b13c      	cbz	r4, 801733e <_Bfree+0x3a>
 801732e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017330:	6862      	ldr	r2, [r4, #4]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017338:	6021      	str	r1, [r4, #0]
 801733a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	080185d1 	.word	0x080185d1
 8017344:	080186b4 	.word	0x080186b4

08017348 <__multadd>:
 8017348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801734c:	690d      	ldr	r5, [r1, #16]
 801734e:	4607      	mov	r7, r0
 8017350:	460c      	mov	r4, r1
 8017352:	461e      	mov	r6, r3
 8017354:	f101 0c14 	add.w	ip, r1, #20
 8017358:	2000      	movs	r0, #0
 801735a:	f8dc 3000 	ldr.w	r3, [ip]
 801735e:	b299      	uxth	r1, r3
 8017360:	fb02 6101 	mla	r1, r2, r1, r6
 8017364:	0c1e      	lsrs	r6, r3, #16
 8017366:	0c0b      	lsrs	r3, r1, #16
 8017368:	fb02 3306 	mla	r3, r2, r6, r3
 801736c:	b289      	uxth	r1, r1
 801736e:	3001      	adds	r0, #1
 8017370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017374:	4285      	cmp	r5, r0
 8017376:	f84c 1b04 	str.w	r1, [ip], #4
 801737a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801737e:	dcec      	bgt.n	801735a <__multadd+0x12>
 8017380:	b30e      	cbz	r6, 80173c6 <__multadd+0x7e>
 8017382:	68a3      	ldr	r3, [r4, #8]
 8017384:	42ab      	cmp	r3, r5
 8017386:	dc19      	bgt.n	80173bc <__multadd+0x74>
 8017388:	6861      	ldr	r1, [r4, #4]
 801738a:	4638      	mov	r0, r7
 801738c:	3101      	adds	r1, #1
 801738e:	f7ff ff79 	bl	8017284 <_Balloc>
 8017392:	4680      	mov	r8, r0
 8017394:	b928      	cbnz	r0, 80173a2 <__multadd+0x5a>
 8017396:	4602      	mov	r2, r0
 8017398:	4b0c      	ldr	r3, [pc, #48]	; (80173cc <__multadd+0x84>)
 801739a:	480d      	ldr	r0, [pc, #52]	; (80173d0 <__multadd+0x88>)
 801739c:	21b5      	movs	r1, #181	; 0xb5
 801739e:	f000 fcbb 	bl	8017d18 <__assert_func>
 80173a2:	6922      	ldr	r2, [r4, #16]
 80173a4:	3202      	adds	r2, #2
 80173a6:	f104 010c 	add.w	r1, r4, #12
 80173aa:	0092      	lsls	r2, r2, #2
 80173ac:	300c      	adds	r0, #12
 80173ae:	f7fd ffa3 	bl	80152f8 <memcpy>
 80173b2:	4621      	mov	r1, r4
 80173b4:	4638      	mov	r0, r7
 80173b6:	f7ff ffa5 	bl	8017304 <_Bfree>
 80173ba:	4644      	mov	r4, r8
 80173bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80173c0:	3501      	adds	r5, #1
 80173c2:	615e      	str	r6, [r3, #20]
 80173c4:	6125      	str	r5, [r4, #16]
 80173c6:	4620      	mov	r0, r4
 80173c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173cc:	08018643 	.word	0x08018643
 80173d0:	080186b4 	.word	0x080186b4

080173d4 <__hi0bits>:
 80173d4:	0c03      	lsrs	r3, r0, #16
 80173d6:	041b      	lsls	r3, r3, #16
 80173d8:	b9d3      	cbnz	r3, 8017410 <__hi0bits+0x3c>
 80173da:	0400      	lsls	r0, r0, #16
 80173dc:	2310      	movs	r3, #16
 80173de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80173e2:	bf04      	itt	eq
 80173e4:	0200      	lsleq	r0, r0, #8
 80173e6:	3308      	addeq	r3, #8
 80173e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80173ec:	bf04      	itt	eq
 80173ee:	0100      	lsleq	r0, r0, #4
 80173f0:	3304      	addeq	r3, #4
 80173f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80173f6:	bf04      	itt	eq
 80173f8:	0080      	lsleq	r0, r0, #2
 80173fa:	3302      	addeq	r3, #2
 80173fc:	2800      	cmp	r0, #0
 80173fe:	db05      	blt.n	801740c <__hi0bits+0x38>
 8017400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017404:	f103 0301 	add.w	r3, r3, #1
 8017408:	bf08      	it	eq
 801740a:	2320      	moveq	r3, #32
 801740c:	4618      	mov	r0, r3
 801740e:	4770      	bx	lr
 8017410:	2300      	movs	r3, #0
 8017412:	e7e4      	b.n	80173de <__hi0bits+0xa>

08017414 <__lo0bits>:
 8017414:	6803      	ldr	r3, [r0, #0]
 8017416:	f013 0207 	ands.w	r2, r3, #7
 801741a:	4601      	mov	r1, r0
 801741c:	d00b      	beq.n	8017436 <__lo0bits+0x22>
 801741e:	07da      	lsls	r2, r3, #31
 8017420:	d423      	bmi.n	801746a <__lo0bits+0x56>
 8017422:	0798      	lsls	r0, r3, #30
 8017424:	bf49      	itett	mi
 8017426:	085b      	lsrmi	r3, r3, #1
 8017428:	089b      	lsrpl	r3, r3, #2
 801742a:	2001      	movmi	r0, #1
 801742c:	600b      	strmi	r3, [r1, #0]
 801742e:	bf5c      	itt	pl
 8017430:	600b      	strpl	r3, [r1, #0]
 8017432:	2002      	movpl	r0, #2
 8017434:	4770      	bx	lr
 8017436:	b298      	uxth	r0, r3
 8017438:	b9a8      	cbnz	r0, 8017466 <__lo0bits+0x52>
 801743a:	0c1b      	lsrs	r3, r3, #16
 801743c:	2010      	movs	r0, #16
 801743e:	b2da      	uxtb	r2, r3
 8017440:	b90a      	cbnz	r2, 8017446 <__lo0bits+0x32>
 8017442:	3008      	adds	r0, #8
 8017444:	0a1b      	lsrs	r3, r3, #8
 8017446:	071a      	lsls	r2, r3, #28
 8017448:	bf04      	itt	eq
 801744a:	091b      	lsreq	r3, r3, #4
 801744c:	3004      	addeq	r0, #4
 801744e:	079a      	lsls	r2, r3, #30
 8017450:	bf04      	itt	eq
 8017452:	089b      	lsreq	r3, r3, #2
 8017454:	3002      	addeq	r0, #2
 8017456:	07da      	lsls	r2, r3, #31
 8017458:	d403      	bmi.n	8017462 <__lo0bits+0x4e>
 801745a:	085b      	lsrs	r3, r3, #1
 801745c:	f100 0001 	add.w	r0, r0, #1
 8017460:	d005      	beq.n	801746e <__lo0bits+0x5a>
 8017462:	600b      	str	r3, [r1, #0]
 8017464:	4770      	bx	lr
 8017466:	4610      	mov	r0, r2
 8017468:	e7e9      	b.n	801743e <__lo0bits+0x2a>
 801746a:	2000      	movs	r0, #0
 801746c:	4770      	bx	lr
 801746e:	2020      	movs	r0, #32
 8017470:	4770      	bx	lr
	...

08017474 <__i2b>:
 8017474:	b510      	push	{r4, lr}
 8017476:	460c      	mov	r4, r1
 8017478:	2101      	movs	r1, #1
 801747a:	f7ff ff03 	bl	8017284 <_Balloc>
 801747e:	4602      	mov	r2, r0
 8017480:	b928      	cbnz	r0, 801748e <__i2b+0x1a>
 8017482:	4b05      	ldr	r3, [pc, #20]	; (8017498 <__i2b+0x24>)
 8017484:	4805      	ldr	r0, [pc, #20]	; (801749c <__i2b+0x28>)
 8017486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801748a:	f000 fc45 	bl	8017d18 <__assert_func>
 801748e:	2301      	movs	r3, #1
 8017490:	6144      	str	r4, [r0, #20]
 8017492:	6103      	str	r3, [r0, #16]
 8017494:	bd10      	pop	{r4, pc}
 8017496:	bf00      	nop
 8017498:	08018643 	.word	0x08018643
 801749c:	080186b4 	.word	0x080186b4

080174a0 <__multiply>:
 80174a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a4:	4691      	mov	r9, r2
 80174a6:	690a      	ldr	r2, [r1, #16]
 80174a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	bfb8      	it	lt
 80174b0:	460b      	movlt	r3, r1
 80174b2:	460c      	mov	r4, r1
 80174b4:	bfbc      	itt	lt
 80174b6:	464c      	movlt	r4, r9
 80174b8:	4699      	movlt	r9, r3
 80174ba:	6927      	ldr	r7, [r4, #16]
 80174bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80174c0:	68a3      	ldr	r3, [r4, #8]
 80174c2:	6861      	ldr	r1, [r4, #4]
 80174c4:	eb07 060a 	add.w	r6, r7, sl
 80174c8:	42b3      	cmp	r3, r6
 80174ca:	b085      	sub	sp, #20
 80174cc:	bfb8      	it	lt
 80174ce:	3101      	addlt	r1, #1
 80174d0:	f7ff fed8 	bl	8017284 <_Balloc>
 80174d4:	b930      	cbnz	r0, 80174e4 <__multiply+0x44>
 80174d6:	4602      	mov	r2, r0
 80174d8:	4b44      	ldr	r3, [pc, #272]	; (80175ec <__multiply+0x14c>)
 80174da:	4845      	ldr	r0, [pc, #276]	; (80175f0 <__multiply+0x150>)
 80174dc:	f240 115d 	movw	r1, #349	; 0x15d
 80174e0:	f000 fc1a 	bl	8017d18 <__assert_func>
 80174e4:	f100 0514 	add.w	r5, r0, #20
 80174e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80174ec:	462b      	mov	r3, r5
 80174ee:	2200      	movs	r2, #0
 80174f0:	4543      	cmp	r3, r8
 80174f2:	d321      	bcc.n	8017538 <__multiply+0x98>
 80174f4:	f104 0314 	add.w	r3, r4, #20
 80174f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80174fc:	f109 0314 	add.w	r3, r9, #20
 8017500:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017504:	9202      	str	r2, [sp, #8]
 8017506:	1b3a      	subs	r2, r7, r4
 8017508:	3a15      	subs	r2, #21
 801750a:	f022 0203 	bic.w	r2, r2, #3
 801750e:	3204      	adds	r2, #4
 8017510:	f104 0115 	add.w	r1, r4, #21
 8017514:	428f      	cmp	r7, r1
 8017516:	bf38      	it	cc
 8017518:	2204      	movcc	r2, #4
 801751a:	9201      	str	r2, [sp, #4]
 801751c:	9a02      	ldr	r2, [sp, #8]
 801751e:	9303      	str	r3, [sp, #12]
 8017520:	429a      	cmp	r2, r3
 8017522:	d80c      	bhi.n	801753e <__multiply+0x9e>
 8017524:	2e00      	cmp	r6, #0
 8017526:	dd03      	ble.n	8017530 <__multiply+0x90>
 8017528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801752c:	2b00      	cmp	r3, #0
 801752e:	d05a      	beq.n	80175e6 <__multiply+0x146>
 8017530:	6106      	str	r6, [r0, #16]
 8017532:	b005      	add	sp, #20
 8017534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017538:	f843 2b04 	str.w	r2, [r3], #4
 801753c:	e7d8      	b.n	80174f0 <__multiply+0x50>
 801753e:	f8b3 a000 	ldrh.w	sl, [r3]
 8017542:	f1ba 0f00 	cmp.w	sl, #0
 8017546:	d024      	beq.n	8017592 <__multiply+0xf2>
 8017548:	f104 0e14 	add.w	lr, r4, #20
 801754c:	46a9      	mov	r9, r5
 801754e:	f04f 0c00 	mov.w	ip, #0
 8017552:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017556:	f8d9 1000 	ldr.w	r1, [r9]
 801755a:	fa1f fb82 	uxth.w	fp, r2
 801755e:	b289      	uxth	r1, r1
 8017560:	fb0a 110b 	mla	r1, sl, fp, r1
 8017564:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017568:	f8d9 2000 	ldr.w	r2, [r9]
 801756c:	4461      	add	r1, ip
 801756e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017572:	fb0a c20b 	mla	r2, sl, fp, ip
 8017576:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801757a:	b289      	uxth	r1, r1
 801757c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017580:	4577      	cmp	r7, lr
 8017582:	f849 1b04 	str.w	r1, [r9], #4
 8017586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801758a:	d8e2      	bhi.n	8017552 <__multiply+0xb2>
 801758c:	9a01      	ldr	r2, [sp, #4]
 801758e:	f845 c002 	str.w	ip, [r5, r2]
 8017592:	9a03      	ldr	r2, [sp, #12]
 8017594:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017598:	3304      	adds	r3, #4
 801759a:	f1b9 0f00 	cmp.w	r9, #0
 801759e:	d020      	beq.n	80175e2 <__multiply+0x142>
 80175a0:	6829      	ldr	r1, [r5, #0]
 80175a2:	f104 0c14 	add.w	ip, r4, #20
 80175a6:	46ae      	mov	lr, r5
 80175a8:	f04f 0a00 	mov.w	sl, #0
 80175ac:	f8bc b000 	ldrh.w	fp, [ip]
 80175b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80175b4:	fb09 220b 	mla	r2, r9, fp, r2
 80175b8:	4492      	add	sl, r2
 80175ba:	b289      	uxth	r1, r1
 80175bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80175c0:	f84e 1b04 	str.w	r1, [lr], #4
 80175c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80175c8:	f8be 1000 	ldrh.w	r1, [lr]
 80175cc:	0c12      	lsrs	r2, r2, #16
 80175ce:	fb09 1102 	mla	r1, r9, r2, r1
 80175d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80175d6:	4567      	cmp	r7, ip
 80175d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80175dc:	d8e6      	bhi.n	80175ac <__multiply+0x10c>
 80175de:	9a01      	ldr	r2, [sp, #4]
 80175e0:	50a9      	str	r1, [r5, r2]
 80175e2:	3504      	adds	r5, #4
 80175e4:	e79a      	b.n	801751c <__multiply+0x7c>
 80175e6:	3e01      	subs	r6, #1
 80175e8:	e79c      	b.n	8017524 <__multiply+0x84>
 80175ea:	bf00      	nop
 80175ec:	08018643 	.word	0x08018643
 80175f0:	080186b4 	.word	0x080186b4

080175f4 <__pow5mult>:
 80175f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175f8:	4615      	mov	r5, r2
 80175fa:	f012 0203 	ands.w	r2, r2, #3
 80175fe:	4606      	mov	r6, r0
 8017600:	460f      	mov	r7, r1
 8017602:	d007      	beq.n	8017614 <__pow5mult+0x20>
 8017604:	4c25      	ldr	r4, [pc, #148]	; (801769c <__pow5mult+0xa8>)
 8017606:	3a01      	subs	r2, #1
 8017608:	2300      	movs	r3, #0
 801760a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801760e:	f7ff fe9b 	bl	8017348 <__multadd>
 8017612:	4607      	mov	r7, r0
 8017614:	10ad      	asrs	r5, r5, #2
 8017616:	d03d      	beq.n	8017694 <__pow5mult+0xa0>
 8017618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801761a:	b97c      	cbnz	r4, 801763c <__pow5mult+0x48>
 801761c:	2010      	movs	r0, #16
 801761e:	f7fd fe5b 	bl	80152d8 <malloc>
 8017622:	4602      	mov	r2, r0
 8017624:	6270      	str	r0, [r6, #36]	; 0x24
 8017626:	b928      	cbnz	r0, 8017634 <__pow5mult+0x40>
 8017628:	4b1d      	ldr	r3, [pc, #116]	; (80176a0 <__pow5mult+0xac>)
 801762a:	481e      	ldr	r0, [pc, #120]	; (80176a4 <__pow5mult+0xb0>)
 801762c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017630:	f000 fb72 	bl	8017d18 <__assert_func>
 8017634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017638:	6004      	str	r4, [r0, #0]
 801763a:	60c4      	str	r4, [r0, #12]
 801763c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017644:	b94c      	cbnz	r4, 801765a <__pow5mult+0x66>
 8017646:	f240 2171 	movw	r1, #625	; 0x271
 801764a:	4630      	mov	r0, r6
 801764c:	f7ff ff12 	bl	8017474 <__i2b>
 8017650:	2300      	movs	r3, #0
 8017652:	f8c8 0008 	str.w	r0, [r8, #8]
 8017656:	4604      	mov	r4, r0
 8017658:	6003      	str	r3, [r0, #0]
 801765a:	f04f 0900 	mov.w	r9, #0
 801765e:	07eb      	lsls	r3, r5, #31
 8017660:	d50a      	bpl.n	8017678 <__pow5mult+0x84>
 8017662:	4639      	mov	r1, r7
 8017664:	4622      	mov	r2, r4
 8017666:	4630      	mov	r0, r6
 8017668:	f7ff ff1a 	bl	80174a0 <__multiply>
 801766c:	4639      	mov	r1, r7
 801766e:	4680      	mov	r8, r0
 8017670:	4630      	mov	r0, r6
 8017672:	f7ff fe47 	bl	8017304 <_Bfree>
 8017676:	4647      	mov	r7, r8
 8017678:	106d      	asrs	r5, r5, #1
 801767a:	d00b      	beq.n	8017694 <__pow5mult+0xa0>
 801767c:	6820      	ldr	r0, [r4, #0]
 801767e:	b938      	cbnz	r0, 8017690 <__pow5mult+0x9c>
 8017680:	4622      	mov	r2, r4
 8017682:	4621      	mov	r1, r4
 8017684:	4630      	mov	r0, r6
 8017686:	f7ff ff0b 	bl	80174a0 <__multiply>
 801768a:	6020      	str	r0, [r4, #0]
 801768c:	f8c0 9000 	str.w	r9, [r0]
 8017690:	4604      	mov	r4, r0
 8017692:	e7e4      	b.n	801765e <__pow5mult+0x6a>
 8017694:	4638      	mov	r0, r7
 8017696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801769a:	bf00      	nop
 801769c:	08018800 	.word	0x08018800
 80176a0:	080185d1 	.word	0x080185d1
 80176a4:	080186b4 	.word	0x080186b4

080176a8 <__lshift>:
 80176a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176ac:	460c      	mov	r4, r1
 80176ae:	6849      	ldr	r1, [r1, #4]
 80176b0:	6923      	ldr	r3, [r4, #16]
 80176b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80176b6:	68a3      	ldr	r3, [r4, #8]
 80176b8:	4607      	mov	r7, r0
 80176ba:	4691      	mov	r9, r2
 80176bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80176c0:	f108 0601 	add.w	r6, r8, #1
 80176c4:	42b3      	cmp	r3, r6
 80176c6:	db0b      	blt.n	80176e0 <__lshift+0x38>
 80176c8:	4638      	mov	r0, r7
 80176ca:	f7ff fddb 	bl	8017284 <_Balloc>
 80176ce:	4605      	mov	r5, r0
 80176d0:	b948      	cbnz	r0, 80176e6 <__lshift+0x3e>
 80176d2:	4602      	mov	r2, r0
 80176d4:	4b2a      	ldr	r3, [pc, #168]	; (8017780 <__lshift+0xd8>)
 80176d6:	482b      	ldr	r0, [pc, #172]	; (8017784 <__lshift+0xdc>)
 80176d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80176dc:	f000 fb1c 	bl	8017d18 <__assert_func>
 80176e0:	3101      	adds	r1, #1
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	e7ee      	b.n	80176c4 <__lshift+0x1c>
 80176e6:	2300      	movs	r3, #0
 80176e8:	f100 0114 	add.w	r1, r0, #20
 80176ec:	f100 0210 	add.w	r2, r0, #16
 80176f0:	4618      	mov	r0, r3
 80176f2:	4553      	cmp	r3, sl
 80176f4:	db37      	blt.n	8017766 <__lshift+0xbe>
 80176f6:	6920      	ldr	r0, [r4, #16]
 80176f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80176fc:	f104 0314 	add.w	r3, r4, #20
 8017700:	f019 091f 	ands.w	r9, r9, #31
 8017704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801770c:	d02f      	beq.n	801776e <__lshift+0xc6>
 801770e:	f1c9 0e20 	rsb	lr, r9, #32
 8017712:	468a      	mov	sl, r1
 8017714:	f04f 0c00 	mov.w	ip, #0
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	fa02 f209 	lsl.w	r2, r2, r9
 801771e:	ea42 020c 	orr.w	r2, r2, ip
 8017722:	f84a 2b04 	str.w	r2, [sl], #4
 8017726:	f853 2b04 	ldr.w	r2, [r3], #4
 801772a:	4298      	cmp	r0, r3
 801772c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017730:	d8f2      	bhi.n	8017718 <__lshift+0x70>
 8017732:	1b03      	subs	r3, r0, r4
 8017734:	3b15      	subs	r3, #21
 8017736:	f023 0303 	bic.w	r3, r3, #3
 801773a:	3304      	adds	r3, #4
 801773c:	f104 0215 	add.w	r2, r4, #21
 8017740:	4290      	cmp	r0, r2
 8017742:	bf38      	it	cc
 8017744:	2304      	movcc	r3, #4
 8017746:	f841 c003 	str.w	ip, [r1, r3]
 801774a:	f1bc 0f00 	cmp.w	ip, #0
 801774e:	d001      	beq.n	8017754 <__lshift+0xac>
 8017750:	f108 0602 	add.w	r6, r8, #2
 8017754:	3e01      	subs	r6, #1
 8017756:	4638      	mov	r0, r7
 8017758:	612e      	str	r6, [r5, #16]
 801775a:	4621      	mov	r1, r4
 801775c:	f7ff fdd2 	bl	8017304 <_Bfree>
 8017760:	4628      	mov	r0, r5
 8017762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017766:	f842 0f04 	str.w	r0, [r2, #4]!
 801776a:	3301      	adds	r3, #1
 801776c:	e7c1      	b.n	80176f2 <__lshift+0x4a>
 801776e:	3904      	subs	r1, #4
 8017770:	f853 2b04 	ldr.w	r2, [r3], #4
 8017774:	f841 2f04 	str.w	r2, [r1, #4]!
 8017778:	4298      	cmp	r0, r3
 801777a:	d8f9      	bhi.n	8017770 <__lshift+0xc8>
 801777c:	e7ea      	b.n	8017754 <__lshift+0xac>
 801777e:	bf00      	nop
 8017780:	08018643 	.word	0x08018643
 8017784:	080186b4 	.word	0x080186b4

08017788 <__mcmp>:
 8017788:	b530      	push	{r4, r5, lr}
 801778a:	6902      	ldr	r2, [r0, #16]
 801778c:	690c      	ldr	r4, [r1, #16]
 801778e:	1b12      	subs	r2, r2, r4
 8017790:	d10e      	bne.n	80177b0 <__mcmp+0x28>
 8017792:	f100 0314 	add.w	r3, r0, #20
 8017796:	3114      	adds	r1, #20
 8017798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801779c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80177a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80177a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80177a8:	42a5      	cmp	r5, r4
 80177aa:	d003      	beq.n	80177b4 <__mcmp+0x2c>
 80177ac:	d305      	bcc.n	80177ba <__mcmp+0x32>
 80177ae:	2201      	movs	r2, #1
 80177b0:	4610      	mov	r0, r2
 80177b2:	bd30      	pop	{r4, r5, pc}
 80177b4:	4283      	cmp	r3, r0
 80177b6:	d3f3      	bcc.n	80177a0 <__mcmp+0x18>
 80177b8:	e7fa      	b.n	80177b0 <__mcmp+0x28>
 80177ba:	f04f 32ff 	mov.w	r2, #4294967295
 80177be:	e7f7      	b.n	80177b0 <__mcmp+0x28>

080177c0 <__mdiff>:
 80177c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c4:	460c      	mov	r4, r1
 80177c6:	4606      	mov	r6, r0
 80177c8:	4611      	mov	r1, r2
 80177ca:	4620      	mov	r0, r4
 80177cc:	4690      	mov	r8, r2
 80177ce:	f7ff ffdb 	bl	8017788 <__mcmp>
 80177d2:	1e05      	subs	r5, r0, #0
 80177d4:	d110      	bne.n	80177f8 <__mdiff+0x38>
 80177d6:	4629      	mov	r1, r5
 80177d8:	4630      	mov	r0, r6
 80177da:	f7ff fd53 	bl	8017284 <_Balloc>
 80177de:	b930      	cbnz	r0, 80177ee <__mdiff+0x2e>
 80177e0:	4b3a      	ldr	r3, [pc, #232]	; (80178cc <__mdiff+0x10c>)
 80177e2:	4602      	mov	r2, r0
 80177e4:	f240 2132 	movw	r1, #562	; 0x232
 80177e8:	4839      	ldr	r0, [pc, #228]	; (80178d0 <__mdiff+0x110>)
 80177ea:	f000 fa95 	bl	8017d18 <__assert_func>
 80177ee:	2301      	movs	r3, #1
 80177f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80177f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f8:	bfa4      	itt	ge
 80177fa:	4643      	movge	r3, r8
 80177fc:	46a0      	movge	r8, r4
 80177fe:	4630      	mov	r0, r6
 8017800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017804:	bfa6      	itte	ge
 8017806:	461c      	movge	r4, r3
 8017808:	2500      	movge	r5, #0
 801780a:	2501      	movlt	r5, #1
 801780c:	f7ff fd3a 	bl	8017284 <_Balloc>
 8017810:	b920      	cbnz	r0, 801781c <__mdiff+0x5c>
 8017812:	4b2e      	ldr	r3, [pc, #184]	; (80178cc <__mdiff+0x10c>)
 8017814:	4602      	mov	r2, r0
 8017816:	f44f 7110 	mov.w	r1, #576	; 0x240
 801781a:	e7e5      	b.n	80177e8 <__mdiff+0x28>
 801781c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017820:	6926      	ldr	r6, [r4, #16]
 8017822:	60c5      	str	r5, [r0, #12]
 8017824:	f104 0914 	add.w	r9, r4, #20
 8017828:	f108 0514 	add.w	r5, r8, #20
 801782c:	f100 0e14 	add.w	lr, r0, #20
 8017830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017838:	f108 0210 	add.w	r2, r8, #16
 801783c:	46f2      	mov	sl, lr
 801783e:	2100      	movs	r1, #0
 8017840:	f859 3b04 	ldr.w	r3, [r9], #4
 8017844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017848:	fa1f f883 	uxth.w	r8, r3
 801784c:	fa11 f18b 	uxtah	r1, r1, fp
 8017850:	0c1b      	lsrs	r3, r3, #16
 8017852:	eba1 0808 	sub.w	r8, r1, r8
 8017856:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801785a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801785e:	fa1f f888 	uxth.w	r8, r8
 8017862:	1419      	asrs	r1, r3, #16
 8017864:	454e      	cmp	r6, r9
 8017866:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801786a:	f84a 3b04 	str.w	r3, [sl], #4
 801786e:	d8e7      	bhi.n	8017840 <__mdiff+0x80>
 8017870:	1b33      	subs	r3, r6, r4
 8017872:	3b15      	subs	r3, #21
 8017874:	f023 0303 	bic.w	r3, r3, #3
 8017878:	3304      	adds	r3, #4
 801787a:	3415      	adds	r4, #21
 801787c:	42a6      	cmp	r6, r4
 801787e:	bf38      	it	cc
 8017880:	2304      	movcc	r3, #4
 8017882:	441d      	add	r5, r3
 8017884:	4473      	add	r3, lr
 8017886:	469e      	mov	lr, r3
 8017888:	462e      	mov	r6, r5
 801788a:	4566      	cmp	r6, ip
 801788c:	d30e      	bcc.n	80178ac <__mdiff+0xec>
 801788e:	f10c 0203 	add.w	r2, ip, #3
 8017892:	1b52      	subs	r2, r2, r5
 8017894:	f022 0203 	bic.w	r2, r2, #3
 8017898:	3d03      	subs	r5, #3
 801789a:	45ac      	cmp	ip, r5
 801789c:	bf38      	it	cc
 801789e:	2200      	movcc	r2, #0
 80178a0:	441a      	add	r2, r3
 80178a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80178a6:	b17b      	cbz	r3, 80178c8 <__mdiff+0x108>
 80178a8:	6107      	str	r7, [r0, #16]
 80178aa:	e7a3      	b.n	80177f4 <__mdiff+0x34>
 80178ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80178b0:	fa11 f288 	uxtah	r2, r1, r8
 80178b4:	1414      	asrs	r4, r2, #16
 80178b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80178ba:	b292      	uxth	r2, r2
 80178bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80178c0:	f84e 2b04 	str.w	r2, [lr], #4
 80178c4:	1421      	asrs	r1, r4, #16
 80178c6:	e7e0      	b.n	801788a <__mdiff+0xca>
 80178c8:	3f01      	subs	r7, #1
 80178ca:	e7ea      	b.n	80178a2 <__mdiff+0xe2>
 80178cc:	08018643 	.word	0x08018643
 80178d0:	080186b4 	.word	0x080186b4

080178d4 <__d2b>:
 80178d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178d8:	4689      	mov	r9, r1
 80178da:	2101      	movs	r1, #1
 80178dc:	ec57 6b10 	vmov	r6, r7, d0
 80178e0:	4690      	mov	r8, r2
 80178e2:	f7ff fccf 	bl	8017284 <_Balloc>
 80178e6:	4604      	mov	r4, r0
 80178e8:	b930      	cbnz	r0, 80178f8 <__d2b+0x24>
 80178ea:	4602      	mov	r2, r0
 80178ec:	4b25      	ldr	r3, [pc, #148]	; (8017984 <__d2b+0xb0>)
 80178ee:	4826      	ldr	r0, [pc, #152]	; (8017988 <__d2b+0xb4>)
 80178f0:	f240 310a 	movw	r1, #778	; 0x30a
 80178f4:	f000 fa10 	bl	8017d18 <__assert_func>
 80178f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80178fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017900:	bb35      	cbnz	r5, 8017950 <__d2b+0x7c>
 8017902:	2e00      	cmp	r6, #0
 8017904:	9301      	str	r3, [sp, #4]
 8017906:	d028      	beq.n	801795a <__d2b+0x86>
 8017908:	4668      	mov	r0, sp
 801790a:	9600      	str	r6, [sp, #0]
 801790c:	f7ff fd82 	bl	8017414 <__lo0bits>
 8017910:	9900      	ldr	r1, [sp, #0]
 8017912:	b300      	cbz	r0, 8017956 <__d2b+0x82>
 8017914:	9a01      	ldr	r2, [sp, #4]
 8017916:	f1c0 0320 	rsb	r3, r0, #32
 801791a:	fa02 f303 	lsl.w	r3, r2, r3
 801791e:	430b      	orrs	r3, r1
 8017920:	40c2      	lsrs	r2, r0
 8017922:	6163      	str	r3, [r4, #20]
 8017924:	9201      	str	r2, [sp, #4]
 8017926:	9b01      	ldr	r3, [sp, #4]
 8017928:	61a3      	str	r3, [r4, #24]
 801792a:	2b00      	cmp	r3, #0
 801792c:	bf14      	ite	ne
 801792e:	2202      	movne	r2, #2
 8017930:	2201      	moveq	r2, #1
 8017932:	6122      	str	r2, [r4, #16]
 8017934:	b1d5      	cbz	r5, 801796c <__d2b+0x98>
 8017936:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801793a:	4405      	add	r5, r0
 801793c:	f8c9 5000 	str.w	r5, [r9]
 8017940:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017944:	f8c8 0000 	str.w	r0, [r8]
 8017948:	4620      	mov	r0, r4
 801794a:	b003      	add	sp, #12
 801794c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017954:	e7d5      	b.n	8017902 <__d2b+0x2e>
 8017956:	6161      	str	r1, [r4, #20]
 8017958:	e7e5      	b.n	8017926 <__d2b+0x52>
 801795a:	a801      	add	r0, sp, #4
 801795c:	f7ff fd5a 	bl	8017414 <__lo0bits>
 8017960:	9b01      	ldr	r3, [sp, #4]
 8017962:	6163      	str	r3, [r4, #20]
 8017964:	2201      	movs	r2, #1
 8017966:	6122      	str	r2, [r4, #16]
 8017968:	3020      	adds	r0, #32
 801796a:	e7e3      	b.n	8017934 <__d2b+0x60>
 801796c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017974:	f8c9 0000 	str.w	r0, [r9]
 8017978:	6918      	ldr	r0, [r3, #16]
 801797a:	f7ff fd2b 	bl	80173d4 <__hi0bits>
 801797e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017982:	e7df      	b.n	8017944 <__d2b+0x70>
 8017984:	08018643 	.word	0x08018643
 8017988:	080186b4 	.word	0x080186b4

0801798c <_calloc_r>:
 801798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801798e:	fba1 2402 	umull	r2, r4, r1, r2
 8017992:	b94c      	cbnz	r4, 80179a8 <_calloc_r+0x1c>
 8017994:	4611      	mov	r1, r2
 8017996:	9201      	str	r2, [sp, #4]
 8017998:	f7fd fd4a 	bl	8015430 <_malloc_r>
 801799c:	9a01      	ldr	r2, [sp, #4]
 801799e:	4605      	mov	r5, r0
 80179a0:	b930      	cbnz	r0, 80179b0 <_calloc_r+0x24>
 80179a2:	4628      	mov	r0, r5
 80179a4:	b003      	add	sp, #12
 80179a6:	bd30      	pop	{r4, r5, pc}
 80179a8:	220c      	movs	r2, #12
 80179aa:	6002      	str	r2, [r0, #0]
 80179ac:	2500      	movs	r5, #0
 80179ae:	e7f8      	b.n	80179a2 <_calloc_r+0x16>
 80179b0:	4621      	mov	r1, r4
 80179b2:	f7fd fcc9 	bl	8015348 <memset>
 80179b6:	e7f4      	b.n	80179a2 <_calloc_r+0x16>

080179b8 <__sfputc_r>:
 80179b8:	6893      	ldr	r3, [r2, #8]
 80179ba:	3b01      	subs	r3, #1
 80179bc:	2b00      	cmp	r3, #0
 80179be:	b410      	push	{r4}
 80179c0:	6093      	str	r3, [r2, #8]
 80179c2:	da08      	bge.n	80179d6 <__sfputc_r+0x1e>
 80179c4:	6994      	ldr	r4, [r2, #24]
 80179c6:	42a3      	cmp	r3, r4
 80179c8:	db01      	blt.n	80179ce <__sfputc_r+0x16>
 80179ca:	290a      	cmp	r1, #10
 80179cc:	d103      	bne.n	80179d6 <__sfputc_r+0x1e>
 80179ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179d2:	f7fe baed 	b.w	8015fb0 <__swbuf_r>
 80179d6:	6813      	ldr	r3, [r2, #0]
 80179d8:	1c58      	adds	r0, r3, #1
 80179da:	6010      	str	r0, [r2, #0]
 80179dc:	7019      	strb	r1, [r3, #0]
 80179de:	4608      	mov	r0, r1
 80179e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179e4:	4770      	bx	lr

080179e6 <__sfputs_r>:
 80179e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179e8:	4606      	mov	r6, r0
 80179ea:	460f      	mov	r7, r1
 80179ec:	4614      	mov	r4, r2
 80179ee:	18d5      	adds	r5, r2, r3
 80179f0:	42ac      	cmp	r4, r5
 80179f2:	d101      	bne.n	80179f8 <__sfputs_r+0x12>
 80179f4:	2000      	movs	r0, #0
 80179f6:	e007      	b.n	8017a08 <__sfputs_r+0x22>
 80179f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179fc:	463a      	mov	r2, r7
 80179fe:	4630      	mov	r0, r6
 8017a00:	f7ff ffda 	bl	80179b8 <__sfputc_r>
 8017a04:	1c43      	adds	r3, r0, #1
 8017a06:	d1f3      	bne.n	80179f0 <__sfputs_r+0xa>
 8017a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a0c <_vfiprintf_r>:
 8017a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a10:	460d      	mov	r5, r1
 8017a12:	b09d      	sub	sp, #116	; 0x74
 8017a14:	4614      	mov	r4, r2
 8017a16:	4698      	mov	r8, r3
 8017a18:	4606      	mov	r6, r0
 8017a1a:	b118      	cbz	r0, 8017a24 <_vfiprintf_r+0x18>
 8017a1c:	6983      	ldr	r3, [r0, #24]
 8017a1e:	b90b      	cbnz	r3, 8017a24 <_vfiprintf_r+0x18>
 8017a20:	f7ff fb1a 	bl	8017058 <__sinit>
 8017a24:	4b89      	ldr	r3, [pc, #548]	; (8017c4c <_vfiprintf_r+0x240>)
 8017a26:	429d      	cmp	r5, r3
 8017a28:	d11b      	bne.n	8017a62 <_vfiprintf_r+0x56>
 8017a2a:	6875      	ldr	r5, [r6, #4]
 8017a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a2e:	07d9      	lsls	r1, r3, #31
 8017a30:	d405      	bmi.n	8017a3e <_vfiprintf_r+0x32>
 8017a32:	89ab      	ldrh	r3, [r5, #12]
 8017a34:	059a      	lsls	r2, r3, #22
 8017a36:	d402      	bmi.n	8017a3e <_vfiprintf_r+0x32>
 8017a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a3a:	f7ff fbb0 	bl	801719e <__retarget_lock_acquire_recursive>
 8017a3e:	89ab      	ldrh	r3, [r5, #12]
 8017a40:	071b      	lsls	r3, r3, #28
 8017a42:	d501      	bpl.n	8017a48 <_vfiprintf_r+0x3c>
 8017a44:	692b      	ldr	r3, [r5, #16]
 8017a46:	b9eb      	cbnz	r3, 8017a84 <_vfiprintf_r+0x78>
 8017a48:	4629      	mov	r1, r5
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7fe fb02 	bl	8016054 <__swsetup_r>
 8017a50:	b1c0      	cbz	r0, 8017a84 <_vfiprintf_r+0x78>
 8017a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a54:	07dc      	lsls	r4, r3, #31
 8017a56:	d50e      	bpl.n	8017a76 <_vfiprintf_r+0x6a>
 8017a58:	f04f 30ff 	mov.w	r0, #4294967295
 8017a5c:	b01d      	add	sp, #116	; 0x74
 8017a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a62:	4b7b      	ldr	r3, [pc, #492]	; (8017c50 <_vfiprintf_r+0x244>)
 8017a64:	429d      	cmp	r5, r3
 8017a66:	d101      	bne.n	8017a6c <_vfiprintf_r+0x60>
 8017a68:	68b5      	ldr	r5, [r6, #8]
 8017a6a:	e7df      	b.n	8017a2c <_vfiprintf_r+0x20>
 8017a6c:	4b79      	ldr	r3, [pc, #484]	; (8017c54 <_vfiprintf_r+0x248>)
 8017a6e:	429d      	cmp	r5, r3
 8017a70:	bf08      	it	eq
 8017a72:	68f5      	ldreq	r5, [r6, #12]
 8017a74:	e7da      	b.n	8017a2c <_vfiprintf_r+0x20>
 8017a76:	89ab      	ldrh	r3, [r5, #12]
 8017a78:	0598      	lsls	r0, r3, #22
 8017a7a:	d4ed      	bmi.n	8017a58 <_vfiprintf_r+0x4c>
 8017a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a7e:	f7ff fb8f 	bl	80171a0 <__retarget_lock_release_recursive>
 8017a82:	e7e9      	b.n	8017a58 <_vfiprintf_r+0x4c>
 8017a84:	2300      	movs	r3, #0
 8017a86:	9309      	str	r3, [sp, #36]	; 0x24
 8017a88:	2320      	movs	r3, #32
 8017a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a92:	2330      	movs	r3, #48	; 0x30
 8017a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017c58 <_vfiprintf_r+0x24c>
 8017a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a9c:	f04f 0901 	mov.w	r9, #1
 8017aa0:	4623      	mov	r3, r4
 8017aa2:	469a      	mov	sl, r3
 8017aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017aa8:	b10a      	cbz	r2, 8017aae <_vfiprintf_r+0xa2>
 8017aaa:	2a25      	cmp	r2, #37	; 0x25
 8017aac:	d1f9      	bne.n	8017aa2 <_vfiprintf_r+0x96>
 8017aae:	ebba 0b04 	subs.w	fp, sl, r4
 8017ab2:	d00b      	beq.n	8017acc <_vfiprintf_r+0xc0>
 8017ab4:	465b      	mov	r3, fp
 8017ab6:	4622      	mov	r2, r4
 8017ab8:	4629      	mov	r1, r5
 8017aba:	4630      	mov	r0, r6
 8017abc:	f7ff ff93 	bl	80179e6 <__sfputs_r>
 8017ac0:	3001      	adds	r0, #1
 8017ac2:	f000 80aa 	beq.w	8017c1a <_vfiprintf_r+0x20e>
 8017ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ac8:	445a      	add	r2, fp
 8017aca:	9209      	str	r2, [sp, #36]	; 0x24
 8017acc:	f89a 3000 	ldrb.w	r3, [sl]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f000 80a2 	beq.w	8017c1a <_vfiprintf_r+0x20e>
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8017adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ae0:	f10a 0a01 	add.w	sl, sl, #1
 8017ae4:	9304      	str	r3, [sp, #16]
 8017ae6:	9307      	str	r3, [sp, #28]
 8017ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017aec:	931a      	str	r3, [sp, #104]	; 0x68
 8017aee:	4654      	mov	r4, sl
 8017af0:	2205      	movs	r2, #5
 8017af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017af6:	4858      	ldr	r0, [pc, #352]	; (8017c58 <_vfiprintf_r+0x24c>)
 8017af8:	f7e8 fb92 	bl	8000220 <memchr>
 8017afc:	9a04      	ldr	r2, [sp, #16]
 8017afe:	b9d8      	cbnz	r0, 8017b38 <_vfiprintf_r+0x12c>
 8017b00:	06d1      	lsls	r1, r2, #27
 8017b02:	bf44      	itt	mi
 8017b04:	2320      	movmi	r3, #32
 8017b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b0a:	0713      	lsls	r3, r2, #28
 8017b0c:	bf44      	itt	mi
 8017b0e:	232b      	movmi	r3, #43	; 0x2b
 8017b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b14:	f89a 3000 	ldrb.w	r3, [sl]
 8017b18:	2b2a      	cmp	r3, #42	; 0x2a
 8017b1a:	d015      	beq.n	8017b48 <_vfiprintf_r+0x13c>
 8017b1c:	9a07      	ldr	r2, [sp, #28]
 8017b1e:	4654      	mov	r4, sl
 8017b20:	2000      	movs	r0, #0
 8017b22:	f04f 0c0a 	mov.w	ip, #10
 8017b26:	4621      	mov	r1, r4
 8017b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b2c:	3b30      	subs	r3, #48	; 0x30
 8017b2e:	2b09      	cmp	r3, #9
 8017b30:	d94e      	bls.n	8017bd0 <_vfiprintf_r+0x1c4>
 8017b32:	b1b0      	cbz	r0, 8017b62 <_vfiprintf_r+0x156>
 8017b34:	9207      	str	r2, [sp, #28]
 8017b36:	e014      	b.n	8017b62 <_vfiprintf_r+0x156>
 8017b38:	eba0 0308 	sub.w	r3, r0, r8
 8017b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8017b40:	4313      	orrs	r3, r2
 8017b42:	9304      	str	r3, [sp, #16]
 8017b44:	46a2      	mov	sl, r4
 8017b46:	e7d2      	b.n	8017aee <_vfiprintf_r+0xe2>
 8017b48:	9b03      	ldr	r3, [sp, #12]
 8017b4a:	1d19      	adds	r1, r3, #4
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	9103      	str	r1, [sp, #12]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	bfbb      	ittet	lt
 8017b54:	425b      	neglt	r3, r3
 8017b56:	f042 0202 	orrlt.w	r2, r2, #2
 8017b5a:	9307      	strge	r3, [sp, #28]
 8017b5c:	9307      	strlt	r3, [sp, #28]
 8017b5e:	bfb8      	it	lt
 8017b60:	9204      	strlt	r2, [sp, #16]
 8017b62:	7823      	ldrb	r3, [r4, #0]
 8017b64:	2b2e      	cmp	r3, #46	; 0x2e
 8017b66:	d10c      	bne.n	8017b82 <_vfiprintf_r+0x176>
 8017b68:	7863      	ldrb	r3, [r4, #1]
 8017b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8017b6c:	d135      	bne.n	8017bda <_vfiprintf_r+0x1ce>
 8017b6e:	9b03      	ldr	r3, [sp, #12]
 8017b70:	1d1a      	adds	r2, r3, #4
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	9203      	str	r2, [sp, #12]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	bfb8      	it	lt
 8017b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b7e:	3402      	adds	r4, #2
 8017b80:	9305      	str	r3, [sp, #20]
 8017b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017c68 <_vfiprintf_r+0x25c>
 8017b86:	7821      	ldrb	r1, [r4, #0]
 8017b88:	2203      	movs	r2, #3
 8017b8a:	4650      	mov	r0, sl
 8017b8c:	f7e8 fb48 	bl	8000220 <memchr>
 8017b90:	b140      	cbz	r0, 8017ba4 <_vfiprintf_r+0x198>
 8017b92:	2340      	movs	r3, #64	; 0x40
 8017b94:	eba0 000a 	sub.w	r0, r0, sl
 8017b98:	fa03 f000 	lsl.w	r0, r3, r0
 8017b9c:	9b04      	ldr	r3, [sp, #16]
 8017b9e:	4303      	orrs	r3, r0
 8017ba0:	3401      	adds	r4, #1
 8017ba2:	9304      	str	r3, [sp, #16]
 8017ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ba8:	482c      	ldr	r0, [pc, #176]	; (8017c5c <_vfiprintf_r+0x250>)
 8017baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017bae:	2206      	movs	r2, #6
 8017bb0:	f7e8 fb36 	bl	8000220 <memchr>
 8017bb4:	2800      	cmp	r0, #0
 8017bb6:	d03f      	beq.n	8017c38 <_vfiprintf_r+0x22c>
 8017bb8:	4b29      	ldr	r3, [pc, #164]	; (8017c60 <_vfiprintf_r+0x254>)
 8017bba:	bb1b      	cbnz	r3, 8017c04 <_vfiprintf_r+0x1f8>
 8017bbc:	9b03      	ldr	r3, [sp, #12]
 8017bbe:	3307      	adds	r3, #7
 8017bc0:	f023 0307 	bic.w	r3, r3, #7
 8017bc4:	3308      	adds	r3, #8
 8017bc6:	9303      	str	r3, [sp, #12]
 8017bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bca:	443b      	add	r3, r7
 8017bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8017bce:	e767      	b.n	8017aa0 <_vfiprintf_r+0x94>
 8017bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bd4:	460c      	mov	r4, r1
 8017bd6:	2001      	movs	r0, #1
 8017bd8:	e7a5      	b.n	8017b26 <_vfiprintf_r+0x11a>
 8017bda:	2300      	movs	r3, #0
 8017bdc:	3401      	adds	r4, #1
 8017bde:	9305      	str	r3, [sp, #20]
 8017be0:	4619      	mov	r1, r3
 8017be2:	f04f 0c0a 	mov.w	ip, #10
 8017be6:	4620      	mov	r0, r4
 8017be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bec:	3a30      	subs	r2, #48	; 0x30
 8017bee:	2a09      	cmp	r2, #9
 8017bf0:	d903      	bls.n	8017bfa <_vfiprintf_r+0x1ee>
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d0c5      	beq.n	8017b82 <_vfiprintf_r+0x176>
 8017bf6:	9105      	str	r1, [sp, #20]
 8017bf8:	e7c3      	b.n	8017b82 <_vfiprintf_r+0x176>
 8017bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bfe:	4604      	mov	r4, r0
 8017c00:	2301      	movs	r3, #1
 8017c02:	e7f0      	b.n	8017be6 <_vfiprintf_r+0x1da>
 8017c04:	ab03      	add	r3, sp, #12
 8017c06:	9300      	str	r3, [sp, #0]
 8017c08:	462a      	mov	r2, r5
 8017c0a:	4b16      	ldr	r3, [pc, #88]	; (8017c64 <_vfiprintf_r+0x258>)
 8017c0c:	a904      	add	r1, sp, #16
 8017c0e:	4630      	mov	r0, r6
 8017c10:	f7fd fd22 	bl	8015658 <_printf_float>
 8017c14:	4607      	mov	r7, r0
 8017c16:	1c78      	adds	r0, r7, #1
 8017c18:	d1d6      	bne.n	8017bc8 <_vfiprintf_r+0x1bc>
 8017c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c1c:	07d9      	lsls	r1, r3, #31
 8017c1e:	d405      	bmi.n	8017c2c <_vfiprintf_r+0x220>
 8017c20:	89ab      	ldrh	r3, [r5, #12]
 8017c22:	059a      	lsls	r2, r3, #22
 8017c24:	d402      	bmi.n	8017c2c <_vfiprintf_r+0x220>
 8017c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c28:	f7ff faba 	bl	80171a0 <__retarget_lock_release_recursive>
 8017c2c:	89ab      	ldrh	r3, [r5, #12]
 8017c2e:	065b      	lsls	r3, r3, #25
 8017c30:	f53f af12 	bmi.w	8017a58 <_vfiprintf_r+0x4c>
 8017c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c36:	e711      	b.n	8017a5c <_vfiprintf_r+0x50>
 8017c38:	ab03      	add	r3, sp, #12
 8017c3a:	9300      	str	r3, [sp, #0]
 8017c3c:	462a      	mov	r2, r5
 8017c3e:	4b09      	ldr	r3, [pc, #36]	; (8017c64 <_vfiprintf_r+0x258>)
 8017c40:	a904      	add	r1, sp, #16
 8017c42:	4630      	mov	r0, r6
 8017c44:	f7fd ffac 	bl	8015ba0 <_printf_i>
 8017c48:	e7e4      	b.n	8017c14 <_vfiprintf_r+0x208>
 8017c4a:	bf00      	nop
 8017c4c:	08018674 	.word	0x08018674
 8017c50:	08018694 	.word	0x08018694
 8017c54:	08018654 	.word	0x08018654
 8017c58:	0801880c 	.word	0x0801880c
 8017c5c:	08018816 	.word	0x08018816
 8017c60:	08015659 	.word	0x08015659
 8017c64:	080179e7 	.word	0x080179e7
 8017c68:	08018812 	.word	0x08018812

08017c6c <__sread>:
 8017c6c:	b510      	push	{r4, lr}
 8017c6e:	460c      	mov	r4, r1
 8017c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c74:	f000 f8d6 	bl	8017e24 <_read_r>
 8017c78:	2800      	cmp	r0, #0
 8017c7a:	bfab      	itete	ge
 8017c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8017c80:	181b      	addge	r3, r3, r0
 8017c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c86:	bfac      	ite	ge
 8017c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c8a:	81a3      	strhlt	r3, [r4, #12]
 8017c8c:	bd10      	pop	{r4, pc}

08017c8e <__swrite>:
 8017c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c92:	461f      	mov	r7, r3
 8017c94:	898b      	ldrh	r3, [r1, #12]
 8017c96:	05db      	lsls	r3, r3, #23
 8017c98:	4605      	mov	r5, r0
 8017c9a:	460c      	mov	r4, r1
 8017c9c:	4616      	mov	r6, r2
 8017c9e:	d505      	bpl.n	8017cac <__swrite+0x1e>
 8017ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ca4:	2302      	movs	r3, #2
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	f000 f898 	bl	8017ddc <_lseek_r>
 8017cac:	89a3      	ldrh	r3, [r4, #12]
 8017cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017cb6:	81a3      	strh	r3, [r4, #12]
 8017cb8:	4632      	mov	r2, r6
 8017cba:	463b      	mov	r3, r7
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc2:	f000 b817 	b.w	8017cf4 <_write_r>

08017cc6 <__sseek>:
 8017cc6:	b510      	push	{r4, lr}
 8017cc8:	460c      	mov	r4, r1
 8017cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cce:	f000 f885 	bl	8017ddc <_lseek_r>
 8017cd2:	1c43      	adds	r3, r0, #1
 8017cd4:	89a3      	ldrh	r3, [r4, #12]
 8017cd6:	bf15      	itete	ne
 8017cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017ce2:	81a3      	strheq	r3, [r4, #12]
 8017ce4:	bf18      	it	ne
 8017ce6:	81a3      	strhne	r3, [r4, #12]
 8017ce8:	bd10      	pop	{r4, pc}

08017cea <__sclose>:
 8017cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cee:	f000 b831 	b.w	8017d54 <_close_r>
	...

08017cf4 <_write_r>:
 8017cf4:	b538      	push	{r3, r4, r5, lr}
 8017cf6:	4d07      	ldr	r5, [pc, #28]	; (8017d14 <_write_r+0x20>)
 8017cf8:	4604      	mov	r4, r0
 8017cfa:	4608      	mov	r0, r1
 8017cfc:	4611      	mov	r1, r2
 8017cfe:	2200      	movs	r2, #0
 8017d00:	602a      	str	r2, [r5, #0]
 8017d02:	461a      	mov	r2, r3
 8017d04:	f7ee fe81 	bl	8006a0a <_write>
 8017d08:	1c43      	adds	r3, r0, #1
 8017d0a:	d102      	bne.n	8017d12 <_write_r+0x1e>
 8017d0c:	682b      	ldr	r3, [r5, #0]
 8017d0e:	b103      	cbz	r3, 8017d12 <_write_r+0x1e>
 8017d10:	6023      	str	r3, [r4, #0]
 8017d12:	bd38      	pop	{r3, r4, r5, pc}
 8017d14:	200024e4 	.word	0x200024e4

08017d18 <__assert_func>:
 8017d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d1a:	4614      	mov	r4, r2
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	4b09      	ldr	r3, [pc, #36]	; (8017d44 <__assert_func+0x2c>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	4605      	mov	r5, r0
 8017d24:	68d8      	ldr	r0, [r3, #12]
 8017d26:	b14c      	cbz	r4, 8017d3c <__assert_func+0x24>
 8017d28:	4b07      	ldr	r3, [pc, #28]	; (8017d48 <__assert_func+0x30>)
 8017d2a:	9100      	str	r1, [sp, #0]
 8017d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d30:	4906      	ldr	r1, [pc, #24]	; (8017d4c <__assert_func+0x34>)
 8017d32:	462b      	mov	r3, r5
 8017d34:	f000 f81e 	bl	8017d74 <fiprintf>
 8017d38:	f7fd fa9c 	bl	8015274 <abort>
 8017d3c:	4b04      	ldr	r3, [pc, #16]	; (8017d50 <__assert_func+0x38>)
 8017d3e:	461c      	mov	r4, r3
 8017d40:	e7f3      	b.n	8017d2a <__assert_func+0x12>
 8017d42:	bf00      	nop
 8017d44:	20000184 	.word	0x20000184
 8017d48:	0801881d 	.word	0x0801881d
 8017d4c:	0801882a 	.word	0x0801882a
 8017d50:	08018858 	.word	0x08018858

08017d54 <_close_r>:
 8017d54:	b538      	push	{r3, r4, r5, lr}
 8017d56:	4d06      	ldr	r5, [pc, #24]	; (8017d70 <_close_r+0x1c>)
 8017d58:	2300      	movs	r3, #0
 8017d5a:	4604      	mov	r4, r0
 8017d5c:	4608      	mov	r0, r1
 8017d5e:	602b      	str	r3, [r5, #0]
 8017d60:	f7ee fe80 	bl	8006a64 <_close>
 8017d64:	1c43      	adds	r3, r0, #1
 8017d66:	d102      	bne.n	8017d6e <_close_r+0x1a>
 8017d68:	682b      	ldr	r3, [r5, #0]
 8017d6a:	b103      	cbz	r3, 8017d6e <_close_r+0x1a>
 8017d6c:	6023      	str	r3, [r4, #0]
 8017d6e:	bd38      	pop	{r3, r4, r5, pc}
 8017d70:	200024e4 	.word	0x200024e4

08017d74 <fiprintf>:
 8017d74:	b40e      	push	{r1, r2, r3}
 8017d76:	b503      	push	{r0, r1, lr}
 8017d78:	4601      	mov	r1, r0
 8017d7a:	ab03      	add	r3, sp, #12
 8017d7c:	4805      	ldr	r0, [pc, #20]	; (8017d94 <fiprintf+0x20>)
 8017d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d82:	6800      	ldr	r0, [r0, #0]
 8017d84:	9301      	str	r3, [sp, #4]
 8017d86:	f7ff fe41 	bl	8017a0c <_vfiprintf_r>
 8017d8a:	b002      	add	sp, #8
 8017d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d90:	b003      	add	sp, #12
 8017d92:	4770      	bx	lr
 8017d94:	20000184 	.word	0x20000184

08017d98 <_fstat_r>:
 8017d98:	b538      	push	{r3, r4, r5, lr}
 8017d9a:	4d07      	ldr	r5, [pc, #28]	; (8017db8 <_fstat_r+0x20>)
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	4604      	mov	r4, r0
 8017da0:	4608      	mov	r0, r1
 8017da2:	4611      	mov	r1, r2
 8017da4:	602b      	str	r3, [r5, #0]
 8017da6:	f7ee fe69 	bl	8006a7c <_fstat>
 8017daa:	1c43      	adds	r3, r0, #1
 8017dac:	d102      	bne.n	8017db4 <_fstat_r+0x1c>
 8017dae:	682b      	ldr	r3, [r5, #0]
 8017db0:	b103      	cbz	r3, 8017db4 <_fstat_r+0x1c>
 8017db2:	6023      	str	r3, [r4, #0]
 8017db4:	bd38      	pop	{r3, r4, r5, pc}
 8017db6:	bf00      	nop
 8017db8:	200024e4 	.word	0x200024e4

08017dbc <_isatty_r>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	4d06      	ldr	r5, [pc, #24]	; (8017dd8 <_isatty_r+0x1c>)
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	4604      	mov	r4, r0
 8017dc4:	4608      	mov	r0, r1
 8017dc6:	602b      	str	r3, [r5, #0]
 8017dc8:	f7ee fe68 	bl	8006a9c <_isatty>
 8017dcc:	1c43      	adds	r3, r0, #1
 8017dce:	d102      	bne.n	8017dd6 <_isatty_r+0x1a>
 8017dd0:	682b      	ldr	r3, [r5, #0]
 8017dd2:	b103      	cbz	r3, 8017dd6 <_isatty_r+0x1a>
 8017dd4:	6023      	str	r3, [r4, #0]
 8017dd6:	bd38      	pop	{r3, r4, r5, pc}
 8017dd8:	200024e4 	.word	0x200024e4

08017ddc <_lseek_r>:
 8017ddc:	b538      	push	{r3, r4, r5, lr}
 8017dde:	4d07      	ldr	r5, [pc, #28]	; (8017dfc <_lseek_r+0x20>)
 8017de0:	4604      	mov	r4, r0
 8017de2:	4608      	mov	r0, r1
 8017de4:	4611      	mov	r1, r2
 8017de6:	2200      	movs	r2, #0
 8017de8:	602a      	str	r2, [r5, #0]
 8017dea:	461a      	mov	r2, r3
 8017dec:	f7ee fe61 	bl	8006ab2 <_lseek>
 8017df0:	1c43      	adds	r3, r0, #1
 8017df2:	d102      	bne.n	8017dfa <_lseek_r+0x1e>
 8017df4:	682b      	ldr	r3, [r5, #0]
 8017df6:	b103      	cbz	r3, 8017dfa <_lseek_r+0x1e>
 8017df8:	6023      	str	r3, [r4, #0]
 8017dfa:	bd38      	pop	{r3, r4, r5, pc}
 8017dfc:	200024e4 	.word	0x200024e4

08017e00 <__ascii_mbtowc>:
 8017e00:	b082      	sub	sp, #8
 8017e02:	b901      	cbnz	r1, 8017e06 <__ascii_mbtowc+0x6>
 8017e04:	a901      	add	r1, sp, #4
 8017e06:	b142      	cbz	r2, 8017e1a <__ascii_mbtowc+0x1a>
 8017e08:	b14b      	cbz	r3, 8017e1e <__ascii_mbtowc+0x1e>
 8017e0a:	7813      	ldrb	r3, [r2, #0]
 8017e0c:	600b      	str	r3, [r1, #0]
 8017e0e:	7812      	ldrb	r2, [r2, #0]
 8017e10:	1e10      	subs	r0, r2, #0
 8017e12:	bf18      	it	ne
 8017e14:	2001      	movne	r0, #1
 8017e16:	b002      	add	sp, #8
 8017e18:	4770      	bx	lr
 8017e1a:	4610      	mov	r0, r2
 8017e1c:	e7fb      	b.n	8017e16 <__ascii_mbtowc+0x16>
 8017e1e:	f06f 0001 	mvn.w	r0, #1
 8017e22:	e7f8      	b.n	8017e16 <__ascii_mbtowc+0x16>

08017e24 <_read_r>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	4d07      	ldr	r5, [pc, #28]	; (8017e44 <_read_r+0x20>)
 8017e28:	4604      	mov	r4, r0
 8017e2a:	4608      	mov	r0, r1
 8017e2c:	4611      	mov	r1, r2
 8017e2e:	2200      	movs	r2, #0
 8017e30:	602a      	str	r2, [r5, #0]
 8017e32:	461a      	mov	r2, r3
 8017e34:	f7ee fdcc 	bl	80069d0 <_read>
 8017e38:	1c43      	adds	r3, r0, #1
 8017e3a:	d102      	bne.n	8017e42 <_read_r+0x1e>
 8017e3c:	682b      	ldr	r3, [r5, #0]
 8017e3e:	b103      	cbz	r3, 8017e42 <_read_r+0x1e>
 8017e40:	6023      	str	r3, [r4, #0]
 8017e42:	bd38      	pop	{r3, r4, r5, pc}
 8017e44:	200024e4 	.word	0x200024e4

08017e48 <__ascii_wctomb>:
 8017e48:	b149      	cbz	r1, 8017e5e <__ascii_wctomb+0x16>
 8017e4a:	2aff      	cmp	r2, #255	; 0xff
 8017e4c:	bf85      	ittet	hi
 8017e4e:	238a      	movhi	r3, #138	; 0x8a
 8017e50:	6003      	strhi	r3, [r0, #0]
 8017e52:	700a      	strbls	r2, [r1, #0]
 8017e54:	f04f 30ff 	movhi.w	r0, #4294967295
 8017e58:	bf98      	it	ls
 8017e5a:	2001      	movls	r0, #1
 8017e5c:	4770      	bx	lr
 8017e5e:	4608      	mov	r0, r1
 8017e60:	4770      	bx	lr
	...

08017e64 <_init>:
 8017e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e66:	bf00      	nop
 8017e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e6a:	bc08      	pop	{r3}
 8017e6c:	469e      	mov	lr, r3
 8017e6e:	4770      	bx	lr

08017e70 <_fini>:
 8017e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e72:	bf00      	nop
 8017e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e76:	bc08      	pop	{r3}
 8017e78:	469e      	mov	lr, r3
 8017e7a:	4770      	bx	lr
