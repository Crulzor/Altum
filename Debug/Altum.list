
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dda4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016f4  0800df88  0800df88  0001df88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f67c  0800f67c  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800f67c  0800f67c  0001f67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f684  0800f684  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f684  0800f684  0001f684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f688  0800f688  0001f688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800f68c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002624  20000354  0800f9e0  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002978  0800f9e0  00022978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006c3a2  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e17  00000000  00000000  0008c726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000244e0  00000000  00000000  0009653d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f50  00000000  00000000  000baa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000039c8  00000000  00000000  000bc970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003f0d2  00000000  00000000  000c0338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004f1bb  00000000  00000000  000ff40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017f1d6  00000000  00000000  0014e5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002cd79b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e50  00000000  00000000  002cd7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800df6c 	.word	0x0800df6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	0800df6c 	.word	0x0800df6c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components, Altimeter* altimeter){
 8000efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f00:	2500      	movs	r5, #0
 8000f02:	461e      	mov	r6, r3
 8000f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f08:	4604      	mov	r4, r0
 8000f0a:	e9c0 5500 	strd	r5, r5, [r0]
 8000f0e:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8000f12:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8000f16:	4688      	mov	r8, r1
 8000f18:	4617      	mov	r7, r2
 8000f1a:	6085      	str	r5, [r0, #8]
 8000f1c:	8383      	strh	r3, [r0, #28]
 8000f1e:	2244      	movs	r2, #68	; 0x44
 8000f20:	4629      	mov	r1, r5
 8000f22:	3030      	adds	r0, #48	; 0x30
 8000f24:	f00a fa94 	bl	800b450 <memset>
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0x94>)
 8000f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0x98>)
 8000f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8000f30:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f34:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0x9c>)
 8000f38:	6423      	str	r3, [r4, #64]	; 0x40
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xa0>)
 8000f3c:	6463      	str	r3, [r4, #68]	; 0x44
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xa4>)
 8000f40:	64a3      	str	r3, [r4, #72]	; 0x48
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xa8>)
 8000f44:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xac>)
 8000f48:	6523      	str	r3, [r4, #80]	; 0x50
 8000f4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f4e:	6563      	str	r3, [r4, #84]	; 0x54
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xb0>)
 8000f52:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xb4>)
 8000f58:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xb8>)
 8000f5e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter+0xbc>)
 8000f64:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

	this->_sbus = sbus;
	this->_timers = init;
	this->_components = components;
	this->_altimeter = altimeter;
 8000f68:	9b06      	ldr	r3, [sp, #24]
Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components, Altimeter* altimeter){
 8000f6a:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
	this->_timers = init;
 8000f6e:	e9c4 8708 	strd	r8, r7, [r4, #32]
Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components, Altimeter* altimeter){
 8000f72:	f8a4 5076 	strh.w	r5, [r4, #118]	; 0x76
 8000f76:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
 8000f7a:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
 8000f7e:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
 8000f82:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
	this->_components = components;
 8000f86:	62a6      	str	r6, [r4, #40]	; 0x28
	this->_altimeter = altimeter;
 8000f88:	62e3      	str	r3, [r4, #44]	; 0x2c

	this->_ledPWM = 0;


}
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f90:	41a00000 	.word	0x41a00000
 8000f94:	42c80000 	.word	0x42c80000
 8000f98:	c47a0000 	.word	0xc47a0000
 8000f9c:	447a0000 	.word	0x447a0000
 8000fa0:	c3fa0000 	.word	0xc3fa0000
 8000fa4:	43fa0000 	.word	0x43fa0000
 8000fa8:	3ba3d70a 	.word	0x3ba3d70a
 8000fac:	42a00000 	.word	0x42a00000
 8000fb0:	43160000 	.word	0x43160000
 8000fb4:	42dc0000 	.word	0x42dc0000
 8000fb8:	44688000 	.word	0x44688000

08000fbc <_ZN9Convertor9updateLEDEv>:



}

void Convertor::updateLED(void){
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4604      	mov	r4, r0



	if(_sbus->B_button() && _ledPWM < 1000) {
 8000fc0:	6a00      	ldr	r0, [r0, #32]
 8000fc2:	f001 f8fd 	bl	80021c0 <_ZN4SBUS8B_buttonEv>
 8000fc6:	b170      	cbz	r0, 8000fe6 <_ZN9Convertor9updateLEDEv+0x2a>
 8000fc8:	f9b4 5074 	ldrsh.w	r5, [r4, #116]	; 0x74
 8000fcc:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8000fd0:	da09      	bge.n	8000fe6 <_ZN9Convertor9updateLEDEv+0x2a>
		_ledPWM += 250;
 8000fd2:	35fa      	adds	r5, #250	; 0xfa
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);


	}else if(_sbus->A_button() && _ledPWM > 0){

		_ledPWM -= 250;
 8000fd4:	b22d      	sxth	r5, r5
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8000fd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
		_ledPWM -= 250;
 8000fd8:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 8000fdc:	f001 ffe8 	bl	8002fb0 <_ZN11Initializer13get_LED_TimerEv>
 8000fe0:	6803      	ldr	r3, [r0, #0]
 8000fe2:	635d      	str	r5, [r3, #52]	; 0x34

	}

}
 8000fe4:	bd38      	pop	{r3, r4, r5, pc}
	}else if(_sbus->A_button() && _ledPWM > 0){
 8000fe6:	6a20      	ldr	r0, [r4, #32]
 8000fe8:	f001 f8bc 	bl	8002164 <_ZN4SBUS8A_buttonEv>
 8000fec:	2800      	cmp	r0, #0
 8000fee:	d0f9      	beq.n	8000fe4 <_ZN9Convertor9updateLEDEv+0x28>
 8000ff0:	f9b4 5074 	ldrsh.w	r5, [r4, #116]	; 0x74
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	ddf5      	ble.n	8000fe4 <_ZN9Convertor9updateLEDEv+0x28>
		_ledPWM -= 250;
 8000ff8:	3dfa      	subs	r5, #250	; 0xfa
 8000ffa:	e7eb      	b.n	8000fd4 <_ZN9Convertor9updateLEDEv+0x18>

08000ffc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:

//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8000ffc:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001000:	b510      	push	{r4, lr}
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8001002:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 8001006:	2900      	cmp	r1, #0
void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 8001008:	9c02      	ldr	r4, [sp, #8]
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	b280      	uxth	r0, r0
	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 800100e:	db28      	blt.n	8001062 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8001010:	b91b      	cbnz	r3, 800101a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e>
 8001012:	6350      	str	r0, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001014:	b994      	cbnz	r4, 800103c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x40>
 8001016:	6354      	str	r4, [r2, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 8001018:	bd10      	pop	{r4, pc}
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 800101a:	2b04      	cmp	r3, #4
 800101c:	d101      	bne.n	8001022 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x26>
 800101e:	6390      	str	r0, [r2, #56]	; 0x38
 8001020:	e7f8      	b.n	8001014 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
 8001022:	2b08      	cmp	r3, #8
 8001024:	d101      	bne.n	800102a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x2e>
 8001026:	63d0      	str	r0, [r2, #60]	; 0x3c
 8001028:	e7f4      	b.n	8001014 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
 800102a:	2b0c      	cmp	r3, #12
 800102c:	d101      	bne.n	8001032 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x36>
 800102e:	6410      	str	r0, [r2, #64]	; 0x40
 8001030:	e7f0      	b.n	8001014 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
 8001032:	2b10      	cmp	r3, #16
 8001034:	bf0c      	ite	eq
 8001036:	6490      	streq	r0, [r2, #72]	; 0x48
 8001038:	64d0      	strne	r0, [r2, #76]	; 0x4c
 800103a:	e7eb      	b.n	8001014 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x18>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 800103c:	2c04      	cmp	r4, #4
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	d101      	bne.n	8001048 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 8001044:	6393      	str	r3, [r2, #56]	; 0x38
 8001046:	e7e7      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 8001048:	2c08      	cmp	r4, #8
 800104a:	d101      	bne.n	8001050 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x54>
 800104c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800104e:	e7e3      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 8001050:	2c0c      	cmp	r4, #12
 8001052:	d101      	bne.n	8001058 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x5c>
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	e7df      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 8001058:	2c10      	cmp	r4, #16
 800105a:	bf0c      	ite	eq
 800105c:	6493      	streq	r3, [r2, #72]	; 0x48
 800105e:	64d3      	strne	r3, [r2, #76]	; 0x4c
 8001060:	e7da      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 8001062:	b91b      	cbnz	r3, 800106c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x70>
 8001064:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001066:	b9a4      	cbnz	r4, 8001092 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x96>
 8001068:	6350      	str	r0, [r2, #52]	; 0x34
 800106a:	e7d5      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 800106c:	2b04      	cmp	r3, #4
 800106e:	f04f 0100 	mov.w	r1, #0
 8001072:	d101      	bne.n	8001078 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x7c>
 8001074:	6391      	str	r1, [r2, #56]	; 0x38
 8001076:	e7f6      	b.n	8001066 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
 8001078:	2b08      	cmp	r3, #8
 800107a:	d101      	bne.n	8001080 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x84>
 800107c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800107e:	e7f2      	b.n	8001066 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
 8001080:	2b0c      	cmp	r3, #12
 8001082:	d101      	bne.n	8001088 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x8c>
 8001084:	6411      	str	r1, [r2, #64]	; 0x40
 8001086:	e7ee      	b.n	8001066 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
 8001088:	2b10      	cmp	r3, #16
 800108a:	bf0c      	ite	eq
 800108c:	6491      	streq	r1, [r2, #72]	; 0x48
 800108e:	64d1      	strne	r1, [r2, #76]	; 0x4c
 8001090:	e7e9      	b.n	8001066 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x6a>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001092:	2c04      	cmp	r4, #4
 8001094:	d101      	bne.n	800109a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9e>
 8001096:	6390      	str	r0, [r2, #56]	; 0x38
 8001098:	e7be      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 800109a:	2c08      	cmp	r4, #8
 800109c:	d101      	bne.n	80010a2 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xa6>
 800109e:	63d0      	str	r0, [r2, #60]	; 0x3c
 80010a0:	e7ba      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 80010a2:	2c0c      	cmp	r4, #12
 80010a4:	d101      	bne.n	80010aa <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xae>
 80010a6:	6410      	str	r0, [r2, #64]	; 0x40
 80010a8:	e7b6      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>
 80010aa:	2c10      	cmp	r4, #16
 80010ac:	bf0c      	ite	eq
 80010ae:	6490      	streq	r0, [r2, #72]	; 0x48
 80010b0:	64d0      	strne	r0, [r2, #76]	; 0x4c
}
 80010b2:	e7b1      	b.n	8001018 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1c>

080010b4 <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 80010b4:	b570      	push	{r4, r5, r6, lr}

	this->_cleanerMotorPWM = 0;
 80010b6:	2600      	movs	r6, #0
void Convertor::updateCleanerMotor(void){
 80010b8:	4605      	mov	r5, r0
	this->_cleanerMotorPWM = 0;
 80010ba:	f8a0 6076 	strh.w	r6, [r0, #118]	; 0x76
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 80010be:	6a00      	ldr	r0, [r0, #32]
 80010c0:	f000 ffea 	bl	8002098 <_ZN4SBUS9getRightYEv>
 80010c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0

	if(_cleanerMotorPWM > 10){
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 80010c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 80010ca:	ee10 3a10 	vmov	r3, s0
 80010ce:	b21c      	sxth	r4, r3
	if(_cleanerMotorPWM > 10){
 80010d0:	2c0a      	cmp	r4, #10
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 80010d2:	f8a5 4076 	strh.w	r4, [r5, #118]	; 0x76
	if(_cleanerMotorPWM > 10){
 80010d6:	dd08      	ble.n	80010ea <_ZN9Convertor18updateCleanerMotorEv+0x36>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 80010d8:	f001 ff73 	bl	8002fc2 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80010dc:	2c00      	cmp	r4, #0
 80010de:	6803      	ldr	r3, [r0, #0]
 80010e0:	bfb8      	it	lt
 80010e2:	4264      	neglt	r4, r4
 80010e4:	b2a4      	uxth	r4, r4
 80010e6:	63dc      	str	r4, [r3, #60]	; 0x3c

	}



}
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 80010ea:	f001 ff6a 	bl	8002fc2 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 80010ee:	6803      	ldr	r3, [r0, #0]
 80010f0:	63de      	str	r6, [r3, #60]	; 0x3c
}
 80010f2:	e7f9      	b.n	80010e8 <_ZN9Convertor18updateCleanerMotorEv+0x34>

080010f4 <_ZN9Convertor14updateSelectorEs>:


void Convertor::updateSelector(int16_t pwm){
 80010f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010f6:	4604      	mov	r4, r0


	if(pwm > 0){
 80010f8:	460d      	mov	r5, r1
 80010fa:	b151      	cbz	r1, 8001112 <_ZN9Convertor14updateSelectorEs+0x1e>

		this->actuatorControl(pwm, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 80010fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80010fe:	f001 ff59 	bl	8002fb4 <_ZN11Initializer18get_selector_TimerEv>
 8001102:	2308      	movs	r3, #8
 8001104:	4602      	mov	r2, r0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4629      	mov	r1, r5
 800110a:	230c      	movs	r3, #12
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff ff75 	bl	8000ffc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(pwm, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 8001112:	b003      	add	sp, #12
 8001114:	bd30      	pop	{r4, r5, pc}

08001116 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 8001116:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001118:	4604      	mov	r4, r0

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 800111a:	6a00      	ldr	r0, [r0, #32]
 800111c:	f000 ff78 	bl	8002010 <_ZN4SBUS8getLeftYEv>
 8001120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001124:	ee10 3a10 	vmov	r3, s0
 8001128:	b21d      	sxth	r5, r3

	if(_pushMotorPWM > 0){
 800112a:	2d00      	cmp	r5, #0
	this->_pushMotorPWM = this->_sbus->getLeftY();
 800112c:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
	if(_pushMotorPWM > 0){
 8001130:	dd0b      	ble.n	800114a <_ZN9Convertor15updatePushMotorEv+0x34>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);

	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 8001132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001134:	f001 ff40 	bl	8002fb8 <_ZN11Initializer19get_pushMotor_TimerEv>
 8001138:	2308      	movs	r3, #8
 800113a:	4602      	mov	r2, r0
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4629      	mov	r1, r5
 8001140:	2304      	movs	r3, #4
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff ff5a 	bl	8000ffc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}

}
 8001148:	e000      	b.n	800114c <_ZN9Convertor15updatePushMotorEv+0x36>
	}else if(_pushMotorPWM < 0){
 800114a:	d1f2      	bne.n	8001132 <_ZN9Convertor15updatePushMotorEv+0x1c>
}
 800114c:	b003      	add	sp, #12
 800114e:	bd30      	pop	{r4, r5, pc}

08001150 <_ZN9Convertor16updateFluidMotorEv>:



}

void Convertor::updateFluidMotor(void){
 8001150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001152:	4604      	mov	r4, r0

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 8001154:	6a00      	ldr	r0, [r0, #32]
 8001156:	f000 ffe3 	bl	8002120 <_ZN4SBUS11getJogWheelEv>
 800115a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800115e:	ee10 3a10 	vmov	r3, s0
 8001162:	b21d      	sxth	r5, r3

	if(_fluidPWM > 0){
 8001164:	2d00      	cmp	r5, #0
	this->_fluidPWM = this->_sbus->getJogWheel();
 8001166:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
	if(_fluidPWM > 0){
 800116a:	dd0b      	ble.n	8001184 <_ZN9Convertor16updateFluidMotorEv+0x34>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);

	}else if(_fluidPWM < 0){

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 800116c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800116e:	f001 ff25 	bl	8002fbc <_ZN11Initializer20get_fluidMotor_TimerEv>
 8001172:	2300      	movs	r3, #0
 8001174:	4602      	mov	r2, r0
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4629      	mov	r1, r5
 800117a:	2304      	movs	r3, #4
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff ff3d 	bl	8000ffc <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}


}
 8001182:	e000      	b.n	8001186 <_ZN9Convertor16updateFluidMotorEv+0x36>
	}else if(_fluidPWM < 0){
 8001184:	d1f2      	bne.n	800116c <_ZN9Convertor16updateFluidMotorEv+0x1c>
}
 8001186:	b003      	add	sp, #12
 8001188:	bd30      	pop	{r4, r5, pc}

0800118a <_ZN9Convertor17updateFluidAmountEv>:

void Convertor::updateFluidAmount(void){
 800118a:	b510      	push	{r4, lr}
 800118c:	4604      	mov	r4, r0


	if(this->_sbus->D_button() && (_fluidAmount < 100)){
 800118e:	6a00      	ldr	r0, [r0, #32]
 8001190:	f001 f872 	bl	8002278 <_ZN4SBUS8D_buttonEv>
 8001194:	b138      	cbz	r0, 80011a6 <_ZN9Convertor17updateFluidAmountEv+0x1c>
 8001196:	f994 3091 	ldrsb.w	r3, [r4, #145]	; 0x91
 800119a:	2b63      	cmp	r3, #99	; 0x63
 800119c:	dc03      	bgt.n	80011a6 <_ZN9Convertor17updateFluidAmountEv+0x1c>

		_fluidAmount += 10;
 800119e:	330a      	adds	r3, #10
	}else if(_sbus->C_button() && (_fluidAmount > 0)){

		_fluidAmount -= 10;
 80011a0:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	}

}
 80011a4:	bd10      	pop	{r4, pc}
	}else if(_sbus->C_button() && (_fluidAmount > 0)){
 80011a6:	6a20      	ldr	r0, [r4, #32]
 80011a8:	f001 f838 	bl	800221c <_ZN4SBUS8C_buttonEv>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d0f9      	beq.n	80011a4 <_ZN9Convertor17updateFluidAmountEv+0x1a>
 80011b0:	f994 3091 	ldrsb.w	r3, [r4, #145]	; 0x91
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	ddf5      	ble.n	80011a4 <_ZN9Convertor17updateFluidAmountEv+0x1a>
		_fluidAmount -= 10;
 80011b8:	3b0a      	subs	r3, #10
 80011ba:	e7f1      	b.n	80011a0 <_ZN9Convertor17updateFluidAmountEv+0x16>

080011bc <_ZN9Convertor17setAltitudeOffsetEv>:

void Convertor::setAltitudeOffset(void){
 80011bc:	b513      	push	{r0, r1, r4, lr}
 80011be:	4604      	mov	r4, r0

	static uint8_t counter = 0;


	if(this->_sbus->home_button()){
 80011c0:	6a00      	ldr	r0, [r0, #32]
 80011c2:	f001 f887 	bl	80022d4 <_ZN4SBUS11home_buttonEv>
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <_ZN9Convertor17setAltitudeOffsetEv+0x58>)
 80011c8:	b128      	cbz	r0, 80011d6 <_ZN9Convertor17setAltitudeOffsetEv+0x1a>
		counter += 1;
 80011ca:	7813      	ldrb	r3, [r2, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2db      	uxtb	r3, r3
		if (counter >= 2){
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d817      	bhi.n	8001204 <_ZN9Convertor17setAltitudeOffsetEv+0x48>
		counter += 1;
 80011d4:	7013      	strb	r3, [r2, #0]
			counter = 0;
		}
	}

	switch(counter){
 80011d6:	7813      	ldrb	r3, [r2, #0]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d015      	beq.n	8001208 <_ZN9Convertor17setAltitudeOffsetEv+0x4c>
 80011dc:	d818      	bhi.n	8001210 <_ZN9Convertor17setAltitudeOffsetEv+0x54>
 80011de:	b19b      	cbz	r3, 8001208 <_ZN9Convertor17setAltitudeOffsetEv+0x4c>

		case 0:
			_altimeter->set_offset(0);
			break;
		case 1:
			if(_altimeter->get_offset() == 0){
 80011e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80011e2:	f001 f9ba 	bl	800255a <_ZN9Altimeter10get_offsetEv>
 80011e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	d10f      	bne.n	8001210 <_ZN9Convertor17setAltitudeOffsetEv+0x54>

				_altimeter->set_offset(_altimeter->get_altitude());
 80011f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80011f2:	9001      	str	r0, [sp, #4]
 80011f4:	f001 f8f6 	bl	80023e4 <_ZN9Altimeter12get_altitudeEv>
 80011f8:	9801      	ldr	r0, [sp, #4]
		case 2:
			_altimeter->set_offset(0);
			break;
	}

}
 80011fa:	b002      	add	sp, #8
 80011fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			_altimeter->set_offset(0);
 8001200:	f001 b9a8 	b.w	8002554 <_ZN9Altimeter10set_offsetEf>
			counter = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	7013      	strb	r3, [r2, #0]
			_altimeter->set_offset(0);
 8001208:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001218 <_ZN9Convertor17setAltitudeOffsetEv+0x5c>
 800120c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800120e:	e7f4      	b.n	80011fa <_ZN9Convertor17setAltitudeOffsetEv+0x3e>
}
 8001210:	b002      	add	sp, #8
 8001212:	bd10      	pop	{r4, pc}
 8001214:	20000370 	.word	0x20000370
 8001218:	00000000 	.word	0x00000000

0800121c <_ZN9Convertor15get_selectorPWMEv>:

int16_t Convertor::get_selectorPWM(void){

	return this->_selectorPWM;

}
 800121c:	f9b0 0078 	ldrsh.w	r0, [r0, #120]	; 0x78
 8001220:	4770      	bx	lr

08001222 <_ZN9Convertor12get_fluidPWMEv>:


int16_t Convertor::get_fluidPWM(void){

	return this->_fluidPWM;
}
 8001222:	f9b0 007c 	ldrsh.w	r0, [r0, #124]	; 0x7c
 8001226:	4770      	bx	lr

08001228 <_ZN9Convertor11get_pushPWMEv>:
int16_t Convertor::get_pushPWM(void){


	return this->_pushMotorPWM;

}
 8001228:	f9b0 007a 	ldrsh.w	r0, [r0, #122]	; 0x7a
 800122c:	4770      	bx	lr

0800122e <_ZN9Convertor19get_cleanerMotorPWMEv>:
int16_t Convertor::get_cleanerMotorPWM(void){

	return this->_cleanerMotorPWM;


}
 800122e:	f9b0 0076 	ldrsh.w	r0, [r0, #118]	; 0x76
 8001232:	4770      	bx	lr

08001234 <_ZN9Convertor10get_LEDPWMEv>:

int16_t Convertor::get_LEDPWM(void){

	return _ledPWM;
}
 8001234:	f9b0 0074 	ldrsh.w	r0, [r0, #116]	; 0x74
 8001238:	4770      	bx	lr
 800123a:	0000      	movs	r0, r0
 800123c:	0000      	movs	r0, r0
	...

08001240 <_ZN9Convertor21get_selector_positionEv>:
//	uint16_t batteryValue = (uint16_t) ((supplyVoltage * (float)batteryInteger * resistorTotal) / (adcRange * resistorBottom) * 10.0);
//	return batteryValue;
//
//
//}
int16_t Convertor::get_selector_position(void){
 8001240:	b508      	push	{r3, lr}

	return ADC_1_Buffer[0] / 4.095;
 8001242:	6800      	ldr	r0, [r0, #0]
 8001244:	f7ff f986 	bl	8000554 <__aeabi_ui2d>
 8001248:	a305      	add	r3, pc, #20	; (adr r3, 8001260 <_ZN9Convertor21get_selector_positionEv+0x20>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff fb25 	bl	800089c <__aeabi_ddiv>
 8001252:	f7ff fca9 	bl	8000ba8 <__aeabi_d2iz>
}
 8001256:	b200      	sxth	r0, r0
 8001258:	bd08      	pop	{r3, pc}
 800125a:	bf00      	nop
 800125c:	f3af 8000 	nop.w
 8001260:	ae147ae1 	.word	0xae147ae1
 8001264:	40106147 	.word	0x40106147

08001268 <_ZN9Convertor22updateSelectorPositionEv>:
void Convertor::updateSelectorPosition(void){
 8001268:	b570      	push	{r4, r5, r6, lr}
	_position = 0;
 800126a:	2600      	movs	r6, #0
void Convertor::updateSelectorPosition(void){
 800126c:	4604      	mov	r4, r0
	_position = 0;
 800126e:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
	if(this->_sbus->getRightX() < 100){
 8001272:	6a00      	ldr	r0, [r0, #32]
 8001274:	f000 ff32 	bl	80020dc <_ZN4SBUS9getRightXEv>
 8001278:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80012f4 <_ZN9Convertor22updateSelectorPositionEv+0x8c>
 800127c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8001288:	d51e      	bpl.n	80012c8 <_ZN9Convertor22updateSelectorPositionEv+0x60>
		_position = 0;
 800128a:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
			_pidSelector.setPoint = _cleanerPos;
 800128e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
			_pidSelector.setPoint = _probePos;
 8001292:	66a3      	str	r3, [r4, #104]	; 0x68
			_pidSelector.measurement = this->get_selector_position();
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff ffd3 	bl	8001240 <_ZN9Convertor21get_selector_positionEv>
 800129a:	ee07 0a90 	vmov	s15, r0
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			PIDControllerUpdate(&_pidSelector);
 80012a2:	4628      	mov	r0, r5
			_pidSelector.measurement = this->get_selector_position();
 80012a4:	edc4 7a1b 	vstr	s15, [r4, #108]	; 0x6c
			PIDControllerUpdate(&_pidSelector);
 80012a8:	f009 fd40 	bl	800ad2c <PIDControllerUpdate>
			_selectorPWM =(int16_t) _pidSelector.out;
 80012ac:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			this->updateSelector(_selectorPWM);
 80012b4:	4620      	mov	r0, r4
			_selectorPWM =(int16_t) _pidSelector.out;
 80012b6:	ee17 3a90 	vmov	r3, s15
 80012ba:	b219      	sxth	r1, r3
 80012bc:	f8a4 1078 	strh.w	r1, [r4, #120]	; 0x78
}
 80012c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			this->updateSelector(_selectorPWM);
 80012c4:	f7ff bf16 	b.w	80010f4 <_ZN9Convertor14updateSelectorEs>
	}else if(this->_sbus->getRightX() >= -100){
 80012c8:	6a20      	ldr	r0, [r4, #32]
 80012ca:	f000 ff07 	bl	80020dc <_ZN4SBUS9getRightXEv>
 80012ce:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80012f8 <_ZN9Convertor22updateSelectorPositionEv+0x90>
 80012d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	db05      	blt.n	80012e8 <_ZN9Convertor22updateSelectorPositionEv+0x80>
		_position = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			_pidSelector.setPoint = _probePos;
 80012e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80012e6:	e7d4      	b.n	8001292 <_ZN9Convertor22updateSelectorPositionEv+0x2a>
	switch(_position){
 80012e8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f8      	bne.n	80012e2 <_ZN9Convertor22updateSelectorPositionEv+0x7a>
 80012f0:	e7cd      	b.n	800128e <_ZN9Convertor22updateSelectorPositionEv+0x26>
 80012f2:	bf00      	nop
 80012f4:	42c80000 	.word	0x42c80000
 80012f8:	c2c80000 	.word	0xc2c80000
 80012fc:	00000000 	.word	0x00000000

08001300 <_ZN9Convertor17get_fluidPositionEv>:

int16_t Convertor::get_fluidPosition(void){
 8001300:	b508      	push	{r3, lr}


	return ADC_1_Buffer[2] / 4.095;
 8001302:	6880      	ldr	r0, [r0, #8]
 8001304:	f7ff f926 	bl	8000554 <__aeabi_ui2d>
 8001308:	a305      	add	r3, pc, #20	; (adr r3, 8001320 <_ZN9Convertor17get_fluidPositionEv+0x20>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fac5 	bl	800089c <__aeabi_ddiv>
 8001312:	f7ff fc49 	bl	8000ba8 <__aeabi_d2iz>

}
 8001316:	b200      	sxth	r0, r0
 8001318:	bd08      	pop	{r3, pc}
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w
 8001320:	ae147ae1 	.word	0xae147ae1
 8001324:	40106147 	.word	0x40106147

08001328 <_ZN9Convertor16get_pushPositionEv>:

int16_t Convertor::get_pushPosition(void){
 8001328:	b508      	push	{r3, lr}

	return ADC_1_Buffer[1]/ 4.095;
 800132a:	6840      	ldr	r0, [r0, #4]
 800132c:	f7ff f912 	bl	8000554 <__aeabi_ui2d>
 8001330:	a305      	add	r3, pc, #20	; (adr r3, 8001348 <_ZN9Convertor16get_pushPositionEv+0x20>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7ff fab1 	bl	800089c <__aeabi_ddiv>
 800133a:	f7ff fc35 	bl	8000ba8 <__aeabi_d2iz>
}
 800133e:	b200      	sxth	r0, r0
 8001340:	bd08      	pop	{r3, pc}
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	ae147ae1 	.word	0xae147ae1
 800134c:	40106147 	.word	0x40106147

08001350 <_ZN9Convertor14get_LEDCurrentEv>:


int16_t Convertor::get_LEDCurrent(void){
 8001350:	b508      	push	{r3, lr}

	return ADC_2_Buffer[0] / 4.095;
 8001352:	68c0      	ldr	r0, [r0, #12]
 8001354:	f7ff f8fe 	bl	8000554 <__aeabi_ui2d>
 8001358:	a305      	add	r3, pc, #20	; (adr r3, 8001370 <_ZN9Convertor14get_LEDCurrentEv+0x20>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff fa9d 	bl	800089c <__aeabi_ddiv>
 8001362:	f7ff fc21 	bl	8000ba8 <__aeabi_d2iz>
}
 8001366:	b200      	sxth	r0, r0
 8001368:	bd08      	pop	{r3, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	ae147ae1 	.word	0xae147ae1
 8001374:	40106147 	.word	0x40106147

08001378 <_ZN9Convertor16get_fluidCurrentEv>:

int16_t Convertor::get_fluidCurrent(void){
 8001378:	b508      	push	{r3, lr}


	return ADC_2_Buffer[1] / 4.095;
 800137a:	6900      	ldr	r0, [r0, #16]
 800137c:	f7ff f8ea 	bl	8000554 <__aeabi_ui2d>
 8001380:	a305      	add	r3, pc, #20	; (adr r3, 8001398 <_ZN9Convertor16get_fluidCurrentEv+0x20>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff fa89 	bl	800089c <__aeabi_ddiv>
 800138a:	f7ff fc0d 	bl	8000ba8 <__aeabi_d2iz>
}
 800138e:	b200      	sxth	r0, r0
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	f3af 8000 	nop.w
 8001398:	ae147ae1 	.word	0xae147ae1
 800139c:	40106147 	.word	0x40106147

080013a0 <_ZN9Convertor15get_pushCurrentEv>:

int16_t Convertor::get_pushCurrent(void){
 80013a0:	b508      	push	{r3, lr}

	return ADC_5_Buffer[0] / 4.095;
 80013a2:	6940      	ldr	r0, [r0, #20]
 80013a4:	f7ff f8d6 	bl	8000554 <__aeabi_ui2d>
 80013a8:	a305      	add	r3, pc, #20	; (adr r3, 80013c0 <_ZN9Convertor15get_pushCurrentEv+0x20>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff fa75 	bl	800089c <__aeabi_ddiv>
 80013b2:	f7ff fbf9 	bl	8000ba8 <__aeabi_d2iz>

}
 80013b6:	b200      	sxth	r0, r0
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ae147ae1 	.word	0xae147ae1
 80013c4:	40106147 	.word	0x40106147

080013c8 <_ZN9Convertor19get_selectorCurrentEv>:

int16_t Convertor::get_selectorCurrent(void){
 80013c8:	b508      	push	{r3, lr}

	return ADC_5_Buffer[1] / 4.095;
 80013ca:	6980      	ldr	r0, [r0, #24]
 80013cc:	f7ff f8c2 	bl	8000554 <__aeabi_ui2d>
 80013d0:	a305      	add	r3, pc, #20	; (adr r3, 80013e8 <_ZN9Convertor19get_selectorCurrentEv+0x20>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff fa61 	bl	800089c <__aeabi_ddiv>
 80013da:	f7ff fbe5 	bl	8000ba8 <__aeabi_d2iz>
}
 80013de:	b200      	sxth	r0, r0
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
 80013e4:	f3af 8000 	nop.w
 80013e8:	ae147ae1 	.word	0xae147ae1
 80013ec:	40106147 	.word	0x40106147

080013f0 <_ZN9Convertor15get_fluidAmountEv>:

int16_t Convertor::get_fluidAmount(void){

	return _fluidAmount;
}
 80013f0:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
 80013f4:	4770      	bx	lr
	...

080013f8 <_ZN9Convertor13Error_HandlerEv>:
	this->setAltitudeOffset();

}


void Convertor::Error_Handler(void){
 80013f8:	b570      	push	{r4, r5, r6, lr}

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 80013fa:	4e09      	ldr	r6, [pc, #36]	; (8001420 <_ZN9Convertor13Error_HandlerEv+0x28>)
		HAL_Delay(100);
		printf("Problem with convertor class \r\n");
 80013fc:	4d09      	ldr	r5, [pc, #36]	; (8001424 <_ZN9Convertor13Error_HandlerEv+0x2c>)
void Convertor::Error_Handler(void){
 80013fe:	241e      	movs	r4, #30
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8001400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001404:	4630      	mov	r0, r6
 8001406:	f004 fdae 	bl	8005f66 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800140a:	2064      	movs	r0, #100	; 0x64
 800140c:	f003 f862 	bl	80044d4 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8001410:	3c01      	subs	r4, #1
		printf("Problem with convertor class \r\n");
 8001412:	4628      	mov	r0, r5
 8001414:	f00a fdf4 	bl	800c000 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8001418:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800141c:	d1f0      	bne.n	8001400 <_ZN9Convertor13Error_HandlerEv+0x8>

	}

}
 800141e:	bd70      	pop	{r4, r5, r6, pc}
 8001420:	48000800 	.word	0x48000800
 8001424:	0800dfd0 	.word	0x0800dfd0

08001428 <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>:
uint16_t Convertor::getADC_NO_DMA(ADC_HandleTypeDef *hadc, uint32_t Channel){
 8001428:	b530      	push	{r4, r5, lr}
 800142a:	b089      	sub	sp, #36	; 0x24
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800142c:	2300      	movs	r3, #0
uint16_t Convertor::getADC_NO_DMA(ADC_HandleTypeDef *hadc, uint32_t Channel){
 800142e:	460c      	mov	r4, r1
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001430:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001434:	9307      	str	r3, [sp, #28]
	sConfig.Channel = Channel; // ADC_CHANNEL_VOPAMP1; example. switching channels. Better to use built in function ch scanning and dma adc to minmize overhead.
 8001436:	9200      	str	r2, [sp, #0]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5; //important. Less cycles means less consistent and accurate results.
 8001438:	2304      	movs	r3, #4
 800143a:	2206      	movs	r2, #6
 800143c:	e9cd 2301 	strd	r2, r3, [sp, #4]
uint16_t Convertor::getADC_NO_DMA(ADC_HandleTypeDef *hadc, uint32_t Channel){
 8001440:	4605      	mov	r5, r0
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001442:	227f      	movs	r2, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8001444:	4669      	mov	r1, sp
 8001446:	4620      	mov	r0, r4
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001448:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 800144c:	f003 fbb6 	bl	8004bbc <HAL_ADC_ConfigChannel>
 8001450:	b110      	cbz	r0, 8001458 <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm+0x30>
		Error_Handler();
 8001452:	4628      	mov	r0, r5
 8001454:	f7ff ffd0 	bl	80013f8 <_ZN9Convertor13Error_HandlerEv>
	HAL_ADC_Start(hadc); //motor
 8001458:	4620      	mov	r0, r4
 800145a:	f003 fe3f 	bl	80050dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 800145e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001462:	4620      	mov	r0, r4
 8001464:	f003 f976 	bl	8004754 <HAL_ADC_PollForConversion>
	uint16_t Value = HAL_ADC_GetValue(hadc); // - 637 for motor offset
 8001468:	4620      	mov	r0, r4
 800146a:	f003 fa09 	bl	8004880 <HAL_ADC_GetValue>
 800146e:	4605      	mov	r5, r0
	HAL_ADC_Stop(hadc);
 8001470:	4620      	mov	r0, r4
 8001472:	f003 ff71 	bl	8005358 <HAL_ADC_Stop>
}
 8001476:	b2a8      	uxth	r0, r5
 8001478:	b009      	add	sp, #36	; 0x24
 800147a:	bd30      	pop	{r4, r5, pc}

0800147c <_ZN9Convertor6getADCEv>:
void Convertor::getADC(void){
 800147c:	b510      	push	{r4, lr}
 800147e:	4604      	mov	r4, r0
	ADC_1_Buffer[0] = this->getADC_NO_DMA(_components->get_ADC_1(), ADC_CHANNEL_11);
 8001480:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001482:	f002 f913 	bl	80036ac <_ZN10Components9get_ADC_1Ev>
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <_ZN9Convertor6getADCEv+0x60>)
 8001488:	4601      	mov	r1, r0
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff ffcc 	bl	8001428 <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>
 8001490:	6020      	str	r0, [r4, #0]
	ADC_1_Buffer[1] = this->getADC_NO_DMA(_components->get_ADC_1(), ADC_CHANNEL_14);
 8001492:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001494:	f002 f90a 	bl	80036ac <_ZN10Components9get_ADC_1Ev>
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <_ZN9Convertor6getADCEv+0x64>)
 800149a:	4601      	mov	r1, r0
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ffc3 	bl	8001428 <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>
 80014a2:	6060      	str	r0, [r4, #4]
	ADC_1_Buffer[2] = this->getADC_NO_DMA(_components->get_ADC_1(), ADC_CHANNEL_12);
 80014a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80014a6:	f002 f901 	bl	80036ac <_ZN10Components9get_ADC_1Ev>
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <_ZN9Convertor6getADCEv+0x68>)
 80014ac:	4601      	mov	r1, r0
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff ffba 	bl	8001428 <_ZN9Convertor13getADC_NO_DMAEP17ADC_HandleTypeDefm>
 80014b4:	60a0      	str	r0, [r4, #8]
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 80014b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80014b8:	f002 f8fc 	bl	80036b4 <_ZN10Components9get_ADC_2Ev>
 80014bc:	f104 010c 	add.w	r1, r4, #12
 80014c0:	2202      	movs	r2, #2
 80014c2:	f003 fe8d 	bl	80051e0 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 80014c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80014c8:	f002 f8f8 	bl	80036bc <_ZN10Components9get_ADC_5Ev>
 80014cc:	f104 0114 	add.w	r1, r4, #20
 80014d0:	2202      	movs	r2, #2
}
 80014d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 80014d6:	f003 be83 	b.w	80051e0 <HAL_ADC_Start_DMA>
 80014da:	bf00      	nop
 80014dc:	2e300800 	.word	0x2e300800
 80014e0:	3ac04000 	.word	0x3ac04000
 80014e4:	32601000 	.word	0x32601000

080014e8 <_ZN9Convertor7processEv>:
void Convertor::process(void){
 80014e8:	b510      	push	{r4, lr}
 80014ea:	4604      	mov	r4, r0
	this->updateLED();
 80014ec:	f7ff fd66 	bl	8000fbc <_ZN9Convertor9updateLEDEv>
	this->updateSelectorPosition();
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff feb9 	bl	8001268 <_ZN9Convertor22updateSelectorPositionEv>
	this->updatePushMotor();
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fe0d 	bl	8001116 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fe27 	bl	8001150 <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fdd6 	bl	80010b4 <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff ffb7 	bl	800147c <_ZN9Convertor6getADCEv>
	this->updateFluidAmount();
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff fe3b 	bl	800118a <_ZN9Convertor17updateFluidAmountEv>
	this->setAltitudeOffset();
 8001514:	4620      	mov	r0, r4
}
 8001516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	this->setAltitudeOffset();
 800151a:	f7ff be4f 	b.w	80011bc <_ZN9Convertor17setAltitudeOffsetEv>
	...

08001520 <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components>:

//DONT FORGET TO ADD DEFAULT IMPLEMENTATION
HerelinkController::HerelinkController(){};


HerelinkController::HerelinkController(UART_HandleTypeDef *huart_sbus, UART_HandleTypeDef *huart_mavlink, Initializer *init, Components *components)
 8001520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001524:	4604      	mov	r4, r0
 8001526:	460f      	mov	r7, r1
	:_altimeter(&hi2c2), _sbus(huart_sbus), _mavlink(huart_mavlink, &this->_altimeter), _convertor(&this->_sbus, init, components, &this->_altimeter){
 8001528:	f104 0834 	add.w	r8, r4, #52	; 0x34
 800152c:	4910      	ldr	r1, [pc, #64]	; (8001570 <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components+0x50>)
HerelinkController::HerelinkController(UART_HandleTypeDef *huart_sbus, UART_HandleTypeDef *huart_mavlink, Initializer *init, Components *components)
 800152e:	461d      	mov	r5, r3
 8001530:	4616      	mov	r6, r2
	:_altimeter(&hi2c2), _sbus(huart_sbus), _mavlink(huart_mavlink, &this->_altimeter), _convertor(&this->_sbus, init, components, &this->_altimeter){
 8001532:	f000 fefd 	bl	8002330 <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>
 8001536:	4639      	mov	r1, r7
 8001538:	4640      	mov	r0, r8
 800153a:	f000 fccf 	bl	8001edc <_ZN4SBUSC1EP20__UART_HandleTypeDef>
 800153e:	4622      	mov	r2, r4
 8001540:	4631      	mov	r1, r6
 8001542:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8001546:	f000 f973 	bl	8001830 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter>
 800154a:	9b08      	ldr	r3, [sp, #32]
 800154c:	9400      	str	r4, [sp, #0]
 800154e:	462a      	mov	r2, r5
 8001550:	4641      	mov	r1, r8
 8001552:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8001556:	f7ff fcd1 	bl	8000efc <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter>

	_altimeter.init_altimeter();
 800155a:	4620      	mov	r0, r4
 800155c:	f000 ff58 	bl	8002410 <_ZN9Altimeter14init_altimeterEv>
	printf("initialization ok \r\n");
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components+0x54>)
 8001562:	f00a fd4d 	bl	800c000 <puts>
}
 8001566:	4620      	mov	r0, r4
 8001568:	b002      	add	sp, #8
 800156a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800156e:	bf00      	nop
 8001570:	20000ab8 	.word	0x20000ab8
 8001574:	0800dfef 	.word	0x0800dfef

08001578 <_ZN18HerelinkController6updateEv>:
SBUS HerelinkController::getSbus(void){

	return _sbus;
}

void HerelinkController::update(void){
 8001578:	b510      	push	{r4, lr}
 800157a:	4604      	mov	r4, r0

	this->_sbus.update();
 800157c:	3034      	adds	r0, #52	; 0x34
 800157e:	f000 fd3b 	bl	8001ff8 <_ZN4SBUS6updateEv>
	//this->_mavlink.update_RX();
	//this->_mavlink.update_TX();
	//this->_altimeter.read_altitude();
	this->_convertor.process();
 8001582:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0

}
 8001586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	this->_convertor.process();
 800158a:	f7ff bfad 	b.w	80014e8 <_ZN9Convertor7processEv>

0800158e <crc_accumulate>:
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800158e:	880a      	ldrh	r2, [r1, #0]
 8001590:	4050      	eors	r0, r2
        tmp ^= (tmp<<4);
 8001592:	ea80 1000 	eor.w	r0, r0, r0, lsl #4
 8001596:	b2c0      	uxtb	r0, r0
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001598:	0903      	lsrs	r3, r0, #4
 800159a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 800159e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015a2:	ea83 00c0 	eor.w	r0, r3, r0, lsl #3
 80015a6:	8008      	strh	r0, [r1, #0]
}
 80015a8:	4770      	bx	lr

080015aa <mavlink_update_checksum>:
	crc_init(&crcTmp);
	msg->checksum = crcTmp;
}

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 80015aa:	b513      	push	{r0, r1, r4, lr}
 80015ac:	4604      	mov	r4, r0
 80015ae:	4608      	mov	r0, r1
	uint16_t checksum = msg->checksum;
 80015b0:	7823      	ldrb	r3, [r4, #0]
 80015b2:	7862      	ldrb	r2, [r4, #1]
	crc_accumulate(c, &checksum);
 80015b4:	f10d 0106 	add.w	r1, sp, #6
	uint16_t checksum = msg->checksum;
 80015b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015bc:	f8ad 3006 	strh.w	r3, [sp, #6]
	crc_accumulate(c, &checksum);
 80015c0:	f7ff ffe5 	bl	800158e <crc_accumulate>
	msg->checksum = checksum;
 80015c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015c8:	8023      	strh	r3, [r4, #0]
}
 80015ca:	b002      	add	sp, #8
 80015cc:	bd10      	pop	{r4, pc}
	...

080015d0 <mavlink_sha256_update>:
    m->counter[6] += GG;
    m->counter[7] += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 80015d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 80015d4:	6805      	ldr	r5, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 80015d6:	00d3      	lsls	r3, r2, #3
 80015d8:	195b      	adds	r3, r3, r5
 80015da:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
	++m->sz[1];
 80015dc:	bf28      	it	cs
 80015de:	6843      	ldrcs	r3, [r0, #4]
{
 80015e0:	b0df      	sub	sp, #380	; 0x17c
	++m->sz[1];
 80015e2:	bf24      	itt	cs
 80015e4:	3301      	addcs	r3, #1
 80015e6:	6043      	strcs	r3, [r0, #4]
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80015e8:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80015ec:	930c      	str	r3, [sp, #48]	; 0x30
 80015ee:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 80015f2:	4604      	mov	r4, r0
 80015f4:	9100      	str	r1, [sp, #0]
 80015f6:	4616      	mov	r6, r2
    offset = (old_sz / 8) % 64;
 80015f8:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 80015fc:	930d      	str	r3, [sp, #52]	; 0x34
	data[i] = in[i];
 80015fe:	f10d 0978 	add.w	r9, sp, #120	; 0x78
    while(len > 0){
 8001602:	2e00      	cmp	r6, #0
 8001604:	f000 80be 	beq.w	8001784 <mavlink_sha256_update+0x1b4>
	uint32_t l = 64 - offset;
 8001608:	f1c5 0740 	rsb	r7, r5, #64	; 0x40
        if (len < l) {
 800160c:	42b7      	cmp	r7, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800160e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001610:	9900      	ldr	r1, [sp, #0]
 8001612:	bf28      	it	cs
 8001614:	4637      	movcs	r7, r6
 8001616:	1958      	adds	r0, r3, r5
 8001618:	463a      	mov	r2, r7
 800161a:	f009 ff0b 	bl	800b434 <memcpy>
	offset += l;
	p += l;
 800161e:	9b00      	ldr	r3, [sp, #0]
	offset += l;
 8001620:	443d      	add	r5, r7
	p += l;
 8001622:	443b      	add	r3, r7
	len -= l;
	if(offset == 64){
 8001624:	2d40      	cmp	r5, #64	; 0x40
	p += l;
 8001626:	9300      	str	r3, [sp, #0]
	len -= l;
 8001628:	eba6 0607 	sub.w	r6, r6, r7
	if(offset == 64){
 800162c:	d1e9      	bne.n	8001602 <mavlink_sha256_update+0x32>
 800162e:	4623      	mov	r3, r4
 8001630:	aa0e      	add	r2, sp, #56	; 0x38
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
 8001632:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001636:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8001638:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800163c:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 800163e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001642:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001644:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001648:	70d1      	strb	r1, [r2, #3]
	    for (i = 0; i < 16; i++){
 800164a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800164c:	3304      	adds	r3, #4
 800164e:	4299      	cmp	r1, r3
 8001650:	f102 0204 	add.w	r2, r2, #4
 8001654:	d1ed      	bne.n	8001632 <mavlink_sha256_update+0x62>
    AA = m->counter[0];
 8001656:	68a3      	ldr	r3, [r4, #8]
 8001658:	9301      	str	r3, [sp, #4]
    BB = m->counter[1];
 800165a:	68e3      	ldr	r3, [r4, #12]
 800165c:	9302      	str	r3, [sp, #8]
    CC = m->counter[2];
 800165e:	6923      	ldr	r3, [r4, #16]
 8001660:	9303      	str	r3, [sp, #12]
    DD = m->counter[3];
 8001662:	6963      	ldr	r3, [r4, #20]
 8001664:	9304      	str	r3, [sp, #16]
    EE = m->counter[4];
 8001666:	69a3      	ldr	r3, [r4, #24]
 8001668:	9305      	str	r3, [sp, #20]
    FF = m->counter[5];
 800166a:	69e3      	ldr	r3, [r4, #28]
 800166c:	9306      	str	r3, [sp, #24]
    GG = m->counter[6];
 800166e:	6a23      	ldr	r3, [r4, #32]
 8001670:	9307      	str	r3, [sp, #28]
	data[i] = in[i];
 8001672:	af0e      	add	r7, sp, #56	; 0x38
    HH = m->counter[7];
 8001674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001676:	9308      	str	r3, [sp, #32]
	data[i] = in[i];
 8001678:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800167a:	464d      	mov	r5, r9
 800167c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001682:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001686:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800168a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800168e:	464a      	mov	r2, r9
    for (i = 16; i < 64; ++i)
 8001690:	2010      	movs	r0, #16
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001692:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001694:	4617      	mov	r7, r2
 8001696:	ea4f 41f3 	mov.w	r1, r3, ror #19
 800169a:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 800169e:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	683f      	ldr	r7, [r7, #0]
 80016a6:	f852 5f04 	ldr.w	r5, [r2, #4]!
 80016aa:	443b      	add	r3, r7
 80016ac:	4419      	add	r1, r3
 80016ae:	ea4f 43b5 	mov.w	r3, r5, ror #18
 80016b2:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 80016b6:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
    for (i = 16; i < 64; ++i)
 80016ba:	3001      	adds	r0, #1
	    sigma0(data[i-15]) + data[i - 16];
 80016bc:	4419      	add	r1, r3
    for (i = 16; i < 64; ++i)
 80016be:	2840      	cmp	r0, #64	; 0x40
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80016c0:	63d1      	str	r1, [r2, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80016c2:	d1e6      	bne.n	8001692 <mavlink_sha256_update+0xc2>
 80016c4:	4b31      	ldr	r3, [pc, #196]	; (800178c <mavlink_sha256_update+0x1bc>)
 80016c6:	930b      	str	r3, [sp, #44]	; 0x2c
    BB = m->counter[1];
 80016c8:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
    FF = m->counter[5];
 80016cc:	e9dd ec06 	ldrd	lr, ip, [sp, #24]
    DD = m->counter[3];
 80016d0:	9b04      	ldr	r3, [sp, #16]
    AA = m->counter[0];
 80016d2:	9d01      	ldr	r5, [sp, #4]
    HH = m->counter[7];
 80016d4:	f8dd b020 	ldr.w	fp, [sp, #32]
    EE = m->counter[4];
 80016d8:	9805      	ldr	r0, [sp, #20]
    DD = m->counter[3];
 80016da:	930a      	str	r3, [sp, #40]	; 0x28
    for (i = 0; i < 64; i++) {
 80016dc:	f04f 0800 	mov.w	r8, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80016e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80016e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80016e8:	ea4f 23f0 	mov.w	r3, r0, ror #11
 80016ec:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
 80016f0:	ea83 6a70 	eor.w	sl, r3, r0, ror #25
 80016f4:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
 80016f8:	4419      	add	r1, r3
 80016fa:	eb0a 0301 	add.w	r3, sl, r1
 80016fe:	ea2c 0a00 	bic.w	sl, ip, r0
 8001702:	ea00 010e 	and.w	r1, r0, lr
 8001706:	ea8a 0101 	eor.w	r1, sl, r1
 800170a:	4419      	add	r1, r3
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800170c:	ea87 0302 	eor.w	r3, r7, r2
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001710:	4459      	add	r1, fp
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001712:	402b      	ands	r3, r5
 8001714:	ea4f 3a75 	mov.w	sl, r5, ror #13
 8001718:	ea07 0b02 	and.w	fp, r7, r2
 800171c:	ea83 0b0b 	eor.w	fp, r3, fp
 8001720:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
	EE = DD + T1;
 8001724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001726:	920a      	str	r2, [sp, #40]	; 0x28
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001728:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    for (i = 0; i < 64; i++) {
 800172c:	f108 0801 	add.w	r8, r8, #1
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001730:	44da      	add	sl, fp
	EE = DD + T1;
 8001732:	440b      	add	r3, r1
    for (i = 0; i < 64; i++) {
 8001734:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
	EE = DD + T1;
 8001738:	9309      	str	r3, [sp, #36]	; 0x24
	AA = T1 + T2;
 800173a:	4451      	add	r1, sl
    for (i = 0; i < 64; i++) {
 800173c:	46e3      	mov	fp, ip
 800173e:	d11a      	bne.n	8001776 <mavlink_sha256_update+0x1a6>
    m->counter[0] += AA;
 8001740:	9b01      	ldr	r3, [sp, #4]
 8001742:	440b      	add	r3, r1
 8001744:	60a3      	str	r3, [r4, #8]
    m->counter[1] += BB;
 8001746:	9b02      	ldr	r3, [sp, #8]
 8001748:	442b      	add	r3, r5
 800174a:	60e3      	str	r3, [r4, #12]
    m->counter[2] += CC;
 800174c:	9b03      	ldr	r3, [sp, #12]
 800174e:	443b      	add	r3, r7
 8001750:	6123      	str	r3, [r4, #16]
    m->counter[3] += DD;
 8001752:	9b04      	ldr	r3, [sp, #16]
 8001754:	4413      	add	r3, r2
 8001756:	6163      	str	r3, [r4, #20]
    m->counter[4] += EE;
 8001758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800175a:	9b05      	ldr	r3, [sp, #20]
 800175c:	4413      	add	r3, r2
 800175e:	61a3      	str	r3, [r4, #24]
    m->counter[5] += FF;
 8001760:	9b06      	ldr	r3, [sp, #24]
 8001762:	4403      	add	r3, r0
 8001764:	61e3      	str	r3, [r4, #28]
    m->counter[6] += GG;
 8001766:	9b07      	ldr	r3, [sp, #28]
 8001768:	4473      	add	r3, lr
 800176a:	6223      	str	r3, [r4, #32]
    m->counter[7] += HH;
 800176c:	9b08      	ldr	r3, [sp, #32]
 800176e:	4463      	add	r3, ip
 8001770:	6263      	str	r3, [r4, #36]	; 0x24
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8001772:	2500      	movs	r5, #0
 8001774:	e745      	b.n	8001602 <mavlink_sha256_update+0x32>
 8001776:	463a      	mov	r2, r7
 8001778:	46f4      	mov	ip, lr
 800177a:	462f      	mov	r7, r5
 800177c:	4686      	mov	lr, r0
	AA = T1 + T2;
 800177e:	460d      	mov	r5, r1
	EE = DD + T1;
 8001780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001782:	e7ad      	b.n	80016e0 <mavlink_sha256_update+0x110>
	}
    }
}
 8001784:	b05f      	add	sp, #380	; 0x17c
 8001786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800178a:	bf00      	nop
 800178c:	0800e028 	.word	0x0800e028

08001790 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001792:	6806      	ldr	r6, [r0, #0]
 8001794:	08f7      	lsrs	r7, r6, #3
{
 8001796:	b093      	sub	sp, #76	; 0x4c
 8001798:	f1c7 0777 	rsb	r7, r7, #119	; 0x77
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 80017a4:	2380      	movs	r3, #128	; 0x80
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80017a6:	2247      	movs	r2, #71	; 0x47
 80017a8:	2100      	movs	r1, #0
 80017aa:	f10d 0001 	add.w	r0, sp, #1
    *zeros = 0x80;
 80017ae:	f88d 3000 	strb.w	r3, [sp]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80017b2:	f009 fe4d 	bl	800b450 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80017b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ba:	446b      	add	r3, sp
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80017bc:	0a32      	lsrs	r2, r6, #8
 80017be:	f803 2c41 	strb.w	r2, [r3, #-65]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80017c2:	0c32      	lsrs	r2, r6, #16
 80017c4:	f803 2c42 	strb.w	r2, [r3, #-66]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80017c8:	6862      	ldr	r2, [r4, #4]
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80017ca:	f803 6c40 	strb.w	r6, [r3, #-64]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80017ce:	0a11      	lsrs	r1, r2, #8
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80017d0:	f803 2c44 	strb.w	r2, [r3, #-68]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80017d4:	f803 1c45 	strb.w	r1, [r3, #-69]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80017d8:	0e36      	lsrs	r6, r6, #24
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80017da:	0c11      	lsrs	r1, r2, #16
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80017dc:	0e12      	lsrs	r2, r2, #24
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80017de:	f803 6c43 	strb.w	r6, [r3, #-67]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80017e2:	f803 1c46 	strb.w	r1, [r3, #-70]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80017e6:	f803 2c47 	strb.w	r2, [r3, #-71]

    mavlink_sha256_update(m, zeros, dstart + 8);
 80017ea:	4669      	mov	r1, sp
 80017ec:	f107 0209 	add.w	r2, r7, #9
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff feed 	bl	80015d0 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 80017f6:	7ae3      	ldrb	r3, [r4, #11]
 80017f8:	702b      	strb	r3, [r5, #0]
    result[1] = p[2];
 80017fa:	7aa3      	ldrb	r3, [r4, #10]
 80017fc:	706b      	strb	r3, [r5, #1]
    result[2] = p[1];
 80017fe:	7a63      	ldrb	r3, [r4, #9]
 8001800:	70ab      	strb	r3, [r5, #2]
    result[3] = p[0];
 8001802:	7a23      	ldrb	r3, [r4, #8]
 8001804:	70eb      	strb	r3, [r5, #3]
    result[4] = p[7];
 8001806:	7be3      	ldrb	r3, [r4, #15]
 8001808:	712b      	strb	r3, [r5, #4]
    result[5] = p[6];
 800180a:	7ba3      	ldrb	r3, [r4, #14]
 800180c:	716b      	strb	r3, [r5, #5]
}
 800180e:	b013      	add	sp, #76	; 0x4c
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001812 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8001812:	4603      	mov	r3, r0
 8001814:	4608      	mov	r0, r1
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8001816:	78da      	ldrb	r2, [r3, #3]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001818:	2100      	movs	r1, #0
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 800181a:	2a09      	cmp	r2, #9
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 800181c:	6001      	str	r1, [r0, #0]
 800181e:	6041      	str	r1, [r0, #4]
 8001820:	7201      	strb	r1, [r0, #8]
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8001822:	bf28      	it	cs
 8001824:	2209      	movcs	r2, #9
 8001826:	f103 010c 	add.w	r1, r3, #12
 800182a:	f009 be03 	b.w	800b434 <memcpy>
	...

08001830 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, Altimeter* altimeter)
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
: _huart_mavlink(huart), _altimeter(altimeter)  {
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter+0xb8>)
 8001834:	6082      	str	r2, [r0, #8]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	f8a0 329c 	strh.w	r3, [r0, #668]	; 0x29c
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter+0xbc>)
 800183e:	6001      	str	r1, [r0, #0]
 8001840:	2500      	movs	r5, #0
 8001842:	e9c0 35a9 	strd	r3, r5, [r0, #676]	; 0x2a4
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e9c0 33ab 	strd	r3, r3, [r0, #684]	; 0x2ac
 800184e:	f103 531c 	add.w	r3, r3, #654311424	; 0x27000000
 8001852:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001856:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
 800185a:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800185e:	e9c0 33ae 	strd	r3, r3, [r0, #696]	; 0x2b8
 8001862:	e9c0 33b0 	strd	r3, r3, [r0, #704]	; 0x2c0
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter+0xc0>)
 8001868:	7305      	strb	r5, [r0, #12]
 800186a:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 800186e:	e9c0 23b2 	strd	r2, r3, [r0, #712]	; 0x2c8
 8001872:	2301      	movs	r3, #1
MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, Altimeter* altimeter)
 8001874:	4604      	mov	r4, r0
: _huart_mavlink(huart), _altimeter(altimeter)  {
 8001876:	e9c0 35b5 	strd	r3, r5, [r0, #724]	; 0x2d4
 800187a:	f500 7742 	add.w	r7, r0, #776	; 0x308
 800187e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001882:	f8c0 32dc 	str.w	r3, [r0, #732]	; 0x2dc
MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, Altimeter* altimeter)
 8001886:	460e      	mov	r6, r1
: _huart_mavlink(huart), _altimeter(altimeter)  {
 8001888:	81c5      	strh	r5, [r0, #14]
 800188a:	f8c0 52a0 	str.w	r5, [r0, #672]	; 0x2a0
 800188e:	f8c0 52d0 	str.w	r5, [r0, #720]	; 0x2d0
 8001892:	f8a0 52e0 	strh.w	r5, [r0, #736]	; 0x2e0
 8001896:	4629      	mov	r1, r5
 8001898:	f44f 728c 	mov.w	r2, #280	; 0x118
 800189c:	4638      	mov	r0, r7
 800189e:	f009 fdd7 	bl	800b450 <memset>
 80018a2:	4629      	mov	r1, r5
 80018a4:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 80018a8:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 80018ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 80018b0:	f204 402c 	addw	r0, r4, #1068	; 0x42c
 80018b4:	f009 fdcc 	bl	800b450 <memset>
 80018b8:	f504 63aa 	add.w	r3, r4, #1360	; 0x550
 80018bc:	2000      	movs	r0, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	e943 0102 	strd	r0, r1, [r3, #-8]

	  instancePtr = this;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter+0xc4>)
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 80018c6:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
 80018ca:	f8a4 5554 	strh.w	r5, [r4, #1364]	; 0x554
 80018ce:	f884 5556 	strb.w	r5, [r4, #1366]	; 0x556
 80018d2:	f8c4 5558 	str.w	r5, [r4, #1368]	; 0x558
		HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);
 80018d6:	f44f 728c 	mov.w	r2, #280	; 0x118
 80018da:	4639      	mov	r1, r7
 80018dc:	4630      	mov	r0, r6
	  instancePtr = this;
 80018de:	601c      	str	r4, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);
 80018e0:	f007 ff7a 	bl	80097d8 <HAL_UARTEx_ReceiveToIdle_DMA>

		//HAL_UART_Receive_DMA(_huart_mavlink, _receiveBuffer_1, RX_BUFFER_SIZE);


}
 80018e4:	4620      	mov	r0, r4
 80018e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e8:	0800df88 	.word	0x0800df88
 80018ec:	0380000a 	.word	0x0380000a
 80018f0:	450101b4 	.word	0x450101b4
 80018f4:	20000374 	.word	0x20000374

080018f8 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message>:

}


//doesn't work, never receives a proper message 
void MavlinkControl::readFlightTime(mavlink_message_t receivedMessage) {
 80018f8:	b084      	sub	sp, #16
 80018fa:	b530      	push	{r4, r5, lr}
 80018fc:	b08d      	sub	sp, #52	; 0x34
 80018fe:	4604      	mov	r4, r0
 8001900:	a811      	add	r0, sp, #68	; 0x44
 8001902:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if(receivedMessage.msgid == MAVLINK_MSG_ID_SYS_STATUS){
 8001906:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800190a:	2b01      	cmp	r3, #1
 800190c:	d118      	bne.n	8001940 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message+0x48>
		printf("inside read flight time function \r\n");
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message+0x54>)
 8001910:	f00a fb76 	bl	800c000 <puts>
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 8001914:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
 8001918:	2d2b      	cmp	r5, #43	; 0x2b
 800191a:	bf28      	it	cs
 800191c:	252b      	movcs	r5, #43	; 0x2b
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 800191e:	222b      	movs	r2, #43	; 0x2b
 8001920:	2100      	movs	r1, #0
 8001922:	a801      	add	r0, sp, #4
 8001924:	f009 fd94 	bl	800b450 <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 8001928:	462a      	mov	r2, r5
 800192a:	a914      	add	r1, sp, #80	; 0x50
 800192c:	a801      	add	r0, sp, #4
 800192e:	f009 fd81 	bl	800b434 <memcpy>
		mavlink_sys_status_t status;
		mavlink_msg_sys_status_decode(&receivedMessage,&status);
        _flight_time = status.onboard_control_sensors_present;
 8001932:	9801      	ldr	r0, [sp, #4]
 8001934:	f7fe fe0e 	bl	8000554 <__aeabi_ui2d>
 8001938:	f504 64aa 	add.w	r4, r4, #1360	; 0x550
 800193c:	e944 0102 	strd	r0, r1, [r4, #-8]

	}



}
 8001940:	b00d      	add	sp, #52	; 0x34
 8001942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001946:	b004      	add	sp, #16
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	0800e003 	.word	0x0800e003

08001950 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MavlinkControl* instance = MavlinkControl::instancePtr;
 8001954:	4bb0      	ldr	r3, [pc, #704]	; (8001c18 <HAL_UARTEx_RxEventCallback+0x2c8>)
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001956:	4cb1      	ldr	r4, [pc, #708]	; (8001c1c <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001958:	681f      	ldr	r7, [r3, #0]
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800195a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800195e:	f04f 0800 	mov.w	r8, #0
  while (mavlink_parse_char(MAVLINK_COMM_0, instance->_receiveBuffer_1[instance->_bufferIndex++], &instance->_mavlinkReceived, &instance->_status) == MAVLINK_FRAMING_INCOMPLETE);
 8001962:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001966:	4dae      	ldr	r5, [pc, #696]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	443b      	add	r3, r7
 800196c:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 8001970:	f893 6308 	ldrb.w	r6, [r3, #776]	; 0x308
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	7023      	strb	r3, [r4, #0]

	switch (status->parse_state)
 800197a:	78e3      	ldrb	r3, [r4, #3]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d822      	bhi.n	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
 8001980:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001984:	00120012 	.word	0x00120012
 8001988:	00740061 	.word	0x00740061
 800198c:	00890083 	.word	0x00890083
 8001990:	00970090 	.word	0x00970090
 8001994:	00b0009e 	.word	0x00b0009e
 8001998:	00d900c5 	.word	0x00d900c5
 800199c:	012f00e9 	.word	0x012f00e9
 80019a0:	0172012f 	.word	0x0172012f
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80019a4:	70e3      	strb	r3, [r4, #3]
 80019a6:	e7dc      	b.n	8001962 <HAL_UARTEx_RxEventCallback+0x12>
		if (c == MAVLINK_STX)
 80019a8:	2efd      	cmp	r6, #253	; 0xfd
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80019aa:	7b23      	ldrb	r3, [r4, #12]
		if (c == MAVLINK_STX)
 80019ac:	d141      	bne.n	8001a32 <HAL_UARTEx_RxEventCallback+0xe2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80019ae:	2202      	movs	r2, #2
 80019b0:	70e2      	strb	r2, [r4, #3]
			rxmsg->len = 0;
 80019b2:	f885 8003 	strb.w	r8, [r5, #3]
			rxmsg->magic = c;
 80019b6:	70ae      	strb	r6, [r5, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80019b8:	f023 0301 	bic.w	r3, r3, #1
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80019bc:	7323      	strb	r3, [r4, #12]
	msg->checksum = crcTmp;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	702b      	strb	r3, [r5, #0]
 80019c4:	706b      	strb	r3, [r5, #1]
	if (status->msg_received == MAVLINK_FRAMING_OK)
 80019c6:	7822      	ldrb	r2, [r4, #0]
 80019c8:	2a01      	cmp	r2, #1
 80019ca:	d106      	bne.n	80019da <HAL_UARTEx_RxEventCallback+0x8a>
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80019cc:	8923      	ldrh	r3, [r4, #8]
		status->current_rx_seq = rxmsg->seq;
 80019ce:	79a9      	ldrb	r1, [r5, #6]
 80019d0:	7161      	strb	r1, [r4, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80019d2:	b903      	cbnz	r3, 80019d6 <HAL_UARTEx_RxEventCallback+0x86>
 80019d4:	8163      	strh	r3, [r4, #10]
		status->packet_rx_success_count++;
 80019d6:	3301      	adds	r3, #1
 80019d8:	8123      	strh	r3, [r4, #8]
           r_mavlink_status->parse_state = status->parse_state;
 80019da:	78e3      	ldrb	r3, [r4, #3]
 80019dc:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
           r_mavlink_status->packet_idx = status->packet_idx;
 80019e0:	7923      	ldrb	r3, [r4, #4]
 80019e2:	f887 3288 	strb.w	r3, [r7, #648]	; 0x288
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80019e6:	7963      	ldrb	r3, [r4, #5]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80019e8:	78e9      	ldrb	r1, [r5, #3]
 80019ea:	74f9      	strb	r1, [r7, #19]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80019ec:	3301      	adds	r3, #1
 80019ee:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80019f2:	8923      	ldrh	r3, [r4, #8]
 80019f4:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80019f8:	78a3      	ldrb	r3, [r4, #2]
 80019fa:	f8a7 328e 	strh.w	r3, [r7, #654]	; 0x28e
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80019fe:	2a02      	cmp	r2, #2
           r_mavlink_status->flags = status->flags;
 8001a00:	7b23      	ldrb	r3, [r4, #12]
 8001a02:	f887 3290 	strb.w	r3, [r7, #656]	; 0x290
       status->parse_error = 0;
 8001a06:	f884 8002 	strb.w	r8, [r4, #2]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001a0a:	f040 8206 	bne.w	8001e1a <HAL_UARTEx_RxEventCallback+0x4ca>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001a0e:	f8b5 3114 	ldrh.w	r3, [r5, #276]	; 0x114
 8001a12:	823b      	strh	r3, [r7, #16]
    status->parse_error++;
 8001a14:	2301      	movs	r3, #1
	    if (c == MAVLINK_STX)
 8001a16:	2efd      	cmp	r6, #253	; 0xfd
    status->parse_error++;
 8001a18:	70a3      	strb	r3, [r4, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001a1a:	f884 8000 	strb.w	r8, [r4]
	    if (c == MAVLINK_STX)
 8001a1e:	d1c1      	bne.n	80019a4 <HAL_UARTEx_RxEventCallback+0x54>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001a20:	2302      	movs	r3, #2
 8001a22:	70e3      	strb	r3, [r4, #3]
	msg->checksum = crcTmp;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
		    rxmsg->len = 0;
 8001a28:	f885 8003 	strb.w	r8, [r5, #3]
	msg->checksum = crcTmp;
 8001a2c:	702b      	strb	r3, [r5, #0]
 8001a2e:	706b      	strb	r3, [r5, #1]
 8001a30:	e797      	b.n	8001962 <HAL_UARTEx_RxEventCallback+0x12>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001a32:	2efe      	cmp	r6, #254	; 0xfe
 8001a34:	d1c7      	bne.n	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001a36:	2202      	movs	r2, #2
 8001a38:	70e2      	strb	r2, [r4, #3]
			rxmsg->len = 0;
 8001a3a:	f885 8003 	strb.w	r8, [r5, #3]
			rxmsg->magic = c;
 8001a3e:	70ae      	strb	r6, [r5, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	e7ba      	b.n	80019bc <HAL_UARTEx_RxEventCallback+0x6c>
			mavlink_update_checksum(rxmsg, c);
 8001a46:	4876      	ldr	r0, [pc, #472]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
			status->packet_idx = 0;
 8001a48:	f884 8004 	strb.w	r8, [r4, #4]
			mavlink_update_checksum(rxmsg, c);
 8001a4c:	4631      	mov	r1, r6
			rxmsg->len = c;
 8001a4e:	70ee      	strb	r6, [r5, #3]
			mavlink_update_checksum(rxmsg, c);
 8001a50:	f7ff fdab 	bl	80015aa <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001a54:	7b23      	ldrb	r3, [r4, #12]
 8001a56:	07d8      	lsls	r0, r3, #31
 8001a58:	d505      	bpl.n	8001a66 <HAL_UARTEx_RxEventCallback+0x116>
                            rxmsg->incompat_flags = 0;
 8001a5a:	f885 8004 	strb.w	r8, [r5, #4]
                            rxmsg->compat_flags = 0;
 8001a5e:	f885 8005 	strb.w	r8, [r5, #5]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001a62:	2305      	movs	r3, #5
 8001a64:	e000      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	70e3      	strb	r3, [r4, #3]
 8001a6a:	e7ac      	b.n	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001a6c:	f016 0ffe 	tst.w	r6, #254	; 0xfe
		rxmsg->incompat_flags = c;
 8001a70:	712e      	strb	r6, [r5, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001a72:	d004      	beq.n	8001a7e <HAL_UARTEx_RxEventCallback+0x12e>
    status->parse_error++;
 8001a74:	78a3      	ldrb	r3, [r4, #2]
 8001a76:	3301      	adds	r3, #1
 8001a78:	70a3      	strb	r3, [r4, #2]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e7f4      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 8001a7e:	4868      	ldr	r0, [pc, #416]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001a80:	4631      	mov	r1, r6
 8001a82:	f7ff fd92 	bl	80015aa <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001a86:	2304      	movs	r3, #4
 8001a88:	e7ee      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 8001a8a:	4865      	ldr	r0, [pc, #404]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->compat_flags = c;
 8001a8c:	716e      	strb	r6, [r5, #5]
		mavlink_update_checksum(rxmsg, c);
 8001a8e:	4631      	mov	r1, r6
 8001a90:	f7ff fd8b 	bl	80015aa <mavlink_update_checksum>
 8001a94:	e7e5      	b.n	8001a62 <HAL_UARTEx_RxEventCallback+0x112>
		mavlink_update_checksum(rxmsg, c);
 8001a96:	4862      	ldr	r0, [pc, #392]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->seq = c;
 8001a98:	71ae      	strb	r6, [r5, #6]
		mavlink_update_checksum(rxmsg, c);
 8001a9a:	4631      	mov	r1, r6
 8001a9c:	f7ff fd85 	bl	80015aa <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	e7e1      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 8001aa4:	485e      	ldr	r0, [pc, #376]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->sysid = c;
 8001aa6:	71ee      	strb	r6, [r5, #7]
		mavlink_update_checksum(rxmsg, c);
 8001aa8:	4631      	mov	r1, r6
 8001aaa:	f7ff fd7e 	bl	80015aa <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e7da      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		mavlink_update_checksum(rxmsg, c);
 8001ab2:	485b      	ldr	r0, [pc, #364]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->compid = c;
 8001ab4:	722e      	strb	r6, [r5, #8]
		mavlink_update_checksum(rxmsg, c);
 8001ab6:	4631      	mov	r1, r6
 8001ab8:	f7ff fd77 	bl	80015aa <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001abc:	2308      	movs	r3, #8
 8001abe:	e7d3      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		rxmsg->msgid = c;
 8001ac0:	2300      	movs	r3, #0
		mavlink_update_checksum(rxmsg, c);
 8001ac2:	4631      	mov	r1, r6
 8001ac4:	4856      	ldr	r0, [pc, #344]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->msgid = c;
 8001ac6:	72ab      	strb	r3, [r5, #10]
 8001ac8:	72eb      	strb	r3, [r5, #11]
 8001aca:	726e      	strb	r6, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 8001acc:	f7ff fd6d 	bl	80015aa <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001ad0:	7b23      	ldrb	r3, [r4, #12]
 8001ad2:	07d9      	lsls	r1, r3, #31
 8001ad4:	d504      	bpl.n	8001ae0 <HAL_UARTEx_RxEventCallback+0x190>
			if(rxmsg->len > 0) {
 8001ad6:	78eb      	ldrb	r3, [r5, #3]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03a      	beq.n	8001b52 <HAL_UARTEx_RxEventCallback+0x202>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001adc:	230b      	movs	r3, #11
 8001ade:	e7c3      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001ae0:	2309      	movs	r3, #9
 8001ae2:	e7c1      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		rxmsg->msgid |= c<<8;
 8001ae4:	7aaa      	ldrb	r2, [r5, #10]
 8001ae6:	7a6b      	ldrb	r3, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 8001ae8:	484d      	ldr	r0, [pc, #308]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->msgid |= c<<8;
 8001aea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001aee:	7aea      	ldrb	r2, [r5, #11]
 8001af0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001af4:	ea43 2206 	orr.w	r2, r3, r6, lsl #8
 8001af8:	726b      	strb	r3, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 8001afa:	4631      	mov	r1, r6
		rxmsg->msgid |= c<<8;
 8001afc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001b00:	0c12      	lsrs	r2, r2, #16
 8001b02:	72ab      	strb	r3, [r5, #10]
 8001b04:	72ea      	strb	r2, [r5, #11]
		mavlink_update_checksum(rxmsg, c);
 8001b06:	f7ff fd50 	bl	80015aa <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	e7ac      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001b0e:	7aaa      	ldrb	r2, [r5, #10]
 8001b10:	7a6b      	ldrb	r3, [r5, #9]
		mavlink_update_checksum(rxmsg, c);
 8001b12:	4843      	ldr	r0, [pc, #268]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001b14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b18:	7aea      	ldrb	r2, [r5, #11]
 8001b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b1e:	ea43 4206 	orr.w	r2, r3, r6, lsl #16
 8001b22:	726b      	strb	r3, [r5, #9]
 8001b24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001b28:	72ab      	strb	r3, [r5, #10]
		mavlink_update_checksum(rxmsg, c);
 8001b2a:	4631      	mov	r1, r6
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001b2c:	0c13      	lsrs	r3, r2, #16
 8001b2e:	72eb      	strb	r3, [r5, #11]
		mavlink_update_checksum(rxmsg, c);
 8001b30:	f7ff fd3b 	bl	80015aa <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001b34:	e7cf      	b.n	8001ad6 <HAL_UARTEx_RxEventCallback+0x186>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001b36:	7923      	ldrb	r3, [r4, #4]
		mavlink_update_checksum(rxmsg, c);
 8001b38:	4839      	ldr	r0, [pc, #228]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	442b      	add	r3, r5
 8001b3e:	7122      	strb	r2, [r4, #4]
 8001b40:	731e      	strb	r6, [r3, #12]
		mavlink_update_checksum(rxmsg, c);
 8001b42:	4631      	mov	r1, r6
 8001b44:	f7ff fd31 	bl	80015aa <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001b48:	7922      	ldrb	r2, [r4, #4]
 8001b4a:	78eb      	ldrb	r3, [r5, #3]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f47f af3a 	bne.w	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001b52:	230c      	movs	r3, #12
 8001b54:	e788      	b.n	8001a68 <HAL_UARTEx_RxEventCallback+0x118>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001b56:	7aab      	ldrb	r3, [r5, #10]
 8001b58:	7a69      	ldrb	r1, [r5, #9]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001b5a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8001c28 <HAL_UARTEx_RxEventCallback+0x2d8>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001b5e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8001b62:	7aeb      	ldrb	r3, [r5, #11]
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001b64:	20da      	movs	r0, #218	; 0xda
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001b66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001b6a:	f04f 0e0c 	mov.w	lr, #12
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001b6e:	2300      	movs	r3, #0
            uint32_t mid = (low+1+high)/2;
 8001b70:	181a      	adds	r2, r3, r0
 8001b72:	3201      	adds	r2, #1
 8001b74:	0852      	lsrs	r2, r2, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001b76:	fb0e f902 	mul.w	r9, lr, r2
 8001b7a:	f85c 9009 	ldr.w	r9, [ip, r9]
 8001b7e:	4549      	cmp	r1, r9
 8001b80:	d22c      	bcs.n	8001bdc <HAL_UARTEx_RxEventCallback+0x28c>
                high = mid-1;
 8001b82:	1e50      	subs	r0, r2, #1
        while (low < high) {
 8001b84:	4298      	cmp	r0, r3
 8001b86:	d8f3      	bhi.n	8001b70 <HAL_UARTEx_RxEventCallback+0x220>
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4353      	muls	r3, r2
 8001b8c:	eb0c 0903 	add.w	r9, ip, r3
 8001b90:	f85c 3003 	ldr.w	r3, [ip, r3]
		mavlink_update_checksum(rxmsg, crc_extra);
 8001b94:	4822      	ldr	r0, [pc, #136]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x2d0>)
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001b96:	4299      	cmp	r1, r3
            return NULL;
 8001b98:	bf16      	itet	ne
 8001b9a:	f04f 0900 	movne.w	r9, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 8001b9e:	f899 1004 	ldrbeq.w	r1, [r9, #4]
 8001ba2:	4649      	movne	r1, r9
		mavlink_update_checksum(rxmsg, crc_extra);
 8001ba4:	f7ff fd01 	bl	80015aa <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8001ba8:	882b      	ldrh	r3, [r5, #0]
                rxmsg->ck[0] = c;
 8001baa:	f885 6114 	strb.w	r6, [r5, #276]	; 0x114
		if (c != (rxmsg->checksum & 0xFF)) {
 8001bae:	b2db      	uxtb	r3, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001bb0:	429e      	cmp	r6, r3
 8001bb2:	bf14      	ite	ne
 8001bb4:	230e      	movne	r3, #14
 8001bb6:	230d      	moveq	r3, #13
 8001bb8:	70e3      	strb	r3, [r4, #3]
                if (e && status->packet_idx < e->max_msg_len) {
 8001bba:	f1b9 0f00 	cmp.w	r9, #0
 8001bbe:	f43f af02 	beq.w	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
 8001bc2:	7923      	ldrb	r3, [r4, #4]
 8001bc4:	f899 2006 	ldrb.w	r2, [r9, #6]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f67f aefc 	bls.w	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001bce:	4815      	ldr	r0, [pc, #84]	; (8001c24 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8001bd0:	1ad2      	subs	r2, r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4418      	add	r0, r3
 8001bd6:	f009 fc3b 	bl	800b450 <memset>
 8001bda:	e6f4      	b.n	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
                low = mid;
 8001bdc:	4613      	mov	r3, r2
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001bde:	d9d3      	bls.n	8001b88 <HAL_UARTEx_RxEventCallback+0x238>
 8001be0:	e7d0      	b.n	8001b84 <HAL_UARTEx_RxEventCallback+0x234>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001be2:	2b0e      	cmp	r3, #14
 8001be4:	d016      	beq.n	8001c14 <HAL_UARTEx_RxEventCallback+0x2c4>
 8001be6:	882b      	ldrh	r3, [r5, #0]
			status->msg_received = MAVLINK_FRAMING_OK;
 8001be8:	ebb6 2f13 	cmp.w	r6, r3, lsr #8
 8001bec:	bf14      	ite	ne
 8001bee:	2302      	movne	r3, #2
 8001bf0:	2301      	moveq	r3, #1
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001bf2:	792a      	ldrb	r2, [r5, #4]
 8001bf4:	7023      	strb	r3, [r4, #0]
 8001bf6:	07d2      	lsls	r2, r2, #31
		rxmsg->ck[1] = c;
 8001bf8:	f885 6115 	strb.w	r6, [r5, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001bfc:	d516      	bpl.n	8001c2c <HAL_UARTEx_RxEventCallback+0x2dc>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8001bfe:	220f      	movs	r2, #15
 8001c00:	70e2      	strb	r2, [r4, #3]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001c02:	2b02      	cmp	r3, #2
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001c04:	f04f 020d 	mov.w	r2, #13
 8001c08:	7362      	strb	r2, [r4, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001c0a:	f43f aedc 	beq.w	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001c0e:	f884 8000 	strb.w	r8, [r4]
 8001c12:	e6d8      	b.n	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8001c14:	2302      	movs	r3, #2
 8001c16:	e7ec      	b.n	8001bf2 <HAL_UARTEx_RxEventCallback+0x2a2>
 8001c18:	20000374 	.word	0x20000374
 8001c1c:	20000804 	.word	0x20000804
 8001c20:	20000378 	.word	0x20000378
 8001c24:	20000384 	.word	0x20000384
 8001c28:	0800e128 	.word	0x0800e128
			if (status->signing &&
 8001c2c:	6923      	ldr	r3, [r4, #16]
 8001c2e:	b12b      	cbz	r3, 8001c3c <HAL_UARTEx_RxEventCallback+0x2ec>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (status->signing &&
 8001c32:	b96a      	cbnz	r2, 8001c50 <HAL_UARTEx_RxEventCallback+0x300>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001c34:	7823      	ldrb	r3, [r4, #0]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	f040 80ec 	bne.w	8001e14 <HAL_UARTEx_RxEventCallback+0x4c4>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001c3c:	2301      	movs	r3, #1
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001c3e:	4998      	ldr	r1, [pc, #608]	; (8001ea0 <HAL_UARTEx_RxEventCallback+0x550>)
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001c40:	70e3      	strb	r3, [r4, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001c42:	f240 1223 	movw	r2, #291	; 0x123
 8001c46:	f107 0010 	add.w	r0, r7, #16
 8001c4a:	f009 fbf3 	bl	800b434 <memcpy>
 8001c4e:	e6ba      	b.n	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001c50:	7aa9      	ldrb	r1, [r5, #10]
 8001c52:	7a6b      	ldrb	r3, [r5, #9]
 8001c54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c58:	7ae9      	ldrb	r1, [r5, #11]
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001c60:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d1ea      	bne.n	8001c3c <HAL_UARTEx_RxEventCallback+0x2ec>
 8001c66:	e7e5      	b.n	8001c34 <HAL_UARTEx_RxEventCallback+0x2e4>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001c68:	7b63      	ldrb	r3, [r4, #13]
 8001c6a:	1aea      	subs	r2, r5, r3
		status->signature_wait--;
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001c70:	f882 6123 	strb.w	r6, [r2, #291]	; 0x123
		status->signature_wait--;
 8001c74:	7363      	strb	r3, [r4, #13]
		if (status->signature_wait == 0) {
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f aea5 	bne.w	80019c6 <HAL_UARTEx_RxEventCallback+0x76>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001c7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
	if (signing == NULL) {
 8001c80:	f1ba 0f00 	cmp.w	sl, #0
 8001c84:	f000 809f 	beq.w	8001dc6 <HAL_UARTEx_RxEventCallback+0x476>
    m->sz[1] = 0;
 8001c88:	e9cd 334f 	strd	r3, r3, [sp, #316]	; 0x13c
    m->counter[1] = 0xbb67ae85;
 8001c8c:	4a85      	ldr	r2, [pc, #532]	; (8001ea4 <HAL_UARTEx_RxEventCallback+0x554>)
 8001c8e:	4b86      	ldr	r3, [pc, #536]	; (8001ea8 <HAL_UARTEx_RxEventCallback+0x558>)
    m->counter[3] = 0xa54ff53a;
 8001c90:	4986      	ldr	r1, [pc, #536]	; (8001eac <HAL_UARTEx_RxEventCallback+0x55c>)
    m->counter[5] = 0x9b05688c;
 8001c92:	4887      	ldr	r0, [pc, #540]	; (8001eb0 <HAL_UARTEx_RxEventCallback+0x560>)
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001c94:	f8d4 9014 	ldr.w	r9, [r4, #20]
    m->counter[1] = 0xbb67ae85;
 8001c98:	e9cd 2351 	strd	r2, r3, [sp, #324]	; 0x144
    m->counter[3] = 0xa54ff53a;
 8001c9c:	4b85      	ldr	r3, [pc, #532]	; (8001eb4 <HAL_UARTEx_RxEventCallback+0x564>)
 8001c9e:	e9cd 1353 	strd	r1, r3, [sp, #332]	; 0x14c
    m->counter[5] = 0x9b05688c;
 8001ca2:	4b85      	ldr	r3, [pc, #532]	; (8001eb8 <HAL_UARTEx_RxEventCallback+0x568>)
 8001ca4:	e9cd 0355 	strd	r0, r3, [sp, #340]	; 0x154
    m->counter[6] = 0x1f83d9ab;
 8001ca8:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <HAL_UARTEx_RxEventCallback+0x56c>)
 8001caa:	9357      	str	r3, [sp, #348]	; 0x15c
    m->counter[7] = 0x5be0cd19;
 8001cac:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8001cb0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001cb4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f10a 0110 	add.w	r1, sl, #16
 8001cbe:	a84f      	add	r0, sp, #316	; 0x13c
 8001cc0:	9358      	str	r3, [sp, #352]	; 0x160
 8001cc2:	f7ff fc85 	bl	80015d0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001cc6:	497e      	ldr	r1, [pc, #504]	; (8001ec0 <HAL_UARTEx_RxEventCallback+0x570>)
 8001cc8:	220a      	movs	r2, #10
 8001cca:	a84f      	add	r0, sp, #316	; 0x13c
 8001ccc:	f7ff fc80 	bl	80015d0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001cd0:	78ea      	ldrb	r2, [r5, #3]
 8001cd2:	497c      	ldr	r1, [pc, #496]	; (8001ec4 <HAL_UARTEx_RxEventCallback+0x574>)
 8001cd4:	a84f      	add	r0, sp, #316	; 0x13c
 8001cd6:	f7ff fc7b 	bl	80015d0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001cda:	497b      	ldr	r1, [pc, #492]	; (8001ec8 <HAL_UARTEx_RxEventCallback+0x578>)
 8001cdc:	2202      	movs	r2, #2
 8001cde:	a84f      	add	r0, sp, #316	; 0x13c
 8001ce0:	f7ff fc76 	bl	80015d0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4979      	ldr	r1, [pc, #484]	; (8001ecc <HAL_UARTEx_RxEventCallback+0x57c>)
 8001ce8:	a84f      	add	r0, sp, #316	; 0x13c
 8001cea:	f7ff fc71 	bl	80015d0 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001cee:	a948      	add	r1, sp, #288	; 0x120
 8001cf0:	a84f      	add	r0, sp, #316	; 0x13c
 8001cf2:	f7ff fd4d 	bl	8001790 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001cf6:	4976      	ldr	r1, [pc, #472]	; (8001ed0 <HAL_UARTEx_RxEventCallback+0x580>)
 8001cf8:	2206      	movs	r2, #6
 8001cfa:	a848      	add	r0, sp, #288	; 0x120
 8001cfc:	f009 fb8a 	bl	800b414 <memcmp>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d178      	bne.n	8001df8 <HAL_UARTEx_RxEventCallback+0x4a8>
	memcpy(tstamp.t8, psig+1, 6);
 8001d06:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8001ed8 <HAL_UARTEx_RxEventCallback+0x588>
	uint8_t link_id = psig[0];
 8001d0a:	f895 b116 	ldrb.w	fp, [r5, #278]	; 0x116
	memcpy(tstamp.t8, psig+1, 6);
 8001d0e:	f8bc 2004 	ldrh.w	r2, [ip, #4]
	tstamp.t64 = 0;
 8001d12:	2000      	movs	r0, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	e9cd 014a 	strd	r0, r1, [sp, #296]	; 0x128
	memcpy(tstamp.t8, psig+1, 6);
 8001d1a:	f8dc 0000 	ldr.w	r0, [ip]
 8001d1e:	904a      	str	r0, [sp, #296]	; 0x128
 8001d20:	f8ad 212c 	strh.w	r2, [sp, #300]	; 0x12c
	if (signing_streams == NULL) {
 8001d24:	f1b9 0f00 	cmp.w	r9, #0
 8001d28:	d066      	beq.n	8001df8 <HAL_UARTEx_RxEventCallback+0x4a8>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001d2a:	79ea      	ldrb	r2, [r5, #7]
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001d2c:	f8b9 e000 	ldrh.w	lr, [r9]
		    msg->compid == signing_streams->stream[i].compid &&
 8001d30:	7a28      	ldrb	r0, [r5, #8]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001d32:	9247      	str	r2, [sp, #284]	; 0x11c
		    msg->compid == signing_streams->stream[i].compid &&
 8001d34:	9346      	str	r3, [sp, #280]	; 0x118
 8001d36:	464a      	mov	r2, r9
 8001d38:	f8bd 1118 	ldrh.w	r1, [sp, #280]	; 0x118
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001d3c:	458e      	cmp	lr, r1
 8001d3e:	d90e      	bls.n	8001d5e <HAL_UARTEx_RxEventCallback+0x40e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001d40:	78d1      	ldrb	r1, [r2, #3]
 8001d42:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001d44:	4299      	cmp	r1, r3
 8001d46:	d105      	bne.n	8001d54 <HAL_UARTEx_RxEventCallback+0x404>
 8001d48:	7911      	ldrb	r1, [r2, #4]
 8001d4a:	4281      	cmp	r1, r0
 8001d4c:	d102      	bne.n	8001d54 <HAL_UARTEx_RxEventCallback+0x404>
		    msg->compid == signing_streams->stream[i].compid &&
 8001d4e:	7891      	ldrb	r1, [r2, #2]
 8001d50:	4559      	cmp	r1, fp
 8001d52:	d03a      	beq.n	8001dca <HAL_UARTEx_RxEventCallback+0x47a>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001d54:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8001d56:	3301      	adds	r3, #1
 8001d58:	9346      	str	r3, [sp, #280]	; 0x118
 8001d5a:	3209      	adds	r2, #9
 8001d5c:	e7ec      	b.n	8001d38 <HAL_UARTEx_RxEventCallback+0x3e8>
	if (i == signing_streams->num_signing_streams) {
 8001d5e:	d134      	bne.n	8001dca <HAL_UARTEx_RxEventCallback+0x47a>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001d60:	f1be 0f0f 	cmp.w	lr, #15
 8001d64:	d848      	bhi.n	8001df8 <HAL_UARTEx_RxEventCallback+0x4a8>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001d66:	e9dd 214a 	ldrd	r2, r1, [sp, #296]	; 0x128
 8001d6a:	485a      	ldr	r0, [pc, #360]	; (8001ed4 <HAL_UARTEx_RxEventCallback+0x584>)
 8001d6c:	1810      	adds	r0, r2, r0
 8001d6e:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8001d72:	f141 0100 	adc.w	r1, r1, #0
 8001d76:	4298      	cmp	r0, r3
 8001d78:	eb71 0302 	sbcs.w	r3, r1, r2
 8001d7c:	d33c      	bcc.n	8001df8 <HAL_UARTEx_RxEventCallback+0x4a8>
		signing_streams->stream[i].sysid = msg->sysid;
 8001d7e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8001d80:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001d84:	444a      	add	r2, r9
 8001d86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001d88:	70d3      	strb	r3, [r2, #3]
		signing_streams->stream[i].compid = msg->compid;
 8001d8a:	7a29      	ldrb	r1, [r5, #8]
 8001d8c:	7111      	strb	r1, [r2, #4]
		signing_streams->num_signing_streams++;
 8001d8e:	f10e 0e01 	add.w	lr, lr, #1
		signing_streams->stream[i].link_id = link_id;
 8001d92:	f882 b002 	strb.w	fp, [r2, #2]
		signing_streams->num_signing_streams++;
 8001d96:	f8a9 e000 	strh.w	lr, [r9]
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001d9a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8001d9c:	f8dc 1000 	ldr.w	r1, [ip]
 8001da0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001da4:	3305      	adds	r3, #5
 8001da6:	eb09 0203 	add.w	r2, r9, r3
 8001daa:	f849 1003 	str.w	r1, [r9, r3]
 8001dae:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 8001db2:	8093      	strh	r3, [r2, #4]
	if (tstamp.t64 > signing->timestamp) {
 8001db4:	e9da 1202 	ldrd	r1, r2, [sl, #8]
 8001db8:	e9dd 034a 	ldrd	r0, r3, [sp, #296]	; 0x128
 8001dbc:	4281      	cmp	r1, r0
 8001dbe:	419a      	sbcs	r2, r3
 8001dc0:	d201      	bcs.n	8001dc6 <HAL_UARTEx_RxEventCallback+0x476>
		signing->timestamp = tstamp.t64;
 8001dc2:	e9ca 0302 	strd	r0, r3, [sl, #8]
				status->msg_received = MAVLINK_FRAMING_OK;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e025      	b.n	8001e16 <HAL_UARTEx_RxEventCallback+0x4c6>
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001dca:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8001dcc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001dd0:	3205      	adds	r2, #5
		last_tstamp.t64 = 0;
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	e9cd 014c 	strd	r0, r1, [sp, #304]	; 0x130
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001dda:	eb09 0102 	add.w	r1, r9, r2
 8001dde:	f859 0002 	ldr.w	r0, [r9, r2]
 8001de2:	888a      	ldrh	r2, [r1, #4]
 8001de4:	f8ad 2134 	strh.w	r2, [sp, #308]	; 0x134
		if (tstamp.t64 <= last_tstamp.t64) {
 8001de8:	e9dd 314a 	ldrd	r3, r1, [sp, #296]	; 0x128
 8001dec:	9a4d      	ldr	r2, [sp, #308]	; 0x134
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001dee:	904c      	str	r0, [sp, #304]	; 0x130
		if (tstamp.t64 <= last_tstamp.t64) {
 8001df0:	4298      	cmp	r0, r3
 8001df2:	eb72 0301 	sbcs.w	r3, r2, r1
 8001df6:	d3d0      	bcc.n	8001d9a <HAL_UARTEx_RxEventCallback+0x44a>
			   	(status->signing->accept_unsigned_callback &&
 8001df8:	6923      	ldr	r3, [r4, #16]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			if (!sig_ok &&
 8001dfc:	b152      	cbz	r2, 8001e14 <HAL_UARTEx_RxEventCallback+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001dfe:	7aa9      	ldrb	r1, [r5, #10]
 8001e00:	7a6b      	ldrb	r3, [r5, #9]
 8001e02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e06:	7ae9      	ldrb	r1, [r5, #11]
 8001e08:	4620      	mov	r0, r4
 8001e0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001e0e:	4790      	blx	r2
			   	(status->signing->accept_unsigned_callback &&
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d1d8      	bne.n	8001dc6 <HAL_UARTEx_RxEventCallback+0x476>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001e14:	2303      	movs	r3, #3
 8001e16:	7023      	strb	r3, [r4, #0]
 8001e18:	e710      	b.n	8001c3c <HAL_UARTEx_RxEventCallback+0x2ec>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001e1a:	2a03      	cmp	r2, #3
 8001e1c:	f43f adfa 	beq.w	8001a14 <HAL_UARTEx_RxEventCallback+0xc4>
 8001e20:	2a00      	cmp	r2, #0
 8001e22:	f43f ad9e 	beq.w	8001962 <HAL_UARTEx_RxEventCallback+0x12>
  instance->_mavlink_received_header.magic = instance->_mavlinkReceived.magic;
 8001e26:	7cbb      	ldrb	r3, [r7, #18]
 8001e28:	f887 3550 	strb.w	r3, [r7, #1360]	; 0x550
  instance->_mavlink_received_header.compid = instance->_mavlinkReceived.compid;
 8001e2c:	7e3b      	ldrb	r3, [r7, #24]
 8001e2e:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
  instance->_mavlink_received_header.msgid = instance->_mavlinkReceived.msgid;
 8001e32:	69bb      	ldr	r3, [r7, #24]
  instance->_mavlink_received_header.incompat_flags = instance->_mavlinkReceived.incompat_flags;
 8001e34:	8aba      	ldrh	r2, [r7, #20]
 8001e36:	f8a7 2552 	strh.w	r2, [r7, #1362]	; 0x552
  instance->_mavlink_received_header.msgid = instance->_mavlinkReceived.msgid;
 8001e3a:	f3c3 2317 	ubfx	r3, r3, #8, #24
  instance->_mavlink_received_header.seq = instance->_mavlinkReceived.seq;
 8001e3e:	8afa      	ldrh	r2, [r7, #22]
 8001e40:	f8a7 2554 	strh.w	r2, [r7, #1364]	; 0x554
  instance->_mavlink_received_header.msgid = instance->_mavlinkReceived.msgid;
 8001e44:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  instance->_mavlink_received_header.len = instance->_mavlinkReceived.len;
 8001e48:	f887 1551 	strb.w	r1, [r7, #1361]	; 0x551
  instance->readFlightTime(instance->_mavlinkReceived);
 8001e4c:	f240 1217 	movw	r2, #279	; 0x117
 8001e50:	f107 011c 	add.w	r1, r7, #28
 8001e54:	f107 0410 	add.w	r4, r7, #16
 8001e58:	4668      	mov	r0, sp
 8001e5a:	f009 faeb 	bl	800b434 <memcpy>
 8001e5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001e62:	4638      	mov	r0, r7
 8001e64:	f7ff fd48 	bl	80018f8 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message>
  instance->decodeHeartbeat(instance->_mavlinkReceived);
 8001e68:	f240 1223 	movw	r2, #291	; 0x123
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	a84f      	add	r0, sp, #316	; 0x13c
 8001e70:	f009 fae0 	bl	800b434 <memcpy>
	if(receivedMessage.msgid == MAVLINK_MSG_ID_HEARTBEAT){
 8001e74:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	d104      	bne.n	8001e84 <HAL_UARTEx_RxEventCallback+0x534>
		mavlink_msg_heartbeat_decode(&receivedMessage, &_received_heartbeat);
 8001e7a:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 8001e7e:	a84f      	add	r0, sp, #316	; 0x13c
 8001e80:	f7ff fcc7 	bl	8001812 <mavlink_msg_heartbeat_decode>
  HAL_UART_Receive_DMA(instance->_huart_mavlink, instance->_receiveBuffer_1, instance->MAVLINK_BUFFER_SIZE);
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001e8a:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8001e8e:	f007 fbf1 	bl	8009674 <HAL_UART_Receive_DMA>
  instance->_bufferIndex = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
}
 8001e98:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8001e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea0:	20000378 	.word	0x20000378
 8001ea4:	6a09e667 	.word	0x6a09e667
 8001ea8:	bb67ae85 	.word	0xbb67ae85
 8001eac:	3c6ef372 	.word	0x3c6ef372
 8001eb0:	510e527f 	.word	0x510e527f
 8001eb4:	a54ff53a 	.word	0xa54ff53a
 8001eb8:	9b05688c 	.word	0x9b05688c
 8001ebc:	1f83d9ab 	.word	0x1f83d9ab
 8001ec0:	2000037a 	.word	0x2000037a
 8001ec4:	20000384 	.word	0x20000384
 8001ec8:	2000048c 	.word	0x2000048c
 8001ecc:	2000048e 	.word	0x2000048e
 8001ed0:	20000495 	.word	0x20000495
 8001ed4:	005b8d80 	.word	0x005b8d80
 8001ed8:	2000048f 	.word	0x2000048f

08001edc <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	2219      	movs	r2, #25
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	460d      	mov	r5, r1
 8001ee4:	3004      	adds	r0, #4
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	f009 fab2 	bl	800b450 <memset>
 8001eec:	2222      	movs	r2, #34	; 0x22
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f104 001e 	add.w	r0, r4, #30
 8001ef4:	f009 faac 	bl	800b450 <memset>

	this->_huart_sbus = huart_sbus;
 8001ef8:	6025      	str	r5, [r4, #0]





}
 8001efa:	4620      	mov	r0, r4
 8001efc:	bd38      	pop	{r3, r4, r5, pc}

08001efe <_ZN4SBUS8readSBUSEv>:

		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
		uint16_t LSB = _sbus_buffer[2] << 8;
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8001efe:	f8b0 3005 	ldrh.w	r3, [r0, #5]
		uint16_t LSB = _sbus_buffer[2] << 8;
 8001f02:	7981      	ldrb	r1, [r0, #6]
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 8001f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f08:	83c3      	strh	r3, [r0, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
		LSB = _sbus_buffer[3] << 5;
 8001f0a:	79c3      	ldrb	r3, [r0, #7]
 8001f0c:	015a      	lsls	r2, r3, #5
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8001f0e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8001f12:	f3c2 020a 	ubfx	r2, r2, #0, #11

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
		LSB = _sbus_buffer[4] << 2;
 8001f16:	7a01      	ldrb	r1, [r0, #8]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 8001f18:	8402      	strh	r2, [r0, #32]
		MSB = _sbus_buffer[3] >> 6;
 8001f1a:	099b      	lsrs	r3, r3, #6
		thirdByte = _sbus_buffer[5] << 10;
 8001f1c:	7a42      	ldrb	r2, [r0, #9]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 8001f1e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8001f22:	ea43 2382 	orr.w	r3, r3, r2, lsl #10

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
		LSB = _sbus_buffer[6] << 7;
 8001f26:	7a81      	ldrb	r1, [r0, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 8001f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2c:	8443      	strh	r3, [r0, #34]	; 0x22
		LSB = _sbus_buffer[6] << 7;
 8001f2e:	01cb      	lsls	r3, r1, #7
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8001f30:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8001f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f38:	8483      	strh	r3, [r0, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
		LSB = _sbus_buffer[7] << 4;
 8001f3a:	7ac3      	ldrb	r3, [r0, #11]
 8001f3c:	011a      	lsls	r2, r3, #4
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 8001f3e:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 8001f42:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f46:	84c2      	strh	r2, [r0, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
		LSB = _sbus_buffer[8] << 1;
 8001f48:	7b02      	ldrb	r2, [r0, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8001f4a:	7b41      	ldrb	r1, [r0, #13]
		MSB = _sbus_buffer[7] >> 7;
 8001f4c:	09db      	lsrs	r3, r3, #7
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 8001f4e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8001f52:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f5a:	8503      	strh	r3, [r0, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
		LSB = _sbus_buffer[10] << 6;
 8001f5c:	7b83      	ldrb	r3, [r0, #14]
 8001f5e:	019a      	lsls	r2, r3, #6
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 8001f60:	ea42 0291 	orr.w	r2, r2, r1, lsr #2
 8001f64:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f68:	8542      	strh	r2, [r0, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
		LSB = _sbus_buffer[11] << 3;
 8001f6a:	7bc2      	ldrb	r2, [r0, #15]
		this->_channels[7] = (MSB | LSB) & 0x07FF;

		//BUTTON D
		MSB = _sbus_buffer[12];
		LSB = _sbus_buffer[13] << 8;
 8001f6c:	7c41      	ldrb	r1, [r0, #17]
		MSB = _sbus_buffer[10] >> 5;
 8001f6e:	095b      	lsrs	r3, r3, #5
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 8001f70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f74:	8583      	strh	r3, [r0, #44]	; 0x2c
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 8001f76:	8a03      	ldrh	r3, [r0, #16]
 8001f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7c:	85c3      	strh	r3, [r0, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
		LSB = _sbus_buffer[14] << 5;
 8001f7e:	7c83      	ldrb	r3, [r0, #18]
 8001f80:	015a      	lsls	r2, r3, #5
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8001f82:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8001f86:	f3c2 020a 	ubfx	r2, r2, #0, #11

		MSB = _sbus_buffer[14] >> 6;
		LSB = _sbus_buffer[15] << 2;
 8001f8a:	7cc1      	ldrb	r1, [r0, #19]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8001f8c:	8602      	strh	r2, [r0, #48]	; 0x30
		MSB = _sbus_buffer[14] >> 6;
 8001f8e:	099b      	lsrs	r3, r3, #6
		thirdByte = _sbus_buffer[16] << 10;
 8001f90:	7d02      	ldrb	r2, [r0, #20]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8001f92:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8001f96:	ea43 2382 	orr.w	r3, r3, r2, lsl #10

		MSB = _sbus_buffer[16] >> 1;
		LSB = _sbus_buffer[17] << 7;
 8001f9a:	7d41      	ldrb	r1, [r0, #21]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8001f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fa0:	8643      	strh	r3, [r0, #50]	; 0x32
		LSB = _sbus_buffer[17] << 7;
 8001fa2:	01cb      	lsls	r3, r1, #7
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8001fa4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8001fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fac:	8683      	strh	r3, [r0, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
		LSB = _sbus_buffer[18] << 4;
 8001fae:	7d83      	ldrb	r3, [r0, #22]
 8001fb0:	011a      	lsls	r2, r3, #4
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8001fb2:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 8001fb6:	f3c2 020a 	ubfx	r2, r2, #0, #11

		MSB = _sbus_buffer[18] >> 7;
		LSB = _sbus_buffer[19] << 1;
		thirdByte = _sbus_buffer[20] >> 9;
 8001fba:	7e01      	ldrb	r1, [r0, #24]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 8001fbc:	86c2      	strh	r2, [r0, #54]	; 0x36
		LSB = _sbus_buffer[19] << 1;
 8001fbe:	7dc2      	ldrb	r2, [r0, #23]
		MSB = _sbus_buffer[18] >> 7;
 8001fc0:	09db      	lsrs	r3, r3, #7
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 8001fc2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8001fc6:	8703      	strh	r3, [r0, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
		LSB = _sbus_buffer[21] << 6;
 8001fc8:	7e43      	ldrb	r3, [r0, #25]
 8001fca:	019a      	lsls	r2, r3, #6
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 8001fcc:	ea42 0291 	orr.w	r2, r2, r1, lsr #2
 8001fd0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001fd4:	8742      	strh	r2, [r0, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
		LSB = _sbus_buffer[22] << 3;
 8001fd6:	7e82      	ldrb	r2, [r0, #26]
		MSB = _sbus_buffer[21] >> 5;
 8001fd8:	095b      	lsrs	r3, r3, #5
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 8001fda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fde:	8783      	strh	r3, [r0, #60]	; 0x3c

		if(_channels[16] == (_sbus_buffer[23] & 0x001 ? 2047 : 0)){
 8001fe0:	7ec3      	ldrb	r3, [r0, #27]
 8001fe2:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8001fe4:	f013 0f01 	tst.w	r3, #1
 8001fe8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fec:	bf08      	it	eq
 8001fee:	2300      	moveq	r3, #0





}
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	4258      	negs	r0, r3
 8001ff4:	4158      	adcs	r0, r3
 8001ff6:	4770      	bx	lr

08001ff8 <_ZN4SBUS6updateEv>:
void SBUS::update(void){
 8001ff8:	b510      	push	{r4, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8001ffa:	1d01      	adds	r1, r0, #4
void SBUS::update(void){
 8001ffc:	4604      	mov	r4, r0
	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8001ffe:	2219      	movs	r2, #25
 8002000:	6800      	ldr	r0, [r0, #0]
 8002002:	f007 fbe9 	bl	80097d8 <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 8002006:	4620      	mov	r0, r4
}
 8002008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	this->readSBUS();
 800200c:	f7ff bf77 	b.w	8001efe <_ZN4SBUS8readSBUSEv>

08002010 <_ZN4SBUS8getLeftYEv>:

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){

	int16_t raw_value = _channels[2];
 8002010:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
	int16_t center_value = 1024;
	int16_t max_up = 364;
	int16_t max_down = 1684;

	if(raw_value < center_value){
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002018:	da0d      	bge.n	8002036 <_ZN4SBUS8getLeftYEv+0x26>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 800201a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800201e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002022:	4353      	muls	r3, r2
 8002024:	f2a2 627c 	subw	r2, r2, #1660	; 0x67c

	}else if(raw_value > center_value){

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8002028:	fb93 f3f2 	sdiv	r3, r3, r2
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002034:	4770      	bx	lr
	}else if(raw_value > center_value){
 8002036:	d008      	beq.n	800204a <_ZN4SBUS8getLeftYEv+0x3a>
		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8002038:	f64f 4218 	movw	r2, #64536	; 0xfc18
 800203c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002040:	fb13 f302 	smulbb	r3, r3, r2
 8002044:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002048:	e7ee      	b.n	8002028 <_ZN4SBUS8getLeftYEv+0x18>

	}else{

	    return 0.0f;
 800204a:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8002050 <_ZN4SBUS8getLeftYEv+0x40>

	}

}
 800204e:	4770      	bx	lr
 8002050:	00000000 	.word	0x00000000

08002054 <_ZN4SBUS8getLeftXEv>:

float SBUS::getLeftX(void){
  int16_t raw_value = _channels[3];
 8002054:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  float center_value = 1024.0f;
  float max_left = 364.0f;
  float max_right = 1684.0f;

  if (raw_value < center_value) {
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	da0c      	bge.n	8002080 <_ZN4SBUS8getLeftXEv+0x2c>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);

  } else if (raw_value > center_value) {

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8002066:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002088 <_ZN4SBUS8getLeftXEv+0x34>
 800206a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800206e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800208c <_ZN4SBUS8getLeftXEv+0x38>
 8002072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002076:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002090 <_ZN4SBUS8getLeftXEv+0x3c>
 800207a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800207e:	4770      	bx	lr
  } else if (raw_value > center_value) {
 8002080:	d1f1      	bne.n	8002066 <_ZN4SBUS8getLeftXEv+0x12>

  } else {

    return 0.0f;
 8002082:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002094 <_ZN4SBUS8getLeftXEv+0x40>

  }
}
 8002086:	4770      	bx	lr
 8002088:	44800000 	.word	0x44800000
 800208c:	447a0000 	.word	0x447a0000
 8002090:	44250000 	.word	0x44250000
 8002094:	00000000 	.word	0x00000000

08002098 <_ZN4SBUS9getRightYEv>:


float SBUS::getRightY(void){

  int16_t raw_value = _channels[1];
 8002098:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
  float center_value = 1024.0f;
  float max_up = 364.0f;
  float max_down = 1684.0f;

  if (raw_value < center_value) {
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a8:	da0c      	bge.n	80020c4 <_ZN4SBUS9getRightYEv+0x2c>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);

  } else if (raw_value > center_value) {

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 80020aa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80020cc <_ZN4SBUS9getRightYEv+0x34>
 80020ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80020d0 <_ZN4SBUS9getRightYEv+0x38>
 80020b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020d4 <_ZN4SBUS9getRightYEv+0x3c>
 80020be:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80020c2:	4770      	bx	lr
  } else if (raw_value > center_value) {
 80020c4:	d1f1      	bne.n	80020aa <_ZN4SBUS9getRightYEv+0x12>

  } else {

	  return 0.0f;
 80020c6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80020d8 <_ZN4SBUS9getRightYEv+0x40>

  }
}
 80020ca:	4770      	bx	lr
 80020cc:	44800000 	.word	0x44800000
 80020d0:	447a0000 	.word	0x447a0000
 80020d4:	c4250000 	.word	0xc4250000
 80020d8:	00000000 	.word	0x00000000

080020dc <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){

  int16_t raw_value = _channels[0];
 80020dc:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
  float center_value = 1024.0f;
  float max_left = 364.0f;
  float max_right = 1684.0f;


  if (raw_value < center_value) {
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ec:	da0c      	bge.n	8002108 <_ZN4SBUS9getRightXEv+0x2c>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);

  } else if (raw_value > center_value) {

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 80020ee:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002110 <_ZN4SBUS9getRightXEv+0x34>
 80020f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002114 <_ZN4SBUS9getRightXEv+0x38>
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002118 <_ZN4SBUS9getRightXEv+0x3c>
 8002102:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8002106:	4770      	bx	lr
  } else if (raw_value > center_value) {
 8002108:	d1f1      	bne.n	80020ee <_ZN4SBUS9getRightXEv+0x12>

  } else {

    return 0.0f;
 800210a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800211c <_ZN4SBUS9getRightXEv+0x40>

  }

}
 800210e:	4770      	bx	lr
 8002110:	44800000 	.word	0x44800000
 8002114:	447a0000 	.word	0x447a0000
 8002118:	44250000 	.word	0x44250000
 800211c:	00000000 	.word	0x00000000

08002120 <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){

	int16_t raw_value = _channels[4];
 8002120:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26

	float center_value = 1024.0f;
	float max_left = 1684.0f;
	float max_right = 364.0f;

	if(raw_value < center_value){
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002130:	da0c      	bge.n	800214c <_ZN4SBUS11getJogWheelEv+0x2c>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));

	}else if (raw_value > center_value){

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 8002132:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002154 <_ZN4SBUS11getJogWheelEv+0x34>
 8002136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800213a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002158 <_ZN4SBUS11getJogWheelEv+0x38>
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800215c <_ZN4SBUS11getJogWheelEv+0x3c>
 8002146:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800214a:	4770      	bx	lr
	}else if (raw_value > center_value){
 800214c:	d1f1      	bne.n	8002132 <_ZN4SBUS11getJogWheelEv+0x12>
	}else {

		return 0.0f;
 800214e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002160 <_ZN4SBUS11getJogWheelEv+0x40>
	}


}
 8002152:	4770      	bx	lr
 8002154:	44800000 	.word	0x44800000
 8002158:	447a0000 	.word	0x447a0000
 800215c:	c4250000 	.word	0xc4250000
 8002160:	00000000 	.word	0x00000000

08002164 <_ZN4SBUS8A_buttonEv>:
	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);

	  switch (debounce_state) {
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <_ZN4SBUS8A_buttonEv+0x54>)
	  bool button_pressed = (_channels[5] > 500);
 8002166:	8d01      	ldrh	r1, [r0, #40]	; 0x28
	  switch (debounce_state) {
 8002168:	7813      	ldrb	r3, [r2, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00e      	beq.n	800218c <_ZN4SBUS8A_buttonEv+0x28>
 800216e:	2b02      	cmp	r3, #2
 8002170:	f04f 0000 	mov.w	r0, #0
 8002174:	d019      	beq.n	80021aa <_ZN4SBUS8A_buttonEv+0x46>
 8002176:	b9eb      	cbnz	r3, 80021b4 <_ZN4SBUS8A_buttonEv+0x50>

	    case 0:
	      if (button_pressed) {
 8002178:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800217c:	d801      	bhi.n	8002182 <_ZN4SBUS8A_buttonEv+0x1e>
	        return true;
	      }
	      break;
	  }

	  return false;
 800217e:	2000      	movs	r0, #0
 8002180:	4770      	bx	lr
	        debounce_state = 1;
 8002182:	2101      	movs	r1, #1
 8002184:	7011      	strb	r1, [r2, #0]
	        debounce_counter = 0;
 8002186:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <_ZN4SBUS8A_buttonEv+0x58>)
	        debounce_state = 2;
 8002188:	7013      	strb	r3, [r2, #0]
 800218a:	e7f8      	b.n	800217e <_ZN4SBUS8A_buttonEv+0x1a>
	      if (!button_pressed) {
 800218c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8002190:	d802      	bhi.n	8002198 <_ZN4SBUS8A_buttonEv+0x34>
	        debounce_state = 0;
 8002192:	2000      	movs	r0, #0
 8002194:	7010      	strb	r0, [r2, #0]
 8002196:	4770      	bx	lr
	      } else if (++debounce_counter >= _debounceTime) {
 8002198:	4908      	ldr	r1, [pc, #32]	; (80021bc <_ZN4SBUS8A_buttonEv+0x58>)
 800219a:	780b      	ldrb	r3, [r1, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b27      	cmp	r3, #39	; 0x27
 80021a2:	700b      	strb	r3, [r1, #0]
 80021a4:	d9eb      	bls.n	800217e <_ZN4SBUS8A_buttonEv+0x1a>
	        debounce_state = 2;
 80021a6:	2302      	movs	r3, #2
 80021a8:	e7ee      	b.n	8002188 <_ZN4SBUS8A_buttonEv+0x24>
	      if (!button_pressed) {
 80021aa:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 80021ae:	d8e6      	bhi.n	800217e <_ZN4SBUS8A_buttonEv+0x1a>
	        debounce_state = 0;
 80021b0:	7010      	strb	r0, [r2, #0]
	        return true;
 80021b2:	2001      	movs	r0, #1

}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000866 	.word	0x20000866
 80021bc:	20000867 	.word	0x20000867

080021c0 <_ZN4SBUS8B_buttonEv>:
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
			  );

	  switch (debounce_state) {
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_ZN4SBUS8B_buttonEv+0x54>)
	  bool button_pressed = (_channels[6] > 1000
 80021c2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	  switch (debounce_state) {
 80021c4:	7813      	ldrb	r3, [r2, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00e      	beq.n	80021e8 <_ZN4SBUS8B_buttonEv+0x28>
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	f04f 0000 	mov.w	r0, #0
 80021d0:	d019      	beq.n	8002206 <_ZN4SBUS8B_buttonEv+0x46>
 80021d2:	b9eb      	cbnz	r3, 8002210 <_ZN4SBUS8B_buttonEv+0x50>
	    case 0:  // button released
	      if (button_pressed) {
 80021d4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80021d8:	d801      	bhi.n	80021de <_ZN4SBUS8B_buttonEv+0x1e>
	        return true;
	      }
	      break;
	  }

	  return false;
 80021da:	2000      	movs	r0, #0
 80021dc:	4770      	bx	lr
	        debounce_state = 1;
 80021de:	2101      	movs	r1, #1
 80021e0:	7011      	strb	r1, [r2, #0]
	        debounce_counter = 0;
 80021e2:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <_ZN4SBUS8B_buttonEv+0x58>)
	        debounce_state = 2;
 80021e4:	7013      	strb	r3, [r2, #0]
 80021e6:	e7f8      	b.n	80021da <_ZN4SBUS8B_buttonEv+0x1a>
	      if (!button_pressed) {
 80021e8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80021ec:	d802      	bhi.n	80021f4 <_ZN4SBUS8B_buttonEv+0x34>
	        debounce_state = 0;
 80021ee:	2000      	movs	r0, #0
 80021f0:	7010      	strb	r0, [r2, #0]
 80021f2:	4770      	bx	lr
	      } else if (++debounce_counter >= _debounceTime) {
 80021f4:	4908      	ldr	r1, [pc, #32]	; (8002218 <_ZN4SBUS8B_buttonEv+0x58>)
 80021f6:	780b      	ldrb	r3, [r1, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b27      	cmp	r3, #39	; 0x27
 80021fe:	700b      	strb	r3, [r1, #0]
 8002200:	d9eb      	bls.n	80021da <_ZN4SBUS8B_buttonEv+0x1a>
	        debounce_state = 2;
 8002202:	2302      	movs	r3, #2
 8002204:	e7ee      	b.n	80021e4 <_ZN4SBUS8B_buttonEv+0x24>
	      if (!button_pressed) {
 8002206:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800220a:	d8e6      	bhi.n	80021da <_ZN4SBUS8B_buttonEv+0x1a>
	        debounce_state = 0;
 800220c:	7010      	strb	r0, [r2, #0]
	        return true;
 800220e:	2001      	movs	r0, #1


}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000868 	.word	0x20000868
 8002218:	20000869 	.word	0x20000869

0800221c <_ZN4SBUS8C_buttonEv>:
	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[7] > 1000);

	  switch (debounce_state) {
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <_ZN4SBUS8C_buttonEv+0x54>)
	  bool button_pressed = (_channels[7] > 1000);
 800221e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
	  switch (debounce_state) {
 8002220:	7813      	ldrb	r3, [r2, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d00e      	beq.n	8002244 <_ZN4SBUS8C_buttonEv+0x28>
 8002226:	2b02      	cmp	r3, #2
 8002228:	f04f 0000 	mov.w	r0, #0
 800222c:	d019      	beq.n	8002262 <_ZN4SBUS8C_buttonEv+0x46>
 800222e:	b9eb      	cbnz	r3, 800226c <_ZN4SBUS8C_buttonEv+0x50>
		case 0:  // button released
		  if (button_pressed) {
 8002230:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002234:	d801      	bhi.n	800223a <_ZN4SBUS8C_buttonEv+0x1e>
			return true;
		  }
		  break;
	  }

	  return false;
 8002236:	2000      	movs	r0, #0
 8002238:	4770      	bx	lr
			debounce_state = 1;
 800223a:	2101      	movs	r1, #1
 800223c:	7011      	strb	r1, [r2, #0]
			debounce_counter = 0;
 800223e:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <_ZN4SBUS8C_buttonEv+0x58>)
			debounce_state = 2;
 8002240:	7013      	strb	r3, [r2, #0]
 8002242:	e7f8      	b.n	8002236 <_ZN4SBUS8C_buttonEv+0x1a>
		  if (!button_pressed) {
 8002244:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002248:	d802      	bhi.n	8002250 <_ZN4SBUS8C_buttonEv+0x34>
			debounce_state = 0;
 800224a:	2000      	movs	r0, #0
 800224c:	7010      	strb	r0, [r2, #0]
 800224e:	4770      	bx	lr
		  } else if (++debounce_counter >= _debounceTime) {
 8002250:	4908      	ldr	r1, [pc, #32]	; (8002274 <_ZN4SBUS8C_buttonEv+0x58>)
 8002252:	780b      	ldrb	r3, [r1, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b27      	cmp	r3, #39	; 0x27
 800225a:	700b      	strb	r3, [r1, #0]
 800225c:	d9eb      	bls.n	8002236 <_ZN4SBUS8C_buttonEv+0x1a>
			debounce_state = 2;
 800225e:	2302      	movs	r3, #2
 8002260:	e7ee      	b.n	8002240 <_ZN4SBUS8C_buttonEv+0x24>
		  if (!button_pressed) {
 8002262:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002266:	d8e6      	bhi.n	8002236 <_ZN4SBUS8C_buttonEv+0x1a>
			debounce_state = 0;
 8002268:	7010      	strb	r0, [r2, #0]
			return true;
 800226a:	2001      	movs	r0, #1

}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000086a 	.word	0x2000086a
 8002274:	2000086b 	.word	0x2000086b

08002278 <_ZN4SBUS8D_buttonEv>:
	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[8] > 1000);

	  switch (debounce_state) {
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <_ZN4SBUS8D_buttonEv+0x54>)
	  bool button_pressed = (_channels[8] > 1000);
 800227a:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
	  switch (debounce_state) {
 800227c:	7813      	ldrb	r3, [r2, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d00e      	beq.n	80022a0 <_ZN4SBUS8D_buttonEv+0x28>
 8002282:	2b02      	cmp	r3, #2
 8002284:	f04f 0000 	mov.w	r0, #0
 8002288:	d019      	beq.n	80022be <_ZN4SBUS8D_buttonEv+0x46>
 800228a:	b9eb      	cbnz	r3, 80022c8 <_ZN4SBUS8D_buttonEv+0x50>
		case 0:  // button released
		  if (button_pressed) {
 800228c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002290:	d801      	bhi.n	8002296 <_ZN4SBUS8D_buttonEv+0x1e>
			return true;
		  }
		  break;
	  }

	  return false;
 8002292:	2000      	movs	r0, #0
 8002294:	4770      	bx	lr
			debounce_state = 1;
 8002296:	2101      	movs	r1, #1
 8002298:	7011      	strb	r1, [r2, #0]
			debounce_counter = 0;
 800229a:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <_ZN4SBUS8D_buttonEv+0x58>)
			debounce_state = 2;
 800229c:	7013      	strb	r3, [r2, #0]
 800229e:	e7f8      	b.n	8002292 <_ZN4SBUS8D_buttonEv+0x1a>
		  if (!button_pressed) {
 80022a0:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80022a4:	d802      	bhi.n	80022ac <_ZN4SBUS8D_buttonEv+0x34>
			debounce_state = 0;
 80022a6:	2000      	movs	r0, #0
 80022a8:	7010      	strb	r0, [r2, #0]
 80022aa:	4770      	bx	lr
		  } else if (++debounce_counter >= _debounceTime) {
 80022ac:	4908      	ldr	r1, [pc, #32]	; (80022d0 <_ZN4SBUS8D_buttonEv+0x58>)
 80022ae:	780b      	ldrb	r3, [r1, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b27      	cmp	r3, #39	; 0x27
 80022b6:	700b      	strb	r3, [r1, #0]
 80022b8:	d9eb      	bls.n	8002292 <_ZN4SBUS8D_buttonEv+0x1a>
			debounce_state = 2;
 80022ba:	2302      	movs	r3, #2
 80022bc:	e7ee      	b.n	800229c <_ZN4SBUS8D_buttonEv+0x24>
		  if (!button_pressed) {
 80022be:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80022c2:	d8e6      	bhi.n	8002292 <_ZN4SBUS8D_buttonEv+0x1a>
			debounce_state = 0;
 80022c4:	7010      	strb	r0, [r2, #0]
			return true;
 80022c6:	2001      	movs	r0, #1

}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	2000086c 	.word	0x2000086c
 80022d0:	2000086d 	.word	0x2000086d

080022d4 <_ZN4SBUS11home_buttonEv>:
      static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[9] > 1000);

	  switch (debounce_state) {
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <_ZN4SBUS11home_buttonEv+0x54>)
	  bool button_pressed = (_channels[9] > 1000);
 80022d6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	  switch (debounce_state) {
 80022d8:	7813      	ldrb	r3, [r2, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00e      	beq.n	80022fc <_ZN4SBUS11home_buttonEv+0x28>
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	d019      	beq.n	800231a <_ZN4SBUS11home_buttonEv+0x46>
 80022e6:	b9eb      	cbnz	r3, 8002324 <_ZN4SBUS11home_buttonEv+0x50>
		case 0:  // button released
		  if (button_pressed) {
 80022e8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80022ec:	d801      	bhi.n	80022f2 <_ZN4SBUS11home_buttonEv+0x1e>
			return true;
		  }
		  break;
	  }

	  return false;
 80022ee:	2000      	movs	r0, #0
 80022f0:	4770      	bx	lr
			debounce_state = 1;
 80022f2:	2101      	movs	r1, #1
 80022f4:	7011      	strb	r1, [r2, #0]
			debounce_counter = 0;
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <_ZN4SBUS11home_buttonEv+0x58>)
			debounce_state = 2;
 80022f8:	7013      	strb	r3, [r2, #0]
 80022fa:	e7f8      	b.n	80022ee <_ZN4SBUS11home_buttonEv+0x1a>
		  if (!button_pressed) {
 80022fc:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002300:	d802      	bhi.n	8002308 <_ZN4SBUS11home_buttonEv+0x34>
			debounce_state = 0;
 8002302:	2000      	movs	r0, #0
 8002304:	7010      	strb	r0, [r2, #0]
 8002306:	4770      	bx	lr
		  } else if (++debounce_counter >= _debounceTime) {
 8002308:	4908      	ldr	r1, [pc, #32]	; (800232c <_ZN4SBUS11home_buttonEv+0x58>)
 800230a:	780b      	ldrb	r3, [r1, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b27      	cmp	r3, #39	; 0x27
 8002312:	700b      	strb	r3, [r1, #0]
 8002314:	d9eb      	bls.n	80022ee <_ZN4SBUS11home_buttonEv+0x1a>
			debounce_state = 2;
 8002316:	2302      	movs	r3, #2
 8002318:	e7ee      	b.n	80022f8 <_ZN4SBUS11home_buttonEv+0x24>
		  if (!button_pressed) {
 800231a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800231e:	d8e6      	bhi.n	80022ee <_ZN4SBUS11home_buttonEv+0x1a>
			debounce_state = 0;
 8002320:	7010      	strb	r0, [r2, #0]
			return true;
 8002322:	2001      	movs	r0, #1
}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000864 	.word	0x20000864
 800232c:	20000865 	.word	0x20000865

08002330 <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>:
#include "altimeter.h"

Altimeter::Altimeter(I2C_HandleTypeDef* i2c){
 8002330:	b538      	push	{r3, r4, r5, lr}
 8002332:	2300      	movs	r3, #0
 8002334:	4604      	mov	r4, r0
 8002336:	460d      	mov	r5, r1
 8002338:	6083      	str	r3, [r0, #8]
 800233a:	60c3      	str	r3, [r0, #12]
 800233c:	6103      	str	r3, [r0, #16]
 800233e:	6143      	str	r3, [r0, #20]
 8002340:	2214      	movs	r2, #20
 8002342:	2100      	movs	r1, #0
 8002344:	3018      	adds	r0, #24
 8002346:	f009 f883 	bl	800b450 <memset>
 800234a:	2300      	movs	r3, #0
 800234c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800234e:	8623      	strh	r3, [r4, #48]	; 0x30

	_i2c = i2c;
 8002350:	6025      	str	r5, [r4, #0]
}
 8002352:	4620      	mov	r0, r4
 8002354:	bd38      	pop	{r3, r4, r5, pc}

08002356 <_ZN9Altimeter6whoAmIEv>:
	printf("WhoAmI register: %d \r\n", this->_whoAmI);


}

bool Altimeter::whoAmI(void){
 8002356:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_whoAmI, I2C_MEMADD_SIZE_8BIT, &_whoAmI, 1, 100);
 8002358:	2301      	movs	r3, #1
 800235a:	2264      	movs	r2, #100	; 0x64
 800235c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002360:	f100 0231 	add.w	r2, r0, #49	; 0x31
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	21c0      	movs	r1, #192	; 0xc0
 8002368:	220c      	movs	r2, #12
 800236a:	6800      	ldr	r0, [r0, #0]
 800236c:	f004 f89c 	bl	80064a8 <HAL_I2C_Mem_Read>
	if(_whoAmI != 0xC4){
		return false;
	}

}
 8002370:	2000      	movs	r0, #0
 8002372:	b005      	add	sp, #20
 8002374:	f85d fb04 	ldr.w	pc, [sp], #4

08002378 <_ZN9Altimeter15read_ctrl_reg_1Ev>:

}



uint8_t Altimeter::read_ctrl_reg_1(void){
 8002378:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &_ctrl_reg1_data, 1, 100);
 800237a:	2301      	movs	r3, #1
 800237c:	2264      	movs	r2, #100	; 0x64
 800237e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002382:	f100 022d 	add.w	r2, r0, #45	; 0x2d
 8002386:	9200      	str	r2, [sp, #0]
uint8_t Altimeter::read_ctrl_reg_1(void){
 8002388:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &_ctrl_reg1_data, 1, 100);
 800238a:	2226      	movs	r2, #38	; 0x26
 800238c:	21c0      	movs	r1, #192	; 0xc0
 800238e:	6800      	ldr	r0, [r0, #0]
 8002390:	f004 f88a 	bl	80064a8 <HAL_I2C_Mem_Read>
	return _ctrl_reg1_data;
}
 8002394:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8002398:	b004      	add	sp, #16
 800239a:	bd10      	pop	{r4, pc}

0800239c <_ZN9Altimeter15read_status_regEv>:

uint8_t Altimeter::read_status_reg(void){
 800239c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_status_reg, I2C_MEMADD_SIZE_8BIT, &_status_reg_data, 1, 100);
 800239e:	2301      	movs	r3, #1
 80023a0:	2264      	movs	r2, #100	; 0x64
 80023a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80023a6:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 80023aa:	9200      	str	r2, [sp, #0]
uint8_t Altimeter::read_status_reg(void){
 80023ac:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_status_reg, I2C_MEMADD_SIZE_8BIT, &_status_reg_data, 1, 100);
 80023ae:	2200      	movs	r2, #0
 80023b0:	21c0      	movs	r1, #192	; 0xc0
 80023b2:	6800      	ldr	r0, [r0, #0]
 80023b4:	f004 f878 	bl	80064a8 <HAL_I2C_Mem_Read>
	return _status_reg_data;
}
 80023b8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80023bc:	b004      	add	sp, #16
 80023be:	bd10      	pop	{r4, pc}

080023c0 <_ZN9Altimeter13read_data_regEv>:

uint8_t Altimeter::read_data_reg(void){
 80023c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_data_event_flag_reg, I2C_MEMADD_SIZE_8BIT, &_flag_reg_data, 1, 100);
 80023c2:	2301      	movs	r3, #1
 80023c4:	2264      	movs	r2, #100	; 0x64
 80023c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80023ca:	f100 022f 	add.w	r2, r0, #47	; 0x2f
 80023ce:	9200      	str	r2, [sp, #0]
uint8_t Altimeter::read_data_reg(void){
 80023d0:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_data_event_flag_reg, I2C_MEMADD_SIZE_8BIT, &_flag_reg_data, 1, 100);
 80023d2:	2213      	movs	r2, #19
 80023d4:	21c0      	movs	r1, #192	; 0xc0
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	f004 f866 	bl	80064a8 <HAL_I2C_Mem_Read>
	return _flag_reg_data;
}
 80023dc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80023e0:	b004      	add	sp, #16
 80023e2:	bd10      	pop	{r4, pc}

080023e4 <_ZN9Altimeter12get_altitudeEv>:

float Altimeter::get_altitude(void){

	return _moving_avg;
}
 80023e4:	ed90 0a05 	vldr	s0, [r0, #20]
 80023e8:	4770      	bx	lr

080023ea <_ZN9Altimeter17write_to_registerEhh>:

bool Altimeter::write_to_register(uint8_t adress, uint8_t value){
 80023ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if(	HAL_I2C_Mem_Write(_i2c, _altimeter_address, adress, I2C_MEMADD_SIZE_8BIT, &value, 1, 100) != HAL_OK){
 80023ec:	2301      	movs	r3, #1
bool Altimeter::write_to_register(uint8_t adress, uint8_t value){
 80023ee:	f88d 2017 	strb.w	r2, [sp, #23]
	if(	HAL_I2C_Mem_Write(_i2c, _altimeter_address, adress, I2C_MEMADD_SIZE_8BIT, &value, 1, 100) != HAL_OK){
 80023f2:	2264      	movs	r2, #100	; 0x64
 80023f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80023f8:	f10d 0217 	add.w	r2, sp, #23
 80023fc:	9200      	str	r2, [sp, #0]
 80023fe:	6800      	ldr	r0, [r0, #0]
 8002400:	460a      	mov	r2, r1
 8002402:	21c0      	movs	r1, #192	; 0xc0
 8002404:	f003 ff9a 	bl	800633c <HAL_I2C_Mem_Write>

		return false;
	}

}
 8002408:	2000      	movs	r0, #0
 800240a:	b007      	add	sp, #28
 800240c:	f85d fb04 	ldr.w	pc, [sp], #4

08002410 <_ZN9Altimeter14init_altimeterEv>:
void Altimeter::init_altimeter(void){
 8002410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		printf("Attempting to read from chip \r\n");
 8002414:	4d44      	ldr	r5, [pc, #272]	; (8002528 <_ZN9Altimeter14init_altimeterEv+0x118>)
void Altimeter::init_altimeter(void){
 8002416:	b086      	sub	sp, #24
 8002418:	4604      	mov	r4, r0
		this->whoAmI();
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff ff9b 	bl	8002356 <_ZN9Altimeter6whoAmIEv>
		printf("Attempting to read from chip \r\n");
 8002420:	4628      	mov	r0, r5
 8002422:	f009 fded 	bl	800c000 <puts>
	}while(_whoAmI != 0xC4);
 8002426:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800242a:	2bc4      	cmp	r3, #196	; 0xc4
 800242c:	d1f5      	bne.n	800241a <_ZN9Altimeter14init_altimeterEv+0xa>
	transmit_data = 0x04;
 800242e:	2304      	movs	r3, #4
 8002430:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &transmit_data, 1, 100);
 8002434:	2601      	movs	r6, #1
 8002436:	f10d 0317 	add.w	r3, sp, #23
 800243a:	2764      	movs	r7, #100	; 0x64
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002442:	6820      	ldr	r0, [r4, #0]
 8002444:	4633      	mov	r3, r6
 8002446:	2226      	movs	r2, #38	; 0x26
 8002448:	21c0      	movs	r1, #192	; 0xc0
 800244a:	f003 ff77 	bl	800633c <HAL_I2C_Mem_Write>
	int counter = 0;
 800244e:	2500      	movs	r5, #0
	}while(HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &response, 1, 100) != HAL_OK);
 8002450:	f10d 0816 	add.w	r8, sp, #22
 8002454:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002458:	6820      	ldr	r0, [r4, #0]
 800245a:	f8cd 8000 	str.w	r8, [sp]
 800245e:	2301      	movs	r3, #1
 8002460:	2226      	movs	r2, #38	; 0x26
 8002462:	21c0      	movs	r1, #192	; 0xc0
		counter++;
 8002464:	3501      	adds	r5, #1
	}while(HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &response, 1, 100) != HAL_OK);
 8002466:	f004 f81f 	bl	80064a8 <HAL_I2C_Mem_Read>
 800246a:	2800      	cmp	r0, #0
 800246c:	d1f2      	bne.n	8002454 <_ZN9Altimeter14init_altimeterEv+0x44>
	printf("ctrl_reg1 after reset %d \r\n", response);
 800246e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002472:	482e      	ldr	r0, [pc, #184]	; (800252c <_ZN9Altimeter14init_altimeterEv+0x11c>)
 8002474:	f009 fd3e 	bl	800bef4 <iprintf>
	printf("delay after reset: %d \r\n", counter);
 8002478:	4629      	mov	r1, r5
 800247a:	482d      	ldr	r0, [pc, #180]	; (8002530 <_ZN9Altimeter14init_altimeterEv+0x120>)
		printf("could not write to ctrl register 1 \r\n");
 800247c:	4d2d      	ldr	r5, [pc, #180]	; (8002534 <_ZN9Altimeter14init_altimeterEv+0x124>)
	printf("delay after reset: %d \r\n", counter);
 800247e:	f009 fd39 	bl	800bef4 <iprintf>
	transmit_data = 0x02;
 8002482:	2302      	movs	r3, #2
 8002484:	f88d 3017 	strb.w	r3, [sp, #23]
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 8002488:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800248c:	2126      	movs	r1, #38	; 0x26
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff ffab 	bl	80023ea <_ZN9Altimeter17write_to_registerEhh>
 8002494:	b138      	cbz	r0, 80024a6 <_ZN9Altimeter14init_altimeterEv+0x96>
		printf("could not write to ctrl register 1 \r\n");
 8002496:	4628      	mov	r0, r5
 8002498:	f009 fdb2 	bl	800c000 <puts>
		_ctrl_reg1_data = response;
 800249c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80024a0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 80024a4:	e7f0      	b.n	8002488 <_ZN9Altimeter14init_altimeterEv+0x78>
	transmit_data = 0x07;
 80024a6:	2307      	movs	r3, #7
		printf("Cannot write to flag register\r\n");
 80024a8:	4d23      	ldr	r5, [pc, #140]	; (8002538 <_ZN9Altimeter14init_altimeterEv+0x128>)
	transmit_data = 0x07;
 80024aa:	f88d 3017 	strb.w	r3, [sp, #23]
	while(this->write_to_register(_altimeter_data_event_flag_reg, transmit_data) != HAL_OK){
 80024ae:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80024b2:	2113      	movs	r1, #19
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ff98 	bl	80023ea <_ZN9Altimeter17write_to_registerEhh>
 80024ba:	b118      	cbz	r0, 80024c4 <_ZN9Altimeter14init_altimeterEv+0xb4>
		printf("Cannot write to flag register\r\n");
 80024bc:	4628      	mov	r0, r5
 80024be:	f009 fd9f 	bl	800c000 <puts>
	while(this->write_to_register(_altimeter_data_event_flag_reg, transmit_data) != HAL_OK){
 80024c2:	e7f4      	b.n	80024ae <_ZN9Altimeter14init_altimeterEv+0x9e>
	transmit_data = 0x3A;
 80024c4:	233a      	movs	r3, #58	; 0x3a
		printf("Cannot write to flag register\r\n");
 80024c6:	4d1c      	ldr	r5, [pc, #112]	; (8002538 <_ZN9Altimeter14init_altimeterEv+0x128>)
	transmit_data = 0x3A;
 80024c8:	f88d 3017 	strb.w	r3, [sp, #23]
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 80024cc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80024d0:	2126      	movs	r1, #38	; 0x26
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff ff89 	bl	80023ea <_ZN9Altimeter17write_to_registerEhh>
 80024d8:	b118      	cbz	r0, 80024e2 <_ZN9Altimeter14init_altimeterEv+0xd2>
		printf("Cannot write to flag register\r\n");
 80024da:	4628      	mov	r0, r5
 80024dc:	f009 fd90 	bl	800c000 <puts>
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 80024e0:	e7f4      	b.n	80024cc <_ZN9Altimeter14init_altimeterEv+0xbc>
	printf("\r\n");
 80024e2:	4816      	ldr	r0, [pc, #88]	; (800253c <_ZN9Altimeter14init_altimeterEv+0x12c>)
 80024e4:	f009 fd8c 	bl	800c000 <puts>
	printf("Checking registers to see if everything is initialized correctly \r\n");
 80024e8:	4815      	ldr	r0, [pc, #84]	; (8002540 <_ZN9Altimeter14init_altimeterEv+0x130>)
 80024ea:	f009 fd89 	bl	800c000 <puts>
	printf("Ctrl reg1 after samplerate set: %d \r\n", this->read_ctrl_reg_1());
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff ff42 	bl	8002378 <_ZN9Altimeter15read_ctrl_reg_1Ev>
 80024f4:	4601      	mov	r1, r0
 80024f6:	4813      	ldr	r0, [pc, #76]	; (8002544 <_ZN9Altimeter14init_altimeterEv+0x134>)
 80024f8:	f009 fcfc 	bl	800bef4 <iprintf>
	printf("Status reg: %d \r\n", this->read_status_reg());
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff ff4d 	bl	800239c <_ZN9Altimeter15read_status_regEv>
 8002502:	4601      	mov	r1, r0
 8002504:	4810      	ldr	r0, [pc, #64]	; (8002548 <_ZN9Altimeter14init_altimeterEv+0x138>)
 8002506:	f009 fcf5 	bl	800bef4 <iprintf>
	printf("Flag data reg: %d \r\n", this->read_data_reg());
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ff58 	bl	80023c0 <_ZN9Altimeter13read_data_regEv>
 8002510:	4601      	mov	r1, r0
 8002512:	480e      	ldr	r0, [pc, #56]	; (800254c <_ZN9Altimeter14init_altimeterEv+0x13c>)
 8002514:	f009 fcee 	bl	800bef4 <iprintf>
	printf("WhoAmI register: %d \r\n", this->_whoAmI);
 8002518:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <_ZN9Altimeter14init_altimeterEv+0x140>)
 800251e:	f009 fce9 	bl	800bef4 <iprintf>
}
 8002522:	b006      	add	sp, #24
 8002524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002528:	0800eb6c 	.word	0x0800eb6c
 800252c:	0800eb8b 	.word	0x0800eb8b
 8002530:	0800eba7 	.word	0x0800eba7
 8002534:	0800ebc0 	.word	0x0800ebc0
 8002538:	0800ebe5 	.word	0x0800ebe5
 800253c:	0800eccb 	.word	0x0800eccb
 8002540:	0800ec04 	.word	0x0800ec04
 8002544:	0800ec47 	.word	0x0800ec47
 8002548:	0800ec6d 	.word	0x0800ec6d
 800254c:	0800ec7f 	.word	0x0800ec7f
 8002550:	0800ec94 	.word	0x0800ec94

08002554 <_ZN9Altimeter10set_offsetEf>:


//Crude debug offset-setter. Change this with a write to the offset register later
void Altimeter::set_offset(float offset){

	this->_altitude_offset = offset;
 8002554:	ed80 0a03 	vstr	s0, [r0, #12]
}
 8002558:	4770      	bx	lr

0800255a <_ZN9Altimeter10get_offsetEv>:

float Altimeter::get_offset(void){

	return this->_altitude_offset;
}
 800255a:	ed90 0a03 	vldr	s0, [r0, #12]
 800255e:	4770      	bx	lr

08002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>:
	return &hi2c2;
}



void Initializer::Error_Handler(void){
 8002560:	b570      	push	{r4, r5, r6, lr}

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002562:	4e09      	ldr	r6, [pc, #36]	; (8002588 <_ZN11Initializer13Error_HandlerEv.constprop.0+0x28>)
		HAL_Delay(50);
		printf("Initialization error handler !! \r\n");
 8002564:	4d09      	ldr	r5, [pc, #36]	; (800258c <_ZN11Initializer13Error_HandlerEv.constprop.0+0x2c>)
void Initializer::Error_Handler(void){
 8002566:	241e      	movs	r4, #30
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800256c:	4630      	mov	r0, r6
 800256e:	f003 fcfa 	bl	8005f66 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8002572:	2032      	movs	r0, #50	; 0x32
 8002574:	f001 ffae 	bl	80044d4 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002578:	3c01      	subs	r4, #1
		printf("Initialization error handler !! \r\n");
 800257a:	4628      	mov	r0, r5
 800257c:	f009 fd40 	bl	800c000 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002580:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002584:	d1f0      	bne.n	8002568 <_ZN11Initializer13Error_HandlerEv.constprop.0+0x8>

	}

}
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	48000800 	.word	0x48000800
 800258c:	0800ecab 	.word	0x0800ecab

08002590 <_ZN11Initializer9initTIM_1Ev>:
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8002590:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <_ZN11Initializer9initTIM_1Ev+0x118>)
void Initializer::initTIM_1(void){
 8002592:	b530      	push	{r4, r5, lr}
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8002594:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259a:	661a      	str	r2, [r3, #96]	; 0x60
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
void Initializer::initTIM_1(void){
 800259e:	b09d      	sub	sp, #116	; 0x74
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a0:	2210      	movs	r2, #16
	  __HAL_RCC_TIM1_CLK_ENABLE();
 80025a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a6:	2500      	movs	r5, #0
void Initializer::initTIM_1(void){
 80025a8:	4604      	mov	r4, r0
	  __HAL_RCC_TIM1_CLK_ENABLE();
 80025aa:	9300      	str	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ac:	2100      	movs	r1, #0
 80025ae:	eb0d 0002 	add.w	r0, sp, r2
	  __HAL_RCC_TIM1_CLK_ENABLE();
 80025b2:	9b00      	ldr	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b4:	f008 ff4c 	bl	800b450 <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b8:	221c      	movs	r2, #28
 80025ba:	4629      	mov	r1, r5
 80025bc:	a808      	add	r0, sp, #32
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025be:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80025c2:	9503      	str	r5, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c4:	f008 ff44 	bl	800b450 <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025c8:	2234      	movs	r2, #52	; 0x34
 80025ca:	4629      	mov	r1, r5
 80025cc:	a80f      	add	r0, sp, #60	; 0x3c
 80025ce:	f008 ff3f 	bl	800b450 <memset>
	  htim1.Init.Prescaler = 8;
 80025d2:	4a36      	ldr	r2, [pc, #216]	; (80026ac <_ZN11Initializer9initTIM_1Ev+0x11c>)
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	6165      	str	r5, [r4, #20]
	  htim1.Init.Prescaler = 8;
 80025d6:	2308      	movs	r3, #8
 80025d8:	e9c4 2303 	strd	r2, r3, [r4, #12]
	  htim1.Init.Period = 1080;
 80025dc:	f44f 6387 	mov.w	r3, #1080	; 0x438
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	e9c4 3506 	strd	r3, r5, [r4, #24]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025e8:	340c      	adds	r4, #12
 80025ea:	4620      	mov	r0, r4
 80025ec:	f005 ff5a 	bl	80084a4 <HAL_TIM_Base_Init>
 80025f0:	b120      	cbz	r0, 80025fc <_ZN11Initializer9initTIM_1Ev+0x6c>
	    this->Error_Handler();
 80025f2:	f7ff ffb5 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 80025f6:	482e      	ldr	r0, [pc, #184]	; (80026b0 <_ZN11Initializer9initTIM_1Ev+0x120>)
 80025f8:	f009 fc7c 	bl	800bef4 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002600:	a904      	add	r1, sp, #16
 8002602:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002604:	9304      	str	r3, [sp, #16]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002606:	f006 f887 	bl	8008718 <HAL_TIM_ConfigClockSource>
 800260a:	b108      	cbz	r0, 8002610 <_ZN11Initializer9initTIM_1Ev+0x80>
	    Error_Handler();
 800260c:	f7ff ffa8 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002610:	4620      	mov	r0, r4
 8002612:	f005 ff77 	bl	8008504 <HAL_TIM_PWM_Init>
 8002616:	b120      	cbz	r0, 8002622 <_ZN11Initializer9initTIM_1Ev+0x92>
	    this->Error_Handler();
 8002618:	f7ff ffa2 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 800261c:	4824      	ldr	r0, [pc, #144]	; (80026b0 <_ZN11Initializer9initTIM_1Ev+0x120>)
 800261e:	f009 fc69 	bl	800bef4 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002622:	2500      	movs	r5, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002624:	a901      	add	r1, sp, #4
 8002626:	4620      	mov	r0, r4
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002628:	e9cd 5501 	strd	r5, r5, [sp, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262c:	9503      	str	r5, [sp, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800262e:	f006 fa55 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 8002632:	b108      	cbz	r0, 8002638 <_ZN11Initializer9initTIM_1Ev+0xa8>
	    this->Error_Handler();
 8002634:	f7ff ff94 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002638:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800263a:	2208      	movs	r2, #8
 800263c:	a908      	add	r1, sp, #32
 800263e:	4620      	mov	r0, r4
	  sConfigOC.Pulse = 0;
 8002640:	e9cd 3508 	strd	r3, r5, [sp, #32]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002644:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002648:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800264c:	950e      	str	r5, [sp, #56]	; 0x38
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800264e:	f005 ffd7 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 8002652:	b120      	cbz	r0, 800265e <_ZN11Initializer9initTIM_1Ev+0xce>
	    this->Error_Handler();
 8002654:	f7ff ff84 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 8002658:	4815      	ldr	r0, [pc, #84]	; (80026b0 <_ZN11Initializer9initTIM_1Ev+0x120>)
 800265a:	f009 fc4b 	bl	800bef4 <iprintf>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800265e:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002660:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8002664:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002668:	a90f      	add	r1, sp, #60	; 0x3c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800266a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800266e:	4620      	mov	r0, r4
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002670:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	  sBreakDeadTimeConfig.DeadTime = 0;
 8002674:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002678:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	  sBreakDeadTimeConfig.Break2Filter = 0;
 800267c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002680:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002684:	9313      	str	r3, [sp, #76]	; 0x4c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002686:	f006 fa79 	bl	8008b7c <HAL_TIMEx_ConfigBreakDeadTime>
 800268a:	b120      	cbz	r0, 8002696 <_ZN11Initializer9initTIM_1Ev+0x106>
	    this->Error_Handler();
 800268c:	f7ff ff68 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM1 init");
 8002690:	4807      	ldr	r0, [pc, #28]	; (80026b0 <_ZN11Initializer9initTIM_1Ev+0x120>)
 8002692:	f009 fc2f 	bl	800bef4 <iprintf>
	  HAL_TIM_MspPostInit(&htim1);
 8002696:	4620      	mov	r0, r4
 8002698:	f001 fc8a 	bl	8003fb0 <HAL_TIM_MspPostInit>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800269c:	2108      	movs	r1, #8
 800269e:	4620      	mov	r0, r4
 80026a0:	f006 fa1a 	bl	8008ad8 <HAL_TIMEx_PWMN_Start>
}
 80026a4:	b01d      	add	sp, #116	; 0x74
 80026a6:	bd30      	pop	{r4, r5, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	0800eccd 	.word	0x0800eccd

080026b4 <_ZN11Initializer9initTIM_2Ev>:
void Initializer::initTIM_2(void){
 80026b4:	b510      	push	{r4, lr}
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b6:	2210      	movs	r2, #16
void Initializer::initTIM_2(void){
 80026b8:	b088      	sub	sp, #32
 80026ba:	4604      	mov	r4, r0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026bc:	2100      	movs	r1, #0
 80026be:	eb0d 0002 	add.w	r0, sp, r2
 80026c2:	f008 fec5 	bl	800b450 <memset>
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c6:	2300      	movs	r3, #0
	  htim2.Instance = TIM2;
 80026c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	  htim2.Init.Prescaler = 0;
 80026cc:	e9c4 2362 	strd	r2, r3, [r4, #392]	; 0x188
	  htim2.Init.Period = 4.294967295E9;
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d4:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026dc:	e9c4 2365 	strd	r2, r3, [r4, #404]	; 0x194
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026e0:	f504 74c4 	add.w	r4, r4, #392	; 0x188
 80026e4:	4620      	mov	r0, r4
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80026ea:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ec:	f005 feda 	bl	80084a4 <HAL_TIM_Base_Init>
 80026f0:	b120      	cbz	r0, 80026fc <_ZN11Initializer9initTIM_2Ev+0x48>
	    this->Error_Handler();
 80026f2:	f7ff ff35 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM2 init");
 80026f6:	480f      	ldr	r0, [pc, #60]	; (8002734 <_ZN11Initializer9initTIM_2Ev+0x80>)
 80026f8:	f009 fbfc 	bl	800bef4 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002700:	a904      	add	r1, sp, #16
 8002702:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002704:	9304      	str	r3, [sp, #16]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002706:	f006 f807 	bl	8008718 <HAL_TIM_ConfigClockSource>
 800270a:	b120      	cbz	r0, 8002716 <_ZN11Initializer9initTIM_2Ev+0x62>
	    this->Error_Handler();
 800270c:	f7ff ff28 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM2 init");
 8002710:	4808      	ldr	r0, [pc, #32]	; (8002734 <_ZN11Initializer9initTIM_2Ev+0x80>)
 8002712:	f009 fbef 	bl	800bef4 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002718:	a901      	add	r1, sp, #4
 800271a:	4620      	mov	r0, r4
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271c:	9301      	str	r3, [sp, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	9303      	str	r3, [sp, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002720:	f006 f9dc 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 8002724:	b120      	cbz	r0, 8002730 <_ZN11Initializer9initTIM_2Ev+0x7c>
	    this->Error_Handler();
 8002726:	f7ff ff1b 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM2 init");
 800272a:	4802      	ldr	r0, [pc, #8]	; (8002734 <_ZN11Initializer9initTIM_2Ev+0x80>)
 800272c:	f009 fbe2 	bl	800bef4 <iprintf>
}
 8002730:	b008      	add	sp, #32
 8002732:	bd10      	pop	{r4, pc}
 8002734:	0800ece4 	.word	0x0800ece4

08002738 <_ZN11Initializer9initTIM_3Ev>:
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002738:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <_ZN11Initializer9initTIM_3Ev+0xc0>)
void Initializer::initTIM_3(void){
 800273a:	b530      	push	{r4, r5, lr}
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 800273c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800273e:	f042 0202 	orr.w	r2, r2, #2
 8002742:	659a      	str	r2, [r3, #88]	; 0x58
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
void Initializer::initTIM_3(void){
 8002746:	b08d      	sub	sp, #52	; 0x34
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	2500      	movs	r5, #0
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 800274a:	f003 0302 	and.w	r3, r3, #2
void Initializer::initTIM_3(void){
 800274e:	4604      	mov	r4, r0
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002750:	9301      	str	r3, [sp, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002752:	221c      	movs	r2, #28
 8002754:	4629      	mov	r1, r5
 8002756:	a805      	add	r0, sp, #20
	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8002758:	9b01      	ldr	r3, [sp, #4]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275a:	9504      	str	r5, [sp, #16]
 800275c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002760:	f008 fe76 	bl	800b450 <memset>
	  htim3.Instance = TIM3;
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <_ZN11Initializer9initTIM_3Ev+0xc4>)
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002766:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
	  htim3.Init.Prescaler = 0;
 800276a:	e9c4 354f 	strd	r3, r5, [r4, #316]	; 0x13c
	  htim3.Init.Period = 1000;
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002776:	e9c4 3552 	strd	r3, r5, [r4, #328]	; 0x148
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800277a:	f504 749e 	add.w	r4, r4, #316	; 0x13c
 800277e:	4620      	mov	r0, r4
 8002780:	f005 fec0 	bl	8008504 <HAL_TIM_PWM_Init>
 8002784:	b120      	cbz	r0, 8002790 <_ZN11Initializer9initTIM_3Ev+0x58>
	    this->Error_Handler();
 8002786:	f7ff feeb 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 800278a:	481d      	ldr	r0, [pc, #116]	; (8002800 <_ZN11Initializer9initTIM_3Ev+0xc8>)
 800278c:	f009 fbb2 	bl	800bef4 <iprintf>
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002790:	a902      	add	r1, sp, #8
 8002792:	4620      	mov	r0, r4
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002794:	9502      	str	r5, [sp, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002796:	9504      	str	r5, [sp, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002798:	f006 f9a0 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	b120      	cbz	r0, 80027a8 <_ZN11Initializer9initTIM_3Ev+0x70>
	    this->Error_Handler();
 800279e:	f7ff fedf 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 80027a2:	4817      	ldr	r0, [pc, #92]	; (8002800 <_ZN11Initializer9initTIM_3Ev+0xc8>)
 80027a4:	f009 fba6 	bl	800bef4 <iprintf>
	  sConfigOC.Pulse = 0;
 80027a8:	2200      	movs	r2, #0
 80027aa:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ac:	a905      	add	r1, sp, #20
 80027ae:	4620      	mov	r0, r4
	  sConfigOC.Pulse = 0;
 80027b0:	e9cd 3205 	strd	r3, r2, [sp, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b4:	9207      	str	r2, [sp, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027b6:	9209      	str	r2, [sp, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027b8:	f005 ff22 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 80027bc:	b120      	cbz	r0, 80027c8 <_ZN11Initializer9initTIM_3Ev+0x90>
	    this->Error_Handler();
 80027be:	f7ff fecf 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 80027c2:	480f      	ldr	r0, [pc, #60]	; (8002800 <_ZN11Initializer9initTIM_3Ev+0xc8>)
 80027c4:	f009 fb96 	bl	800bef4 <iprintf>
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027c8:	2204      	movs	r2, #4
 80027ca:	a905      	add	r1, sp, #20
 80027cc:	4620      	mov	r0, r4
 80027ce:	f005 ff17 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 80027d2:	b120      	cbz	r0, 80027de <_ZN11Initializer9initTIM_3Ev+0xa6>
	    this->Error_Handler();
 80027d4:	f7ff fec4 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM3 init");
 80027d8:	4809      	ldr	r0, [pc, #36]	; (8002800 <_ZN11Initializer9initTIM_3Ev+0xc8>)
 80027da:	f009 fb8b 	bl	800bef4 <iprintf>
	  HAL_TIM_MspPostInit(&htim3);
 80027de:	4620      	mov	r0, r4
 80027e0:	f001 fbe6 	bl	8003fb0 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80027e4:	2100      	movs	r1, #0
 80027e6:	4620      	mov	r0, r4
 80027e8:	f006 f904 	bl	80089f4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80027ec:	2104      	movs	r1, #4
 80027ee:	4620      	mov	r0, r4
 80027f0:	f006 f900 	bl	80089f4 <HAL_TIM_PWM_Start>
}
 80027f4:	b00d      	add	sp, #52	; 0x34
 80027f6:	bd30      	pop	{r4, r5, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40000400 	.word	0x40000400
 8002800:	0800ecfb 	.word	0x0800ecfb

08002804 <_ZN11Initializer9initTIM_4Ev>:
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002804:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <_ZN11Initializer9initTIM_4Ev+0xf8>)
void Initializer::initTIM_4(void){
 8002806:	b530      	push	{r4, r5, lr}
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800280a:	f042 0204 	orr.w	r2, r2, #4
 800280e:	659a      	str	r2, [r3, #88]	; 0x58
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
void Initializer::initTIM_4(void){
 8002812:	b091      	sub	sp, #68	; 0x44
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002814:	f003 0304 	and.w	r3, r3, #4
void Initializer::initTIM_4(void){
 8002818:	4604      	mov	r4, r0
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281a:	2500      	movs	r5, #0
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 800281c:	9301      	str	r3, [sp, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281e:	2210      	movs	r2, #16
 8002820:	2100      	movs	r1, #0
 8002822:	a805      	add	r0, sp, #20
	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8002824:	9b01      	ldr	r3, [sp, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002826:	f008 fe13 	bl	800b450 <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800282a:	4629      	mov	r1, r5
 800282c:	221c      	movs	r2, #28
 800282e:	a809      	add	r0, sp, #36	; 0x24
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8002834:	9504      	str	r5, [sp, #16]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002836:	f008 fe0b 	bl	800b450 <memset>
	  htim4.Init.Prescaler = 2;
 800283a:	4931      	ldr	r1, [pc, #196]	; (8002900 <_ZN11Initializer9initTIM_4Ev+0xfc>)
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	6625      	str	r5, [r4, #96]	; 0x60
	  htim4.Init.Prescaler = 2;
 800283e:	2302      	movs	r3, #2
 8002840:	e9c4 1316 	strd	r1, r3, [r4, #88]	; 0x58
	  htim4.Init.Period = 1000;
 8002844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	6725      	str	r5, [r4, #112]	; 0x70
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800284e:	3458      	adds	r4, #88	; 0x58
 8002850:	4620      	mov	r0, r4
 8002852:	f005 fe27 	bl	80084a4 <HAL_TIM_Base_Init>
 8002856:	b120      	cbz	r0, 8002862 <_ZN11Initializer9initTIM_4Ev+0x5e>
	    this->Error_Handler();
 8002858:	f7ff fe82 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 800285c:	4829      	ldr	r0, [pc, #164]	; (8002904 <_ZN11Initializer9initTIM_4Ev+0x100>)
 800285e:	f009 fb49 	bl	800bef4 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002866:	a905      	add	r1, sp, #20
 8002868:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286a:	9305      	str	r3, [sp, #20]
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800286c:	f005 ff54 	bl	8008718 <HAL_TIM_ConfigClockSource>
 8002870:	b120      	cbz	r0, 800287c <_ZN11Initializer9initTIM_4Ev+0x78>
	    this->Error_Handler();
 8002872:	f7ff fe75 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8002876:	4823      	ldr	r0, [pc, #140]	; (8002904 <_ZN11Initializer9initTIM_4Ev+0x100>)
 8002878:	f009 fb3c 	bl	800bef4 <iprintf>
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800287c:	4620      	mov	r0, r4
 800287e:	f005 fe41 	bl	8008504 <HAL_TIM_PWM_Init>
 8002882:	b120      	cbz	r0, 800288e <_ZN11Initializer9initTIM_4Ev+0x8a>
	    this->Error_Handler();
 8002884:	f7ff fe6c 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 8002888:	481e      	ldr	r0, [pc, #120]	; (8002904 <_ZN11Initializer9initTIM_4Ev+0x100>)
 800288a:	f009 fb33 	bl	800bef4 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288e:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002890:	a902      	add	r1, sp, #8
 8002892:	4620      	mov	r0, r4
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002894:	9302      	str	r3, [sp, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002896:	9304      	str	r3, [sp, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002898:	f006 f920 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	b120      	cbz	r0, 80028a8 <_ZN11Initializer9initTIM_4Ev+0xa4>
	    this->Error_Handler();
 800289e:	f7ff fe5f 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 80028a2:	4818      	ldr	r0, [pc, #96]	; (8002904 <_ZN11Initializer9initTIM_4Ev+0x100>)
 80028a4:	f009 fb26 	bl	800bef4 <iprintf>
	  sConfigOC.Pulse = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	2260      	movs	r2, #96	; 0x60
 80028ac:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028b0:	a909      	add	r1, sp, #36	; 0x24
 80028b2:	2204      	movs	r2, #4
 80028b4:	4620      	mov	r0, r4
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b6:	930b      	str	r3, [sp, #44]	; 0x2c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b8:	930d      	str	r3, [sp, #52]	; 0x34
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028ba:	f005 fea1 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 80028be:	b120      	cbz	r0, 80028ca <_ZN11Initializer9initTIM_4Ev+0xc6>
	    this->Error_Handler();
 80028c0:	f7ff fe4e 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <_ZN11Initializer9initTIM_4Ev+0x100>)
 80028c6:	f009 fb15 	bl	800bef4 <iprintf>
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028ca:	2208      	movs	r2, #8
 80028cc:	a909      	add	r1, sp, #36	; 0x24
 80028ce:	4620      	mov	r0, r4
 80028d0:	f005 fe96 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 80028d4:	b120      	cbz	r0, 80028e0 <_ZN11Initializer9initTIM_4Ev+0xdc>
	    this->Error_Handler();
 80028d6:	f7ff fe43 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM4 init");
 80028da:	480a      	ldr	r0, [pc, #40]	; (8002904 <_ZN11Initializer9initTIM_4Ev+0x100>)
 80028dc:	f009 fb0a 	bl	800bef4 <iprintf>
	  HAL_TIM_MspPostInit(&htim4);
 80028e0:	4620      	mov	r0, r4
 80028e2:	f001 fb65 	bl	8003fb0 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80028e6:	2108      	movs	r1, #8
 80028e8:	4620      	mov	r0, r4
 80028ea:	f006 f883 	bl	80089f4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80028ee:	2104      	movs	r1, #4
 80028f0:	4620      	mov	r0, r4
 80028f2:	f006 f87f 	bl	80089f4 <HAL_TIM_PWM_Start>
}
 80028f6:	b011      	add	sp, #68	; 0x44
 80028f8:	bd30      	pop	{r4, r5, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40000800 	.word	0x40000800
 8002904:	0800ed12 	.word	0x0800ed12

08002908 <_ZN11Initializer9initTIM_8Ev>:
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <_ZN11Initializer9initTIM_8Ev+0x11c>)
void Initializer::initTIM_8(void){
 800290a:	b530      	push	{r4, r5, lr}
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 800290c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800290e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002912:	661a      	str	r2, [r3, #96]	; 0x60
 8002914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
void Initializer::initTIM_8(void){
 8002916:	b09d      	sub	sp, #116	; 0x74
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002918:	2210      	movs	r2, #16
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 800291a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291e:	2500      	movs	r5, #0
void Initializer::initTIM_8(void){
 8002920:	4604      	mov	r4, r0
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8002922:	9300      	str	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002924:	2100      	movs	r1, #0
 8002926:	eb0d 0002 	add.w	r0, sp, r2
	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 800292a:	9b00      	ldr	r3, [sp, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292c:	f008 fd90 	bl	800b450 <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002930:	221c      	movs	r2, #28
 8002932:	4629      	mov	r1, r5
 8002934:	a808      	add	r0, sp, #32
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002936:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800293a:	9503      	str	r5, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800293c:	f008 fd88 	bl	800b450 <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002940:	2234      	movs	r2, #52	; 0x34
 8002942:	4629      	mov	r1, r5
 8002944:	a80f      	add	r0, sp, #60	; 0x3c
 8002946:	f008 fd83 	bl	800b450 <memset>
	  htim8.Init.Prescaler = 2;
 800294a:	4a37      	ldr	r2, [pc, #220]	; (8002a28 <_ZN11Initializer9initTIM_8Ev+0x120>)
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
	  htim8.Init.Prescaler = 2;
 8002950:	2302      	movs	r3, #2
 8002952:	e9c4 233c 	strd	r2, r3, [r4, #240]	; 0xf0
	  htim8.Init.Period = 1000;
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295a:	e9c4 353f 	strd	r3, r5, [r4, #252]	; 0xfc
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295e:	e9c4 5541 	strd	r5, r5, [r4, #260]	; 0x104
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002962:	34f0      	adds	r4, #240	; 0xf0
 8002964:	4620      	mov	r0, r4
 8002966:	f005 fd9d 	bl	80084a4 <HAL_TIM_Base_Init>
 800296a:	b108      	cbz	r0, 8002970 <_ZN11Initializer9initTIM_8Ev+0x68>
	    Error_Handler();
 800296c:	f7ff fdf8 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002974:	a904      	add	r1, sp, #16
 8002976:	4620      	mov	r0, r4
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002978:	9304      	str	r3, [sp, #16]
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800297a:	f005 fecd 	bl	8008718 <HAL_TIM_ConfigClockSource>
 800297e:	b108      	cbz	r0, 8002984 <_ZN11Initializer9initTIM_8Ev+0x7c>
	    Error_Handler();
 8002980:	f7ff fdee 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002984:	4620      	mov	r0, r4
 8002986:	f005 fdbd 	bl	8008504 <HAL_TIM_PWM_Init>
 800298a:	b108      	cbz	r0, 8002990 <_ZN11Initializer9initTIM_8Ev+0x88>
	    Error_Handler();
 800298c:	f7ff fde8 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002990:	2500      	movs	r5, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002992:	a901      	add	r1, sp, #4
 8002994:	4620      	mov	r0, r4
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002996:	e9cd 5501 	strd	r5, r5, [sp, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299a:	9503      	str	r5, [sp, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800299c:	f006 f89e 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 80029a0:	b108      	cbz	r0, 80029a6 <_ZN11Initializer9initTIM_8Ev+0x9e>
	    Error_Handler();
 80029a2:	f7ff fddd 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a6:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029a8:	2208      	movs	r2, #8
 80029aa:	a908      	add	r1, sp, #32
 80029ac:	4620      	mov	r0, r4
	  sConfigOC.Pulse = 0;
 80029ae:	e9cd 3508 	strd	r3, r5, [sp, #32]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029b2:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029b6:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029ba:	950e      	str	r5, [sp, #56]	; 0x38
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029bc:	f005 fe20 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 80029c0:	b108      	cbz	r0, 80029c6 <_ZN11Initializer9initTIM_8Ev+0xbe>
	    Error_Handler();
 80029c2:	f7ff fdcd 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029c6:	220c      	movs	r2, #12
 80029c8:	a908      	add	r1, sp, #32
 80029ca:	4620      	mov	r0, r4
 80029cc:	f005 fe18 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 80029d0:	b108      	cbz	r0, 80029d6 <_ZN11Initializer9initTIM_8Ev+0xce>
	    Error_Handler();
 80029d2:	f7ff fdc5 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029d6:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	  sBreakDeadTimeConfig.BreakFilter = 0;
 80029dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80029e0:	a90f      	add	r1, sp, #60	; 0x3c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80029e6:	4620      	mov	r0, r4
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029e8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	  sBreakDeadTimeConfig.DeadTime = 0;
 80029ec:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029f0:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	  sBreakDeadTimeConfig.Break2Filter = 0;
 80029f4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029f8:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029fc:	9313      	str	r3, [sp, #76]	; 0x4c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80029fe:	f006 f8bd 	bl	8008b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8002a02:	b108      	cbz	r0, 8002a08 <_ZN11Initializer9initTIM_8Ev+0x100>
	    Error_Handler();
 8002a04:	f7ff fdac 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	  HAL_TIM_MspPostInit(&htim8);
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f001 fad1 	bl	8003fb0 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002a0e:	2108      	movs	r1, #8
 8002a10:	4620      	mov	r0, r4
 8002a12:	f005 ffef 	bl	80089f4 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8002a16:	210c      	movs	r1, #12
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f006 f85d 	bl	8008ad8 <HAL_TIMEx_PWMN_Start>
}
 8002a1e:	b01d      	add	sp, #116	; 0x74
 8002a20:	bd30      	pop	{r4, r5, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40013400 	.word	0x40013400

08002a2c <_ZN11Initializer10initTIM_16Ev>:
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <_ZN11Initializer10initTIM_16Ev+0xdc>)
void Initializer::initTIM_16(void){
 8002a2e:	b570      	push	{r4, r5, r6, lr}
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8002a30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a32:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
void Initializer::initTIM_16(void){
 8002a3a:	b096      	sub	sp, #88	; 0x58
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
void Initializer::initTIM_16(void){
 8002a40:	4605      	mov	r5, r0
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8002a42:	9301      	str	r3, [sp, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a44:	221c      	movs	r2, #28
 8002a46:	2100      	movs	r1, #0
 8002a48:	a802      	add	r0, sp, #8
	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8002a4a:	9b01      	ldr	r3, [sp, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4c:	f008 fd00 	bl	800b450 <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a50:	2234      	movs	r2, #52	; 0x34
 8002a52:	2100      	movs	r1, #0
 8002a54:	a809      	add	r0, sp, #36	; 0x24
 8002a56:	f008 fcfb 	bl	800b450 <memset>
	  htim16.Init.Prescaler = 128;
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <_ZN11Initializer10initTIM_16Ev+0xe0>)
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	e9c5 2329 	strd	r2, r3, [r5, #164]	; 0xa4
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a62:	f105 06a4 	add.w	r6, r5, #164	; 0xa4
	  htim16.Init.Period = 1000;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a6c:	e9c5 322b 	strd	r3, r2, [r5, #172]	; 0xac
	  htim16.Init.RepetitionCounter = 0;
 8002a70:	e9c5 332d 	strd	r3, r3, [r5, #180]	; 0xb4
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a74:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f005 fd13 	bl	80084a4 <HAL_TIM_Base_Init>
 8002a7e:	b120      	cbz	r0, 8002a8a <_ZN11Initializer10initTIM_16Ev+0x5e>
	    this->Error_Handler();
 8002a80:	f7ff fd6e 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8002a84:	4822      	ldr	r0, [pc, #136]	; (8002b10 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8002a86:	f009 fa35 	bl	800bef4 <iprintf>
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f005 fd3a 	bl	8008504 <HAL_TIM_PWM_Init>
 8002a90:	b120      	cbz	r0, 8002a9c <_ZN11Initializer10initTIM_16Ev+0x70>
	    this->Error_Handler();
 8002a92:	f7ff fd65 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8002a96:	481e      	ldr	r0, [pc, #120]	; (8002b10 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8002a98:	f009 fa2c 	bl	800bef4 <iprintf>
	  sConfigOC.Pulse = 0;
 8002a9c:	2400      	movs	r4, #0
 8002a9e:	2360      	movs	r3, #96	; 0x60
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	a902      	add	r1, sp, #8
 8002aa4:	4630      	mov	r0, r6
	  sConfigOC.Pulse = 0;
 8002aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aaa:	e9cd 4404 	strd	r4, r4, [sp, #16]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002aae:	e9cd 4406 	strd	r4, r4, [sp, #24]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ab2:	9408      	str	r4, [sp, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab4:	f005 fda4 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	b120      	cbz	r0, 8002ac4 <_ZN11Initializer10initTIM_16Ev+0x98>
	   this->Error_Handler();
 8002aba:	f7ff fd51 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8002abe:	4814      	ldr	r0, [pc, #80]	; (8002b10 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8002ac0:	f009 fa18 	bl	800bef4 <iprintf>
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002ac8:	a909      	add	r1, sp, #36	; 0x24
 8002aca:	4630      	mov	r0, r6
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002acc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	  sBreakDeadTimeConfig.DeadTime = 0;
 8002ad0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ad4:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ad8:	940d      	str	r4, [sp, #52]	; 0x34
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ada:	9415      	str	r4, [sp, #84]	; 0x54
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002adc:	f006 f84e 	bl	8008b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ae0:	b120      	cbz	r0, 8002aec <_ZN11Initializer10initTIM_16Ev+0xc0>
	    this->Error_Handler();
 8002ae2:	f7ff fd3d 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8002ae6:	480a      	ldr	r0, [pc, #40]	; (8002b10 <_ZN11Initializer10initTIM_16Ev+0xe4>)
 8002ae8:	f009 fa04 	bl	800bef4 <iprintf>
	  HAL_TIM_MspPostInit(&htim16);
 8002aec:	4630      	mov	r0, r6
 8002aee:	f001 fa5f 	bl	8003fb0 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002af2:	2100      	movs	r1, #0
 8002af4:	4630      	mov	r0, r6
 8002af6:	f005 ff7d 	bl	80089f4 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8002afa:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b02:	b016      	add	sp, #88	; 0x58
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	0800ed29 	.word	0x0800ed29

08002b14 <_ZN11Initializer10initTIM_20Ev>:
void Initializer::initTIM_20(void){
 8002b14:	b500      	push	{lr}
 8002b16:	b09b      	sub	sp, #108	; 0x6c
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b18:	2210      	movs	r2, #16
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	a803      	add	r0, sp, #12
 8002b1e:	f008 fc97 	bl	800b450 <memset>
	  htim20.Instance = TIM20;
 8002b22:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <_ZN11Initializer10initTIM_20Ev+0x78>)
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	2300      	movs	r3, #0
	  htim20.Init.Prescaler = 0;
 8002b26:	e9cd 2307 	strd	r2, r3, [sp, #28]
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002b2a:	a807      	add	r0, sp, #28
	  htim20.Init.Period = 65535;
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	e9cd 3300 	strd	r3, r3, [sp]
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	9302      	str	r3, [sp, #8]
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3e:	9309      	str	r3, [sp, #36]	; 0x24
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002b40:	f005 fcb0 	bl	80084a4 <HAL_TIM_Base_Init>
 8002b44:	b120      	cbz	r0, 8002b50 <_ZN11Initializer10initTIM_20Ev+0x3c>
	    this->Error_Handler();
 8002b46:	f7ff fd0b 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8002b4a:	4811      	ldr	r0, [pc, #68]	; (8002b90 <_ZN11Initializer10initTIM_20Ev+0x7c>)
 8002b4c:	f009 f9d2 	bl	800bef4 <iprintf>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002b54:	a903      	add	r1, sp, #12
 8002b56:	a807      	add	r0, sp, #28
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b58:	9303      	str	r3, [sp, #12]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002b5a:	f005 fddd 	bl	8008718 <HAL_TIM_ConfigClockSource>
 8002b5e:	b120      	cbz	r0, 8002b6a <_ZN11Initializer10initTIM_20Ev+0x56>
	    this->Error_Handler();
 8002b60:	f7ff fcfe 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8002b64:	480a      	ldr	r0, [pc, #40]	; (8002b90 <_ZN11Initializer10initTIM_20Ev+0x7c>)
 8002b66:	f009 f9c5 	bl	800bef4 <iprintf>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6a:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002b6c:	4669      	mov	r1, sp
 8002b6e:	a807      	add	r0, sp, #28
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b70:	e9cd 3300 	strd	r3, r3, [sp]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b74:	9302      	str	r3, [sp, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002b76:	f005 ffb1 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 8002b7a:	b120      	cbz	r0, 8002b86 <_ZN11Initializer10initTIM_20Ev+0x72>
	    this->Error_Handler();
 8002b7c:	f7ff fcf0 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with TIM16 init");
 8002b80:	4803      	ldr	r0, [pc, #12]	; (8002b90 <_ZN11Initializer10initTIM_20Ev+0x7c>)
 8002b82:	f009 f9b7 	bl	800bef4 <iprintf>
}
 8002b86:	b01b      	add	sp, #108	; 0x6c
 8002b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b8c:	40015000 	.word	0x40015000
 8002b90:	0800ed29 	.word	0x0800ed29

08002b94 <_ZN11Initializer11initUSART_1Ev>:
void Initializer::initUSART_1(void){
 8002b94:	b510      	push	{r4, lr}
	  _huart1->Init.BaudRate = 57600;
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <_ZN11Initializer11initUSART_1Ev+0x78>)
void Initializer::initUSART_1(void){
 8002b98:	4604      	mov	r4, r0
	  _huart1->Instance = USART1;
 8002b9a:	6800      	ldr	r0, [r0, #0]
	  _huart1->Init.BaudRate = 57600;
 8002b9c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002ba0:	e9c0 2300 	strd	r2, r3, [r0]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 8002ba4:	2300      	movs	r3, #0
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 8002ba6:	220c      	movs	r2, #12
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 8002ba8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bac:	e9c0 2305 	strd	r2, r3, [r0, #20]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb0:	e9c0 3307 	strd	r3, r3, [r0, #28]
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	  _huart1->Init.Parity = UART_PARITY_NONE;
 8002bb8:	6103      	str	r3, [r0, #16]
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 8002bba:	f006 fcd6 	bl	800956a <HAL_UART_Init>
 8002bbe:	b120      	cbz	r0, 8002bca <_ZN11Initializer11initUSART_1Ev+0x36>
	    this->Error_Handler();
 8002bc0:	f7ff fcce 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with UART1");
 8002bc4:	4812      	ldr	r0, [pc, #72]	; (8002c10 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 8002bc6:	f009 f995 	bl	800bef4 <iprintf>
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bca:	6820      	ldr	r0, [r4, #0]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	f006 fdbb 	bl	8009748 <HAL_UARTEx_SetTxFifoThreshold>
 8002bd2:	b120      	cbz	r0, 8002bde <_ZN11Initializer11initUSART_1Ev+0x4a>
	    this->Error_Handler();
 8002bd4:	f7ff fcc4 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with UART1");
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 8002bda:	f009 f98b 	bl	800bef4 <iprintf>
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bde:	6820      	ldr	r0, [r4, #0]
 8002be0:	2100      	movs	r1, #0
 8002be2:	f006 fdd5 	bl	8009790 <HAL_UARTEx_SetRxFifoThreshold>
 8002be6:	b120      	cbz	r0, 8002bf2 <_ZN11Initializer11initUSART_1Ev+0x5e>
	    this->Error_Handler();
 8002be8:	f7ff fcba 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with UART1");
 8002bec:	4808      	ldr	r0, [pc, #32]	; (8002c10 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 8002bee:	f009 f981 	bl	800bef4 <iprintf>
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	f006 fd8d 	bl	8009712 <HAL_UARTEx_DisableFifoMode>
 8002bf8:	b130      	cbz	r0, 8002c08 <_ZN11Initializer11initUSART_1Ev+0x74>
	    this->Error_Handler();
 8002bfa:	f7ff fcb1 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
}
 8002bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    printf("problem with UART1");
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <_ZN11Initializer11initUSART_1Ev+0x7c>)
 8002c04:	f009 b976 	b.w	800bef4 <iprintf>
}
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	0800ed41 	.word	0x0800ed41

08002c14 <_ZN11Initializer11initUSART_2Ev>:
void Initializer::initUSART_2(void){
 8002c14:	b510      	push	{r4, lr}
	   _huart2->Init.BaudRate = 100000;
 8002c16:	4a20      	ldr	r2, [pc, #128]	; (8002c98 <_ZN11Initializer11initUSART_2Ev+0x84>)
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <_ZN11Initializer11initUSART_2Ev+0x88>)
void Initializer::initUSART_2(void){
 8002c1a:	4604      	mov	r4, r0
	   _huart2->Instance = USART2;
 8002c1c:	6840      	ldr	r0, [r0, #4]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 8002c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	   _huart2->Init.BaudRate = 100000;
 8002c22:	e9c0 2300 	strd	r2, r3, [r0]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e9c0 1302 	strd	r1, r3, [r0, #8]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 8002c2c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c30:	e9c0 3308 	strd	r3, r3, [r0, #32]
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002c34:	2302      	movs	r3, #2
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 8002c36:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002c3a:	220c      	movs	r2, #12
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002c3c:	6283      	str	r3, [r0, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 8002c42:	e9c0 c204 	strd	ip, r2, [r0, #16]
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002c46:	6303      	str	r3, [r0, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 8002c48:	f006 fc8f 	bl	800956a <HAL_UART_Init>
 8002c4c:	b120      	cbz	r0, 8002c58 <_ZN11Initializer11initUSART_2Ev+0x44>
	     Error_Handler();
 8002c4e:	f7ff fc87 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
		    printf("problem with UART2");
 8002c52:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 8002c54:	f009 f94e 	bl	800bef4 <iprintf>
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c58:	6860      	ldr	r0, [r4, #4]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f006 fd74 	bl	8009748 <HAL_UARTEx_SetTxFifoThreshold>
 8002c60:	b120      	cbz	r0, 8002c6c <_ZN11Initializer11initUSART_2Ev+0x58>
	     Error_Handler();
 8002c62:	f7ff fc7d 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
		    printf("problem with UART2");
 8002c66:	480e      	ldr	r0, [pc, #56]	; (8002ca0 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 8002c68:	f009 f944 	bl	800bef4 <iprintf>
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c6c:	6860      	ldr	r0, [r4, #4]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f006 fd8e 	bl	8009790 <HAL_UARTEx_SetRxFifoThreshold>
 8002c74:	b120      	cbz	r0, 8002c80 <_ZN11Initializer11initUSART_2Ev+0x6c>
	     Error_Handler();
 8002c76:	f7ff fc73 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
		    printf("problem with UART2");
 8002c7a:	4809      	ldr	r0, [pc, #36]	; (8002ca0 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 8002c7c:	f009 f93a 	bl	800bef4 <iprintf>
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8002c80:	6860      	ldr	r0, [r4, #4]
 8002c82:	f006 fd46 	bl	8009712 <HAL_UARTEx_DisableFifoMode>
 8002c86:	b130      	cbz	r0, 8002c96 <_ZN11Initializer11initUSART_2Ev+0x82>
	     Error_Handler();
 8002c88:	f7ff fc6a 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
}
 8002c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		    printf("problem with UART2");
 8002c90:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <_ZN11Initializer11initUSART_2Ev+0x8c>)
 8002c92:	f009 b92f 	b.w	800bef4 <iprintf>
}
 8002c96:	bd10      	pop	{r4, pc}
 8002c98:	40004400 	.word	0x40004400
 8002c9c:	000186a0 	.word	0x000186a0
 8002ca0:	0800ed54 	.word	0x0800ed54

08002ca4 <_ZN11Initializer8initI2C2Ev>:
void Initializer::initI2C2(void){
 8002ca4:	b513      	push	{r0, r1, r4, lr}
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <_ZN11Initializer8initI2C2Ev+0x70>)
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <_ZN11Initializer8initI2C2Ev+0x74>)
void Initializer::initI2C2(void){
 8002caa:	4604      	mov	r4, r0
	  hi2c_ptr->Instance = I2C2;
 8002cac:	6880      	ldr	r0, [r0, #8]
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 8002cae:	e9c0 2300 	strd	r2, r3, [r0]
	  hi2c_ptr->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	  hi2c_ptr->Init.OwnAddress2 = 0;
 8002cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
	  hi2c_ptr->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cbe:	e9c0 3306 	strd	r3, r3, [r0, #24]
	  hi2c_ptr->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cc2:	6203      	str	r3, [r0, #32]
	  if (HAL_I2C_Init(hi2c_ptr) != HAL_OK)
 8002cc4:	f003 fae9 	bl	800629a <HAL_I2C_Init>
 8002cc8:	b120      	cbz	r0, 8002cd4 <_ZN11Initializer8initI2C2Ev+0x30>
	    Error_Handler();
 8002cca:	f7ff fc49 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with I2C2");
 8002cce:	4813      	ldr	r0, [pc, #76]	; (8002d1c <_ZN11Initializer8initI2C2Ev+0x78>)
 8002cd0:	f009 f910 	bl	800bef4 <iprintf>
	  if (HAL_I2CEx_ConfigAnalogFilter(hi2c_ptr, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cd4:	68a0      	ldr	r0, [r4, #8]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f003 fca9 	bl	800662e <HAL_I2CEx_ConfigAnalogFilter>
 8002cdc:	b120      	cbz	r0, 8002ce8 <_ZN11Initializer8initI2C2Ev+0x44>
	    this->Error_Handler();
 8002cde:	f7ff fc3f 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with I2C2");
 8002ce2:	480e      	ldr	r0, [pc, #56]	; (8002d1c <_ZN11Initializer8initI2C2Ev+0x78>)
 8002ce4:	f009 f906 	bl	800bef4 <iprintf>
	  if (HAL_I2CEx_ConfigDigitalFilter(hi2c_ptr, 0) != HAL_OK)
 8002ce8:	68a0      	ldr	r0, [r4, #8]
 8002cea:	2100      	movs	r1, #0
 8002cec:	f003 fcc5 	bl	800667a <HAL_I2CEx_ConfigDigitalFilter>
 8002cf0:	b120      	cbz	r0, 8002cfc <_ZN11Initializer8initI2C2Ev+0x58>
	    this->Error_Handler();
 8002cf2:	f7ff fc35 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with I2C2");
 8002cf6:	4809      	ldr	r0, [pc, #36]	; (8002d1c <_ZN11Initializer8initI2C2Ev+0x78>)
 8002cf8:	f009 f8fc 	bl	800bef4 <iprintf>
	  __HAL_RCC_I2C2_CLK_ENABLE();
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <_ZN11Initializer8initI2C2Ev+0x7c>)
 8002cfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d00:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d04:	659a      	str	r2, [r3, #88]	; 0x58
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	9b01      	ldr	r3, [sp, #4]
}
 8002d10:	b002      	add	sp, #8
 8002d12:	bd10      	pop	{r4, pc}
 8002d14:	40005800 	.word	0x40005800
 8002d18:	20a0c4df 	.word	0x20a0c4df
 8002d1c:	0800ed67 	.word	0x0800ed67
 8002d20:	40021000 	.word	0x40021000

08002d24 <_ZN11Initializer7initDMAEv>:
void Initializer::initDMA(void){
 8002d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <_ZN11Initializer7initDMAEv+0x90>)
 8002d28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d2a:	f042 0204 	orr.w	r2, r2, #4
 8002d2e:	649a      	str	r2, [r3, #72]	; 0x48
 8002d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d32:	f002 0204 	and.w	r2, r2, #4
 8002d36:	9201      	str	r2, [sp, #4]
 8002d38:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	649a      	str	r2, [r3, #72]	; 0x48
 8002d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d44:	f002 0201 	and.w	r2, r2, #1
 8002d48:	9202      	str	r2, [sp, #8]
 8002d4a:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d4e:	f042 0202 	orr.w	r2, r2, #2
 8002d52:	649a      	str	r2, [r3, #72]	; 0x48
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d58:	f003 0302 	and.w	r3, r3, #2
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d5c:	4611      	mov	r1, r2
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d5e:	9303      	str	r3, [sp, #12]
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d60:	200b      	movs	r0, #11
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d62:	9b03      	ldr	r3, [sp, #12]
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d64:	f002 fd32 	bl	80057cc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d68:	200b      	movs	r0, #11
 8002d6a:	f002 fd61 	bl	8005830 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4611      	mov	r1, r2
 8002d72:	200c      	movs	r0, #12
 8002d74:	f002 fd2a 	bl	80057cc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d78:	200c      	movs	r0, #12
 8002d7a:	f002 fd59 	bl	8005830 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4611      	mov	r1, r2
 8002d82:	200d      	movs	r0, #13
 8002d84:	f002 fd22 	bl	80057cc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002d88:	200d      	movs	r0, #13
 8002d8a:	f002 fd51 	bl	8005830 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	4611      	mov	r1, r2
 8002d92:	200e      	movs	r0, #14
 8002d94:	f002 fd1a 	bl	80057cc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002d98:	200e      	movs	r0, #14
 8002d9a:	f002 fd49 	bl	8005830 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4611      	mov	r1, r2
 8002da2:	2038      	movs	r0, #56	; 0x38
 8002da4:	f002 fd12 	bl	80057cc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002da8:	2038      	movs	r0, #56	; 0x38
}
 8002daa:	b005      	add	sp, #20
 8002dac:	f85d eb04 	ldr.w	lr, [sp], #4
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002db0:	f002 bd3e 	b.w	8005830 <HAL_NVIC_EnableIRQ>
 8002db4:	40021000 	.word	0x40021000

08002db8 <_ZN11Initializer12init_ConfigsEv>:
void Initializer::init_Configs(void){
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4604      	mov	r4, r0
	this->initDMA();
 8002dbc:	f7ff ffb2 	bl	8002d24 <_ZN11Initializer7initDMAEv>
	this->initTIM_1();
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff fbe5 	bl	8002590 <_ZN11Initializer9initTIM_1Ev>
	this->initTIM_2();
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff fc74 	bl	80026b4 <_ZN11Initializer9initTIM_2Ev>
	this->initTIM_3();
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7ff fcb3 	bl	8002738 <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7ff fd16 	bl	8002804 <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f7ff fd95 	bl	8002908 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 8002dde:	4620      	mov	r0, r4
 8002de0:	f7ff fe24 	bl	8002a2c <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff fe95 	bl	8002b14 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff fed2 	bl	8002b94 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff ff0f 	bl	8002c14 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff ff54 	bl	8002ca4 <_ZN11Initializer8initI2C2Ev>
}
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MX_USB_Device_Init();
 8002e00:	f008 b818 	b.w	800ae34 <MX_USB_Device_Init>

08002e04 <_ZN11Initializer8initGPIOEv>:
void Initializer::initGPIO(void){
 8002e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	2214      	movs	r2, #20
void Initializer::initGPIO(void){
 8002e0a:	b08a      	sub	sp, #40	; 0x28
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	eb0d 0002 	add.w	r0, sp, r2
 8002e10:	2100      	movs	r1, #0
 8002e12:	f008 fb1d 	bl	800b450 <memset>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <_ZN11Initializer8initGPIOEv+0xfc>)
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002e18:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002f0c <_ZN11Initializer8initGPIOEv+0x108>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8002e1e:	4f39      	ldr	r7, [pc, #228]	; (8002f04 <_ZN11Initializer8initGPIOEv+0x100>)
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 8002e20:	4e39      	ldr	r6, [pc, #228]	; (8002f08 <_ZN11Initializer8initGPIOEv+0x104>)
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	f042 0204 	orr.w	r2, r2, #4
 8002e26:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e2a:	f002 0204 	and.w	r2, r2, #4
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e34:	f042 0220 	orr.w	r2, r2, #32
 8002e38:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e3c:	f002 0220 	and.w	r2, r2, #32
 8002e40:	9201      	str	r2, [sp, #4]
 8002e42:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e4e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002e52:	9202      	str	r2, [sp, #8]
 8002e54:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e60:	f002 0201 	and.w	r2, r2, #1
 8002e64:	9203      	str	r2, [sp, #12]
 8002e66:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e6a:	f042 0202 	orr.w	r2, r2, #2
 8002e6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002e78:	4640      	mov	r0, r8
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e80:	9b04      	ldr	r3, [sp, #16]
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002e82:	f003 f86b 	bl	8005f5c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8002e86:	4638      	mov	r0, r7
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	f003 f866 	bl	8005f5c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 8002e90:	4630      	mov	r0, r6
 8002e92:	2200      	movs	r2, #0
 8002e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e98:	f003 f860 	bl	8005f5c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2110      	movs	r1, #16
 8002ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea4:	f003 f85a 	bl	8005f5c <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea8:	2501      	movs	r5, #1
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2400      	movs	r4, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb0:	a905      	add	r1, sp, #20
 8002eb2:	4640      	mov	r0, r8
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb4:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ebc:	f002 ff82 	bl	8005dc4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 8002ec0:	2302      	movs	r3, #2
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	a905      	add	r1, sp, #20
 8002ec4:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f002 ff79 	bl	8005dc4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 8002ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	a905      	add	r1, sp, #20
 8002ed8:	4630      	mov	r0, r6
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 8002ee2:	f002 ff6f 	bl	8005dc4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ee6:	2310      	movs	r3, #16
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	a905      	add	r1, sp, #20
 8002eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eee:	e9cd 3505 	strd	r3, r5, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef6:	f002 ff65 	bl	8005dc4 <HAL_GPIO_Init>
}
 8002efa:	b00a      	add	sp, #40	; 0x28
 8002efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	48001400 	.word	0x48001400
 8002f08:	48001800 	.word	0x48001800
 8002f0c:	48000800 	.word	0x48000800

08002f10 <_ZN11Initializer9initClockEv>:
void Initializer::initClock(){
 8002f10:	b500      	push	{lr}
 8002f12:	b095      	sub	sp, #84	; 0x54
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f14:	2238      	movs	r2, #56	; 0x38
 8002f16:	2100      	movs	r1, #0
 8002f18:	a806      	add	r0, sp, #24
 8002f1a:	f008 fa99 	bl	800b450 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f1e:	2214      	movs	r2, #20
 8002f20:	2100      	movs	r1, #0
 8002f22:	a801      	add	r0, sp, #4
 8002f24:	f008 fa94 	bl	800b450 <memset>
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f2c:	f004 fbb4 	bl	8007698 <HAL_PWREx_ControlVoltageScaling>
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002f30:	2322      	movs	r3, #34	; 0x22
 8002f32:	9306      	str	r3, [sp, #24]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f38:	2340      	movs	r3, #64	; 0x40
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f3a:	2201      	movs	r2, #1
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f3c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f40:	2302      	movs	r3, #2
 8002f42:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002f46:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4a:	a806      	add	r0, sp, #24
	  RCC_OscInitStruct.PLL.PLLN = 16;
 8002f4c:	2210      	movs	r2, #16
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f4e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f52:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f56:	f004 fbf9 	bl	800774c <HAL_RCC_OscConfig>
 8002f5a:	b120      	cbz	r0, 8002f66 <_ZN11Initializer9initClockEv+0x56>
	    this->Error_Handler();
 8002f5c:	f7ff fb00 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with initClock function");
 8002f60:	480b      	ldr	r0, [pc, #44]	; (8002f90 <_ZN11Initializer9initClockEv+0x80>)
 8002f62:	f008 ffc7 	bl	800bef4 <iprintf>
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f66:	230f      	movs	r3, #15
 8002f68:	2103      	movs	r1, #3
 8002f6a:	e9cd 3101 	strd	r3, r1, [sp, #4]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f6e:	a801      	add	r0, sp, #4
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f70:	2300      	movs	r3, #0
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f72:	e9cd 3303 	strd	r3, r3, [sp, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f76:	9305      	str	r3, [sp, #20]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f78:	f004 fe2e 	bl	8007bd8 <HAL_RCC_ClockConfig>
 8002f7c:	b120      	cbz	r0, 8002f88 <_ZN11Initializer9initClockEv+0x78>
	    this->Error_Handler();
 8002f7e:	f7ff faef 	bl	8002560 <_ZN11Initializer13Error_HandlerEv.constprop.0>
	    printf("problem with initClock function");
 8002f82:	4803      	ldr	r0, [pc, #12]	; (8002f90 <_ZN11Initializer9initClockEv+0x80>)
 8002f84:	f008 ffb6 	bl	800bef4 <iprintf>
}
 8002f88:	b015      	add	sp, #84	; 0x54
 8002f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f8e:	bf00      	nop
 8002f90:	0800ed79 	.word	0x0800ed79

08002f94 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_+0x18>)
 8002f98:	4604      	mov	r4, r0
	this->_huart2 = huart2;
 8002f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->initClock();
 8002f9e:	f7ff ffb7 	bl	8002f10 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff ff2e 	bl	8002e04 <_ZN11Initializer8initGPIOEv>
}
 8002fa8:	4620      	mov	r0, r4
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	20000ab8 	.word	0x20000ab8

08002fb0 <_ZN11Initializer13get_LED_TimerEv>:
}
 8002fb0:	30a4      	adds	r0, #164	; 0xa4
 8002fb2:	4770      	bx	lr

08002fb4 <_ZN11Initializer18get_selector_TimerEv>:
}
 8002fb4:	30f0      	adds	r0, #240	; 0xf0
 8002fb6:	4770      	bx	lr

08002fb8 <_ZN11Initializer19get_pushMotor_TimerEv>:
}
 8002fb8:	3058      	adds	r0, #88	; 0x58
 8002fba:	4770      	bx	lr

08002fbc <_ZN11Initializer20get_fluidMotor_TimerEv>:
}
 8002fbc:	f500 709e 	add.w	r0, r0, #316	; 0x13c
 8002fc0:	4770      	bx	lr

08002fc2 <_ZN11Initializer22get_cleanerMotor_TimerEv>:
}
 8002fc2:	300c      	adds	r0, #12
 8002fc4:	4770      	bx	lr
	...

08002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>:
#include "components.h"




void Components::Error_Handler(void){
 8002fc8:	b570      	push	{r4, r5, r6, lr}

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002fca:	4e09      	ldr	r6, [pc, #36]	; (8002ff0 <_ZN10Components13Error_HandlerEv.constprop.0+0x28>)
		HAL_Delay(200);
		printf("Components error handler !! \r\n");
 8002fcc:	4d09      	ldr	r5, [pc, #36]	; (8002ff4 <_ZN10Components13Error_HandlerEv.constprop.0+0x2c>)
void Components::Error_Handler(void){
 8002fce:	241e      	movs	r4, #30
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8002fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f002 ffc6 	bl	8005f66 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002fda:	20c8      	movs	r0, #200	; 0xc8
 8002fdc:	f001 fa7a 	bl	80044d4 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002fe0:	3c01      	subs	r4, #1
		printf("Components error handler !! \r\n");
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f009 f80c 	bl	800c000 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002fe8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002fec:	d1f0      	bne.n	8002fd0 <_ZN10Components13Error_HandlerEv.constprop.0+0x8>
	}


}
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	48000800 	.word	0x48000800
 8002ff4:	0800ed99 	.word	0x0800ed99

08002ff8 <_ZN10Components10init_ADC_1Ev>:


}


void Components::init_ADC_1(void){
 8002ff8:	b530      	push	{r4, r5, lr}
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	b085      	sub	sp, #20

		  ADC_MultiModeTypeDef multimode = {0};
		  ADC_ChannelConfTypeDef sConfig = {0};

		  hadc1_ptr->Instance = ADC1;
 8002ffe:	6b80      	ldr	r0, [r0, #56]	; 0x38
		  ADC_MultiModeTypeDef multimode = {0};
 8003000:	2400      	movs	r4, #0
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003002:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003006:	f44f 3340 	mov.w	r3, #196608	; 0x30000
		  ADC_MultiModeTypeDef multimode = {0};
 800300a:	9403      	str	r4, [sp, #12]
 800300c:	e9cd 4401 	strd	r4, r4, [sp, #4]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003010:	e9c0 2300 	strd	r2, r3, [r0]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
		  hadc1_ptr->Init.GainCompensation = 0;
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_DISABLE;
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003014:	2304      	movs	r3, #4
 8003016:	6183      	str	r3, [r0, #24]
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8003018:	211c      	movs	r1, #28
		  hadc1_ptr->Init.NbrOfConversion = 1;
 800301a:	2301      	movs	r3, #1
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 800301c:	f44f 7280 	mov.w	r2, #256	; 0x100
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003020:	e9c0 4402 	strd	r4, r4, [r0, #8]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003024:	e9c0 4404 	strd	r4, r4, [r0, #16]
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003028:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 800302c:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003030:	e9c0 4313 	strd	r4, r3, [r0, #76]	; 0x4c
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 8003034:	8384      	strh	r4, [r0, #28]
		  hadc1_ptr->Init.NbrOfConversion = 1;
 8003036:	6203      	str	r3, [r0, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8003038:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 800303c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003040:	63c4      	str	r4, [r0, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8003042:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
//		  hadc1_ptr->Init.OversamplingMode = ENABLE;
//		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
//		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
//		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
//		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 8003046:	f001 fa6f 	bl	8004528 <HAL_ADC_Init>
 800304a:	b120      	cbz	r0, 8003056 <_ZN10Components10init_ADC_1Ev+0x5e>
		  {
		    this->Error_Handler();
 800304c:	f7ff ffbc 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("ADC1 init failed");
 8003050:	4807      	ldr	r0, [pc, #28]	; (8003070 <_ZN10Components10init_ADC_1Ev+0x78>)
 8003052:	f008 ff4f 	bl	800bef4 <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 8003056:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003058:	9401      	str	r4, [sp, #4]
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 800305a:	a901      	add	r1, sp, #4
 800305c:	f002 f9f2 	bl	8005444 <HAL_ADCEx_MultiModeConfigChannel>
 8003060:	b120      	cbz	r0, 800306c <_ZN10Components10init_ADC_1Ev+0x74>
		  {
		    this->Error_Handler();
 8003062:	f7ff ffb1 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 8003066:	4803      	ldr	r0, [pc, #12]	; (8003074 <_ZN10Components10init_ADC_1Ev+0x7c>)
 8003068:	f008 ff44 	bl	800bef4 <iprintf>
//		  {
//		    this->Error_Handler();
//		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
//		  }

}
 800306c:	b005      	add	sp, #20
 800306e:	bd30      	pop	{r4, r5, pc}
 8003070:	0800edb7 	.word	0x0800edb7
 8003074:	0800edc8 	.word	0x0800edc8

08003078 <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 8003078:	b510      	push	{r4, lr}
 800307a:	4604      	mov	r4, r0
 800307c:	b088      	sub	sp, #32


	  ADC_ChannelConfTypeDef sConfig = {0};
 800307e:	2220      	movs	r2, #32
 8003080:	2100      	movs	r1, #0
 8003082:	4668      	mov	r0, sp
 8003084:	f008 f9e4 	bl	800b450 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 8003088:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800308a:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003144 <_ZN10Components10init_ADC_2Ev+0xcc>
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc2_ptr->Init.GainCompensation = 0;
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800308e:	2201      	movs	r2, #1
 8003090:	2108      	movs	r1, #8
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003092:	f44f 3340 	mov.w	r3, #196608	; 0x30000
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003096:	e9c0 2105 	strd	r2, r1, [r0, #20]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
	  hadc2_ptr->Init.NbrOfConversion = 2;
 800309a:	2102      	movs	r1, #2
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800309c:	e9c0 c300 	strd	ip, r3, [r0]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 80030a0:	6201      	str	r1, [r0, #32]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80030a2:	2300      	movs	r3, #0
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80030a4:	f04f 0e18 	mov.w	lr, #24
 80030a8:	21e0      	movs	r1, #224	; 0xe0
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030ae:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80030b2:	e9c0 e111 	strd	lr, r1, [r0, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80030b6:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
	  hadc2_ptr->Init.GainCompensation = 0;
 80030ba:	6103      	str	r3, [r0, #16]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 80030bc:	8383      	strh	r3, [r0, #28]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 80030be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 80030c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030c6:	63c3      	str	r3, [r0, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 80030c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 80030cc:	f001 fa2c 	bl	8004528 <HAL_ADC_Init>
 80030d0:	b120      	cbz	r0, 80030dc <_ZN10Components10init_ADC_2Ev+0x64>
	  {
	    this->Error_Handler();
 80030d2:	f7ff ff79 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC2 init \r\n");
 80030d6:	4816      	ldr	r0, [pc, #88]	; (8003130 <_ZN10Components10init_ADC_2Ev+0xb8>)
 80030d8:	f008 ff92 	bl	800c000 <puts>
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030dc:	4915      	ldr	r1, [pc, #84]	; (8003134 <_ZN10Components10init_ADC_2Ev+0xbc>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80030de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030e0:	2306      	movs	r3, #6
 80030e2:	e9cd 1300 	strd	r1, r3, [sp]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80030e6:	227f      	movs	r2, #127	; 0x7f
 80030e8:	2300      	movs	r3, #0
 80030ea:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80030ee:	4669      	mov	r1, sp
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80030f0:	2204      	movs	r2, #4
	  sConfig.Offset = 0;
 80030f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 80030f6:	f001 fd61 	bl	8004bbc <HAL_ADC_ConfigChannel>
 80030fa:	b120      	cbz	r0, 8003106 <_ZN10Components10init_ADC_2Ev+0x8e>
	  {
	    this->Error_Handler();
 80030fc:	f7ff ff64 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC2 channel one init \r\n");
 8003100:	480d      	ldr	r0, [pc, #52]	; (8003138 <_ZN10Components10init_ADC_2Ev+0xc0>)
 8003102:	f008 ff7d 	bl	800c000 <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003106:	4a0d      	ldr	r2, [pc, #52]	; (800313c <_ZN10Components10init_ADC_2Ev+0xc4>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 8003108:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 800310a:	230c      	movs	r3, #12
 800310c:	e9cd 2300 	strd	r2, r3, [sp]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 8003110:	4669      	mov	r1, sp
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003112:	2304      	movs	r3, #4
 8003114:	227f      	movs	r2, #127	; 0x7f
 8003116:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800311a:	9304      	str	r3, [sp, #16]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 800311c:	f001 fd4e 	bl	8004bbc <HAL_ADC_ConfigChannel>
 8003120:	b120      	cbz	r0, 800312c <_ZN10Components10init_ADC_2Ev+0xb4>

		  this->Error_Handler();
 8003122:	f7ff ff51 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
		  printf("problem with ADC2 channel two init \r\n");
 8003126:	4806      	ldr	r0, [pc, #24]	; (8003140 <_ZN10Components10init_ADC_2Ev+0xc8>)
 8003128:	f008 ff6a 	bl	800c000 <puts>

	  }


}
 800312c:	b008      	add	sp, #32
 800312e:	bd10      	pop	{r4, pc}
 8003130:	0800edf5 	.word	0x0800edf5
 8003134:	c3290000 	.word	0xc3290000
 8003138:	0800ee0e 	.word	0x0800ee0e
 800313c:	cb8c0000 	.word	0xcb8c0000
 8003140:	0800ee33 	.word	0x0800ee33
 8003144:	50000100 	.word	0x50000100

08003148 <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8003148:	b510      	push	{r4, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	b088      	sub	sp, #32

	  ADC_ChannelConfTypeDef sConfig = {0};
 800314e:	2220      	movs	r2, #32
 8003150:	2100      	movs	r1, #0
 8003152:	4668      	mov	r0, sp
 8003154:	f008 f97c 	bl	800b450 <memset>



	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 8003158:	6c20      	ldr	r0, [r4, #64]	; 0x40
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800315a:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8003218 <_ZN10Components10init_ADC_5Ev+0xd0>
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc5_ptr->Init.GainCompensation = 0;
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800315e:	2201      	movs	r2, #1
 8003160:	2108      	movs	r1, #8
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003162:	f44f 3340 	mov.w	r3, #196608	; 0x30000
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003166:	e9c0 2105 	strd	r2, r1, [r0, #20]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
	  hadc5_ptr->Init.NbrOfConversion = 2;
 800316a:	2102      	movs	r1, #2
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800316c:	e9c0 c300 	strd	ip, r3, [r0]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 8003170:	6201      	str	r1, [r0, #32]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8003172:	2300      	movs	r3, #0
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8003174:	f04f 0e18 	mov.w	lr, #24
 8003178:	21e0      	movs	r1, #224	; 0xe0
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800317a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800317e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8003182:	e9c0 e111 	strd	lr, r1, [r0, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003186:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
	  hadc5_ptr->Init.GainCompensation = 0;
 800318a:	6103      	str	r3, [r0, #16]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 800318c:	8383      	strh	r3, [r0, #28]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 800318e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 8003192:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003196:	63c3      	str	r3, [r0, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 8003198:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 800319c:	f001 f9c4 	bl	8004528 <HAL_ADC_Init>
 80031a0:	b120      	cbz	r0, 80031ac <_ZN10Components10init_ADC_5Ev+0x64>
	  {
	    this->Error_Handler();
 80031a2:	f7ff ff11 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC5 init");
 80031a6:	4817      	ldr	r0, [pc, #92]	; (8003204 <_ZN10Components10init_ADC_5Ev+0xbc>)
 80031a8:	f008 fea4 	bl	800bef4 <iprintf>

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <_ZN10Components10init_ADC_5Ev+0xc0>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 80031ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031b0:	2306      	movs	r3, #6
 80031b2:	e9cd 1300 	strd	r1, r3, [sp]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031b6:	227f      	movs	r2, #127	; 0x7f
 80031b8:	2300      	movs	r3, #0
 80031ba:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 80031be:	4669      	mov	r1, sp
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031c0:	2204      	movs	r2, #4
	  sConfig.Offset = 0;
 80031c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 80031c6:	f001 fcf9 	bl	8004bbc <HAL_ADC_ConfigChannel>
 80031ca:	b120      	cbz	r0, 80031d6 <_ZN10Components10init_ADC_5Ev+0x8e>
	  {
	    this->Error_Handler();
 80031cc:	f7ff fefc 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with ADC5 config channel");
 80031d0:	480e      	ldr	r0, [pc, #56]	; (800320c <_ZN10Components10init_ADC_5Ev+0xc4>)
 80031d2:	f008 fe8f 	bl	800bef4 <iprintf>
//
//	  }

	  //KANAAL VOOR DE FLUID POT
	  sConfig.Channel = ADC_CHANNEL_12;
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <_ZN10Components10init_ADC_5Ev+0xc8>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80031d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80031da:	230c      	movs	r3, #12
 80031dc:	e9cd 2300 	strd	r2, r3, [sp]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031e0:	2304      	movs	r3, #4
 80031e2:	227f      	movs	r2, #127	; 0x7f
 80031e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031e8:	9304      	str	r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80031ea:	4669      	mov	r1, sp
	  sConfig.Offset = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	9305      	str	r3, [sp, #20]
	  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80031f0:	f001 fce4 	bl	8004bbc <HAL_ADC_ConfigChannel>
 80031f4:	b120      	cbz	r0, 8003200 <_ZN10Components10init_ADC_5Ev+0xb8>
	  {
		this->Error_Handler();
 80031f6:	f7ff fee7 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
		printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 80031fa:	4806      	ldr	r0, [pc, #24]	; (8003214 <_ZN10Components10init_ADC_5Ev+0xcc>)
 80031fc:	f008 fe7a 	bl	800bef4 <iprintf>
	  }



}
 8003200:	b008      	add	sp, #32
 8003202:	bd10      	pop	{r4, pc}
 8003204:	0800ee58 	.word	0x0800ee58
 8003208:	94f00020 	.word	0x94f00020
 800320c:	0800ee6f 	.word	0x0800ee6f
 8003210:	32601000 	.word	0x32601000
 8003214:	0800ee90 	.word	0x0800ee90
 8003218:	50000600 	.word	0x50000600

0800321c <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){

	  hcomp1_ptr->Instance = COMP1;
 800321c:	6800      	ldr	r0, [r0, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <_ZN10Components11init_COMP_1Ev+0x30>)
void Components::init_COMP_1(void){
 8003220:	b508      	push	{r3, lr}
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003222:	2300      	movs	r3, #0
 8003224:	e9c0 2300 	strd	r2, r3, [r0]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8003228:	2250      	movs	r2, #80	; 0x50
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800322a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800322e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8003232:	6082      	str	r2, [r0, #8]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8003234:	f002 f9ac 	bl	8005590 <HAL_COMP_Init>
 8003238:	b130      	cbz	r0, 8003248 <_ZN10Components11init_COMP_1Ev+0x2c>
	  {
	    this->Error_Handler();
 800323a:	f7ff fec5 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with COMP1 init");

	  }
}
 800323e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with COMP1 init");
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <_ZN10Components11init_COMP_1Ev+0x34>)
 8003244:	f008 be56 	b.w	800bef4 <iprintf>
}
 8003248:	bd08      	pop	{r3, pc}
 800324a:	bf00      	nop
 800324c:	40010200 	.word	0x40010200
 8003250:	0800eebb 	.word	0x0800eebb

08003254 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){

	    hcomp2_ptr->Instance = COMP2;
 8003254:	6840      	ldr	r0, [r0, #4]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <_ZN10Components11init_COMP_2Ev+0x30>)
void Components::init_COMP_2(void){
 8003258:	b508      	push	{r3, lr}
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800325a:	2300      	movs	r3, #0
 800325c:	e9c0 2300 	strd	r2, r3, [r0]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8003260:	2250      	movs	r2, #80	; 0x50
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003262:	e9c0 3303 	strd	r3, r3, [r0, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003266:	e9c0 3305 	strd	r3, r3, [r0, #20]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 800326a:	6082      	str	r2, [r0, #8]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 800326c:	f002 f990 	bl	8005590 <HAL_COMP_Init>
 8003270:	b130      	cbz	r0, 8003280 <_ZN10Components11init_COMP_2Ev+0x2c>
	    {
	      this->Error_Handler();
 8003272:	f7ff fea9 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    }




}
 8003276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("problem with COMP2 init");
 800327a:	4803      	ldr	r0, [pc, #12]	; (8003288 <_ZN10Components11init_COMP_2Ev+0x34>)
 800327c:	f008 be3a 	b.w	800bef4 <iprintf>
}
 8003280:	bd08      	pop	{r3, pc}
 8003282:	bf00      	nop
 8003284:	40010204 	.word	0x40010204
 8003288:	0800eed3 	.word	0x0800eed3

0800328c <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){

    hcomp4_ptr->Instance = COMP4;
 800328c:	6880      	ldr	r0, [r0, #8]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <_ZN10Components11init_COMP_4Ev+0x2c>)
void Components::init_COMP_4(void){
 8003290:	b508      	push	{r3, lr}
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003292:	2300      	movs	r3, #0
 8003294:	e9c0 2300 	strd	r2, r3, [r0]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8003298:	2240      	movs	r2, #64	; 0x40
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800329a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800329e:	6082      	str	r2, [r0, #8]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80032a0:	6183      	str	r3, [r0, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 80032a2:	f002 f975 	bl	8005590 <HAL_COMP_Init>
 80032a6:	b130      	cbz	r0, 80032b6 <_ZN10Components11init_COMP_4Ev+0x2a>
    {
        this->Error_Handler();
 80032a8:	f7ff fe8e 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with COMP4 init");
    }
}
 80032ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printf("problem with COMP4 init");
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <_ZN10Components11init_COMP_4Ev+0x30>)
 80032b2:	f008 be1f 	b.w	800bef4 <iprintf>
}
 80032b6:	bd08      	pop	{r3, pc}
 80032b8:	4001020c 	.word	0x4001020c
 80032bc:	0800eeeb 	.word	0x0800eeeb

080032c0 <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){

	  hcomp5_ptr->Instance = COMP5;
 80032c0:	68c0      	ldr	r0, [r0, #12]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80032c2:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <_ZN10Components11init_COMP_5Ev+0x30>)
void Components::init_COMP_5(void){
 80032c4:	b508      	push	{r3, lr}
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e9c0 2300 	strd	r2, r3, [r0]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 80032cc:	2240      	movs	r2, #64	; 0x40
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80032ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80032d2:	e9c0 3305 	strd	r3, r3, [r0, #20]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 80032d6:	6082      	str	r2, [r0, #8]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 80032d8:	f002 f95a 	bl	8005590 <HAL_COMP_Init>
 80032dc:	b130      	cbz	r0, 80032ec <_ZN10Components11init_COMP_5Ev+0x2c>
	  {
		this->Error_Handler();
 80032de:	f7ff fe73 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with COMP5 init");

	  }

}
 80032e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with COMP5 init");
 80032e6:	4803      	ldr	r0, [pc, #12]	; (80032f4 <_ZN10Components11init_COMP_5Ev+0x34>)
 80032e8:	f008 be04 	b.w	800bef4 <iprintf>
}
 80032ec:	bd08      	pop	{r3, pc}
 80032ee:	bf00      	nop
 80032f0:	40010210 	.word	0x40010210
 80032f4:	0800ef03 	.word	0x0800ef03

080032f8 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){


	   hcomp7_ptr->Instance = COMP7;
 80032f8:	6900      	ldr	r0, [r0, #16]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <_ZN10Components11init_COMP_7Ev+0x28>)
void Components::init_COMP_7(void){
 80032fc:	b508      	push	{r3, lr}
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80032fe:	2300      	movs	r3, #0
 8003300:	e9c0 2300 	strd	r2, r3, [r0]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8003304:	2250      	movs	r2, #80	; 0x50
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003306:	e9c0 3303 	strd	r3, r3, [r0, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800330a:	e9c0 3305 	strd	r3, r3, [r0, #20]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 800330e:	6082      	str	r2, [r0, #8]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8003310:	f002 f93e 	bl	8005590 <HAL_COMP_Init>
 8003314:	b118      	cbz	r0, 800331e <_ZN10Components11init_COMP_7Ev+0x26>
	     this->Error_Handler();
	   }



}
 8003316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	     this->Error_Handler();
 800331a:	f7ff be55 	b.w	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
}
 800331e:	bd08      	pop	{r3, pc}
 8003320:	40010218 	.word	0x40010218

08003324 <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 8003324:	b510      	push	{r4, lr}
 8003326:	4604      	mov	r4, r0
 8003328:	b08c      	sub	sp, #48	; 0x30

    DAC_ChannelConfTypeDef sConfig = {0};
 800332a:	2230      	movs	r2, #48	; 0x30
 800332c:	2100      	movs	r1, #0
 800332e:	4668      	mov	r0, sp
 8003330:	f008 f88e 	bl	800b450 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8003334:	6960      	ldr	r0, [r4, #20]
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <_ZN10Components10init_DAC_1Ev+0x6c>)
 8003338:	6003      	str	r3, [r0, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 800333a:	f002 fa9b 	bl	8005874 <HAL_DAC_Init>
 800333e:	b120      	cbz	r0, 800334a <_ZN10Components10init_DAC_1Ev+0x26>
    {
        this->Error_Handler();
 8003340:	f7ff fe42 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with DAC1 init");
 8003344:	4813      	ldr	r0, [pc, #76]	; (8003394 <_ZN10Components10init_DAC_1Ev+0x70>)
 8003346:	f008 fdd5 	bl	800bef4 <iprintf>
    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 800334a:	2200      	movs	r2, #0
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800334c:	2302      	movs	r3, #2
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800334e:	6960      	ldr	r0, [r4, #20]
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003350:	9300      	str	r3, [sp, #0]
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003352:	4669      	mov	r1, sp
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003354:	e9cd 2202 	strd	r2, r2, [sp, #8]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003358:	e9cd 2304 	strd	r2, r3, [sp, #16]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800335c:	e9cd 3206 	strd	r3, r2, [sp, #24]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003360:	f8ad 2004 	strh.w	r2, [sp, #4]
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003364:	f002 fa9a 	bl	800589c <HAL_DAC_ConfigChannel>
 8003368:	b120      	cbz	r0, 8003374 <_ZN10Components10init_DAC_1Ev+0x50>
    {
        this->Error_Handler();
 800336a:	f7ff fe2d 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with DAC1 init");
 800336e:	4809      	ldr	r0, [pc, #36]	; (8003394 <_ZN10Components10init_DAC_1Ev+0x70>)
 8003370:	f008 fdc0 	bl	800bef4 <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003374:	6960      	ldr	r0, [r4, #20]
 8003376:	2210      	movs	r2, #16
 8003378:	4669      	mov	r1, sp
 800337a:	f002 fa8f 	bl	800589c <HAL_DAC_ConfigChannel>
 800337e:	b120      	cbz	r0, 800338a <_ZN10Components10init_DAC_1Ev+0x66>
    {
        this->Error_Handler();
 8003380:	f7ff fe22 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
        printf("problem with DAC1 init");
 8003384:	4803      	ldr	r0, [pc, #12]	; (8003394 <_ZN10Components10init_DAC_1Ev+0x70>)
 8003386:	f008 fdb5 	bl	800bef4 <iprintf>

    }

}
 800338a:	b00c      	add	sp, #48	; 0x30
 800338c:	bd10      	pop	{r4, pc}
 800338e:	bf00      	nop
 8003390:	50000800 	.word	0x50000800
 8003394:	0800ef1b 	.word	0x0800ef1b

08003398 <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 8003398:	b510      	push	{r4, lr}
 800339a:	4604      	mov	r4, r0
 800339c:	b08c      	sub	sp, #48	; 0x30

	  DAC_ChannelConfTypeDef sConfig = {0};
 800339e:	2230      	movs	r2, #48	; 0x30
 80033a0:	2100      	movs	r1, #0
 80033a2:	4668      	mov	r0, sp
 80033a4:	f008 f854 	bl	800b450 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 80033a8:	69a0      	ldr	r0, [r4, #24]
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <_ZN10Components10init_DAC_2Ev+0x54>)
 80033ac:	6003      	str	r3, [r0, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 80033ae:	f002 fa61 	bl	8005874 <HAL_DAC_Init>
 80033b2:	b120      	cbz	r0, 80033be <_ZN10Components10init_DAC_2Ev+0x26>
	  {
	    this->Error_Handler();
 80033b4:	f7ff fe08 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC2 init");
 80033b8:	480d      	ldr	r0, [pc, #52]	; (80033f0 <_ZN10Components10init_DAC_2Ev+0x58>)
 80033ba:	f008 fd9b 	bl	800bef4 <iprintf>
	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80033be:	2200      	movs	r2, #0
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80033c0:	2302      	movs	r3, #2
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80033c2:	480c      	ldr	r0, [pc, #48]	; (80033f4 <_ZN10Components10init_DAC_2Ev+0x5c>)
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80033c4:	9300      	str	r3, [sp, #0]
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80033c6:	4669      	mov	r1, sp
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80033c8:	e9cd 2202 	strd	r2, r2, [sp, #8]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80033cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80033d0:	e9cd 3206 	strd	r3, r2, [sp, #24]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80033d4:	f8ad 2004 	strh.w	r2, [sp, #4]
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80033d8:	f002 fa60 	bl	800589c <HAL_DAC_ConfigChannel>
 80033dc:	b120      	cbz	r0, 80033e8 <_ZN10Components10init_DAC_2Ev+0x50>
	  {
	    this->Error_Handler();
 80033de:	f7ff fdf3 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC2 init");
 80033e2:	4803      	ldr	r0, [pc, #12]	; (80033f0 <_ZN10Components10init_DAC_2Ev+0x58>)
 80033e4:	f008 fd86 	bl	800bef4 <iprintf>

	  }


}
 80033e8:	b00c      	add	sp, #48	; 0x30
 80033ea:	bd10      	pop	{r4, pc}
 80033ec:	50000c00 	.word	0x50000c00
 80033f0:	0800ef32 	.word	0x0800ef32
 80033f4:	20000a7c 	.word	0x20000a7c

080033f8 <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4604      	mov	r4, r0
 80033fc:	b08c      	sub	sp, #48	; 0x30

	  DAC_ChannelConfTypeDef sConfig = {0};
 80033fe:	2230      	movs	r2, #48	; 0x30
 8003400:	2100      	movs	r1, #0
 8003402:	4668      	mov	r0, sp
 8003404:	f008 f824 	bl	800b450 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 8003408:	69e0      	ldr	r0, [r4, #28]
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <_ZN10Components10init_DAC_3Ev+0x58>)
 800340c:	6003      	str	r3, [r0, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 800340e:	f002 fa31 	bl	8005874 <HAL_DAC_Init>
 8003412:	b120      	cbz	r0, 800341e <_ZN10Components10init_DAC_3Ev+0x26>
	  {
	    this->Error_Handler();
 8003414:	f7ff fdd8 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC3 init");
 8003418:	480e      	ldr	r0, [pc, #56]	; (8003454 <_ZN10Components10init_DAC_3Ev+0x5c>)
 800341a:	f008 fd6b 	bl	800bef4 <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800341e:	2202      	movs	r2, #2
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003420:	2300      	movs	r3, #0
	  sConfig.DAC_SignedFormat = DISABLE;
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8003422:	e9cd 3204 	strd	r3, r2, [sp, #16]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003426:	e9cd 2306 	strd	r2, r3, [sp, #24]
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800342a:	9200      	str	r2, [sp, #0]
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800342c:	69e0      	ldr	r0, [r4, #28]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800342e:	f8ad 3004 	strh.w	r3, [sp, #4]
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003432:	2210      	movs	r2, #16
 8003434:	4669      	mov	r1, sp
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003436:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800343a:	f002 fa2f 	bl	800589c <HAL_DAC_ConfigChannel>
 800343e:	b120      	cbz	r0, 800344a <_ZN10Components10init_DAC_3Ev+0x52>
	  {
	    this->Error_Handler();
 8003440:	f7ff fdc2 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC3 init");
 8003444:	4803      	ldr	r0, [pc, #12]	; (8003454 <_ZN10Components10init_DAC_3Ev+0x5c>)
 8003446:	f008 fd55 	bl	800bef4 <iprintf>

	  }



}
 800344a:	b00c      	add	sp, #48	; 0x30
 800344c:	bd10      	pop	{r4, pc}
 800344e:	bf00      	nop
 8003450:	50001000 	.word	0x50001000
 8003454:	0800ef49 	.word	0x0800ef49

08003458 <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8003458:	b510      	push	{r4, lr}
 800345a:	4604      	mov	r4, r0
 800345c:	b08c      	sub	sp, #48	; 0x30


	  DAC_ChannelConfTypeDef sConfig = {0};
 800345e:	2230      	movs	r2, #48	; 0x30
 8003460:	2100      	movs	r1, #0
 8003462:	4668      	mov	r0, sp
 8003464:	f007 fff4 	bl	800b450 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 8003468:	6a20      	ldr	r0, [r4, #32]
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <_ZN10Components10init_DAC_4Ev+0x54>)
 800346c:	6003      	str	r3, [r0, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 800346e:	f002 fa01 	bl	8005874 <HAL_DAC_Init>
 8003472:	b120      	cbz	r0, 800347e <_ZN10Components10init_DAC_4Ev+0x26>
	  {
	    this->Error_Handler();
 8003474:	f7ff fda8 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC4 init");
 8003478:	480d      	ldr	r0, [pc, #52]	; (80034b0 <_ZN10Components10init_DAC_4Ev+0x58>)
 800347a:	f008 fd3b 	bl	800bef4 <iprintf>
	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800347e:	2200      	movs	r2, #0
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003480:	2302      	movs	r3, #2
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003482:	6a20      	ldr	r0, [r4, #32]
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003484:	9300      	str	r3, [sp, #0]
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003486:	4669      	mov	r1, sp
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003488:	e9cd 2202 	strd	r2, r2, [sp, #8]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800348c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003490:	e9cd 3206 	strd	r3, r2, [sp, #24]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003494:	f8ad 2004 	strh.w	r2, [sp, #4]
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003498:	f002 fa00 	bl	800589c <HAL_DAC_ConfigChannel>
 800349c:	b120      	cbz	r0, 80034a8 <_ZN10Components10init_DAC_4Ev+0x50>
	  {
	    this->Error_Handler();
 800349e:	f7ff fd93 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with DAC4 init");
 80034a2:	4803      	ldr	r0, [pc, #12]	; (80034b0 <_ZN10Components10init_DAC_4Ev+0x58>)
 80034a4:	f008 fd26 	bl	800bef4 <iprintf>

	  }


}
 80034a8:	b00c      	add	sp, #48	; 0x30
 80034aa:	bd10      	pop	{r4, pc}
 80034ac:	50001400 	.word	0x50001400
 80034b0:	0800ef60 	.word	0x0800ef60

080034b4 <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){

	  hopamp1_ptr->Instance = OPAMP1;
 80034b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80034b6:	4a0c      	ldr	r2, [pc, #48]	; (80034e8 <_ZN10Components9init_OA_1Ev+0x34>)
void Components::init_OA_1(void){
 80034b8:	b508      	push	{r3, lr}
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e9c0 2300 	strd	r2, r3, [r0]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 80034c0:	2240      	movs	r2, #64	; 0x40
 80034c2:	6082      	str	r2, [r0, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 80034c4:	2201      	movs	r2, #1
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80034c6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80034ca:	6103      	str	r3, [r0, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 80034cc:	7502      	strb	r2, [r0, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80034ce:	6183      	str	r3, [r0, #24]
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80034d0:	62c3      	str	r3, [r0, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 80034d2:	f003 f8f7 	bl	80066c4 <HAL_OPAMP_Init>
 80034d6:	b130      	cbz	r0, 80034e6 <_ZN10Components9init_OA_1Ev+0x32>
	  {
	    this->Error_Handler();
 80034d8:	f7ff fd76 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with OA1 init");
	  }


}
 80034dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with OA1 init");
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <_ZN10Components9init_OA_1Ev+0x38>)
 80034e2:	f008 bd07 	b.w	800bef4 <iprintf>
}
 80034e6:	bd08      	pop	{r3, pc}
 80034e8:	40010300 	.word	0x40010300
 80034ec:	0800ef77 	.word	0x0800ef77

080034f0 <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){

	    hopamp2_ptr->Instance = OPAMP2;
 80034f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80034f2:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <_ZN10Components9init_OA_2Ev+0x38>)
void Components::init_OA_2(void){
 80034f4:	b508      	push	{r3, lr}
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e9c0 2300 	strd	r2, r3, [r0]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 80034fc:	2240      	movs	r2, #64	; 0x40
 80034fe:	6082      	str	r2, [r0, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 8003500:	2201      	movs	r2, #1
 8003502:	7502      	strb	r2, [r0, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003504:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003508:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800350c:	6103      	str	r3, [r0, #16]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800350e:	6183      	str	r3, [r0, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8003510:	6243      	str	r3, [r0, #36]	; 0x24
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 8003512:	f003 f8d7 	bl	80066c4 <HAL_OPAMP_Init>
 8003516:	b130      	cbz	r0, 8003526 <_ZN10Components9init_OA_2Ev+0x36>
	    {
	      this->Error_Handler();
 8003518:	f7ff fd56 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("problem with OA2 init");

	    }


}
 800351c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		    printf("problem with OA2 init");
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <_ZN10Components9init_OA_2Ev+0x3c>)
 8003522:	f008 bce7 	b.w	800bef4 <iprintf>
}
 8003526:	bd08      	pop	{r3, pc}
 8003528:	40010304 	.word	0x40010304
 800352c:	0800ef8d 	.word	0x0800ef8d

08003530 <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){

	   hopamp3_ptr->Instance = OPAMP3;
 8003530:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003532:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <_ZN10Components9init_OA_3Ev+0x34>)
void Components::init_OA_3(void){
 8003534:	b508      	push	{r3, lr}
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003536:	2300      	movs	r3, #0
 8003538:	e9c0 2300 	strd	r2, r3, [r0]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 800353c:	2240      	movs	r2, #64	; 0x40
 800353e:	6082      	str	r2, [r0, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8003540:	2201      	movs	r2, #1
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8003542:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003546:	6103      	str	r3, [r0, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 8003548:	7502      	strb	r2, [r0, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800354a:	6183      	str	r3, [r0, #24]
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800354c:	62c3      	str	r3, [r0, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 800354e:	f003 f8b9 	bl	80066c4 <HAL_OPAMP_Init>
 8003552:	b130      	cbz	r0, 8003562 <_ZN10Components9init_OA_3Ev+0x32>
	   {
	     this->Error_Handler();
 8003554:	f7ff fd38 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
		    printf("problem with OA3 init");

	   }

}
 8003558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		    printf("problem with OA3 init");
 800355c:	4802      	ldr	r0, [pc, #8]	; (8003568 <_ZN10Components9init_OA_3Ev+0x38>)
 800355e:	f008 bcc9 	b.w	800bef4 <iprintf>
}
 8003562:	bd08      	pop	{r3, pc}
 8003564:	40010308 	.word	0x40010308
 8003568:	0800efa3 	.word	0x0800efa3

0800356c <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){

	  hopamp4_ptr->Instance = OPAMP4;
 800356c:	6b00      	ldr	r0, [r0, #48]	; 0x30
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800356e:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <_ZN10Components9init_OA_4Ev+0x38>)
void Components::init_OA_4(void){
 8003570:	b508      	push	{r3, lr}
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003572:	2300      	movs	r3, #0
 8003574:	e9c0 2300 	strd	r2, r3, [r0]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	6082      	str	r2, [r0, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 800357c:	2201      	movs	r2, #1
 800357e:	7502      	strb	r2, [r0, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003580:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003584:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003588:	6103      	str	r3, [r0, #16]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800358a:	6183      	str	r3, [r0, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800358c:	6243      	str	r3, [r0, #36]	; 0x24
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 800358e:	f003 f899 	bl	80066c4 <HAL_OPAMP_Init>
 8003592:	b130      	cbz	r0, 80035a2 <_ZN10Components9init_OA_4Ev+0x36>
	  {
	    this->Error_Handler();
 8003594:	f7ff fd18 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with OA4 init");

	  }
}
 8003598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with OA4 init");
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <_ZN10Components9init_OA_4Ev+0x3c>)
 800359e:	f008 bca9 	b.w	800bef4 <iprintf>
}
 80035a2:	bd08      	pop	{r3, pc}
 80035a4:	4001030c 	.word	0x4001030c
 80035a8:	0800efb9 	.word	0x0800efb9

080035ac <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){

	  hopamp5_ptr->Instance = OPAMP5;
 80035ac:	6b40      	ldr	r0, [r0, #52]	; 0x34
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80035ae:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <_ZN10Components9init_OA_5Ev+0x38>)
void Components::init_OA_5(void){
 80035b0:	b508      	push	{r3, lr}
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e9c0 2300 	strd	r2, r3, [r0]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 80035b8:	2240      	movs	r2, #64	; 0x40
 80035ba:	6082      	str	r2, [r0, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 80035bc:	2201      	movs	r2, #1
 80035be:	7502      	strb	r2, [r0, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80035c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80035c4:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80035c8:	6103      	str	r3, [r0, #16]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80035ca:	6183      	str	r3, [r0, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80035cc:	6243      	str	r3, [r0, #36]	; 0x24
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 80035ce:	f003 f879 	bl	80066c4 <HAL_OPAMP_Init>
 80035d2:	b130      	cbz	r0, 80035e2 <_ZN10Components9init_OA_5Ev+0x36>
	  {
	    this->Error_Handler();
 80035d4:	f7ff fcf8 	bl	8002fc8 <_ZN10Components13Error_HandlerEv.constprop.0>
	    printf("problem with OA5 init");

	  }

}
 80035d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    printf("problem with OA5 init");
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <_ZN10Components9init_OA_5Ev+0x3c>)
 80035de:	f008 bc89 	b.w	800bef4 <iprintf>
}
 80035e2:	bd08      	pop	{r3, pc}
 80035e4:	40010310 	.word	0x40010310
 80035e8:	0800efcf 	.word	0x0800efcf

080035ec <_ZN10Components15init_ComponentsEv>:
void Components::init_Components(void){
 80035ec:	b510      	push	{r4, lr}
 80035ee:	4604      	mov	r4, r0
	this->init_COMP_1();
 80035f0:	f7ff fe14 	bl	800321c <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff fe2d 	bl	8003254 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7ff fe46 	bl	800328c <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 8003600:	4620      	mov	r0, r4
 8003602:	f7ff fe5d 	bl	80032c0 <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 8003606:	4620      	mov	r0, r4
 8003608:	f7ff fe76 	bl	80032f8 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 800360c:	4620      	mov	r0, r4
 800360e:	f7ff fcf3 	bl	8002ff8 <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 8003612:	4620      	mov	r0, r4
 8003614:	f7ff fe86 	bl	8003324 <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 8003618:	4620      	mov	r0, r4
 800361a:	f7ff febd 	bl	8003398 <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 800361e:	4620      	mov	r0, r4
 8003620:	f7ff feea 	bl	80033f8 <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff ff17 	bl	8003458 <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 800362a:	4620      	mov	r0, r4
 800362c:	f7ff ff42 	bl	80034b4 <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 8003630:	4620      	mov	r0, r4
 8003632:	f7ff ff5d 	bl	80034f0 <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 8003636:	4620      	mov	r0, r4
 8003638:	f7ff fd1e 	bl	8003078 <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 800363c:	4620      	mov	r0, r4
 800363e:	f7ff ff77 	bl	8003530 <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 8003642:	4620      	mov	r0, r4
 8003644:	f7ff ff92 	bl	800356c <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8003648:	4620      	mov	r0, r4
 800364a:	f7ff fd7d 	bl	8003148 <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff ffac 	bl	80035ac <_ZN10Components9init_OA_5Ev>
		HAL_OPAMP_Start(hopamp1_ptr);
 8003654:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003656:	f003 f8b7 	bl	80067c8 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 800365a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800365c:	f003 f8b4 	bl	80067c8 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8003660:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003662:	f003 f8b1 	bl	80067c8 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 8003666:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003668:	f003 f8ae 	bl	80067c8 <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 800366c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800366e:	f003 f8ab 	bl	80067c8 <HAL_OPAMP_Start>
		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8003672:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003674:	f003 f8bd 	bl	80067f2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 8003678:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800367a:	f003 f8ba 	bl	80067f2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 800367e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003680:	f003 f8b7 	bl	80067f2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 8003684:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003686:	f003 f8b4 	bl	80067f2 <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 800368a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800368c:	f003 f8b1 	bl	80067f2 <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8003690:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003692:	217f      	movs	r1, #127	; 0x7f
 8003694:	f001 fe84 	bl	80053a0 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 8003698:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800369a:	217f      	movs	r1, #127	; 0x7f
 800369c:	f001 fe80 	bl	80053a0 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 80036a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80036a2:	217f      	movs	r1, #127	; 0x7f
}
 80036a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 80036a8:	f001 be7a 	b.w	80053a0 <HAL_ADCEx_Calibration_Start>

080036ac <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){

	return &hadc1;
}
 80036ac:	4800      	ldr	r0, [pc, #0]	; (80036b0 <_ZN10Components9get_ADC_1Ev+0x4>)
 80036ae:	4770      	bx	lr
 80036b0:	20000870 	.word	0x20000870

080036b4 <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){

	return &hadc2;
}
 80036b4:	4800      	ldr	r0, [pc, #0]	; (80036b8 <_ZN10Components9get_ADC_2Ev+0x4>)
 80036b6:	4770      	bx	lr
 80036b8:	200008dc 	.word	0x200008dc

080036bc <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){

	return &hadc5;

}
 80036bc:	4800      	ldr	r0, [pc, #0]	; (80036c0 <_ZN10Components9get_ADC_5Ev+0x4>)
 80036be:	4770      	bx	lr
 80036c0:	20000948 	.word	0x20000948

080036c4 <_ZN8DebuggerC1EP18HerelinkController>:
#include "debugger.h"

Debugger::Debugger(HerelinkController *controller){

	this->_controller = controller;
 80036c4:	6001      	str	r1, [r0, #0]


}
 80036c6:	4770      	bx	lr

080036c8 <_ZN8Debugger16displayDebugInfoEv>:


void Debugger::displayDebugInfo(void){
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4604      	mov	r4, r0
	//BIG debug function. I'm just dumping everything here, because printf still is a bit wonky and this
	//works best...


	if(HAL_GetTick() % 100 == 0){
 80036cc:	f000 fefc 	bl	80044c8 <HAL_GetTick>
 80036d0:	2364      	movs	r3, #100	; 0x64
 80036d2:	fbb0 f2f3 	udiv	r2, r0, r3
 80036d6:	fb02 0013 	mls	r0, r2, r3, r0
 80036da:	2800      	cmp	r0, #0
 80036dc:	f040 80d9 	bne.w	8003892 <_ZN8Debugger16displayDebugInfoEv+0x1ca>



		printf("Left joystick Y: %f \r\n", this->_controller->_sbus.getLeftY());
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	3034      	adds	r0, #52	; 0x34
 80036e4:	f7fe fc94 	bl	8002010 <_ZN4SBUS8getLeftYEv>
 80036e8:	ee10 0a10 	vmov	r0, s0
 80036ec:	f7fc ff54 	bl	8000598 <__aeabi_f2d>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4867      	ldr	r0, [pc, #412]	; (8003894 <_ZN8Debugger16displayDebugInfoEv+0x1cc>)
 80036f6:	f008 fbfd 	bl	800bef4 <iprintf>
		printf("\r\n");
 80036fa:	4867      	ldr	r0, [pc, #412]	; (8003898 <_ZN8Debugger16displayDebugInfoEv+0x1d0>)
 80036fc:	f008 fc80 	bl	800c000 <puts>

		printf("Left joystick X: %f \r\n", this->_controller->_sbus.getLeftX());
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	3034      	adds	r0, #52	; 0x34
 8003704:	f7fe fca6 	bl	8002054 <_ZN4SBUS8getLeftXEv>
 8003708:	ee10 0a10 	vmov	r0, s0
 800370c:	f7fc ff44 	bl	8000598 <__aeabi_f2d>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4861      	ldr	r0, [pc, #388]	; (800389c <_ZN8Debugger16displayDebugInfoEv+0x1d4>)
 8003716:	f008 fbed 	bl	800bef4 <iprintf>
		printf("\r\n");
 800371a:	485f      	ldr	r0, [pc, #380]	; (8003898 <_ZN8Debugger16displayDebugInfoEv+0x1d0>)
 800371c:	f008 fc70 	bl	800c000 <puts>

		printf("Right joystick Y:%f \r\n", this->_controller->_sbus.getRightY());
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	3034      	adds	r0, #52	; 0x34
 8003724:	f7fe fcb8 	bl	8002098 <_ZN4SBUS9getRightYEv>
 8003728:	ee10 0a10 	vmov	r0, s0
 800372c:	f7fc ff34 	bl	8000598 <__aeabi_f2d>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	485a      	ldr	r0, [pc, #360]	; (80038a0 <_ZN8Debugger16displayDebugInfoEv+0x1d8>)
 8003736:	f008 fbdd 	bl	800bef4 <iprintf>
		printf("\r\n");
 800373a:	4857      	ldr	r0, [pc, #348]	; (8003898 <_ZN8Debugger16displayDebugInfoEv+0x1d0>)
 800373c:	f008 fc60 	bl	800c000 <puts>

		printf("Right joystick X: %f \r\n", this->_controller->_sbus.getRightX());
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	3034      	adds	r0, #52	; 0x34
 8003744:	f7fe fcca 	bl	80020dc <_ZN4SBUS9getRightXEv>
 8003748:	ee10 0a10 	vmov	r0, s0
 800374c:	f7fc ff24 	bl	8000598 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4853      	ldr	r0, [pc, #332]	; (80038a4 <_ZN8Debugger16displayDebugInfoEv+0x1dc>)
 8003756:	f008 fbcd 	bl	800bef4 <iprintf>

		printf("Jogwheel: %f \r\n", this->_controller->_sbus.getJogWheel());
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	3034      	adds	r0, #52	; 0x34
 800375e:	f7fe fcdf 	bl	8002120 <_ZN4SBUS11getJogWheelEv>
 8003762:	ee10 0a10 	vmov	r0, s0
 8003766:	f7fc ff17 	bl	8000598 <__aeabi_f2d>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	484e      	ldr	r0, [pc, #312]	; (80038a8 <_ZN8Debugger16displayDebugInfoEv+0x1e0>)
 8003770:	f008 fbc0 	bl	800bef4 <iprintf>



		printf("home press: %d \r\n", this->_controller->_sbus._channels[9]);
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	484d      	ldr	r0, [pc, #308]	; (80038ac <_ZN8Debugger16displayDebugInfoEv+0x1e4>)
 8003778:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800377c:	f008 fbba 	bl	800bef4 <iprintf>

		printf("LedPWM: %d\r\n", this->_controller->_convertor.get_LEDPWM());
 8003780:	6820      	ldr	r0, [r4, #0]
 8003782:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 8003786:	f7fd fd55 	bl	8001234 <_ZN9Convertor10get_LEDPWMEv>
 800378a:	4601      	mov	r1, r0
 800378c:	4848      	ldr	r0, [pc, #288]	; (80038b0 <_ZN8Debugger16displayDebugInfoEv+0x1e8>)
 800378e:	f008 fbb1 	bl	800bef4 <iprintf>
		printf("selectorPWM: %d\r\n", this->_controller->_convertor.get_selectorPWM());
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 8003798:	f7fd fd40 	bl	800121c <_ZN9Convertor15get_selectorPWMEv>
 800379c:	4601      	mov	r1, r0
 800379e:	4845      	ldr	r0, [pc, #276]	; (80038b4 <_ZN8Debugger16displayDebugInfoEv+0x1ec>)
 80037a0:	f008 fba8 	bl	800bef4 <iprintf>
		printf("push motor PWM: %d \r\n", this->_controller->_convertor.get_pushPWM());
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 80037aa:	f7fd fd3d 	bl	8001228 <_ZN9Convertor11get_pushPWMEv>
 80037ae:	4601      	mov	r1, r0
 80037b0:	4841      	ldr	r0, [pc, #260]	; (80038b8 <_ZN8Debugger16displayDebugInfoEv+0x1f0>)
 80037b2:	f008 fb9f 	bl	800bef4 <iprintf>
		printf("fluid motor PWM: %d \r\n", this->_controller->_convertor.get_fluidPWM());
 80037b6:	6820      	ldr	r0, [r4, #0]
 80037b8:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 80037bc:	f7fd fd31 	bl	8001222 <_ZN9Convertor12get_fluidPWMEv>
 80037c0:	4601      	mov	r1, r0
 80037c2:	483e      	ldr	r0, [pc, #248]	; (80038bc <_ZN8Debugger16displayDebugInfoEv+0x1f4>)
 80037c4:	f008 fb96 	bl	800bef4 <iprintf>
		printf("fluid amount to apply %d \r\n", this->_controller->_convertor.get_fluidAmount());
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 80037ce:	f7fd fe0f 	bl	80013f0 <_ZN9Convertor15get_fluidAmountEv>
 80037d2:	4601      	mov	r1, r0
 80037d4:	483a      	ldr	r0, [pc, #232]	; (80038c0 <_ZN8Debugger16displayDebugInfoEv+0x1f8>)
 80037d6:	f008 fb8d 	bl	800bef4 <iprintf>
		printf("cleaner motor PWM: %d \r\n", this->_controller->_convertor.get_cleanerMotorPWM());
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 80037e0:	f7fd fd25 	bl	800122e <_ZN9Convertor19get_cleanerMotorPWMEv>
 80037e4:	4601      	mov	r1, r0
 80037e6:	4837      	ldr	r0, [pc, #220]	; (80038c4 <_ZN8Debugger16displayDebugInfoEv+0x1fc>)
 80037e8:	f008 fb84 	bl	800bef4 <iprintf>
		printf("\r\n");
 80037ec:	482a      	ldr	r0, [pc, #168]	; (8003898 <_ZN8Debugger16displayDebugInfoEv+0x1d0>)
 80037ee:	f008 fc07 	bl	800c000 <puts>

		//printf("battery voltage: %d \r\n", this->_controller->_convertor.get_battery_voltage());
		printf("selector position %d \r\n", this->_controller->_convertor.get_selector_position());
 80037f2:	6820      	ldr	r0, [r4, #0]
 80037f4:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 80037f8:	f7fd fd22 	bl	8001240 <_ZN9Convertor21get_selector_positionEv>
 80037fc:	4601      	mov	r1, r0
 80037fe:	4832      	ldr	r0, [pc, #200]	; (80038c8 <_ZN8Debugger16displayDebugInfoEv+0x200>)
 8003800:	f008 fb78 	bl	800bef4 <iprintf>
		printf("fluid position %d \r\n", this->_controller->_convertor.get_fluidPosition());
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 800380a:	f7fd fd79 	bl	8001300 <_ZN9Convertor17get_fluidPositionEv>
 800380e:	4601      	mov	r1, r0
 8003810:	482e      	ldr	r0, [pc, #184]	; (80038cc <_ZN8Debugger16displayDebugInfoEv+0x204>)
 8003812:	f008 fb6f 	bl	800bef4 <iprintf>
		printf("push position %d \r\n", this->_controller->_convertor.get_pushPosition());
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 800381c:	f7fd fd84 	bl	8001328 <_ZN9Convertor16get_pushPositionEv>
 8003820:	4601      	mov	r1, r0
 8003822:	482b      	ldr	r0, [pc, #172]	; (80038d0 <_ZN8Debugger16displayDebugInfoEv+0x208>)
 8003824:	f008 fb66 	bl	800bef4 <iprintf>
		printf("squaremaker ON/OFF %d \r\n", this->_controller->_convertor._trigger);
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	482a      	ldr	r0, [pc, #168]	; (80038d4 <_ZN8Debugger16displayDebugInfoEv+0x20c>)
 800382c:	f893 15fc 	ldrb.w	r1, [r3, #1532]	; 0x5fc
 8003830:	f008 fb60 	bl	800bef4 <iprintf>

		printf("\r\n");
 8003834:	4818      	ldr	r0, [pc, #96]	; (8003898 <_ZN8Debugger16displayDebugInfoEv+0x1d0>)
 8003836:	f008 fbe3 	bl	800c000 <puts>


		printf("led current:  %d \r\n", this->_controller->_convertor.get_LEDCurrent());
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 8003840:	f7fd fd86 	bl	8001350 <_ZN9Convertor14get_LEDCurrentEv>
 8003844:	4601      	mov	r1, r0
 8003846:	4824      	ldr	r0, [pc, #144]	; (80038d8 <_ZN8Debugger16displayDebugInfoEv+0x210>)
 8003848:	f008 fb54 	bl	800bef4 <iprintf>
		printf("fluid actuator current: %d \r\n", this->_controller->_convertor.get_fluidCurrent());
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 8003852:	f7fd fd91 	bl	8001378 <_ZN9Convertor16get_fluidCurrentEv>
 8003856:	4601      	mov	r1, r0
 8003858:	4820      	ldr	r0, [pc, #128]	; (80038dc <_ZN8Debugger16displayDebugInfoEv+0x214>)
 800385a:	f008 fb4b 	bl	800bef4 <iprintf>
		printf("push motor current: %d \r\n", this->_controller->_convertor.get_pushCurrent());
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 8003864:	f7fd fd9c 	bl	80013a0 <_ZN9Convertor15get_pushCurrentEv>
 8003868:	4601      	mov	r1, r0
 800386a:	481d      	ldr	r0, [pc, #116]	; (80038e0 <_ZN8Debugger16displayDebugInfoEv+0x218>)
 800386c:	f008 fb42 	bl	800bef4 <iprintf>
		printf("selector motor current: %d \r\n", this->_controller->_convertor.get_selectorCurrent());
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	f500 60bc 	add.w	r0, r0, #1504	; 0x5e0
 8003876:	f7fd fda7 	bl	80013c8 <_ZN9Convertor19get_selectorCurrentEv>
 800387a:	4601      	mov	r1, r0
 800387c:	4819      	ldr	r0, [pc, #100]	; (80038e4 <_ZN8Debugger16displayDebugInfoEv+0x21c>)
 800387e:	f008 fb39 	bl	800bef4 <iprintf>
//		printf("Mavlink received heartbeat system status %d \r\n",this->_controller->_mavlink._received_heartbeat.system_status);
//		printf("Mavlink received heartbeat vehicle type %d \r\n",this->_controller->_mavlink._received_heartbeat.system_status);
//		printf("Mavlink comp id: %d \r\n", this->_controller->_mavlink._mavlink_received_header.compid);
//		printf("Mavlink msg id: %d \r\n", this->_controller->_mavlink._mavlink_received_header.msgid);

		printf("\r\n");
 8003882:	4805      	ldr	r0, [pc, #20]	; (8003898 <_ZN8Debugger16displayDebugInfoEv+0x1d0>)
 8003884:	f008 fbbc 	bl	800c000 <puts>


	}


}
 8003888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("\r\n");
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <_ZN8Debugger16displayDebugInfoEv+0x1d0>)
 800388e:	f008 bbb7 	b.w	800c000 <puts>
}
 8003892:	bd10      	pop	{r4, pc}
 8003894:	0800efe5 	.word	0x0800efe5
 8003898:	0800eccb 	.word	0x0800eccb
 800389c:	0800effc 	.word	0x0800effc
 80038a0:	0800f013 	.word	0x0800f013
 80038a4:	0800f02a 	.word	0x0800f02a
 80038a8:	0800f042 	.word	0x0800f042
 80038ac:	0800f052 	.word	0x0800f052
 80038b0:	0800f064 	.word	0x0800f064
 80038b4:	0800f071 	.word	0x0800f071
 80038b8:	0800f083 	.word	0x0800f083
 80038bc:	0800f099 	.word	0x0800f099
 80038c0:	0800f0b0 	.word	0x0800f0b0
 80038c4:	0800f0cc 	.word	0x0800f0cc
 80038c8:	0800f0e5 	.word	0x0800f0e5
 80038cc:	0800f0fd 	.word	0x0800f0fd
 80038d0:	0800f112 	.word	0x0800f112
 80038d4:	0800f126 	.word	0x0800f126
 80038d8:	0800f13f 	.word	0x0800f13f
 80038dc:	0800f153 	.word	0x0800f153
 80038e0:	0800f171 	.word	0x0800f171
 80038e4:	0800f18b 	.word	0x0800f18b

080038e8 <main>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;



int main(void){
 80038e8:	b500      	push	{lr}
 80038ea:	f6ad 0da4 	subw	sp, sp, #2212	; 0x8a4
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 80038ee:	f000 fdcf 	bl	8004490 <HAL_Init>
	HAL_Delay(100);
 80038f2:	2064      	movs	r0, #100	; 0x64
 80038f4:	f000 fdee 	bl	80044d4 <HAL_Delay>


	//Initialize clock/DMA/... configurations and components.
	Initializer init(&huart1, &huart2);
 80038f8:	4a16      	ldr	r2, [pc, #88]	; (8003954 <main+0x6c>)
 80038fa:	4917      	ldr	r1, [pc, #92]	; (8003958 <main+0x70>)
 80038fc:	a815      	add	r0, sp, #84	; 0x54
 80038fe:	f7ff fb49 	bl	8002f94 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
	Components components;
 8003902:	ac04      	add	r4, sp, #16
	init.init_Configs();
 8003904:	a815      	add	r0, sp, #84	; 0x54
 8003906:	f7ff fa57 	bl	8002db8 <_ZN11Initializer12init_ConfigsEv>
	Components components;
 800390a:	4914      	ldr	r1, [pc, #80]	; (800395c <main+0x74>)
 800390c:	2244      	movs	r2, #68	; 0x44
 800390e:	4620      	mov	r0, r4
 8003910:	f007 fd90 	bl	800b434 <memcpy>
	components.init_Components();
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff fe69 	bl	80035ec <_ZN10Components15init_ComponentsEv>
	HAL_Delay(100);
 800391a:	2064      	movs	r0, #100	; 0x64
 800391c:	f000 fdda 	bl	80044d4 <HAL_Delay>


	//HerelinkController object contains all sbus, altimeter & mavlink functionality. ctrl + click to expand
	HerelinkController controller(&huart2, &huart1, &init, &components);
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <main+0x70>)
 8003922:	490c      	ldr	r1, [pc, #48]	; (8003954 <main+0x6c>)
 8003924:	9400      	str	r4, [sp, #0]
 8003926:	ab15      	add	r3, sp, #84	; 0x54
 8003928:	a88a      	add	r0, sp, #552	; 0x228
 800392a:	f7fd fdf9 	bl	8001520 <_ZN18HerelinkControllerC1EP20__UART_HandleTypeDefS1_P11InitializerP10Components>
	Debugger debugger(&controller);
 800392e:	a98a      	add	r1, sp, #552	; 0x228
 8003930:	a803      	add	r0, sp, #12
 8003932:	f7ff fec7 	bl	80036c4 <_ZN8DebuggerC1EP18HerelinkController>
	HAL_Delay(1000);
 8003936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800393a:	f000 fdcb 	bl	80044d4 <HAL_Delay>

	printf("\r\n sanity check \r \n");
 800393e:	4808      	ldr	r0, [pc, #32]	; (8003960 <main+0x78>)
 8003940:	f008 fb5e 	bl	800c000 <puts>
	/* Main loop */
	while (1){

			//Keeping it full speed for now
			//HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
			controller.update();
 8003944:	a88a      	add	r0, sp, #552	; 0x228
 8003946:	f7fd fe17 	bl	8001578 <_ZN18HerelinkController6updateEv>

			//all the printf functions in the debugtger class can cause problems while restarting the controller
			//or the PCB, so leave it commented when not debugging

			debugger.displayDebugInfo();
 800394a:	a803      	add	r0, sp, #12
 800394c:	f7ff febc 	bl	80036c8 <_ZN8Debugger16displayDebugInfoEv>
	while (1){
 8003950:	e7f8      	b.n	8003944 <main+0x5c>
 8003952:	bf00      	nop
 8003954:	20000cc0 	.word	0x20000cc0
 8003958:	20000c30 	.word	0x20000c30
 800395c:	0800df8c 	.word	0x0800df8c
 8003960:	0800f1a9 	.word	0x0800f1a9

08003964 <Error_Handler>:
}




void Error_Handler(void){
 8003964:	b508      	push	{r3, lr}


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8003966:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800396a:	480b      	ldr	r0, [pc, #44]	; (8003998 <Error_Handler+0x34>)
 800396c:	f002 fafb 	bl	8005f66 <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER. Resetting system \r\n");
 8003970:	480a      	ldr	r0, [pc, #40]	; (800399c <Error_Handler+0x38>)
 8003972:	f008 fb45 	bl	800c000 <puts>
		HAL_Delay(1000);
 8003976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800397a:	f000 fdab 	bl	80044d4 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800397e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003982:	4907      	ldr	r1, [pc, #28]	; (80039a0 <Error_Handler+0x3c>)
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <Error_Handler+0x40>)
 8003986:	68ca      	ldr	r2, [r1, #12]
 8003988:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800398c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800398e:	60cb      	str	r3, [r1, #12]
 8003990:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003994:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003996:	e7fd      	b.n	8003994 <Error_Handler+0x30>
 8003998:	48000800 	.word	0x48000800
 800399c:	0800f1bc 	.word	0x0800f1bc
 80039a0:	e000ed00 	.word	0xe000ed00
 80039a4:	05fa0004 	.word	0x05fa0004

080039a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_MspInit+0x2c>)
 80039aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60
 80039b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80039b4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	f002 0201 	and.w	r2, r2, #1
 80039ba:	9200      	str	r2, [sp, #0]
 80039bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d0:	b002      	add	sp, #8
 80039d2:	4770      	bx	lr
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	b0a0      	sub	sp, #128	; 0x80
 80039dc:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039de:	2214      	movs	r2, #20
 80039e0:	2100      	movs	r1, #0
 80039e2:	a806      	add	r0, sp, #24
 80039e4:	f007 fd34 	bl	800b450 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039e8:	2254      	movs	r2, #84	; 0x54
 80039ea:	2100      	movs	r1, #0
 80039ec:	a80b      	add	r0, sp, #44	; 0x2c
 80039ee:	f007 fd2f 	bl	800b450 <memset>
  if(hadc->Instance==ADC1)
 80039f2:	682b      	ldr	r3, [r5, #0]
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f8:	d169      	bne.n	8003ace <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a00:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003a02:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a06:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a08:	f004 fa04 	bl	8007e14 <HAL_RCCEx_PeriphCLKConfig>
 8003a0c:	b108      	cbz	r0, 8003a12 <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 8003a0e:	f7ff ffa9 	bl	8003964 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a12:	4a6c      	ldr	r2, [pc, #432]	; (8003bc4 <HAL_ADC_MspInit+0x1ec>)
 8003a14:	6813      	ldr	r3, [r2, #0]
 8003a16:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a18:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_ADC_MspInit+0x1f0>)
 8003a1e:	d108      	bne.n	8003a32 <HAL_ADC_MspInit+0x5a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a26:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a2a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a2e:	9201      	str	r2, [sp, #4]
 8003a30:	9a01      	ldr	r2, [sp, #4]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3c:	f002 0201 	and.w	r2, r2, #1
 8003a40:	9202      	str	r2, [sp, #8]
 8003a42:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a46:	f042 0202 	orr.w	r2, r2, #2
 8003a4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	9303      	str	r3, [sp, #12]
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a56:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a58:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a5c:	2301      	movs	r3, #1
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8003a5e:	a906      	add	r1, sp, #24
 8003a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a64:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8003a68:	f002 f9ac 	bl	8005dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8003a6c:	f641 0302 	movw	r3, #6146	; 0x1802
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	4856      	ldr	r0, [pc, #344]	; (8003bcc <HAL_ADC_MspInit+0x1f4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a74:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a76:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7a:	f002 f9a3 	bl	8005dc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8003a7e:	4c54      	ldr	r4, [pc, #336]	; (8003bd0 <HAL_ADC_MspInit+0x1f8>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003a80:	4a54      	ldr	r2, [pc, #336]	; (8003bd4 <HAL_ADC_MspInit+0x1fc>)
 8003a82:	2305      	movs	r3, #5
 8003a84:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8e:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003a96:	e9c4 3606 	strd	r3, r6, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a9a:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa0:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003aa4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003aa6:	f002 f81f 	bl	8005ae8 <HAL_DMA_Init>
 8003aaa:	b108      	cbz	r0, 8003ab0 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8003aac:	f7ff ff5a 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ab6:	656c      	str	r4, [r5, #84]	; 0x54
 8003ab8:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003aba:	f001 fe87 	bl	80057cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003abe:	2012      	movs	r0, #18
 8003ac0:	f001 feb6 	bl	8005830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 8003ac4:	4844      	ldr	r0, [pc, #272]	; (8003bd8 <HAL_ADC_MspInit+0x200>)
 8003ac6:	f008 fa9b 	bl	800c000 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003aca:	b020      	add	sp, #128	; 0x80
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC2)
 8003ace:	4a43      	ldr	r2, [pc, #268]	; (8003bdc <HAL_ADC_MspInit+0x204>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d141      	bne.n	8003b58 <HAL_ADC_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad8:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ada:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003adc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ae0:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ae2:	f004 f997 	bl	8007e14 <HAL_RCCEx_PeriphCLKConfig>
 8003ae6:	b108      	cbz	r0, 8003aec <HAL_ADC_MspInit+0x114>
      Error_Handler();
 8003ae8:	f7ff ff3c 	bl	8003964 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003aec:	4a35      	ldr	r2, [pc, #212]	; (8003bc4 <HAL_ADC_MspInit+0x1ec>)
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003af2:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003af4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003af6:	d109      	bne.n	8003b0c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003af8:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <HAL_ADC_MspInit+0x1f0>)
 8003afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b00:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b08:	9304      	str	r3, [sp, #16]
 8003b0a:	9b04      	ldr	r3, [sp, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 8003b0c:	4c34      	ldr	r4, [pc, #208]	; (8003be0 <HAL_ADC_MspInit+0x208>)
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003b0e:	4e35      	ldr	r6, [pc, #212]	; (8003be4 <HAL_ADC_MspInit+0x20c>)
 8003b10:	2324      	movs	r3, #36	; 0x24
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b16:	f04f 0c80 	mov.w	ip, #128	; 0x80
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003b1a:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b1e:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b22:	2300      	movs	r3, #0
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b28:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003b2c:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003b30:	4620      	mov	r0, r4
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b36:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003b38:	f001 ffd6 	bl	8005ae8 <HAL_DMA_Init>
 8003b3c:	b108      	cbz	r0, 8003b42 <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 8003b3e:	f7ff ff11 	bl	8003964 <Error_Handler>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003b42:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003b44:	656c      	str	r4, [r5, #84]	; 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003b46:	4611      	mov	r1, r2
 8003b48:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003b4a:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003b4c:	f001 fe3e 	bl	80057cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003b50:	2012      	movs	r0, #18
 8003b52:	f001 fe6d 	bl	8005830 <HAL_NVIC_EnableIRQ>
 8003b56:	e7b8      	b.n	8003aca <HAL_ADC_MspInit+0xf2>
  else if(hadc->Instance==ADC5)
 8003b58:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <HAL_ADC_MspInit+0x210>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d1b5      	bne.n	8003aca <HAL_ADC_MspInit+0xf2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b62:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b64:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003b66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b6a:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6c:	f004 f952 	bl	8007e14 <HAL_RCCEx_PeriphCLKConfig>
 8003b70:	b108      	cbz	r0, 8003b76 <HAL_ADC_MspInit+0x19e>
      Error_Handler();
 8003b72:	f7ff fef7 	bl	8003964 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_ADC_MspInit+0x1f0>)
    hdma_adc5.Instance = DMA1_Channel4;
 8003b78:	4c1c      	ldr	r4, [pc, #112]	; (8003bec <HAL_ADC_MspInit+0x214>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b80:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003b84:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_ADC_MspInit+0x218>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8a:	9305      	str	r3, [sp, #20]
 8003b8c:	9b05      	ldr	r3, [sp, #20]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003b8e:	2327      	movs	r3, #39	; 0x27
 8003b90:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b9a:	2300      	movs	r3, #0
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b9c:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba4:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8003ba8:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003bac:	4620      	mov	r0, r4
    hdma_adc5.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003bb4:	f001 ff98 	bl	8005ae8 <HAL_DMA_Init>
 8003bb8:	b108      	cbz	r0, 8003bbe <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8003bba:	f7ff fed3 	bl	8003964 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003bbe:	656c      	str	r4, [r5, #84]	; 0x54
 8003bc0:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8003bc2:	e782      	b.n	8003aca <HAL_ADC_MspInit+0xf2>
 8003bc4:	20000d50 	.word	0x20000d50
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	48000400 	.word	0x48000400
 8003bd0:	20000d54 	.word	0x20000d54
 8003bd4:	4002001c 	.word	0x4002001c
 8003bd8:	0800f1f0 	.word	0x0800f1f0
 8003bdc:	50000100 	.word	0x50000100
 8003be0:	20000db4 	.word	0x20000db4
 8003be4:	40020030 	.word	0x40020030
 8003be8:	50000600 	.word	0x50000600
 8003bec:	20000e14 	.word	0x20000e14
 8003bf0:	40020044 	.word	0x40020044

08003bf4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003bf4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf6:	2214      	movs	r2, #20
{
 8003bf8:	b08a      	sub	sp, #40	; 0x28
 8003bfa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	eb0d 0002 	add.w	r0, sp, r2
 8003c02:	f007 fc25 	bl	800b450 <memset>
  if(hcomp->Instance==COMP2)
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <HAL_COMP_MspInit+0xac>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d114      	bne.n	8003c38 <HAL_COMP_MspInit+0x44>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_COMP_MspInit+0xb0>)
 8003c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	9b01      	ldr	r3, [sp, #4]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	2303      	movs	r3, #3
 8003c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	a905      	add	r1, sp, #20
 8003c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    PB14     ------> COMP7_INP
    */
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f002 f8c8 	bl	8005dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 8003c34:	b00a      	add	sp, #40	; 0x28
 8003c36:	bd10      	pop	{r4, pc}
  else if(hcomp->Instance==COMP4)
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_COMP_MspInit+0xb4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d110      	bne.n	8003c60 <HAL_COMP_MspInit+0x6c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_COMP_MspInit+0xb0>)
 8003c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c42:	f042 0202 	orr.w	r2, r2, #2
 8003c46:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 8003c52:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8003c54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c56:	2303      	movs	r3, #3
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8003c58:	4814      	ldr	r0, [pc, #80]	; (8003cac <HAL_COMP_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c5a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8003c5c:	a905      	add	r1, sp, #20
 8003c5e:	e7e7      	b.n	8003c30 <HAL_COMP_MspInit+0x3c>
  else if(hcomp->Instance==COMP5)
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <HAL_COMP_MspInit+0xbc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10c      	bne.n	8003c80 <HAL_COMP_MspInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_COMP_MspInit+0xb0>)
 8003c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c6a:	f042 0202 	orr.w	r2, r2, #2
 8003c6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	9303      	str	r3, [sp, #12]
 8003c78:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8003c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c7e:	e7e9      	b.n	8003c54 <HAL_COMP_MspInit+0x60>
  else if(hcomp->Instance==COMP7)
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <HAL_COMP_MspInit+0xc0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d1d6      	bne.n	8003c34 <HAL_COMP_MspInit+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <HAL_COMP_MspInit+0xb0>)
 8003c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c8a:	f042 0202 	orr.w	r2, r2, #2
 8003c8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	9304      	str	r3, [sp, #16]
 8003c98:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8003c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c9e:	e7d9      	b.n	8003c54 <HAL_COMP_MspInit+0x60>
 8003ca0:	40010204 	.word	0x40010204
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	4001020c 	.word	0x4001020c
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	40010210 	.word	0x40010210
 8003cb4:	40010218 	.word	0x40010218

08003cb8 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC1)
 8003cb8:	6803      	ldr	r3, [r0, #0]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_DAC_MspInit+0x78>)
 8003cbc:	4293      	cmp	r3, r2
{
 8003cbe:	b084      	sub	sp, #16
  if(hdac->Instance==DAC1)
 8003cc0:	d10b      	bne.n	8003cda <HAL_DAC_MspInit+0x22>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_DAC_MspInit+0x7c>)
 8003cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8003cd6:	b004      	add	sp, #16
 8003cd8:	4770      	bx	lr
  else if(hdac->Instance==DAC2)
 8003cda:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <HAL_DAC_MspInit+0x80>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10a      	bne.n	8003cf6 <HAL_DAC_MspInit+0x3e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_DAC_MspInit+0x7c>)
 8003ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003ce8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	9b01      	ldr	r3, [sp, #4]
 8003cf4:	e7ef      	b.n	8003cd6 <HAL_DAC_MspInit+0x1e>
  else if(hdac->Instance==DAC3)
 8003cf6:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_DAC_MspInit+0x84>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10a      	bne.n	8003d12 <HAL_DAC_MspInit+0x5a>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_DAC_MspInit+0x7c>)
 8003cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d04:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	9b02      	ldr	r3, [sp, #8]
 8003d10:	e7e1      	b.n	8003cd6 <HAL_DAC_MspInit+0x1e>
  else if(hdac->Instance==DAC4)
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_DAC_MspInit+0x88>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d1de      	bne.n	8003cd6 <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_DAC_MspInit+0x7c>)
 8003d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d1c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d20:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	9b03      	ldr	r3, [sp, #12]
}
 8003d2c:	e7d3      	b.n	8003cd6 <HAL_DAC_MspInit+0x1e>
 8003d2e:	bf00      	nop
 8003d30:	50000800 	.word	0x50000800
 8003d34:	40021000 	.word	0x40021000
 8003d38:	50000c00 	.word	0x50000c00
 8003d3c:	50001000 	.word	0x50001000
 8003d40:	50001400 	.word	0x50001400

08003d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d44:	b530      	push	{r4, r5, lr}
 8003d46:	b09d      	sub	sp, #116	; 0x74
 8003d48:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4a:	2214      	movs	r2, #20
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	a802      	add	r0, sp, #8
 8003d50:	f007 fb7e 	bl	800b450 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d54:	2254      	movs	r2, #84	; 0x54
 8003d56:	2100      	movs	r1, #0
 8003d58:	a807      	add	r0, sp, #28
 8003d5a:	f007 fb79 	bl	800b450 <memset>
  if(hi2c->Instance==I2C2)
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_I2C_MspInit+0x8c>)
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d131      	bne.n	8003dca <HAL_I2C_MspInit+0x86>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003d66:	2380      	movs	r3, #128	; 0x80
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d68:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003d6a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d6c:	f004 f852 	bl	8007e14 <HAL_RCCEx_PeriphCLKConfig>
 8003d70:	b108      	cbz	r0, 8003d76 <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8003d72:	f7ff fdf7 	bl	8003964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d76:	4c17      	ldr	r4, [pc, #92]	; (8003dd4 <HAL_I2C_MspInit+0x90>)
 8003d78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	9300      	str	r3, [sp, #0]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d88:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d8e:	2312      	movs	r3, #18
 8003d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d96:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	a902      	add	r1, sp, #8
 8003d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d9e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	e9cd 5504 	strd	r5, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da4:	f002 f80e 	bl	8005dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dae:	65a3      	str	r3, [r4, #88]	; 0x58
 8003db0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	9301      	str	r3, [sp, #4]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003db8:	2021      	movs	r0, #33	; 0x21
 8003dba:	462a      	mov	r2, r5
 8003dbc:	4629      	mov	r1, r5
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dbe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003dc0:	f001 fd04 	bl	80057cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003dc4:	2021      	movs	r0, #33	; 0x21
 8003dc6:	f001 fd33 	bl	8005830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003dca:	b01d      	add	sp, #116	; 0x74
 8003dcc:	bd30      	pop	{r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	40005800 	.word	0x40005800
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003dd8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dda:	2214      	movs	r2, #20
{
 8003ddc:	b08a      	sub	sp, #40	; 0x28
 8003dde:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	2100      	movs	r1, #0
 8003de2:	eb0d 0002 	add.w	r0, sp, r2
 8003de6:	f007 fb33 	bl	800b450 <memset>
  if(hopamp->Instance==OPAMP1)
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_OPAMP_MspInit+0xcc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d114      	bne.n	8003e1c <HAL_OPAMP_MspInit+0x44>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_OPAMP_MspInit+0xd0>)
 8003df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	9b00      	ldr	r3, [sp, #0]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 8003e06:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**OPAMP2 GPIO Configuration
    PA5     ------> OPAMP2_VINM0
    PA7     ------> OPAMP2_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003e08:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0e:	a905      	add	r1, sp, #20
 8003e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    PB15     ------> OPAMP5_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e14:	f001 ffd6 	bl	8005dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 8003e18:	b00a      	add	sp, #40	; 0x28
 8003e1a:	bd10      	pop	{r4, pc}
  else if(hopamp->Instance==OPAMP2)
 8003e1c:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_OPAMP_MspInit+0xd4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10b      	bne.n	8003e3a <HAL_OPAMP_MspInit+0x62>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_OPAMP_MspInit+0xd0>)
 8003e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003e36:	23a0      	movs	r3, #160	; 0xa0
 8003e38:	e7e6      	b.n	8003e08 <HAL_OPAMP_MspInit+0x30>
  else if(hopamp->Instance==OPAMP3)
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_OPAMP_MspInit+0xd8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d110      	bne.n	8003e62 <HAL_OPAMP_MspInit+0x8a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_OPAMP_MspInit+0xd0>)
 8003e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e44:	f042 0202 	orr.w	r2, r2, #2
 8003e48:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 8003e54:	2305      	movs	r3, #5
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8003e56:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e58:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5a:	4816      	ldr	r0, [pc, #88]	; (8003eb4 <HAL_OPAMP_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e5c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5e:	a905      	add	r1, sp, #20
 8003e60:	e7d8      	b.n	8003e14 <HAL_OPAMP_MspInit+0x3c>
  else if(hopamp->Instance==OPAMP4)
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <HAL_OPAMP_MspInit+0xe0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10c      	bne.n	8003e82 <HAL_OPAMP_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_OPAMP_MspInit+0xd0>)
 8003e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e6c:	f042 0202 	orr.w	r2, r2, #2
 8003e70:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	9303      	str	r3, [sp, #12]
 8003e7a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8003e7c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003e80:	e7e9      	b.n	8003e56 <HAL_OPAMP_MspInit+0x7e>
  else if(hopamp->Instance==OPAMP5)
 8003e82:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_OPAMP_MspInit+0xe4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d1c7      	bne.n	8003e18 <HAL_OPAMP_MspInit+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_OPAMP_MspInit+0xd0>)
 8003e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e8c:	f042 0202 	orr.w	r2, r2, #2
 8003e90:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	9304      	str	r3, [sp, #16]
 8003e9a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8003e9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003ea0:	e7d9      	b.n	8003e56 <HAL_OPAMP_MspInit+0x7e>
 8003ea2:	bf00      	nop
 8003ea4:	40010300 	.word	0x40010300
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40010304 	.word	0x40010304
 8003eb0:	40010308 	.word	0x40010308
 8003eb4:	48000400 	.word	0x48000400
 8003eb8:	4001030c 	.word	0x4001030c
 8003ebc:	40010310 	.word	0x40010310

08003ec0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003ec0:	6803      	ldr	r3, [r0, #0]
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	; (8003f70 <HAL_TIM_Base_MspInit+0xb0>)
 8003ec4:	4293      	cmp	r3, r2
{
 8003ec6:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_TIM_Base_MspInit+0xb4>)
 8003ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003ede:	b006      	add	sp, #24
 8003ee0:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d10b      	bne.n	8003f00 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ee8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	9b01      	ldr	r3, [sp, #4]
 8003efe:	e7ee      	b.n	8003ede <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM4)
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_TIM_Base_MspInit+0xb8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10a      	bne.n	8003f1c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_TIM_Base_MspInit+0xb4>)
 8003f08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f0a:	f042 0204 	orr.w	r2, r2, #4
 8003f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	9b02      	ldr	r3, [sp, #8]
 8003f1a:	e7e0      	b.n	8003ede <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_TIM_Base_MspInit+0xbc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10a      	bne.n	8003f38 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_TIM_Base_MspInit+0xb4>)
 8003f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2a:	661a      	str	r2, [r3, #96]	; 0x60
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	9b03      	ldr	r3, [sp, #12]
 8003f36:	e7d2      	b.n	8003ede <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM16)
 8003f38:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <HAL_TIM_Base_MspInit+0xc0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d10a      	bne.n	8003f54 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <HAL_TIM_Base_MspInit+0xb4>)
 8003f40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f46:	661a      	str	r2, [r3, #96]	; 0x60
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	9304      	str	r3, [sp, #16]
 8003f50:	9b04      	ldr	r3, [sp, #16]
 8003f52:	e7c4      	b.n	8003ede <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM20)
 8003f54:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <HAL_TIM_Base_MspInit+0xc4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d1c1      	bne.n	8003ede <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_TIM_Base_MspInit+0xb4>)
 8003f5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	9b05      	ldr	r3, [sp, #20]
}
 8003f6e:	e7b6      	b.n	8003ede <HAL_TIM_Base_MspInit+0x1e>
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40014400 	.word	0x40014400
 8003f84:	40015000 	.word	0x40015000

08003f88 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8003f88:	6802      	ldr	r2, [r0, #0]
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_TIM_PWM_MspInit+0x24>)
 8003f8c:	429a      	cmp	r2, r3
{
 8003f8e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8003f90:	d10a      	bne.n	8003fa8 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f92:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8003f96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f98:	f042 0202 	orr.w	r2, r2, #2
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fa8:	b002      	add	sp, #8
 8003faa:	4770      	bx	lr
 8003fac:	40000400 	.word	0x40000400

08003fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb6:	2214      	movs	r2, #20
 8003fb8:	2100      	movs	r1, #0
 8003fba:	a807      	add	r0, sp, #28
 8003fbc:	f007 fa48 	bl	800b450 <memset>
  if(htim->Instance==TIM1)
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	4a3f      	ldr	r2, [pc, #252]	; (80040c0 <HAL_TIM_MspPostInit+0x110>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d115      	bne.n	8003ff4 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fc8:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <HAL_TIM_MspPostInit+0x114>)
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 8003fca:	483f      	ldr	r0, [pc, #252]	; (80040c8 <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fce:	f042 0220 	orr.w	r2, r2, #32
 8003fd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fdc:	2101      	movs	r1, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003fe6:	2306      	movs	r3, #6
 8003fe8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 8003fea:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8003fec:	f001 feea 	bl	8005dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003ff0:	b00c      	add	sp, #48	; 0x30
 8003ff2:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 8003ff4:	4a35      	ldr	r2, [pc, #212]	; (80040cc <HAL_TIM_MspPostInit+0x11c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d111      	bne.n	800401e <HAL_TIM_MspPostInit+0x6e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffa:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <HAL_TIM_MspPostInit+0x114>)
 8003ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ffe:	f042 0202 	orr.w	r2, r2, #2
 8004002:	64da      	str	r2, [r3, #76]	; 0x4c
 8004004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	9302      	str	r3, [sp, #8]
 800400c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 800400e:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 8004010:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 8004016:	482e      	ldr	r0, [pc, #184]	; (80040d0 <HAL_TIM_MspPostInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004018:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 800401a:	a907      	add	r1, sp, #28
 800401c:	e7e6      	b.n	8003fec <HAL_TIM_MspPostInit+0x3c>
  else if(htim->Instance==TIM4)
 800401e:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <HAL_TIM_MspPostInit+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10c      	bne.n	800403e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004024:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <HAL_TIM_MspPostInit+0x114>)
 8004026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004028:	f042 0202 	orr.w	r2, r2, #2
 800402c:	64da      	str	r2, [r3, #76]	; 0x4c
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	9303      	str	r3, [sp, #12]
 8004036:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 8004038:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800403c:	e7e8      	b.n	8004010 <HAL_TIM_MspPostInit+0x60>
  else if(htim->Instance==TIM8)
 800403e:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <HAL_TIM_MspPostInit+0x128>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d126      	bne.n	8004092 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <HAL_TIM_MspPostInit+0x114>)
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8004046:	4825      	ldr	r0, [pc, #148]	; (80040dc <HAL_TIM_MspPostInit+0x12c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800404a:	f042 0204 	orr.w	r2, r2, #4
 800404e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004052:	f002 0204 	and.w	r2, r2, #4
 8004056:	9204      	str	r2, [sp, #16]
 8004058:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800405c:	f042 0202 	orr.w	r2, r2, #2
 8004060:	64da      	str	r2, [r3, #76]	; 0x4c
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	9305      	str	r3, [sp, #20]
 800406a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2402      	movs	r4, #2
 800406e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004072:	e9cd 3407 	strd	r3, r4, [sp, #28]
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8004076:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8004078:	2306      	movs	r3, #6
 800407a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 800407c:	f001 fea2 	bl	8005dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 8004080:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800408e:	230a      	movs	r3, #10
 8004090:	e7c1      	b.n	8004016 <HAL_TIM_MspPostInit+0x66>
  else if(htim->Instance==TIM16)
 8004092:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <HAL_TIM_MspPostInit+0x130>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d1ab      	bne.n	8003ff0 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_TIM_MspPostInit+0x114>)
 800409a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	9306      	str	r3, [sp, #24]
 80040aa:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	2302      	movs	r3, #2
 80040b0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80040b4:	2301      	movs	r3, #1
 80040b6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 80040b8:	a907      	add	r1, sp, #28
 80040ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040be:	e795      	b.n	8003fec <HAL_TIM_MspPostInit+0x3c>
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40021000 	.word	0x40021000
 80040c8:	48001400 	.word	0x48001400
 80040cc:	40000400 	.word	0x40000400
 80040d0:	48000400 	.word	0x48000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40013400 	.word	0x40013400
 80040dc:	48000800 	.word	0x48000800
 80040e0:	40014400 	.word	0x40014400

080040e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	b0a1      	sub	sp, #132	; 0x84
 80040e8:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ea:	2214      	movs	r2, #20
 80040ec:	2100      	movs	r1, #0
 80040ee:	a806      	add	r0, sp, #24
 80040f0:	f007 f9ae 	bl	800b450 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040f4:	2254      	movs	r2, #84	; 0x54
 80040f6:	2100      	movs	r1, #0
 80040f8:	a80b      	add	r0, sp, #44	; 0x2c
 80040fa:	f007 f9a9 	bl	800b450 <memset>
  if(huart->Instance==USART1)
 80040fe:	6833      	ldr	r3, [r6, #0]
 8004100:	4a55      	ldr	r2, [pc, #340]	; (8004258 <HAL_UART_MspInit+0x174>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d15d      	bne.n	80041c2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004106:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004108:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800410a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800410c:	f003 fe82 	bl	8007e14 <HAL_RCCEx_PeriphCLKConfig>
 8004110:	b108      	cbz	r0, 8004116 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8004112:	f7ff fc27 	bl	8003964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004116:	4b51      	ldr	r3, [pc, #324]	; (800425c <HAL_UART_MspInit+0x178>)
 8004118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800411a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
 8004120:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004122:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004126:	9201      	str	r2, [sp, #4]
 8004128:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	64da      	str	r2, [r3, #76]	; 0x4c
 8004132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004134:	f002 0201 	and.w	r2, r2, #1
 8004138:	9202      	str	r2, [sp, #8]
 800413a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800413c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800413e:	f042 0202 	orr.w	r2, r2, #2
 8004142:	64da      	str	r2, [r3, #76]	; 0x4c
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	9303      	str	r3, [sp, #12]
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800414e:	2407      	movs	r4, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004150:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004152:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004158:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415a:	a906      	add	r1, sp, #24
 800415c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004164:	e9cd 5508 	strd	r5, r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004168:	f001 fe2c 	bl	8005dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800416c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416e:	483c      	ldr	r0, [pc, #240]	; (8004260 <HAL_UART_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004170:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004172:	a906      	add	r1, sp, #24

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8004174:	4c3b      	ldr	r4, [pc, #236]	; (8004264 <HAL_UART_MspInit+0x180>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	e9cd 5508 	strd	r5, r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417e:	f001 fe21 	bl	8005dc4 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004182:	4839      	ldr	r0, [pc, #228]	; (8004268 <HAL_UART_MspInit+0x184>)
 8004184:	2318      	movs	r3, #24
 8004186:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800418a:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800418c:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004190:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004196:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800419a:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800419e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80041a0:	f001 fca2 	bl	8005ae8 <HAL_DMA_Init>
 80041a4:	b108      	cbz	r0, 80041aa <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80041a6:	f7ff fbdd 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80041ae:	67f4      	str	r4, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041b0:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80041b2:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041b4:	f001 fb0a 	bl	80057cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041b8:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041ba:	f001 fb39 	bl	8005830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041be:	b021      	add	sp, #132	; 0x84
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 80041c2:	4a2a      	ldr	r2, [pc, #168]	; (800426c <HAL_UART_MspInit+0x188>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d1fa      	bne.n	80041be <HAL_UART_MspInit+0xda>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041c8:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ca:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041cc:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ce:	f003 fe21 	bl	8007e14 <HAL_RCCEx_PeriphCLKConfig>
 80041d2:	b108      	cbz	r0, 80041d8 <HAL_UART_MspInit+0xf4>
      Error_Handler();
 80041d4:	f7ff fbc6 	bl	8003964 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041d8:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_UART_MspInit+0x178>)
    hdma_usart2_rx.Instance = DMA2_Channel1;
 80041da:	4c25      	ldr	r4, [pc, #148]	; (8004270 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80041dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80041e2:	659a      	str	r2, [r3, #88]	; 0x58
 80041e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80041ea:	9204      	str	r2, [sp, #16]
 80041ec:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80041f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	9305      	str	r3, [sp, #20]
 80041fe:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	f248 0204 	movw	r2, #32772	; 0x8004
 8004204:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004208:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800420e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004214:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004216:	e9cd 5508 	strd	r5, r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421a:	f001 fdd3 	bl	8005dc4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800421e:	4915      	ldr	r1, [pc, #84]	; (8004274 <HAL_UART_MspInit+0x190>)
 8004220:	231a      	movs	r3, #26
 8004222:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004226:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004228:	e9c4 3504 	strd	r3, r5, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800422c:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800422e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004232:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004236:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800423a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800423c:	f001 fc54 	bl	8005ae8 <HAL_DMA_Init>
 8004240:	b108      	cbz	r0, 8004246 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8004242:	f7ff fb8f 	bl	8003964 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800424a:	67f4      	str	r4, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800424c:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800424e:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004250:	f001 fabc 	bl	80057cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004254:	2026      	movs	r0, #38	; 0x26
 8004256:	e7b0      	b.n	80041ba <HAL_UART_MspInit+0xd6>
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	48000400 	.word	0x48000400
 8004264:	20000e74 	.word	0x20000e74
 8004268:	40020008 	.word	0x40020008
 800426c:	40004400 	.word	0x40004400
 8004270:	20000ed4 	.word	0x20000ed4
 8004274:	40020408 	.word	0x40020408

08004278 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <NMI_Handler>

0800427a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427a:	e7fe      	b.n	800427a <HardFault_Handler>

0800427c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <MemManage_Handler>

0800427e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <BusFault_Handler>

08004280 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004280:	e7fe      	b.n	8004280 <UsageFault_Handler>

08004282 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004282:	4770      	bx	lr

08004284 <DebugMon_Handler>:
 8004284:	4770      	bx	lr

08004286 <PendSV_Handler>:
 8004286:	4770      	bx	lr

08004288 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004288:	f000 b912 	b.w	80044b0 <HAL_IncTick>

0800428c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <DMA1_Channel1_IRQHandler+0x8>)
 800428e:	f001 bd4e 	b.w	8005d2e <HAL_DMA_IRQHandler>
 8004292:	bf00      	nop
 8004294:	20000e74 	.word	0x20000e74

08004298 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004298:	4801      	ldr	r0, [pc, #4]	; (80042a0 <DMA1_Channel2_IRQHandler+0x8>)
 800429a:	f001 bd48 	b.w	8005d2e <HAL_DMA_IRQHandler>
 800429e:	bf00      	nop
 80042a0:	20000d54 	.word	0x20000d54

080042a4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80042a4:	4801      	ldr	r0, [pc, #4]	; (80042ac <DMA1_Channel3_IRQHandler+0x8>)
 80042a6:	f001 bd42 	b.w	8005d2e <HAL_DMA_IRQHandler>
 80042aa:	bf00      	nop
 80042ac:	20000db4 	.word	0x20000db4

080042b0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <DMA1_Channel4_IRQHandler+0x8>)
 80042b2:	f001 bd3c 	b.w	8005d2e <HAL_DMA_IRQHandler>
 80042b6:	bf00      	nop
 80042b8:	20000e14 	.word	0x20000e14

080042bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80042bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042be:	4804      	ldr	r0, [pc, #16]	; (80042d0 <ADC1_2_IRQHandler+0x14>)
 80042c0:	f000 faea 	bl	8004898 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80042c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80042c8:	4802      	ldr	r0, [pc, #8]	; (80042d4 <ADC1_2_IRQHandler+0x18>)
 80042ca:	f000 bae5 	b.w	8004898 <HAL_ADC_IRQHandler>
 80042ce:	bf00      	nop
 80042d0:	20000870 	.word	0x20000870
 80042d4:	200008dc 	.word	0x200008dc

080042d8 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <USB_LP_IRQHandler+0x8>)
 80042da:	f002 bbb5 	b.w	8006a48 <HAL_PCD_IRQHandler>
 80042de:	bf00      	nop
 80042e0:	20002454 	.word	0x20002454

080042e4 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <I2C2_EV_IRQHandler+0x8>)
 80042e6:	f002 b99b 	b.w	8006620 <HAL_I2C_EV_IRQHandler>
 80042ea:	bf00      	nop
 80042ec:	20000ab8 	.word	0x20000ab8

080042f0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <USART1_IRQHandler+0x8>)
 80042f2:	f004 bd21 	b.w	8008d38 <HAL_UART_IRQHandler>
 80042f6:	bf00      	nop
 80042f8:	20000c30 	.word	0x20000c30

080042fc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <USART2_IRQHandler+0x8>)
 80042fe:	f004 bd1b 	b.w	8008d38 <HAL_UART_IRQHandler>
 8004302:	bf00      	nop
 8004304:	20000cc0 	.word	0x20000cc0

08004308 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <DMA2_Channel1_IRQHandler+0x8>)
 800430a:	f001 bd10 	b.w	8005d2e <HAL_DMA_IRQHandler>
 800430e:	bf00      	nop
 8004310:	20000ed4 	.word	0x20000ed4

08004314 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004314:	2001      	movs	r0, #1
 8004316:	4770      	bx	lr

08004318 <_kill>:

int _kill(int pid, int sig)
{
 8004318:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800431a:	f007 f849 	bl	800b3b0 <__errno>
 800431e:	2316      	movs	r3, #22
 8004320:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	bd08      	pop	{r3, pc}

08004328 <_exit>:

void _exit (int status)
{
 8004328:	b508      	push	{r3, lr}
  errno = EINVAL;
 800432a:	f007 f841 	bl	800b3b0 <__errno>
 800432e:	2316      	movs	r3, #22
 8004330:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004332:	e7fe      	b.n	8004332 <_exit+0xa>

08004334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	460d      	mov	r5, r1
 8004338:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433a:	460e      	mov	r6, r1
 800433c:	1b73      	subs	r3, r6, r5
 800433e:	429c      	cmp	r4, r3
 8004340:	dc01      	bgt.n	8004346 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004342:	4620      	mov	r0, r4
 8004344:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004346:	f3af 8000 	nop.w
 800434a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434e:	e7f5      	b.n	800433c <_read+0x8>

08004350 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8004350:	3801      	subs	r0, #1
 8004352:	2801      	cmp	r0, #1
{
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	460d      	mov	r5, r1
 8004358:	4614      	mov	r4, r2
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 800435a:	d80f      	bhi.n	800437c <_write+0x2c>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 800435c:	4621      	mov	r1, r4
 800435e:	4628      	mov	r0, r5
 8004360:	f006 fdd8 	bl	800af14 <CDC_Transmit_FS>
 8004364:	b2c0      	uxtb	r0, r0
		        } while (result == USBD_BUSY);
 8004366:	2801      	cmp	r0, #1
 8004368:	d0f8      	beq.n	800435c <_write+0xc>
		        if (result != USBD_OK)
 800436a:	b128      	cbz	r0, 8004378 <_write+0x28>
		        {
		            errno = EIO;
 800436c:	f007 f820 	bl	800b3b0 <__errno>
 8004370:	2305      	movs	r3, #5
		            return -1;
		        }
		        return len;
		    }
		    errno = EBADF;
 8004372:	6003      	str	r3, [r0, #0]
		    return -1;
 8004374:	f04f 34ff 	mov.w	r4, #4294967295
}
 8004378:	4620      	mov	r0, r4
 800437a:	bd38      	pop	{r3, r4, r5, pc}
		    errno = EBADF;
 800437c:	f007 f818 	bl	800b3b0 <__errno>
 8004380:	2309      	movs	r3, #9
 8004382:	e7f6      	b.n	8004372 <_write+0x22>

08004384 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	4770      	bx	lr

0800438a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800438a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800438e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004390:	2000      	movs	r0, #0
 8004392:	4770      	bx	lr

08004394 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004394:	2001      	movs	r0, #1
 8004396:	4770      	bx	lr

08004398 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004398:	2000      	movs	r0, #0
 800439a:	4770      	bx	lr

0800439c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <_sbrk+0x30>)
 800439e:	6811      	ldr	r1, [r2, #0]
{
 80043a0:	b510      	push	{r4, lr}
 80043a2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80043a4:	b909      	cbnz	r1, 80043aa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80043a6:	490a      	ldr	r1, [pc, #40]	; (80043d0 <_sbrk+0x34>)
 80043a8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043aa:	6810      	ldr	r0, [r2, #0]
 80043ac:	4909      	ldr	r1, [pc, #36]	; (80043d4 <_sbrk+0x38>)
 80043ae:	4c0a      	ldr	r4, [pc, #40]	; (80043d8 <_sbrk+0x3c>)
 80043b0:	4403      	add	r3, r0
 80043b2:	1b09      	subs	r1, r1, r4
 80043b4:	428b      	cmp	r3, r1
 80043b6:	d906      	bls.n	80043c6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80043b8:	f006 fffa 	bl	800b3b0 <__errno>
 80043bc:	230c      	movs	r3, #12
 80043be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80043c4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80043c6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80043c8:	e7fc      	b.n	80043c4 <_sbrk+0x28>
 80043ca:	bf00      	nop
 80043cc:	20000f34 	.word	0x20000f34
 80043d0:	20002978 	.word	0x20002978
 80043d4:	20020000 	.word	0x20020000
 80043d8:	00000400 	.word	0x00000400

080043dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043dc:	4a03      	ldr	r2, [pc, #12]	; (80043ec <SystemInit+0x10>)
 80043de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043f0:	480d      	ldr	r0, [pc, #52]	; (8004428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043f4:	480d      	ldr	r0, [pc, #52]	; (800442c <LoopForever+0x6>)
  ldr r1, =_edata
 80043f6:	490e      	ldr	r1, [pc, #56]	; (8004430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043f8:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <LoopForever+0xe>)
  movs r3, #0
 80043fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80043fc:	e002      	b.n	8004404 <LoopCopyDataInit>

080043fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004402:	3304      	adds	r3, #4

08004404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004408:	d3f9      	bcc.n	80043fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800440a:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <LoopForever+0x12>)
  ldr r4, =_ebss
 800440c:	4c0b      	ldr	r4, [pc, #44]	; (800443c <LoopForever+0x16>)
  movs r3, #0
 800440e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004410:	e001      	b.n	8004416 <LoopFillZerobss>

08004412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004414:	3204      	adds	r2, #4

08004416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004418:	d3fb      	bcc.n	8004412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800441a:	f7ff ffdf 	bl	80043dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800441e:	f006 ffcd 	bl	800b3bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004422:	f7ff fa61 	bl	80038e8 <main>

08004426 <LoopForever>:

LoopForever:
    b LoopForever
 8004426:	e7fe      	b.n	8004426 <LoopForever>
  ldr   r0, =_estack
 8004428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800442c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004430:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004434:	0800f68c 	.word	0x0800f68c
  ldr r2, =_sbss
 8004438:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 800443c:	20002978 	.word	0x20002978

08004440 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004440:	e7fe      	b.n	8004440 <ADC3_IRQHandler>
	...

08004444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004444:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_InitTick+0x40>)
{
 8004448:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	b908      	cbnz	r0, 8004452 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800444e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004450:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004452:	4a0d      	ldr	r2, [pc, #52]	; (8004488 <HAL_InitTick+0x44>)
 8004454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004458:	fbb3 f3f0 	udiv	r3, r3, r0
 800445c:	6810      	ldr	r0, [r2, #0]
 800445e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004462:	f001 f9f3 	bl	800584c <HAL_SYSTICK_Config>
 8004466:	4604      	mov	r4, r0
 8004468:	2800      	cmp	r0, #0
 800446a:	d1f0      	bne.n	800444e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800446c:	2d0f      	cmp	r5, #15
 800446e:	d8ee      	bhi.n	800444e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004470:	4602      	mov	r2, r0
 8004472:	4629      	mov	r1, r5
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	f001 f9a8 	bl	80057cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_InitTick+0x48>)
 800447e:	4620      	mov	r0, r4
 8004480:	601d      	str	r5, [r3, #0]
  return status;
 8004482:	e7e5      	b.n	8004450 <HAL_InitTick+0xc>
 8004484:	20000004 	.word	0x20000004
 8004488:	20000000 	.word	0x20000000
 800448c:	20000008 	.word	0x20000008

08004490 <HAL_Init>:
{
 8004490:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004492:	2003      	movs	r0, #3
 8004494:	f001 f988 	bl	80057a8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004498:	200f      	movs	r0, #15
 800449a:	f7ff ffd3 	bl	8004444 <HAL_InitTick>
 800449e:	4604      	mov	r4, r0
 80044a0:	b918      	cbnz	r0, 80044aa <HAL_Init+0x1a>
    HAL_MspInit();
 80044a2:	f7ff fa81 	bl	80039a8 <HAL_MspInit>
}
 80044a6:	4620      	mov	r0, r4
 80044a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80044aa:	2401      	movs	r4, #1
 80044ac:	e7fb      	b.n	80044a6 <HAL_Init+0x16>
	...

080044b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80044b0:	4a03      	ldr	r2, [pc, #12]	; (80044c0 <HAL_IncTick+0x10>)
 80044b2:	4904      	ldr	r1, [pc, #16]	; (80044c4 <HAL_IncTick+0x14>)
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	6809      	ldr	r1, [r1, #0]
 80044b8:	440b      	add	r3, r1
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000f38 	.word	0x20000f38
 80044c4:	20000004 	.word	0x20000004

080044c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044c8:	4b01      	ldr	r3, [pc, #4]	; (80044d0 <HAL_GetTick+0x8>)
 80044ca:	6818      	ldr	r0, [r3, #0]
}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000f38 	.word	0x20000f38

080044d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7ff fff6 	bl	80044c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044dc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80044de:	bf1c      	itt	ne
 80044e0:	4b05      	ldrne	r3, [pc, #20]	; (80044f8 <HAL_Delay+0x24>)
 80044e2:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80044e4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80044e6:	bf18      	it	ne
 80044e8:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044ea:	f7ff ffed 	bl	80044c8 <HAL_GetTick>
 80044ee:	1b43      	subs	r3, r0, r5
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d3fa      	bcc.n	80044ea <HAL_Delay+0x16>
  {
  }
}
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
 80044f6:	bf00      	nop
 80044f8:	20000004 	.word	0x20000004

080044fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044fc:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044fe:	0dcc      	lsrs	r4, r1, #23
 8004500:	f004 0404 	and.w	r4, r4, #4
 8004504:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8004506:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800450a:	5823      	ldr	r3, [r4, r0]
 800450c:	2507      	movs	r5, #7
 800450e:	408d      	lsls	r5, r1
 8004510:	ea23 0305 	bic.w	r3, r3, r5
 8004514:	fa02 f101 	lsl.w	r1, r2, r1
 8004518:	430b      	orrs	r3, r1
 800451a:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800451c:	bd30      	pop	{r4, r5, pc}

0800451e <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800451e:	6880      	ldr	r0, [r0, #8]
}
 8004520:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8004524:	4770      	bx	lr
	...

08004528 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004528:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800452a:	2300      	movs	r3, #0
 800452c:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800452e:	4604      	mov	r4, r0
 8004530:	2800      	cmp	r0, #0
 8004532:	f000 80fb 	beq.w	800472c <HAL_ADC_Init+0x204>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004536:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004538:	b925      	cbnz	r5, 8004544 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800453a:	f7ff fa4d 	bl	80039d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800453e:	6625      	str	r5, [r4, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004540:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004544:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004546:	6883      	ldr	r3, [r0, #8]
 8004548:	0099      	lsls	r1, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800454a:	bf41      	itttt	mi
 800454c:	6883      	ldrmi	r3, [r0, #8]
 800454e:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 8004552:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8004556:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004558:	6883      	ldr	r3, [r0, #8]
 800455a:	00da      	lsls	r2, r3, #3
 800455c:	f140 80a2 	bpl.w	80046a4 <HAL_ADC_Init+0x17c>
 8004560:	6883      	ldr	r3, [r0, #8]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	f100 80b5 	bmi.w	80046d2 <HAL_ADC_Init+0x1aa>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004568:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800456a:	f043 0310 	orr.w	r3, r3, #16
 800456e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004570:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004578:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800457a:	f7ff ffd0 	bl	800451e <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800457e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004586:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004588:	f040 80cd 	bne.w	8004726 <HAL_ADC_Init+0x1fe>
    ADC_STATE_CLR_SET(hadc->State,
 800458c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004590:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004594:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8004596:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004598:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459a:	07de      	lsls	r6, r3, #31
 800459c:	d40e      	bmi.n	80045bc <HAL_ADC_Init+0x94>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800459e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80045a2:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_ADC_Init+0x208>)
 80045a4:	d002      	beq.n	80045ac <HAL_ADC_Init+0x84>
 80045a6:	4290      	cmp	r0, r2
 80045a8:	f040 8095 	bne.w	80046d6 <HAL_ADC_Init+0x1ae>
 80045ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045b0:	689d      	ldr	r5, [r3, #8]
 80045b2:	6893      	ldr	r3, [r2, #8]
 80045b4:	432b      	orrs	r3, r5
 80045b6:	07dd      	lsls	r5, r3, #31
 80045b8:	f140 809b 	bpl.w	80046f2 <HAL_ADC_Init+0x1ca>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80045bc:	68e5      	ldr	r5, [r4, #12]
 80045be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80045c4:	432b      	orrs	r3, r5
 80045c6:	68a5      	ldr	r5, [r4, #8]
 80045c8:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045ca:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045cc:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80045ce:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045d6:	bf02      	ittt	eq
 80045d8:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 80045da:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80045de:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045e4:	b122      	cbz	r2, 80045f0 <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80045e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045e8:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045ec:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ee:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045f0:	68c5      	ldr	r5, [r0, #12]
 80045f2:	4a50      	ldr	r2, [pc, #320]	; (8004734 <HAL_ADC_Init+0x20c>)
 80045f4:	402a      	ands	r2, r5
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60c3      	str	r3, [r0, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80045fa:	6903      	ldr	r3, [r0, #16]
 80045fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80045fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004602:	4313      	orrs	r3, r2
 8004604:	6103      	str	r3, [r0, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004606:	f7ff ff8a 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800460a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	f002 0208 	and.w	r2, r2, #8
 8004612:	4302      	orrs	r2, r0
 8004614:	d12e      	bne.n	8004674 <HAL_ADC_Init+0x14c>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004616:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004618:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800461c:	7f25      	ldrb	r5, [r4, #28]

      if (hadc->Init.GainCompensation != 0UL)
 800461e:	6926      	ldr	r6, [r4, #16]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004620:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004622:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004626:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800462a:	f020 0002 	bic.w	r0, r0, #2
 800462e:	4302      	orrs	r2, r0
 8004630:	60da      	str	r2, [r3, #12]
      if (hadc->Init.GainCompensation != 0UL)
 8004632:	4d41      	ldr	r5, [pc, #260]	; (8004738 <HAL_ADC_Init+0x210>)
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004634:	6918      	ldr	r0, [r3, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004636:	2e00      	cmp	r6, #0
 8004638:	d06a      	beq.n	8004710 <HAL_ADC_Init+0x1e8>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800463a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800463e:	6118      	str	r0, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004640:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004644:	402a      	ands	r2, r5
 8004646:	4332      	orrs	r2, r6
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004648:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800464c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004650:	2a01      	cmp	r2, #1
 8004652:	d164      	bne.n	800471e <HAL_ADC_Init+0x1f6>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004654:	e9d4 2511 	ldrd	r2, r5, [r4, #68]	; 0x44
 8004658:	6918      	ldr	r0, [r3, #16]
 800465a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800465e:	f020 0004 	bic.w	r0, r0, #4
 8004662:	432a      	orrs	r2, r5
 8004664:	4302      	orrs	r2, r0
 8004666:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004668:	4302      	orrs	r2, r0
 800466a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800466c:	4302      	orrs	r2, r0
 800466e:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004672:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004674:	6962      	ldr	r2, [r4, #20]
 8004676:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004678:	bf05      	ittet	eq
 800467a:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 800467c:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800467e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004680:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004684:	bf06      	itte	eq
 8004686:	f020 000f 	biceq.w	r0, r0, #15
 800468a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800468c:	f022 020f 	bicne.w	r2, r2, #15
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004692:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004694:	f023 0303 	bic.w	r3, r3, #3
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800469e:	4608      	mov	r0, r1
 80046a0:	b002      	add	sp, #8
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80046a4:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a6:	4a25      	ldr	r2, [pc, #148]	; (800473c <HAL_ADC_Init+0x214>)
 80046a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80046ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6083      	str	r3, [r0, #8]
 80046b6:	4b22      	ldr	r3, [pc, #136]	; (8004740 <HAL_ADC_Init+0x218>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 80046c2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80046c4:	9b01      	ldr	r3, [sp, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f43f af4a 	beq.w	8004560 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80046cc:	9b01      	ldr	r3, [sp, #4]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	e7f7      	b.n	80046c2 <HAL_ADC_Init+0x19a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d2:	2100      	movs	r1, #0
 80046d4:	e751      	b.n	800457a <HAL_ADC_Init+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_ADC_Init+0x21c>)
 80046d8:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <HAL_ADC_Init+0x220>)
 80046da:	689d      	ldr	r5, [r3, #8]
 80046dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046e4:	432b      	orrs	r3, r5
 80046e6:	4313      	orrs	r3, r2
 80046e8:	07db      	lsls	r3, r3, #31
 80046ea:	f53f af67 	bmi.w	80045bc <HAL_ADC_Init+0x94>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046ee:	4b17      	ldr	r3, [pc, #92]	; (800474c <HAL_ADC_Init+0x224>)
 80046f0:	e007      	b.n	8004702 <HAL_ADC_Init+0x1da>
 80046f2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80046f6:	4b16      	ldr	r3, [pc, #88]	; (8004750 <HAL_ADC_Init+0x228>)
 80046f8:	d003      	beq.n	8004702 <HAL_ADC_Init+0x1da>
 80046fa:	4d14      	ldr	r5, [pc, #80]	; (800474c <HAL_ADC_Init+0x224>)
 80046fc:	4290      	cmp	r0, r2
 80046fe:	bf18      	it	ne
 8004700:	462b      	movne	r3, r5
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	6865      	ldr	r5, [r4, #4]
 8004706:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800470a:	432a      	orrs	r2, r5
 800470c:	609a      	str	r2, [r3, #8]
}
 800470e:	e755      	b.n	80045bc <HAL_ADC_Init+0x94>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004710:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004714:	6118      	str	r0, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004716:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800471a:	402a      	ands	r2, r5
 800471c:	e794      	b.n	8004648 <HAL_ADC_Init+0x120>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	e7a5      	b.n	8004672 <HAL_ADC_Init+0x14a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004726:	f043 0310 	orr.w	r3, r3, #16
 800472a:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800472c:	2101      	movs	r1, #1
 800472e:	e7b6      	b.n	800469e <HAL_ADC_Init+0x176>
 8004730:	50000100 	.word	0x50000100
 8004734:	fff04007 	.word	0xfff04007
 8004738:	ffffc000 	.word	0xffffc000
 800473c:	00030d40 	.word	0x00030d40
 8004740:	20000000 	.word	0x20000000
 8004744:	50000400 	.word	0x50000400
 8004748:	50000600 	.word	0x50000600
 800474c:	50000700 	.word	0x50000700
 8004750:	50000300 	.word	0x50000300

08004754 <HAL_ADC_PollForConversion>:
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004754:	6803      	ldr	r3, [r0, #0]
 8004756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800475a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475e:	4604      	mov	r4, r0
 8004760:	460f      	mov	r7, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004762:	d01d      	beq.n	80047a0 <HAL_ADC_PollForConversion+0x4c>
 8004764:	4842      	ldr	r0, [pc, #264]	; (8004870 <HAL_ADC_PollForConversion+0x11c>)
 8004766:	4a43      	ldr	r2, [pc, #268]	; (8004874 <HAL_ADC_PollForConversion+0x120>)
 8004768:	4943      	ldr	r1, [pc, #268]	; (8004878 <HAL_ADC_PollForConversion+0x124>)
 800476a:	4283      	cmp	r3, r0
 800476c:	bf08      	it	eq
 800476e:	460a      	moveq	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004770:	69a5      	ldr	r5, [r4, #24]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004772:	6896      	ldr	r6, [r2, #8]
 8004774:	2d08      	cmp	r5, #8
 8004776:	f006 061f 	and.w	r6, r6, #31
 800477a:	d023      	beq.n	80047c4 <HAL_ADC_PollForConversion+0x70>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800477c:	2e09      	cmp	r6, #9
 800477e:	d811      	bhi.n	80047a4 <HAL_ADC_PollForConversion+0x50>
 8004780:	f240 2221 	movw	r2, #545	; 0x221
 8004784:	40f2      	lsrs	r2, r6
 8004786:	07d1      	lsls	r1, r2, #31
 8004788:	d50c      	bpl.n	80047a4 <HAL_ADC_PollForConversion+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004790:	d017      	beq.n	80047c2 <HAL_ADC_PollForConversion+0x6e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004792:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004794:	f043 0320 	orr.w	r3, r3, #32
 8004798:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 800479a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047a0:	4a35      	ldr	r2, [pc, #212]	; (8004878 <HAL_ADC_PollForConversion+0x124>)
 80047a2:	e7e5      	b.n	8004770 <HAL_ADC_PollForConversion+0x1c>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a8:	d009      	beq.n	80047be <HAL_ADC_PollForConversion+0x6a>
 80047aa:	4831      	ldr	r0, [pc, #196]	; (8004870 <HAL_ADC_PollForConversion+0x11c>)
 80047ac:	4a32      	ldr	r2, [pc, #200]	; (8004878 <HAL_ADC_PollForConversion+0x124>)
 80047ae:	4931      	ldr	r1, [pc, #196]	; (8004874 <HAL_ADC_PollForConversion+0x120>)
 80047b0:	4283      	cmp	r3, r0
 80047b2:	bf18      	it	ne
 80047b4:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80047b6:	6893      	ldr	r3, [r2, #8]
 80047b8:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80047bc:	e7e8      	b.n	8004790 <HAL_ADC_PollForConversion+0x3c>
 80047be:	4a2e      	ldr	r2, [pc, #184]	; (8004878 <HAL_ADC_PollForConversion+0x124>)
 80047c0:	e7f9      	b.n	80047b6 <HAL_ADC_PollForConversion+0x62>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80047c2:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 80047c4:	f7ff fe80 	bl	80044c8 <HAL_GetTick>
 80047c8:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	422a      	tst	r2, r5
 80047d0:	d02d      	beq.n	800482e <HAL_ADC_PollForConversion+0xda>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80047d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d8:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80047e0:	d10f      	bne.n	8004802 <HAL_ADC_PollForConversion+0xae>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80047e2:	7f62      	ldrb	r2, [r4, #29]
 80047e4:	b96a      	cbnz	r2, 8004802 <HAL_ADC_PollForConversion+0xae>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	0710      	lsls	r0, r2, #28
 80047ea:	d50a      	bpl.n	8004802 <HAL_ADC_PollForConversion+0xae>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80047ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f2:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80047f6:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047f8:	bf5e      	ittt	pl
 80047fa:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 80047fc:	f042 0201 	orrpl.w	r2, r2, #1
 8004800:	65e2      	strpl	r2, [r4, #92]	; 0x5c
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_ADC_PollForConversion+0x11c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d028      	beq.n	800485a <HAL_ADC_PollForConversion+0x106>
 8004808:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <HAL_ADC_PollForConversion+0xce>
 8004810:	491a      	ldr	r1, [pc, #104]	; (800487c <HAL_ADC_PollForConversion+0x128>)
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004812:	2e09      	cmp	r6, #9
 8004814:	d824      	bhi.n	8004860 <HAL_ADC_PollForConversion+0x10c>
 8004816:	f240 2221 	movw	r2, #545	; 0x221
 800481a:	fa22 f606 	lsr.w	r6, r2, r6
 800481e:	07f2      	lsls	r2, r6, #31
 8004820:	d51e      	bpl.n	8004860 <HAL_ADC_PollForConversion+0x10c>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004822:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004824:	2d08      	cmp	r5, #8
 8004826:	d11d      	bne.n	8004864 <HAL_ADC_PollForConversion+0x110>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004828:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800482a:	2000      	movs	r0, #0
 800482c:	e7b6      	b.n	800479c <HAL_ADC_PollForConversion+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800482e:	1c7a      	adds	r2, r7, #1
 8004830:	d0cc      	beq.n	80047cc <HAL_ADC_PollForConversion+0x78>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004832:	f7ff fe49 	bl	80044c8 <HAL_GetTick>
 8004836:	eba0 0008 	sub.w	r0, r0, r8
 800483a:	42b8      	cmp	r0, r7
 800483c:	d801      	bhi.n	8004842 <HAL_ADC_PollForConversion+0xee>
 800483e:	2f00      	cmp	r7, #0
 8004840:	d1c3      	bne.n	80047ca <HAL_ADC_PollForConversion+0x76>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	402b      	ands	r3, r5
 8004848:	d1bf      	bne.n	80047ca <HAL_ADC_PollForConversion+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800484a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
          __HAL_UNLOCK(hadc);
 800484c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004850:	f042 0204 	orr.w	r2, r2, #4
 8004854:	65e2      	str	r2, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
 8004856:	2003      	movs	r0, #3
 8004858:	e7a0      	b.n	800479c <HAL_ADC_PollForConversion+0x48>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800485a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800485e:	e7d8      	b.n	8004812 <HAL_ADC_PollForConversion+0xbe>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004860:	68c8      	ldr	r0, [r1, #12]
 8004862:	e7df      	b.n	8004824 <HAL_ADC_PollForConversion+0xd0>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004864:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8004868:	d1df      	bne.n	800482a <HAL_ADC_PollForConversion+0xd6>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800486a:	220c      	movs	r2, #12
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e795      	b.n	800479c <HAL_ADC_PollForConversion+0x48>
 8004870:	50000100 	.word	0x50000100
 8004874:	50000700 	.word	0x50000700
 8004878:	50000300 	.word	0x50000300
 800487c:	50000400 	.word	0x50000400

08004880 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004880:	6803      	ldr	r3, [r0, #0]
 8004882:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004884:	4770      	bx	lr

08004886 <HAL_ADC_ConvCpltCallback>:
 8004886:	4770      	bx	lr

08004888 <HAL_ADC_ConvHalfCpltCallback>:
 8004888:	4770      	bx	lr

0800488a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800488a:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800488c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800488e:	f7ff fffb 	bl	8004888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004892:	bd08      	pop	{r3, pc}

08004894 <HAL_ADC_LevelOutOfWindowCallback>:
 8004894:	4770      	bx	lr

08004896 <HAL_ADC_ErrorCallback>:
 8004896:	4770      	bx	lr

08004898 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004898:	6802      	ldr	r2, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800489a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 800489e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80048a0:	6816      	ldr	r6, [r2, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80048a2:	6855      	ldr	r5, [r2, #4]
{
 80048a4:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a6:	f000 8111 	beq.w	8004acc <HAL_ADC_IRQHandler+0x234>
 80048aa:	4893      	ldr	r0, [pc, #588]	; (8004af8 <HAL_ADC_IRQHandler+0x260>)
 80048ac:	4b93      	ldr	r3, [pc, #588]	; (8004afc <HAL_ADC_IRQHandler+0x264>)
 80048ae:	4994      	ldr	r1, [pc, #592]	; (8004b00 <HAL_ADC_IRQHandler+0x268>)
 80048b0:	4282      	cmp	r2, r0
 80048b2:	bf18      	it	ne
 80048b4:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80048b6:	689f      	ldr	r7, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80048b8:	07b1      	lsls	r1, r6, #30
 80048ba:	f007 071f 	and.w	r7, r7, #31
 80048be:	d50e      	bpl.n	80048de <HAL_ADC_IRQHandler+0x46>
 80048c0:	07aa      	lsls	r2, r5, #30
 80048c2:	d50c      	bpl.n	80048de <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048c6:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80048c8:	bf5e      	ittt	pl
 80048ca:	6de3      	ldrpl	r3, [r4, #92]	; 0x5c
 80048cc:	f443 6300 	orrpl.w	r3, r3, #2048	; 0x800
 80048d0:	65e3      	strpl	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 fdb4 	bl	8005440 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	2202      	movs	r2, #2
 80048dc:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048de:	0770      	lsls	r0, r6, #29
 80048e0:	d501      	bpl.n	80048e6 <HAL_ADC_IRQHandler+0x4e>
 80048e2:	0769      	lsls	r1, r5, #29
 80048e4:	d403      	bmi.n	80048ee <HAL_ADC_IRQHandler+0x56>
 80048e6:	0732      	lsls	r2, r6, #28
 80048e8:	d541      	bpl.n	800496e <HAL_ADC_IRQHandler+0xd6>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048ea:	072b      	lsls	r3, r5, #28
 80048ec:	d53f      	bpl.n	800496e <HAL_ADC_IRQHandler+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048f0:	06d8      	lsls	r0, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048f2:	bf58      	it	pl
 80048f4:	6de3      	ldrpl	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048f6:	6820      	ldr	r0, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048f8:	bf5c      	itt	pl
 80048fa:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
 80048fe:	65e3      	strpl	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004900:	68c3      	ldr	r3, [r0, #12]
 8004902:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8004906:	d12c      	bne.n	8004962 <HAL_ADC_IRQHandler+0xca>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004908:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <HAL_ADC_IRQHandler+0x260>)
 800490a:	4298      	cmp	r0, r3
 800490c:	f000 80e0 	beq.w	8004ad0 <HAL_ADC_IRQHandler+0x238>
 8004910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004914:	4298      	cmp	r0, r3
 8004916:	d109      	bne.n	800492c <HAL_ADC_IRQHandler+0x94>
 8004918:	4a7a      	ldr	r2, [pc, #488]	; (8004b04 <HAL_ADC_IRQHandler+0x26c>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800491a:	2f09      	cmp	r7, #9
 800491c:	f200 80db 	bhi.w	8004ad6 <HAL_ADC_IRQHandler+0x23e>
 8004920:	f240 2321 	movw	r3, #545	; 0x221
 8004924:	40fb      	lsrs	r3, r7
 8004926:	07d9      	lsls	r1, r3, #31
 8004928:	f140 80d5 	bpl.w	8004ad6 <HAL_ADC_IRQHandler+0x23e>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800492c:	68c3      	ldr	r3, [r0, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800492e:	049b      	lsls	r3, r3, #18
 8004930:	d417      	bmi.n	8004962 <HAL_ADC_IRQHandler+0xca>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004932:	6803      	ldr	r3, [r0, #0]
 8004934:	0719      	lsls	r1, r3, #28
 8004936:	d514      	bpl.n	8004962 <HAL_ADC_IRQHandler+0xca>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004938:	f7ff fdf1 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 800493c:	2800      	cmp	r0, #0
 800493e:	f040 80cc 	bne.w	8004ada <HAL_ADC_IRQHandler+0x242>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	6853      	ldr	r3, [r2, #4]
 8004946:	f023 030c 	bic.w	r3, r3, #12
 800494a:	6053      	str	r3, [r2, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800494c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800494e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004952:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004954:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004956:	04da      	lsls	r2, r3, #19
 8004958:	d403      	bmi.n	8004962 <HAL_ADC_IRQHandler+0xca>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800495a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8004962:	4620      	mov	r0, r4
 8004964:	f7ff ff8f 	bl	8004886 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	220c      	movs	r2, #12
 800496c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800496e:	06b3      	lsls	r3, r6, #26
 8004970:	d501      	bpl.n	8004976 <HAL_ADC_IRQHandler+0xde>
 8004972:	06a8      	lsls	r0, r5, #26
 8004974:	d403      	bmi.n	800497e <HAL_ADC_IRQHandler+0xe6>
 8004976:	0671      	lsls	r1, r6, #25
 8004978:	d543      	bpl.n	8004a02 <HAL_ADC_IRQHandler+0x16a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800497a:	066a      	lsls	r2, r5, #25
 800497c:	d541      	bpl.n	8004a02 <HAL_ADC_IRQHandler+0x16a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800497e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004980:	4a5d      	ldr	r2, [pc, #372]	; (8004af8 <HAL_ADC_IRQHandler+0x260>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004982:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004984:	bf5e      	ittt	pl
 8004986:	6de3      	ldrpl	r3, [r4, #92]	; 0x5c
 8004988:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800498c:	65e3      	strpl	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800498e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004990:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004992:	68d9      	ldr	r1, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004994:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004996:	f400 70c0 	and.w	r0, r0, #384	; 0x180
 800499a:	f000 80a7 	beq.w	8004aec <HAL_ADC_IRQHandler+0x254>
 800499e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d108      	bne.n	80049b8 <HAL_ADC_IRQHandler+0x120>
 80049a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049aa:	b12f      	cbz	r7, 80049b8 <HAL_ADC_IRQHandler+0x120>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80049ac:	f1a7 0c06 	sub.w	ip, r7, #6
 80049b0:	f1bc 0f01 	cmp.w	ip, #1
 80049b4:	f200 809d 	bhi.w	8004af2 <HAL_ADC_IRQHandler+0x25a>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049b8:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80049ba:	b9e0      	cbnz	r0, 80049f6 <HAL_ADC_IRQHandler+0x15e>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80049bc:	0190      	lsls	r0, r2, #6
 80049be:	d505      	bpl.n	80049cc <HAL_ADC_IRQHandler+0x134>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80049c0:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80049c4:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80049c8:	4301      	orrs	r1, r0
 80049ca:	d114      	bne.n	80049f6 <HAL_ADC_IRQHandler+0x15e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80049cc:	6819      	ldr	r1, [r3, #0]
 80049ce:	0649      	lsls	r1, r1, #25
 80049d0:	d511      	bpl.n	80049f6 <HAL_ADC_IRQHandler+0x15e>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80049d2:	0292      	lsls	r2, r2, #10
 80049d4:	d40f      	bmi.n	80049f6 <HAL_ADC_IRQHandler+0x15e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	0710      	lsls	r0, r2, #28
 80049da:	f100 8095 	bmi.w	8004b08 <HAL_ADC_IRQHandler+0x270>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049e4:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80049e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ec:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80049ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049f0:	05d9      	lsls	r1, r3, #23
 80049f2:	f140 8092 	bpl.w	8004b1a <HAL_ADC_IRQHandler+0x282>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 fd1e 	bl	8005438 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	2260      	movs	r2, #96	; 0x60
 8004a00:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004a02:	0632      	lsls	r2, r6, #24
 8004a04:	d50b      	bpl.n	8004a1e <HAL_ADC_IRQHandler+0x186>
 8004a06:	062b      	lsls	r3, r5, #24
 8004a08:	d509      	bpl.n	8004a1e <HAL_ADC_IRQHandler+0x186>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a10:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff ff3e 	bl	8004894 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004a1e:	05f0      	lsls	r0, r6, #23
 8004a20:	d50c      	bpl.n	8004a3c <HAL_ADC_IRQHandler+0x1a4>
 8004a22:	05e9      	lsls	r1, r5, #23
 8004a24:	d50a      	bpl.n	8004a3c <HAL_ADC_IRQHandler+0x1a4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004a26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2c:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f000 fd04 	bl	800543c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a3a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004a3c:	05b2      	lsls	r2, r6, #22
 8004a3e:	d50c      	bpl.n	8004a5a <HAL_ADC_IRQHandler+0x1c2>
 8004a40:	05ab      	lsls	r3, r5, #22
 8004a42:	d50a      	bpl.n	8004a5a <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004a44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f000 fcf6 	bl	800543e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a58:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004a5a:	06f0      	lsls	r0, r6, #27
 8004a5c:	d521      	bpl.n	8004aa2 <HAL_ADC_IRQHandler+0x20a>
 8004a5e:	06e9      	lsls	r1, r5, #27
 8004a60:	d51f      	bpl.n	8004aa2 <HAL_ADC_IRQHandler+0x20a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004a62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a64:	b17b      	cbz	r3, 8004a86 <HAL_ADC_IRQHandler+0x1ee>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004a66:	6822      	ldr	r2, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004a68:	2f00      	cmp	r7, #0
 8004a6a:	d05d      	beq.n	8004b28 <HAL_ADC_IRQHandler+0x290>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004a6c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004a70:	d058      	beq.n	8004b24 <HAL_ADC_IRQHandler+0x28c>
 8004a72:	4821      	ldr	r0, [pc, #132]	; (8004af8 <HAL_ADC_IRQHandler+0x260>)
 8004a74:	4b21      	ldr	r3, [pc, #132]	; (8004afc <HAL_ADC_IRQHandler+0x264>)
 8004a76:	4922      	ldr	r1, [pc, #136]	; (8004b00 <HAL_ADC_IRQHandler+0x268>)
 8004a78:	4282      	cmp	r2, r0
 8004a7a:	bf18      	it	ne
 8004a7c:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f413 4f60 	tst.w	r3, #57344	; 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004a84:	d00a      	beq.n	8004a9c <HAL_ADC_IRQHandler+0x204>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004a86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8c:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a90:	f043 0302 	orr.w	r3, r3, #2
 8004a94:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8004a96:	4620      	mov	r0, r4
 8004a98:	f7ff fefd 	bl	8004896 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004aa2:	0572      	lsls	r2, r6, #21
 8004aa4:	d544      	bpl.n	8004b30 <HAL_ADC_IRQHandler+0x298>
 8004aa6:	056b      	lsls	r3, r5, #21
 8004aa8:	d542      	bpl.n	8004b30 <HAL_ADC_IRQHandler+0x298>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004aaa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab0:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004ab2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ab4:	f043 0308 	orr.w	r3, r3, #8
 8004ab8:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ac0:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004ac2:	4620      	mov	r0, r4
}
 8004ac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004ac8:	f000 bcb7 	b.w	800543a <HAL_ADCEx_InjectedQueueOverflowCallback>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_ADC_IRQHandler+0x264>)
 8004ace:	e6f2      	b.n	80048b6 <HAL_ADC_IRQHandler+0x1e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ad0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004ad4:	e721      	b.n	800491a <HAL_ADC_IRQHandler+0x82>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ad6:	68d3      	ldr	r3, [r2, #12]
 8004ad8:	e729      	b.n	800492e <HAL_ADC_IRQHandler+0x96>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ada:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004adc:	f043 0310 	orr.w	r3, r3, #16
 8004ae0:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6623      	str	r3, [r4, #96]	; 0x60
 8004aea:	e73a      	b.n	8004962 <HAL_ADC_IRQHandler+0xca>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004af0:	e75b      	b.n	80049aa <HAL_ADC_IRQHandler+0x112>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004af2:	68d2      	ldr	r2, [r2, #12]
 8004af4:	e761      	b.n	80049ba <HAL_ADC_IRQHandler+0x122>
 8004af6:	bf00      	nop
 8004af8:	50000100 	.word	0x50000100
 8004afc:	50000300 	.word	0x50000300
 8004b00:	50000700 	.word	0x50000700
 8004b04:	50000400 	.word	0x50000400
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b0a:	f043 0310 	orr.w	r3, r3, #16
 8004b0e:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6623      	str	r3, [r4, #96]	; 0x60
 8004b18:	e76d      	b.n	80049f6 <HAL_ADC_IRQHandler+0x15e>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004b22:	e768      	b.n	80049f6 <HAL_ADC_IRQHandler+0x15e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_ADC_IRQHandler+0x29c>)
 8004b26:	e7aa      	b.n	8004a7e <HAL_ADC_IRQHandler+0x1e6>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004b28:	68d3      	ldr	r3, [r2, #12]
 8004b2a:	f013 0f01 	tst.w	r3, #1
 8004b2e:	e7a9      	b.n	8004a84 <HAL_ADC_IRQHandler+0x1ec>
}
 8004b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	50000300 	.word	0x50000300

08004b38 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b38:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b3c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8004b40:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b44:	d121      	bne.n	8004b8a <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4a:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	6811      	ldr	r1, [r2, #0]
 8004b50:	0708      	lsls	r0, r1, #28
 8004b52:	d516      	bpl.n	8004b82 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004b54:	68d1      	ldr	r1, [r2, #12]
 8004b56:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8004b5a:	d10e      	bne.n	8004b7a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b62:	d10a      	bne.n	8004b7a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b6a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b6e:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b70:	bf5e      	ittt	pl
 8004b72:	6dda      	ldrpl	r2, [r3, #92]	; 0x5c
 8004b74:	f042 0201 	orrpl.w	r2, r2, #1
 8004b78:	65da      	strpl	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fe83 	bl	8004886 <HAL_ADC_ConvCpltCallback>
}
 8004b80:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b82:	68d2      	ldr	r2, [r2, #12]
 8004b84:	f012 0f02 	tst.w	r2, #2
 8004b88:	e7eb      	b.n	8004b62 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b8a:	06d2      	lsls	r2, r2, #27
 8004b8c:	d503      	bpl.n	8004b96 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fe81 	bl	8004896 <HAL_ADC_ErrorCallback>
 8004b94:	e7f4      	b.n	8004b80 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	4718      	bx	r3

08004ba0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004ba2:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ba4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004baa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bac:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bb4:	f7ff fe6f 	bl	8004896 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bb8:	bd08      	pop	{r3, pc}
	...

08004bbc <HAL_ADC_ConfigChannel>:
{
 8004bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004bc2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8004bc6:	2b01      	cmp	r3, #1
{
 8004bc8:	4605      	mov	r5, r0
 8004bca:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8004bcc:	f000 81db 	beq.w	8004f86 <HAL_ADC_ConfigChannel+0x3ca>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	f7ff fca1 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f040 81cc 	bne.w	8004f7a <HAL_ADC_ConfigChannel+0x3be>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004be2:	684a      	ldr	r2, [r1, #4]
 8004be4:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8004be6:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004be8:	0991      	lsrs	r1, r2, #6
 8004bea:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8004bee:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(*preg,
 8004bf2:	f002 021f 	and.w	r2, r2, #31
 8004bf6:	59ce      	ldr	r6, [r1, r7]
 8004bf8:	f04f 0c1f 	mov.w	ip, #31
 8004bfc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8004c00:	4093      	lsls	r3, r2
 8004c02:	fa0c f202 	lsl.w	r2, ip, r2
 8004c06:	ea26 0202 	bic.w	r2, r6, r2
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c0e:	f7ff fc86 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 8004c12:	4606      	mov	r6, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c14:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c16:	6883      	ldr	r3, [r0, #8]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	431e      	orrs	r6, r3
 8004c1e:	d13c      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0xde>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c20:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004c22:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004c28:	d179      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0x162>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	f7ff fc66 	bl	80044fc <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004c30:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c32:	6953      	ldr	r3, [r2, #20]
 8004c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c38:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c3a:	6927      	ldr	r7, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c3c:	6828      	ldr	r0, [r5, #0]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c3e:	6821      	ldr	r1, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c40:	68c2      	ldr	r2, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c42:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c44:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8004c48:	d070      	beq.n	8004d2c <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c4a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004c4e:	0050      	lsls	r0, r2, #1
 8004c50:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(*preg,
 8004c52:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 8004c56:	4082      	lsls	r2, r0
 8004c58:	48ae      	ldr	r0, [pc, #696]	; (8004f14 <HAL_ADC_ConfigChannel+0x358>)
 8004c5a:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8004c5e:	ea0c 0000 	and.w	r0, ip, r0
 8004c62:	4308      	orrs	r0, r1
 8004c64:	4302      	orrs	r2, r0
 8004c66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c6a:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c6e:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(*preg,
 8004c70:	69a0      	ldr	r0, [r4, #24]
 8004c72:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004c76:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004c7a:	4302      	orrs	r2, r0
 8004c7c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004c80:	6922      	ldr	r2, [r4, #16]
 8004c82:	7f21      	ldrb	r1, [r4, #28]
  MODIFY_REG(*preg,
 8004c84:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c88:	2901      	cmp	r1, #1
 8004c8a:	bf08      	it	eq
 8004c8c:	f04f 7600 	moveq.w	r6, #33554432	; 0x2000000
 8004c90:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8004c94:	4306      	orrs	r6, r0
 8004c96:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c9a:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c9c:	6883      	ldr	r3, [r0, #8]
 8004c9e:	07de      	lsls	r6, r3, #31
 8004ca0:	f100 809f 	bmi.w	8004de2 <HAL_ADC_ConfigChannel+0x226>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004ca4:	68e1      	ldr	r1, [r4, #12]
 8004ca6:	4a9c      	ldr	r2, [pc, #624]	; (8004f18 <HAL_ADC_ConfigChannel+0x35c>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	4291      	cmp	r1, r2
    SET_BIT(ADCx->DIFSEL,
 8004cac:	f3c3 0612 	ubfx	r6, r3, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004cb0:	f040 8091 	bne.w	8004dd6 <HAL_ADC_ConfigChannel+0x21a>
    SET_BIT(ADCx->DIFSEL,
 8004cb4:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8004cb8:	4332      	orrs	r2, r6
 8004cba:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	f000 8099 	beq.w	8004df6 <HAL_ADC_ConfigChannel+0x23a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	fa93 f2a3 	rbit	r2, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cc8:	b13a      	cbz	r2, 8004cda <HAL_ADC_ConfigChannel+0x11e>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004cca:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cce:	3201      	adds	r2, #1
 8004cd0:	f002 021f 	and.w	r2, r2, #31
 8004cd4:	2a09      	cmp	r2, #9
 8004cd6:	f200 80ae 	bhi.w	8004e36 <HAL_ADC_ConfigChannel+0x27a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8004cde:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	0692      	lsls	r2, r2, #26
 8004ce6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8004cee:	fab1 f181 	clz	r1, r1
 8004cf2:	3101      	adds	r1, #1
 8004cf4:	f001 071f 	and.w	r7, r1, #31
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	40b9      	lsls	r1, r7
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	f040 8094 	bne.w	8004e2c <HAL_ADC_ConfigChannel+0x270>
 8004d04:	0e9b      	lsrs	r3, r3, #26
 8004d06:	3301      	adds	r3, #1
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004d10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d12:	ea42 0103 	orr.w	r1, r2, r3
 8004d16:	68a2      	ldr	r2, [r4, #8]
 8004d18:	f7ff fbf0 	bl	80044fc <LL_ADC_SetChannelSamplingTime>
 8004d1c:	e061      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x226>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d1e:	f7ff fbed 	bl	80044fc <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004d22:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d24:	6953      	ldr	r3, [r2, #20]
 8004d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d2a:	e785      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x7c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d2c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004d2e:	6e02      	ldr	r2, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d30:	f3c1 0612 	ubfx	r6, r1, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d34:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	d138      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x1f2>
 8004d3c:	f3c1 6184 	ubfx	r1, r1, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d40:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8004d42:	bf02      	ittt	eq
 8004d44:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 8004d46:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8004d4a:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d4c:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d56:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d5a:	bb68      	cbnz	r0, 8004db8 <HAL_ADC_ConfigChannel+0x1fc>
 8004d5c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d60:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8004d62:	bf02      	ittt	eq
 8004d64:	685a      	ldreq	r2, [r3, #4]
 8004d66:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8004d6a:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d6c:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d6e:	6822      	ldr	r2, [r4, #0]
 8004d70:	6899      	ldr	r1, [r3, #8]
 8004d72:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d76:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d7a:	bb10      	cbnz	r0, 8004dc2 <HAL_ADC_ConfigChannel+0x206>
 8004d7c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d80:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8004d82:	bf02      	ittt	eq
 8004d84:	689a      	ldreq	r2, [r3, #8]
 8004d86:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8004d8a:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d8c:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	68d9      	ldr	r1, [r3, #12]
 8004d92:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d96:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d9a:	b9b8      	cbnz	r0, 8004dcc <HAL_ADC_ConfigChannel+0x210>
 8004d9c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004da0:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8004da2:	bf02      	ittt	eq
 8004da4:	68da      	ldreq	r2, [r3, #12]
 8004da6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8004daa:	60da      	streq	r2, [r3, #12]
}
 8004dac:	e775      	b.n	8004c9a <HAL_ADC_ConfigChannel+0xde>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8004db2:	fab1 f181 	clz	r1, r1
 8004db6:	e7c3      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8004dbc:	fab2 f282 	clz	r2, r2
 8004dc0:	e7ce      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8004dc6:	fab2 f282 	clz	r2, r2
 8004dca:	e7d9      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dcc:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8004dd0:	fab2 f282 	clz	r2, r2
 8004dd4:	e7e4      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x1e4>
    CLEAR_BIT(ADCx->DIFSEL,
 8004dd6:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8004dda:	ea23 0606 	bic.w	r6, r3, r6
 8004dde:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	4b4d      	ldr	r3, [pc, #308]	; (8004f1c <HAL_ADC_ConfigChannel+0x360>)
 8004de6:	421a      	tst	r2, r3
 8004de8:	d144      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x2b8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dea:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004dec:	2300      	movs	r3, #0
 8004dee:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
 8004df2:	b003      	add	sp, #12
 8004df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004df6:	0e9a      	lsrs	r2, r3, #26
 8004df8:	3201      	adds	r2, #1
 8004dfa:	f002 071f 	and.w	r7, r2, #31
 8004dfe:	2101      	movs	r1, #1
 8004e00:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e02:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e04:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8004e08:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e0c:	f67f af76 	bls.w	8004cfc <HAL_ADC_ConfigChannel+0x140>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e10:	430a      	orrs	r2, r1
 8004e12:	bb16      	cbnz	r6, 8004e5a <HAL_ADC_ConfigChannel+0x29e>
 8004e14:	0e9e      	lsrs	r6, r3, #26
 8004e16:	3601      	adds	r6, #1
 8004e18:	f006 061f 	and.w	r6, r6, #31
 8004e1c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8004e20:	391e      	subs	r1, #30
 8004e22:	0509      	lsls	r1, r1, #20
 8004e24:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e28:	4311      	orrs	r1, r2
 8004e2a:	e774      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	e767      	b.n	8004d06 <HAL_ADC_ConfigChannel+0x14a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8004e3a:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e3e:	3201      	adds	r2, #1
 8004e40:	0692      	lsls	r2, r2, #26
 8004e42:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8004e4a:	fab1 f181 	clz	r1, r1
 8004e4e:	3101      	adds	r1, #1
 8004e50:	f001 071f 	and.w	r7, r1, #31
 8004e54:	2101      	movs	r1, #1
 8004e56:	40b9      	lsls	r1, r7
 8004e58:	e7da      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x254>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8004e5e:	fab1 f181 	clz	r1, r1
 8004e62:	3101      	adds	r1, #1
 8004e64:	f001 031f 	and.w	r3, r1, #31
 8004e68:	f06f 061d 	mvn.w	r6, #29
 8004e6c:	2103      	movs	r1, #3
 8004e6e:	fb11 6103 	smlabb	r1, r1, r3, r6
 8004e72:	e7d6      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x266>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e7a:	d02e      	beq.n	8004eda <HAL_ADC_ConfigChannel+0x31e>
 8004e7c:	4c28      	ldr	r4, [pc, #160]	; (8004f20 <HAL_ADC_ConfigChannel+0x364>)
 8004e7e:	4929      	ldr	r1, [pc, #164]	; (8004f24 <HAL_ADC_ConfigChannel+0x368>)
 8004e80:	4829      	ldr	r0, [pc, #164]	; (8004f28 <HAL_ADC_ConfigChannel+0x36c>)
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	bf18      	it	ne
 8004e86:	4601      	movne	r1, r0
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e88:	4c28      	ldr	r4, [pc, #160]	; (8004f2c <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004e8a:	6888      	ldr	r0, [r1, #8]
 8004e8c:	42a2      	cmp	r2, r4
 8004e8e:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
 8004e92:	d002      	beq.n	8004e9a <HAL_ADC_ConfigChannel+0x2de>
 8004e94:	4c26      	ldr	r4, [pc, #152]	; (8004f30 <HAL_ADC_ConfigChannel+0x374>)
 8004e96:	42a2      	cmp	r2, r4
 8004e98:	d123      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x326>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e9a:	0204      	lsls	r4, r0, #8
 8004e9c:	d421      	bmi.n	8004ee2 <HAL_ADC_ConfigChannel+0x326>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea2:	d01c      	beq.n	8004ede <HAL_ADC_ConfigChannel+0x322>
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <HAL_ADC_ConfigChannel+0x378>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d19f      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eaa:	f502 7280 	add.w	r2, r2, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004eae:	6893      	ldr	r3, [r2, #8]
 8004eb0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eba:	6093      	str	r3, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_ADC_ConfigChannel+0x37c>)
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <HAL_ADC_ConfigChannel+0x380>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8004ecc:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8004ece:	9b01      	ldr	r3, [sp, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d08a      	beq.n	8004dea <HAL_ADC_ConfigChannel+0x22e>
            wait_loop_index--;
 8004ed4:	9b01      	ldr	r3, [sp, #4]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	e7f8      	b.n	8004ecc <HAL_ADC_ConfigChannel+0x310>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eda:	4912      	ldr	r1, [pc, #72]	; (8004f24 <HAL_ADC_ConfigChannel+0x368>)
 8004edc:	e7d4      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ede:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <HAL_ADC_ConfigChannel+0x368>)
 8004ee0:	e7e5      	b.n	8004eae <HAL_ADC_ConfigChannel+0x2f2>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ee2:	4c17      	ldr	r4, [pc, #92]	; (8004f40 <HAL_ADC_ConfigChannel+0x384>)
 8004ee4:	42a2      	cmp	r2, r4
 8004ee6:	d12d      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x388>
 8004ee8:	01c2      	lsls	r2, r0, #7
 8004eea:	f53f af7e 	bmi.w	8004dea <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ef2:	d00d      	beq.n	8004f10 <HAL_ADC_ConfigChannel+0x354>
 8004ef4:	4c0a      	ldr	r4, [pc, #40]	; (8004f20 <HAL_ADC_ConfigChannel+0x364>)
 8004ef6:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <HAL_ADC_ConfigChannel+0x368>)
 8004ef8:	480b      	ldr	r0, [pc, #44]	; (8004f28 <HAL_ADC_ConfigChannel+0x36c>)
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	bf18      	it	ne
 8004efe:	4602      	movne	r2, r0
 8004f00:	6893      	ldr	r3, [r2, #8]
 8004f02:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004f06:	430b      	orrs	r3, r1
 8004f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0c:	6093      	str	r3, [r2, #8]
 8004f0e:	e76c      	b.n	8004dea <HAL_ADC_ConfigChannel+0x22e>
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_ADC_ConfigChannel+0x368>)
 8004f12:	e7f5      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x344>
 8004f14:	03fff000 	.word	0x03fff000
 8004f18:	407f0000 	.word	0x407f0000
 8004f1c:	80080000 	.word	0x80080000
 8004f20:	50000100 	.word	0x50000100
 8004f24:	50000300 	.word	0x50000300
 8004f28:	50000700 	.word	0x50000700
 8004f2c:	c3210000 	.word	0xc3210000
 8004f30:	90c00010 	.word	0x90c00010
 8004f34:	50000600 	.word	0x50000600
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	00030d40 	.word	0x00030d40
 8004f40:	c7520000 	.word	0xc7520000
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f44:	4c11      	ldr	r4, [pc, #68]	; (8004f8c <HAL_ADC_ConfigChannel+0x3d0>)
 8004f46:	42a2      	cmp	r2, r4
 8004f48:	f47f af4f 	bne.w	8004dea <HAL_ADC_ConfigChannel+0x22e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f4c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004f50:	f47f af4b 	bne.w	8004dea <HAL_ADC_ConfigChannel+0x22e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f54:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <HAL_ADC_ConfigChannel+0x3d4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	f43f af47 	beq.w	8004dea <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f5c:	4c0d      	ldr	r4, [pc, #52]	; (8004f94 <HAL_ADC_ConfigChannel+0x3d8>)
 8004f5e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8004f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f66:	bf18      	it	ne
 8004f68:	4622      	movne	r2, r4
 8004f6a:	6893      	ldr	r3, [r2, #8]
 8004f6c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004f70:	430b      	orrs	r3, r1
 8004f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f76:	6093      	str	r3, [r2, #8]
}
 8004f78:	e738      	b.n	8004dec <HAL_ADC_ConfigChannel+0x230>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f7a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004f7c:	f042 0220 	orr.w	r2, r2, #32
 8004f80:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004f82:	4618      	mov	r0, r3
 8004f84:	e732      	b.n	8004dec <HAL_ADC_ConfigChannel+0x230>
  __HAL_LOCK(hadc);
 8004f86:	2002      	movs	r0, #2
 8004f88:	e733      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x236>
 8004f8a:	bf00      	nop
 8004f8c:	cb840000 	.word	0xcb840000
 8004f90:	50000100 	.word	0x50000100
 8004f94:	50000700 	.word	0x50000700

08004f98 <ADC_ConversionStop>:
{
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f7ff fabe 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fa2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	f002 0208 	and.w	r2, r2, #8
 8004faa:	4302      	orrs	r2, r0
 8004fac:	d101      	bne.n	8004fb2 <ADC_ConversionStop+0x1a>
  return HAL_OK;
 8004fae:	2000      	movs	r0, #0
}
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	0190      	lsls	r0, r2, #6
 8004fb6:	d52b      	bpl.n	8005010 <ADC_ConversionStop+0x78>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004fb8:	8ba0      	ldrh	r0, [r4, #28]
 8004fba:	f240 1201 	movw	r2, #257	; 0x101
 8004fbe:	4290      	cmp	r0, r2
 8004fc0:	d126      	bne.n	8005010 <ADC_ConversionStop+0x78>
 8004fc2:	4a28      	ldr	r2, [pc, #160]	; (8005064 <ADC_ConversionStop+0xcc>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	0649      	lsls	r1, r1, #25
 8004fc8:	d516      	bpl.n	8004ff8 <ADC_ConversionStop+0x60>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004fca:	2240      	movs	r2, #64	; 0x40
 8004fcc:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004fce:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff faa4 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 8004fd6:	b158      	cbz	r0, 8004ff0 <ADC_ConversionStop+0x58>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004fd8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004fda:	6893      	ldr	r3, [r2, #8]
 8004fdc:	079e      	lsls	r6, r3, #30
 8004fde:	d407      	bmi.n	8004ff0 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8004fe0:	6893      	ldr	r3, [r2, #8]
 8004fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fea:	f043 0310 	orr.w	r3, r3, #16
 8004fee:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004ff0:	2901      	cmp	r1, #1
 8004ff2:	d10f      	bne.n	8005014 <ADC_ConversionStop+0x7c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004ff4:	2504      	movs	r5, #4
 8004ff6:	e022      	b.n	800503e <ADC_ConversionStop+0xa6>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	d1e3      	bne.n	8004fc4 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ffc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ffe:	f043 0310 	orr.w	r3, r3, #16
 8005002:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005004:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 800500c:	2001      	movs	r0, #1
 800500e:	e7cf      	b.n	8004fb0 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005010:	2902      	cmp	r1, #2
 8005012:	d1dd      	bne.n	8004fd0 <ADC_ConversionStop+0x38>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005014:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005016:	6893      	ldr	r3, [r2, #8]
 8005018:	0718      	lsls	r0, r3, #28
 800501a:	d50a      	bpl.n	8005032 <ADC_ConversionStop+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800501c:	6893      	ldr	r3, [r2, #8]
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	d407      	bmi.n	8005032 <ADC_ConversionStop+0x9a>
  MODIFY_REG(ADCx->CR,
 8005022:	6893      	ldr	r3, [r2, #8]
 8005024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 8005032:	2902      	cmp	r1, #2
 8005034:	d014      	beq.n	8005060 <ADC_ConversionStop+0xc8>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005036:	2903      	cmp	r1, #3
 8005038:	bf14      	ite	ne
 800503a:	2504      	movne	r5, #4
 800503c:	250c      	moveq	r5, #12
    tickstart = HAL_GetTick();
 800503e:	f7ff fa43 	bl	80044c8 <HAL_GetTick>
 8005042:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	422b      	tst	r3, r5
 800504a:	d0b0      	beq.n	8004fae <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800504c:	f7ff fa3c 	bl	80044c8 <HAL_GetTick>
 8005050:	1b80      	subs	r0, r0, r6
 8005052:	2805      	cmp	r0, #5
 8005054:	d9f6      	bls.n	8005044 <ADC_ConversionStop+0xac>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	422b      	tst	r3, r5
 800505c:	d0f2      	beq.n	8005044 <ADC_ConversionStop+0xac>
 800505e:	e7cd      	b.n	8004ffc <ADC_ConversionStop+0x64>
    switch (conversion_group_reassigned)
 8005060:	2508      	movs	r5, #8
 8005062:	e7ec      	b.n	800503e <ADC_ConversionStop+0xa6>
 8005064:	a3400001 	.word	0xa3400001

08005068 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005068:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800506a:	6893      	ldr	r3, [r2, #8]
{
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005070:	07d8      	lsls	r0, r3, #31
 8005072:	d501      	bpl.n	8005078 <ADC_Enable+0x10>
  return HAL_OK;
 8005074:	2000      	movs	r0, #0
}
 8005076:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005078:	6891      	ldr	r1, [r2, #8]
 800507a:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <ADC_Enable+0x6c>)
 800507c:	4219      	tst	r1, r3
 800507e:	d009      	beq.n	8005094 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005080:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005082:	f043 0310 	orr.w	r3, r3, #16
 8005086:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005088:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005090:	2001      	movs	r0, #1
 8005092:	e7f0      	b.n	8005076 <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8005094:	6893      	ldr	r3, [r2, #8]
 8005096:	4d10      	ldr	r5, [pc, #64]	; (80050d8 <ADC_Enable+0x70>)
 8005098:	402b      	ands	r3, r5
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80050a0:	f7ff fa12 	bl	80044c8 <HAL_GetTick>
 80050a4:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	6813      	ldr	r3, [r2, #0]
 80050aa:	07db      	lsls	r3, r3, #31
 80050ac:	d4e2      	bmi.n	8005074 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050ae:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050b0:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80050b2:	bf5f      	itttt	pl
 80050b4:	6893      	ldrpl	r3, [r2, #8]
 80050b6:	402b      	andpl	r3, r5
 80050b8:	f043 0301 	orrpl.w	r3, r3, #1
 80050bc:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050be:	f7ff fa03 	bl	80044c8 <HAL_GetTick>
 80050c2:	1b80      	subs	r0, r0, r6
 80050c4:	2802      	cmp	r0, #2
 80050c6:	d9ee      	bls.n	80050a6 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	07da      	lsls	r2, r3, #31
 80050ce:	d4ea      	bmi.n	80050a6 <ADC_Enable+0x3e>
 80050d0:	e7d6      	b.n	8005080 <ADC_Enable+0x18>
 80050d2:	bf00      	nop
 80050d4:	8000003f 	.word	0x8000003f
 80050d8:	7fffffc0 	.word	0x7fffffc0

080050dc <HAL_ADC_Start>:
{
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050e0:	6800      	ldr	r0, [r0, #0]
 80050e2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80050e6:	d05a      	beq.n	800519e <HAL_ADC_Start+0xc2>
 80050e8:	493a      	ldr	r1, [pc, #232]	; (80051d4 <HAL_ADC_Start+0xf8>)
 80050ea:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_ADC_Start+0xfc>)
 80050ec:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <HAL_ADC_Start+0x100>)
 80050ee:	4288      	cmp	r0, r1
 80050f0:	bf08      	it	eq
 80050f2:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80050f4:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050f6:	f7ff fa12 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 80050fa:	4605      	mov	r5, r0
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d166      	bne.n	80051ce <HAL_ADC_Start+0xf2>
    __HAL_LOCK(hadc);
 8005100:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005104:	2b01      	cmp	r3, #1
 8005106:	d062      	beq.n	80051ce <HAL_ADC_Start+0xf2>
 8005108:	2301      	movs	r3, #1
 800510a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff ffaa 	bl	8005068 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005114:	2800      	cmp	r0, #0
 8005116:	d157      	bne.n	80051c8 <HAL_ADC_Start+0xec>
      ADC_STATE_CLR_SET(hadc->State,
 8005118:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800511a:	492e      	ldr	r1, [pc, #184]	; (80051d4 <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 800511c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005128:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	428b      	cmp	r3, r1
 800512e:	f006 021f 	and.w	r2, r6, #31
 8005132:	d036      	beq.n	80051a2 <HAL_ADC_Start+0xc6>
 8005134:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005138:	428b      	cmp	r3, r1
 800513a:	d135      	bne.n	80051a8 <HAL_ADC_Start+0xcc>
 800513c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005140:	b91a      	cbnz	r2, 800514a <HAL_ADC_Start+0x6e>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005142:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8005144:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8005148:	65e5      	str	r5, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800514a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800514c:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005150:	bf1c      	itt	ne
 8005152:	6e25      	ldrne	r5, [r4, #96]	; 0x60
 8005154:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005158:	6625      	str	r5, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800515a:	251c      	movs	r5, #28
 800515c:	601d      	str	r5, [r3, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800515e:	428b      	cmp	r3, r1
      __HAL_UNLOCK(hadc);
 8005160:	f04f 0500 	mov.w	r5, #0
 8005164:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005168:	d007      	beq.n	800517a <HAL_ADC_Start+0x9e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800516a:	2a09      	cmp	r2, #9
 800516c:	d81e      	bhi.n	80051ac <HAL_ADC_Start+0xd0>
 800516e:	f240 2521 	movw	r5, #545	; 0x221
 8005172:	fa25 f202 	lsr.w	r2, r5, r2
 8005176:	07d5      	lsls	r5, r2, #31
 8005178:	d518      	bpl.n	80051ac <HAL_ADC_Start+0xd0>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800517e:	bf41      	itttt	mi
 8005180:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8005182:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8005186:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800518a:	65e2      	strmi	r2, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005192:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005196:	f042 0204 	orr.w	r2, r2, #4
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <HAL_ADC_Start+0x100>)
 80051a0:	e7a8      	b.n	80050f4 <HAL_ADC_Start+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051a2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80051a6:	e7cb      	b.n	8005140 <HAL_ADC_Start+0x64>
 80051a8:	4619      	mov	r1, r3
 80051aa:	e7ca      	b.n	8005142 <HAL_ADC_Start+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80051ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80051b4:	68cb      	ldr	r3, [r1, #12]
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	d5f0      	bpl.n	800519c <HAL_ADC_Start+0xc0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80051bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051c4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80051c6:	e7e9      	b.n	800519c <HAL_ADC_Start+0xc0>
      __HAL_UNLOCK(hadc);
 80051c8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80051cc:	e7e6      	b.n	800519c <HAL_ADC_Start+0xc0>
    tmp_hal_status = HAL_BUSY;
 80051ce:	2002      	movs	r0, #2
 80051d0:	e7e4      	b.n	800519c <HAL_ADC_Start+0xc0>
 80051d2:	bf00      	nop
 80051d4:	50000100 	.word	0x50000100
 80051d8:	50000700 	.word	0x50000700
 80051dc:	50000300 	.word	0x50000300

080051e0 <HAL_ADC_Start_DMA>:
{
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051e4:	6800      	ldr	r0, [r0, #0]
 80051e6:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 80051ea:	460e      	mov	r6, r1
 80051ec:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051ee:	d063      	beq.n	80052b8 <HAL_ADC_Start_DMA+0xd8>
 80051f0:	4938      	ldr	r1, [pc, #224]	; (80052d4 <HAL_ADC_Start_DMA+0xf4>)
 80051f2:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <HAL_ADC_Start_DMA+0xf8>)
 80051f4:	4a39      	ldr	r2, [pc, #228]	; (80052dc <HAL_ADC_Start_DMA+0xfc>)
 80051f6:	4288      	cmp	r0, r1
 80051f8:	bf08      	it	eq
 80051fa:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80051fc:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051fe:	f7ff f98e 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 8005202:	2800      	cmp	r0, #0
 8005204:	d163      	bne.n	80052ce <HAL_ADC_Start_DMA+0xee>
    __HAL_LOCK(hadc);
 8005206:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800520a:	2a01      	cmp	r2, #1
 800520c:	d05f      	beq.n	80052ce <HAL_ADC_Start_DMA+0xee>
 800520e:	2301      	movs	r3, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005210:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hadc);
 8005212:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005216:	4b32      	ldr	r3, [pc, #200]	; (80052e0 <HAL_ADC_Start_DMA+0x100>)
 8005218:	429a      	cmp	r2, r3
 800521a:	f005 051f 	and.w	r5, r5, #31
 800521e:	d006      	beq.n	800522e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005220:	2d09      	cmp	r5, #9
 8005222:	d84f      	bhi.n	80052c4 <HAL_ADC_Start_DMA+0xe4>
 8005224:	f240 2321 	movw	r3, #545	; 0x221
 8005228:	40eb      	lsrs	r3, r5
 800522a:	07db      	lsls	r3, r3, #31
 800522c:	d54a      	bpl.n	80052c4 <HAL_ADC_Start_DMA+0xe4>
      tmp_hal_status = ADC_Enable(hadc);
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff ff1a 	bl	8005068 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005234:	2800      	cmp	r0, #0
 8005236:	d141      	bne.n	80052bc <HAL_ADC_Start_DMA+0xdc>
        ADC_STATE_CLR_SET(hadc->State,
 8005238:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800523a:	6821      	ldr	r1, [r4, #0]
 800523c:	4b25      	ldr	r3, [pc, #148]	; (80052d4 <HAL_ADC_Start_DMA+0xf4>)
        ADC_STATE_CLR_SET(hadc->State,
 800523e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8005242:	f020 0001 	bic.w	r0, r0, #1
 8005246:	f440 7080 	orr.w	r0, r0, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800524a:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 800524c:	65e0      	str	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800524e:	d003      	beq.n	8005258 <HAL_ADC_Start_DMA+0x78>
 8005250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005254:	4299      	cmp	r1, r3
 8005256:	d100      	bne.n	800525a <HAL_ADC_Start_DMA+0x7a>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005258:	b91d      	cbnz	r5, 8005262 <HAL_ADC_Start_DMA+0x82>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800525a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800525c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005260:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005262:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005264:	6d60      	ldr	r0, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005266:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800526a:	bf1c      	itt	ne
 800526c:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 800526e:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005272:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <HAL_ADC_Start_DMA+0x104>)
 8005276:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_ADC_Start_DMA+0x108>)
 800527a:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800527c:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_ADC_Start_DMA+0x10c>)
 800527e:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005280:	231c      	movs	r3, #28
 8005282:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8005284:	2300      	movs	r3, #0
 8005286:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800528a:	684b      	ldr	r3, [r1, #4]
 800528c:	f043 0310 	orr.w	r3, r3, #16
 8005290:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005292:	68cb      	ldr	r3, [r1, #12]
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800529a:	4632      	mov	r2, r6
 800529c:	463b      	mov	r3, r7
 800529e:	3140      	adds	r1, #64	; 0x40
 80052a0:	f000 fc94 	bl	8005bcc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80052a4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80052a6:	6893      	ldr	r3, [r2, #8]
 80052a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052b0:	f043 0304 	orr.w	r3, r3, #4
 80052b4:	6093      	str	r3, [r2, #8]
}
 80052b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_ADC_Start_DMA+0xfc>)
 80052ba:	e79f      	b.n	80051fc <HAL_ADC_Start_DMA+0x1c>
        __HAL_UNLOCK(hadc);
 80052bc:	2300      	movs	r3, #0
 80052be:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80052c2:	e7f8      	b.n	80052b6 <HAL_ADC_Start_DMA+0xd6>
      __HAL_UNLOCK(hadc);
 80052c4:	2300      	movs	r3, #0
 80052c6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80052ca:	2001      	movs	r0, #1
 80052cc:	e7f3      	b.n	80052b6 <HAL_ADC_Start_DMA+0xd6>
    tmp_hal_status = HAL_BUSY;
 80052ce:	2002      	movs	r0, #2
 80052d0:	e7f1      	b.n	80052b6 <HAL_ADC_Start_DMA+0xd6>
 80052d2:	bf00      	nop
 80052d4:	50000100 	.word	0x50000100
 80052d8:	50000700 	.word	0x50000700
 80052dc:	50000300 	.word	0x50000300
 80052e0:	50000600 	.word	0x50000600
 80052e4:	08004b39 	.word	0x08004b39
 80052e8:	0800488b 	.word	0x0800488b
 80052ec:	08004ba1 	.word	0x08004ba1

080052f0 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80052f0:	6802      	ldr	r2, [r0, #0]
{
 80052f2:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80052f4:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052f6:	6891      	ldr	r1, [r2, #8]
 80052f8:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052fa:	07c8      	lsls	r0, r1, #31
 80052fc:	d401      	bmi.n	8005302 <ADC_Disable+0x12>
  return HAL_OK;
 80052fe:	2000      	movs	r0, #0
}
 8005300:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8005302:	0799      	lsls	r1, r3, #30
 8005304:	d4fb      	bmi.n	80052fe <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005306:	6893      	ldr	r3, [r2, #8]
 8005308:	f003 030d 	and.w	r3, r3, #13
 800530c:	2b01      	cmp	r3, #1
 800530e:	d119      	bne.n	8005344 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8005310:	6893      	ldr	r3, [r2, #8]
 8005312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005316:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800531a:	f043 0302 	orr.w	r3, r3, #2
 800531e:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005320:	2303      	movs	r3, #3
 8005322:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005324:	f7ff f8d0 	bl	80044c8 <HAL_GetTick>
 8005328:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	07db      	lsls	r3, r3, #31
 8005330:	d5e5      	bpl.n	80052fe <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005332:	f7ff f8c9 	bl	80044c8 <HAL_GetTick>
 8005336:	1b40      	subs	r0, r0, r5
 8005338:	2802      	cmp	r0, #2
 800533a:	d9f6      	bls.n	800532a <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	07da      	lsls	r2, r3, #31
 8005342:	d5f2      	bpl.n	800532a <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005344:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005346:	f043 0310 	orr.w	r3, r3, #16
 800534a:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005354:	2001      	movs	r0, #1
 8005356:	e7d3      	b.n	8005300 <ADC_Disable+0x10>

08005358 <HAL_ADC_Stop>:
{
 8005358:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800535a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800535e:	2b01      	cmp	r3, #1
{
 8005360:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005362:	d016      	beq.n	8005392 <HAL_ADC_Stop+0x3a>
 8005364:	2301      	movs	r3, #1
 8005366:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800536a:	2103      	movs	r1, #3
 800536c:	f7ff fe14 	bl	8004f98 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8005370:	b958      	cbnz	r0, 800538a <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8005372:	4620      	mov	r0, r4
 8005374:	f7ff ffbc 	bl	80052f0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8005378:	b938      	cbnz	r0, 800538a <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800537a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800537c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 800538a:	2300      	movs	r3, #0
 800538c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8005390:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8005392:	2002      	movs	r0, #2
 8005394:	e7fc      	b.n	8005390 <HAL_ADC_Stop+0x38>

08005396 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005396:	6880      	ldr	r0, [r0, #8]
}
 8005398:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80053a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053a6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80053aa:	2b01      	cmp	r3, #1
{
 80053ac:	4604      	mov	r4, r0
 80053ae:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80053b0:	d03e      	beq.n	8005430 <HAL_ADCEx_Calibration_Start+0x90>
 80053b2:	2301      	movs	r3, #1
 80053b4:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80053b8:	f7ff ff9a 	bl	80052f0 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80053bc:	2800      	cmp	r0, #0
 80053be:	d133      	bne.n	8005428 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80053c2:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80053c4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80053c8:	f022 0202 	bic.w	r2, r2, #2
 80053cc:	f042 0202 	orr.w	r2, r2, #2
 80053d0:	65e2      	str	r2, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80053d2:	68b3      	ldr	r3, [r6, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053d4:	4a17      	ldr	r2, [pc, #92]	; (8005434 <HAL_ADCEx_Calibration_Start+0x94>)
 80053d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80053da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053de:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 80053e2:	432b      	orrs	r3, r5
 80053e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053ea:	68b3      	ldr	r3, [r6, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	da11      	bge.n	8005414 <HAL_ADCEx_Calibration_Start+0x74>
      wait_loop_index++;
 80053f0:	9b01      	ldr	r3, [sp, #4]
 80053f2:	3301      	adds	r3, #1
 80053f4:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d9f6      	bls.n	80053ea <HAL_ADCEx_Calibration_Start+0x4a>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80053fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80053fe:	f023 0312 	bic.w	r3, r3, #18
 8005402:	f043 0310 	orr.w	r3, r3, #16
 8005406:	65e3      	str	r3, [r4, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005408:	2300      	movs	r3, #0
 800540a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

        return HAL_ERROR;
 800540e:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005410:	b002      	add	sp, #8
 8005412:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8005414:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800541e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005420:	2300      	movs	r3, #0
 8005422:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8005426:	e7f3      	b.n	8005410 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005428:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800542a:	f043 0310 	orr.w	r3, r3, #16
 800542e:	e7f6      	b.n	800541e <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8005430:	2002      	movs	r0, #2
 8005432:	e7ed      	b.n	8005410 <HAL_ADCEx_Calibration_Start+0x70>
 8005434:	0004de01 	.word	0x0004de01

08005438 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005438:	4770      	bx	lr

0800543a <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800543a:	4770      	bx	lr

0800543c <HAL_ADCEx_LevelOutOfWindow2Callback>:
 800543c:	4770      	bx	lr

0800543e <HAL_ADCEx_LevelOutOfWindow3Callback>:
 800543e:	4770      	bx	lr

08005440 <HAL_ADCEx_EndOfSamplingCallback>:
 8005440:	4770      	bx	lr
	...

08005444 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005444:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005446:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800544a:	2b01      	cmp	r3, #1
{
 800544c:	b09d      	sub	sp, #116	; 0x74
 800544e:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8005450:	f000 8090 	beq.w	8005574 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8005454:	2301      	movs	r3, #1
 8005456:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800545a:	6800      	ldr	r0, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800545c:	2300      	movs	r3, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800545e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005462:	9318      	str	r3, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005464:	9319      	str	r3, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005466:	d10c      	bne.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005468:	4b43      	ldr	r3, [pc, #268]	; (8005578 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800546a:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800546c:	9801      	ldr	r0, [sp, #4]
 800546e:	b968      	cbnz	r0, 800548c <HAL_ADCEx_MultiModeConfigChannel+0x48>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005470:	6dd3      	ldr	r3, [r2, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005472:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005476:	f043 0320 	orr.w	r3, r3, #32
 800547a:	65d3      	str	r3, [r2, #92]	; 0x5c

    return HAL_ERROR;
 800547c:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800547e:	b01d      	add	sp, #116	; 0x74
 8005480:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005482:	4c3e      	ldr	r4, [pc, #248]	; (800557c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005484:	42a0      	cmp	r0, r4
 8005486:	bf08      	it	eq
 8005488:	4b3d      	ldreq	r3, [pc, #244]	; (8005580 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800548a:	e7ee      	b.n	800546a <HAL_ADCEx_MultiModeConfigChannel+0x26>
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800548c:	f7ff ff83 	bl	8005396 <LL_ADC_REG_IsConversionOngoing>
 8005490:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005492:	6810      	ldr	r0, [r2, #0]
 8005494:	f7ff ff7f 	bl	8005396 <LL_ADC_REG_IsConversionOngoing>
 8005498:	4303      	orrs	r3, r0
 800549a:	d165      	bne.n	8005568 <HAL_ADCEx_MultiModeConfigChannel+0x124>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800549c:	6813      	ldr	r3, [r2, #0]
 800549e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054a2:	d026      	beq.n	80054f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80054a4:	4d34      	ldr	r5, [pc, #208]	; (8005578 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80054a6:	4c37      	ldr	r4, [pc, #220]	; (8005584 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80054a8:	4837      	ldr	r0, [pc, #220]	; (8005588 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80054aa:	42ab      	cmp	r3, r5
 80054ac:	bf18      	it	ne
 80054ae:	4620      	movne	r0, r4
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054b0:	680c      	ldr	r4, [r1, #0]
 80054b2:	2c00      	cmp	r4, #0
 80054b4:	d033      	beq.n	800551e <HAL_ADCEx_MultiModeConfigChannel+0xda>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80054b6:	6886      	ldr	r6, [r0, #8]
 80054b8:	f892 7038 	ldrb.w	r7, [r2, #56]	; 0x38
 80054bc:	684d      	ldr	r5, [r1, #4]
 80054be:	f426 4660 	bic.w	r6, r6, #57344	; 0xe000
 80054c2:	ea45 3547 	orr.w	r5, r5, r7, lsl #13
 80054c6:	4335      	orrs	r5, r6
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80054cc:	6085      	str	r5, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054ce:	4d2a      	ldr	r5, [pc, #168]	; (8005578 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80054d0:	d001      	beq.n	80054d6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80054d2:	42ab      	cmp	r3, r5
 80054d4:	d10f      	bne.n	80054f6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054da:	689e      	ldr	r6, [r3, #8]
 80054dc:	68ab      	ldr	r3, [r5, #8]
 80054de:	4333      	orrs	r3, r6
 80054e0:	43db      	mvns	r3, r3
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	b983      	cbnz	r3, 800550a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054e8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80054ea:	2300      	movs	r3, #0
 80054ec:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  return tmp_hal_status;
 80054f0:	e7c5      	b.n	800547e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054f2:	4825      	ldr	r0, [pc, #148]	; (8005588 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80054f4:	e7dc      	b.n	80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x6c>
 80054f6:	4b21      	ldr	r3, [pc, #132]	; (800557c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80054f8:	4d24      	ldr	r5, [pc, #144]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80054fa:	689e      	ldr	r6, [r3, #8]
 80054fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	68ad      	ldr	r5, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005504:	4333      	orrs	r3, r6
 8005506:	432b      	orrs	r3, r5
 8005508:	e7ea      	b.n	80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 800550a:	6883      	ldr	r3, [r0, #8]
 800550c:	6889      	ldr	r1, [r1, #8]
 800550e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005512:	430c      	orrs	r4, r1
 8005514:	f023 030f 	bic.w	r3, r3, #15
 8005518:	431c      	orrs	r4, r3
 800551a:	6084      	str	r4, [r0, #8]
 800551c:	e7e4      	b.n	80054e8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800551e:	6881      	ldr	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005524:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005528:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800552a:	4913      	ldr	r1, [pc, #76]	; (8005578 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800552c:	d001      	beq.n	8005532 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800552e:	428b      	cmp	r3, r1
 8005530:	d110      	bne.n	8005554 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8005532:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005536:	689c      	ldr	r4, [r3, #8]
 8005538:	688b      	ldr	r3, [r1, #8]
 800553a:	4323      	orrs	r3, r4
 800553c:	43db      	mvns	r3, r3
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0d0      	beq.n	80054e8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005546:	6883      	ldr	r3, [r0, #8]
 8005548:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800554c:	f023 030f 	bic.w	r3, r3, #15
 8005550:	6083      	str	r3, [r0, #8]
 8005552:	e7c9      	b.n	80054e8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005556:	490d      	ldr	r1, [pc, #52]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005558:	689c      	ldr	r4, [r3, #8]
 800555a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005562:	4323      	orrs	r3, r4
 8005564:	430b      	orrs	r3, r1
 8005566:	e7e9      	b.n	800553c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005568:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800556a:	f043 0320 	orr.w	r3, r3, #32
 800556e:	65d3      	str	r3, [r2, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005570:	2001      	movs	r0, #1
 8005572:	e7ba      	b.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  __HAL_LOCK(hadc);
 8005574:	2002      	movs	r0, #2
 8005576:	e782      	b.n	800547e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005578:	50000100 	.word	0x50000100
 800557c:	50000400 	.word	0x50000400
 8005580:	50000500 	.word	0x50000500
 8005584:	50000700 	.word	0x50000700
 8005588:	50000300 	.word	0x50000300
 800558c:	50000600 	.word	0x50000600

08005590 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005592:	2300      	movs	r3, #0
 8005594:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005596:	4604      	mov	r4, r0
 8005598:	2800      	cmp	r0, #0
 800559a:	f000 80f0 	beq.w	800577e <HAL_COMP_Init+0x1ee>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800559e:	6803      	ldr	r3, [r0, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f2c0 80eb 	blt.w	800577e <HAL_COMP_Init+0x1ee>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80055a8:	7f42      	ldrb	r2, [r0, #29]
 80055aa:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80055ae:	b91a      	cbnz	r2, 80055b8 <HAL_COMP_Init+0x28>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80055b0:	7703      	strb	r3, [r0, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80055b2:	6203      	str	r3, [r0, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80055b4:	f7fe fb1e 	bl	8003bf4 <HAL_COMP_MspInit>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80055b8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80055bc:	4313      	orrs	r3, r2
               | hcomp->Init.BlankingSrce
 80055be:	6962      	ldr	r2, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80055c0:	6821      	ldr	r1, [r4, #0]
               | hcomp->Init.BlankingSrce
 80055c2:	4313      	orrs	r3, r2
               | hcomp->Init.Hysteresis
 80055c4:	68e2      	ldr	r2, [r4, #12]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80055c6:	6808      	ldr	r0, [r1, #0]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80055c8:	680d      	ldr	r5, [r1, #0]
               | hcomp->Init.Hysteresis
 80055ca:	4313      	orrs	r3, r2
    tmp_csr = (  hcomp->Init.InputMinus
 80055cc:	6922      	ldr	r2, [r4, #16]
 80055ce:	4313      	orrs	r3, r2
    MODIFY_REG(hcomp->Instance->CSR,
 80055d0:	4a6d      	ldr	r2, [pc, #436]	; (8005788 <HAL_COMP_Init+0x1f8>)
 80055d2:	402a      	ands	r2, r5
 80055d4:	4313      	orrs	r3, r2
 80055d6:	600b      	str	r3, [r1, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80055d8:	680b      	ldr	r3, [r1, #0]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	d43a      	bmi.n	8005654 <HAL_COMP_Init+0xc4>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80055de:	4b6b      	ldr	r3, [pc, #428]	; (800578c <HAL_COMP_Init+0x1fc>)
 80055e0:	486b      	ldr	r0, [pc, #428]	; (8005790 <HAL_COMP_Init+0x200>)
 80055e2:	4299      	cmp	r1, r3
 80055e4:	d147      	bne.n	8005676 <HAL_COMP_Init+0xe6>
 80055e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80055ea:	69a6      	ldr	r6, [r4, #24]
 80055ec:	4b69      	ldr	r3, [pc, #420]	; (8005794 <HAL_COMP_Init+0x204>)
 80055ee:	f016 0f03 	tst.w	r6, #3
 80055f2:	f000 80aa 	beq.w	800574a <HAL_COMP_Init+0x1ba>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80055f6:	06f7      	lsls	r7, r6, #27
 80055f8:	d55e      	bpl.n	80056b8 <HAL_COMP_Init+0x128>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80055fa:	4281      	cmp	r1, r0
 80055fc:	d002      	beq.n	8005604 <HAL_COMP_Init+0x74>
 80055fe:	4d66      	ldr	r5, [pc, #408]	; (8005798 <HAL_COMP_Init+0x208>)
 8005600:	42a9      	cmp	r1, r5
 8005602:	d155      	bne.n	80056b0 <HAL_COMP_Init+0x120>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005604:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005606:	4315      	orrs	r5, r2
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005608:	629d      	str	r5, [r3, #40]	; 0x28
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800560a:	06b5      	lsls	r5, r6, #26
 800560c:	d566      	bpl.n	80056dc <HAL_COMP_Init+0x14c>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800560e:	4281      	cmp	r1, r0
 8005610:	d002      	beq.n	8005618 <HAL_COMP_Init+0x88>
 8005612:	4d61      	ldr	r5, [pc, #388]	; (8005798 <HAL_COMP_Init+0x208>)
 8005614:	42a9      	cmp	r1, r5
 8005616:	d15c      	bne.n	80056d2 <HAL_COMP_Init+0x142>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005618:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800561a:	4315      	orrs	r5, r2
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800561c:	4281      	cmp	r1, r0
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800561e:	62dd      	str	r5, [r3, #44]	; 0x2c
 8005620:	d002      	beq.n	8005628 <HAL_COMP_Init+0x98>
 8005622:	4d5d      	ldr	r5, [pc, #372]	; (8005798 <HAL_COMP_Init+0x208>)
 8005624:	42a9      	cmp	r1, r5
 8005626:	d157      	bne.n	80056d8 <HAL_COMP_Init+0x148>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005628:	635a      	str	r2, [r3, #52]	; 0x34
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800562a:	07b7      	lsls	r7, r6, #30
 800562c:	d567      	bpl.n	80056fe <HAL_COMP_Init+0x16e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800562e:	4281      	cmp	r1, r0
 8005630:	d002      	beq.n	8005638 <HAL_COMP_Init+0xa8>
 8005632:	4d59      	ldr	r5, [pc, #356]	; (8005798 <HAL_COMP_Init+0x208>)
 8005634:	42a9      	cmp	r1, r5
 8005636:	d15e      	bne.n	80056f6 <HAL_COMP_Init+0x166>
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005638:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800563a:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800563c:	625d      	str	r5, [r3, #36]	; 0x24
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800563e:	07f5      	lsls	r5, r6, #31
 8005640:	d56e      	bpl.n	8005720 <HAL_COMP_Init+0x190>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005642:	4281      	cmp	r1, r0
 8005644:	d002      	beq.n	800564c <HAL_COMP_Init+0xbc>
 8005646:	4854      	ldr	r0, [pc, #336]	; (8005798 <HAL_COMP_Init+0x208>)
 8005648:	4281      	cmp	r1, r0
 800564a:	d165      	bne.n	8005718 <HAL_COMP_Init+0x188>
  SET_BIT(EXTI->IMR2, ExtiLine);
 800564c:	6a19      	ldr	r1, [r3, #32]
 800564e:	430a      	orrs	r2, r1
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	e06f      	b.n	8005734 <HAL_COMP_Init+0x1a4>
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005654:	0203      	lsls	r3, r0, #8
 8005656:	d4c2      	bmi.n	80055de <HAL_COMP_Init+0x4e>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005658:	4b50      	ldr	r3, [pc, #320]	; (800579c <HAL_COMP_Init+0x20c>)
 800565a:	4a51      	ldr	r2, [pc, #324]	; (80057a0 <HAL_COMP_Init+0x210>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005662:	2314      	movs	r3, #20
 8005664:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8005668:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0b6      	beq.n	80055de <HAL_COMP_Init+0x4e>
        wait_loop_index--;
 8005670:	9b01      	ldr	r3, [sp, #4]
 8005672:	3b01      	subs	r3, #1
 8005674:	e7f8      	b.n	8005668 <HAL_COMP_Init+0xd8>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005676:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <HAL_COMP_Init+0x214>)
 8005678:	4299      	cmp	r1, r3
 800567a:	d00d      	beq.n	8005698 <HAL_COMP_Init+0x108>
 800567c:	3304      	adds	r3, #4
 800567e:	4299      	cmp	r1, r3
 8005680:	d00d      	beq.n	800569e <HAL_COMP_Init+0x10e>
 8005682:	3304      	adds	r3, #4
 8005684:	4299      	cmp	r1, r3
 8005686:	d00d      	beq.n	80056a4 <HAL_COMP_Init+0x114>
 8005688:	3304      	adds	r3, #4
 800568a:	4299      	cmp	r1, r3
 800568c:	d00d      	beq.n	80056aa <HAL_COMP_Init+0x11a>
 800568e:	4281      	cmp	r1, r0
 8005690:	bf0c      	ite	eq
 8005692:	2201      	moveq	r2, #1
 8005694:	2202      	movne	r2, #2
 8005696:	e7a8      	b.n	80055ea <HAL_COMP_Init+0x5a>
 8005698:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800569c:	e7a5      	b.n	80055ea <HAL_COMP_Init+0x5a>
 800569e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80056a2:	e7a2      	b.n	80055ea <HAL_COMP_Init+0x5a>
 80056a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056a8:	e79f      	b.n	80055ea <HAL_COMP_Init+0x5a>
 80056aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056ae:	e79c      	b.n	80055ea <HAL_COMP_Init+0x5a>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80056b0:	689d      	ldr	r5, [r3, #8]
 80056b2:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80056b4:	609d      	str	r5, [r3, #8]
}
 80056b6:	e7a8      	b.n	800560a <HAL_COMP_Init+0x7a>
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056b8:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80056ba:	ea6f 0502 	mvn.w	r5, r2
 80056be:	d002      	beq.n	80056c6 <HAL_COMP_Init+0x136>
 80056c0:	4f35      	ldr	r7, [pc, #212]	; (8005798 <HAL_COMP_Init+0x208>)
 80056c2:	42b9      	cmp	r1, r7
 80056c4:	d102      	bne.n	80056cc <HAL_COMP_Init+0x13c>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80056c6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80056c8:	403d      	ands	r5, r7
 80056ca:	e79d      	b.n	8005608 <HAL_COMP_Init+0x78>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80056cc:	689f      	ldr	r7, [r3, #8]
 80056ce:	403d      	ands	r5, r7
 80056d0:	e7f0      	b.n	80056b4 <HAL_COMP_Init+0x124>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80056d2:	68dd      	ldr	r5, [r3, #12]
 80056d4:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80056d6:	60dd      	str	r5, [r3, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80056d8:	615a      	str	r2, [r3, #20]
}
 80056da:	e7a6      	b.n	800562a <HAL_COMP_Init+0x9a>
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056dc:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80056de:	ea6f 0502 	mvn.w	r5, r2
 80056e2:	d002      	beq.n	80056ea <HAL_COMP_Init+0x15a>
 80056e4:	4f2c      	ldr	r7, [pc, #176]	; (8005798 <HAL_COMP_Init+0x208>)
 80056e6:	42b9      	cmp	r1, r7
 80056e8:	d102      	bne.n	80056f0 <HAL_COMP_Init+0x160>
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80056ea:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80056ec:	403d      	ands	r5, r7
 80056ee:	e795      	b.n	800561c <HAL_COMP_Init+0x8c>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80056f0:	68df      	ldr	r7, [r3, #12]
 80056f2:	403d      	ands	r5, r7
 80056f4:	e7ef      	b.n	80056d6 <HAL_COMP_Init+0x146>
  SET_BIT(EXTI->EMR1, ExtiLine);
 80056f6:	685d      	ldr	r5, [r3, #4]
 80056f8:	4315      	orrs	r5, r2
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80056fa:	605d      	str	r5, [r3, #4]
}
 80056fc:	e79f      	b.n	800563e <HAL_COMP_Init+0xae>
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056fe:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005700:	ea6f 0702 	mvn.w	r7, r2
 8005704:	d002      	beq.n	800570c <HAL_COMP_Init+0x17c>
 8005706:	4d24      	ldr	r5, [pc, #144]	; (8005798 <HAL_COMP_Init+0x208>)
 8005708:	42a9      	cmp	r1, r5
 800570a:	d102      	bne.n	8005712 <HAL_COMP_Init+0x182>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800570c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800570e:	403d      	ands	r5, r7
 8005710:	e794      	b.n	800563c <HAL_COMP_Init+0xac>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005712:	685d      	ldr	r5, [r3, #4]
 8005714:	403d      	ands	r5, r7
 8005716:	e7f0      	b.n	80056fa <HAL_COMP_Init+0x16a>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	430a      	orrs	r2, r1
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800571c:	601a      	str	r2, [r3, #0]
}
 800571e:	e009      	b.n	8005734 <HAL_COMP_Init+0x1a4>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005720:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005722:	ea6f 0502 	mvn.w	r5, r2
 8005726:	d002      	beq.n	800572e <HAL_COMP_Init+0x19e>
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <HAL_COMP_Init+0x208>)
 800572a:	4291      	cmp	r1, r2
 800572c:	d10a      	bne.n	8005744 <HAL_COMP_Init+0x1b4>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800572e:	6a19      	ldr	r1, [r3, #32]
 8005730:	4029      	ands	r1, r5
 8005732:	6219      	str	r1, [r3, #32]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005734:	7f63      	ldrb	r3, [r4, #29]
 8005736:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800573a:	bb13      	cbnz	r3, 8005782 <HAL_COMP_Init+0x1f2>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800573c:	2301      	movs	r3, #1
 800573e:	7763      	strb	r3, [r4, #29]
    }
  }

  return status;
}
 8005740:	b003      	add	sp, #12
 8005742:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	402a      	ands	r2, r5
 8005748:	e7e8      	b.n	800571c <HAL_COMP_Init+0x18c>
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800574a:	4281      	cmp	r1, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800574c:	ea6f 0202 	mvn.w	r2, r2
 8005750:	d002      	beq.n	8005758 <HAL_COMP_Init+0x1c8>
 8005752:	4d11      	ldr	r5, [pc, #68]	; (8005798 <HAL_COMP_Init+0x208>)
 8005754:	42a9      	cmp	r1, r5
 8005756:	d108      	bne.n	800576a <HAL_COMP_Init+0x1da>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005758:	6a5d      	ldr	r5, [r3, #36]	; 0x24
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800575a:	4281      	cmp	r1, r0
 800575c:	ea05 0502 	and.w	r5, r5, r2
 8005760:	625d      	str	r5, [r3, #36]	; 0x24
 8005762:	d108      	bne.n	8005776 <HAL_COMP_Init+0x1e6>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005764:	6a19      	ldr	r1, [r3, #32]
 8005766:	400a      	ands	r2, r1
 8005768:	e772      	b.n	8005650 <HAL_COMP_Init+0xc0>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	4011      	ands	r1, r2
 800576e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	400a      	ands	r2, r1
 8005774:	e7d2      	b.n	800571c <HAL_COMP_Init+0x18c>
 8005776:	4808      	ldr	r0, [pc, #32]	; (8005798 <HAL_COMP_Init+0x208>)
 8005778:	4281      	cmp	r1, r0
 800577a:	d0f3      	beq.n	8005764 <HAL_COMP_Init+0x1d4>
 800577c:	e7f8      	b.n	8005770 <HAL_COMP_Init+0x1e0>
    status = HAL_ERROR;
 800577e:	2001      	movs	r0, #1
 8005780:	e7de      	b.n	8005740 <HAL_COMP_Init+0x1b0>
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2000      	movs	r0, #0
  return status;
 8005784:	e7dc      	b.n	8005740 <HAL_COMP_Init+0x1b0>
 8005786:	bf00      	nop
 8005788:	ff007e0f 	.word	0xff007e0f
 800578c:	40010200 	.word	0x40010200
 8005790:	40010214 	.word	0x40010214
 8005794:	40010400 	.word	0x40010400
 8005798:	40010218 	.word	0x40010218
 800579c:	20000000 	.word	0x20000000
 80057a0:	00030d40 	.word	0x00030d40
 80057a4:	40010204 	.word	0x40010204

080057a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057a8:	4907      	ldr	r1, [pc, #28]	; (80057c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80057aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80057c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80057c6:	4770      	bx	lr
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057cc:	4b16      	ldr	r3, [pc, #88]	; (8005828 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ce:	b530      	push	{r4, r5, lr}
 80057d0:	68dc      	ldr	r4, [r3, #12]
 80057d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057da:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057dc:	2d04      	cmp	r5, #4
 80057de:	bf28      	it	cs
 80057e0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e8:	bf8c      	ite	hi
 80057ea:	3c03      	subhi	r4, #3
 80057ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ee:	fa03 f505 	lsl.w	r5, r3, r5
 80057f2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057f6:	40a3      	lsls	r3, r4
 80057f8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057fc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80057fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005800:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005804:	bfac      	ite	ge
 8005806:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580a:	4a08      	ldrlt	r2, [pc, #32]	; (800582c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005810:	bfb8      	it	lt
 8005812:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005816:	b2db      	uxtb	r3, r3
 8005818:	bfaa      	itet	ge
 800581a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005820:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005824:	bd30      	pop	{r4, r5, pc}
 8005826:	bf00      	nop
 8005828:	e000ed00 	.word	0xe000ed00
 800582c:	e000ed14 	.word	0xe000ed14

08005830 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005830:	2800      	cmp	r0, #0
 8005832:	db08      	blt.n	8005846 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005834:	2301      	movs	r3, #1
 8005836:	0942      	lsrs	r2, r0, #5
 8005838:	f000 001f 	and.w	r0, r0, #31
 800583c:	fa03 f000 	lsl.w	r0, r3, r0
 8005840:	4b01      	ldr	r3, [pc, #4]	; (8005848 <HAL_NVIC_EnableIRQ+0x18>)
 8005842:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005846:	4770      	bx	lr
 8005848:	e000e100 	.word	0xe000e100

0800584c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800584c:	3801      	subs	r0, #1
 800584e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005852:	d20b      	bcs.n	800586c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005854:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005858:	4a05      	ldr	r2, [pc, #20]	; (8005870 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800585a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585c:	21f0      	movs	r1, #240	; 0xf0
 800585e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005862:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005864:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005866:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005868:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800586a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800586c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800586e:	4770      	bx	lr
 8005870:	e000ed00 	.word	0xe000ed00

08005874 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005874:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8005876:	4604      	mov	r4, r0
 8005878:	b168      	cbz	r0, 8005896 <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800587a:	7903      	ldrb	r3, [r0, #4]
 800587c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005880:	b913      	cbnz	r3, 8005888 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005882:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005884:	f7fe fa18 	bl	8003cb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005888:	2302      	movs	r3, #2
 800588a:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800588c:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800588e:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005890:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005892:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8005894:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005896:	2001      	movs	r0, #1
 8005898:	e7fc      	b.n	8005894 <HAL_DAC_Init+0x20>
	...

0800589c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800589c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a0:	4615      	mov	r5, r2
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058a2:	7942      	ldrb	r2, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80058a4:	688b      	ldr	r3, [r1, #8]
  __HAL_LOCK(hdac);
 80058a6:	2a01      	cmp	r2, #1
{
 80058a8:	4604      	mov	r4, r0
 80058aa:	460e      	mov	r6, r1
 80058ac:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 80058b0:	d01f      	beq.n	80058f2 <HAL_DAC_ConfigChannel+0x56>
 80058b2:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80058b4:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 80058b6:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80058b8:	7120      	strb	r0, [r4, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80058ba:	d13c      	bne.n	8005936 <HAL_DAC_ConfigChannel+0x9a>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80058bc:	f7fe fe04 	bl	80044c8 <HAL_GetTick>
 80058c0:	4607      	mov	r7, r0

    if (Channel == DAC_CHANNEL_1)
 80058c2:	b1c5      	cbz	r5, 80058f6 <HAL_DAC_ConfigChannel+0x5a>
    }

    else /* Channel 2 */
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f2c0 80b6 	blt.w	8005a3a <HAL_DAC_ConfigChannel+0x19e>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1U);
 80058ce:	2001      	movs	r0, #1
 80058d0:	f7fe fe00 	bl	80044d4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80058d8:	645a      	str	r2, [r3, #68]	; 0x44
 80058da:	e016      	b.n	800590a <HAL_DAC_ConfigChannel+0x6e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80058dc:	f7fe fdf4 	bl	80044c8 <HAL_GetTick>
 80058e0:	1bc0      	subs	r0, r0, r7
 80058e2:	2801      	cmp	r0, #1
 80058e4:	d907      	bls.n	80058f6 <HAL_DAC_ConfigChannel+0x5a>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80058e6:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80058e8:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80058ea:	f043 0308 	orr.w	r3, r3, #8
 80058ee:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80058f0:	7120      	strb	r0, [r4, #4]
  /* Process unlocked */
  __HAL_UNLOCK(hdac);

  /* Return function status */
  return HAL_OK;
}
 80058f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	d4ee      	bmi.n	80058dc <HAL_DAC_ConfigChannel+0x40>
      HAL_Delay(1);
 80058fe:	2001      	movs	r0, #1
 8005900:	f7fe fde8 	bl	80044d4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800590a:	6821      	ldr	r1, [r4, #0]
 800590c:	f005 0010 	and.w	r0, r5, #16
 8005910:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8005912:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005916:	4083      	lsls	r3, r0
 8005918:	ea22 0203 	bic.w	r2, r2, r3
 800591c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800591e:	4083      	lsls	r3, r0
 8005920:	431a      	orrs	r2, r3
 8005922:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005924:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005926:	22ff      	movs	r2, #255	; 0xff
 8005928:	4082      	lsls	r2, r0
 800592a:	ea23 0302 	bic.w	r3, r3, r2
 800592e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005930:	4082      	lsls	r2, r0
 8005932:	4313      	orrs	r3, r2
 8005934:	64cb      	str	r3, [r1, #76]	; 0x4c
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005936:	69f3      	ldr	r3, [r6, #28]
    tmpreg1 = hdac->Instance->CCR;
 8005938:	6822      	ldr	r2, [r4, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800593a:	2b01      	cmp	r3, #1
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800593c:	f005 0510 	and.w	r5, r5, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005940:	d108      	bne.n	8005954 <HAL_DAC_ConfigChannel+0xb8>
    tmpreg1 = hdac->Instance->CCR;
 8005942:	6b93      	ldr	r3, [r2, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005944:	211f      	movs	r1, #31
 8005946:	40a9      	lsls	r1, r5
 8005948:	ea23 0101 	bic.w	r1, r3, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800594c:	6a33      	ldr	r3, [r6, #32]
 800594e:	40ab      	lsls	r3, r5
 8005950:	430b      	orrs	r3, r1
    hdac->Instance->CCR = tmpreg1;
 8005952:	6393      	str	r3, [r2, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 8005954:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005956:	e9d6 2005 	ldrd	r2, r0, [r6, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800595a:	2707      	movs	r7, #7
 800595c:	40af      	lsls	r7, r5
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800595e:	2801      	cmp	r0, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005960:	ea6f 0107 	mvn.w	r1, r7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005964:	d070      	beq.n	8005a48 <HAL_DAC_ConfigChannel+0x1ac>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005966:	2802      	cmp	r0, #2
 8005968:	d071      	beq.n	8005a4e <HAL_DAC_ConfigChannel+0x1b2>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800596a:	fab2 f882 	clz	r8, r2
 800596e:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005972:	68b0      	ldr	r0, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005974:	f44f 7780 	mov.w	r7, #256	; 0x100
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005978:	4302      	orrs	r2, r0
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800597a:	fa07 f005 	lsl.w	r0, r7, r5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800597e:	7937      	ldrb	r7, [r6, #4]
 8005980:	2f01      	cmp	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005982:	f44f 7700 	mov.w	r7, #512	; 0x200
 8005986:	fa07 f705 	lsl.w	r7, r7, r5
 800598a:	ea23 0707 	bic.w	r7, r3, r7
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800598e:	7973      	ldrb	r3, [r6, #5]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005990:	ea42 0208 	orr.w	r2, r2, r8
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005994:	bf0c      	ite	eq
 8005996:	f44f 7880 	moveq.w	r8, #256	; 0x100
 800599a:	f04f 0800 	movne.w	r8, #0
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800599e:	2b01      	cmp	r3, #1
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80059a0:	6833      	ldr	r3, [r6, #0]
 80059a2:	ea07 0701 	and.w	r7, r7, r1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80059a6:	ea48 0202 	orr.w	r2, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80059aa:	ea27 0700 	bic.w	r7, r7, r0
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80059ae:	bf0c      	ite	eq
 80059b0:	f44f 7800 	moveq.w	r8, #512	; 0x200
 80059b4:	f04f 0800 	movne.w	r8, #0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80059b8:	2b02      	cmp	r3, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80059ba:	ea48 0802 	orr.w	r8, r8, r2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80059be:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80059c2:	d14d      	bne.n	8005a60 <HAL_DAC_ConfigChannel+0x1c4>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80059c4:	f002 f9fc 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80059c8:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <HAL_DAC_ConfigChannel+0x1c8>)
 80059ca:	4298      	cmp	r0, r3
 80059cc:	d942      	bls.n	8005a54 <HAL_DAC_ConfigChannel+0x1b8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80059ce:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
  hdac->Instance->MCR = tmpreg1;
 80059d2:	6821      	ldr	r1, [r4, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059d4:	fa08 f805 	lsl.w	r8, r8, r5
 80059d8:	ea48 0707 	orr.w	r7, r8, r7
  hdac->Instance->MCR = tmpreg1;
 80059dc:	63cf      	str	r7, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80059de:	680b      	ldr	r3, [r1, #0]
 80059e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059e4:	40aa      	lsls	r2, r5
 80059e6:	ea23 0302 	bic.w	r3, r3, r2
 80059ea:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 80059ec:	680a      	ldr	r2, [r1, #0]
  tmpreg2 = sConfig->DAC_Trigger;
 80059ee:	68f3      	ldr	r3, [r6, #12]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80059f0:	f640 70fe 	movw	r0, #4094	; 0xffe
 80059f4:	40a8      	lsls	r0, r5
 80059f6:	ea22 0000 	bic.w	r0, r2, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059fa:	fa03 f205 	lsl.w	r2, r3, r5
 80059fe:	4302      	orrs	r2, r0
  hdac->Instance->CR = tmpreg1;
 8005a00:	600a      	str	r2, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005a02:	680a      	ldr	r2, [r1, #0]
 8005a04:	20c0      	movs	r0, #192	; 0xc0
 8005a06:	40a8      	lsls	r0, r5
 8005a08:	ea22 0200 	bic.w	r2, r2, r0
 8005a0c:	600a      	str	r2, [r1, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005a0e:	f3c3 0283 	ubfx	r2, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005a12:	6933      	ldr	r3, [r6, #16]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005a14:	6e08      	ldr	r0, [r1, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005a16:	019b      	lsls	r3, r3, #6
 8005a18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a1c:	4313      	orrs	r3, r2
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005a1e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005a22:	40ab      	lsls	r3, r5
 8005a24:	fa02 f505 	lsl.w	r5, r2, r5
 8005a28:	ea20 0505 	bic.w	r5, r0, r5
 8005a2c:	431d      	orrs	r5, r3
  __HAL_UNLOCK(hdac);
 8005a2e:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005a30:	2301      	movs	r3, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005a32:	660d      	str	r5, [r1, #96]	; 0x60
  hdac->State = HAL_DAC_STATE_READY;
 8005a34:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8005a36:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8005a38:	e75b      	b.n	80058f2 <HAL_DAC_ConfigChannel+0x56>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a3a:	f7fe fd45 	bl	80044c8 <HAL_GetTick>
 8005a3e:	1bc0      	subs	r0, r0, r7
 8005a40:	2801      	cmp	r0, #1
 8005a42:	f67f af3f 	bls.w	80058c4 <HAL_DAC_ConfigChannel+0x28>
 8005a46:	e74e      	b.n	80058e6 <HAL_DAC_ConfigChannel+0x4a>
    connectOnChip = 0x00000000UL;
 8005a48:	f04f 0800 	mov.w	r8, #0
 8005a4c:	e791      	b.n	8005972 <HAL_DAC_ConfigChannel+0xd6>
    connectOnChip = DAC_MCR_MODE1_0;
 8005a4e:	f04f 0801 	mov.w	r8, #1
 8005a52:	e78e      	b.n	8005972 <HAL_DAC_ConfigChannel+0xd6>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <HAL_DAC_ConfigChannel+0x1cc>)
 8005a56:	4298      	cmp	r0, r3
 8005a58:	d9bb      	bls.n	80059d2 <HAL_DAC_ConfigChannel+0x136>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005a5a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8005a5e:	e7b8      	b.n	80059d2 <HAL_DAC_ConfigChannel+0x136>
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005a60:	431f      	orrs	r7, r3
 8005a62:	e7b6      	b.n	80059d2 <HAL_DAC_ConfigChannel+0x136>
 8005a64:	09896800 	.word	0x09896800
 8005a68:	04c4b400 	.word	0x04c4b400

08005a6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a6c:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a6e:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8005a72:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a74:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8005a76:	b114      	cbz	r4, 8005a7e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a78:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8005a7c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a7e:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 8005a82:	f004 061f 	and.w	r6, r4, #31
 8005a86:	2401      	movs	r4, #1
 8005a88:	40b4      	lsls	r4, r6
 8005a8a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a8c:	6804      	ldr	r4, [r0, #0]
 8005a8e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a90:	6883      	ldr	r3, [r0, #8]
 8005a92:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a94:	bf0b      	itete	eq
 8005a96:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005a98:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005a9a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005a9c:	60e2      	strne	r2, [r4, #12]
  }
}
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}

08005aa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005aa0:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005aa2:	490d      	ldr	r1, [pc, #52]	; (8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8005aa4:	4a0d      	ldr	r2, [pc, #52]	; (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8005aa6:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005aa8:	4c0d      	ldr	r4, [pc, #52]	; (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	bf88      	it	hi
 8005aae:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ab0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005ab2:	f021 0103 	bic.w	r1, r1, #3
 8005ab6:	440a      	add	r2, r1
 8005ab8:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005aba:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005abc:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8005abe:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ac0:	3b08      	subs	r3, #8
 8005ac2:	2214      	movs	r2, #20
 8005ac4:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	6503      	str	r3, [r0, #80]	; 0x50
}
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40020820 	.word	0x40020820
 8005adc:	40020800 	.word	0x40020800
 8005ae0:	40020407 	.word	0x40020407
 8005ae4:	40020880 	.word	0x40020880

08005ae8 <HAL_DMA_Init>:
{
 8005ae8:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d05e      	beq.n	8005bac <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005aee:	6801      	ldr	r1, [r0, #0]
 8005af0:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <HAL_DMA_Init+0xc8>)
 8005af2:	4299      	cmp	r1, r3
 8005af4:	f04f 0414 	mov.w	r4, #20
 8005af8:	d84b      	bhi.n	8005b92 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005afa:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <HAL_DMA_Init+0xcc>)
 8005afc:	440a      	add	r2, r1
 8005afe:	fbb2 f2f4 	udiv	r2, r2, r4
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b06:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8005b0a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8005b12:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 8005b16:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b18:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 8005b1a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1c:	4323      	orrs	r3, r4
 8005b1e:	6944      	ldr	r4, [r0, #20]
 8005b20:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b22:	6984      	ldr	r4, [r0, #24]
 8005b24:	4323      	orrs	r3, r4
 8005b26:	69c4      	ldr	r4, [r0, #28]
 8005b28:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b2a:	6a04      	ldr	r4, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b2c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8005b30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b34:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8005b36:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8005b38:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b3a:	f7ff ffb1 	bl	8005aa0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b3e:	6883      	ldr	r3, [r0, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b40:	6c81      	ldr	r1, [r0, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b46:	bf04      	itt	eq
 8005b48:	2300      	moveq	r3, #0
 8005b4a:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b4c:	6842      	ldr	r2, [r0, #4]
 8005b4e:	b2d3      	uxtb	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b52:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b56:	3a01      	subs	r2, #1
 8005b58:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b5a:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b5c:	d821      	bhi.n	8005ba2 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b60:	4916      	ldr	r1, [pc, #88]	; (8005bbc <HAL_DMA_Init+0xd4>)
 8005b62:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b64:	441a      	add	r2, r3

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b66:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b68:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b74:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b76:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b78:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b7a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b7c:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <HAL_DMA_Init+0xd8>)
 8005b7e:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b80:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005b82:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b84:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005b86:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005b8a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8005b8e:	4618      	mov	r0, r3
}
 8005b90:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <HAL_DMA_Init+0xdc>)
 8005b94:	440b      	add	r3, r1
 8005b96:	fbb3 f3f4 	udiv	r3, r3, r4
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <HAL_DMA_Init+0xe0>)
 8005ba0:	e7b3      	b.n	8005b0a <HAL_DMA_Init+0x22>
    hdma->DMAmuxRequestGen = 0U;
 8005ba2:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ba4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ba8:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005baa:	e7e9      	b.n	8005b80 <HAL_DMA_Init+0x98>
    return HAL_ERROR;
 8005bac:	2001      	movs	r0, #1
 8005bae:	e7ef      	b.n	8005b90 <HAL_DMA_Init+0xa8>
 8005bb0:	40020407 	.word	0x40020407
 8005bb4:	bffdfff8 	.word	0xbffdfff8
 8005bb8:	1000823f 	.word	0x1000823f
 8005bbc:	40020940 	.word	0x40020940
 8005bc0:	40020900 	.word	0x40020900
 8005bc4:	bffdfbf8 	.word	0xbffdfbf8
 8005bc8:	40020400 	.word	0x40020400

08005bcc <HAL_DMA_Start_IT>:
{
 8005bcc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8005bce:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8005bd2:	2d01      	cmp	r5, #1
{
 8005bd4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8005bd6:	d039      	beq.n	8005c4c <HAL_DMA_Start_IT+0x80>
 8005bd8:	2501      	movs	r5, #1
 8005bda:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8005bde:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8005be2:	2d01      	cmp	r5, #1
 8005be4:	f04f 0600 	mov.w	r6, #0
 8005be8:	f04f 0502 	mov.w	r5, #2
 8005bec:	d12c      	bne.n	8005c48 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bee:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf2:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005bf4:	6806      	ldr	r6, [r0, #0]
 8005bf6:	6835      	ldr	r5, [r6, #0]
 8005bf8:	f025 0501 	bic.w	r5, r5, #1
 8005bfc:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bfe:	f7ff ff35 	bl	8005a6c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8005c02:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005c04:	6803      	ldr	r3, [r0, #0]
 8005c06:	b1ba      	cbz	r2, 8005c38 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c0e:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c12:	6811      	ldr	r1, [r2, #0]
 8005c14:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c16:	bf42      	ittt	mi
 8005c18:	6811      	ldrmi	r1, [r2, #0]
 8005c1a:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8005c1e:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005c20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c22:	b11a      	cbz	r2, 8005c2c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c24:	6811      	ldr	r1, [r2, #0]
 8005c26:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c2a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c34:	2000      	movs	r0, #0
}
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	f022 0204 	bic.w	r2, r2, #4
 8005c3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	f042 020a 	orr.w	r2, r2, #10
 8005c46:	e7e2      	b.n	8005c0e <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8005c48:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8005c4c:	2002      	movs	r0, #2
 8005c4e:	e7f2      	b.n	8005c36 <HAL_DMA_Start_IT+0x6a>

08005c50 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c50:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005c54:	2a02      	cmp	r2, #2
{
 8005c56:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c58:	d009      	beq.n	8005c6e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8005c5e:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005c6c:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c6e:	6802      	ldr	r2, [r0, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c70:	6c80      	ldr	r0, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c72:	6811      	ldr	r1, [r2, #0]
 8005c74:	f021 010e 	bic.w	r1, r1, #14
 8005c78:	6011      	str	r1, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c7a:	6801      	ldr	r1, [r0, #0]
 8005c7c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005c80:	6001      	str	r1, [r0, #0]
     __HAL_DMA_DISABLE(hdma);
 8005c82:	6811      	ldr	r1, [r2, #0]
 8005c84:	f021 0101 	bic.w	r1, r1, #1
 8005c88:	6011      	str	r1, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c8a:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	; 0x40
 8005c8e:	f002 011f 	and.w	r1, r2, #31
 8005c92:	2201      	movs	r2, #1
 8005c94:	408a      	lsls	r2, r1
 8005c96:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c98:	e9d3 2113 	ldrd	r2, r1, [r3, #76]	; 0x4c
     if (hdma->DMAmuxRequestGen != 0U)
 8005c9c:	6d58      	ldr	r0, [r3, #84]	; 0x54
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c9e:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0dd      	beq.n	8005c60 <HAL_DMA_Abort+0x10>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ca4:	6802      	ldr	r2, [r0, #0]
 8005ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005caa:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cac:	e9d3 2116 	ldrd	r2, r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8005cb0:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cb2:	6051      	str	r1, [r2, #4]
 8005cb4:	e7d4      	b.n	8005c60 <HAL_DMA_Abort+0x10>

08005cb6 <HAL_DMA_Abort_IT>:
{
 8005cb6:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005cb8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d009      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005cc4:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005ccc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	e02b      	b.n	8005d2c <HAL_DMA_Abort_IT+0x76>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd4:	6803      	ldr	r3, [r0, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	f022 020e 	bic.w	r2, r2, #14
 8005cdc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ce6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005ce8:	6813      	ldr	r3, [r2, #0]
 8005cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cee:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cf0:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8005cf4:	f003 021f 	and.w	r2, r3, #31
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4093      	lsls	r3, r2
 8005cfc:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cfe:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8005d02:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005d04:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005d06:	b133      	cbz	r3, 8005d16 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d0e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d10:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 8005d14:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 8005d1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005d1e:	2400      	movs	r4, #0
 8005d20:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0d3      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0x1a>
      hdma->XferAbortCallback(hdma);
 8005d28:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	4620      	mov	r0, r4
}
 8005d2c:	bd10      	pop	{r4, pc}

08005d2e <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d2e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d30:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8005d32:	6803      	ldr	r3, [r0, #0]
{
 8005d34:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d36:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d3a:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005d3c:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d3e:	2404      	movs	r4, #4
 8005d40:	4094      	lsls	r4, r2
 8005d42:	4234      	tst	r4, r6
 8005d44:	d00e      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x36>
 8005d46:	f015 0f04 	tst.w	r5, #4
 8005d4a:	d00b      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d50:	bf5e      	ittt	pl
 8005d52:	681a      	ldrpl	r2, [r3, #0]
 8005d54:	f022 0204 	bicpl.w	r2, r2, #4
 8005d58:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8005d5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d5c:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8005d5e:	b373      	cbz	r3, 8005dbe <HAL_DMA_IRQHandler+0x90>
}
 8005d60:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005d62:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d64:	2402      	movs	r4, #2
 8005d66:	4094      	lsls	r4, r2
 8005d68:	4234      	tst	r4, r6
 8005d6a:	d012      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 8005d6c:	f015 0f02 	tst.w	r5, #2
 8005d70:	d00f      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	0695      	lsls	r5, r2, #26
 8005d76:	d406      	bmi.n	8005d86 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	f022 020a 	bic.w	r2, r2, #10
 8005d7e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005d86:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d88:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005d8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8005d8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005d90:	e7e5      	b.n	8005d5e <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005d92:	2408      	movs	r4, #8
 8005d94:	4094      	lsls	r4, r2
 8005d96:	4234      	tst	r4, r6
 8005d98:	d011      	beq.n	8005dbe <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 8005d9a:	072c      	lsls	r4, r5, #28
 8005d9c:	d50f      	bpl.n	8005dbe <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d9e:	681c      	ldr	r4, [r3, #0]
 8005da0:	f024 040e 	bic.w	r4, r4, #14
 8005da4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005da6:	2301      	movs	r3, #1
 8005da8:	fa03 f202 	lsl.w	r2, r3, r2
 8005dac:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dae:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005db0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005db4:	2300      	movs	r3, #0
 8005db6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8005dba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005dbc:	e7cf      	b.n	8005d5e <HAL_DMA_IRQHandler+0x30>
}
 8005dbe:	bc70      	pop	{r4, r5, r6}
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc8:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8005f58 <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dcc:	4c60      	ldr	r4, [pc, #384]	; (8005f50 <HAL_GPIO_Init+0x18c>)
  uint32_t position = 0x00U;
 8005dce:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005dd0:	680a      	ldr	r2, [r1, #0]
 8005dd2:	fa32 f503 	lsrs.w	r5, r2, r3
 8005dd6:	d102      	bne.n	8005dde <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8005dd8:	b003      	add	sp, #12
 8005dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dde:	2501      	movs	r5, #1
 8005de0:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 8005de4:	ea1e 0202 	ands.w	r2, lr, r2
 8005de8:	f000 80a5 	beq.w	8005f36 <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dec:	684e      	ldr	r6, [r1, #4]
 8005dee:	f006 0503 	and.w	r5, r6, #3
 8005df2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005df6:	f04f 0c03 	mov.w	ip, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dfa:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dfc:	fa0c fc08 	lsl.w	ip, ip, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e00:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e02:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e06:	d834      	bhi.n	8005e72 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8005e08:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e0a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e0e:	68cf      	ldr	r7, [r1, #12]
 8005e10:	fa07 f708 	lsl.w	r7, r7, r8
 8005e14:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005e18:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005e1a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e1c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e20:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8005e24:	409f      	lsls	r7, r3
 8005e26:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005e2a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005e2c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e2e:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e32:	688f      	ldr	r7, [r1, #8]
 8005e34:	fa07 f708 	lsl.w	r7, r7, r8
 8005e38:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e3c:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8005e3e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e40:	d119      	bne.n	8005e76 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8005e42:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8005e46:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e4a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005e4e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e52:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005e56:	f04f 0e0f 	mov.w	lr, #15
 8005e5a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8005e5e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e62:	690f      	ldr	r7, [r1, #16]
 8005e64:	fa07 f70b 	lsl.w	r7, r7, fp
 8005e68:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005e6c:	f8ca 7020 	str.w	r7, [sl, #32]
 8005e70:	e001      	b.n	8005e76 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e72:	2d03      	cmp	r5, #3
 8005e74:	d1da      	bne.n	8005e2c <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8005e76:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e78:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e7c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e80:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e82:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005e86:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e88:	d055      	beq.n	8005f36 <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e8a:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8005e8e:	f045 0501 	orr.w	r5, r5, #1
 8005e92:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8005e96:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8005e9a:	f023 0703 	bic.w	r7, r3, #3
 8005e9e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8005ea2:	f005 0501 	and.w	r5, r5, #1
 8005ea6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8005eaa:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005eac:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eb0:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005eb2:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005eb4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005eb8:	f04f 0c0f 	mov.w	ip, #15
 8005ebc:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ec0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ec4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ec8:	d037      	beq.n	8005f3a <HAL_GPIO_Init+0x176>
 8005eca:	4d22      	ldr	r5, [pc, #136]	; (8005f54 <HAL_GPIO_Init+0x190>)
 8005ecc:	42a8      	cmp	r0, r5
 8005ece:	d036      	beq.n	8005f3e <HAL_GPIO_Init+0x17a>
 8005ed0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ed4:	42a8      	cmp	r0, r5
 8005ed6:	d034      	beq.n	8005f42 <HAL_GPIO_Init+0x17e>
 8005ed8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005edc:	42a8      	cmp	r0, r5
 8005ede:	d032      	beq.n	8005f46 <HAL_GPIO_Init+0x182>
 8005ee0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ee4:	42a8      	cmp	r0, r5
 8005ee6:	d030      	beq.n	8005f4a <HAL_GPIO_Init+0x186>
 8005ee8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005eec:	42a8      	cmp	r0, r5
 8005eee:	bf0c      	ite	eq
 8005ef0:	2505      	moveq	r5, #5
 8005ef2:	2506      	movne	r5, #6
 8005ef4:	fa05 f50e 	lsl.w	r5, r5, lr
 8005ef8:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005efc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8005efe:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8005f00:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f02:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8005f06:	bf0c      	ite	eq
 8005f08:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005f0a:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8005f0c:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8005f0e:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f10:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8005f14:	bf0c      	ite	eq
 8005f16:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005f18:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8005f1a:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8005f1c:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f1e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8005f22:	bf0c      	ite	eq
 8005f24:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005f26:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8005f28:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8005f2a:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f2c:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005f2e:	bf54      	ite	pl
 8005f30:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8005f32:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8005f34:	6025      	str	r5, [r4, #0]
    position++;
 8005f36:	3301      	adds	r3, #1
 8005f38:	e74a      	b.n	8005dd0 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	e7da      	b.n	8005ef4 <HAL_GPIO_Init+0x130>
 8005f3e:	2501      	movs	r5, #1
 8005f40:	e7d8      	b.n	8005ef4 <HAL_GPIO_Init+0x130>
 8005f42:	2502      	movs	r5, #2
 8005f44:	e7d6      	b.n	8005ef4 <HAL_GPIO_Init+0x130>
 8005f46:	2503      	movs	r5, #3
 8005f48:	e7d4      	b.n	8005ef4 <HAL_GPIO_Init+0x130>
 8005f4a:	2504      	movs	r5, #4
 8005f4c:	e7d2      	b.n	8005ef4 <HAL_GPIO_Init+0x130>
 8005f4e:	bf00      	nop
 8005f50:	40010400 	.word	0x40010400
 8005f54:	48000400 	.word	0x48000400
 8005f58:	40021000 	.word	0x40021000

08005f5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f5c:	b10a      	cbz	r2, 8005f62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f5e:	6181      	str	r1, [r0, #24]
 8005f60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f62:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005f64:	4770      	bx	lr

08005f66 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f66:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f68:	ea01 0203 	and.w	r2, r1, r3
 8005f6c:	ea21 0103 	bic.w	r1, r1, r3
 8005f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f74:	6181      	str	r1, [r0, #24]
}
 8005f76:	4770      	bx	lr

08005f78 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f78:	6803      	ldr	r3, [r0, #0]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f7e:	bf44      	itt	mi
 8005f80:	2200      	movmi	r2, #0
 8005f82:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f88:	bf5e      	ittt	pl
 8005f8a:	699a      	ldrpl	r2, [r3, #24]
 8005f8c:	f042 0201 	orrpl.w	r2, r2, #1
 8005f90:	619a      	strpl	r2, [r3, #24]
  }
}
 8005f92:	4770      	bx	lr

08005f94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f94:	b530      	push	{r4, r5, lr}
 8005f96:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f98:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f9a:	432b      	orrs	r3, r5
 8005f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fa0:	4a06      	ldr	r2, [pc, #24]	; (8005fbc <I2C_TransferConfig+0x28>)
 8005fa2:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fa4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005fa8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005faa:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fb2:	ea20 0002 	bic.w	r0, r0, r2
 8005fb6:	4303      	orrs	r3, r0
 8005fb8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fba:	bd30      	pop	{r4, r5, pc}
 8005fbc:	03ff63ff 	.word	0x03ff63ff

08005fc0 <I2C_IsErrorOccurred>:
{
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fc4:	6803      	ldr	r3, [r0, #0]
 8005fc6:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fc8:	f014 0410 	ands.w	r4, r4, #16
{
 8005fcc:	4605      	mov	r5, r0
 8005fce:	4688      	mov	r8, r1
 8005fd0:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fd2:	d079      	beq.n	80060c8 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd4:	2210      	movs	r2, #16
 8005fd6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd8:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	0694      	lsls	r4, r2, #26
 8005fe4:	d436      	bmi.n	8006054 <I2C_IsErrorOccurred+0x94>
 8005fe6:	b10e      	cbz	r6, 8005fec <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005fe8:	2404      	movs	r4, #4
 8005fea:	e039      	b.n	8006060 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005fec:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005ff0:	d0f6      	beq.n	8005fe0 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ff2:	f7fe fa69 	bl	80044c8 <HAL_GetTick>
 8005ff6:	1bc0      	subs	r0, r0, r7
 8005ff8:	4540      	cmp	r0, r8
 8005ffa:	d802      	bhi.n	8006002 <I2C_IsErrorOccurred+0x42>
 8005ffc:	f1b8 0f00 	cmp.w	r8, #0
 8006000:	d1ed      	bne.n	8005fde <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8006006:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800600a:	6998      	ldr	r0, [r3, #24]
 800600c:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 800600e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006010:	d50a      	bpl.n	8006028 <I2C_IsErrorOccurred+0x68>
 8006012:	0449      	lsls	r1, r1, #17
 8006014:	d408      	bmi.n	8006028 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8006016:	2a20      	cmp	r2, #32
 8006018:	d006      	beq.n	8006028 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006020:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006022:	f7fe fa51 	bl	80044c8 <HAL_GetTick>
 8006026:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	699c      	ldr	r4, [r3, #24]
 800602c:	f014 0420 	ands.w	r4, r4, #32
 8006030:	d1d5      	bne.n	8005fde <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006032:	f7fe fa49 	bl	80044c8 <HAL_GetTick>
 8006036:	1bc0      	subs	r0, r0, r7
 8006038:	2819      	cmp	r0, #25
 800603a:	d9f5      	bls.n	8006028 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800603c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 800603e:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006042:	f043 0320 	orr.w	r3, r3, #32
 8006046:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8006048:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800604a:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800604e:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8006052:	e7e9      	b.n	8006028 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8006054:	2e00      	cmp	r6, #0
 8006056:	d1c7      	bne.n	8005fe8 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006058:	2220      	movs	r2, #32
 800605a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800605c:	2404      	movs	r4, #4
    status = HAL_ERROR;
 800605e:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006064:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006066:	bf41      	itttt	mi
 8006068:	f44f 7180 	movmi.w	r1, #256	; 0x100
 800606c:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800606e:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8006072:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006074:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006076:	bf41      	itttt	mi
 8006078:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800607c:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006080:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8006082:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006084:	0592      	lsls	r2, r2, #22
 8006086:	d521      	bpl.n	80060cc <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006088:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800608c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006090:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006092:	4628      	mov	r0, r5
 8006094:	f7ff ff70 	bl	8005f78 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006098:	682a      	ldr	r2, [r5, #0]
 800609a:	6853      	ldr	r3, [r2, #4]
 800609c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80060a0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80060a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80060ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80060b0:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80060b4:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060b6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80060c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80060c4:	2601      	movs	r6, #1
 80060c6:	e003      	b.n	80060d0 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 80060c8:	4626      	mov	r6, r4
 80060ca:	e7c9      	b.n	8006060 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 80060cc:	2e00      	cmp	r6, #0
 80060ce:	d1e0      	bne.n	8006092 <I2C_IsErrorOccurred+0xd2>
}
 80060d0:	4630      	mov	r0, r6
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080060d6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80060d6:	b570      	push	{r4, r5, r6, lr}
 80060d8:	4604      	mov	r4, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	079b      	lsls	r3, r3, #30
 80060e4:	d501      	bpl.n	80060ea <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80060e6:	2000      	movs	r0, #0
}
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ea:	4632      	mov	r2, r6
 80060ec:	4629      	mov	r1, r5
 80060ee:	4620      	mov	r0, r4
 80060f0:	f7ff ff66 	bl	8005fc0 <I2C_IsErrorOccurred>
 80060f4:	b9a0      	cbnz	r0, 8006120 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80060f6:	1c6a      	adds	r2, r5, #1
 80060f8:	d0f1      	beq.n	80060de <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fe f9e5 	bl	80044c8 <HAL_GetTick>
 80060fe:	1b80      	subs	r0, r0, r6
 8006100:	42a8      	cmp	r0, r5
 8006102:	d801      	bhi.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006104:	2d00      	cmp	r5, #0
 8006106:	d1ea      	bne.n	80060de <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800610a:	f043 0320 	orr.w	r3, r3, #32
 800610e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006110:	2320      	movs	r3, #32
 8006112:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006116:	2300      	movs	r3, #0
 8006118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800611c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006120:	2001      	movs	r0, #1
 8006122:	e7e1      	b.n	80060e8 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08006124 <I2C_WaitOnFlagUntilTimeout>:
{
 8006124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006128:	9f06      	ldr	r7, [sp, #24]
 800612a:	4604      	mov	r4, r0
 800612c:	4688      	mov	r8, r1
 800612e:	4616      	mov	r6, r2
 8006130:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	6993      	ldr	r3, [r2, #24]
 8006136:	ea38 0303 	bics.w	r3, r8, r3
 800613a:	bf0c      	ite	eq
 800613c:	2301      	moveq	r3, #1
 800613e:	2300      	movne	r3, #0
 8006140:	42b3      	cmp	r3, r6
 8006142:	d001      	beq.n	8006148 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006144:	2000      	movs	r0, #0
 8006146:	e015      	b.n	8006174 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006148:	1c6b      	adds	r3, r5, #1
 800614a:	d0f3      	beq.n	8006134 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614c:	f7fe f9bc 	bl	80044c8 <HAL_GetTick>
 8006150:	1bc0      	subs	r0, r0, r7
 8006152:	42a8      	cmp	r0, r5
 8006154:	d801      	bhi.n	800615a <I2C_WaitOnFlagUntilTimeout+0x36>
 8006156:	2d00      	cmp	r5, #0
 8006158:	d1eb      	bne.n	8006132 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800615a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800615c:	f043 0320 	orr.w	r3, r3, #32
 8006160:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006162:	2320      	movs	r3, #32
 8006164:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	2300      	movs	r3, #0
 800616a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800616e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006172:	2001      	movs	r0, #1
}
 8006174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006178 <I2C_RequestMemoryWrite>:
{
 8006178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800617c:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 8006180:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <I2C_RequestMemoryWrite+0x68>)
 8006184:	9300      	str	r3, [sp, #0]
{
 8006186:	4605      	mov	r5, r0
 8006188:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800618a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800618e:	b2f2      	uxtb	r2, r6
 8006190:	f7ff ff00 	bl	8005f94 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006194:	4642      	mov	r2, r8
 8006196:	4639      	mov	r1, r7
 8006198:	4628      	mov	r0, r5
 800619a:	f7ff ff9c 	bl	80060d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800619e:	b118      	cbz	r0, 80061a8 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 80061a0:	2001      	movs	r0, #1
}
 80061a2:	b002      	add	sp, #8
 80061a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061a8:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061aa:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ac:	d10d      	bne.n	80061ca <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061ae:	b2e4      	uxtb	r4, r4
 80061b0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8cd 8000 	str.w	r8, [sp]
 80061b8:	463b      	mov	r3, r7
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	4628      	mov	r0, r5
 80061be:	f7ff ffb1 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80061c2:	3800      	subs	r0, #0
 80061c4:	bf18      	it	ne
 80061c6:	2001      	movne	r0, #1
 80061c8:	e7eb      	b.n	80061a2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061ca:	0a22      	lsrs	r2, r4, #8
 80061cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ce:	4639      	mov	r1, r7
 80061d0:	4642      	mov	r2, r8
 80061d2:	4628      	mov	r0, r5
 80061d4:	f7ff ff7f 	bl	80060d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d1e1      	bne.n	80061a0 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	e7e6      	b.n	80061ae <I2C_RequestMemoryWrite+0x36>
 80061e0:	80002000 	.word	0x80002000

080061e4 <I2C_RequestMemoryRead>:
{
 80061e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80061e8:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 80061ec:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061ee:	4b17      	ldr	r3, [pc, #92]	; (800624c <I2C_RequestMemoryRead+0x68>)
 80061f0:	9300      	str	r3, [sp, #0]
{
 80061f2:	4605      	mov	r5, r0
 80061f4:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061f6:	2300      	movs	r3, #0
 80061f8:	b2f2      	uxtb	r2, r6
 80061fa:	f7ff fecb 	bl	8005f94 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061fe:	4642      	mov	r2, r8
 8006200:	4639      	mov	r1, r7
 8006202:	4628      	mov	r0, r5
 8006204:	f7ff ff67 	bl	80060d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006208:	b118      	cbz	r0, 8006212 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 800620a:	2001      	movs	r0, #1
}
 800620c:	b002      	add	sp, #8
 800620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006212:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006214:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006216:	d10d      	bne.n	8006234 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006218:	b2e4      	uxtb	r4, r4
 800621a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800621c:	2200      	movs	r2, #0
 800621e:	f8cd 8000 	str.w	r8, [sp]
 8006222:	463b      	mov	r3, r7
 8006224:	2140      	movs	r1, #64	; 0x40
 8006226:	4628      	mov	r0, r5
 8006228:	f7ff ff7c 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800622c:	3800      	subs	r0, #0
 800622e:	bf18      	it	ne
 8006230:	2001      	movne	r0, #1
 8006232:	e7eb      	b.n	800620c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006234:	0a22      	lsrs	r2, r4, #8
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006238:	4639      	mov	r1, r7
 800623a:	4642      	mov	r2, r8
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff ff4a 	bl	80060d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006242:	2800      	cmp	r0, #0
 8006244:	d1e1      	bne.n	800620a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	e7e6      	b.n	8006218 <I2C_RequestMemoryRead+0x34>
 800624a:	bf00      	nop
 800624c:	80002000 	.word	0x80002000

08006250 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
 8006256:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	069b      	lsls	r3, r3, #26
 800625e:	d501      	bpl.n	8006264 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006260:	2000      	movs	r0, #0
}
 8006262:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006264:	4632      	mov	r2, r6
 8006266:	4629      	mov	r1, r5
 8006268:	4620      	mov	r0, r4
 800626a:	f7ff fea9 	bl	8005fc0 <I2C_IsErrorOccurred>
 800626e:	b990      	cbnz	r0, 8006296 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006270:	f7fe f92a 	bl	80044c8 <HAL_GetTick>
 8006274:	1b80      	subs	r0, r0, r6
 8006276:	42a8      	cmp	r0, r5
 8006278:	d801      	bhi.n	800627e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800627a:	2d00      	cmp	r5, #0
 800627c:	d1ec      	bne.n	8006258 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800627e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006280:	f043 0320 	orr.w	r3, r3, #32
 8006284:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006286:	2320      	movs	r3, #32
 8006288:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800628c:	2300      	movs	r3, #0
 800628e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006292:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006296:	2001      	movs	r0, #1
 8006298:	e7e3      	b.n	8006262 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800629a <HAL_I2C_Init>:
{
 800629a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800629c:	4604      	mov	r4, r0
 800629e:	2800      	cmp	r0, #0
 80062a0:	d04a      	beq.n	8006338 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80062a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062aa:	b91b      	cbnz	r3, 80062b4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80062ac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80062b0:	f7fd fd48 	bl	8003d44 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80062b4:	2324      	movs	r3, #36	; 0x24
 80062b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062c4:	6862      	ldr	r2, [r4, #4]
 80062c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062ca:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062d2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062d4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062d8:	2901      	cmp	r1, #1
 80062da:	d124      	bne.n	8006326 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062e0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80062e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ec:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062f4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062f6:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80062fa:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062fc:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006302:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006304:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8006308:	430a      	orrs	r2, r1
 800630a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006314:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8006316:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006318:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800631a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800631e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006324:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006326:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800632a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800632c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800632e:	bf04      	itt	eq
 8006330:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8006334:	605a      	streq	r2, [r3, #4]
 8006336:	e7d4      	b.n	80062e2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8006338:	2001      	movs	r0, #1
 800633a:	e7f3      	b.n	8006324 <HAL_I2C_Init+0x8a>

0800633c <HAL_I2C_Mem_Write>:
{
 800633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	b085      	sub	sp, #20
 8006342:	469b      	mov	fp, r3
 8006344:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006348:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800634a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800634e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006352:	2b20      	cmp	r3, #32
{
 8006354:	4604      	mov	r4, r0
 8006356:	460f      	mov	r7, r1
 8006358:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800635a:	f040 80a3 	bne.w	80064a4 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800635e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006360:	b10b      	cbz	r3, 8006366 <HAL_I2C_Mem_Write+0x2a>
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	b933      	cbnz	r3, 8006374 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800636c:	2001      	movs	r0, #1
}
 800636e:	b005      	add	sp, #20
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006374:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006378:	2b01      	cmp	r3, #1
 800637a:	f000 8093 	beq.w	80064a4 <HAL_I2C_Mem_Write+0x168>
 800637e:	2501      	movs	r5, #1
 8006380:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006384:	f7fe f8a0 	bl	80044c8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006388:	2319      	movs	r3, #25
 800638a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800638c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800638e:	462a      	mov	r2, r5
 8006390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006394:	4620      	mov	r0, r4
 8006396:	f7ff fec5 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 800639a:	4680      	mov	r8, r0
 800639c:	2800      	cmp	r0, #0
 800639e:	d1e5      	bne.n	800636c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063a0:	2321      	movs	r3, #33	; 0x21
 80063a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063a6:	2340      	movs	r3, #64	; 0x40
 80063a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80063ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80063b0:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063b2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80063b4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80063b6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063b8:	e9cd 9600 	strd	r9, r6, [sp]
 80063bc:	465b      	mov	r3, fp
 80063be:	4652      	mov	r2, sl
 80063c0:	4639      	mov	r1, r7
 80063c2:	4620      	mov	r0, r4
 80063c4:	f7ff fed8 	bl	8006178 <I2C_RequestMemoryWrite>
 80063c8:	b110      	cbz	r0, 80063d0 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 80063ca:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80063ce:	e7cd      	b.n	800636c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2bff      	cmp	r3, #255	; 0xff
 80063d6:	d955      	bls.n	8006484 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063d8:	22ff      	movs	r2, #255	; 0xff
 80063da:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063dc:	9000      	str	r0, [sp, #0]
 80063de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063e2:	4639      	mov	r1, r7
 80063e4:	4620      	mov	r0, r4
 80063e6:	f7ff fdd5 	bl	8005f94 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ea:	4632      	mov	r2, r6
 80063ec:	4649      	mov	r1, r9
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff fe71 	bl	80060d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d1b9      	bne.n	800636c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006400:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006402:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006404:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006406:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006408:	3b01      	subs	r3, #1
 800640a:	b29b      	uxth	r3, r3
 800640c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800640e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006410:	3a01      	subs	r2, #1
 8006412:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006414:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006416:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006418:	b1ab      	cbz	r3, 8006446 <HAL_I2C_Mem_Write+0x10a>
 800641a:	b9a2      	cbnz	r2, 8006446 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800641c:	9600      	str	r6, [sp, #0]
 800641e:	464b      	mov	r3, r9
 8006420:	2180      	movs	r1, #128	; 0x80
 8006422:	4620      	mov	r0, r4
 8006424:	f7ff fe7e 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8006428:	2800      	cmp	r0, #0
 800642a:	d19f      	bne.n	800636c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800642c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	2bff      	cmp	r3, #255	; 0xff
 8006432:	d92f      	bls.n	8006494 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006438:	9000      	str	r0, [sp, #0]
 800643a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800643e:	4639      	mov	r1, r7
 8006440:	4620      	mov	r0, r4
 8006442:	f7ff fda7 	bl	8005f94 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006446:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1cd      	bne.n	80063ea <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800644e:	4632      	mov	r2, r6
 8006450:	4649      	mov	r1, r9
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff fefc 	bl	8006250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006458:	2800      	cmp	r0, #0
 800645a:	d187      	bne.n	800636c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	2120      	movs	r1, #32
 8006460:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006468:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800646c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006476:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800647a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800647e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006482:	e774      	b.n	800636e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8006484:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006486:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8006488:	b292      	uxth	r2, r2
 800648a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800648c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	e7a6      	b.n	80063e2 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8006494:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006496:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8006498:	b292      	uxth	r2, r2
 800649a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800649c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	e7cc      	b.n	800643e <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80064a4:	2002      	movs	r0, #2
 80064a6:	e762      	b.n	800636e <HAL_I2C_Mem_Write+0x32>

080064a8 <HAL_I2C_Mem_Read>:
{
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	b085      	sub	sp, #20
 80064ae:	469b      	mov	fp, r3
 80064b0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80064b4:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80064ba:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064be:	2b20      	cmp	r3, #32
{
 80064c0:	4604      	mov	r4, r0
 80064c2:	460f      	mov	r7, r1
 80064c4:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c6:	f040 80a7 	bne.w	8006618 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80064ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064cc:	b10b      	cbz	r3, 80064d2 <HAL_I2C_Mem_Read+0x2a>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	b933      	cbnz	r3, 80064e0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064d6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80064d8:	2001      	movs	r0, #1
}
 80064da:	b005      	add	sp, #20
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80064e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f000 8097 	beq.w	8006618 <HAL_I2C_Mem_Read+0x170>
 80064ea:	2501      	movs	r5, #1
 80064ec:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80064f0:	f7fd ffea 	bl	80044c8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064f4:	2319      	movs	r3, #25
 80064f6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80064f8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064fa:	462a      	mov	r2, r5
 80064fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006500:	4620      	mov	r0, r4
 8006502:	f7ff fe0f 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8006506:	4680      	mov	r8, r0
 8006508:	2800      	cmp	r0, #0
 800650a:	d1e5      	bne.n	80064d8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800650c:	2322      	movs	r3, #34	; 0x22
 800650e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800651a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800651c:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800651e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8006520:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8006522:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006524:	e9cd 9600 	strd	r9, r6, [sp]
 8006528:	465b      	mov	r3, fp
 800652a:	4652      	mov	r2, sl
 800652c:	4639      	mov	r1, r7
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fe58 	bl	80061e4 <I2C_RequestMemoryRead>
 8006534:	b110      	cbz	r0, 800653c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8006536:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800653a:	e7cd      	b.n	80064d8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800653c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	2bff      	cmp	r3, #255	; 0xff
 8006542:	4b36      	ldr	r3, [pc, #216]	; (800661c <HAL_I2C_Mem_Read+0x174>)
 8006544:	d958      	bls.n	80065f8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006546:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006548:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800654a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800654c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006550:	4639      	mov	r1, r7
 8006552:	4620      	mov	r0, r4
 8006554:	f7ff fd1e 	bl	8005f94 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006558:	9600      	str	r6, [sp, #0]
 800655a:	464b      	mov	r3, r9
 800655c:	2200      	movs	r2, #0
 800655e:	2104      	movs	r1, #4
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff fddf 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 8006566:	2800      	cmp	r0, #0
 8006568:	d1b6      	bne.n	80064d8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006570:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006572:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006574:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006576:	3301      	adds	r3, #1
 8006578:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800657a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800657c:	3b01      	subs	r3, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006582:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006584:	3a01      	subs	r2, #1
 8006586:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006588:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800658a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800658c:	b1ab      	cbz	r3, 80065ba <HAL_I2C_Mem_Read+0x112>
 800658e:	b9a2      	cbnz	r2, 80065ba <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006590:	9600      	str	r6, [sp, #0]
 8006592:	464b      	mov	r3, r9
 8006594:	2180      	movs	r1, #128	; 0x80
 8006596:	4620      	mov	r0, r4
 8006598:	f7ff fdc4 	bl	8006124 <I2C_WaitOnFlagUntilTimeout>
 800659c:	2800      	cmp	r0, #0
 800659e:	d19b      	bne.n	80064d8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2bff      	cmp	r3, #255	; 0xff
 80065a6:	d92f      	bls.n	8006608 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a8:	22ff      	movs	r2, #255	; 0xff
 80065aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80065ac:	9000      	str	r0, [sp, #0]
 80065ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065b2:	4639      	mov	r1, r7
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7ff fced 	bl	8005f94 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80065ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1ca      	bne.n	8006558 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c2:	4632      	mov	r2, r6
 80065c4:	4649      	mov	r1, r9
 80065c6:	4620      	mov	r0, r4
 80065c8:	f7ff fe42 	bl	8006250 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d183      	bne.n	80064d8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	2120      	movs	r1, #32
 80065d4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80065dc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80065e0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80065ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80065ee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80065f6:	e770      	b.n	80064da <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80065f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065fa:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80065fc:	b292      	uxth	r2, r2
 80065fe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	e7a3      	b.n	8006550 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8006608:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800660a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800660c:	b292      	uxth	r2, r2
 800660e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	e7cc      	b.n	80065b2 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8006618:	2002      	movs	r0, #2
 800661a:	e75e      	b.n	80064da <HAL_I2C_Mem_Read+0x32>
 800661c:	80002400 	.word	0x80002400

08006620 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006620:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8006622:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006624:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006626:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8006628:	b103      	cbz	r3, 800662c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800662a:	4718      	bx	r3
}
 800662c:	4770      	bx	lr

0800662e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800662e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006630:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006634:	2b20      	cmp	r3, #32
 8006636:	b2dc      	uxtb	r4, r3
 8006638:	d11d      	bne.n	8006676 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800663a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800663e:	2b01      	cmp	r3, #1
 8006640:	d019      	beq.n	8006676 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006642:	2324      	movs	r3, #36	; 0x24
 8006644:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006648:	6803      	ldr	r3, [r0, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f022 0201 	bic.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006658:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4311      	orrs	r1, r2
 800665e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006668:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800666e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006672:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006674:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006676:	2002      	movs	r0, #2
 8006678:	e7fc      	b.n	8006674 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800667a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800667a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800667c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006680:	2b20      	cmp	r3, #32
 8006682:	b2dc      	uxtb	r4, r3
 8006684:	d11c      	bne.n	80066c0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006686:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800668a:	2b01      	cmp	r3, #1
 800668c:	d018      	beq.n	80066c0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800668e:	2324      	movs	r3, #36	; 0x24
 8006690:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006694:	6803      	ldr	r3, [r0, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800669e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066a0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066a4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f042 0201 	orr.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80066b4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80066b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80066bc:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80066be:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80066c0:	2002      	movs	r0, #2
 80066c2:	e7fc      	b.n	80066be <HAL_I2CEx_ConfigDigitalFilter+0x44>

080066c4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80066c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80066c8:	4604      	mov	r4, r0
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d073      	beq.n	80067b6 <HAL_OPAMP_Init+0xf2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80066ce:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80066d2:	2b05      	cmp	r3, #5
 80066d4:	d06f      	beq.n	80067b6 <HAL_OPAMP_Init+0xf2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80066d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d06b      	beq.n	80067b6 <HAL_OPAMP_Init+0xf2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066de:	4b38      	ldr	r3, [pc, #224]	; (80067c0 <HAL_OPAMP_Init+0xfc>)
 80066e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	661a      	str	r2, [r3, #96]	; 0x60
 80066e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80066f2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80066f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066fa:	b90b      	cbnz	r3, 8006700 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80066fc:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006700:	4620      	mov	r0, r4
 8006702:	f7fd fb69 	bl	8003dd8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800670a:	680e      	ldr	r6, [r1, #0]
 800670c:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8006710:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006714:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80067c4 <HAL_OPAMP_Init+0x100>
 8006718:	f026 0610 	bic.w	r6, r6, #16
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800671c:	f023 0220 	bic.w	r2, r3, #32
      MODIFY_REG(hopamp->Instance->CSR,
 8006720:	ea46 0609 	orr.w	r6, r6, r9
 8006724:	e9d4 c709 	ldrd	ip, r7, [r4, #36]	; 0x24
 8006728:	e9d4 500c 	ldrd	r5, r0, [r4, #48]	; 0x30
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800672c:	2a40      	cmp	r2, #64	; 0x40
 800672e:	6862      	ldr	r2, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8006730:	600e      	str	r6, [r1, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006732:	680e      	ldr	r6, [r1, #0]
 8006734:	ea42 0203 	orr.w	r2, r2, r3
 8006738:	ea06 0608 	and.w	r6, r6, r8
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800673c:	d12c      	bne.n	8006798 <HAL_OPAMP_Init+0xd4>
      MODIFY_REG(hopamp->Instance->CSR,
 800673e:	7d23      	ldrb	r3, [r4, #20]
 8006740:	ea42 020e 	orr.w	r2, r2, lr
 8006744:	2b01      	cmp	r3, #1
 8006746:	ea42 020c 	orr.w	r2, r2, ip
 800674a:	bf0c      	ite	eq
 800674c:	f44f 7e80 	moveq.w	lr, #256	; 0x100
 8006750:	f04f 0e00 	movne.w	lr, #0
 8006754:	ea42 0307 	orr.w	r3, r2, r7
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006758:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 800675c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006760:	4333      	orrs	r3, r6
 8006762:	ea43 030e 	orr.w	r3, r3, lr
 8006766:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006768:	698b      	ldr	r3, [r1, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	db09      	blt.n	8006782 <HAL_OPAMP_Init+0xbe>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800676e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8006772:	698a      	ldr	r2, [r1, #24]
 8006774:	4303      	orrs	r3, r0
 8006776:	6a20      	ldr	r0, [r4, #32]
 8006778:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800677c:	4303      	orrs	r3, r0
 800677e:	4313      	orrs	r3, r2
 8006780:	618b      	str	r3, [r1, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006782:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8006786:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800678a:	b9b3      	cbnz	r3, 80067ba <HAL_OPAMP_Init+0xf6>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800678c:	2301      	movs	r3, #1
 800678e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8006792:	b003      	add	sp, #12
 8006794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8006798:	68e3      	ldr	r3, [r4, #12]
 800679a:	431a      	orrs	r2, r3
 800679c:	7d23      	ldrb	r3, [r4, #20]
 800679e:	ea42 020e 	orr.w	r2, r2, lr
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	ea42 030c 	orr.w	r3, r2, ip
 80067a8:	bf0c      	ite	eq
 80067aa:	f44f 7e80 	moveq.w	lr, #256	; 0x100
 80067ae:	f04f 0e00 	movne.w	lr, #0
 80067b2:	433b      	orrs	r3, r7
 80067b4:	e7d0      	b.n	8006758 <HAL_OPAMP_Init+0x94>
    return HAL_ERROR;
 80067b6:	2001      	movs	r0, #1
 80067b8:	e7eb      	b.n	8006792 <HAL_OPAMP_Init+0xce>
    return status;
 80067ba:	2000      	movs	r0, #0
 80067bc:	e7e9      	b.n	8006792 <HAL_OPAMP_Init+0xce>
 80067be:	bf00      	nop
 80067c0:	40021000 	.word	0x40021000
 80067c4:	e0003e11 	.word	0xe0003e11

080067c8 <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80067c8:	b188      	cbz	r0, 80067ee <HAL_OPAMP_Start+0x26>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80067ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d00d      	beq.n	80067ee <HAL_OPAMP_Start+0x26>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80067d2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d109      	bne.n	80067ee <HAL_OPAMP_Start+0x26>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80067da:	6802      	ldr	r2, [r0, #0]
 80067dc:	6813      	ldr	r3, [r2, #0]
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	6013      	str	r3, [r2, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80067e4:	2304      	movs	r3, #4
 80067e6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_StatusTypeDef status = HAL_OK;
 80067ea:	2000      	movs	r0, #0
 80067ec:	4770      	bx	lr
    status = HAL_ERROR;
 80067ee:	2001      	movs	r0, #1
    }


  }
  return status;
}
 80067f0:	4770      	bx	lr

080067f2 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 80067f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80067f6:	4604      	mov	r4, r0
 80067f8:	2800      	cmp	r0, #0
 80067fa:	f000 809c 	beq.w	8006936 <HAL_OPAMP_SelfCalibrate+0x144>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80067fe:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006802:	2b05      	cmp	r3, #5
 8006804:	f000 8097 	beq.w	8006936 <HAL_OPAMP_SelfCalibrate+0x144>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 8006808:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800680c:	2b01      	cmp	r3, #1
 800680e:	f040 8092 	bne.w	8006936 <HAL_OPAMP_SelfCalibrate+0x144>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006812:	6803      	ldr	r3, [r0, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	f042 0202 	orr.w	r2, r2, #2
 800681a:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	f042 0210 	orr.w	r2, r2, #16
 8006822:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800682a:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006832:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	2704      	movs	r7, #4

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
      delta = 8UL;
 800683e:	2608      	movs	r6, #8
      trimmingvaluen = 16UL;
 8006840:	2510      	movs	r5, #16

      while (delta != 0UL)
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	6813      	ldr	r3, [r2, #0]
 8006846:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800684a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800684e:	6013      	str	r3, [r2, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8006850:	2002      	movs	r0, #2
 8006852:	f7fd fe3f 	bl	80044d4 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	6813      	ldr	r3, [r2, #0]
 800685a:	005b      	lsls	r3, r3, #1
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 800685c:	bf4c      	ite	mi
 800685e:	19ad      	addmi	r5, r5, r6
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8006860:	1bad      	subpl	r5, r5, r6
      while (delta != 0UL)
 8006862:	3f01      	subs	r7, #1
        }

        delta >>= 1;
 8006864:	ea4f 0656 	mov.w	r6, r6, lsr #1
      while (delta != 0UL)
 8006868:	d1eb      	bne.n	8006842 <HAL_OPAMP_SelfCalibrate+0x50>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8006870:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8006874:	6013      	str	r3, [r2, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8006876:	2002      	movs	r0, #2
 8006878:	f7fd fe2c 	bl	80044d4 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	0050      	lsls	r0, r2, #1
 8006882:	d506      	bpl.n	8006892 <HAL_OPAMP_SelfCalibrate+0xa0>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006884:	681a      	ldr	r2, [r3, #0]
        trimmingvaluen++;
 8006886:	3501      	adds	r5, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006888:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 800688c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8006890:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f04f 0804 	mov.w	r8, #4

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
      delta = 8UL;
 80068a2:	2708      	movs	r7, #8
      trimmingvaluep = 16UL;
 80068a4:	2610      	movs	r6, #16

      while (delta != 0UL)
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	6813      	ldr	r3, [r2, #0]
 80068aa:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 80068ae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80068b2:	6013      	str	r3, [r2, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 80068b4:	2002      	movs	r0, #2
 80068b6:	f7fd fe0d 	bl	80044d4 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	6813      	ldr	r3, [r2, #0]
 80068be:	0059      	lsls	r1, r3, #1
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 80068c0:	bf4c      	ite	mi
 80068c2:	19f6      	addmi	r6, r6, r7
        }
        else
        {
          trimmingvaluep -= delta;
 80068c4:	1bf6      	subpl	r6, r6, r7
      while (delta != 0UL)
 80068c6:	f1b8 0801 	subs.w	r8, r8, #1
        }

        delta >>= 1;
 80068ca:	ea4f 0757 	mov.w	r7, r7, lsr #1
      while (delta != 0UL)
 80068ce:	d1ea      	bne.n	80068a6 <HAL_OPAMP_SelfCalibrate+0xb4>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 80068d6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80068da:	6013      	str	r3, [r2, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80068dc:	2002      	movs	r0, #2
 80068de:	f7fd fdf9 	bl	80044d4 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	0052      	lsls	r2, r2, #1
 80068e8:	d506      	bpl.n	80068f8 <HAL_OPAMP_SelfCalibrate+0x106>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80068ea:	681a      	ldr	r2, [r3, #0]
        trimmingvaluep++;
 80068ec:	3601      	adds	r6, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80068ee:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 80068f2:	ea42 42c6 	orr.w	r2, r2, r6, lsl #19
 80068f6:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068fe:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	f022 0202 	bic.w	r2, r2, #2
 800690e:	601a      	str	r2, [r3, #0]
      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8006910:	2210      	movs	r2, #16
 8006912:	62e2      	str	r2, [r4, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 800691a:	e9c4 650c 	strd	r6, r5, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800691e:	ea42 46c6 	orr.w	r6, r2, r6, lsl #19
 8006922:	601e      	str	r6, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 800692a:	ea42 6505 	orr.w	r5, r2, r5, lsl #24
 800692e:	601d      	str	r5, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006930:	2000      	movs	r0, #0
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
    }
  }
  return status;
}
 8006932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_ERROR;
 8006936:	2001      	movs	r0, #1
 8006938:	e7fb      	b.n	8006932 <HAL_OPAMP_SelfCalibrate+0x140>

0800693a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800693a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800693c:	4604      	mov	r4, r0
{
 800693e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8006940:	2800      	cmp	r0, #0
 8006942:	d055      	beq.n	80069f0 <HAL_PCD_Init+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006944:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8006948:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800694c:	b91b      	cbnz	r3, 8006956 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800694e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006952:	f004 fbbb 	bl	800b0cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006956:	2303      	movs	r3, #3
 8006958:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800695c:	6820      	ldr	r0, [r4, #0]
 800695e:	f002 ff6d 	bl	800983c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006962:	2300      	movs	r3, #0
 8006964:	6865      	ldr	r5, [r4, #4]
 8006966:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006968:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800696a:	4618      	mov	r0, r3
 800696c:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800696e:	428d      	cmp	r5, r1
 8006970:	f103 0201 	add.w	r2, r3, #1
 8006974:	d821      	bhi.n	80069ba <HAL_PCD_Init+0x80>
 8006976:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006978:	2628      	movs	r6, #40	; 0x28
 800697a:	4619      	mov	r1, r3
 800697c:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800697e:	4285      	cmp	r5, r0
 8006980:	f103 0301 	add.w	r3, r3, #1
 8006984:	d827      	bhi.n	80069d6 <HAL_PCD_Init+0x9c>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006986:	f104 0610 	add.w	r6, r4, #16
 800698a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800698c:	466d      	mov	r5, sp
 800698e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006990:	6833      	ldr	r3, [r6, #0]
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	1d23      	adds	r3, r4, #4
 8006996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	f002 ff59 	bl	8009850 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800699e:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80069a0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80069a2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80069a6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80069aa:	69e3      	ldr	r3, [r4, #28]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d102      	bne.n	80069b6 <HAL_PCD_Init+0x7c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fe5a 	bl	800766a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80069b6:	4628      	mov	r0, r5
 80069b8:	e01b      	b.n	80069f2 <HAL_PCD_Init+0xb8>
    hpcd->IN_ep[i].is_in = 1U;
 80069ba:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069be:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80069c2:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80069c6:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069ca:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069cc:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80069d0:	6418      	str	r0, [r3, #64]	; 0x40
 80069d2:	4613      	mov	r3, r2
 80069d4:	e7ca      	b.n	800696c <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 80069d6:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069da:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80069de:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80069e2:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80069e6:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069ea:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069ee:	e7c5      	b.n	800697c <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 80069f0:	2001      	movs	r0, #1
}
 80069f2:	b007      	add	sp, #28
 80069f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80069f6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80069f8:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80069fc:	2b01      	cmp	r3, #1
{
 80069fe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006a00:	d00c      	beq.n	8006a1c <HAL_PCD_Start+0x26>
 8006a02:	2301      	movs	r3, #1
 8006a04:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006a08:	6800      	ldr	r0, [r0, #0]
 8006a0a:	f002 ff0e 	bl	800982a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	f003 f9c8 	bl	8009da4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a14:	2000      	movs	r0, #0
 8006a16:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8006a1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006a1c:	2002      	movs	r0, #2
 8006a1e:	e7fc      	b.n	8006a1a <HAL_PCD_Start+0x24>

08006a20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a20:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006a22:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8006a26:	2a01      	cmp	r2, #1
{
 8006a28:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006a2a:	d00b      	beq.n	8006a44 <HAL_PCD_SetAddress+0x24>
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006a32:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a36:	6800      	ldr	r0, [r0, #0]
 8006a38:	f003 f9ae 	bl	8009d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8006a42:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006a44:	2002      	movs	r0, #2
 8006a46:	e7fc      	b.n	8006a42 <HAL_PCD_SetAddress+0x22>

08006a48 <HAL_PCD_IRQHandler>:
{
 8006a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006a4e:	6800      	ldr	r0, [r0, #0]
 8006a50:	f003 f9b3 	bl	8009dba <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006a54:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 8006a58:	f000 842d 	beq.w	80072b6 <HAL_PCD_IRQHandler+0x86e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006a5c:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8006d6c <HAL_PCD_IRQHandler+0x324>
 8006a60:	4fc1      	ldr	r7, [pc, #772]	; (8006d68 <HAL_PCD_IRQHandler+0x320>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a62:	6820      	ldr	r0, [r4, #0]
 8006a64:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006a68:	041a      	lsls	r2, r3, #16
 8006a6a:	d402      	bmi.n	8006a72 <HAL_PCD_IRQHandler+0x2a>
}
 8006a6c:	b003      	add	sp, #12
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8006a72:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8006a76:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8006a78:	f015 050f 	ands.w	r5, r5, #15
 8006a7c:	f040 80b7 	bne.w	8006bee <HAL_PCD_IRQHandler+0x1a6>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a80:	f011 0110 	ands.w	r1, r1, #16
 8006a84:	d12a      	bne.n	8006adc <HAL_PCD_IRQHandler+0x94>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a86:	8803      	ldrh	r3, [r0, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	ea03 0308 	and.w	r3, r3, r8
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a92:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006a98:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006a9c:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8006aa0:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006aa4:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006aa6:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8006aaa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab0:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006ab2:	4413      	add	r3, r2
 8006ab4:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006ab6:	f004 fb46 	bl	800b146 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006aba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0cf      	beq.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
 8006ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ac4:	2a00      	cmp	r2, #0
 8006ac6:	d1cc      	bne.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006ac8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006acc:	6821      	ldr	r1, [r4, #0]
 8006ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006ad6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8006ada:	e7c2      	b.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006adc:	8805      	ldrh	r5, [r0, #0]
 8006ade:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006ae0:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8006ae4:	d020      	beq.n	8006b28 <HAL_PCD_IRQHandler+0xe0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006ae6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006aea:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006aee:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8006af2:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006af6:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8006afa:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8006afe:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b06:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b0a:	f003 fb87 	bl	800a21c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	8813      	ldrh	r3, [r2, #0]
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	051b      	lsls	r3, r3, #20
 8006b18:	0d1b      	lsrs	r3, r3, #20
 8006b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006b20:	4620      	mov	r0, r4
 8006b22:	f004 fb01 	bl	800b128 <HAL_PCD_SetupStageCallback>
 8006b26:	e79c      	b.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006b28:	041a      	lsls	r2, r3, #16
 8006b2a:	d59a      	bpl.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b2c:	8803      	ldrh	r3, [r0, #0]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	051b      	lsls	r3, r3, #20
 8006b34:	0d1b      	lsrs	r3, r3, #20
 8006b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b3c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006b40:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006b44:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8006b48:	fa11 f383 	uxtah	r3, r1, r3
 8006b4c:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8006b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b54:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006b58:	b18b      	cbz	r3, 8006b7e <HAL_PCD_IRQHandler+0x136>
 8006b5a:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8006b5e:	b171      	cbz	r1, 8006b7e <HAL_PCD_IRQHandler+0x136>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b60:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006b64:	f003 fb5a 	bl	800a21c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8006b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b6c:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8006b70:	4413      	add	r3, r2
 8006b72:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006b76:	4629      	mov	r1, r5
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f004 fadb 	bl	800b134 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006b7e:	6821      	ldr	r1, [r4, #0]
 8006b80:	880b      	ldrh	r3, [r1, #0]
 8006b82:	051b      	lsls	r3, r3, #20
 8006b84:	f53f af6d 	bmi.w	8006a62 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006b88:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8006b8c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8006b90:	2d3e      	cmp	r5, #62	; 0x3e
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f201 4006 	addw	r0, r1, #1030	; 0x406
 8006b98:	d908      	bls.n	8006bac <HAL_PCD_IRQHandler+0x164>
 8006b9a:	096a      	lsrs	r2, r5, #5
 8006b9c:	06ee      	lsls	r6, r5, #27
 8006b9e:	bf08      	it	eq
 8006ba0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006ba4:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	e00a      	b.n	8006bc2 <HAL_PCD_IRQHandler+0x17a>
 8006bac:	b9cd      	cbnz	r5, 8006be2 <HAL_PCD_IRQHandler+0x19a>
 8006bae:	5ac2      	ldrh	r2, [r0, r3]
 8006bb0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006bb4:	0412      	lsls	r2, r2, #16
 8006bb6:	0c12      	lsrs	r2, r2, #16
 8006bb8:	52c2      	strh	r2, [r0, r3]
 8006bba:	5ac2      	ldrh	r2, [r0, r3]
 8006bbc:	b292      	uxth	r2, r2
 8006bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bc2:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006bc4:	880b      	ldrh	r3, [r1, #0]
 8006bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	0c1b      	lsrs	r3, r3, #16
 8006bd2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	800b      	strh	r3, [r1, #0]
 8006be0:	e73f      	b.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006be2:	086a      	lsrs	r2, r5, #1
 8006be4:	07ed      	lsls	r5, r5, #31
 8006be6:	bf48      	it	mi
 8006be8:	3201      	addmi	r2, #1
 8006bea:	0292      	lsls	r2, r2, #10
 8006bec:	e7dc      	b.n	8006ba8 <HAL_PCD_IRQHandler+0x160>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006bee:	fa0f f985 	sxth.w	r9, r5
 8006bf2:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bf6:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006bf8:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bfa:	f140 80f7 	bpl.w	8006dec <HAL_PCD_IRQHandler+0x3a4>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bfe:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	051b      	lsls	r3, r3, #20
 8006c08:	0d1b      	lsrs	r3, r3, #20
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8006c0e:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006c10:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 8006c14:	fb01 4105 	mla	r1, r1, r5, r4
 8006c18:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8006c1c:	b9bb      	cbnz	r3, 8006c4e <HAL_PCD_IRQHandler+0x206>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c1e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006c22:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006c26:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8006c2a:	fa1c f383 	uxtah	r3, ip, r3
 8006c2e:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8006c32:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8006c36:	f1ba 0f00 	cmp.w	sl, #0
 8006c3a:	f000 80bb 	beq.w	8006db4 <HAL_PCD_IRQHandler+0x36c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c3e:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8006c42:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c44:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8006c48:	f003 fae8 	bl	800a21c <USB_ReadPMA>
 8006c4c:	e0b2      	b.n	8006db4 <HAL_PCD_IRQHandler+0x36c>
          if (ep->type == EP_TYPE_BULK)
 8006c4e:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8006c58:	f040 808a 	bne.w	8006d70 <HAL_PCD_IRQHandler+0x328>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c5c:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len >= count)
 8006c60:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c64:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c68:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8006c6c:	f006 0e40 	and.w	lr, r6, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c70:	d03d      	beq.n	8006cee <HAL_PCD_IRQHandler+0x2a6>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c72:	fa1a fa8c 	uxtah	sl, sl, ip
 8006c76:	4482      	add	sl, r0
 8006c78:	f8ba a402 	ldrh.w	sl, [sl, #1026]	; 0x402
 8006c7c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8006c80:	4592      	cmp	sl, r2
 8006c82:	d913      	bls.n	8006cac <HAL_PCD_IRQHandler+0x264>
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006c8a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c96:	0412      	lsls	r2, r2, #16
 8006c98:	0c12      	lsrs	r2, r2, #16
 8006c9a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8006c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ca6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8006caa:	e005      	b.n	8006cb8 <HAL_PCD_IRQHandler+0x270>
      ep->xfer_len -= count;
 8006cac:	eba2 020a 	sub.w	r2, r2, sl
 8006cb0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	d0e8      	beq.n	8006c8a <HAL_PCD_IRQHandler+0x242>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006cb8:	f1be 0f00 	cmp.w	lr, #0
 8006cbc:	d00d      	beq.n	8006cda <HAL_PCD_IRQHandler+0x292>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006cbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006cc2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006cc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006cca:	0412      	lsls	r2, r2, #16
 8006ccc:	0c12      	lsrs	r2, r2, #16
 8006cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cd2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006cd6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8006cda:	f1ba 0f00 	cmp.w	sl, #0
 8006cde:	d069      	beq.n	8006db4 <HAL_PCD_IRQHandler+0x36c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ce0:	2128      	movs	r1, #40	; 0x28
 8006ce2:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ce6:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8006cea:	4653      	mov	r3, sl
 8006cec:	e7aa      	b.n	8006c44 <HAL_PCD_IRQHandler+0x1fc>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006cee:	fa1a fc8c 	uxtah	ip, sl, ip
 8006cf2:	4484      	add	ip, r0
 8006cf4:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 8006cf8:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8006cfc:	4592      	cmp	sl, r2
 8006cfe:	d912      	bls.n	8006d26 <HAL_PCD_IRQHandler+0x2de>
 8006d00:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006d04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d10:	0412      	lsls	r2, r2, #16
 8006d12:	0c12      	lsrs	r2, r2, #16
 8006d14:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8006d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d20:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8006d24:	e005      	b.n	8006d32 <HAL_PCD_IRQHandler+0x2ea>
      ep->xfer_len -= count;
 8006d26:	eba2 020a 	sub.w	r2, r2, sl
 8006d2a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	d0e8      	beq.n	8006d04 <HAL_PCD_IRQHandler+0x2bc>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006d32:	f1be 0f00 	cmp.w	lr, #0
 8006d36:	d10d      	bne.n	8006d54 <HAL_PCD_IRQHandler+0x30c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d38:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d3c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006d40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d44:	0412      	lsls	r2, r2, #16
 8006d46:	0c12      	lsrs	r2, r2, #16
 8006d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006d50:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8006d54:	f1ba 0f00 	cmp.w	sl, #0
 8006d58:	d02c      	beq.n	8006db4 <HAL_PCD_IRQHandler+0x36c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d5a:	2128      	movs	r1, #40	; 0x28
 8006d5c:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d60:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8006d64:	4653      	mov	r3, sl
 8006d66:	e76d      	b.n	8006c44 <HAL_PCD_IRQHandler+0x1fc>
 8006d68:	ffff8000 	.word	0xffff8000
 8006d6c:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d70:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006d78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d7c:	0412      	lsls	r2, r2, #16
 8006d7e:	0c12      	lsrs	r2, r2, #16
 8006d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d84:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006d88:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006d8c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006d90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d94:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d98:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006d9c:	d062      	beq.n	8006e64 <HAL_PCD_IRQHandler+0x41c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d9e:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8006da2:	fa1c f383 	uxtah	r3, ip, r3
 8006da6:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8006daa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8006dae:	f1ba 0f00 	cmp.w	sl, #0
 8006db2:	d198      	bne.n	8006ce6 <HAL_PCD_IRQHandler+0x29e>
        ep->xfer_count += count;
 8006db4:	2128      	movs	r1, #40	; 0x28
 8006db6:	fb01 4305 	mla	r3, r1, r5, r4
 8006dba:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8006dbe:	4452      	add	r2, sl
 8006dc0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8006dc4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8006dc8:	4452      	add	r2, sl
 8006dca:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006dce:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8006dd2:	b11a      	cbz	r2, 8006ddc <HAL_PCD_IRQHandler+0x394>
 8006dd4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006dd8:	459a      	cmp	sl, r3
 8006dda:	d24f      	bcs.n	8006e7c <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ddc:	2328      	movs	r3, #40	; 0x28
 8006dde:	fb03 4305 	mla	r3, r3, r5, r4
 8006de2:	4620      	mov	r0, r4
 8006de4:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8006de8:	f004 f9a4 	bl	800b134 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dec:	0632      	lsls	r2, r6, #24
 8006dee:	f57f ae38 	bpl.w	8006a62 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006df2:	6820      	ldr	r0, [r4, #0]
 8006df4:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea03 0308 	and.w	r3, r3, r8
 8006dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e02:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8006e06:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8006e0a:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8006e0e:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006e12:	f899 302b 	ldrb.w	r3, [r9, #43]	; 0x2b
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d05b      	beq.n	8006ed2 <HAL_PCD_IRQHandler+0x48a>
          ep->xfer_len = 0U;
 8006e1a:	fb0c 4c05 	mla	ip, ip, r5, r4
 8006e1e:	2500      	movs	r5, #0
          if (ep->doublebuffer != 0U)
 8006e20:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
          ep->xfer_len = 0U;
 8006e24:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d03a      	beq.n	8006ea2 <HAL_PCD_IRQHandler+0x45a>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e2c:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8006e30:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8006e34:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8006e38:	d039      	beq.n	8006eae <HAL_PCD_IRQHandler+0x466>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e3a:	bb3b      	cbnz	r3, 8006e8c <HAL_PCD_IRQHandler+0x444>
 8006e3c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006e40:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e44:	fa10 f083 	uxtah	r0, r0, r3
 8006e48:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8006e4c:	8803      	ldrh	r3, [r0, #0]
 8006e4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	8003      	strh	r3, [r0, #0]
 8006e58:	8803      	ldrh	r3, [r0, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e60:	8003      	strh	r3, [r0, #0]
 8006e62:	e01e      	b.n	8006ea2 <HAL_PCD_IRQHandler+0x45a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e64:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8006e68:	fa1c f383 	uxtah	r3, ip, r3
 8006e6c:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8006e70:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8006e74:	f1ba 0f00 	cmp.w	sl, #0
 8006e78:	d09c      	beq.n	8006db4 <HAL_PCD_IRQHandler+0x36c>
 8006e7a:	e771      	b.n	8006d60 <HAL_PCD_IRQHandler+0x318>
        ep = &hpcd->OUT_ep[epindex];
 8006e7c:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006e86:	f002 ffab 	bl	8009de0 <USB_EPStartXfer>
 8006e8a:	e7af      	b.n	8006dec <HAL_PCD_IRQHandler+0x3a4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d108      	bne.n	8006ea2 <HAL_PCD_IRQHandler+0x45a>
 8006e90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006e94:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8006e98:	fa10 f082 	uxtah	r0, r0, r2
 8006e9c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8006ea0:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ea2:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f004 f94d 	bl	800b146 <HAL_PCD_DataInStageCallback>
 8006eac:	e5d9      	b.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006eae:	b923      	cbnz	r3, 8006eba <HAL_PCD_IRQHandler+0x472>
 8006eb0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006eb4:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8006eb8:	e7c4      	b.n	8006e44 <HAL_PCD_IRQHandler+0x3fc>
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d1f1      	bne.n	8006ea2 <HAL_PCD_IRQHandler+0x45a>
 8006ebe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006ec2:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8006ec6:	fa10 f383 	uxtah	r3, r0, r3
 8006eca:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8006ece:	8006      	strh	r6, [r0, #0]
 8006ed0:	e7e7      	b.n	8006ea2 <HAL_PCD_IRQHandler+0x45a>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ed2:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            if (ep->xfer_len > TxPctSize)
 8006ed6:	fb0c 4c05 	mla	ip, ip, r5, r4
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006eda:	f416 7e80 	ands.w	lr, r6, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8006ede:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006ee8:	d122      	bne.n	8006f30 <HAL_PCD_IRQHandler+0x4e8>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006eea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006eee:	fa10 f282 	uxtah	r2, r0, r2
 8006ef2:	4452      	add	r2, sl
 8006ef4:	f8b2 2402 	ldrh.w	r2, [r2, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 8006ef8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d302      	bcc.n	8006f06 <HAL_PCD_IRQHandler+0x4be>
 8006f00:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
 8006f04:	e7cf      	b.n	8006ea6 <HAL_PCD_IRQHandler+0x45e>
              ep->xfer_len -= TxPctSize;
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8006f0c:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8006f10:	4413      	add	r3, r2
 8006f12:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8006f16:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8006f1a:	3501      	adds	r5, #1
              ep->xfer_count += TxPctSize;
 8006f1c:	4413      	add	r3, r2
        ep = &hpcd->IN_ep[epindex];
 8006f1e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
              ep->xfer_count += TxPctSize;
 8006f22:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f2a:	f002 ff59 	bl	8009de0 <USB_EPStartXfer>
 8006f2e:	e598      	b.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f30:	f016 0a40 	ands.w	sl, r6, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f34:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8006f38:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f3c:	f000 80dc 	beq.w	80070f8 <HAL_PCD_IRQHandler+0x6b0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f40:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8006f44:	fa1e fc8c 	uxtah	ip, lr, ip
 8006f48:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8006f4c:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 8006f50:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006f54:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 8006f56:	fb0a 4a05 	mla	sl, sl, r5, r4
 8006f5a:	bf34      	ite	cc
 8006f5c:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8006f60:	2300      	movcs	r3, #0
 8006f62:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f66:	b2b6      	uxth	r6, r6
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d154      	bne.n	8007016 <HAL_PCD_IRQHandler+0x5ce>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f6c:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8006f70:	2d00      	cmp	r5, #0
 8006f72:	d13f      	bne.n	8006ff4 <HAL_PCD_IRQHandler+0x5ac>
 8006f74:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006f78:	fa1e fe83 	uxtah	lr, lr, r3
 8006f7c:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8006f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8006f8c:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f96:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006f9e:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8006fa2:	fa10 f083 	uxtah	r0, r0, r3
 8006fa6:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8006faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8006fb6:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc0:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f004 f8be 	bl	800b146 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006fca:	2e00      	cmp	r6, #0
 8006fcc:	f000 80dd 	beq.w	800718a <HAL_PCD_IRQHandler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fd0:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8006ff2:	e0ca      	b.n	800718a <HAL_PCD_IRQHandler+0x742>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ff4:	2d01      	cmp	r5, #1
 8006ff6:	d1e5      	bne.n	8006fc4 <HAL_PCD_IRQHandler+0x57c>
 8006ff8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8006ffc:	fa1e fe85 	uxtah	lr, lr, r5
 8007000:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007004:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8007008:	f200 4006 	addw	r0, r0, #1030	; 0x406
 800700c:	fa10 f585 	uxtah	r5, r0, r5
 8007010:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8007014:	e7d6      	b.n	8006fc4 <HAL_PCD_IRQHandler+0x57c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007016:	b16e      	cbz	r6, 8007034 <HAL_PCD_IRQHandler+0x5ec>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007018:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800701c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007024:	041b      	lsls	r3, r3, #16
 8007026:	0c1b      	lsrs	r3, r3, #16
 8007028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800702c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007030:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007034:	2628      	movs	r6, #40	; 0x28
 8007036:	fb06 4605 	mla	r6, r6, r5, r4
 800703a:	f896 304c 	ldrb.w	r3, [r6, #76]	; 0x4c
 800703e:	2b01      	cmp	r3, #1
 8007040:	f040 80a3 	bne.w	800718a <HAL_PCD_IRQHandler+0x742>
        ep->xfer_count += TxPctSize;
 8007044:	6c73      	ldr	r3, [r6, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8007046:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007048:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 800704c:	4463      	add	r3, ip
 800704e:	6473      	str	r3, [r6, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8007050:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8007052:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8007054:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8007056:	63f1      	str	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007058:	d31a      	bcc.n	8007090 <HAL_PCD_IRQHandler+0x648>
          ep->xfer_len_db -= len;
 800705a:	ebaa 0a03 	sub.w	sl, sl, r3
 800705e:	f8c6 a048 	str.w	sl, [r6, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007062:	f899 6029 	ldrb.w	r6, [r9, #41]	; 0x29
 8007066:	fa1f fc83 	uxth.w	ip, r3
 800706a:	2e00      	cmp	r6, #0
 800706c:	d13b      	bne.n	80070e6 <HAL_PCD_IRQHandler+0x69e>
 800706e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8007072:	2b3e      	cmp	r3, #62	; 0x3e
 8007074:	fa1e fe86 	uxtah	lr, lr, r6
 8007078:	d917      	bls.n	80070aa <HAL_PCD_IRQHandler+0x662>
 800707a:	095e      	lsrs	r6, r3, #5
 800707c:	06db      	lsls	r3, r3, #27
 800707e:	bf08      	it	eq
 8007080:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007084:	ea47 2686 	orr.w	r6, r7, r6, lsl #10
 8007088:	b2b6      	uxth	r6, r6
 800708a:	f82e 6032 	strh.w	r6, [lr, r2, lsl #3]
 800708e:	e01c      	b.n	80070ca <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 8007090:	f1ba 0f00 	cmp.w	sl, #0
 8007094:	d103      	bne.n	800709e <HAL_PCD_IRQHandler+0x656>
          ep->xfer_fill_db = 0U;
 8007096:	f886 a04c 	strb.w	sl, [r6, #76]	; 0x4c
    if (ep->xfer_len > TxPctSize)
 800709a:	4663      	mov	r3, ip
 800709c:	e7e1      	b.n	8007062 <HAL_PCD_IRQHandler+0x61a>
          ep->xfer_fill_db = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80070a4:	64b3      	str	r3, [r6, #72]	; 0x48
 80070a6:	4653      	mov	r3, sl
 80070a8:	e7db      	b.n	8007062 <HAL_PCD_IRQHandler+0x61a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80070aa:	b9b3      	cbnz	r3, 80070da <HAL_PCD_IRQHandler+0x692>
 80070ac:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 80070b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 80070bc:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c6:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80070ca:	2328      	movs	r3, #40	; 0x28
 80070cc:	fb03 4505 	mla	r5, r3, r5, r4
 80070d0:	4663      	mov	r3, ip
 80070d2:	8e2a      	ldrh	r2, [r5, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80070d4:	f002 fe75 	bl	8009dc2 <USB_WritePMA>
 80070d8:	e057      	b.n	800718a <HAL_PCD_IRQHandler+0x742>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80070da:	085e      	lsrs	r6, r3, #1
 80070dc:	07db      	lsls	r3, r3, #31
 80070de:	bf48      	it	mi
 80070e0:	3601      	addmi	r6, #1
 80070e2:	02b6      	lsls	r6, r6, #10
 80070e4:	e7d0      	b.n	8007088 <HAL_PCD_IRQHandler+0x640>
 80070e6:	2e01      	cmp	r6, #1
 80070e8:	bf02      	ittt	eq
 80070ea:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 80070ee:	fa1e fe83 	uxtaheq	lr, lr, r3
 80070f2:	f82e c032 	strheq.w	ip, [lr, r2, lsl #3]
 80070f6:	e7e8      	b.n	80070ca <HAL_PCD_IRQHandler+0x682>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070f8:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 80070fc:	fa1e fc8c 	uxtah	ip, lr, ip
 8007100:	b2b6      	uxth	r6, r6
 8007102:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 8007106:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800710a:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 800710c:	bf88      	it	hi
 800710e:	4653      	movhi	r3, sl
 8007110:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8007114:	fb0a 4a05 	mla	sl, sl, r5, r4
      ep->xfer_len -= TxPctSize;
 8007118:	bf98      	it	ls
 800711a:	eba3 030c 	subls.w	r3, r3, ip
 800711e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8007122:	2b00      	cmp	r3, #0
 8007124:	d153      	bne.n	80071ce <HAL_PCD_IRQHandler+0x786>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007126:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 800712a:	2d00      	cmp	r5, #0
 800712c:	d140      	bne.n	80071b0 <HAL_PCD_IRQHandler+0x768>
 800712e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8007132:	f200 4302 	addw	r3, r0, #1026	; 0x402
 8007136:	fa13 f585 	uxtah	r5, r3, r5
 800713a:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 800713e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	0c1b      	lsrs	r3, r3, #16
 8007146:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 800714a:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007154:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007158:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800715c:	fa1e fe83 	uxtah	lr, lr, r3
 8007160:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8007164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	0c1b      	lsrs	r3, r3, #16
 800716c:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8007170:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717a:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800717e:	4620      	mov	r0, r4
 8007180:	f003 ffe1 	bl	800b146 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007184:	2e00      	cmp	r6, #0
 8007186:	f43f af23 	beq.w	8006fd0 <HAL_PCD_IRQHandler+0x588>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800718a:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80071a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071aa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80071ae:	e458      	b.n	8006a62 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071b0:	2d01      	cmp	r5, #1
 80071b2:	d1e4      	bne.n	800717e <HAL_PCD_IRQHandler+0x736>
 80071b4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80071b8:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80071bc:	fa1c f585 	uxtah	r5, ip, r5
 80071c0:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071c4:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 80071c8:	fa1e fe80 	uxtah	lr, lr, r0
 80071cc:	e7d5      	b.n	800717a <HAL_PCD_IRQHandler+0x732>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071ce:	b96e      	cbnz	r6, 80071ec <HAL_PCD_IRQHandler+0x7a4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071d0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	0c1b      	lsrs	r3, r3, #16
 80071e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80071ec:	2628      	movs	r6, #40	; 0x28
 80071ee:	fb06 4605 	mla	r6, r6, r5, r4
 80071f2:	f896 304c 	ldrb.w	r3, [r6, #76]	; 0x4c
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d1c7      	bne.n	800718a <HAL_PCD_IRQHandler+0x742>
        ep->xfer_count += TxPctSize;
 80071fa:	6c73      	ldr	r3, [r6, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 80071fc:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80071fe:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8007202:	4463      	add	r3, ip
 8007204:	6473      	str	r3, [r6, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8007206:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8007208:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800720a:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 800720c:	63f1      	str	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800720e:	d31c      	bcc.n	800724a <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 8007210:	ebaa 0a03 	sub.w	sl, sl, r3
 8007214:	f8c6 a048 	str.w	sl, [r6, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007218:	f899 c029 	ldrb.w	ip, [r9, #41]	; 0x29
 800721c:	b29e      	uxth	r6, r3
 800721e:	f1bc 0f00 	cmp.w	ip, #0
 8007222:	d13e      	bne.n	80072a2 <HAL_PCD_IRQHandler+0x85a>
 8007224:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8007228:	2b3e      	cmp	r3, #62	; 0x3e
 800722a:	fa1e fe8c 	uxtah	lr, lr, ip
 800722e:	d919      	bls.n	8007264 <HAL_PCD_IRQHandler+0x81c>
 8007230:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8007234:	06db      	lsls	r3, r3, #27
 8007236:	bf08      	it	eq
 8007238:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800723c:	ea47 2c8c 	orr.w	ip, r7, ip, lsl #10
 8007240:	fa1f fc8c 	uxth.w	ip, ip
 8007244:	f82e c032 	strh.w	ip, [lr, r2, lsl #3]
 8007248:	e01c      	b.n	8007284 <HAL_PCD_IRQHandler+0x83c>
        else if (ep->xfer_len_db == 0U)
 800724a:	f1ba 0f00 	cmp.w	sl, #0
 800724e:	d103      	bne.n	8007258 <HAL_PCD_IRQHandler+0x810>
          ep->xfer_fill_db = 0U;
 8007250:	f886 a04c 	strb.w	sl, [r6, #76]	; 0x4c
    if (ep->xfer_len >= TxPctSize)
 8007254:	4663      	mov	r3, ip
 8007256:	e7df      	b.n	8007218 <HAL_PCD_IRQHandler+0x7d0>
          ep->xfer_len_db = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	64b3      	str	r3, [r6, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800725c:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8007260:	4653      	mov	r3, sl
 8007262:	e7d9      	b.n	8007218 <HAL_PCD_IRQHandler+0x7d0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007264:	b9a3      	cbnz	r3, 8007290 <HAL_PCD_IRQHandler+0x848>
 8007266:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 800726a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	0c1b      	lsrs	r3, r3, #16
 8007272:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 8007276:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007280:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007284:	2328      	movs	r3, #40	; 0x28
 8007286:	fb03 4505 	mla	r5, r3, r5, r4
 800728a:	4633      	mov	r3, r6
 800728c:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800728e:	e721      	b.n	80070d4 <HAL_PCD_IRQHandler+0x68c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007290:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8007294:	07db      	lsls	r3, r3, #31
 8007296:	bf48      	it	mi
 8007298:	f10c 0c01 	addmi.w	ip, ip, #1
 800729c:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80072a0:	e7ce      	b.n	8007240 <HAL_PCD_IRQHandler+0x7f8>
 80072a2:	f1bc 0f01 	cmp.w	ip, #1
 80072a6:	bf02      	ittt	eq
 80072a8:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 80072ac:	fa1e fe83 	uxtaheq	lr, lr, r3
 80072b0:	f82e 6032 	strheq.w	r6, [lr, r2, lsl #3]
 80072b4:	e7e6      	b.n	8007284 <HAL_PCD_IRQHandler+0x83c>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80072b6:	0543      	lsls	r3, r0, #21
 80072b8:	d513      	bpl.n	80072e2 <HAL_PCD_IRQHandler+0x89a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	9101      	str	r1, [sp, #4]
 80072be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80072c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 80072ca:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80072cc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80072d0:	f003 ff45 	bl	800b15e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80072d4:	9901      	ldr	r1, [sp, #4]
 80072d6:	4620      	mov	r0, r4
}
 80072d8:	b003      	add	sp, #12
 80072da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80072de:	f7ff bb9f 	b.w	8006a20 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80072e2:	0447      	lsls	r7, r0, #17
 80072e4:	d50a      	bpl.n	80072fc <HAL_PCD_IRQHandler+0x8b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80072ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80072f8:	f7ff bbb8 	b.w	8006a6c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80072fc:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8007300:	d005      	beq.n	800730e <HAL_PCD_IRQHandler+0x8c6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800730c:	e7f0      	b.n	80072f0 <HAL_PCD_IRQHandler+0x8a8>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800730e:	04c6      	lsls	r6, r0, #19
 8007310:	d522      	bpl.n	8007358 <HAL_PCD_IRQHandler+0x910>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007324:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007328:	f023 0308 	bic.w	r3, r3, #8
 800732c:	041b      	lsls	r3, r3, #16
 800732e:	0c1b      	lsrs	r3, r3, #16
 8007330:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8007334:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8007338:	2b01      	cmp	r3, #1
 800733a:	d104      	bne.n	8007346 <HAL_PCD_IRQHandler+0x8fe>
      hpcd->LPM_State = LPM_L0;
 800733c:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007340:	4620      	mov	r0, r4
 8007342:	f003 ffe9 	bl	800b318 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8007346:	4620      	mov	r0, r4
 8007348:	f003 ff2c 	bl	800b1a4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007356:	e7cb      	b.n	80072f0 <HAL_PCD_IRQHandler+0x8a8>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007358:	0505      	lsls	r5, r0, #20
 800735a:	d51b      	bpl.n	8007394 <HAL_PCD_IRQHandler+0x94c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007362:	b29b      	uxth	r3, r3
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800736c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800737c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007380:	b29b      	uxth	r3, r3
 8007382:	f043 0304 	orr.w	r3, r3, #4
 8007386:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 800738a:	4620      	mov	r0, r4
 800738c:	f003 fefa 	bl	800b184 <HAL_PCD_SuspendCallback>
 8007390:	f7ff bb6c 	b.w	8006a6c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007394:	0601      	lsls	r1, r0, #24
 8007396:	d52b      	bpl.n	80073f0 <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800739e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073a2:	0412      	lsls	r2, r2, #16
 80073a4:	0c12      	lsrs	r2, r2, #16
 80073a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80073aa:	f894 22e0 	ldrb.w	r2, [r4, #736]	; 0x2e0
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d1eb      	bne.n	800738a <HAL_PCD_IRQHandler+0x942>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80073b2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80073b6:	b292      	uxth	r2, r2
 80073b8:	f042 0204 	orr.w	r2, r2, #4
 80073bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80073c0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80073c4:	b292      	uxth	r2, r2
 80073c6:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 80073ca:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80073cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 80073d0:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80073d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80073d8:	f3c3 038d 	ubfx	r3, r3, #2, #14
 80073dc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80073e0:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80073e2:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
}
 80073e6:	b003      	add	sp, #12
 80073e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80073ec:	f003 bf94 	b.w	800b318 <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80073f0:	0582      	lsls	r2, r0, #22
 80073f2:	d50d      	bpl.n	8007410 <HAL_PCD_IRQHandler+0x9c8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80073fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	0c1b      	lsrs	r3, r3, #16
 8007402:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007406:	4620      	mov	r0, r4
 8007408:	f003 fea5 	bl	800b156 <HAL_PCD_SOFCallback>
    return;
 800740c:	f7ff bb2e 	b.w	8006a6c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007410:	05c3      	lsls	r3, r0, #23
 8007412:	f57f ab2b 	bpl.w	8006a6c <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800741c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007420:	e766      	b.n	80072f0 <HAL_PCD_IRQHandler+0x8a8>
 8007422:	bf00      	nop

08007424 <HAL_PCD_EP_Open>:
{
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800742a:	0609      	lsls	r1, r1, #24
{
 800742c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800742e:	d522      	bpl.n	8007476 <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007430:	1c69      	adds	r1, r5, #1
 8007432:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007436:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800743a:	2028      	movs	r0, #40	; 0x28
 800743c:	fb05 0000 	mla	r0, r5, r0, r0
 8007440:	4420      	add	r0, r4
 8007442:	2601      	movs	r6, #1
 8007444:	7046      	strb	r6, [r0, #1]
  ep->maxpacket = ep_mps;
 8007446:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8007448:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800744a:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800744c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800744e:	b102      	cbz	r2, 8007452 <HAL_PCD_EP_Open+0x2e>
    ep->tx_fifo_num = ep->num;
 8007450:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8007452:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8007454:	bf04      	itt	eq
 8007456:	2300      	moveq	r3, #0
 8007458:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800745a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800745e:	2b01      	cmp	r3, #1
 8007460:	d014      	beq.n	800748c <HAL_PCD_EP_Open+0x68>
 8007462:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007464:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007466:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800746a:	f002 fa05 	bl	8009878 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800746e:	2000      	movs	r0, #0
 8007470:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8007474:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007476:	2028      	movs	r0, #40	; 0x28
 8007478:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 0U;
 800747c:	fb00 4005 	mla	r0, r0, r5, r4
 8007480:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007482:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8007486:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800748a:	e7dc      	b.n	8007446 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 800748c:	2002      	movs	r0, #2
 800748e:	e7f1      	b.n	8007474 <HAL_PCD_EP_Open+0x50>

08007490 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007490:	060b      	lsls	r3, r1, #24
{
 8007492:	b510      	push	{r4, lr}
 8007494:	f001 0207 	and.w	r2, r1, #7
 8007498:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800749a:	d519      	bpl.n	80074d0 <HAL_PCD_EP_Close+0x40>
    ep->is_in = 1U;
 800749c:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800749e:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 80074a0:	fb02 3303 	mla	r3, r2, r3, r3
 80074a4:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80074aa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80074ae:	2001      	movs	r0, #1
 80074b0:	7058      	strb	r0, [r3, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80074b2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80074b4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d014      	beq.n	80074e6 <HAL_PCD_EP_Close+0x56>
 80074bc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80074be:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80074c0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80074c4:	f002 fb2e 	bl	8009b24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074c8:	2000      	movs	r0, #0
 80074ca:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80074ce:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074d0:	2328      	movs	r3, #40	; 0x28
 80074d2:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 80074d6:	fb03 0302 	mla	r3, r3, r2, r0
 80074da:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074dc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80074e0:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80074e4:	e7e5      	b.n	80074b2 <HAL_PCD_EP_Close+0x22>
  __HAL_LOCK(hpcd);
 80074e6:	2002      	movs	r0, #2
 80074e8:	e7f1      	b.n	80074ce <HAL_PCD_EP_Close+0x3e>

080074ea <HAL_PCD_EP_Receive>:
{
 80074ea:	b570      	push	{r4, r5, r6, lr}
 80074ec:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80074f0:	2628      	movs	r6, #40	; 0x28
 80074f2:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 80074f6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80074f8:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_len = len;
 80074fc:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8007500:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8007504:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007508:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f002 fc67 	bl	8009de0 <USB_EPStartXfer>
}
 8007512:	4628      	mov	r0, r5
 8007514:	bd70      	pop	{r4, r5, r6, pc}

08007516 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007516:	f001 0107 	and.w	r1, r1, #7
 800751a:	2328      	movs	r3, #40	; 0x28
 800751c:	fb03 0001 	mla	r0, r3, r1, r0
}
 8007520:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8007524:	4770      	bx	lr

08007526 <HAL_PCD_EP_Transmit>:
{
 8007526:	b538      	push	{r3, r4, r5, lr}
 8007528:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800752c:	2428      	movs	r4, #40	; 0x28
 800752e:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 8007532:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_len_db = len;
 8007536:	64a3      	str	r3, [r4, #72]	; 0x48
 8007538:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800753c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 8007540:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8007542:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 8007544:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8007548:	6465      	str	r5, [r4, #68]	; 0x44
  ep->num = ep_addr & EP_ADDR_MSK;
 800754a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800754e:	4411      	add	r1, r2
 8007550:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007554:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->is_in = 1U;
 8007558:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f002 fc3f 	bl	8009de0 <USB_EPStartXfer>
}
 8007562:	4628      	mov	r0, r5
 8007564:	bd38      	pop	{r3, r4, r5, pc}

08007566 <HAL_PCD_EP_SetStall>:
{
 8007566:	b538      	push	{r3, r4, r5, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800756e:	6863      	ldr	r3, [r4, #4]
 8007570:	4298      	cmp	r0, r3
 8007572:	d826      	bhi.n	80075c2 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8007574:	060b      	lsls	r3, r1, #24
 8007576:	d51a      	bpl.n	80075ae <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 1U;
 8007578:	2328      	movs	r3, #40	; 0x28
 800757a:	fb00 3303 	mla	r3, r0, r3, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800757e:	1c41      	adds	r1, r0, #1
    ep->is_in = 1U;
 8007580:	4423      	add	r3, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007582:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ep->is_in = 1U;
 8007586:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007588:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800758c:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 1U;
 800758e:	2301      	movs	r3, #1
 8007590:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007592:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8007594:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8007598:	429a      	cmp	r2, r3
 800759a:	d014      	beq.n	80075c6 <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800759c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800759e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80075a2:	f002 fb90 	bl	8009cc6 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80075a6:	2000      	movs	r0, #0
 80075a8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80075ac:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80075ae:	2528      	movs	r5, #40	; 0x28
 80075b0:	fb05 4301 	mla	r3, r5, r1, r4
    ep->is_in = 0U;
 80075b4:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80075b6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	f882 3169 	strb.w	r3, [r2, #361]	; 0x169
 80075c0:	e7e5      	b.n	800758e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80075c2:	2001      	movs	r0, #1
 80075c4:	e7f2      	b.n	80075ac <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 80075c6:	2002      	movs	r0, #2
 80075c8:	e7f0      	b.n	80075ac <HAL_PCD_EP_SetStall+0x46>

080075ca <HAL_PCD_EP_ClrStall>:
{
 80075ca:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075cc:	6843      	ldr	r3, [r0, #4]
 80075ce:	f001 020f 	and.w	r2, r1, #15
 80075d2:	429a      	cmp	r2, r3
{
 80075d4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075d6:	d82a      	bhi.n	800762e <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80075d8:	060b      	lsls	r3, r1, #24
 80075da:	f001 0207 	and.w	r2, r1, #7
 80075de:	d51b      	bpl.n	8007618 <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 1U;
 80075e0:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075e2:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 80075e4:	fb02 3303 	mla	r3, r2, r3, r3
 80075e8:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80075ee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80075f2:	2001      	movs	r0, #1
 80075f4:	7058      	strb	r0, [r3, #1]
  ep->is_stall = 0U;
 80075f6:	2500      	movs	r5, #0
 80075f8:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075fa:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80075fc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8007600:	2b01      	cmp	r3, #1
 8007602:	d016      	beq.n	8007632 <HAL_PCD_EP_ClrStall+0x68>
 8007604:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007606:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007608:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800760c:	f002 fb7b 	bl	8009d06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007610:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8007614:	4628      	mov	r0, r5
}
 8007616:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007618:	2328      	movs	r3, #40	; 0x28
 800761a:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800761e:	fb03 0302 	mla	r3, r3, r2, r0
 8007622:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007624:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8007628:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800762c:	e7e3      	b.n	80075f6 <HAL_PCD_EP_ClrStall+0x2c>
    return HAL_ERROR;
 800762e:	2001      	movs	r0, #1
 8007630:	e7f1      	b.n	8007616 <HAL_PCD_EP_ClrStall+0x4c>
  __HAL_LOCK(hpcd);
 8007632:	2002      	movs	r0, #2
 8007634:	e7ef      	b.n	8007616 <HAL_PCD_EP_ClrStall+0x4c>

08007636 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007636:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800763a:	bf18      	it	ne
 800763c:	f001 0107 	andne.w	r1, r1, #7
{
 8007640:	b510      	push	{r4, lr}
 8007642:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007646:	bf15      	itete	ne
 8007648:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800764c:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007650:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8007652:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007656:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8007658:	b91a      	cbnz	r2, 8007662 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 800765a:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800765c:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800765e:	2000      	movs	r0, #0
 8007660:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8007662:	2201      	movs	r2, #1
 8007664:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007666:	6083      	str	r3, [r0, #8]
 8007668:	e7f9      	b.n	800765e <HAL_PCDEx_PMAConfig+0x28>

0800766a <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800766a:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800766c:	2100      	movs	r1, #0
 800766e:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0
  hpcd->lpm_active = 1U;
 8007672:	2301      	movs	r3, #1
 8007674:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007678:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800767c:	b29b      	uxth	r3, r3
 800767e:	f043 0301 	orr.w	r3, r3, #1
 8007682:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007686:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800768a:	b29b      	uxth	r3, r3
 800768c:	f043 0302 	orr.w	r3, r3, #2
 8007690:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8007694:	4608      	mov	r0, r1
 8007696:	4770      	bx	lr

08007698 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007698:	4b29      	ldr	r3, [pc, #164]	; (8007740 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800769a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800769c:	bb30      	cbnz	r0, 80076ec <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800769e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80076a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80076aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80076b2:	d11a      	bne.n	80076ea <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80076ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076be:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80076c0:	4a20      	ldr	r2, [pc, #128]	; (8007744 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	2132      	movs	r1, #50	; 0x32
 80076c6:	434a      	muls	r2, r1
 80076c8:	491f      	ldr	r1, [pc, #124]	; (8007748 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80076ca:	fbb2 f2f1 	udiv	r2, r2, r1
 80076ce:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076d0:	6959      	ldr	r1, [r3, #20]
 80076d2:	0549      	lsls	r1, r1, #21
 80076d4:	d500      	bpl.n	80076d8 <HAL_PWREx_ControlVoltageScaling+0x40>
 80076d6:	b922      	cbnz	r2, 80076e2 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	0558      	lsls	r0, r3, #21
 80076dc:	d403      	bmi.n	80076e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80076de:	2000      	movs	r0, #0
}
 80076e0:	4770      	bx	lr
        wait_loop_index--;
 80076e2:	3a01      	subs	r2, #1
 80076e4:	e7f4      	b.n	80076d0 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 80076e6:	2003      	movs	r0, #3
 80076e8:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076ea:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80076f0:	d11f      	bne.n	8007732 <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80076f2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80076f6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80076fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007706:	d1ea      	bne.n	80076de <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800770e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007712:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007714:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	2132      	movs	r1, #50	; 0x32
 800771a:	434a      	muls	r2, r1
 800771c:	490a      	ldr	r1, [pc, #40]	; (8007748 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800771e:	fbb2 f2f1 	udiv	r2, r2, r1
 8007722:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007724:	6959      	ldr	r1, [r3, #20]
 8007726:	0549      	lsls	r1, r1, #21
 8007728:	d5d6      	bpl.n	80076d8 <HAL_PWREx_ControlVoltageScaling+0x40>
 800772a:	2a00      	cmp	r2, #0
 800772c:	d0d4      	beq.n	80076d8 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 800772e:	3a01      	subs	r2, #1
 8007730:	e7f8      	b.n	8007724 <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007732:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8007736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e7cf      	b.n	80076de <HAL_PWREx_ControlVoltageScaling+0x46>
 800773e:	bf00      	nop
 8007740:	40007000 	.word	0x40007000
 8007744:	20000000 	.word	0x20000000
 8007748:	000f4240 	.word	0x000f4240

0800774c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800774c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007750:	4604      	mov	r4, r0
 8007752:	b340      	cbz	r0, 80077a6 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007754:	6803      	ldr	r3, [r0, #0]
 8007756:	07df      	lsls	r7, r3, #31
 8007758:	d414      	bmi.n	8007784 <HAL_RCC_OscConfig+0x38>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	079e      	lsls	r6, r3, #30
 800775e:	d45b      	bmi.n	8007818 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	071e      	lsls	r6, r3, #28
 8007764:	f100 80a4 	bmi.w	80078b0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	075d      	lsls	r5, r3, #29
 800776c:	f100 80cb 	bmi.w	8007906 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	069b      	lsls	r3, r3, #26
 8007774:	f100 8132 	bmi.w	80079dc <HAL_RCC_OscConfig+0x290>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007778:	69e0      	ldr	r0, [r4, #28]
 800777a:	2800      	cmp	r0, #0
 800777c:	f040 8160 	bne.w	8007a40 <HAL_RCC_OscConfig+0x2f4>
      }
    }
  }
  }

  return HAL_OK;
 8007780:	2000      	movs	r0, #0
 8007782:	e028      	b.n	80077d6 <HAL_RCC_OscConfig+0x8a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007784:	4da1      	ldr	r5, [pc, #644]	; (8007a0c <HAL_RCC_OscConfig+0x2c0>)
 8007786:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007788:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800778a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800778e:	2b0c      	cmp	r3, #12
 8007790:	d10b      	bne.n	80077aa <HAL_RCC_OscConfig+0x5e>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007792:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007796:	2b03      	cmp	r3, #3
 8007798:	d109      	bne.n	80077ae <HAL_RCC_OscConfig+0x62>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800779a:	682b      	ldr	r3, [r5, #0]
 800779c:	039d      	lsls	r5, r3, #14
 800779e:	d5dc      	bpl.n	800775a <HAL_RCC_OscConfig+0xe>
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1d9      	bne.n	800775a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80077a6:	2001      	movs	r0, #1
 80077a8:	e015      	b.n	80077d6 <HAL_RCC_OscConfig+0x8a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	e7f4      	b.n	8007798 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d112      	bne.n	80077dc <HAL_RCC_OscConfig+0x90>
 80077b6:	682b      	ldr	r3, [r5, #0]
 80077b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80077be:	f7fc fe83 	bl	80044c8 <HAL_GetTick>
 80077c2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	0398      	lsls	r0, r3, #14
 80077c8:	d4c7      	bmi.n	800775a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077ca:	f7fc fe7d 	bl	80044c8 <HAL_GetTick>
 80077ce:	1b80      	subs	r0, r0, r6
 80077d0:	2864      	cmp	r0, #100	; 0x64
 80077d2:	d9f7      	bls.n	80077c4 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80077d4:	2003      	movs	r0, #3
}
 80077d6:	b002      	add	sp, #8
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d104      	bne.n	80077ec <HAL_RCC_OscConfig+0xa0>
 80077e2:	682b      	ldr	r3, [r5, #0]
 80077e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077e8:	602b      	str	r3, [r5, #0]
 80077ea:	e7e4      	b.n	80077b6 <HAL_RCC_OscConfig+0x6a>
 80077ec:	682a      	ldr	r2, [r5, #0]
 80077ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80077f2:	602a      	str	r2, [r5, #0]
 80077f4:	682a      	ldr	r2, [r5, #0]
 80077f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077fa:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1de      	bne.n	80077be <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8007800:	f7fc fe62 	bl	80044c8 <HAL_GetTick>
 8007804:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	0399      	lsls	r1, r3, #14
 800780a:	d5a6      	bpl.n	800775a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800780c:	f7fc fe5c 	bl	80044c8 <HAL_GetTick>
 8007810:	1b80      	subs	r0, r0, r6
 8007812:	2864      	cmp	r0, #100	; 0x64
 8007814:	d9f7      	bls.n	8007806 <HAL_RCC_OscConfig+0xba>
 8007816:	e7dd      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007818:	4d7c      	ldr	r5, [pc, #496]	; (8007a0c <HAL_RCC_OscConfig+0x2c0>)
 800781a:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800781c:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800781e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007822:	2b0c      	cmp	r3, #12
 8007824:	d117      	bne.n	8007856 <HAL_RCC_OscConfig+0x10a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007826:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800782a:	2b02      	cmp	r3, #2
 800782c:	d115      	bne.n	800785a <HAL_RCC_OscConfig+0x10e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800782e:	682b      	ldr	r3, [r5, #0]
 8007830:	055a      	lsls	r2, r3, #21
 8007832:	d502      	bpl.n	800783a <HAL_RCC_OscConfig+0xee>
 8007834:	68e3      	ldr	r3, [r4, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0b5      	beq.n	80077a6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800783a:	686b      	ldr	r3, [r5, #4]
 800783c:	6922      	ldr	r2, [r4, #16]
 800783e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007842:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007846:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007848:	4b71      	ldr	r3, [pc, #452]	; (8007a10 <HAL_RCC_OscConfig+0x2c4>)
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	f7fc fdfa 	bl	8004444 <HAL_InitTick>
 8007850:	2800      	cmp	r0, #0
 8007852:	d085      	beq.n	8007760 <HAL_RCC_OscConfig+0x14>
 8007854:	e7a7      	b.n	80077a6 <HAL_RCC_OscConfig+0x5a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007856:	2b04      	cmp	r3, #4
 8007858:	e7e8      	b.n	800782c <HAL_RCC_OscConfig+0xe0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	b1bb      	cbz	r3, 800788e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_ENABLE();
 800785e:	682b      	ldr	r3, [r5, #0]
 8007860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007864:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007866:	f7fc fe2f 	bl	80044c8 <HAL_GetTick>
 800786a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	055b      	lsls	r3, r3, #21
 8007870:	d507      	bpl.n	8007882 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007872:	686b      	ldr	r3, [r5, #4]
 8007874:	6922      	ldr	r2, [r4, #16]
 8007876:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800787a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800787e:	606b      	str	r3, [r5, #4]
 8007880:	e76e      	b.n	8007760 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007882:	f7fc fe21 	bl	80044c8 <HAL_GetTick>
 8007886:	1b80      	subs	r0, r0, r6
 8007888:	2802      	cmp	r0, #2
 800788a:	d9ef      	bls.n	800786c <HAL_RCC_OscConfig+0x120>
 800788c:	e7a2      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800788e:	682b      	ldr	r3, [r5, #0]
 8007890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007894:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007896:	f7fc fe17 	bl	80044c8 <HAL_GetTick>
 800789a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	055f      	lsls	r7, r3, #21
 80078a0:	f57f af5e 	bpl.w	8007760 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078a4:	f7fc fe10 	bl	80044c8 <HAL_GetTick>
 80078a8:	1b80      	subs	r0, r0, r6
 80078aa:	2802      	cmp	r0, #2
 80078ac:	d9f6      	bls.n	800789c <HAL_RCC_OscConfig+0x150>
 80078ae:	e791      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078b0:	6963      	ldr	r3, [r4, #20]
 80078b2:	4d56      	ldr	r5, [pc, #344]	; (8007a0c <HAL_RCC_OscConfig+0x2c0>)
 80078b4:	b19b      	cbz	r3, 80078de <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80078b6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80078ba:	f043 0301 	orr.w	r3, r3, #1
 80078be:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80078c2:	f7fc fe01 	bl	80044c8 <HAL_GetTick>
 80078c6:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078c8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80078cc:	0798      	lsls	r0, r3, #30
 80078ce:	f53f af4b 	bmi.w	8007768 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078d2:	f7fc fdf9 	bl	80044c8 <HAL_GetTick>
 80078d6:	1b80      	subs	r0, r0, r6
 80078d8:	2802      	cmp	r0, #2
 80078da:	d9f5      	bls.n	80078c8 <HAL_RCC_OscConfig+0x17c>
 80078dc:	e77a      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80078de:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80078ea:	f7fc fded 	bl	80044c8 <HAL_GetTick>
 80078ee:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078f0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80078f4:	0799      	lsls	r1, r3, #30
 80078f6:	f57f af37 	bpl.w	8007768 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078fa:	f7fc fde5 	bl	80044c8 <HAL_GetTick>
 80078fe:	1b80      	subs	r0, r0, r6
 8007900:	2802      	cmp	r0, #2
 8007902:	d9f5      	bls.n	80078f0 <HAL_RCC_OscConfig+0x1a4>
 8007904:	e766      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007906:	4d41      	ldr	r5, [pc, #260]	; (8007a0c <HAL_RCC_OscConfig+0x2c0>)
 8007908:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800790a:	00da      	lsls	r2, r3, #3
 800790c:	d427      	bmi.n	800795e <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800790e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007914:	65ab      	str	r3, [r5, #88]	; 0x58
 8007916:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007920:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007922:	4e3c      	ldr	r6, [pc, #240]	; (8007a14 <HAL_RCC_OscConfig+0x2c8>)
 8007924:	6833      	ldr	r3, [r6, #0]
 8007926:	05db      	lsls	r3, r3, #23
 8007928:	d51b      	bpl.n	8007962 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d129      	bne.n	8007984 <HAL_RCC_OscConfig+0x238>
 8007930:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007934:	f043 0301 	orr.w	r3, r3, #1
 8007938:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 800793c:	f7fc fdc4 	bl	80044c8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007940:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007944:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007946:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800794a:	0799      	lsls	r1, r3, #30
 800794c:	d540      	bpl.n	80079d0 <HAL_RCC_OscConfig+0x284>
    if (pwrclkchanged == SET)
 800794e:	2f00      	cmp	r7, #0
 8007950:	f43f af0e 	beq.w	8007770 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007954:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795a:	65ab      	str	r3, [r5, #88]	; 0x58
 800795c:	e708      	b.n	8007770 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800795e:	2700      	movs	r7, #0
 8007960:	e7df      	b.n	8007922 <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007962:	6833      	ldr	r3, [r6, #0]
 8007964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007968:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800796a:	f7fc fdad 	bl	80044c8 <HAL_GetTick>
 800796e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	05d8      	lsls	r0, r3, #23
 8007974:	d4d9      	bmi.n	800792a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007976:	f7fc fda7 	bl	80044c8 <HAL_GetTick>
 800797a:	eba0 0008 	sub.w	r0, r0, r8
 800797e:	2802      	cmp	r0, #2
 8007980:	d9f6      	bls.n	8007970 <HAL_RCC_OscConfig+0x224>
 8007982:	e727      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007984:	2b05      	cmp	r3, #5
 8007986:	d106      	bne.n	8007996 <HAL_RCC_OscConfig+0x24a>
 8007988:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800798c:	f043 0304 	orr.w	r3, r3, #4
 8007990:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8007994:	e7cc      	b.n	8007930 <HAL_RCC_OscConfig+0x1e4>
 8007996:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 80079a2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80079a6:	f022 0204 	bic.w	r2, r2, #4
 80079aa:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1c4      	bne.n	800793c <HAL_RCC_OscConfig+0x1f0>
      tickstart = HAL_GetTick();
 80079b2:	f7fc fd89 	bl	80044c8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80079ba:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079bc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80079c0:	079a      	lsls	r2, r3, #30
 80079c2:	d5c4      	bpl.n	800794e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079c4:	f7fc fd80 	bl	80044c8 <HAL_GetTick>
 80079c8:	1b80      	subs	r0, r0, r6
 80079ca:	4540      	cmp	r0, r8
 80079cc:	d9f6      	bls.n	80079bc <HAL_RCC_OscConfig+0x270>
 80079ce:	e701      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d0:	f7fc fd7a 	bl	80044c8 <HAL_GetTick>
 80079d4:	1b80      	subs	r0, r0, r6
 80079d6:	4540      	cmp	r0, r8
 80079d8:	d9b5      	bls.n	8007946 <HAL_RCC_OscConfig+0x1fa>
 80079da:	e6fb      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80079dc:	69a3      	ldr	r3, [r4, #24]
 80079de:	4d0b      	ldr	r5, [pc, #44]	; (8007a0c <HAL_RCC_OscConfig+0x2c0>)
 80079e0:	b1d3      	cbz	r3, 8007a18 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 80079e2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80079ee:	f7fc fd6b 	bl	80044c8 <HAL_GetTick>
 80079f2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80079f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80079f8:	079f      	lsls	r7, r3, #30
 80079fa:	f53f aebd 	bmi.w	8007778 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079fe:	f7fc fd63 	bl	80044c8 <HAL_GetTick>
 8007a02:	1b80      	subs	r0, r0, r6
 8007a04:	2802      	cmp	r0, #2
 8007a06:	d9f5      	bls.n	80079f4 <HAL_RCC_OscConfig+0x2a8>
 8007a08:	e6e4      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
 8007a0a:	bf00      	nop
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	20000008 	.word	0x20000008
 8007a14:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 8007a18:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007a1c:	f023 0301 	bic.w	r3, r3, #1
 8007a20:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8007a24:	f7fc fd50 	bl	80044c8 <HAL_GetTick>
 8007a28:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a2a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007a2e:	0798      	lsls	r0, r3, #30
 8007a30:	f57f aea2 	bpl.w	8007778 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a34:	f7fc fd48 	bl	80044c8 <HAL_GetTick>
 8007a38:	1b80      	subs	r0, r0, r6
 8007a3a:	2802      	cmp	r0, #2
 8007a3c:	d9f5      	bls.n	8007a2a <HAL_RCC_OscConfig+0x2de>
 8007a3e:	e6c9      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a40:	4d48      	ldr	r5, [pc, #288]	; (8007b64 <HAL_RCC_OscConfig+0x418>)
 8007a42:	68ab      	ldr	r3, [r5, #8]
 8007a44:	f003 030c 	and.w	r3, r3, #12
 8007a48:	2b0c      	cmp	r3, #12
 8007a4a:	d057      	beq.n	8007afc <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_DISABLE();
 8007a4c:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a4e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a54:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a56:	d13a      	bne.n	8007ace <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8007a58:	f7fc fd36 	bl	80044c8 <HAL_GetTick>
 8007a5c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a5e:	682b      	ldr	r3, [r5, #0]
 8007a60:	0199      	lsls	r1, r3, #6
 8007a62:	d42e      	bmi.n	8007ac2 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a64:	68ea      	ldr	r2, [r5, #12]
 8007a66:	4b40      	ldr	r3, [pc, #256]	; (8007b68 <HAL_RCC_OscConfig+0x41c>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	6a22      	ldr	r2, [r4, #32]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007a70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a76:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8007a7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a7c:	3a01      	subs	r2, #1
 8007a7e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007a82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a84:	0852      	lsrs	r2, r2, #1
 8007a86:	3a01      	subs	r2, #1
 8007a88:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8007a8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007a8e:	0852      	lsrs	r2, r2, #1
 8007a90:	3a01      	subs	r2, #1
 8007a92:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007a96:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a9e:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007aa0:	68eb      	ldr	r3, [r5, #12]
 8007aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007aa6:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007aa8:	f7fc fd0e 	bl	80044c8 <HAL_GetTick>
 8007aac:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aae:	682b      	ldr	r3, [r5, #0]
 8007ab0:	019a      	lsls	r2, r3, #6
 8007ab2:	f53f ae65 	bmi.w	8007780 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab6:	f7fc fd07 	bl	80044c8 <HAL_GetTick>
 8007aba:	1b00      	subs	r0, r0, r4
 8007abc:	2802      	cmp	r0, #2
 8007abe:	d9f6      	bls.n	8007aae <HAL_RCC_OscConfig+0x362>
 8007ac0:	e688      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac2:	f7fc fd01 	bl	80044c8 <HAL_GetTick>
 8007ac6:	1b80      	subs	r0, r0, r6
 8007ac8:	2802      	cmp	r0, #2
 8007aca:	d9c8      	bls.n	8007a5e <HAL_RCC_OscConfig+0x312>
 8007acc:	e682      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ace:	68eb      	ldr	r3, [r5, #12]
 8007ad0:	f023 0303 	bic.w	r3, r3, #3
 8007ad4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ad6:	68eb      	ldr	r3, [r5, #12]
 8007ad8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007ae2:	f7fc fcf1 	bl	80044c8 <HAL_GetTick>
 8007ae6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	019b      	lsls	r3, r3, #6
 8007aec:	f57f ae48 	bpl.w	8007780 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af0:	f7fc fcea 	bl	80044c8 <HAL_GetTick>
 8007af4:	1b00      	subs	r0, r0, r4
 8007af6:	2802      	cmp	r0, #2
 8007af8:	d9f6      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x39c>
 8007afa:	e66b      	b.n	80077d4 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007afc:	2801      	cmp	r0, #1
 8007afe:	f43f ae6a 	beq.w	80077d6 <HAL_RCC_OscConfig+0x8a>
      temp_pllckcfg = RCC->PLLCFGR;
 8007b02:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b04:	6a22      	ldr	r2, [r4, #32]
 8007b06:	f003 0103 	and.w	r1, r3, #3
 8007b0a:	4291      	cmp	r1, r2
 8007b0c:	f47f ae4b 	bne.w	80077a6 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b16:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b18:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007b1c:	f47f ae43 	bne.w	80077a6 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007b22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b26:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007b2a:	f47f ae3c 	bne.w	80077a6 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007b30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b34:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007b38:	f47f ae35 	bne.w	80077a6 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007b3e:	0852      	lsrs	r2, r2, #1
 8007b40:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007b44:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b46:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007b4a:	f47f ae2c 	bne.w	80077a6 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007b50:	0852      	lsrs	r2, r2, #1
 8007b52:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007b56:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b58:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007b5c:	f43f ae10 	beq.w	8007780 <HAL_RCC_OscConfig+0x34>
 8007b60:	e621      	b.n	80077a6 <HAL_RCC_OscConfig+0x5a>
 8007b62:	bf00      	nop
 8007b64:	40021000 	.word	0x40021000
 8007b68:	019f800c 	.word	0x019f800c

08007b6c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007b6c:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <HAL_RCC_GetSysClockFreq+0x60>)
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	f002 020c 	and.w	r2, r2, #12
 8007b74:	2a04      	cmp	r2, #4
 8007b76:	d023      	beq.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	f002 020c 	and.w	r2, r2, #12
 8007b7e:	2a08      	cmp	r2, #8
 8007b80:	d020      	beq.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	f002 020c 	and.w	r2, r2, #12
 8007b88:	2a0c      	cmp	r2, #12
 8007b8a:	d11d      	bne.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b8c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b8e:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b90:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b92:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b94:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b98:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 8007b9c:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b9e:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ba2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ba6:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007baa:	bf0c      	ite	eq
 8007bac:	4908      	ldreq	r1, [pc, #32]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bae:	4909      	ldrne	r1, [pc, #36]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bb0:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007bb2:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bb4:	fbb1 f2f2 	udiv	r2, r1, r2
 8007bb8:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 8007bba:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 8007bbe:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007bc0:	4804      	ldr	r0, [pc, #16]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x68>)
 8007bc2:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007bc4:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x64>)
 8007bc6:	4770      	bx	lr
    sysclockfreq = 0U;
 8007bc8:	2000      	movs	r0, #0
}
 8007bca:	4770      	bx	lr
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	007a1200 	.word	0x007a1200
 8007bd4:	00f42400 	.word	0x00f42400

08007bd8 <HAL_RCC_ClockConfig>:
{
 8007bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bdc:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8007bde:	4605      	mov	r5, r0
 8007be0:	b910      	cbnz	r0, 8007be8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007be2:	2001      	movs	r0, #1
}
 8007be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007be8:	4a6d      	ldr	r2, [pc, #436]	; (8007da0 <HAL_RCC_ClockConfig+0x1c8>)
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	428b      	cmp	r3, r1
 8007bf2:	d345      	bcc.n	8007c80 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bf4:	6829      	ldr	r1, [r5, #0]
 8007bf6:	f011 0701 	ands.w	r7, r1, #1
 8007bfa:	d14c      	bne.n	8007c96 <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bfc:	682a      	ldr	r2, [r5, #0]
 8007bfe:	0791      	lsls	r1, r2, #30
 8007c00:	f140 80a8 	bpl.w	8007d54 <HAL_RCC_ClockConfig+0x17c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c04:	4b67      	ldr	r3, [pc, #412]	; (8007da4 <HAL_RCC_ClockConfig+0x1cc>)
 8007c06:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c0a:	bf1e      	ittt	ne
 8007c0c:	6899      	ldrne	r1, [r3, #8]
 8007c0e:	f441 61e0 	orrne.w	r1, r1, #1792	; 0x700
 8007c12:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c14:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007c16:	bf41      	itttt	mi
 8007c18:	689a      	ldrmi	r2, [r3, #8]
 8007c1a:	f422 527c 	bicmi.w	r2, r2, #16128	; 0x3f00
 8007c1e:	f442 62e0 	orrmi.w	r2, r2, #1792	; 0x700
 8007c22:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	68a9      	ldr	r1, [r5, #8]
 8007c28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c30:	4c5b      	ldr	r4, [pc, #364]	; (8007da0 <HAL_RCC_ClockConfig+0x1c8>)
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	42b3      	cmp	r3, r6
 8007c3a:	f200 8093 	bhi.w	8007d64 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c3e:	682a      	ldr	r2, [r5, #0]
 8007c40:	4c58      	ldr	r4, [pc, #352]	; (8007da4 <HAL_RCC_ClockConfig+0x1cc>)
 8007c42:	f012 0f04 	tst.w	r2, #4
 8007c46:	f040 80a3 	bne.w	8007d90 <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c4a:	0713      	lsls	r3, r2, #28
 8007c4c:	d506      	bpl.n	8007c5c <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	692a      	ldr	r2, [r5, #16]
 8007c52:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007c56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007c5a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c5c:	f7ff ff86 	bl	8007b6c <HAL_RCC_GetSysClockFreq>
 8007c60:	68a3      	ldr	r3, [r4, #8]
 8007c62:	4a51      	ldr	r2, [pc, #324]	; (8007da8 <HAL_RCC_ClockConfig+0x1d0>)
 8007c64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007c68:	5cd3      	ldrb	r3, [r2, r3]
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	40d8      	lsrs	r0, r3
 8007c70:	4b4e      	ldr	r3, [pc, #312]	; (8007dac <HAL_RCC_ClockConfig+0x1d4>)
 8007c72:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8007c74:	4b4e      	ldr	r3, [pc, #312]	; (8007db0 <HAL_RCC_ClockConfig+0x1d8>)
 8007c76:	6818      	ldr	r0, [r3, #0]
}
 8007c78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007c7c:	f7fc bbe2 	b.w	8004444 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c80:	6813      	ldr	r3, [r2, #0]
 8007c82:	f023 030f 	bic.w	r3, r3, #15
 8007c86:	430b      	orrs	r3, r1
 8007c88:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	428b      	cmp	r3, r1
 8007c92:	d1a6      	bne.n	8007be2 <HAL_RCC_ClockConfig+0xa>
 8007c94:	e7ae      	b.n	8007bf4 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c96:	686b      	ldr	r3, [r5, #4]
 8007c98:	4c42      	ldr	r4, [pc, #264]	; (8007da4 <HAL_RCC_ClockConfig+0x1cc>)
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d14a      	bne.n	8007d34 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	019f      	lsls	r7, r3, #6
 8007ca2:	d59e      	bpl.n	8007be2 <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ca4:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ca6:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ca8:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8007cac:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cae:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cb0:	bf0c      	ite	eq
 8007cb2:	4840      	ldreq	r0, [pc, #256]	; (8007db4 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cb4:	4840      	ldrne	r0, [pc, #256]	; (8007db8 <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cb6:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cba:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cbe:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cc0:	fbb0 f2f2 	udiv	r2, r0, r2
 8007cc4:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cc6:	68e2      	ldr	r2, [r4, #12]
 8007cc8:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8007ccc:	3201      	adds	r2, #1
 8007cce:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8007cd0:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8007cd4:	4a39      	ldr	r2, [pc, #228]	; (8007dbc <HAL_RCC_ClockConfig+0x1e4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d81b      	bhi.n	8007d12 <HAL_RCC_ClockConfig+0x13a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007cda:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cdc:	68a3      	ldr	r3, [r4, #8]
 8007cde:	686a      	ldr	r2, [r5, #4]
 8007ce0:	f023 0303 	bic.w	r3, r3, #3
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8007ce8:	f7fc fbee 	bl	80044c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cec:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007cf0:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	686a      	ldr	r2, [r5, #4]
 8007cf6:	f003 030c 	and.w	r3, r3, #12
 8007cfa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007cfe:	f43f af7d 	beq.w	8007bfc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d02:	f7fc fbe1 	bl	80044c8 <HAL_GetTick>
 8007d06:	eba0 0008 	sub.w	r0, r0, r8
 8007d0a:	4548      	cmp	r0, r9
 8007d0c:	d9f1      	bls.n	8007cf2 <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 8007d0e:	2003      	movs	r0, #3
 8007d10:	e768      	b.n	8007be4 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8007d18:	d004      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x14c>
 8007d1a:	0788      	lsls	r0, r1, #30
 8007d1c:	d5dd      	bpl.n	8007cda <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d1e:	68ab      	ldr	r3, [r5, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1da      	bne.n	8007cda <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d24:	68a3      	ldr	r3, [r4, #8]
 8007d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2e:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007d30:	2780      	movs	r7, #128	; 0x80
 8007d32:	e7d3      	b.n	8007cdc <HAL_RCC_ClockConfig+0x104>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d34:	2b02      	cmp	r3, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d36:	6823      	ldr	r3, [r4, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d38:	d109      	bne.n	8007d4e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d3e:	f43f af50 	beq.w	8007be2 <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007d42:	f7ff ff13 	bl	8007b6c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007d46:	4b1d      	ldr	r3, [pc, #116]	; (8007dbc <HAL_RCC_ClockConfig+0x1e4>)
 8007d48:	4298      	cmp	r0, r3
 8007d4a:	d9c6      	bls.n	8007cda <HAL_RCC_ClockConfig+0x102>
 8007d4c:	e7ea      	b.n	8007d24 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007d52:	e7f4      	b.n	8007d3e <HAL_RCC_ClockConfig+0x166>
    if(hpre == RCC_SYSCLK_DIV2)
 8007d54:	2f80      	cmp	r7, #128	; 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007d56:	bf01      	itttt	eq
 8007d58:	4a12      	ldreq	r2, [pc, #72]	; (8007da4 <HAL_RCC_ClockConfig+0x1cc>)
 8007d5a:	6893      	ldreq	r3, [r2, #8]
 8007d5c:	f023 03f0 	biceq.w	r3, r3, #240	; 0xf0
 8007d60:	6093      	streq	r3, [r2, #8]
 8007d62:	e765      	b.n	8007c30 <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	f023 030f 	bic.w	r3, r3, #15
 8007d6a:	4333      	orrs	r3, r6
 8007d6c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007d6e:	f7fc fbab 	bl	80044c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d72:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007d76:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	42b3      	cmp	r3, r6
 8007d80:	f43f af5d 	beq.w	8007c3e <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d84:	f7fc fba0 	bl	80044c8 <HAL_GetTick>
 8007d88:	1bc0      	subs	r0, r0, r7
 8007d8a:	4540      	cmp	r0, r8
 8007d8c:	d9f4      	bls.n	8007d78 <HAL_RCC_ClockConfig+0x1a0>
 8007d8e:	e7be      	b.n	8007d0e <HAL_RCC_ClockConfig+0x136>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d90:	68a3      	ldr	r3, [r4, #8]
 8007d92:	68e9      	ldr	r1, [r5, #12]
 8007d94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	60a3      	str	r3, [r4, #8]
 8007d9c:	e755      	b.n	8007c4a <HAL_RCC_ClockConfig+0x72>
 8007d9e:	bf00      	nop
 8007da0:	40022000 	.word	0x40022000
 8007da4:	40021000 	.word	0x40021000
 8007da8:	0800f20b 	.word	0x0800f20b
 8007dac:	20000000 	.word	0x20000000
 8007db0:	20000008 	.word	0x20000008
 8007db4:	007a1200 	.word	0x007a1200
 8007db8:	00f42400 	.word	0x00f42400
 8007dbc:	04c4b400 	.word	0x04c4b400

08007dc0 <HAL_RCC_GetHCLKFreq>:
}
 8007dc0:	4b01      	ldr	r3, [pc, #4]	; (8007dc8 <HAL_RCC_GetHCLKFreq+0x8>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000000 	.word	0x20000000

08007dcc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007dce:	4a06      	ldr	r2, [pc, #24]	; (8007de8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007dd6:	5cd3      	ldrb	r3, [r2, r3]
 8007dd8:	4a04      	ldr	r2, [pc, #16]	; (8007dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dda:	6810      	ldr	r0, [r2, #0]
 8007ddc:	f003 031f 	and.w	r3, r3, #31
}
 8007de0:	40d8      	lsrs	r0, r3
 8007de2:	4770      	bx	lr
 8007de4:	40021000 	.word	0x40021000
 8007de8:	0800f21b 	.word	0x0800f21b
 8007dec:	20000000 	.word	0x20000000

08007df0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007df2:	4a06      	ldr	r2, [pc, #24]	; (8007e0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007dfa:	5cd3      	ldrb	r3, [r2, r3]
 8007dfc:	4a04      	ldr	r2, [pc, #16]	; (8007e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dfe:	6810      	ldr	r0, [r2, #0]
 8007e00:	f003 031f 	and.w	r3, r3, #31
}
 8007e04:	40d8      	lsrs	r0, r3
 8007e06:	4770      	bx	lr
 8007e08:	40021000 	.word	0x40021000
 8007e0c:	0800f21b 	.word	0x0800f21b
 8007e10:	20000000 	.word	0x20000000

08007e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e18:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8007e20:	d039      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x82>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e22:	4da3      	ldr	r5, [pc, #652]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007e24:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007e26:	00d8      	lsls	r0, r3, #3
 8007e28:	d427      	bmi.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e2a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e30:	65ab      	str	r3, [r5, #88]	; 0x58
 8007e32:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007e3c:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e3e:	4f9d      	ldr	r7, [pc, #628]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e46:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e48:	f7fc fb3e 	bl	80044c8 <HAL_GetTick>
 8007e4c:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	05d9      	lsls	r1, r3, #23
 8007e52:	d514      	bpl.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e54:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e58:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007e5c:	d003      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007e5e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007e60:	4293      	cmp	r3, r2
 8007e62:	f040 8129 	bne.w	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e66:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007e6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e76:	2000      	movs	r0, #0
 8007e78:	e008      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	e7df      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e7e:	f7fc fb23 	bl	80044c8 <HAL_GetTick>
 8007e82:	eba0 0008 	sub.w	r0, r0, r8
 8007e86:	2802      	cmp	r0, #2
 8007e88:	d9e1      	bls.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = HAL_TIMEOUT;
 8007e8a:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e8c:	b11e      	cbz	r6, 8007e96 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e8e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e94:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	07dd      	lsls	r5, r3, #31
 8007e9a:	d508      	bpl.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e9c:	4984      	ldr	r1, [pc, #528]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007e9e:	6865      	ldr	r5, [r4, #4]
 8007ea0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ea4:	f022 0203 	bic.w	r2, r2, #3
 8007ea8:	432a      	orrs	r2, r5
 8007eaa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007eae:	0799      	lsls	r1, r3, #30
 8007eb0:	d508      	bpl.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007eb2:	497f      	ldr	r1, [pc, #508]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007eb4:	68a5      	ldr	r5, [r4, #8]
 8007eb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007eba:	f022 020c 	bic.w	r2, r2, #12
 8007ebe:	432a      	orrs	r2, r5
 8007ec0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ec4:	075a      	lsls	r2, r3, #29
 8007ec6:	d508      	bpl.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ec8:	4979      	ldr	r1, [pc, #484]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007eca:	68e5      	ldr	r5, [r4, #12]
 8007ecc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ed0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007ed4:	432a      	orrs	r2, r5
 8007ed6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007eda:	071f      	lsls	r7, r3, #28
 8007edc:	d508      	bpl.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ede:	4974      	ldr	r1, [pc, #464]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007ee0:	6925      	ldr	r5, [r4, #16]
 8007ee2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ee6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007eea:	432a      	orrs	r2, r5
 8007eec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ef0:	06de      	lsls	r6, r3, #27
 8007ef2:	d508      	bpl.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ef4:	496e      	ldr	r1, [pc, #440]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007ef6:	6965      	ldr	r5, [r4, #20]
 8007ef8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007efc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007f00:	432a      	orrs	r2, r5
 8007f02:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f06:	069d      	lsls	r5, r3, #26
 8007f08:	d508      	bpl.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f0a:	4969      	ldr	r1, [pc, #420]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007f0c:	69a5      	ldr	r5, [r4, #24]
 8007f0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007f12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f16:	432a      	orrs	r2, r5
 8007f18:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f1c:	0659      	lsls	r1, r3, #25
 8007f1e:	d508      	bpl.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f20:	4963      	ldr	r1, [pc, #396]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007f22:	69e5      	ldr	r5, [r4, #28]
 8007f24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007f28:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007f2c:	432a      	orrs	r2, r5
 8007f2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f32:	061a      	lsls	r2, r3, #24
 8007f34:	d508      	bpl.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f36:	495e      	ldr	r1, [pc, #376]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007f38:	6a25      	ldr	r5, [r4, #32]
 8007f3a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007f3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f42:	432a      	orrs	r2, r5
 8007f44:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f48:	05df      	lsls	r7, r3, #23
 8007f4a:	d508      	bpl.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f4c:	4958      	ldr	r1, [pc, #352]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007f4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007f50:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007f54:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007f58:	432a      	orrs	r2, r5
 8007f5a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f5e:	039e      	lsls	r6, r3, #14
 8007f60:	d508      	bpl.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f62:	4953      	ldr	r1, [pc, #332]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007f64:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007f66:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8007f6a:	f022 0203 	bic.w	r2, r2, #3
 8007f6e:	432a      	orrs	r2, r5
 8007f70:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f74:	059d      	lsls	r5, r3, #22
 8007f76:	d508      	bpl.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f78:	494d      	ldr	r1, [pc, #308]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007f7a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007f7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007f80:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007f84:	432a      	orrs	r2, r5
 8007f86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f8a:	0559      	lsls	r1, r3, #21
 8007f8c:	d50f      	bpl.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f8e:	4948      	ldr	r1, [pc, #288]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007f90:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007f92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007f96:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007f9a:	432a      	orrs	r2, r5
 8007f9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007fa0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fa4:	bf02      	ittt	eq
 8007fa6:	68ca      	ldreq	r2, [r1, #12]
 8007fa8:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8007fac:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007fae:	051a      	lsls	r2, r3, #20
 8007fb0:	d50f      	bpl.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fb2:	493f      	ldr	r1, [pc, #252]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007fb4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007fb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007fba:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007fbe:	432a      	orrs	r2, r5
 8007fc0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007fc4:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fc8:	bf02      	ittt	eq
 8007fca:	68ca      	ldreq	r2, [r1, #12]
 8007fcc:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8007fd0:	60ca      	streq	r2, [r1, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fd2:	04df      	lsls	r7, r3, #19
 8007fd4:	d50f      	bpl.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007fd6:	4936      	ldr	r1, [pc, #216]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007fd8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007fda:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007fde:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007fe2:	432a      	orrs	r2, r5
 8007fe4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007fe8:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fec:	bf02      	ittt	eq
 8007fee:	68ca      	ldreq	r2, [r1, #12]
 8007ff0:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8007ff4:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ff6:	049e      	lsls	r6, r3, #18
 8007ff8:	d50f      	bpl.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ffa:	492d      	ldr	r1, [pc, #180]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007ffc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007ffe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008002:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008006:	432a      	orrs	r2, r5
 8008008:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800800c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008010:	bf02      	ittt	eq
 8008012:	68ca      	ldreq	r2, [r1, #12]
 8008014:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8008018:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800801a:	045d      	lsls	r5, r3, #17
 800801c:	d50f      	bpl.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800801e:	4924      	ldr	r1, [pc, #144]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008020:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8008022:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008026:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800802a:	432a      	orrs	r2, r5
 800802c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008030:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008034:	bf02      	ittt	eq
 8008036:	68ca      	ldreq	r2, [r1, #12]
 8008038:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 800803c:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800803e:	0419      	lsls	r1, r3, #16
 8008040:	d50f      	bpl.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008042:	491b      	ldr	r1, [pc, #108]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008044:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8008046:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800804a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800804e:	432a      	orrs	r2, r5
 8008050:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008054:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008058:	bf02      	ittt	eq
 800805a:	68ca      	ldreq	r2, [r1, #12]
 800805c:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8008060:	60ca      	streq	r2, [r1, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008062:	03da      	lsls	r2, r3, #15
 8008064:	d50f      	bpl.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008066:	4912      	ldr	r1, [pc, #72]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008068:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800806a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800806e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8008072:	432a      	orrs	r2, r5
 8008074:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008078:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800807c:	bf02      	ittt	eq
 800807e:	68ca      	ldreq	r2, [r1, #12]
 8008080:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8008084:	60ca      	streq	r2, [r1, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008086:	035b      	lsls	r3, r3, #13
 8008088:	d50f      	bpl.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800808a:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800808c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800808e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8008092:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008096:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008098:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800809c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80080a0:	d103      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x296>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080a2:	68d3      	ldr	r3, [r2, #12]
 80080a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080a8:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 80080aa:	b002      	add	sp, #8
 80080ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b0:	40021000 	.word	0x40021000
 80080b4:	40007000 	.word	0x40007000
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080b8:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80080bc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80080c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080c4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080c8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080cc:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080d4:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080d6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80080da:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080de:	f57f aec2 	bpl.w	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80080e2:	f7fc f9f1 	bl	80044c8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080e6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80080ea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080ec:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80080f0:	079b      	lsls	r3, r3, #30
 80080f2:	f53f aeb8 	bmi.w	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f6:	f7fc f9e7 	bl	80044c8 <HAL_GetTick>
 80080fa:	1bc0      	subs	r0, r0, r7
 80080fc:	4540      	cmp	r0, r8
 80080fe:	d9f5      	bls.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008100:	e6c3      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008102:	bf00      	nop

08008104 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008104:	6a03      	ldr	r3, [r0, #32]
 8008106:	f023 0301 	bic.w	r3, r3, #1
 800810a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800810c:	6a03      	ldr	r3, [r0, #32]
{
 800810e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008110:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008112:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008114:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008116:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800811a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800811e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008120:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008122:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008126:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008128:	4d1f      	ldr	r5, [pc, #124]	; (80081a8 <TIM_OC1_SetConfig+0xa4>)
 800812a:	42a8      	cmp	r0, r5
 800812c:	d013      	beq.n	8008156 <TIM_OC1_SetConfig+0x52>
 800812e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008132:	42a8      	cmp	r0, r5
 8008134:	d00f      	beq.n	8008156 <TIM_OC1_SetConfig+0x52>
 8008136:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800813a:	42a8      	cmp	r0, r5
 800813c:	d00b      	beq.n	8008156 <TIM_OC1_SetConfig+0x52>
 800813e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008142:	42a8      	cmp	r0, r5
 8008144:	d007      	beq.n	8008156 <TIM_OC1_SetConfig+0x52>
 8008146:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800814a:	42a8      	cmp	r0, r5
 800814c:	d003      	beq.n	8008156 <TIM_OC1_SetConfig+0x52>
 800814e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008152:	42a8      	cmp	r0, r5
 8008154:	d122      	bne.n	800819c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008156:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008158:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800815c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	4d12      	ldr	r5, [pc, #72]	; (80081a8 <TIM_OC1_SetConfig+0xa4>)
 8008160:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008162:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008166:	d013      	beq.n	8008190 <TIM_OC1_SetConfig+0x8c>
 8008168:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800816c:	42a8      	cmp	r0, r5
 800816e:	d00f      	beq.n	8008190 <TIM_OC1_SetConfig+0x8c>
 8008170:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008174:	42a8      	cmp	r0, r5
 8008176:	d00b      	beq.n	8008190 <TIM_OC1_SetConfig+0x8c>
 8008178:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800817c:	42a8      	cmp	r0, r5
 800817e:	d007      	beq.n	8008190 <TIM_OC1_SetConfig+0x8c>
 8008180:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008184:	42a8      	cmp	r0, r5
 8008186:	d003      	beq.n	8008190 <TIM_OC1_SetConfig+0x8c>
 8008188:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800818c:	42a8      	cmp	r0, r5
 800818e:	d105      	bne.n	800819c <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008190:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008194:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008198:	4334      	orrs	r4, r6
 800819a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800819e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081a0:	684a      	ldr	r2, [r1, #4]
 80081a2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a4:	6203      	str	r3, [r0, #32]
}
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	40012c00 	.word	0x40012c00

080081ac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ac:	6a03      	ldr	r3, [r0, #32]
 80081ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b4:	6a03      	ldr	r3, [r0, #32]
{
 80081b6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ba:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081c2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80081c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80081ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081d2:	4d1a      	ldr	r5, [pc, #104]	; (800823c <TIM_OC3_SetConfig+0x90>)
 80081d4:	42a8      	cmp	r0, r5
 80081d6:	d007      	beq.n	80081e8 <TIM_OC3_SetConfig+0x3c>
 80081d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80081dc:	42a8      	cmp	r0, r5
 80081de:	d003      	beq.n	80081e8 <TIM_OC3_SetConfig+0x3c>
 80081e0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80081e4:	42a8      	cmp	r0, r5
 80081e6:	d10d      	bne.n	8008204 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081e8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f2:	4d12      	ldr	r5, [pc, #72]	; (800823c <TIM_OC3_SetConfig+0x90>)
 80081f4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80081f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fa:	d012      	beq.n	8008222 <TIM_OC3_SetConfig+0x76>
 80081fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008200:	42a8      	cmp	r0, r5
 8008202:	d00e      	beq.n	8008222 <TIM_OC3_SetConfig+0x76>
 8008204:	4d0e      	ldr	r5, [pc, #56]	; (8008240 <TIM_OC3_SetConfig+0x94>)
 8008206:	42a8      	cmp	r0, r5
 8008208:	d00b      	beq.n	8008222 <TIM_OC3_SetConfig+0x76>
 800820a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800820e:	42a8      	cmp	r0, r5
 8008210:	d007      	beq.n	8008222 <TIM_OC3_SetConfig+0x76>
 8008212:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008216:	42a8      	cmp	r0, r5
 8008218:	d003      	beq.n	8008222 <TIM_OC3_SetConfig+0x76>
 800821a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800821e:	42a8      	cmp	r0, r5
 8008220:	d106      	bne.n	8008230 <TIM_OC3_SetConfig+0x84>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008222:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008226:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800822a:	4334      	orrs	r4, r6
 800822c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008230:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008232:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008234:	684a      	ldr	r2, [r1, #4]
 8008236:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008238:	6203      	str	r3, [r0, #32]
}
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	40012c00 	.word	0x40012c00
 8008240:	40014000 	.word	0x40014000

08008244 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008244:	6a03      	ldr	r3, [r0, #32]
 8008246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800824a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824c:	6a03      	ldr	r3, [r0, #32]
{
 800824e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008252:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008254:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008256:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800825a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800825e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008262:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008268:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800826c:	4d1a      	ldr	r5, [pc, #104]	; (80082d8 <TIM_OC4_SetConfig+0x94>)
 800826e:	42a8      	cmp	r0, r5
 8008270:	d007      	beq.n	8008282 <TIM_OC4_SetConfig+0x3e>
 8008272:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008276:	42a8      	cmp	r0, r5
 8008278:	d003      	beq.n	8008282 <TIM_OC4_SetConfig+0x3e>
 800827a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800827e:	42a8      	cmp	r0, r5
 8008280:	d10d      	bne.n	800829e <TIM_OC4_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008282:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008288:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828c:	4d12      	ldr	r5, [pc, #72]	; (80082d8 <TIM_OC4_SetConfig+0x94>)
 800828e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC4NE;
 8008290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008294:	d012      	beq.n	80082bc <TIM_OC4_SetConfig+0x78>
 8008296:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800829a:	42a8      	cmp	r0, r5
 800829c:	d00e      	beq.n	80082bc <TIM_OC4_SetConfig+0x78>
 800829e:	4d0f      	ldr	r5, [pc, #60]	; (80082dc <TIM_OC4_SetConfig+0x98>)
 80082a0:	42a8      	cmp	r0, r5
 80082a2:	d00b      	beq.n	80082bc <TIM_OC4_SetConfig+0x78>
 80082a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082a8:	42a8      	cmp	r0, r5
 80082aa:	d007      	beq.n	80082bc <TIM_OC4_SetConfig+0x78>
 80082ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082b0:	42a8      	cmp	r0, r5
 80082b2:	d003      	beq.n	80082bc <TIM_OC4_SetConfig+0x78>
 80082b4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80082b8:	42a8      	cmp	r0, r5
 80082ba:	d106      	bne.n	80082ca <TIM_OC4_SetConfig+0x86>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80082bc:	f424 4540 	bic.w	r5, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80082c0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80082c4:	4334      	orrs	r4, r6
 80082c6:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082cc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082ce:	684a      	ldr	r2, [r1, #4]
 80082d0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d2:	6203      	str	r3, [r0, #32]
}
 80082d4:	bd70      	pop	{r4, r5, r6, pc}
 80082d6:	bf00      	nop
 80082d8:	40012c00 	.word	0x40012c00
 80082dc:	40014000 	.word	0x40014000

080082e0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082e0:	6a03      	ldr	r3, [r0, #32]
 80082e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e8:	6a03      	ldr	r3, [r0, #32]
{
 80082ea:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082ee:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80082fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80082fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008302:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008306:	4d11      	ldr	r5, [pc, #68]	; (800834c <TIM_OC5_SetConfig+0x6c>)
 8008308:	42a8      	cmp	r0, r5
 800830a:	d013      	beq.n	8008334 <TIM_OC5_SetConfig+0x54>
 800830c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008310:	42a8      	cmp	r0, r5
 8008312:	d00f      	beq.n	8008334 <TIM_OC5_SetConfig+0x54>
 8008314:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008318:	42a8      	cmp	r0, r5
 800831a:	d00b      	beq.n	8008334 <TIM_OC5_SetConfig+0x54>
 800831c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008320:	42a8      	cmp	r0, r5
 8008322:	d007      	beq.n	8008334 <TIM_OC5_SetConfig+0x54>
 8008324:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008328:	42a8      	cmp	r0, r5
 800832a:	d003      	beq.n	8008334 <TIM_OC5_SetConfig+0x54>
 800832c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008330:	42a8      	cmp	r0, r5
 8008332:	d104      	bne.n	800833e <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008334:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008336:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800833a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008340:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008342:	684a      	ldr	r2, [r1, #4]
 8008344:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008346:	6203      	str	r3, [r0, #32]
}
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	bf00      	nop
 800834c:	40012c00 	.word	0x40012c00

08008350 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008350:	6a03      	ldr	r3, [r0, #32]
 8008352:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008356:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008358:	6a03      	ldr	r3, [r0, #32]
{
 800835a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800835e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008360:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008362:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008366:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800836a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800836e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008370:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008374:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008378:	4d10      	ldr	r5, [pc, #64]	; (80083bc <TIM_OC6_SetConfig+0x6c>)
 800837a:	42a8      	cmp	r0, r5
 800837c:	d013      	beq.n	80083a6 <TIM_OC6_SetConfig+0x56>
 800837e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008382:	42a8      	cmp	r0, r5
 8008384:	d00f      	beq.n	80083a6 <TIM_OC6_SetConfig+0x56>
 8008386:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800838a:	42a8      	cmp	r0, r5
 800838c:	d00b      	beq.n	80083a6 <TIM_OC6_SetConfig+0x56>
 800838e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008392:	42a8      	cmp	r0, r5
 8008394:	d007      	beq.n	80083a6 <TIM_OC6_SetConfig+0x56>
 8008396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800839a:	42a8      	cmp	r0, r5
 800839c:	d003      	beq.n	80083a6 <TIM_OC6_SetConfig+0x56>
 800839e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083a2:	42a8      	cmp	r0, r5
 80083a4:	d104      	bne.n	80083b0 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083a6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083a8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083ac:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083b2:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083b4:	684a      	ldr	r2, [r1, #4]
 80083b6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b8:	6203      	str	r3, [r0, #32]
}
 80083ba:	bd30      	pop	{r4, r5, pc}
 80083bc:	40012c00 	.word	0x40012c00

080083c0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c0:	4a36      	ldr	r2, [pc, #216]	; (800849c <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 80083c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c4:	4290      	cmp	r0, r2
 80083c6:	d016      	beq.n	80083f6 <TIM_Base_SetConfig+0x36>
 80083c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80083cc:	d013      	beq.n	80083f6 <TIM_Base_SetConfig+0x36>
 80083ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80083d2:	4290      	cmp	r0, r2
 80083d4:	d00f      	beq.n	80083f6 <TIM_Base_SetConfig+0x36>
 80083d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083da:	4290      	cmp	r0, r2
 80083dc:	d00b      	beq.n	80083f6 <TIM_Base_SetConfig+0x36>
 80083de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083e2:	4290      	cmp	r0, r2
 80083e4:	d007      	beq.n	80083f6 <TIM_Base_SetConfig+0x36>
 80083e6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80083ea:	4290      	cmp	r0, r2
 80083ec:	d003      	beq.n	80083f6 <TIM_Base_SetConfig+0x36>
 80083ee:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80083f2:	4290      	cmp	r0, r2
 80083f4:	d119      	bne.n	800842a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80083f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80083fc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083fe:	4a27      	ldr	r2, [pc, #156]	; (800849c <TIM_Base_SetConfig+0xdc>)
 8008400:	4290      	cmp	r0, r2
 8008402:	d021      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 8008404:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008408:	d01e      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 800840a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800840e:	4290      	cmp	r0, r2
 8008410:	d01a      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 8008412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008416:	4290      	cmp	r0, r2
 8008418:	d016      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 800841a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800841e:	4290      	cmp	r0, r2
 8008420:	d012      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 8008422:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008426:	4290      	cmp	r0, r2
 8008428:	d00e      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 800842a:	4a1d      	ldr	r2, [pc, #116]	; (80084a0 <TIM_Base_SetConfig+0xe0>)
 800842c:	4290      	cmp	r0, r2
 800842e:	d00b      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 8008430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008434:	4290      	cmp	r0, r2
 8008436:	d007      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 8008438:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800843c:	4290      	cmp	r0, r2
 800843e:	d003      	beq.n	8008448 <TIM_Base_SetConfig+0x88>
 8008440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008444:	4290      	cmp	r0, r2
 8008446:	d103      	bne.n	8008450 <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008448:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800844a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800844e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008450:	694a      	ldr	r2, [r1, #20]
 8008452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008456:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008458:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800845a:	688b      	ldr	r3, [r1, #8]
 800845c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800845e:	680b      	ldr	r3, [r1, #0]
 8008460:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008462:	4b0e      	ldr	r3, [pc, #56]	; (800849c <TIM_Base_SetConfig+0xdc>)
 8008464:	4298      	cmp	r0, r3
 8008466:	d013      	beq.n	8008490 <TIM_Base_SetConfig+0xd0>
 8008468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846c:	4298      	cmp	r0, r3
 800846e:	d00f      	beq.n	8008490 <TIM_Base_SetConfig+0xd0>
 8008470:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008474:	4298      	cmp	r0, r3
 8008476:	d00b      	beq.n	8008490 <TIM_Base_SetConfig+0xd0>
 8008478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800847c:	4298      	cmp	r0, r3
 800847e:	d007      	beq.n	8008490 <TIM_Base_SetConfig+0xd0>
 8008480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008484:	4298      	cmp	r0, r3
 8008486:	d003      	beq.n	8008490 <TIM_Base_SetConfig+0xd0>
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	4298      	cmp	r0, r3
 800848e:	d101      	bne.n	8008494 <TIM_Base_SetConfig+0xd4>
    TIMx->RCR = Structure->RepetitionCounter;
 8008490:	690b      	ldr	r3, [r1, #16]
 8008492:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008494:	2301      	movs	r3, #1
 8008496:	6143      	str	r3, [r0, #20]
}
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	40012c00 	.word	0x40012c00
 80084a0:	40014000 	.word	0x40014000

080084a4 <HAL_TIM_Base_Init>:
{
 80084a4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80084a6:	4604      	mov	r4, r0
 80084a8:	b350      	cbz	r0, 8008500 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80084aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80084ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80084b2:	b91b      	cbnz	r3, 80084bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80084b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80084b8:	f7fb fd02 	bl	8003ec0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084be:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c4:	1d21      	adds	r1, r4, #4
 80084c6:	f7ff ff7b 	bl	80083c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ca:	2301      	movs	r3, #1
 80084cc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80084d0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80084d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80084da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80084de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80084e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80084ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80084f6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80084fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80084fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008500:	2001      	movs	r0, #1
 8008502:	e7fc      	b.n	80084fe <HAL_TIM_Base_Init+0x5a>

08008504 <HAL_TIM_PWM_Init>:
{
 8008504:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008506:	4604      	mov	r4, r0
 8008508:	b350      	cbz	r0, 8008560 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800850a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800850e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008512:	b91b      	cbnz	r3, 800851c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008514:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008518:	f7fb fd36 	bl	8003f88 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800851c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800851e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008520:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008524:	1d21      	adds	r1, r4, #4
 8008526:	f7ff ff4b 	bl	80083c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800852a:	2301      	movs	r3, #1
 800852c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8008530:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008532:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008536:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800853a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800853e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800854e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008552:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008556:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800855a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800855e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008560:	2001      	movs	r0, #1
 8008562:	e7fc      	b.n	800855e <HAL_TIM_PWM_Init+0x5a>

08008564 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008564:	6a03      	ldr	r3, [r0, #32]
 8008566:	f023 0310 	bic.w	r3, r3, #16
 800856a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800856c:	6a03      	ldr	r3, [r0, #32]
{
 800856e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8008570:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008572:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008574:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008576:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800857a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800857e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008582:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008584:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008588:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800858c:	4d1a      	ldr	r5, [pc, #104]	; (80085f8 <TIM_OC2_SetConfig+0x94>)
 800858e:	42a8      	cmp	r0, r5
 8008590:	d007      	beq.n	80085a2 <TIM_OC2_SetConfig+0x3e>
 8008592:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008596:	42a8      	cmp	r0, r5
 8008598:	d003      	beq.n	80085a2 <TIM_OC2_SetConfig+0x3e>
 800859a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800859e:	42a8      	cmp	r0, r5
 80085a0:	d10d      	bne.n	80085be <TIM_OC2_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ac:	4d12      	ldr	r5, [pc, #72]	; (80085f8 <TIM_OC2_SetConfig+0x94>)
 80085ae:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80085b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b4:	d012      	beq.n	80085dc <TIM_OC2_SetConfig+0x78>
 80085b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085ba:	42a8      	cmp	r0, r5
 80085bc:	d00e      	beq.n	80085dc <TIM_OC2_SetConfig+0x78>
 80085be:	4d0f      	ldr	r5, [pc, #60]	; (80085fc <TIM_OC2_SetConfig+0x98>)
 80085c0:	42a8      	cmp	r0, r5
 80085c2:	d00b      	beq.n	80085dc <TIM_OC2_SetConfig+0x78>
 80085c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085c8:	42a8      	cmp	r0, r5
 80085ca:	d007      	beq.n	80085dc <TIM_OC2_SetConfig+0x78>
 80085cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085d0:	42a8      	cmp	r0, r5
 80085d2:	d003      	beq.n	80085dc <TIM_OC2_SetConfig+0x78>
 80085d4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085d8:	42a8      	cmp	r0, r5
 80085da:	d106      	bne.n	80085ea <TIM_OC2_SetConfig+0x86>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085dc:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085e0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80085e4:	4334      	orrs	r4, r6
 80085e6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80085ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80085ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80085ee:	684a      	ldr	r2, [r1, #4]
 80085f0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80085f2:	6203      	str	r3, [r0, #32]
}
 80085f4:	bd70      	pop	{r4, r5, r6, pc}
 80085f6:	bf00      	nop
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40014000 	.word	0x40014000

08008600 <HAL_TIM_PWM_ConfigChannel>:
{
 8008600:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8008602:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008606:	2b01      	cmp	r3, #1
{
 8008608:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800860a:	d079      	beq.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x100>
 800860c:	2001      	movs	r0, #1
  switch (Channel)
 800860e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8008610:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8008614:	d052      	beq.n	80086bc <HAL_TIM_PWM_ConfigChannel+0xbc>
 8008616:	d808      	bhi.n	800862a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008618:	2a04      	cmp	r2, #4
 800861a:	d02d      	beq.n	8008678 <HAL_TIM_PWM_ConfigChannel+0x78>
 800861c:	2a08      	cmp	r2, #8
 800861e:	d03c      	beq.n	800869a <HAL_TIM_PWM_ConfigChannel+0x9a>
 8008620:	b1c2      	cbz	r2, 8008654 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 8008622:	2300      	movs	r3, #0
 8008624:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8008628:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800862a:	2a10      	cmp	r2, #16
 800862c:	d057      	beq.n	80086de <HAL_TIM_PWM_ConfigChannel+0xde>
 800862e:	2a14      	cmp	r2, #20
 8008630:	d1f7      	bne.n	8008622 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008632:	6828      	ldr	r0, [r5, #0]
 8008634:	f7ff fe8c 	bl	8008350 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008638:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800863a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800863c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800863e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008642:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800864a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800864c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800864e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008652:	e053      	b.n	80086fc <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008654:	6828      	ldr	r0, [r5, #0]
 8008656:	f7ff fd55 	bl	8008104 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800865a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800865c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	f042 0208 	orr.w	r2, r2, #8
 8008664:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008666:	699a      	ldr	r2, [r3, #24]
 8008668:	f022 0204 	bic.w	r2, r2, #4
 800866c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008672:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008674:	2000      	movs	r0, #0
      break;
 8008676:	e7d4      	b.n	8008622 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008678:	6828      	ldr	r0, [r5, #0]
 800867a:	f7ff ff73 	bl	8008564 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800867e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008680:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008682:	699a      	ldr	r2, [r3, #24]
 8008684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008688:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800868a:	699a      	ldr	r2, [r3, #24]
 800868c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008690:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008698:	e7eb      	b.n	8008672 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800869a:	6828      	ldr	r0, [r5, #0]
 800869c:	f7ff fd86 	bl	80081ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086a0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086a2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086a4:	69da      	ldr	r2, [r3, #28]
 80086a6:	f042 0208 	orr.w	r2, r2, #8
 80086aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086ac:	69da      	ldr	r2, [r3, #28]
 80086ae:	f022 0204 	bic.w	r2, r2, #4
 80086b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086b4:	69da      	ldr	r2, [r3, #28]
 80086b6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086b8:	61da      	str	r2, [r3, #28]
      break;
 80086ba:	e7db      	b.n	8008674 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086bc:	6828      	ldr	r0, [r5, #0]
 80086be:	f7ff fdc1 	bl	8008244 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086c2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086c4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086c6:	69da      	ldr	r2, [r3, #28]
 80086c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80086dc:	e7ec      	b.n	80086b8 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086de:	6828      	ldr	r0, [r5, #0]
 80086e0:	f7ff fdfe 	bl	80082e0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086e4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086e6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086ea:	f042 0208 	orr.w	r2, r2, #8
 80086ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086f2:	f022 0204 	bic.w	r2, r2, #4
 80086f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086fa:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086fc:	651a      	str	r2, [r3, #80]	; 0x50
 80086fe:	e7b9      	b.n	8008674 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8008700:	2002      	movs	r0, #2
 8008702:	e791      	b.n	8008628 <HAL_TIM_PWM_ConfigChannel+0x28>

08008704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008704:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008706:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008708:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800870a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800870e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8008712:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008714:	6083      	str	r3, [r0, #8]
}
 8008716:	bd10      	pop	{r4, pc}

08008718 <HAL_TIM_ConfigClockSource>:
{
 8008718:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800871a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800871e:	2b01      	cmp	r3, #1
{
 8008720:	4604      	mov	r4, r0
 8008722:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8008726:	f000 80b8 	beq.w	800889a <HAL_TIM_ConfigClockSource+0x182>
 800872a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8008730:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8008734:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008736:	4b5a      	ldr	r3, [pc, #360]	; (80088a0 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 8008738:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800873a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800873c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800873e:	680b      	ldr	r3, [r1, #0]
 8008740:	2b70      	cmp	r3, #112	; 0x70
 8008742:	d047      	beq.n	80087d4 <HAL_TIM_ConfigClockSource+0xbc>
 8008744:	d824      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x78>
 8008746:	2b50      	cmp	r3, #80	; 0x50
 8008748:	d05a      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0xe8>
 800874a:	d817      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x64>
 800874c:	2b40      	cmp	r3, #64	; 0x40
 800874e:	f000 808b 	beq.w	8008868 <HAL_TIM_ConfigClockSource+0x150>
 8008752:	d815      	bhi.n	8008780 <HAL_TIM_ConfigClockSource+0x68>
 8008754:	2b20      	cmp	r3, #32
 8008756:	d007      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x50>
 8008758:	d804      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x4c>
 800875a:	f033 0210 	bics.w	r2, r3, #16
 800875e:	d003      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x50>
 8008760:	2201      	movs	r2, #1
 8008762:	e00d      	b.n	8008780 <HAL_TIM_ConfigClockSource+0x68>
 8008764:	2b30      	cmp	r3, #48	; 0x30
 8008766:	d1fb      	bne.n	8008760 <HAL_TIM_ConfigClockSource+0x48>
  tmpsmcr = TIMx->SMCR;
 8008768:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800876a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800876e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008772:	431a      	orrs	r2, r3
 8008774:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8008778:	6082      	str	r2, [r0, #8]
 800877a:	e035      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800877c:	2b60      	cmp	r3, #96	; 0x60
 800877e:	d059      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0x11c>
  htim->State = HAL_TIM_STATE_READY;
 8008780:	2301      	movs	r3, #1
 8008782:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008786:	2300      	movs	r3, #0
 8008788:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800878c:	4610      	mov	r0, r2
 800878e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8008790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008794:	d02a      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0xd4>
 8008796:	d804      	bhi.n	80087a2 <HAL_TIM_ConfigClockSource+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8008798:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 800879c:	bf18      	it	ne
 800879e:	2201      	movne	r2, #1
 80087a0:	e7ee      	b.n	8008780 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80087a2:	4940      	ldr	r1, [pc, #256]	; (80088a4 <HAL_TIM_ConfigClockSource+0x18c>)
 80087a4:	428b      	cmp	r3, r1
 80087a6:	d0df      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x50>
 80087a8:	d80b      	bhi.n	80087c2 <HAL_TIM_ConfigClockSource+0xaa>
 80087aa:	4a3f      	ldr	r2, [pc, #252]	; (80088a8 <HAL_TIM_ConfigClockSource+0x190>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d0db      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x50>
 80087b0:	d804      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0xa4>
 80087b2:	f023 0210 	bic.w	r2, r3, #16
 80087b6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80087ba:	e7d4      	b.n	8008766 <HAL_TIM_ConfigClockSource+0x4e>
 80087bc:	4a3b      	ldr	r2, [pc, #236]	; (80088ac <HAL_TIM_ConfigClockSource+0x194>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	e7d1      	b.n	8008766 <HAL_TIM_ConfigClockSource+0x4e>
 80087c2:	493b      	ldr	r1, [pc, #236]	; (80088b0 <HAL_TIM_ConfigClockSource+0x198>)
 80087c4:	428b      	cmp	r3, r1
 80087c6:	d0cf      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x50>
 80087c8:	f023 0520 	bic.w	r5, r3, #32
 80087cc:	3910      	subs	r1, #16
 80087ce:	428d      	cmp	r5, r1
 80087d0:	d0ca      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x50>
 80087d2:	e7d5      	b.n	8008780 <HAL_TIM_ConfigClockSource+0x68>
      TIM_ETR_SetConfig(htim->Instance,
 80087d4:	68cb      	ldr	r3, [r1, #12]
 80087d6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80087da:	f7ff ff93 	bl	8008704 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087e6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80087e8:	2200      	movs	r2, #0
}
 80087ea:	e7c9      	b.n	8008780 <HAL_TIM_ConfigClockSource+0x68>
      TIM_ETR_SetConfig(htim->Instance,
 80087ec:	68cb      	ldr	r3, [r1, #12]
 80087ee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80087f2:	f7ff ff87 	bl	8008704 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	6893      	ldr	r3, [r2, #8]
 80087fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087fe:	e7f2      	b.n	80087e6 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008800:	684a      	ldr	r2, [r1, #4]
 8008802:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8008804:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008806:	6a05      	ldr	r5, [r0, #32]
 8008808:	f025 0501 	bic.w	r5, r5, #1
 800880c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800880e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008810:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008818:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800881c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800881e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008820:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008822:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008824:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800882c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8008830:	6083      	str	r3, [r0, #8]
 8008832:	e7d9      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008834:	684d      	ldr	r5, [r1, #4]
 8008836:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008838:	6a01      	ldr	r1, [r0, #32]
 800883a:	f021 0110 	bic.w	r1, r1, #16
 800883e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008840:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8008842:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008844:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008848:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800884c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008850:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008854:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008856:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008858:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800885a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800885e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008862:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8008866:	e7e3      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x118>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008868:	684a      	ldr	r2, [r1, #4]
 800886a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800886c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800886e:	6a05      	ldr	r5, [r0, #32]
 8008870:	f025 0501 	bic.w	r5, r5, #1
 8008874:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008876:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008878:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800887c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008880:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008884:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8008886:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008888:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800888a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800888c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008894:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8008898:	e7ca      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x118>
  __HAL_LOCK(htim);
 800889a:	461a      	mov	r2, r3
 800889c:	e776      	b.n	800878c <HAL_TIM_ConfigClockSource+0x74>
 800889e:	bf00      	nop
 80088a0:	ffce0088 	.word	0xffce0088
 80088a4:	00100040 	.word	0x00100040
 80088a8:	00100020 	.word	0x00100020
 80088ac:	00100030 	.word	0x00100030
 80088b0:	00100060 	.word	0x00100060

080088b4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088b4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088b6:	f001 011f 	and.w	r1, r1, #31
{
 80088ba:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088bc:	2401      	movs	r4, #1
 80088be:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80088c0:	ea23 0304 	bic.w	r3, r3, r4
 80088c4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088c6:	6a03      	ldr	r3, [r0, #32]
 80088c8:	408a      	lsls	r2, r1
 80088ca:	431a      	orrs	r2, r3
 80088cc:	6202      	str	r2, [r0, #32]
}
 80088ce:	bd10      	pop	{r4, pc}

080088d0 <HAL_TIM_OC_Start>:
{
 80088d0:	b510      	push	{r4, lr}
 80088d2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088d4:	b929      	cbnz	r1, 80088e2 <HAL_TIM_OC_Start+0x12>
 80088d6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d027      	beq.n	800892e <HAL_TIM_OC_Start+0x5e>
    return HAL_ERROR;
 80088de:	2001      	movs	r0, #1
 80088e0:	e04d      	b.n	800897e <HAL_TIM_OC_Start+0xae>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088e2:	2904      	cmp	r1, #4
 80088e4:	d107      	bne.n	80088f6 <HAL_TIM_OC_Start+0x26>
 80088e6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d1f7      	bne.n	80088de <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088ee:	2302      	movs	r3, #2
 80088f0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80088f4:	e01e      	b.n	8008934 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088f6:	2908      	cmp	r1, #8
 80088f8:	d10d      	bne.n	8008916 <HAL_TIM_OC_Start+0x46>
 80088fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80088fe:	3b01      	subs	r3, #1
 8008900:	bf18      	it	ne
 8008902:	2301      	movne	r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1ea      	bne.n	80088de <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008908:	2908      	cmp	r1, #8
 800890a:	f04f 0302 	mov.w	r3, #2
 800890e:	d137      	bne.n	8008980 <HAL_TIM_OC_Start+0xb0>
 8008910:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008914:	e00e      	b.n	8008934 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008916:	290c      	cmp	r1, #12
 8008918:	d102      	bne.n	8008920 <HAL_TIM_OC_Start+0x50>
 800891a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800891e:	e7ee      	b.n	80088fe <HAL_TIM_OC_Start+0x2e>
 8008920:	2910      	cmp	r1, #16
 8008922:	bf0c      	ite	eq
 8008924:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 8008928:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 800892c:	e7e7      	b.n	80088fe <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800892e:	2302      	movs	r3, #2
 8008930:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008934:	2201      	movs	r2, #1
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	f7ff ffbc 	bl	80088b4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <HAL_TIM_OC_Start+0x118>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d029      	beq.n	8008998 <HAL_TIM_OC_Start+0xc8>
 8008944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008948:	4293      	cmp	r3, r2
 800894a:	d025      	beq.n	8008998 <HAL_TIM_OC_Start+0xc8>
 800894c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008950:	4293      	cmp	r3, r2
 8008952:	d021      	beq.n	8008998 <HAL_TIM_OC_Start+0xc8>
 8008954:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008958:	4293      	cmp	r3, r2
 800895a:	d01d      	beq.n	8008998 <HAL_TIM_OC_Start+0xc8>
 800895c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008960:	4293      	cmp	r3, r2
 8008962:	d019      	beq.n	8008998 <HAL_TIM_OC_Start+0xc8>
 8008964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008968:	4293      	cmp	r3, r2
 800896a:	d015      	beq.n	8008998 <HAL_TIM_OC_Start+0xc8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800896c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008970:	d11a      	bne.n	80089a8 <HAL_TIM_OC_Start+0xd8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008972:	6899      	ldr	r1, [r3, #8]
 8008974:	4a1d      	ldr	r2, [pc, #116]	; (80089ec <HAL_TIM_OC_Start+0x11c>)
 8008976:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008978:	2a06      	cmp	r2, #6
 800897a:	d131      	bne.n	80089e0 <HAL_TIM_OC_Start+0x110>
  return HAL_OK;
 800897c:	2000      	movs	r0, #0
}
 800897e:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008980:	290c      	cmp	r1, #12
 8008982:	d102      	bne.n	800898a <HAL_TIM_OC_Start+0xba>
 8008984:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008988:	e7d4      	b.n	8008934 <HAL_TIM_OC_Start+0x64>
 800898a:	2910      	cmp	r1, #16
 800898c:	bf0c      	ite	eq
 800898e:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8008992:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8008996:	e7cd      	b.n	8008934 <HAL_TIM_OC_Start+0x64>
    __HAL_TIM_MOE_ENABLE(htim);
 8008998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800899a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800899e:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a0:	4a11      	ldr	r2, [pc, #68]	; (80089e8 <HAL_TIM_OC_Start+0x118>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d1e2      	bne.n	800896c <HAL_TIM_OC_Start+0x9c>
 80089a6:	e7e4      	b.n	8008972 <HAL_TIM_OC_Start+0xa2>
 80089a8:	4a11      	ldr	r2, [pc, #68]	; (80089f0 <HAL_TIM_OC_Start+0x120>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d0e1      	beq.n	8008972 <HAL_TIM_OC_Start+0xa2>
 80089ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d0dd      	beq.n	8008972 <HAL_TIM_OC_Start+0xa2>
 80089b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d0d9      	beq.n	8008972 <HAL_TIM_OC_Start+0xa2>
 80089be:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d0d5      	beq.n	8008972 <HAL_TIM_OC_Start+0xa2>
 80089c6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d0d1      	beq.n	8008972 <HAL_TIM_OC_Start+0xa2>
 80089ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d0cd      	beq.n	8008972 <HAL_TIM_OC_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	e7cd      	b.n	800897c <HAL_TIM_OC_Start+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80089e4:	d1f7      	bne.n	80089d6 <HAL_TIM_OC_Start+0x106>
 80089e6:	e7c9      	b.n	800897c <HAL_TIM_OC_Start+0xac>
 80089e8:	40012c00 	.word	0x40012c00
 80089ec:	00010007 	.word	0x00010007
 80089f0:	40000400 	.word	0x40000400

080089f4 <HAL_TIM_PWM_Start>:
 80089f4:	f7ff bf6c 	b.w	80088d0 <HAL_TIM_OC_Start>

080089f8 <TIM_CCxNChannelCmd>:
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80089f8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089fa:	f001 011f 	and.w	r1, r1, #31
{
 80089fe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a00:	2404      	movs	r4, #4
 8008a02:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 8008a04:	ea23 0304 	bic.w	r3, r3, r4
 8008a08:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a0a:	6a03      	ldr	r3, [r0, #32]
 8008a0c:	408a      	lsls	r2, r1
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	6202      	str	r2, [r0, #32]
}
 8008a12:	bd10      	pop	{r4, pc}

08008a14 <HAL_TIMEx_OCN_Start>:
{
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a18:	b929      	cbnz	r1, 8008a26 <HAL_TIMEx_OCN_Start+0x12>
 8008a1a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d01d      	beq.n	8008a5e <HAL_TIMEx_OCN_Start+0x4a>
    return HAL_ERROR;
 8008a22:	2001      	movs	r0, #1
}
 8008a24:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a26:	2904      	cmp	r1, #4
 8008a28:	d107      	bne.n	8008a3a <HAL_TIMEx_OCN_Start+0x26>
 8008a2a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d1f7      	bne.n	8008a22 <HAL_TIMEx_OCN_Start+0xe>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a32:	2302      	movs	r3, #2
 8008a34:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008a38:	e014      	b.n	8008a64 <HAL_TIMEx_OCN_Start+0x50>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a3a:	2908      	cmp	r1, #8
 8008a3c:	d107      	bne.n	8008a4e <HAL_TIMEx_OCN_Start+0x3a>
 8008a3e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d1ed      	bne.n	8008a22 <HAL_TIMEx_OCN_Start+0xe>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a46:	2302      	movs	r3, #2
 8008a48:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8008a4c:	e00a      	b.n	8008a64 <HAL_TIMEx_OCN_Start+0x50>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a4e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d1e5      	bne.n	8008a22 <HAL_TIMEx_OCN_Start+0xe>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a56:	2302      	movs	r3, #2
 8008a58:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 8008a5c:	e002      	b.n	8008a64 <HAL_TIMEx_OCN_Start+0x50>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008a64:	2204      	movs	r2, #4
 8008a66:	6820      	ldr	r0, [r4, #0]
 8008a68:	f7ff ffc6 	bl	80089f8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8008a6c:	6823      	ldr	r3, [r4, #0]
 8008a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a74:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a76:	4a16      	ldr	r2, [pc, #88]	; (8008ad0 <HAL_TIMEx_OCN_Start+0xbc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d01a      	beq.n	8008ab2 <HAL_TIMEx_OCN_Start+0x9e>
 8008a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a80:	d017      	beq.n	8008ab2 <HAL_TIMEx_OCN_Start+0x9e>
 8008a82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d013      	beq.n	8008ab2 <HAL_TIMEx_OCN_Start+0x9e>
 8008a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00f      	beq.n	8008ab2 <HAL_TIMEx_OCN_Start+0x9e>
 8008a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00b      	beq.n	8008ab2 <HAL_TIMEx_OCN_Start+0x9e>
 8008a9a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d007      	beq.n	8008ab2 <HAL_TIMEx_OCN_Start+0x9e>
 8008aa2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <HAL_TIMEx_OCN_Start+0x9e>
 8008aaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d107      	bne.n	8008ac2 <HAL_TIMEx_OCN_Start+0xae>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab2:	6899      	ldr	r1, [r3, #8]
 8008ab4:	4a07      	ldr	r2, [pc, #28]	; (8008ad4 <HAL_TIMEx_OCN_Start+0xc0>)
 8008ab6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab8:	2a06      	cmp	r2, #6
 8008aba:	d006      	beq.n	8008aca <HAL_TIMEx_OCN_Start+0xb6>
 8008abc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008ac0:	d003      	beq.n	8008aca <HAL_TIMEx_OCN_Start+0xb6>
    __HAL_TIM_ENABLE(htim);
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	f042 0201 	orr.w	r2, r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008aca:	2000      	movs	r0, #0
 8008acc:	e7aa      	b.n	8008a24 <HAL_TIMEx_OCN_Start+0x10>
 8008ace:	bf00      	nop
 8008ad0:	40012c00 	.word	0x40012c00
 8008ad4:	00010007 	.word	0x00010007

08008ad8 <HAL_TIMEx_PWMN_Start>:
 8008ad8:	f7ff bf9c 	b.w	8008a14 <HAL_TIMEx_OCN_Start>

08008adc <HAL_TIMEx_MasterConfigSynchronization>:
{
 8008adc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8008ade:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	f04f 0302 	mov.w	r3, #2
 8008ae8:	d043      	beq.n	8008b72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  htim->State = HAL_TIM_STATE_BUSY;
 8008aea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aee:	4d22      	ldr	r5, [pc, #136]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8008af0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008af2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8008af4:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008af6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008af8:	d007      	beq.n	8008b0a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8008afa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008afe:	42ab      	cmp	r3, r5
 8008b00:	d003      	beq.n	8008b0a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8008b02:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008b06:	42ab      	cmp	r3, r5
 8008b08:	d103      	bne.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0x36>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b0a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b0c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b10:	432a      	orrs	r2, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b12:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b14:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008b18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b1c:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8008b1e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b20:	4a15      	ldr	r2, [pc, #84]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d01a      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2a:	d017      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008b2c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d013      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008b34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d00f      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008b3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00b      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008b44:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d007      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008b4c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8008b54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d104      	bne.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b5c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b5e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b62:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 8008b64:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8008b72:	4618      	mov	r0, r3
}
 8008b74:	bd30      	pop	{r4, r5, pc}
 8008b76:	bf00      	nop
 8008b78:	40012c00 	.word	0x40012c00

08008b7c <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8008b7c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8008b7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d058      	beq.n	8008c38 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b86:	68cb      	ldr	r3, [r1, #12]
 8008b88:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008b8a:	4c2c      	ldr	r4, [pc, #176]	; (8008c3c <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b92:	684a      	ldr	r2, [r1, #4]
 8008b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b9a:	680a      	ldr	r2, [r1, #0]
 8008b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ba0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ba2:	690a      	ldr	r2, [r1, #16]
 8008ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008baa:	694a      	ldr	r2, [r1, #20]
 8008bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bb0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bb2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008bba:	698a      	ldr	r2, [r1, #24]
 8008bbc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8008bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008bc4:	6802      	ldr	r2, [r0, #0]
 8008bc6:	42a2      	cmp	r2, r4
 8008bc8:	d006      	beq.n	8008bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8008bca:	4d1d      	ldr	r5, [pc, #116]	; (8008c40 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8008bcc:	42aa      	cmp	r2, r5
 8008bce:	d003      	beq.n	8008bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8008bd0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008bd4:	42aa      	cmp	r2, r5
 8008bd6:	d129      	bne.n	8008c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008bd8:	69cd      	ldr	r5, [r1, #28]
 8008bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bde:	42a2      	cmp	r2, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008be0:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008be4:	d006      	beq.n	8008bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 8008be6:	4c16      	ldr	r4, [pc, #88]	; (8008c40 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8008be8:	42a2      	cmp	r2, r4
 8008bea:	d003      	beq.n	8008bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 8008bec:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008bf0:	42a2      	cmp	r2, r4
 8008bf2:	d11b      	bne.n	8008c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bf4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bfa:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bfe:	6a0c      	ldr	r4, [r1, #32]
 8008c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c04:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c06:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008c08:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008c0c:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008c0e:	4c0b      	ldr	r4, [pc, #44]	; (8008c3c <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8008c10:	42a2      	cmp	r2, r4
 8008c12:	d007      	beq.n	8008c24 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 8008c14:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008c18:	42a2      	cmp	r2, r4
 8008c1a:	d003      	beq.n	8008c24 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 8008c1c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008c20:	42a2      	cmp	r2, r4
 8008c22:	d103      	bne.n	8008c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008c24:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008c26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c2a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8008c2c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8008c34:	4618      	mov	r0, r3
}
 8008c36:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8008c38:	2002      	movs	r0, #2
 8008c3a:	e7fc      	b.n	8008c36 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40013400 	.word	0x40013400

08008c44 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c44:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	e852 3f00 	ldrex	r3, [r2]
 8008c4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008c52:	6802      	ldr	r2, [r0, #0]
 8008c54:	2900      	cmp	r1, #0
 8008c56:	d1f5      	bne.n	8008c44 <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	f102 0308 	add.w	r3, r2, #8
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	f102 0c08 	add.w	ip, r2, #8
 8008c68:	e84c 3100 	strex	r1, r3, [ip]
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	d1f3      	bne.n	8008c58 <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c70:	2320      	movs	r3, #32
 8008c72:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8008c76:	4770      	bx	lr

08008c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c78:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	e852 3f00 	ldrex	r3, [r2]
 8008c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008c88:	6802      	ldr	r2, [r0, #0]
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d1f5      	bne.n	8008c7a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c8e:	4c0f      	ldr	r4, [pc, #60]	; (8008ccc <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	f102 0308 	add.w	r3, r2, #8
 8008c94:	e853 3f00 	ldrex	r3, [r3]
 8008c98:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	f102 0c08 	add.w	ip, r2, #8
 8008c9e:	e84c 3100 	strex	r1, r3, [ip]
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	d1f4      	bne.n	8008c90 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d107      	bne.n	8008cbc <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	e842 3100 	strex	r1, r3, [r2]
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	d1f7      	bne.n	8008cac <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	2320      	movs	r3, #32
 8008cbe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cc6:	6703      	str	r3, [r0, #112]	; 0x70
}
 8008cc8:	bd10      	pop	{r4, pc}
 8008cca:	bf00      	nop
 8008ccc:	effffffe 	.word	0xeffffffe

08008cd0 <HAL_UART_TxCpltCallback>:
 8008cd0:	4770      	bx	lr

08008cd2 <HAL_UART_RxCpltCallback>:
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_UART_RxHalfCpltCallback>:
 8008cd4:	4770      	bx	lr

08008cd6 <HAL_UART_ErrorCallback>:
 8008cd6:	4770      	bx	lr

08008cd8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cd8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008cda:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008cdc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8008ce0:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ce2:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ce6:	6892      	ldr	r2, [r2, #8]
 8008ce8:	0612      	lsls	r2, r2, #24
 8008cea:	d506      	bpl.n	8008cfa <UART_DMAError+0x22>
 8008cec:	2b21      	cmp	r3, #33	; 0x21
 8008cee:	d104      	bne.n	8008cfa <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008cf6:	f7ff ffa5 	bl	8008c44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008cfa:	6803      	ldr	r3, [r0, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	065b      	lsls	r3, r3, #25
 8008d00:	d506      	bpl.n	8008d10 <UART_DMAError+0x38>
 8008d02:	2c22      	cmp	r4, #34	; 0x22
 8008d04:	d104      	bne.n	8008d10 <UART_DMAError+0x38>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008d0c:	f7ff ffb4 	bl	8008c78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d10:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8008d14:	f043 0310 	orr.w	r3, r3, #16
 8008d18:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d1c:	f7ff ffdb 	bl	8008cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d20:	bd10      	pop	{r4, pc}

08008d22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d22:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d24:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d2c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d30:	f7ff ffd1 	bl	8008cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d34:	bd08      	pop	{r3, pc}
	...

08008d38 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d38:	6803      	ldr	r3, [r0, #0]
 8008d3a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d3c:	6819      	ldr	r1, [r3, #0]
{
 8008d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 8008d42:	f640 060f 	movw	r6, #2063	; 0x80f
 8008d46:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d48:	689d      	ldr	r5, [r3, #8]
{
 8008d4a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008d4c:	d110      	bne.n	8008d70 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d4e:	0696      	lsls	r6, r2, #26
 8008d50:	f140 8096 	bpl.w	8008e80 <HAL_UART_IRQHandler+0x148>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d54:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d58:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8008d5c:	433e      	orrs	r6, r7
 8008d5e:	f000 808f 	beq.w	8008e80 <HAL_UART_IRQHandler+0x148>
      if (huart->RxISR != NULL)
 8008d62:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8084 	beq.w	8008e72 <HAL_UART_IRQHandler+0x13a>
}
 8008d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d6e:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d70:	4ea7      	ldr	r6, [pc, #668]	; (8009010 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d72:	48a8      	ldr	r0, [pc, #672]	; (8009014 <HAL_UART_IRQHandler+0x2dc>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d74:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d76:	4008      	ands	r0, r1
 8008d78:	4330      	orrs	r0, r6
 8008d7a:	f000 8081 	beq.w	8008e80 <HAL_UART_IRQHandler+0x148>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d7e:	07d7      	lsls	r7, r2, #31
 8008d80:	d509      	bpl.n	8008d96 <HAL_UART_IRQHandler+0x5e>
 8008d82:	05c8      	lsls	r0, r1, #23
 8008d84:	d507      	bpl.n	8008d96 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d86:	2001      	movs	r0, #1
 8008d88:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d8a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008d8e:	f040 0001 	orr.w	r0, r0, #1
 8008d92:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d96:	0797      	lsls	r7, r2, #30
 8008d98:	d509      	bpl.n	8008dae <HAL_UART_IRQHandler+0x76>
 8008d9a:	07e8      	lsls	r0, r5, #31
 8008d9c:	d507      	bpl.n	8008dae <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d9e:	2002      	movs	r0, #2
 8008da0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008da2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008da6:	f040 0004 	orr.w	r0, r0, #4
 8008daa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dae:	0757      	lsls	r7, r2, #29
 8008db0:	d509      	bpl.n	8008dc6 <HAL_UART_IRQHandler+0x8e>
 8008db2:	07e8      	lsls	r0, r5, #31
 8008db4:	d507      	bpl.n	8008dc6 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008db6:	2004      	movs	r0, #4
 8008db8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008dbe:	f040 0002 	orr.w	r0, r0, #2
 8008dc2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dc6:	0717      	lsls	r7, r2, #28
 8008dc8:	d50b      	bpl.n	8008de2 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dca:	f001 0020 	and.w	r0, r1, #32
 8008dce:	4330      	orrs	r0, r6
 8008dd0:	d007      	beq.n	8008de2 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dd2:	2008      	movs	r0, #8
 8008dd4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dd6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008dda:	f040 0008 	orr.w	r0, r0, #8
 8008dde:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008de2:	0516      	lsls	r6, r2, #20
 8008de4:	d50a      	bpl.n	8008dfc <HAL_UART_IRQHandler+0xc4>
 8008de6:	0148      	lsls	r0, r1, #5
 8008de8:	d508      	bpl.n	8008dfc <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008dee:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008df0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008df4:	f043 0320 	orr.w	r3, r3, #32
 8008df8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dfc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d036      	beq.n	8008e72 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e04:	0693      	lsls	r3, r2, #26
 8008e06:	d50a      	bpl.n	8008e1e <HAL_UART_IRQHandler+0xe6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e08:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e0c:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8008e10:	ea51 0305 	orrs.w	r3, r1, r5
 8008e14:	d003      	beq.n	8008e1e <HAL_UART_IRQHandler+0xe6>
        if (huart->RxISR != NULL)
 8008e16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008e18:	b10b      	cbz	r3, 8008e1e <HAL_UART_IRQHandler+0xe6>
          huart->RxISR(huart);
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e1e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8008e20:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e24:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e26:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8008e30:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e32:	d020      	beq.n	8008e76 <HAL_UART_IRQHandler+0x13e>
        UART_EndRxTransfer(huart);
 8008e34:	f7ff ff20 	bl	8008c78 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	6893      	ldr	r3, [r2, #8]
 8008e3c:	065f      	lsls	r7, r3, #25
 8008e3e:	d515      	bpl.n	8008e6c <HAL_UART_IRQHandler+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	f102 0308 	add.w	r3, r2, #8
 8008e44:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	f102 0008 	add.w	r0, r2, #8
 8008e50:	e840 3100 	strex	r1, r3, [r0]
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d1f3      	bne.n	8008e40 <HAL_UART_IRQHandler+0x108>
          if (huart->hdmarx != NULL)
 8008e58:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008e5a:	b138      	cbz	r0, 8008e6c <HAL_UART_IRQHandler+0x134>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e5c:	4b6e      	ldr	r3, [pc, #440]	; (8009018 <HAL_UART_IRQHandler+0x2e0>)
 8008e5e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e60:	f7fc ff29 	bl	8005cb6 <HAL_DMA_Abort_IT>
 8008e64:	b128      	cbz	r0, 8008e72 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e66:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008e68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e6a:	e77e      	b.n	8008d6a <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f7ff ff32 	bl	8008cd6 <HAL_UART_ErrorCallback>
}
 8008e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 8008e76:	f7ff ff2e 	bl	8008cd6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e7a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8008e7e:	e7f8      	b.n	8008e72 <HAL_UART_IRQHandler+0x13a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e80:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008e82:	2801      	cmp	r0, #1
 8008e84:	f040 8081 	bne.w	8008f8a <HAL_UART_IRQHandler+0x252>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e88:	06d6      	lsls	r6, r2, #27
 8008e8a:	d57e      	bpl.n	8008f8a <HAL_UART_IRQHandler+0x252>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e8c:	06c8      	lsls	r0, r1, #27
 8008e8e:	d57c      	bpl.n	8008f8a <HAL_UART_IRQHandler+0x252>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e90:	2210      	movs	r2, #16
 8008e92:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	0651      	lsls	r1, r2, #25
 8008e98:	d547      	bpl.n	8008f2a <HAL_UART_IRQHandler+0x1f2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e9a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8008e9c:	6811      	ldr	r1, [r2, #0]
 8008e9e:	684a      	ldr	r2, [r1, #4]
 8008ea0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	d0e5      	beq.n	8008e72 <HAL_UART_IRQHandler+0x13a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ea6:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8008eaa:	4290      	cmp	r0, r2
 8008eac:	d9e1      	bls.n	8008e72 <HAL_UART_IRQHandler+0x13a>
        huart->RxXferCount = nb_remaining_rx_data;
 8008eae:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008eb2:	680a      	ldr	r2, [r1, #0]
 8008eb4:	0692      	lsls	r2, r2, #26
 8008eb6:	d42e      	bmi.n	8008f16 <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	e843 2100 	strex	r1, r2, [r3]
 8008ec4:	2900      	cmp	r1, #0
 8008ec6:	d1f7      	bne.n	8008eb8 <HAL_UART_IRQHandler+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	f103 0208 	add.w	r2, r3, #8
 8008ecc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	f103 0008 	add.w	r0, r3, #8
 8008ed8:	e840 2100 	strex	r1, r2, [r0]
 8008edc:	2900      	cmp	r1, #0
 8008ede:	d1f3      	bne.n	8008ec8 <HAL_UART_IRQHandler+0x190>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	f103 0208 	add.w	r2, r3, #8
 8008ee4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	f103 0008 	add.w	r0, r3, #8
 8008ef0:	e840 2100 	strex	r1, r2, [r0]
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	d1f3      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x1a8>
          huart->RxState = HAL_UART_STATE_READY;
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efe:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f04:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	e843 2100 	strex	r1, r2, [r3]
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d1f7      	bne.n	8008f00 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f10:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008f12:	f7fc fe9d 	bl	8005c50 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f16:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008f1a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f1e:	1ac9      	subs	r1, r1, r3
 8008f20:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7f8 fd14 	bl	8001950 <HAL_UARTEx_RxEventCallback>
 8008f28:	e7a3      	b.n	8008e72 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f2a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008f2e:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8008f30:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008f34:	b289      	uxth	r1, r1
 8008f36:	2900      	cmp	r1, #0
 8008f38:	d09b      	beq.n	8008e72 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f3a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f3e:	1a89      	subs	r1, r1, r2
 8008f40:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008f42:	2900      	cmp	r1, #0
 8008f44:	d095      	beq.n	8008e72 <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	e843 2000 	strex	r0, r2, [r3]
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d1f7      	bne.n	8008f46 <HAL_UART_IRQHandler+0x20e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f56:	4d31      	ldr	r5, [pc, #196]	; (800901c <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	f103 0208 	add.w	r2, r3, #8
 8008f5c:	e852 2f00 	ldrex	r2, [r2]
 8008f60:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	f103 0608 	add.w	r6, r3, #8
 8008f66:	e846 2000 	strex	r0, r2, [r6]
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d1f4      	bne.n	8008f58 <HAL_UART_IRQHandler+0x220>
        huart->RxState = HAL_UART_STATE_READY;
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8008f74:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f76:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	e843 2000 	strex	r0, r2, [r3]
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d1f7      	bne.n	8008f78 <HAL_UART_IRQHandler+0x240>
 8008f88:	e7cb      	b.n	8008f22 <HAL_UART_IRQHandler+0x1ea>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f8a:	02d7      	lsls	r7, r2, #11
 8008f8c:	d509      	bpl.n	8008fa2 <HAL_UART_IRQHandler+0x26a>
 8008f8e:	026e      	lsls	r6, r5, #9
 8008f90:	d507      	bpl.n	8008fa2 <HAL_UART_IRQHandler+0x26a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008f96:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008f9e:	f000 bbb5 	b.w	800970c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fa2:	0610      	lsls	r0, r2, #24
 8008fa4:	d50b      	bpl.n	8008fbe <HAL_UART_IRQHandler+0x286>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fa6:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008faa:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8008fae:	4328      	orrs	r0, r5
 8008fb0:	d005      	beq.n	8008fbe <HAL_UART_IRQHandler+0x286>
    if (huart->TxISR != NULL)
 8008fb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f43f af5c 	beq.w	8008e72 <HAL_UART_IRQHandler+0x13a>
      huart->TxISR(huart);
 8008fba:	4620      	mov	r0, r4
 8008fbc:	e6d5      	b.n	8008d6a <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fbe:	0657      	lsls	r7, r2, #25
 8008fc0:	d511      	bpl.n	8008fe6 <HAL_UART_IRQHandler+0x2ae>
 8008fc2:	064e      	lsls	r6, r1, #25
 8008fc4:	d50f      	bpl.n	8008fe6 <HAL_UART_IRQHandler+0x2ae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	e843 2100 	strex	r1, r2, [r3]
 8008fd2:	2900      	cmp	r1, #0
 8008fd4:	d1f7      	bne.n	8008fc6 <HAL_UART_IRQHandler+0x28e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fd6:	2320      	movs	r3, #32
 8008fd8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fdc:	6761      	str	r1, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f7ff fe76 	bl	8008cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fe4:	e745      	b.n	8008e72 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008fe6:	0215      	lsls	r5, r2, #8
 8008fe8:	d506      	bpl.n	8008ff8 <HAL_UART_IRQHandler+0x2c0>
 8008fea:	0048      	lsls	r0, r1, #1
 8008fec:	d504      	bpl.n	8008ff8 <HAL_UART_IRQHandler+0x2c0>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008fee:	4620      	mov	r0, r4
}
 8008ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ff4:	f000 bb8c 	b.w	8009710 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ff8:	01d3      	lsls	r3, r2, #7
 8008ffa:	f57f af3a 	bpl.w	8008e72 <HAL_UART_IRQHandler+0x13a>
 8008ffe:	2900      	cmp	r1, #0
 8009000:	f6bf af37 	bge.w	8008e72 <HAL_UART_IRQHandler+0x13a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009004:	4620      	mov	r0, r4
}
 8009006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800900a:	f000 bb80 	b.w	800970e <HAL_UARTEx_RxFifoFullCallback>
 800900e:	bf00      	nop
 8009010:	10000001 	.word	0x10000001
 8009014:	04000120 	.word	0x04000120
 8009018:	08008d23 	.word	0x08008d23
 800901c:	effffffe 	.word	0xeffffffe

08009020 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009020:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8009022:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009024:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009026:	2b01      	cmp	r3, #1
 8009028:	d105      	bne.n	8009036 <UART_DMARxHalfCplt+0x16>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800902a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800902e:	0849      	lsrs	r1, r1, #1
 8009030:	f7f8 fc8e 	bl	8001950 <HAL_UARTEx_RxEventCallback>
}
 8009034:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8009036:	f7ff fe4d 	bl	8008cd4 <HAL_UART_RxHalfCpltCallback>
}
 800903a:	e7fb      	b.n	8009034 <UART_DMARxHalfCplt+0x14>

0800903c <UART_DMAReceiveCplt>:
{
 800903c:	b508      	push	{r3, lr}
 800903e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009040:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f013 0320 	ands.w	r3, r3, #32
 800904a:	d131      	bne.n	80090b0 <UART_DMAReceiveCplt+0x74>
    huart->RxXferCount = 0U;
 800904c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009050:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	e852 3f00 	ldrex	r3, [r2]
 8009056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800905e:	6803      	ldr	r3, [r0, #0]
 8009060:	2900      	cmp	r1, #0
 8009062:	d1f5      	bne.n	8009050 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	f103 0208 	add.w	r2, r3, #8
 8009068:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	f103 0c08 	add.w	ip, r3, #8
 8009074:	e84c 2100 	strex	r1, r2, [ip]
 8009078:	2900      	cmp	r1, #0
 800907a:	d1f3      	bne.n	8009064 <UART_DMAReceiveCplt+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	f103 0208 	add.w	r2, r3, #8
 8009080:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	f103 0c08 	add.w	ip, r3, #8
 800908c:	e84c 2100 	strex	r1, r2, [ip]
 8009090:	2900      	cmp	r1, #0
 8009092:	d1f3      	bne.n	800907c <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8009094:	2220      	movs	r2, #32
 8009096:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800909a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800909c:	2a01      	cmp	r2, #1
 800909e:	d107      	bne.n	80090b0 <UART_DMAReceiveCplt+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	e843 2100 	strex	r1, r2, [r3]
 80090ac:	2900      	cmp	r1, #0
 80090ae:	d1f7      	bne.n	80090a0 <UART_DMAReceiveCplt+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d104      	bne.n	80090c0 <UART_DMAReceiveCplt+0x84>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80090ba:	f7f8 fc49 	bl	8001950 <HAL_UARTEx_RxEventCallback>
}
 80090be:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 80090c0:	f7ff fe07 	bl	8008cd2 <HAL_UART_RxCpltCallback>
}
 80090c4:	e7fb      	b.n	80090be <UART_DMAReceiveCplt+0x82>
	...

080090c8 <UART_SetConfig>:
{
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80090cc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090ce:	6921      	ldr	r1, [r4, #16]
 80090d0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090d2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090d4:	69c0      	ldr	r0, [r0, #28]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	6961      	ldr	r1, [r4, #20]
 80090da:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090dc:	49a0      	ldr	r1, [pc, #640]	; (8009360 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090de:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090e0:	4029      	ands	r1, r5
 80090e2:	430a      	orrs	r2, r1
 80090e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	68e1      	ldr	r1, [r4, #12]
 80090ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80090ee:	430a      	orrs	r2, r1
 80090f0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090f2:	4a9c      	ldr	r2, [pc, #624]	; (8009364 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090f4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090f6:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80090f8:	bf1c      	itt	ne
 80090fa:	6a22      	ldrne	r2, [r4, #32]
 80090fc:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8009104:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8009108:	430a      	orrs	r2, r1
 800910a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800910c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009110:	f022 020f 	bic.w	r2, r2, #15
 8009114:	430a      	orrs	r2, r1
 8009116:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009118:	4a93      	ldr	r2, [pc, #588]	; (8009368 <UART_SetConfig+0x2a0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d11b      	bne.n	8009156 <UART_SetConfig+0x8e>
 800911e:	4b93      	ldr	r3, [pc, #588]	; (800936c <UART_SetConfig+0x2a4>)
 8009120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	3b01      	subs	r3, #1
 800912a:	2b02      	cmp	r3, #2
 800912c:	f200 80e4 	bhi.w	80092f8 <UART_SetConfig+0x230>
 8009130:	4a8f      	ldr	r2, [pc, #572]	; (8009370 <UART_SetConfig+0x2a8>)
 8009132:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009134:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009138:	f040 80ab 	bne.w	8009292 <UART_SetConfig+0x1ca>
    switch (clocksource)
 800913c:	2b08      	cmp	r3, #8
 800913e:	d826      	bhi.n	800918e <UART_SetConfig+0xc6>
 8009140:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009144:	00dd00ee 	.word	0x00dd00ee
 8009148:	002500a5 	.word	0x002500a5
 800914c:	002500e3 	.word	0x002500e3
 8009150:	00250025 	.word	0x00250025
 8009154:	00f2      	.short	0x00f2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009156:	4a87      	ldr	r2, [pc, #540]	; (8009374 <UART_SetConfig+0x2ac>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d106      	bne.n	800916a <UART_SetConfig+0xa2>
 800915c:	4b83      	ldr	r3, [pc, #524]	; (800936c <UART_SetConfig+0x2a4>)
 800915e:	4a86      	ldr	r2, [pc, #536]	; (8009378 <UART_SetConfig+0x2b0>)
 8009160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009164:	f003 030c 	and.w	r3, r3, #12
 8009168:	e7e3      	b.n	8009132 <UART_SetConfig+0x6a>
 800916a:	4a84      	ldr	r2, [pc, #528]	; (800937c <UART_SetConfig+0x2b4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d119      	bne.n	80091a4 <UART_SetConfig+0xdc>
 8009170:	4b7e      	ldr	r3, [pc, #504]	; (800936c <UART_SetConfig+0x2a4>)
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800917a:	2b20      	cmp	r3, #32
 800917c:	f000 80c8 	beq.w	8009310 <UART_SetConfig+0x248>
 8009180:	d807      	bhi.n	8009192 <UART_SetConfig+0xca>
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 80c9 	beq.w	800931a <UART_SetConfig+0x252>
 8009188:	2b10      	cmp	r3, #16
 800918a:	f000 80bb 	beq.w	8009304 <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800918e:	2001      	movs	r0, #1
 8009190:	e04e      	b.n	8009230 <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009192:	2b30      	cmp	r3, #48	; 0x30
 8009194:	d1fb      	bne.n	800918e <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009196:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800919a:	f000 80c5 	beq.w	8009328 <UART_SetConfig+0x260>
 800919e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80091a2:	e093      	b.n	80092cc <UART_SetConfig+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091a4:	4a76      	ldr	r2, [pc, #472]	; (8009380 <UART_SetConfig+0x2b8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d10f      	bne.n	80091ca <UART_SetConfig+0x102>
 80091aa:	4b70      	ldr	r3, [pc, #448]	; (800936c <UART_SetConfig+0x2a4>)
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091b4:	2b80      	cmp	r3, #128	; 0x80
 80091b6:	f000 80ab 	beq.w	8009310 <UART_SetConfig+0x248>
 80091ba:	d804      	bhi.n	80091c6 <UART_SetConfig+0xfe>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 80ac 	beq.w	800931a <UART_SetConfig+0x252>
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	e7e1      	b.n	800918a <UART_SetConfig+0xc2>
 80091c6:	2bc0      	cmp	r3, #192	; 0xc0
 80091c8:	e7e4      	b.n	8009194 <UART_SetConfig+0xcc>
 80091ca:	4a6e      	ldr	r2, [pc, #440]	; (8009384 <UART_SetConfig+0x2bc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d112      	bne.n	80091f6 <UART_SetConfig+0x12e>
 80091d0:	4b66      	ldr	r3, [pc, #408]	; (800936c <UART_SetConfig+0x2a4>)
 80091d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091de:	f000 8097 	beq.w	8009310 <UART_SetConfig+0x248>
 80091e2:	d805      	bhi.n	80091f0 <UART_SetConfig+0x128>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8098 	beq.w	800931a <UART_SetConfig+0x252>
 80091ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ee:	e7cc      	b.n	800918a <UART_SetConfig+0xc2>
 80091f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091f4:	e7ce      	b.n	8009194 <UART_SetConfig+0xcc>
 80091f6:	4a5b      	ldr	r2, [pc, #364]	; (8009364 <UART_SetConfig+0x29c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d1c8      	bne.n	800918e <UART_SetConfig+0xc6>
 80091fc:	4b5b      	ldr	r3, [pc, #364]	; (800936c <UART_SetConfig+0x2a4>)
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009202:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800920a:	d018      	beq.n	800923e <UART_SetConfig+0x176>
 800920c:	d806      	bhi.n	800921c <UART_SetConfig+0x154>
 800920e:	b15b      	cbz	r3, 8009228 <UART_SetConfig+0x160>
 8009210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009214:	d1bb      	bne.n	800918e <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 8009216:	f7fe fca9 	bl	8007b6c <HAL_RCC_GetSysClockFreq>
        break;
 800921a:	e007      	b.n	800922c <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800921c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009220:	d1b5      	bne.n	800918e <UART_SetConfig+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 8009222:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009226:	e00b      	b.n	8009240 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009228:	f7fe fdd0 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800922c:	b940      	cbnz	r0, 8009240 <UART_SetConfig+0x178>
 800922e:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8009230:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009234:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8009236:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8009238:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 800923c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 800923e:	4852      	ldr	r0, [pc, #328]	; (8009388 <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009240:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009242:	4b52      	ldr	r3, [pc, #328]	; (800938c <UART_SetConfig+0x2c4>)
 8009244:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009246:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800924a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800924e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009252:	4299      	cmp	r1, r3
 8009254:	d89b      	bhi.n	800918e <UART_SetConfig+0xc6>
 8009256:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800925a:	d898      	bhi.n	800918e <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800925c:	2300      	movs	r3, #0
 800925e:	4619      	mov	r1, r3
 8009260:	f7f7 fcca 	bl	8000bf8 <__aeabi_uldivmod>
 8009264:	0209      	lsls	r1, r1, #8
 8009266:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800926a:	086b      	lsrs	r3, r5, #1
 800926c:	0200      	lsls	r0, r0, #8
 800926e:	18c0      	adds	r0, r0, r3
 8009270:	462a      	mov	r2, r5
 8009272:	f04f 0300 	mov.w	r3, #0
 8009276:	f141 0100 	adc.w	r1, r1, #0
 800927a:	f7f7 fcbd 	bl	8000bf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800927e:	4b44      	ldr	r3, [pc, #272]	; (8009390 <UART_SetConfig+0x2c8>)
 8009280:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009284:	429a      	cmp	r2, r3
 8009286:	d882      	bhi.n	800918e <UART_SetConfig+0xc6>
          huart->Instance->BRR = usartdiv;
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	60d8      	str	r0, [r3, #12]
 800928c:	e7cf      	b.n	800922e <UART_SetConfig+0x166>
        pclk = (uint32_t) HSI_VALUE;
 800928e:	483e      	ldr	r0, [pc, #248]	; (8009388 <UART_SetConfig+0x2c0>)
 8009290:	e04a      	b.n	8009328 <UART_SetConfig+0x260>
    switch (clocksource)
 8009292:	2b08      	cmp	r3, #8
 8009294:	f63f af7b 	bhi.w	800918e <UART_SetConfig+0xc6>
 8009298:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <UART_SetConfig+0x1d8>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092c5 	.word	0x080092c5
 80092a4:	080092ed 	.word	0x080092ed
 80092a8:	08009317 	.word	0x08009317
 80092ac:	0800918f 	.word	0x0800918f
 80092b0:	080092f3 	.word	0x080092f3
 80092b4:	0800918f 	.word	0x0800918f
 80092b8:	0800918f 	.word	0x0800918f
 80092bc:	0800918f 	.word	0x0800918f
 80092c0:	0800919f 	.word	0x0800919f
        pclk = HAL_RCC_GetPCLK1Freq();
 80092c4:	f7fe fd82 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d0b0      	beq.n	800922e <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092d0:	4a2e      	ldr	r2, [pc, #184]	; (800938c <UART_SetConfig+0x2c4>)
 80092d2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80092d6:	fbb0 f0f2 	udiv	r0, r0, r2
 80092da:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80092de:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092e2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80092e6:	f1a0 0210 	sub.w	r2, r0, #16
 80092ea:	e7cb      	b.n	8009284 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80092ec:	f7fe fd80 	bl	8007df0 <HAL_RCC_GetPCLK2Freq>
        break;
 80092f0:	e7ea      	b.n	80092c8 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 80092f2:	f7fe fc3b 	bl	8007b6c <HAL_RCC_GetSysClockFreq>
        break;
 80092f6:	e7e7      	b.n	80092c8 <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80092fc:	d1f6      	bne.n	80092ec <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 80092fe:	f7fe fd77 	bl	8007df0 <HAL_RCC_GetPCLK2Freq>
        break;
 8009302:	e00f      	b.n	8009324 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009304:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009308:	d1f3      	bne.n	80092f2 <UART_SetConfig+0x22a>
        pclk = HAL_RCC_GetSysClockFreq();
 800930a:	f7fe fc2f 	bl	8007b6c <HAL_RCC_GetSysClockFreq>
        break;
 800930e:	e009      	b.n	8009324 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009310:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009314:	d0bb      	beq.n	800928e <UART_SetConfig+0x1c6>
        pclk = (uint32_t) HSI_VALUE;
 8009316:	481c      	ldr	r0, [pc, #112]	; (8009388 <UART_SetConfig+0x2c0>)
 8009318:	e7d8      	b.n	80092cc <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800931a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800931e:	d1d1      	bne.n	80092c4 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009320:	f7fe fd54 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009324:	2800      	cmp	r0, #0
 8009326:	d082      	beq.n	800922e <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009328:	6862      	ldr	r2, [r4, #4]
 800932a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800932c:	4b17      	ldr	r3, [pc, #92]	; (800938c <UART_SetConfig+0x2c4>)
 800932e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009332:	fbb0 f3f3 	udiv	r3, r0, r3
 8009336:	0850      	lsrs	r0, r2, #1
 8009338:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800933c:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009340:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009344:	f1a0 0210 	sub.w	r2, r0, #16
 8009348:	429a      	cmp	r2, r3
 800934a:	f63f af20 	bhi.w	800918e <UART_SetConfig+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800934e:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8009352:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009354:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009356:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800935a:	4318      	orrs	r0, r3
 800935c:	60d0      	str	r0, [r2, #12]
 800935e:	e766      	b.n	800922e <UART_SetConfig+0x166>
 8009360:	cfff69f3 	.word	0xcfff69f3
 8009364:	40008000 	.word	0x40008000
 8009368:	40013800 	.word	0x40013800
 800936c:	40021000 	.word	0x40021000
 8009370:	0800f223 	.word	0x0800f223
 8009374:	40004400 	.word	0x40004400
 8009378:	0800f226 	.word	0x0800f226
 800937c:	40004800 	.word	0x40004800
 8009380:	40004c00 	.word	0x40004c00
 8009384:	40005000 	.word	0x40005000
 8009388:	00f42400 	.word	0x00f42400
 800938c:	0800f234 	.word	0x0800f234
 8009390:	000ffcff 	.word	0x000ffcff

08009394 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009394:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009396:	07da      	lsls	r2, r3, #31
{
 8009398:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800939a:	d506      	bpl.n	80093aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800939c:	6801      	ldr	r1, [r0, #0]
 800939e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80093a0:	684a      	ldr	r2, [r1, #4]
 80093a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80093a6:	4322      	orrs	r2, r4
 80093a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093aa:	079c      	lsls	r4, r3, #30
 80093ac:	d506      	bpl.n	80093bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ae:	6801      	ldr	r1, [r0, #0]
 80093b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80093b2:	684a      	ldr	r2, [r1, #4]
 80093b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80093b8:	4322      	orrs	r2, r4
 80093ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093bc:	0759      	lsls	r1, r3, #29
 80093be:	d506      	bpl.n	80093ce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c0:	6801      	ldr	r1, [r0, #0]
 80093c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80093c4:	684a      	ldr	r2, [r1, #4]
 80093c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80093ca:	4322      	orrs	r2, r4
 80093cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093ce:	071a      	lsls	r2, r3, #28
 80093d0:	d506      	bpl.n	80093e0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093d2:	6801      	ldr	r1, [r0, #0]
 80093d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80093d6:	684a      	ldr	r2, [r1, #4]
 80093d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093dc:	4322      	orrs	r2, r4
 80093de:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093e0:	06dc      	lsls	r4, r3, #27
 80093e2:	d506      	bpl.n	80093f2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093e4:	6801      	ldr	r1, [r0, #0]
 80093e6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80093e8:	688a      	ldr	r2, [r1, #8]
 80093ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093ee:	4322      	orrs	r2, r4
 80093f0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093f2:	0699      	lsls	r1, r3, #26
 80093f4:	d506      	bpl.n	8009404 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093f6:	6801      	ldr	r1, [r0, #0]
 80093f8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80093fa:	688a      	ldr	r2, [r1, #8]
 80093fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009400:	4322      	orrs	r2, r4
 8009402:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009404:	065a      	lsls	r2, r3, #25
 8009406:	d50f      	bpl.n	8009428 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009408:	6801      	ldr	r1, [r0, #0]
 800940a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800940c:	684a      	ldr	r2, [r1, #4]
 800940e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009412:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009414:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009418:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800941a:	d105      	bne.n	8009428 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800941c:	684a      	ldr	r2, [r1, #4]
 800941e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009420:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009424:	4322      	orrs	r2, r4
 8009426:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009428:	061b      	lsls	r3, r3, #24
 800942a:	d506      	bpl.n	800943a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800942c:	6802      	ldr	r2, [r0, #0]
 800942e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009430:	6853      	ldr	r3, [r2, #4]
 8009432:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009436:	430b      	orrs	r3, r1
 8009438:	6053      	str	r3, [r2, #4]
}
 800943a:	bd10      	pop	{r4, pc}

0800943c <UART_WaitOnFlagUntilTimeout>:
{
 800943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009440:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009444:	4604      	mov	r4, r0
 8009446:	460e      	mov	r6, r1
 8009448:	4615      	mov	r5, r2
 800944a:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944c:	6822      	ldr	r2, [r4, #0]
 800944e:	69d3      	ldr	r3, [r2, #28]
 8009450:	ea36 0303 	bics.w	r3, r6, r3
 8009454:	bf0c      	ite	eq
 8009456:	2301      	moveq	r3, #1
 8009458:	2300      	movne	r3, #0
 800945a:	42ab      	cmp	r3, r5
 800945c:	d001      	beq.n	8009462 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800945e:	2000      	movs	r0, #0
 8009460:	e027      	b.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8009462:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009466:	d0f2      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009468:	f7fb f82e 	bl	80044c8 <HAL_GetTick>
 800946c:	1bc0      	subs	r0, r0, r7
 800946e:	4540      	cmp	r0, r8
 8009470:	6820      	ldr	r0, [r4, #0]
 8009472:	d802      	bhi.n	800947a <UART_WaitOnFlagUntilTimeout+0x3e>
 8009474:	f1b8 0f00 	cmp.w	r8, #0
 8009478:	d11d      	bne.n	80094b6 <UART_WaitOnFlagUntilTimeout+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800947e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	e840 3200 	strex	r2, r3, [r0]
 8009486:	2a00      	cmp	r2, #0
 8009488:	d1f7      	bne.n	800947a <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	f100 0308 	add.w	r3, r0, #8
 800948e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009492:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	f100 0108 	add.w	r1, r0, #8
 800949a:	e841 3200 	strex	r2, r3, [r1]
 800949e:	2a00      	cmp	r2, #0
 80094a0:	d1f3      	bne.n	800948a <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80094a2:	2320      	movs	r3, #32
 80094a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80094a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 80094ac:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 80094b0:	2003      	movs	r0, #3
}
 80094b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094b6:	6803      	ldr	r3, [r0, #0]
 80094b8:	075a      	lsls	r2, r3, #29
 80094ba:	d5c7      	bpl.n	800944c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094bc:	69c3      	ldr	r3, [r0, #28]
 80094be:	051b      	lsls	r3, r3, #20
 80094c0:	d5c4      	bpl.n	800944c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094c6:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	e840 3200 	strex	r2, r3, [r0]
 80094d4:	2a00      	cmp	r2, #0
 80094d6:	d1f7      	bne.n	80094c8 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	f100 0308 	add.w	r3, r0, #8
 80094dc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	f100 0108 	add.w	r1, r0, #8
 80094e8:	e841 3200 	strex	r2, r3, [r1]
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	d1f3      	bne.n	80094d8 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 80094f0:	2320      	movs	r3, #32
 80094f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80094fe:	e7d5      	b.n	80094ac <UART_WaitOnFlagUntilTimeout+0x70>

08009500 <UART_CheckIdleState>:
{
 8009500:	b530      	push	{r4, r5, lr}
 8009502:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009504:	2500      	movs	r5, #0
{
 8009506:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009508:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800950c:	f7fa ffdc 	bl	80044c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8009516:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009518:	d417      	bmi.n	800954a <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	0752      	lsls	r2, r2, #29
 8009520:	d509      	bpl.n	8009536 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009522:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8009526:	9200      	str	r2, [sp, #0]
 8009528:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800952c:	2200      	movs	r2, #0
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff ff84 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 8009534:	b9b0      	cbnz	r0, 8009564 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8009536:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009538:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800953a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800953e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009542:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009546:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8009548:	e00d      	b.n	8009566 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800954a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800954e:	9200      	str	r2, [sp, #0]
 8009550:	9003      	str	r0, [sp, #12]
 8009552:	462a      	mov	r2, r5
 8009554:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009558:	4620      	mov	r0, r4
 800955a:	f7ff ff6f 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 800955e:	9b03      	ldr	r3, [sp, #12]
 8009560:	2800      	cmp	r0, #0
 8009562:	d0da      	beq.n	800951a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8009564:	2003      	movs	r0, #3
}
 8009566:	b005      	add	sp, #20
 8009568:	bd30      	pop	{r4, r5, pc}

0800956a <HAL_UART_Init>:
{
 800956a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800956c:	4604      	mov	r4, r0
 800956e:	b350      	cbz	r0, 80095c6 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009570:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009574:	b91b      	cbnz	r3, 800957e <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8009576:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800957a:	f7fa fdb3 	bl	80040e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800957e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009580:	2324      	movs	r3, #36	; 0x24
 8009582:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8009586:	6813      	ldr	r3, [r2, #0]
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800958e:	4620      	mov	r0, r4
 8009590:	f7ff fd9a 	bl	80090c8 <UART_SetConfig>
 8009594:	2801      	cmp	r0, #1
 8009596:	d016      	beq.n	80095c6 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009598:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800959a:	b113      	cbz	r3, 80095a2 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800959c:	4620      	mov	r0, r4
 800959e:	f7ff fef9 	bl	8009394 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095b2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80095ba:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80095c2:	f7ff bf9d 	b.w	8009500 <UART_CheckIdleState>
}
 80095c6:	2001      	movs	r0, #1
 80095c8:	bd10      	pop	{r4, pc}
	...

080095cc <UART_Start_Receive_DMA>:
{
 80095cc:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095ce:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d0:	2500      	movs	r5, #0
 80095d2:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 80095d6:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80095d8:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 80095da:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095de:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 80095e2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80095e4:	b1c0      	cbz	r0, 8009618 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095e6:	4b20      	ldr	r3, [pc, #128]	; (8009668 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095e8:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095ea:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095ec:	4b1f      	ldr	r3, [pc, #124]	; (800966c <UART_Start_Receive_DMA+0xa0>)
 80095ee:	6303      	str	r3, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095f0:	4b1f      	ldr	r3, [pc, #124]	; (8009670 <UART_Start_Receive_DMA+0xa4>)
    huart->hdmarx->XferAbortCallback = NULL;
 80095f2:	e9c0 350d 	strd	r3, r5, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095f6:	4613      	mov	r3, r2
 80095f8:	460a      	mov	r2, r1
 80095fa:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80095fe:	f7fc fae5 	bl	8005bcc <HAL_DMA_Start_IT>
 8009602:	b148      	cbz	r0, 8009618 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009604:	2310      	movs	r3, #16
 8009606:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      huart->RxState = HAL_UART_STATE_READY;
 800960a:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 800960c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8009610:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8009614:	2001      	movs	r0, #1
}
 8009616:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009618:	6922      	ldr	r2, [r4, #16]
  __HAL_UNLOCK(huart);
 800961a:	2300      	movs	r3, #0
 800961c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	b13a      	cbz	r2, 8009634 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	e843 2100 	strex	r1, r2, [r3]
 8009630:	2900      	cmp	r1, #0
 8009632:	d1f7      	bne.n	8009624 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009634:	f103 0208 	add.w	r2, r3, #8
 8009638:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800963c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	f103 0008 	add.w	r0, r3, #8
 8009644:	e840 2100 	strex	r1, r2, [r0]
 8009648:	2900      	cmp	r1, #0
 800964a:	d1f3      	bne.n	8009634 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	f103 0208 	add.w	r2, r3, #8
 8009650:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	f103 0108 	add.w	r1, r3, #8
 800965c:	e841 2000 	strex	r0, r2, [r1]
 8009660:	2800      	cmp	r0, #0
 8009662:	d1f3      	bne.n	800964c <UART_Start_Receive_DMA+0x80>
 8009664:	e7d7      	b.n	8009616 <UART_Start_Receive_DMA+0x4a>
 8009666:	bf00      	nop
 8009668:	0800903d 	.word	0x0800903d
 800966c:	08009021 	.word	0x08009021
 8009670:	08008cd9 	.word	0x08008cd9

08009674 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009674:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009678:	2b20      	cmp	r3, #32
{
 800967a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800967c:	d11f      	bne.n	80096be <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800967e:	b1d9      	cbz	r1, 80096b8 <HAL_UART_Receive_DMA+0x44>
 8009680:	b1d2      	cbz	r2, 80096b8 <HAL_UART_Receive_DMA+0x44>
    __HAL_LOCK(huart);
 8009682:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009686:	2b01      	cmp	r3, #1
 8009688:	d019      	beq.n	80096be <HAL_UART_Receive_DMA+0x4a>
 800968a:	2301      	movs	r3, #1
 800968c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009690:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009692:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009694:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <HAL_UART_Receive_DMA+0x50>)
 8009698:	429c      	cmp	r4, r3
 800969a:	d00a      	beq.n	80096b2 <HAL_UART_Receive_DMA+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	d507      	bpl.n	80096b2 <HAL_UART_Receive_DMA+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	e844 3500 	strex	r5, r3, [r4]
 80096ae:	2d00      	cmp	r5, #0
 80096b0:	d1f7      	bne.n	80096a2 <HAL_UART_Receive_DMA+0x2e>
}
 80096b2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80096b4:	f7ff bf8a 	b.w	80095cc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80096b8:	2001      	movs	r0, #1
}
 80096ba:	bc30      	pop	{r4, r5}
 80096bc:	4770      	bx	lr
    return HAL_BUSY;
 80096be:	2002      	movs	r0, #2
 80096c0:	e7fb      	b.n	80096ba <HAL_UART_Receive_DMA+0x46>
 80096c2:	bf00      	nop
 80096c4:	40008000 	.word	0x40008000

080096c8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80096ca:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096cc:	b91b      	cbnz	r3, 80096d6 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80096ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80096d2:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096d4:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096d6:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096d8:	4d0a      	ldr	r5, [pc, #40]	; (8009704 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096da:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096dc:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80096de:	4c0a      	ldr	r4, [pc, #40]	; (8009708 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096e0:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096e2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096e6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80096e8:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80096f0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096f4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80096f6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80096fe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8009702:	e7e7      	b.n	80096d4 <UARTEx_SetNbDataToProcess+0xc>
 8009704:	0800f254 	.word	0x0800f254
 8009708:	0800f24c 	.word	0x0800f24c

0800970c <HAL_UARTEx_WakeupCallback>:
}
 800970c:	4770      	bx	lr

0800970e <HAL_UARTEx_RxFifoFullCallback>:
 800970e:	4770      	bx	lr

08009710 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009710:	4770      	bx	lr

08009712 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009712:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009716:	2b01      	cmp	r3, #1
 8009718:	d014      	beq.n	8009744 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800971a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800971c:	2324      	movs	r3, #36	; 0x24
 800971e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009722:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009724:	6813      	ldr	r3, [r2, #0]
 8009726:	f023 0301 	bic.w	r3, r3, #1
 800972a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800972c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009730:	2300      	movs	r3, #0
 8009732:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009734:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009736:	2220      	movs	r2, #32
 8009738:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800973c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8009740:	4618      	mov	r0, r3
 8009742:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009744:	2002      	movs	r0, #2
}
 8009746:	4770      	bx	lr

08009748 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009748:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800974a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800974e:	2b01      	cmp	r3, #1
{
 8009750:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8009752:	d01b      	beq.n	800978c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8009754:	2301      	movs	r3, #1
 8009756:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800975a:	2324      	movs	r3, #36	; 0x24
 800975c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009760:	6803      	ldr	r3, [r0, #0]
 8009762:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800976c:	689a      	ldr	r2, [r3, #8]
 800976e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8009772:	4311      	orrs	r1, r2
 8009774:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009776:	f7ff ffa7 	bl	80096c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800977a:	6803      	ldr	r3, [r0, #0]
 800977c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800977e:	2320      	movs	r3, #32
 8009780:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009784:	2000      	movs	r0, #0
 8009786:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800978a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800978c:	2002      	movs	r0, #2
 800978e:	e7fc      	b.n	800978a <HAL_UARTEx_SetTxFifoThreshold+0x42>

08009790 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009790:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009792:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009796:	2b01      	cmp	r3, #1
{
 8009798:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800979a:	d01b      	beq.n	80097d4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800979c:	2301      	movs	r3, #1
 800979e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80097a2:	2324      	movs	r3, #36	; 0x24
 80097a4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097a8:	6803      	ldr	r3, [r0, #0]
 80097aa:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	f022 0201 	bic.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097b4:	689a      	ldr	r2, [r3, #8]
 80097b6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80097ba:	4311      	orrs	r1, r2
 80097bc:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80097be:	f7ff ff83 	bl	80096c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097c2:	6803      	ldr	r3, [r0, #0]
 80097c4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80097c6:	2320      	movs	r3, #32
 80097c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80097cc:	2000      	movs	r0, #0
 80097ce:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80097d4:	2002      	movs	r0, #2
 80097d6:	e7fc      	b.n	80097d2 <HAL_UARTEx_SetRxFifoThreshold+0x42>

080097d8 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 80097d8:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80097da:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 80097de:	2e20      	cmp	r6, #32
{
 80097e0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80097e2:	d120      	bne.n	8009826 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
    if ((pData == NULL) || (Size == 0U))
 80097e4:	b909      	cbnz	r1, 80097ea <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
      return HAL_ERROR;
 80097e6:	2001      	movs	r0, #1
}
 80097e8:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	d0fb      	beq.n	80097e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
    __HAL_LOCK(huart);
 80097ee:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d017      	beq.n	8009826 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
 80097f6:	2301      	movs	r3, #1
 80097f8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80097fc:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80097fe:	f7ff fee5 	bl	80095cc <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8009802:	2800      	cmp	r0, #0
 8009804:	d1f0      	bne.n	80097e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009806:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009808:	2b01      	cmp	r3, #1
 800980a:	d1ec      	bne.n	80097e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	2210      	movs	r2, #16
 8009810:	621a      	str	r2, [r3, #32]
 8009812:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009818:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	e842 3100 	strex	r1, r3, [r2]
 8009820:	2900      	cmp	r1, #0
 8009822:	d1f7      	bne.n	8009814 <HAL_UARTEx_ReceiveToIdle_DMA+0x3c>
 8009824:	e7e0      	b.n	80097e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    return HAL_BUSY;
 8009826:	2002      	movs	r0, #2
 8009828:	e7de      	b.n	80097e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>

0800982a <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800982a:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800982c:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8009830:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8009834:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8009838:	4618      	mov	r0, r3
 800983a:	4770      	bx	lr

0800983c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800983c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8009840:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8009844:	045b      	lsls	r3, r3, #17
 8009846:	0c5b      	lsrs	r3, r3, #17
 8009848:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800984c:	2000      	movs	r0, #0
 800984e:	4770      	bx	lr

08009850 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009850:	b084      	sub	sp, #16
 8009852:	b510      	push	{r4, lr}
 8009854:	ac03      	add	r4, sp, #12
 8009856:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800985a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800985e:	2301      	movs	r3, #1
 8009860:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800986a:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 800986c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8009870:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8009874:	4618      	mov	r0, r3
 8009876:	4770      	bx	lr

08009878 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009878:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800987a:	f891 e000 	ldrb.w	lr, [r1]

  /* initialize Endpoint */
  switch (ep->type)
 800987e:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009880:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8009884:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8009888:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800988c:	0412      	lsls	r2, r2, #16
 800988e:	4673      	mov	r3, lr
 8009890:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8009892:	2d03      	cmp	r5, #3
 8009894:	d84c      	bhi.n	8009930 <USB_ActivateEndpoint+0xb8>
 8009896:	e8df f005 	tbb	[pc, r5]
 800989a:	4802      	.short	0x4802
 800989c:	4446      	.short	0x4446
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800989e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80098a2:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80098a4:	f248 0780 	movw	r7, #32896	; 0x8080
 80098a8:	433a      	orrs	r2, r7
 80098aa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80098ae:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 80098b2:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8009b20 <USB_ActivateEndpoint+0x2a8>
 80098b6:	b2b6      	uxth	r6, r6
 80098b8:	ea06 060c 	and.w	r6, r6, ip
 80098bc:	ea46 060e 	orr.w	r6, r6, lr
 80098c0:	433e      	orrs	r6, r7
 80098c2:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 80098c6:	7b0a      	ldrb	r2, [r1, #12]
 80098c8:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	d17c      	bne.n	80099ca <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098d0:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 80098d2:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098d4:	0852      	lsrs	r2, r2, #1
 80098d6:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 80098d8:	b366      	cbz	r6, 8009934 <USB_ActivateEndpoint+0xbc>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098da:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80098de:	fa1e fe81 	uxtah	lr, lr, r1
 80098e2:	f8ae 2400 	strh.w	r2, [lr, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80098ea:	0657      	lsls	r7, r2, #25
 80098ec:	d50a      	bpl.n	8009904 <USB_ActivateEndpoint+0x8c>
 80098ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80098f2:	b292      	uxth	r2, r2
 80098f4:	ea02 020c 	and.w	r2, r2, ip
 80098f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009900:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009904:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009908:	4983      	ldr	r1, [pc, #524]	; (8009b18 <USB_ActivateEndpoint+0x2a0>)
 800990a:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 800990c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800990e:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8009912:	d001      	beq.n	8009918 <USB_ActivateEndpoint+0xa0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009914:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800991c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009920:	e0b1      	b.n	8009a86 <USB_ActivateEndpoint+0x20e>
      wEpRegVal |= USB_EP_INTERRUPT;
 8009922:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8009926:	2400      	movs	r4, #0
      break;
 8009928:	e7bc      	b.n	80098a4 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800992a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800992e:	e7fa      	b.n	8009926 <USB_ActivateEndpoint+0xae>
  switch (ep->type)
 8009930:	2401      	movs	r4, #1
 8009932:	e7b7      	b.n	80098a4 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009934:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009938:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800993a:	fa1e f585 	uxtah	r5, lr, r5
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800993e:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009940:	f8a5 2404 	strh.w	r2, [r5, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009944:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009948:	fa1e fe82 	uxtah	lr, lr, r2
 800994c:	d927      	bls.n	800999e <USB_ActivateEndpoint+0x126>
 800994e:	094d      	lsrs	r5, r1, #5
 8009950:	4a72      	ldr	r2, [pc, #456]	; (8009b1c <USB_ActivateEndpoint+0x2a4>)
 8009952:	06ce      	lsls	r6, r1, #27
 8009954:	bf08      	it	eq
 8009956:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800995a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800995e:	b292      	uxth	r2, r2
 8009960:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009964:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009968:	0457      	lsls	r7, r2, #17
 800996a:	d50d      	bpl.n	8009988 <USB_ActivateEndpoint+0x110>
 800996c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009970:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009974:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009978:	0412      	lsls	r2, r2, #16
 800997a:	0c12      	lsrs	r2, r2, #16
 800997c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009984:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009988:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800998c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009990:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009994:	0412      	lsls	r2, r2, #16
 8009996:	0c12      	lsrs	r2, r2, #16
 8009998:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800999c:	e7bc      	b.n	8009918 <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800999e:	b971      	cbnz	r1, 80099be <USB_ActivateEndpoint+0x146>
 80099a0:	f8be 2406 	ldrh.w	r2, [lr, #1030]	; 0x406
 80099a4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80099a8:	0412      	lsls	r2, r2, #16
 80099aa:	0c12      	lsrs	r2, r2, #16
 80099ac:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
 80099b0:	f8be 2406 	ldrh.w	r2, [lr, #1030]	; 0x406
 80099b4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80099b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80099bc:	e7cf      	b.n	800995e <USB_ActivateEndpoint+0xe6>
 80099be:	084a      	lsrs	r2, r1, #1
 80099c0:	07c9      	lsls	r1, r1, #31
 80099c2:	bf48      	it	mi
 80099c4:	3201      	addmi	r2, #1
 80099c6:	0292      	lsls	r2, r2, #10
 80099c8:	e7c9      	b.n	800995e <USB_ActivateEndpoint+0xe6>
    if (ep->type == EP_TYPE_BULK)
 80099ca:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 80099d0:	d15d      	bne.n	8009a8e <USB_ActivateEndpoint+0x216>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099d2:	b292      	uxth	r2, r2
 80099d4:	ea02 020c 	and.w	r2, r2, ip
 80099d8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80099dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80099e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80099e4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80099e8:	890a      	ldrh	r2, [r1, #8]
 80099ea:	fa1e f686 	uxtah	r6, lr, r6
 80099ee:	0852      	lsrs	r2, r2, #1
 80099f0:	0052      	lsls	r2, r2, #1
 80099f2:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
 80099f6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80099fa:	fa1e fe82 	uxtah	lr, lr, r2
 80099fe:	894a      	ldrh	r2, [r1, #10]
 8009a00:	0852      	lsrs	r2, r2, #1
 8009a02:	0052      	lsls	r2, r2, #1
 8009a04:	f8ae 2404 	strh.w	r2, [lr, #1028]	; 0x404
    if (ep->is_in == 0U)
 8009a08:	784a      	ldrb	r2, [r1, #1]
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	d147      	bne.n	8009a9e <USB_ActivateEndpoint+0x226>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009a12:	0456      	lsls	r6, r2, #17
 8009a14:	d50d      	bpl.n	8009a32 <USB_ActivateEndpoint+0x1ba>
 8009a16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009a1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009a1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009a22:	0412      	lsls	r2, r2, #16
 8009a24:	0c12      	lsrs	r2, r2, #16
 8009a26:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009a36:	0655      	lsls	r5, r2, #25
 8009a38:	d50d      	bpl.n	8009a56 <USB_ActivateEndpoint+0x1de>
 8009a3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009a3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009a42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009a46:	0412      	lsls	r2, r2, #16
 8009a48:	0c12      	lsrs	r2, r2, #16
 8009a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a4e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009a52:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009a62:	0412      	lsls	r2, r2, #16
 8009a64:	0c12      	lsrs	r2, r2, #16
 8009a66:	f248 0180 	movw	r1, #32896	; 0x8080
 8009a6a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a74:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009a78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a80:	0412      	lsls	r2, r2, #16
 8009a82:	0c12      	lsrs	r2, r2, #16
 8009a84:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a8e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8009a92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009a96:	0412      	lsls	r2, r2, #16
 8009a98:	0c12      	lsrs	r2, r2, #16
 8009a9a:	433a      	orrs	r2, r7
 8009a9c:	e7a0      	b.n	80099e0 <USB_ActivateEndpoint+0x168>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a9e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009aa2:	0451      	lsls	r1, r2, #17
 8009aa4:	d50d      	bpl.n	8009ac2 <USB_ActivateEndpoint+0x24a>
 8009aa6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009aaa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009aae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ab2:	0412      	lsls	r2, r2, #16
 8009ab4:	0c12      	lsrs	r2, r2, #16
 8009ab6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009abe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ac2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ac6:	0652      	lsls	r2, r2, #25
 8009ac8:	d50d      	bpl.n	8009ae6 <USB_ActivateEndpoint+0x26e>
 8009aca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ace:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009ad2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ad6:	0412      	lsls	r2, r2, #16
 8009ad8:	0c12      	lsrs	r2, r2, #16
 8009ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ade:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009ae2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ae6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009aea:	490b      	ldr	r1, [pc, #44]	; (8009b18 <USB_ActivateEndpoint+0x2a0>)
 8009aec:	b292      	uxth	r2, r2
 8009aee:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8009af0:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009af2:	bf18      	it	ne
 8009af4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009b08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009b10:	0412      	lsls	r2, r2, #16
 8009b12:	0c12      	lsrs	r2, r2, #16
 8009b14:	e700      	b.n	8009918 <USB_ActivateEndpoint+0xa0>
 8009b16:	bf00      	nop
 8009b18:	ffff8fbf 	.word	0xffff8fbf
 8009b1c:	ffff8000 	.word	0xffff8000
 8009b20:	ffff8f8f 	.word	0xffff8f8f

08009b24 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8009b24:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b26:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8009b28:	7b09      	ldrb	r1, [r1, #12]
 8009b2a:	bbd9      	cbnz	r1, 8009ba4 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8009b2c:	b30a      	cbz	r2, 8009b72 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009b32:	0651      	lsls	r1, r2, #25
 8009b34:	d50d      	bpl.n	8009b52 <USB_DeactivateEndpoint+0x2e>
 8009b36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009b3a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009b3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009b42:	0412      	lsls	r2, r2, #16
 8009b44:	0c12      	lsrs	r2, r2, #16
 8009b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009b4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b52:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009b56:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b5e:	0412      	lsls	r2, r2, #16
 8009b60:	0c12      	lsrs	r2, r2, #16
 8009b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b6a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8009b6e:	2000      	movs	r0, #0
 8009b70:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009b76:	0452      	lsls	r2, r2, #17
 8009b78:	d50d      	bpl.n	8009b96 <USB_DeactivateEndpoint+0x72>
 8009b7a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009b7e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009b82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009b86:	0412      	lsls	r2, r2, #16
 8009b88:	0c12      	lsrs	r2, r2, #16
 8009b8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009b8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b92:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b96:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009b9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ba2:	e7dc      	b.n	8009b5e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	d148      	bne.n	8009c3a <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ba8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bac:	0451      	lsls	r1, r2, #17
 8009bae:	d50d      	bpl.n	8009bcc <USB_DeactivateEndpoint+0xa8>
 8009bb0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bb4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009bb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009bbc:	0412      	lsls	r2, r2, #16
 8009bbe:	0c12      	lsrs	r2, r2, #16
 8009bc0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009bc8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bcc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bd0:	0652      	lsls	r2, r2, #25
 8009bd2:	d50d      	bpl.n	8009bf0 <USB_DeactivateEndpoint+0xcc>
 8009bd4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bd8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009bdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009be0:	0412      	lsls	r2, r2, #16
 8009be2:	0c12      	lsrs	r2, r2, #16
 8009be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009be8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009bec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8009bf0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bf4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009bf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009bfc:	0412      	lsls	r2, r2, #16
 8009bfe:	0c12      	lsrs	r2, r2, #16
 8009c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c04:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009c08:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c0c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c18:	0412      	lsls	r2, r2, #16
 8009c1a:	0c12      	lsrs	r2, r2, #16
 8009c1c:	f248 0180 	movw	r1, #32896	; 0x8080
 8009c20:	430a      	orrs	r2, r1
 8009c22:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c2a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c32:	0412      	lsls	r2, r2, #16
 8009c34:	0c12      	lsrs	r2, r2, #16
 8009c36:	430a      	orrs	r2, r1
 8009c38:	e797      	b.n	8009b6a <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c3e:	0451      	lsls	r1, r2, #17
 8009c40:	d50d      	bpl.n	8009c5e <USB_DeactivateEndpoint+0x13a>
 8009c42:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c46:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009c4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c4e:	0412      	lsls	r2, r2, #16
 8009c50:	0c12      	lsrs	r2, r2, #16
 8009c52:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c5a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c5e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c62:	0652      	lsls	r2, r2, #25
 8009c64:	d50d      	bpl.n	8009c82 <USB_DeactivateEndpoint+0x15e>
 8009c66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c6a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009c6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c72:	0412      	lsls	r2, r2, #16
 8009c74:	0c12      	lsrs	r2, r2, #16
 8009c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c7a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009c7e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8009c82:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c86:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009c8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c8e:	0412      	lsls	r2, r2, #16
 8009c90:	0c12      	lsrs	r2, r2, #16
 8009c92:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c9a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c9e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ca2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009caa:	0412      	lsls	r2, r2, #16
 8009cac:	0c12      	lsrs	r2, r2, #16
 8009cae:	f248 0180 	movw	r1, #32896	; 0x8080
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cb8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009cbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009cc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009cc4:	e7b5      	b.n	8009c32 <USB_DeactivateEndpoint+0x10e>

08009cc6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8009cc6:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009cc8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8009cca:	b18b      	cbz	r3, 8009cf0 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009ccc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd8:	041b      	lsls	r3, r3, #16
 8009cda:	0c1b      	lsrs	r3, r3, #16
 8009cdc:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8009cec:	2000      	movs	r0, #0
 8009cee:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009cf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cfc:	041b      	lsls	r3, r3, #16
 8009cfe:	0c1b      	lsrs	r3, r3, #16
 8009d00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d04:	e7ec      	b.n	8009ce0 <USB_EPSetStall+0x1a>

08009d06 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8009d06:	7b0b      	ldrb	r3, [r1, #12]
 8009d08:	bb3b      	cbnz	r3, 8009d5a <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8009d0a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d0c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8009d0e:	b333      	cbz	r3, 8009d5e <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d14:	065b      	lsls	r3, r3, #25
 8009d16:	d50d      	bpl.n	8009d34 <USB_EPClearStall+0x2e>
 8009d18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d24:	041b      	lsls	r3, r3, #16
 8009d26:	0c1b      	lsrs	r3, r3, #16
 8009d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8009d34:	78cb      	ldrb	r3, [r1, #3]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d00f      	beq.n	8009d5a <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d46:	041b      	lsls	r3, r3, #16
 8009d48:	0c1b      	lsrs	r3, r3, #16
 8009d4a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d56:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d62:	045b      	lsls	r3, r3, #17
 8009d64:	d50d      	bpl.n	8009d82 <USB_EPClearStall+0x7c>
 8009d66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	0c1b      	lsrs	r3, r3, #16
 8009d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8e:	041b      	lsls	r3, r3, #16
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009d96:	e7da      	b.n	8009d4e <USB_EPClearStall+0x48>

08009d98 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8009d98:	b911      	cbnz	r1, 8009da0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d9a:	2380      	movs	r3, #128	; 0x80
 8009d9c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8009da0:	2000      	movs	r0, #0
 8009da2:	4770      	bx	lr

08009da4 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009da4:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8009da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8009db6:	2000      	movs	r0, #0
 8009db8:	4770      	bx	lr

08009dba <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009dba:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8009dbe:	b280      	uxth	r0, r0
 8009dc0:	4770      	bx	lr

08009dc2 <USB_WritePMA>:
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009dc6:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dc8:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009dd0:	1a40      	subs	r0, r0, r1

  for (i = n; i != 0U; i--)
 8009dd2:	4299      	cmp	r1, r3
 8009dd4:	d100      	bne.n	8009dd8 <USB_WritePMA+0x16>
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
  }
}
 8009dd6:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009dd8:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 8009dda:	5242      	strh	r2, [r0, r1]
    pBuf++;
 8009ddc:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8009dde:	e7f8      	b.n	8009dd2 <USB_WritePMA+0x10>

08009de0 <USB_EPStartXfer>:
{
 8009de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de4:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8009de6:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 8009de8:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8009dea:	2901      	cmp	r1, #1
{
 8009dec:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8009dee:	f040 811f 	bne.w	800a030 <USB_EPStartXfer+0x250>
    if (ep->xfer_len > ep->maxpacket)
 8009df2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8009df6:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009df8:	6961      	ldr	r1, [r4, #20]
 8009dfa:	4566      	cmp	r6, ip
 8009dfc:	bf28      	it	cs
 8009dfe:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8009e00:	bb12      	cbnz	r2, 8009e48 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e02:	b2b6      	uxth	r6, r6
 8009e04:	88e2      	ldrh	r2, [r4, #6]
 8009e06:	4633      	mov	r3, r6
 8009e08:	f7ff ffdb 	bl	8009dc2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e0c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009e10:	7823      	ldrb	r3, [r4, #0]
 8009e12:	f205 4102 	addw	r1, r5, #1026	; 0x402
 8009e16:	fa11 f282 	uxtah	r2, r1, r2
 8009e1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009e1e:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e20:	7822      	ldrb	r2, [r4, #0]
 8009e22:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	0c1b      	lsrs	r3, r3, #16
 8009e32:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8009e42:	2000      	movs	r0, #0
}
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 8009e48:	78e2      	ldrb	r2, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 8009e4a:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e4c:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8009e4e:	2a02      	cmp	r2, #2
 8009e50:	f040 80d7 	bne.w	800a002 <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 8009e54:	459c      	cmp	ip, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e56:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8009e5a:	f080 80bb 	bcs.w	8009fd4 <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e5e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e66:	0412      	lsls	r2, r2, #16
 8009e68:	0c12      	lsrs	r2, r2, #16
 8009e6a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8009e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e72:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e76:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e7a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8009e7e:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e80:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8009e84:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e86:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e88:	d053      	beq.n	8009f32 <USB_EPStartXfer+0x152>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e8a:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8009e8e:	fa1c f282 	uxtah	r2, ip, r2
 8009e92:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e96:	8962      	ldrh	r2, [r4, #10]
 8009e98:	f7ff ff93 	bl	8009dc2 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8009e9c:	6a22      	ldr	r2, [r4, #32]
 8009e9e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8009ea0:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ea2:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8009ea4:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8009ea6:	bf8c      	ite	hi
 8009ea8:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8009eaa:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8009eac:	4431      	add	r1, r6
 8009eae:	bf88      	it	hi
 8009eb0:	4632      	movhi	r2, r6
 8009eb2:	6223      	str	r3, [r4, #32]
 8009eb4:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009eb6:	b293      	uxth	r3, r2
 8009eb8:	bb70      	cbnz	r0, 8009f18 <USB_EPStartXfer+0x138>
 8009eba:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8009ebe:	7820      	ldrb	r0, [r4, #0]
 8009ec0:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8009ec4:	fa17 f686 	uxtah	r6, r7, r6
 8009ec8:	2a3e      	cmp	r2, #62	; 0x3e
 8009eca:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 8009ece:	d90e      	bls.n	8009eee <USB_EPStartXfer+0x10e>
 8009ed0:	0950      	lsrs	r0, r2, #5
 8009ed2:	06d7      	lsls	r7, r2, #27
 8009ed4:	4aaa      	ldr	r2, [pc, #680]	; (800a180 <USB_EPStartXfer+0x3a0>)
 8009ed6:	bf08      	it	eq
 8009ed8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8009edc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8009ee0:	b292      	uxth	r2, r2
 8009ee2:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ee4:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ee6:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ee8:	f7ff ff6b 	bl	8009dc2 <USB_WritePMA>
 8009eec:	e798      	b.n	8009e20 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009eee:	b95a      	cbnz	r2, 8009f08 <USB_EPStartXfer+0x128>
 8009ef0:	8832      	ldrh	r2, [r6, #0]
 8009ef2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009ef6:	0412      	lsls	r2, r2, #16
 8009ef8:	0c12      	lsrs	r2, r2, #16
 8009efa:	8032      	strh	r2, [r6, #0]
 8009efc:	8832      	ldrh	r2, [r6, #0]
 8009efe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009f02:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009f06:	e7eb      	b.n	8009ee0 <USB_EPStartXfer+0x100>
 8009f08:	0850      	lsrs	r0, r2, #1
 8009f0a:	07d2      	lsls	r2, r2, #31
 8009f0c:	bf48      	it	mi
 8009f0e:	3001      	addmi	r0, #1
 8009f10:	0280      	lsls	r0, r0, #10
 8009f12:	b280      	uxth	r0, r0
 8009f14:	8030      	strh	r0, [r6, #0]
 8009f16:	e7e5      	b.n	8009ee4 <USB_EPStartXfer+0x104>
 8009f18:	2801      	cmp	r0, #1
 8009f1a:	d1e3      	bne.n	8009ee4 <USB_EPStartXfer+0x104>
 8009f1c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009f20:	7820      	ldrb	r0, [r4, #0]
 8009f22:	f205 4602 	addw	r6, r5, #1026	; 0x402
 8009f26:	fa16 f282 	uxtah	r2, r6, r2
 8009f2a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009f2e:	8013      	strh	r3, [r2, #0]
 8009f30:	e7d8      	b.n	8009ee4 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f32:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8009f36:	fa1c f282 	uxtah	r2, ip, r2
 8009f3a:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f3e:	8922      	ldrh	r2, [r4, #8]
 8009f40:	f7ff ff3f 	bl	8009dc2 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8009f44:	6a22      	ldr	r2, [r4, #32]
 8009f46:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8009f48:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f4a:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8009f4c:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8009f4e:	bf8c      	ite	hi
 8009f50:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8009f52:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 8009f54:	4431      	add	r1, r6
 8009f56:	bf88      	it	hi
 8009f58:	4632      	movhi	r2, r6
 8009f5a:	6223      	str	r3, [r4, #32]
 8009f5c:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f5e:	b293      	uxth	r3, r2
 8009f60:	bb58      	cbnz	r0, 8009fba <USB_EPStartXfer+0x1da>
 8009f62:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8009f66:	7820      	ldrb	r0, [r4, #0]
 8009f68:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8009f6c:	fa17 f686 	uxtah	r6, r7, r6
 8009f70:	2a3e      	cmp	r2, #62	; 0x3e
 8009f72:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 8009f76:	d90b      	bls.n	8009f90 <USB_EPStartXfer+0x1b0>
 8009f78:	0950      	lsrs	r0, r2, #5
 8009f7a:	06d7      	lsls	r7, r2, #27
 8009f7c:	4a80      	ldr	r2, [pc, #512]	; (800a180 <USB_EPStartXfer+0x3a0>)
 8009f7e:	bf08      	it	eq
 8009f80:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8009f84:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8009f88:	b292      	uxth	r2, r2
 8009f8a:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f8c:	8962      	ldrh	r2, [r4, #10]
 8009f8e:	e7aa      	b.n	8009ee6 <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f90:	b95a      	cbnz	r2, 8009faa <USB_EPStartXfer+0x1ca>
 8009f92:	8832      	ldrh	r2, [r6, #0]
 8009f94:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009f98:	0412      	lsls	r2, r2, #16
 8009f9a:	0c12      	lsrs	r2, r2, #16
 8009f9c:	8032      	strh	r2, [r6, #0]
 8009f9e:	8832      	ldrh	r2, [r6, #0]
 8009fa0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009fa4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009fa8:	e7ee      	b.n	8009f88 <USB_EPStartXfer+0x1a8>
 8009faa:	0850      	lsrs	r0, r2, #1
 8009fac:	07d2      	lsls	r2, r2, #31
 8009fae:	bf48      	it	mi
 8009fb0:	3001      	addmi	r0, #1
 8009fb2:	0280      	lsls	r0, r0, #10
 8009fb4:	b280      	uxth	r0, r0
 8009fb6:	8030      	strh	r0, [r6, #0]
 8009fb8:	e7e8      	b.n	8009f8c <USB_EPStartXfer+0x1ac>
 8009fba:	2801      	cmp	r0, #1
 8009fbc:	d1e6      	bne.n	8009f8c <USB_EPStartXfer+0x1ac>
 8009fbe:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009fc2:	7820      	ldrb	r0, [r4, #0]
 8009fc4:	f205 4606 	addw	r6, r5, #1030	; 0x406
 8009fc8:	fa16 f282 	uxtah	r2, r6, r2
 8009fcc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009fd0:	8013      	strh	r3, [r2, #0]
 8009fd2:	e7db      	b.n	8009f8c <USB_EPStartXfer+0x1ac>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009fd4:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8009fd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009fdc:	0412      	lsls	r2, r2, #16
 8009fde:	0c12      	lsrs	r2, r2, #16
 8009fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fe8:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009fec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009ff0:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8009ff4:	fa16 f282 	uxtah	r2, r6, r2
 8009ff8:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ffa:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ffe:	8922      	ldrh	r2, [r4, #8]
 800a000:	e772      	b.n	8009ee8 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a002:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 800a006:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a008:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 800a00c:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a00e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a012:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a014:	d007      	beq.n	800a026 <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a016:	f200 4606 	addw	r6, r0, #1030	; 0x406
 800a01a:	fa16 f282 	uxtah	r2, r6, r2
 800a01e:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a022:	8962      	ldrh	r2, [r4, #10]
 800a024:	e760      	b.n	8009ee8 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a026:	f200 4602 	addw	r6, r0, #1026	; 0x402
 800a02a:	fa16 f282 	uxtah	r2, r6, r2
 800a02e:	e7e4      	b.n	8009ffa <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 800a030:	bb7a      	cbnz	r2, 800a092 <USB_EPStartXfer+0x2b2>
      if (ep->xfer_len > ep->maxpacket)
 800a032:	69a3      	ldr	r3, [r4, #24]
 800a034:	6921      	ldr	r1, [r4, #16]
 800a036:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800a038:	bf88      	it	hi
 800a03a:	1a5a      	subhi	r2, r3, r1
 800a03c:	61a2      	str	r2, [r4, #24]
 800a03e:	bf88      	it	hi
 800a040:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a042:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a046:	7822      	ldrb	r2, [r4, #0]
 800a048:	f205 4006 	addw	r0, r5, #1030	; 0x406
 800a04c:	fa10 f181 	uxtah	r1, r0, r1
 800a050:	2b3e      	cmp	r3, #62	; 0x3e
 800a052:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a056:	f200 80cb 	bhi.w	800a1f0 <USB_EPStartXfer+0x410>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f040 80d1 	bne.w	800a202 <USB_EPStartXfer+0x422>
 800a060:	880b      	ldrh	r3, [r1, #0]
 800a062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a066:	041b      	lsls	r3, r3, #16
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	800b      	strh	r3, [r1, #0]
 800a06c:	880b      	ldrh	r3, [r1, #0]
 800a06e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a076:	b29b      	uxth	r3, r3
 800a078:	800b      	strh	r3, [r1, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a07a:	7822      	ldrb	r2, [r4, #0]
 800a07c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a088:	041b      	lsls	r3, r3, #16
 800a08a:	0c1b      	lsrs	r3, r3, #16
 800a08c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a090:	e6d1      	b.n	8009e36 <USB_EPStartXfer+0x56>
      if (ep->type == EP_TYPE_BULK)
 800a092:	78e3      	ldrb	r3, [r4, #3]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d175      	bne.n	800a184 <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a098:	2900      	cmp	r1, #0
 800a09a:	d14b      	bne.n	800a134 <USB_EPStartXfer+0x354>
 800a09c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800a0a0:	7823      	ldrb	r3, [r4, #0]
 800a0a2:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800a0a6:	fa12 f181 	uxtah	r1, r2, r1
 800a0aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a0b2:	d922      	bls.n	800a0fa <USB_EPStartXfer+0x31a>
 800a0b4:	0958      	lsrs	r0, r3, #5
 800a0b6:	4a32      	ldr	r2, [pc, #200]	; (800a180 <USB_EPStartXfer+0x3a0>)
 800a0b8:	06df      	lsls	r7, r3, #27
 800a0ba:	bf08      	it	eq
 800a0bc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a0c0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	800a      	strh	r2, [r1, #0]
 800a0c8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a0cc:	7822      	ldrb	r2, [r4, #0]
 800a0ce:	f205 4006 	addw	r0, r5, #1030	; 0x406
 800a0d2:	fa10 f181 	uxtah	r1, r0, r1
 800a0d6:	2b3e      	cmp	r3, #62	; 0x3e
 800a0d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a0dc:	d820      	bhi.n	800a120 <USB_EPStartXfer+0x340>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d145      	bne.n	800a16e <USB_EPStartXfer+0x38e>
 800a0e2:	880b      	ldrh	r3, [r1, #0]
 800a0e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0e8:	041b      	lsls	r3, r3, #16
 800a0ea:	0c1b      	lsrs	r3, r3, #16
 800a0ec:	800b      	strh	r3, [r1, #0]
 800a0ee:	880b      	ldrh	r3, [r1, #0]
 800a0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f8:	e01a      	b.n	800a130 <USB_EPStartXfer+0x350>
 800a0fa:	b95b      	cbnz	r3, 800a114 <USB_EPStartXfer+0x334>
 800a0fc:	880a      	ldrh	r2, [r1, #0]
 800a0fe:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a102:	0412      	lsls	r2, r2, #16
 800a104:	0c12      	lsrs	r2, r2, #16
 800a106:	800a      	strh	r2, [r1, #0]
 800a108:	880a      	ldrh	r2, [r1, #0]
 800a10a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a10e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a112:	e7d7      	b.n	800a0c4 <USB_EPStartXfer+0x2e4>
 800a114:	085a      	lsrs	r2, r3, #1
 800a116:	07de      	lsls	r6, r3, #31
 800a118:	bf48      	it	mi
 800a11a:	3201      	addmi	r2, #1
 800a11c:	0292      	lsls	r2, r2, #10
 800a11e:	e7d1      	b.n	800a0c4 <USB_EPStartXfer+0x2e4>
 800a120:	095a      	lsrs	r2, r3, #5
 800a122:	06d8      	lsls	r0, r3, #27
 800a124:	4b16      	ldr	r3, [pc, #88]	; (800a180 <USB_EPStartXfer+0x3a0>)
 800a126:	bf08      	it	eq
 800a128:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a12c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a130:	b29b      	uxth	r3, r3
 800a132:	800b      	strh	r3, [r1, #0]
        if (ep->xfer_count != 0U)
 800a134:	69e3      	ldr	r3, [r4, #28]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d09f      	beq.n	800a07a <USB_EPStartXfer+0x29a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a13a:	7822      	ldrb	r2, [r4, #0]
 800a13c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a140:	f244 0340 	movw	r3, #16448	; 0x4040
 800a144:	ea03 0001 	and.w	r0, r3, r1
 800a148:	438b      	bics	r3, r1
 800a14a:	d001      	beq.n	800a150 <USB_EPStartXfer+0x370>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d194      	bne.n	800a07a <USB_EPStartXfer+0x29a>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a150:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15c:	041b      	lsls	r3, r3, #16
 800a15e:	0c1b      	lsrs	r3, r3, #16
 800a160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a168:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800a16c:	e785      	b.n	800a07a <USB_EPStartXfer+0x29a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a16e:	085a      	lsrs	r2, r3, #1
 800a170:	07db      	lsls	r3, r3, #31
 800a172:	bf48      	it	mi
 800a174:	3201      	addmi	r2, #1
 800a176:	0292      	lsls	r2, r2, #10
 800a178:	b292      	uxth	r2, r2
 800a17a:	800a      	strh	r2, [r1, #0]
 800a17c:	e7da      	b.n	800a134 <USB_EPStartXfer+0x354>
 800a17e:	bf00      	nop
 800a180:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 800a184:	2b01      	cmp	r3, #1
 800a186:	d144      	bne.n	800a212 <USB_EPStartXfer+0x432>
        if (ep->xfer_len > ep->maxpacket)
 800a188:	69a3      	ldr	r3, [r4, #24]
 800a18a:	6922      	ldr	r2, [r4, #16]
 800a18c:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 800a18e:	bf8a      	itet	hi
 800a190:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 800a192:	2000      	movls	r0, #0
 800a194:	4613      	movhi	r3, r2
 800a196:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a198:	2900      	cmp	r1, #0
 800a19a:	f47f af6e 	bne.w	800a07a <USB_EPStartXfer+0x29a>
 800a19e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800a1a2:	7822      	ldrb	r2, [r4, #0]
 800a1a4:	f205 4002 	addw	r0, r5, #1026	; 0x402
 800a1a8:	fa10 f181 	uxtah	r1, r0, r1
 800a1ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a1ae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a1b2:	d90a      	bls.n	800a1ca <USB_EPStartXfer+0x3ea>
 800a1b4:	0958      	lsrs	r0, r3, #5
 800a1b6:	4a18      	ldr	r2, [pc, #96]	; (800a218 <USB_EPStartXfer+0x438>)
 800a1b8:	06df      	lsls	r7, r3, #27
 800a1ba:	bf08      	it	eq
 800a1bc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a1c0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	800a      	strh	r2, [r1, #0]
 800a1c8:	e73b      	b.n	800a042 <USB_EPStartXfer+0x262>
 800a1ca:	b95b      	cbnz	r3, 800a1e4 <USB_EPStartXfer+0x404>
 800a1cc:	880a      	ldrh	r2, [r1, #0]
 800a1ce:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a1d2:	0412      	lsls	r2, r2, #16
 800a1d4:	0c12      	lsrs	r2, r2, #16
 800a1d6:	800a      	strh	r2, [r1, #0]
 800a1d8:	880a      	ldrh	r2, [r1, #0]
 800a1da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a1de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a1e2:	e7ef      	b.n	800a1c4 <USB_EPStartXfer+0x3e4>
 800a1e4:	085a      	lsrs	r2, r3, #1
 800a1e6:	07de      	lsls	r6, r3, #31
 800a1e8:	bf48      	it	mi
 800a1ea:	3201      	addmi	r2, #1
 800a1ec:	0292      	lsls	r2, r2, #10
 800a1ee:	e7e9      	b.n	800a1c4 <USB_EPStartXfer+0x3e4>
 800a1f0:	095a      	lsrs	r2, r3, #5
 800a1f2:	06d8      	lsls	r0, r3, #27
 800a1f4:	4b08      	ldr	r3, [pc, #32]	; (800a218 <USB_EPStartXfer+0x438>)
 800a1f6:	bf08      	it	eq
 800a1f8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a1fc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a200:	e739      	b.n	800a076 <USB_EPStartXfer+0x296>
 800a202:	085a      	lsrs	r2, r3, #1
 800a204:	07db      	lsls	r3, r3, #31
 800a206:	bf48      	it	mi
 800a208:	3201      	addmi	r2, #1
 800a20a:	0292      	lsls	r2, r2, #10
 800a20c:	b292      	uxth	r2, r2
 800a20e:	800a      	strh	r2, [r1, #0]
 800a210:	e733      	b.n	800a07a <USB_EPStartXfer+0x29a>
        return HAL_ERROR;
 800a212:	2001      	movs	r0, #1
 800a214:	e616      	b.n	8009e44 <USB_EPStartXfer+0x64>
 800a216:	bf00      	nop
 800a218:	ffff8000 	.word	0xffff8000

0800a21c <USB_ReadPMA>:
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a21c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 800a220:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a222:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a224:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 800a226:	460c      	mov	r4, r1
 800a228:	462e      	mov	r6, r5
 800a22a:	1a47      	subs	r7, r0, r1
 800a22c:	193a      	adds	r2, r7, r4
 800a22e:	3402      	adds	r4, #2
 800a230:	b936      	cbnz	r6, 800a240 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a232:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800a234:	bf44      	itt	mi
 800a236:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a23a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800a23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800a240:	8812      	ldrh	r2, [r2, #0]
 800a242:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a244:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a248:	0a12      	lsrs	r2, r2, #8
 800a24a:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (i = n; i != 0U; i--)
 800a24e:	3e01      	subs	r6, #1
 800a250:	e7ec      	b.n	800a22c <USB_ReadPMA+0x10>

0800a252 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a252:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a254:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a258:	b184      	cbz	r4, 800a27c <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a25a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a25e:	b15b      	cbz	r3, 800a278 <USBD_CDC_EP0_RxReady+0x26>
 800a260:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800a264:	28ff      	cmp	r0, #255	; 0xff
 800a266:	d007      	beq.n	800a278 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800a26e:	4621      	mov	r1, r4
 800a270:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a272:	23ff      	movs	r3, #255	; 0xff
 800a274:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a278:	2000      	movs	r0, #0
 800a27a:	e000      	b.n	800a27e <USBD_CDC_EP0_RxReady+0x2c>
    return (uint8_t)USBD_FAIL;
 800a27c:	2003      	movs	r0, #3
}
 800a27e:	bd10      	pop	{r4, pc}

0800a280 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a280:	2343      	movs	r3, #67	; 0x43
 800a282:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800a284:	4800      	ldr	r0, [pc, #0]	; (800a288 <USBD_CDC_GetFSCfgDesc+0x8>)
 800a286:	4770      	bx	lr
 800a288:	20000044 	.word	0x20000044

0800a28c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a28c:	2343      	movs	r3, #67	; 0x43
 800a28e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800a290:	4800      	ldr	r0, [pc, #0]	; (800a294 <USBD_CDC_GetHSCfgDesc+0x8>)
 800a292:	4770      	bx	lr
 800a294:	20000088 	.word	0x20000088

0800a298 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a298:	2343      	movs	r3, #67	; 0x43
 800a29a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a29c:	4800      	ldr	r0, [pc, #0]	; (800a2a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a29e:	4770      	bx	lr
 800a2a0:	200000d8 	.word	0x200000d8

0800a2a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2a4:	230a      	movs	r3, #10
 800a2a6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800a2a8:	4800      	ldr	r0, [pc, #0]	; (800a2ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a2aa:	4770      	bx	lr
 800a2ac:	200000cc 	.word	0x200000cc

0800a2b0 <USBD_CDC_DataOut>:
{
 800a2b0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2b2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 800a2b6:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 800a2b8:	b16c      	cbz	r4, 800a2d6 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2ba:	f001 f829 	bl	800b310 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2be:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2c2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800a2cc:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800a2d0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a2d2:	2000      	movs	r0, #0
}
 800a2d4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a2d6:	2003      	movs	r0, #3
 800a2d8:	e7fc      	b.n	800a2d4 <USBD_CDC_DataOut+0x24>

0800a2da <USBD_CDC_DataIn>:
{
 800a2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800a2dc:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
{
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800a2e4:	b336      	cbz	r6, 800a334 <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a2e6:	2314      	movs	r3, #20
 800a2e8:	fb03 0301 	mla	r3, r3, r1, r0
 800a2ec:	699c      	ldr	r4, [r3, #24]
 800a2ee:	b194      	cbz	r4, 800a316 <USBD_CDC_DataIn+0x3c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a2f0:	f8d0 72c4 	ldr.w	r7, [r0, #708]	; 0x2c4
 800a2f4:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800a2f8:	fb0c 7701 	mla	r7, ip, r1, r7
 800a2fc:	6bbf      	ldr	r7, [r7, #56]	; 0x38
 800a2fe:	fbb4 fcf7 	udiv	ip, r4, r7
 800a302:	fb07 441c 	mls	r4, r7, ip, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a306:	b934      	cbnz	r4, 800a316 <USBD_CDC_DataIn+0x3c>
    pdev->ep_in[epnum].total_length = 0U;
 800a308:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a30a:	4622      	mov	r2, r4
 800a30c:	4623      	mov	r3, r4
 800a30e:	f000 ffed 	bl	800b2ec <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800a312:	4620      	mov	r0, r4
 800a314:	e00d      	b.n	800a332 <USBD_CDC_DataIn+0x58>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a316:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
 800a31a:	691c      	ldr	r4, [r3, #16]
    hcdc->TxState = 0U;
 800a31c:	2700      	movs	r7, #0
 800a31e:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a322:	2c00      	cmp	r4, #0
 800a324:	d0f5      	beq.n	800a312 <USBD_CDC_DataIn+0x38>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a326:	f8d6 0208 	ldr.w	r0, [r6, #520]	; 0x208
 800a32a:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800a32e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800a330:	4638      	mov	r0, r7
}
 800a332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800a334:	2003      	movs	r0, #3
 800a336:	e7fc      	b.n	800a332 <USBD_CDC_DataIn+0x58>

0800a338 <USBD_CDC_Setup>:
{
 800a338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a33c:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800a340:	f04f 0800 	mov.w	r8, #0
{
 800a344:	4605      	mov	r5, r0
 800a346:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 800a348:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800a34c:	f8ad 8006 	strh.w	r8, [sp, #6]
  if (hcdc == NULL)
 800a350:	2f00      	cmp	r7, #0
 800a352:	d06a      	beq.n	800a42a <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a354:	780a      	ldrb	r2, [r1, #0]
 800a356:	f012 0460 	ands.w	r4, r2, #96	; 0x60
 800a35a:	d02b      	beq.n	800a3b4 <USBD_CDC_Setup+0x7c>
 800a35c:	2c20      	cmp	r4, #32
 800a35e:	d160      	bne.n	800a422 <USBD_CDC_Setup+0xea>
      if (req->wLength != 0U)
 800a360:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a362:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength != 0U)
 800a364:	b1fc      	cbz	r4, 800a3a6 <USBD_CDC_Setup+0x6e>
        if ((req->bmRequest & 0x80U) != 0U)
 800a366:	0612      	lsls	r2, r2, #24
 800a368:	d514      	bpl.n	800a394 <USBD_CDC_Setup+0x5c>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a36a:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800a36e:	4639      	mov	r1, r7
 800a370:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800a374:	4618      	mov	r0, r3
 800a376:	4622      	mov	r2, r4
 800a378:	47c8      	blx	r9
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a37a:	88f2      	ldrh	r2, [r6, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a37c:	2a07      	cmp	r2, #7
 800a37e:	bf28      	it	cs
 800a380:	2207      	movcs	r2, #7
 800a382:	4639      	mov	r1, r7
 800a384:	4628      	mov	r0, r5
 800a386:	f000 fc91 	bl	800acac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a38a:	4644      	mov	r4, r8
}
 800a38c:	4620      	mov	r0, r4
 800a38e:	b003      	add	sp, #12
 800a390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800a394:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a398:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a39c:	4622      	mov	r2, r4
 800a39e:	4639      	mov	r1, r7
 800a3a0:	f000 fc99 	bl	800acd6 <USBD_CtlPrepareRx>
 800a3a4:	e7f1      	b.n	800a38a <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3a6:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	6895      	ldr	r5, [r2, #8]
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	47a8      	blx	r5
 800a3b2:	e7eb      	b.n	800a38c <USBD_CDC_Setup+0x54>
      switch (req->bRequest)
 800a3b4:	784f      	ldrb	r7, [r1, #1]
 800a3b6:	2f0b      	cmp	r7, #11
 800a3b8:	d833      	bhi.n	800a422 <USBD_CDC_Setup+0xea>
 800a3ba:	a301      	add	r3, pc, #4	; (adr r3, 800a3c0 <USBD_CDC_Setup+0x88>)
 800a3bc:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800a3c0:	0800a3f1 	.word	0x0800a3f1
 800a3c4:	0800a38d 	.word	0x0800a38d
 800a3c8:	0800a423 	.word	0x0800a423
 800a3cc:	0800a423 	.word	0x0800a423
 800a3d0:	0800a423 	.word	0x0800a423
 800a3d4:	0800a423 	.word	0x0800a423
 800a3d8:	0800a423 	.word	0x0800a423
 800a3dc:	0800a423 	.word	0x0800a423
 800a3e0:	0800a423 	.word	0x0800a423
 800a3e4:	0800a423 	.word	0x0800a423
 800a3e8:	0800a407 	.word	0x0800a407
 800a3ec:	0800a41b 	.word	0x0800a41b
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d114      	bne.n	800a422 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	f10d 0106 	add.w	r1, sp, #6
 800a3fe:	f000 fc55 	bl	800acac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a402:	463c      	mov	r4, r7
 800a404:	e7c2      	b.n	800a38c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a406:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d109      	bne.n	800a422 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a40e:	2201      	movs	r2, #1
 800a410:	f10d 0105 	add.w	r1, sp, #5
 800a414:	f000 fc4a 	bl	800acac <USBD_CtlSendData>
 800a418:	e7b8      	b.n	800a38c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a41a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d0b4      	beq.n	800a38c <USBD_CDC_Setup+0x54>
          USBD_CtlError(pdev, req);
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	f000 fc1a 	bl	800ac5e <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800a42a:	2403      	movs	r4, #3
 800a42c:	e7ae      	b.n	800a38c <USBD_CDC_Setup+0x54>
 800a42e:	bf00      	nop

0800a430 <USBD_CDC_DeInit>:
{
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a434:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a436:	2181      	movs	r1, #129	; 0x81
 800a438:	f000 ff21 	bl	800b27e <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a43c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a43e:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a440:	4620      	mov	r0, r4
 800a442:	f000 ff1c 	bl	800b27e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a446:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a44a:	2182      	movs	r1, #130	; 0x82
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 ff16 	bl	800b27e <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800a452:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a456:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800a458:	b14b      	cbz	r3, 800a46e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a45a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a462:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800a466:	f000 ff7f 	bl	800b368 <USBD_static_free>
    pdev->pClassData = NULL;
 800a46a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800a46e:	2000      	movs	r0, #0
 800a470:	bd38      	pop	{r3, r4, r5, pc}

0800a472 <USBD_CDC_Init>:
{
 800a472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a474:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a476:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a47a:	f000 ff71 	bl	800b360 <USBD_static_malloc>
  if (hcdc == NULL)
 800a47e:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 800a480:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 800a484:	b910      	cbnz	r0, 800a48c <USBD_CDC_Init+0x1a>
    return (uint8_t)USBD_EMEM;
 800a486:	2602      	movs	r6, #2
}
 800a488:	4630      	mov	r0, r6
 800a48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a48c:	7c23      	ldrb	r3, [r4, #16]
 800a48e:	bb8b      	cbnz	r3, 800a4f4 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a490:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a494:	2202      	movs	r2, #2
 800a496:	2181      	movs	r1, #129	; 0x81
 800a498:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a49a:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a49c:	f000 fee3 	bl	800b266 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4a0:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4a2:	f44f 7300 	mov.w	r3, #512	; 0x200
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 fedb 	bl	800b266 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a4b0:	2310      	movs	r3, #16
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4b2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a4b6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	2308      	movs	r3, #8
 800a4be:	2182      	movs	r1, #130	; 0x82
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fed0 	bl	800b266 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a4c6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800a4d0:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4798      	blx	r3
  hcdc->TxState = 0U;
 800a4d6:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800a4da:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4de:	7c26      	ldrb	r6, [r4, #16]
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	b98e      	cbnz	r6, 800a508 <USBD_CDC_Init+0x96>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4e4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800a4e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 ff06 	bl	800b2fe <USBD_LL_PrepareReceive>
 800a4f2:	e7c9      	b.n	800a488 <USBD_CDC_Init+0x16>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a4f4:	2340      	movs	r3, #64	; 0x40
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	2181      	movs	r1, #129	; 0x81
 800a4fa:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4fc:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a4fe:	f000 feb2 	bl	800b266 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a502:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a504:	2340      	movs	r3, #64	; 0x40
 800a506:	e7ce      	b.n	800a4a6 <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a508:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 fef5 	bl	800b2fe <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a514:	463e      	mov	r6, r7
 800a516:	e7b7      	b.n	800a488 <USBD_CDC_Init+0x16>

0800a518 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800a518:	b119      	cbz	r1, 800a522 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800a51a:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a51e:	2000      	movs	r0, #0
 800a520:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a522:	2003      	movs	r0, #3
}
 800a524:	4770      	bx	lr

0800a526 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a526:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a52a:	b12b      	cbz	r3, 800a538 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800a52c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a530:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a534:	2000      	movs	r0, #0
 800a536:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a538:	2003      	movs	r0, #3
}
 800a53a:	4770      	bx	lr

0800a53c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a53c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a540:	b11b      	cbz	r3, 800a54a <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800a542:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a546:	2000      	movs	r0, #0
 800a548:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a54a:	2003      	movs	r0, #3
}
 800a54c:	4770      	bx	lr

0800a54e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a54e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800a552:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800a554:	b17a      	cbz	r2, 800a576 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800a556:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800a55a:	2301      	movs	r3, #1
 800a55c:	b96c      	cbnz	r4, 800a57a <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a55e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a562:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800a566:	62c3      	str	r3, [r0, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a568:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800a56c:	2181      	movs	r1, #129	; 0x81
 800a56e:	f000 febd 	bl	800b2ec <USBD_LL_Transmit>

    ret = USBD_OK;
 800a572:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800a574:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800a576:	2003      	movs	r0, #3
 800a578:	e7fc      	b.n	800a574 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a57a:	4618      	mov	r0, r3
 800a57c:	e7fa      	b.n	800a574 <USBD_CDC_TransmitPacket+0x26>

0800a57e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a57e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800a582:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800a584:	b182      	cbz	r2, 800a5a8 <USBD_CDC_ReceivePacket+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a586:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a588:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a58c:	b934      	cbnz	r4, 800a59c <USBD_CDC_ReceivePacket+0x1e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a58e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a592:	2101      	movs	r1, #1
 800a594:	f000 feb3 	bl	800b2fe <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800a598:	4620      	mov	r0, r4
 800a59a:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a59c:	2340      	movs	r3, #64	; 0x40
 800a59e:	2101      	movs	r1, #1
 800a5a0:	f000 fead 	bl	800b2fe <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a5a4:	2400      	movs	r4, #0
 800a5a6:	e7f7      	b.n	800a598 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800a5a8:	2403      	movs	r4, #3
 800a5aa:	e7f5      	b.n	800a598 <USBD_CDC_ReceivePacket+0x1a>

0800a5ac <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5ac:	b178      	cbz	r0, 800a5ce <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a5b4:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a5b8:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5bc:	b109      	cbz	r1, 800a5c2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800a5be:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800a5c8:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5ca:	f000 bdff 	b.w	800b1cc <USBD_LL_Init>

  return ret;
}
 800a5ce:	2003      	movs	r0, #3
 800a5d0:	4770      	bx	lr

0800a5d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 800a5d4:	2500      	movs	r5, #0
{
 800a5d6:	4604      	mov	r4, r0
  uint16_t len = 0U;
 800a5d8:	f8ad 5006 	strh.w	r5, [sp, #6]

  if (pclass == NULL)
 800a5dc:	b159      	cbz	r1, 800a5f6 <USBD_RegisterClass+0x24>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a5de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 800a5e0:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a5e4:	b14b      	cbz	r3, 800a5fa <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a5e6:	f10d 0006 	add.w	r0, sp, #6
 800a5ea:	4798      	blx	r3
 800a5ec:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a5f0:	4628      	mov	r0, r5
}
 800a5f2:	b003      	add	sp, #12
 800a5f4:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800a5f6:	2003      	movs	r0, #3
 800a5f8:	e7fb      	b.n	800a5f2 <USBD_RegisterClass+0x20>
  return USBD_OK;
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	e7f9      	b.n	800a5f2 <USBD_RegisterClass+0x20>

0800a5fe <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5fe:	f000 be29 	b.w	800b254 <USBD_LL_Start>

0800a602 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800a602:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a606:	b10b      	cbz	r3, 800a60c <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4718      	bx	r3
  }

  return ret;
}
 800a60c:	2003      	movs	r0, #3
 800a60e:	4770      	bx	lr

0800a610 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a610:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a612:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a616:	b10b      	cbz	r3, 800a61c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a61c:	2000      	movs	r0, #0
 800a61e:	bd08      	pop	{r3, pc}

0800a620 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a624:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 fb0d 	bl	800ac48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a62e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800a630:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800a634:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800a638:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800a63c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800a640:	f001 031f 	and.w	r3, r1, #31
 800a644:	2b01      	cmp	r3, #1
 800a646:	d008      	beq.n	800a65a <USBD_LL_SetupStage+0x3a>
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d00c      	beq.n	800a666 <USBD_LL_SetupStage+0x46>
 800a64c:	b98b      	cbnz	r3, 800a672 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a64e:	4629      	mov	r1, r5
 800a650:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800a652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a656:	f000 b8f5 	b.w	800a844 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a65a:	4629      	mov	r1, r5
 800a65c:	4620      	mov	r0, r4
}
 800a65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a662:	f000 ba3b 	b.w	800aadc <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a666:	4629      	mov	r1, r5
 800a668:	4620      	mov	r0, r4
}
 800a66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a66e:	f000 ba5b 	b.w	800ab28 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a672:	4620      	mov	r0, r4
 800a674:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800a678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a67c:	f000 be08 	b.w	800b290 <USBD_LL_StallEP>

0800a680 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	4604      	mov	r4, r0
 800a684:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a686:	b9f9      	cbnz	r1, 800a6c8 <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a688:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d10c      	bne.n	800a6aa <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 800a690:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 800a694:	4293      	cmp	r3, r2
 800a696:	d90a      	bls.n	800a6ae <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 800a698:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a69a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800a69c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6a0:	bf28      	it	cs
 800a6a2:	461a      	movcs	r2, r3
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f000 fb23 	bl	800acf0 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d104      	bne.n	800a6c0 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 800a6b6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	b103      	cbz	r3, 800a6c0 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 800a6be:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f000 fb1d 	bl	800ad00 <USBD_CtlSendStatus>
 800a6c6:	e7f0      	b.n	800a6aa <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d1ec      	bne.n	800a6aa <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 800a6d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0e7      	beq.n	800a6aa <USBD_LL_DataOutStage+0x2a>
}
 800a6da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a6de:	4718      	bx	r3

0800a6e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	d13f      	bne.n	800a76a <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6ea:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800a6ee:	2a02      	cmp	r2, #2
 800a6f0:	d10f      	bne.n	800a712 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6f2:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 800a6f6:	4295      	cmp	r5, r2
 800a6f8:	d915      	bls.n	800a726 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800a6fa:	1aaa      	subs	r2, r5, r2
 800a6fc:	9101      	str	r1, [sp, #4]
 800a6fe:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a700:	4631      	mov	r1, r6
 800a702:	f000 fae0 	bl	800acc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a706:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a708:	461a      	mov	r2, r3
 800a70a:	4619      	mov	r1, r3
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 fdf6 	bl	800b2fe <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a712:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800a716:	2b01      	cmp	r3, #1
 800a718:	d102      	bne.n	800a720 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800a720:	2000      	movs	r0, #0
 800a722:	b002      	add	sp, #8
 800a724:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800a726:	d10e      	bne.n	800a746 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800a728:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a72a:	4295      	cmp	r5, r2
 800a72c:	d80b      	bhi.n	800a746 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800a72e:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 800a732:	42aa      	cmp	r2, r5
 800a734:	d207      	bcs.n	800a746 <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a736:	460a      	mov	r2, r1
 800a738:	9101      	str	r1, [sp, #4]
 800a73a:	f000 fac4 	bl	800acc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800a744:	e7e0      	b.n	800a708 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a746:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d105      	bne.n	800a75a <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 800a74e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	b10b      	cbz	r3, 800a75a <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 800a756:	4620      	mov	r0, r4
 800a758:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a75a:	2180      	movs	r1, #128	; 0x80
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 fd97 	bl	800b290 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a762:	4620      	mov	r0, r4
 800a764:	f000 fad7 	bl	800ad16 <USBD_CtlReceiveStatus>
 800a768:	e7d3      	b.n	800a712 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a76a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d1d6      	bne.n	800a720 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 800a772:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d0d1      	beq.n	800a720 <USBD_LL_DataInStage+0x40>
}
 800a77c:	b002      	add	sp, #8
 800a77e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a782:	4718      	bx	r3

0800a784 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a784:	2301      	movs	r3, #1
{
 800a786:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a788:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800a78c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800a790:	2100      	movs	r1, #0
{
 800a792:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 800a794:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800a798:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a79a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800a79e:	b1db      	cbz	r3, 800a7d8 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800a7a0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800a7a4:	b112      	cbz	r2, 800a7ac <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	b103      	cbz	r3, 800a7ac <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7aa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7b0:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7b2:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7b4:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fd55 	bl	800b266 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7bc:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7c0:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7c4:	462b      	mov	r3, r5
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	2180      	movs	r1, #128	; 0x80
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fd4b 	bl	800b266 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7d0:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7d2:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800a7d4:	2000      	movs	r0, #0
}
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800a7d8:	2003      	movs	r0, #3
 800a7da:	e7fc      	b.n	800a7d6 <USBD_LL_Reset+0x52>

0800a7dc <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a7dc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a7de:	2000      	movs	r0, #0
 800a7e0:	4770      	bx	lr

0800a7e2 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800a7e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7ec:	2304      	movs	r3, #4
 800a7ee:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	4770      	bx	lr

0800a7f6 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7fa:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7fc:	bf02      	ittt	eq
 800a7fe:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800a802:	b2db      	uxtbeq	r3, r3
 800a804:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800a808:	2000      	movs	r0, #0
 800a80a:	4770      	bx	lr

0800a80c <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800a80c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800a810:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 800a812:	b142      	cbz	r2, 800a826 <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a814:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d102      	bne.n	800a822 <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 800a81c:	69d3      	ldr	r3, [r2, #28]
 800a81e:	b123      	cbz	r3, 800a82a <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 800a820:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a822:	2000      	movs	r0, #0
 800a824:	e000      	b.n	800a828 <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 800a826:	2003      	movs	r0, #3
}
 800a828:	bd08      	pop	{r3, pc}
  return USBD_OK;
 800a82a:	4618      	mov	r0, r3
 800a82c:	e7fc      	b.n	800a828 <USBD_LL_SOF+0x1c>

0800a82e <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800a82e:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a830:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800a832:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a834:	f000 fd2c 	bl	800b290 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a838:	4620      	mov	r0, r4
 800a83a:	2100      	movs	r1, #0
}
 800a83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800a840:	f000 bd26 	b.w	800b290 <USBD_LL_StallEP>

0800a844 <USBD_StdDevReq>:
{
 800a844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a846:	780d      	ldrb	r5, [r1, #0]
 800a848:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a84c:	2d20      	cmp	r5, #32
{
 800a84e:	4604      	mov	r4, r0
 800a850:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a852:	d014      	beq.n	800a87e <USBD_StdDevReq+0x3a>
 800a854:	2d40      	cmp	r5, #64	; 0x40
 800a856:	d012      	beq.n	800a87e <USBD_StdDevReq+0x3a>
 800a858:	2d00      	cmp	r5, #0
 800a85a:	f040 8109 	bne.w	800aa70 <USBD_StdDevReq+0x22c>
      switch (req->bRequest)
 800a85e:	784f      	ldrb	r7, [r1, #1]
 800a860:	2f09      	cmp	r7, #9
 800a862:	f200 8105 	bhi.w	800aa70 <USBD_StdDevReq+0x22c>
 800a866:	e8df f017 	tbh	[pc, r7, lsl #1]
 800a86a:	010a      	.short	0x010a
 800a86c:	0103012c 	.word	0x0103012c
 800a870:	01030122 	.word	0x01030122
 800a874:	0013008a 	.word	0x0013008a
 800a878:	00f20103 	.word	0x00f20103
 800a87c:	00a6      	.short	0x00a6
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a87e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	4631      	mov	r1, r6
 800a886:	4620      	mov	r0, r4
}
 800a888:	b003      	add	sp, #12
 800a88a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a88e:	4718      	bx	r3
  uint16_t len = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a896:	884b      	ldrh	r3, [r1, #2]
 800a898:	0a1a      	lsrs	r2, r3, #8
 800a89a:	3a01      	subs	r2, #1
 800a89c:	2a0e      	cmp	r2, #14
 800a89e:	d80d      	bhi.n	800a8bc <USBD_StdDevReq+0x78>
 800a8a0:	e8df f002 	tbb	[pc, r2]
 800a8a4:	0c382b12 	.word	0x0c382b12
 800a8a8:	0c62580c 	.word	0x0c62580c
 800a8ac:	0c0c0c0c 	.word	0x0c0c0c0c
 800a8b0:	0c0c      	.short	0x0c0c
 800a8b2:	08          	.byte	0x08
 800a8b3:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a8b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a8b8:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8ba:	b943      	cbnz	r3, 800a8ce <USBD_StdDevReq+0x8a>
      USBD_CtlError(pdev, req);
 800a8bc:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 800a8be:	f7ff ffb6 	bl	800a82e <USBD_CtlError.constprop.0>
}
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	b003      	add	sp, #12
 800a8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	7c20      	ldrb	r0, [r4, #16]
 800a8d0:	f10d 0106 	add.w	r1, sp, #6
 800a8d4:	4798      	blx	r3
  if (req->wLength != 0U)
 800a8d6:	88f2      	ldrh	r2, [r6, #6]
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	f000 80ee 	beq.w	800aaba <USBD_StdDevReq+0x276>
    if (len != 0U)
 800a8de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ea      	beq.n	800a8bc <USBD_StdDevReq+0x78>
      len = MIN(len, req->wLength);
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	bf28      	it	cs
 800a8ea:	461a      	movcs	r2, r3
 800a8ec:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8f0:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 f9da 	bl	800acac <USBD_CtlSendData>
        break;
 800a8f8:	e7e3      	b.n	800a8c2 <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8fa:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a900:	b932      	cbnz	r2, 800a910 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a904:	f10d 0006 	add.w	r0, sp, #6
 800a908:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a90a:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a90c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a90e:	e7e2      	b.n	800a8d6 <USBD_StdDevReq+0x92>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	e7f7      	b.n	800a904 <USBD_StdDevReq+0xc0>
      switch ((uint8_t)(req->wValue))
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b05      	cmp	r3, #5
 800a918:	d8d0      	bhi.n	800a8bc <USBD_StdDevReq+0x78>
 800a91a:	e8df f003 	tbb	[pc, r3]
 800a91e:	0703      	.short	0x0703
 800a920:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a924:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	e7c6      	b.n	800a8ba <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a92c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	e7c2      	b.n	800a8ba <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a934:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	e7be      	b.n	800a8ba <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a93c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	e7ba      	b.n	800a8ba <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a944:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	e7b6      	b.n	800a8ba <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a94c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	e7b2      	b.n	800a8ba <USBD_StdDevReq+0x76>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a954:	7c03      	ldrb	r3, [r0, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1b0      	bne.n	800a8bc <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a95a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a95e:	f10d 0006 	add.w	r0, sp, #6
 800a962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a964:	4798      	blx	r3
  if (err != 0U)
 800a966:	e7b6      	b.n	800a8d6 <USBD_StdDevReq+0x92>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a968:	7c03      	ldrb	r3, [r0, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1a6      	bne.n	800a8bc <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a96e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a972:	f10d 0006 	add.w	r0, sp, #6
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a97a:	2307      	movs	r3, #7
 800a97c:	e7c6      	b.n	800a90c <USBD_StdDevReq+0xc8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a97e:	888b      	ldrh	r3, [r1, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d19b      	bne.n	800a8bc <USBD_StdDevReq+0x78>
 800a984:	88cb      	ldrh	r3, [r1, #6]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d198      	bne.n	800a8bc <USBD_StdDevReq+0x78>
 800a98a:	884e      	ldrh	r6, [r1, #2]
 800a98c:	2e7f      	cmp	r6, #127	; 0x7f
 800a98e:	d895      	bhi.n	800a8bc <USBD_StdDevReq+0x78>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a990:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a994:	2b03      	cmp	r3, #3
 800a996:	d091      	beq.n	800a8bc <USBD_StdDevReq+0x78>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a998:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800a99a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a99e:	f000 fc9c 	bl	800b2da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f9ac 	bl	800ad00 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a9a8:	b11e      	cbz	r6, 800a9b2 <USBD_StdDevReq+0x16e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9aa:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9ac:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a9b0:	e787      	b.n	800a8c2 <USBD_StdDevReq+0x7e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e7fa      	b.n	800a9ac <USBD_StdDevReq+0x168>
  cfgidx = (uint8_t)(req->wValue);
 800a9b6:	788e      	ldrb	r6, [r1, #2]
 800a9b8:	4f47      	ldr	r7, [pc, #284]	; (800aad8 <USBD_StdDevReq+0x294>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9ba:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 800a9bc:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9be:	d903      	bls.n	800a9c8 <USBD_StdDevReq+0x184>
    USBD_CtlError(pdev, req);
 800a9c0:	f7ff ff35 	bl	800a82e <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 800a9c4:	2503      	movs	r5, #3
      break;
 800a9c6:	e77c      	b.n	800a8c2 <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 800a9c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	d008      	beq.n	800a9e4 <USBD_StdDevReq+0x1a0>
 800a9d2:	2a03      	cmp	r2, #3
 800a9d4:	d015      	beq.n	800aa02 <USBD_StdDevReq+0x1be>
      USBD_CtlError(pdev, req);
 800a9d6:	f7ff ff2a 	bl	800a82e <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9da:	7839      	ldrb	r1, [r7, #0]
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f7ff fe17 	bl	800a610 <USBD_ClrClassConfig>
 800a9e2:	e7ef      	b.n	800a9c4 <USBD_StdDevReq+0x180>
      if (cfgidx != 0U)
 800a9e4:	2e00      	cmp	r6, #0
 800a9e6:	d068      	beq.n	800aaba <USBD_StdDevReq+0x276>
        pdev->dev_config = cfgidx;
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9ec:	f7ff fe09 	bl	800a602 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	f47f af62 	bne.w	800a8be <USBD_StdDevReq+0x7a>
          (void)USBD_CtlSendStatus(pdev);
 800a9fa:	f000 f981 	bl	800ad00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e7d4      	b.n	800a9ac <USBD_StdDevReq+0x168>
      if (cfgidx == 0U)
 800aa02:	b95e      	cbnz	r6, 800aa1c <USBD_StdDevReq+0x1d8>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa04:	2302      	movs	r3, #2
 800aa06:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa0a:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	f7ff fdff 	bl	800a610 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 f974 	bl	800ad00 <USBD_CtlSendStatus>
 800aa18:	4635      	mov	r5, r6
 800aa1a:	e752      	b.n	800a8c2 <USBD_StdDevReq+0x7e>
      else if (cfgidx != pdev->dev_config)
 800aa1c:	6841      	ldr	r1, [r0, #4]
 800aa1e:	2901      	cmp	r1, #1
 800aa20:	d04b      	beq.n	800aaba <USBD_StdDevReq+0x276>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa22:	b2c9      	uxtb	r1, r1
 800aa24:	f7ff fdf4 	bl	800a610 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa28:	7839      	ldrb	r1, [r7, #0]
 800aa2a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f7ff fde8 	bl	800a602 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800aa32:	4606      	mov	r6, r0
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d040      	beq.n	800aaba <USBD_StdDevReq+0x276>
          USBD_CtlError(pdev, req);
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f7ff fef8 	bl	800a82e <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa3e:	7921      	ldrb	r1, [r4, #4]
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7ff fde5 	bl	800a610 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa46:	2302      	movs	r3, #2
 800aa48:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800aa4c:	e7e4      	b.n	800aa18 <USBD_StdDevReq+0x1d4>
  if (req->wLength != 1U)
 800aa4e:	88ca      	ldrh	r2, [r1, #6]
 800aa50:	2a01      	cmp	r2, #1
 800aa52:	f47f af33 	bne.w	800a8bc <USBD_StdDevReq+0x78>
    switch (pdev->dev_state)
 800aa56:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800aa5a:	2902      	cmp	r1, #2
 800aa5c:	b2cb      	uxtb	r3, r1
 800aa5e:	d805      	bhi.n	800aa6c <USBD_StdDevReq+0x228>
 800aa60:	b133      	cbz	r3, 800aa70 <USBD_StdDevReq+0x22c>
        pdev->dev_default_config = 0U;
 800aa62:	4601      	mov	r1, r0
 800aa64:	2300      	movs	r3, #0
 800aa66:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa6a:	e742      	b.n	800a8f2 <USBD_StdDevReq+0xae>
    switch (pdev->dev_state)
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d004      	beq.n	800aa7a <USBD_StdDevReq+0x236>
        USBD_CtlError(pdev, req);
 800aa70:	4620      	mov	r0, r4
 800aa72:	f7ff fedc 	bl	800a82e <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa76:	2500      	movs	r5, #0
        break;
 800aa78:	e723      	b.n	800a8c2 <USBD_StdDevReq+0x7e>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa7a:	1d01      	adds	r1, r0, #4
 800aa7c:	e739      	b.n	800a8f2 <USBD_StdDevReq+0xae>
  switch (pdev->dev_state)
 800aa7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aa82:	3b01      	subs	r3, #1
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d8f3      	bhi.n	800aa70 <USBD_StdDevReq+0x22c>
      if (req->wLength != 0x2U)
 800aa88:	88cb      	ldrh	r3, [r1, #6]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	f47f af16 	bne.w	800a8bc <USBD_StdDevReq+0x78>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa90:	2301      	movs	r3, #1
 800aa92:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800aa94:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800aa98:	b10b      	cbz	r3, 800aa9e <USBD_StdDevReq+0x25a>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f104 010c 	add.w	r1, r4, #12
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 f901 	bl	800acac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800aaaa:	463d      	mov	r5, r7
      break;
 800aaac:	e709      	b.n	800a8c2 <USBD_StdDevReq+0x7e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aaae:	884b      	ldrh	r3, [r1, #2]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	f47f af06 	bne.w	800a8c2 <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 800aab6:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 f920 	bl	800ad00 <USBD_CtlSendStatus>
 800aac0:	e6ff      	b.n	800a8c2 <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 800aac2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aac6:	3b01      	subs	r3, #1
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d8d1      	bhi.n	800aa70 <USBD_StdDevReq+0x22c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aacc:	884b      	ldrh	r3, [r1, #2]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	f47f aef7 	bne.w	800a8c2 <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 800aad4:	2300      	movs	r3, #0
 800aad6:	e7ee      	b.n	800aab6 <USBD_StdDevReq+0x272>
 800aad8:	20000f3c 	.word	0x20000f3c

0800aadc <USBD_StdItfReq>:
{
 800aadc:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aade:	780b      	ldrb	r3, [r1, #0]
 800aae0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800aae4:	2a40      	cmp	r2, #64	; 0x40
{
 800aae6:	4604      	mov	r4, r0
 800aae8:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaea:	d001      	beq.n	800aaf0 <USBD_StdItfReq+0x14>
 800aaec:	065b      	lsls	r3, r3, #25
 800aaee:	d416      	bmi.n	800ab1e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 800aaf0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d811      	bhi.n	800ab1e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aafa:	7933      	ldrb	r3, [r6, #4]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d80e      	bhi.n	800ab1e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab00:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ab04:	4631      	mov	r1, r6
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	4620      	mov	r0, r4
 800ab0a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab0c:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab0e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab10:	b91b      	cbnz	r3, 800ab1a <USBD_StdItfReq+0x3e>
 800ab12:	b910      	cbnz	r0, 800ab1a <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 f8f3 	bl	800ad00 <USBD_CtlSendStatus>
}
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7ff fe85 	bl	800a82e <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab24:	2500      	movs	r5, #0
          break;
 800ab26:	e7f8      	b.n	800ab1a <USBD_StdItfReq+0x3e>

0800ab28 <USBD_StdEPReq>:
{
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	780b      	ldrb	r3, [r1, #0]
 800ab2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab30:	2b20      	cmp	r3, #32
{
 800ab32:	4604      	mov	r4, r0
 800ab34:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab36:	d053      	beq.n	800abe0 <USBD_StdEPReq+0xb8>
 800ab38:	2b40      	cmp	r3, #64	; 0x40
 800ab3a:	d051      	beq.n	800abe0 <USBD_StdEPReq+0xb8>
 800ab3c:	bb73      	cbnz	r3, 800ab9c <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 800ab3e:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800ab40:	888a      	ldrh	r2, [r1, #4]
 800ab42:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d03a      	beq.n	800abbe <USBD_StdEPReq+0x96>
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d020      	beq.n	800ab8e <USBD_StdEPReq+0x66>
 800ab4c:	bb33      	cbnz	r3, 800ab9c <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 800ab4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	b2d8      	uxtb	r0, r3
 800ab56:	d054      	beq.n	800ac02 <USBD_StdEPReq+0xda>
 800ab58:	2803      	cmp	r0, #3
 800ab5a:	d11f      	bne.n	800ab9c <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab5c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800ab60:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ab64:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab68:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 800ab6c:	d058      	beq.n	800ac20 <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab70:	b1a3      	cbz	r3, 800ab9c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab72:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800ab76:	3501      	adds	r5, #1
 800ab78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ab7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab80:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800ab84:	d158      	bne.n	800ac38 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 800ab86:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab88:	2202      	movs	r2, #2
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	e044      	b.n	800ac18 <USBD_StdEPReq+0xf0>
          switch (pdev->dev_state)
 800ab8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	d02b      	beq.n	800abf0 <USBD_StdEPReq+0xc8>
 800ab98:	2a03      	cmp	r2, #3
 800ab9a:	d003      	beq.n	800aba4 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7ff fe46 	bl	800a82e <USBD_CtlError.constprop.0>
              break;
 800aba2:	e00a      	b.n	800abba <USBD_StdEPReq+0x92>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aba4:	886b      	ldrh	r3, [r5, #2]
 800aba6:	b92b      	cbnz	r3, 800abb4 <USBD_StdEPReq+0x8c>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aba8:	064a      	lsls	r2, r1, #25
 800abaa:	d003      	beq.n	800abb4 <USBD_StdEPReq+0x8c>
 800abac:	88eb      	ldrh	r3, [r5, #6]
 800abae:	b90b      	cbnz	r3, 800abb4 <USBD_StdEPReq+0x8c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800abb0:	f000 fb6e 	bl	800b290 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 f8a3 	bl	800ad00 <USBD_CtlSendStatus>
}
 800abba:	2000      	movs	r0, #0
 800abbc:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800abbe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	d013      	beq.n	800abf0 <USBD_StdEPReq+0xc8>
 800abc8:	2a03      	cmp	r2, #3
 800abca:	d1e7      	bne.n	800ab9c <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abcc:	886b      	ldrh	r3, [r5, #2]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f3      	bne.n	800abba <USBD_StdEPReq+0x92>
                if ((ep_addr & 0x7FU) != 0x00U)
 800abd2:	064e      	lsls	r6, r1, #25
 800abd4:	d001      	beq.n	800abda <USBD_StdEPReq+0xb2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abd6:	f000 fb64 	bl	800b2a2 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 800abda:	4620      	mov	r0, r4
 800abdc:	f000 f890 	bl	800ad00 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abe0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800abe4:	4629      	mov	r1, r5
 800abe6:	4620      	mov	r0, r4
 800abe8:	689b      	ldr	r3, [r3, #8]
}
 800abea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abee:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abf0:	064b      	lsls	r3, r1, #25
 800abf2:	d0d3      	beq.n	800ab9c <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abf4:	f000 fb4c 	bl	800b290 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abf8:	2180      	movs	r1, #128	; 0x80
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fb48 	bl	800b290 <USBD_LL_StallEP>
 800ac00:	e7db      	b.n	800abba <USBD_StdEPReq+0x92>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac02:	0649      	lsls	r1, r1, #25
 800ac04:	d1ca      	bne.n	800ab9c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac06:	0613      	lsls	r3, r2, #24
 800ac08:	bf4c      	ite	mi
 800ac0a:	f104 0114 	addmi.w	r1, r4, #20
 800ac0e:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac16:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f000 f847 	bl	800acac <USBD_CtlSendData>
              break;
 800ac1e:	e7cc      	b.n	800abba <USBD_StdEPReq+0x92>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac20:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d0b9      	beq.n	800ab9c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac28:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800ac2c:	2314      	movs	r3, #20
 800ac2e:	fb03 4505 	mla	r5, r3, r5, r4
 800ac32:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800ac36:	e7a3      	b.n	800ab80 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fb3b 	bl	800b2b4 <USBD_LL_IsStallEP>
 800ac3e:	b108      	cbz	r0, 800ac44 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e7a0      	b.n	800ab86 <USBD_StdEPReq+0x5e>
                pep->status = 0x0000U;
 800ac44:	6028      	str	r0, [r5, #0]
 800ac46:	e79f      	b.n	800ab88 <USBD_StdEPReq+0x60>

0800ac48 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800ac48:	780b      	ldrb	r3, [r1, #0]
 800ac4a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac4c:	784b      	ldrb	r3, [r1, #1]
 800ac4e:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800ac50:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800ac52:	8043      	strh	r3, [r0, #2]
 800ac54:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800ac56:	8083      	strh	r3, [r0, #4]
 800ac58:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800ac5a:	80c3      	strh	r3, [r0, #6]
}
 800ac5c:	4770      	bx	lr

0800ac5e <USBD_CtlError>:
{
 800ac5e:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac60:	2180      	movs	r1, #128	; 0x80
{
 800ac62:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac64:	f000 fb14 	bl	800b290 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac68:	4620      	mov	r0, r4
 800ac6a:	2100      	movs	r1, #0
}
 800ac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac70:	f000 bb0e 	b.w	800b290 <USBD_LL_StallEP>

0800ac74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac74:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800ac76:	b188      	cbz	r0, 800ac9c <USBD_GetString+0x28>
 800ac78:	2400      	movs	r4, #0
 800ac7a:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	3401      	adds	r4, #1
 800ac80:	5d05      	ldrb	r5, [r0, r4]
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	d1fa      	bne.n	800ac7c <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	3301      	adds	r3, #1
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800ac8e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac90:	2303      	movs	r3, #3
 800ac92:	704b      	strb	r3, [r1, #1]
  idx++;
 800ac94:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800ac96:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ac9a:	b902      	cbnz	r2, 800ac9e <USBD_GetString+0x2a>
}
 800ac9c:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800ac9e:	54ca      	strb	r2, [r1, r3]
    idx++;
 800aca0:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800aca2:	b2d2      	uxtb	r2, r2
    idx++;
 800aca4:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800aca6:	548d      	strb	r5, [r1, r2]
    idx++;
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	e7f4      	b.n	800ac96 <USBD_GetString+0x22>

0800acac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800acac:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acae:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acb0:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length = len;
 800acb2:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acb6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acba:	460a      	mov	r2, r1
 800acbc:	2100      	movs	r1, #0
 800acbe:	f000 fb15 	bl	800b2ec <USBD_LL_Transmit>

  return USBD_OK;
}
 800acc2:	2000      	movs	r0, #0
 800acc4:	bd10      	pop	{r4, pc}

0800acc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800acc6:	b508      	push	{r3, lr}
 800acc8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acca:	460a      	mov	r2, r1
 800accc:	2100      	movs	r1, #0
 800acce:	f000 fb0d 	bl	800b2ec <USBD_LL_Transmit>

  return USBD_OK;
}
 800acd2:	2000      	movs	r0, #0
 800acd4:	bd08      	pop	{r3, pc}

0800acd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800acd6:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800acd8:	2403      	movs	r4, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acda:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length = len;
 800acdc:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ace0:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ace4:	460a      	mov	r2, r1
 800ace6:	2100      	movs	r1, #0
 800ace8:	f000 fb09 	bl	800b2fe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800acec:	2000      	movs	r0, #0
 800acee:	bd10      	pop	{r4, pc}

0800acf0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800acf0:	b508      	push	{r3, lr}
 800acf2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acf4:	460a      	mov	r2, r1
 800acf6:	2100      	movs	r1, #0
 800acf8:	f000 fb01 	bl	800b2fe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800acfc:	2000      	movs	r0, #0
 800acfe:	bd08      	pop	{r3, pc}

0800ad00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad00:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad02:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad04:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad06:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	f000 faed 	bl	800b2ec <USBD_LL_Transmit>

  return USBD_OK;
}
 800ad12:	2000      	movs	r0, #0
 800ad14:	bd08      	pop	{r3, pc}

0800ad16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad16:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad18:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad1a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad1c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad20:	4619      	mov	r1, r3
 800ad22:	461a      	mov	r2, r3
 800ad24:	f000 faeb 	bl	800b2fe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ad28:	2000      	movs	r0, #0
 800ad2a:	bd08      	pop	{r3, pc}

0800ad2c <PIDControllerUpdate>:

	pid->out = 0.0f;

}

float PIDControllerUpdate(PIDController *pid) {
 800ad2c:	b510      	push	{r4, lr}
	//Accuracy of the position. Devides the 4096 int from adc to smaller value to have less noise
	pid->setPoint = truncf(pid->setPoint / pid->accuracy);
 800ad2e:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
float PIDControllerUpdate(PIDController *pid) {
 800ad32:	ed2d 8b02 	vpush	{d8}
	pid->setPoint = truncf(pid->setPoint / pid->accuracy);
 800ad36:	edd0 8a09 	vldr	s17, [r0, #36]	; 0x24
 800ad3a:	ee80 0a28 	vdiv.f32	s0, s0, s17
float PIDControllerUpdate(PIDController *pid) {
 800ad3e:	4604      	mov	r4, r0
	pid->setPoint = truncf(pid->setPoint / pid->accuracy);
 800ad40:	f000 fb14 	bl	800b36c <truncf>
 800ad44:	eeb0 8a40 	vmov.f32	s16, s0
 800ad48:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
	pid->measurement = truncf(pid->measurement / pid->accuracy);
 800ad4c:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 800ad50:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800ad54:	f000 fb0a 	bl	800b36c <truncf>

	/*
	 * Integral
	 */
	pid->integrator = pid->integrator
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800ad58:	edd4 5a01 	vldr	s11, [r4, #4]
 800ad5c:	ed94 6a08 	vldr	s12, [r4, #32]
 800ad60:	ed94 5a0b 	vldr	s10, [r4, #44]	; 0x2c
	float proportional = pid->Kp * error;
 800ad64:	edd4 7a00 	vldr	s15, [r4]
	pid->measurement = truncf(pid->measurement / pid->accuracy);
 800ad68:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800ad6c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	float error = pid->setPoint - pid->measurement;
 800ad70:	ee38 7a40 	vsub.f32	s14, s16, s0
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800ad74:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800ad78:	ee37 5a05 	vadd.f32	s10, s14, s10
 800ad7c:	ee65 5a86 	vmul.f32	s11, s11, s12
 800ad80:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800ad84:	eee5 6a85 	vfma.f32	s13, s11, s10

	/* Anti-wind-up via integrator clamping */
	if (pid->integrator > pid->limMaxInt) {
 800ad88:	edd4 5a07 	vldr	s11, [r4, #28]
	pid->integrator = pid->integrator
 800ad8c:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
	if (pid->integrator > pid->limMaxInt) {
 800ad90:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ad94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float proportional = pid->Kp * error;
 800ad98:	ee67 7a27 	vmul.f32	s15, s14, s15
	if (pid->integrator > pid->limMaxInt) {
 800ad9c:	dd02      	ble.n	800ada4 <PIDControllerUpdate+0x78>

		pid->integrator = pid->limMaxInt;

	} else if (pid->integrator < pid->limMinInt) {

		pid->integrator = pid->limMinInt;
 800ad9e:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
 800ada2:	e006      	b.n	800adb2 <PIDControllerUpdate+0x86>
	} else if (pid->integrator < pid->limMinInt) {
 800ada4:	edd4 5a06 	vldr	s11, [r4, #24]
 800ada8:	eef4 6ae5 	vcmpe.f32	s13, s11
 800adac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb0:	d4f5      	bmi.n	800ad9e <PIDControllerUpdate+0x72>
	 * Derivative (band-limited differentiator)
	 */

	pid->differentiator = -(2.0f * pid->Kd
			* (pid->measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800adb2:	ed94 4a03 	vldr	s8, [r4, #12]
 800adb6:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
			* (pid->measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 800adba:	ed94 5a0d 	vldr	s10, [r4, #52]	; 0x34
	pid->differentiator = -(2.0f * pid->Kd
 800adbe:	edd4 5a02 	vldr	s11, [r4, #8]
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800adc2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800adc6:	eef0 6a46 	vmov.f32	s13, s12
 800adca:	eed4 6a24 	vfnms.f32	s13, s8, s9
	pid->differentiator = -(2.0f * pid->Kd
 800adce:	ee75 5aa5 	vadd.f32	s11, s11, s11
			* (pid->measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 800add2:	ee30 5a45 	vsub.f32	s10, s0, s10
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800add6:	ee66 6aa3 	vmul.f32	s13, s13, s7
			/ (2.0f * pid->tau + pid->T);
 800adda:	eea4 6a24 	vfma.f32	s12, s8, s9
	+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800adde:	eee5 6a85 	vfma.f32	s13, s11, s10
	pid->differentiator = -(2.0f * pid->Kd
 800ade2:	eef1 6a66 	vneg.f32	s13, s13
			/ (2.0f * pid->tau + pid->T);
 800ade6:	eec6 5a86 	vdiv.f32	s11, s13, s12

	/*
	 * Compute output and apply limits
	 */
	pid->out = proportional + pid->integrator + pid->differentiator;
 800adea:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
	pid->differentiator = -(2.0f * pid->Kd
 800adee:	edc4 5a0c 	vstr	s11, [r4, #48]	; 0x30
	pid->out = proportional + pid->integrator + pid->differentiator;
 800adf2:	ee77 7aa6 	vadd.f32	s15, s15, s13

	if (pid->out > pid->limMax) {
 800adf6:	edd4 6a05 	vldr	s13, [r4, #20]
	pid->out = proportional + pid->integrator + pid->differentiator;
 800adfa:	ee77 7aa5 	vadd.f32	s15, s15, s11
	if (pid->out > pid->limMax) {
 800adfe:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ae02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->out = proportional + pid->integrator + pid->differentiator;
 800ae06:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	if (pid->out > pid->limMax) {
 800ae0a:	dd02      	ble.n	800ae12 <PIDControllerUpdate+0xe6>

		pid->out = pid->limMax;

	} else if (pid->out < pid->limMin) {

		pid->out = pid->limMin;
 800ae0c:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
 800ae10:	e006      	b.n	800ae20 <PIDControllerUpdate+0xf4>
	} else if (pid->out < pid->limMin) {
 800ae12:	edd4 6a04 	vldr	s13, [r4, #16]
 800ae16:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ae1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1e:	d4f5      	bmi.n	800ae0c <PIDControllerUpdate+0xe0>
	pid->prevMeasurement = pid->measurement;

	/* Return controller output */
	return pid->out;

}
 800ae20:	ecbd 8b02 	vpop	{d8}
	pid->prevMeasurement = pid->measurement;
 800ae24:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
	pid->prevError = error;
 800ae28:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
}
 800ae2c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 800ae30:	bd10      	pop	{r4, pc}
	...

0800ae34 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ae34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ae36:	490f      	ldr	r1, [pc, #60]	; (800ae74 <MX_USB_Device_Init+0x40>)
 800ae38:	480f      	ldr	r0, [pc, #60]	; (800ae78 <MX_USB_Device_Init+0x44>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f7ff fbb6 	bl	800a5ac <USBD_Init>
 800ae40:	b108      	cbz	r0, 800ae46 <MX_USB_Device_Init+0x12>
    Error_Handler();
 800ae42:	f7f8 fd8f 	bl	8003964 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ae46:	490d      	ldr	r1, [pc, #52]	; (800ae7c <MX_USB_Device_Init+0x48>)
 800ae48:	480b      	ldr	r0, [pc, #44]	; (800ae78 <MX_USB_Device_Init+0x44>)
 800ae4a:	f7ff fbc2 	bl	800a5d2 <USBD_RegisterClass>
 800ae4e:	b108      	cbz	r0, 800ae54 <MX_USB_Device_Init+0x20>
    Error_Handler();
 800ae50:	f7f8 fd88 	bl	8003964 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ae54:	490a      	ldr	r1, [pc, #40]	; (800ae80 <MX_USB_Device_Init+0x4c>)
 800ae56:	4808      	ldr	r0, [pc, #32]	; (800ae78 <MX_USB_Device_Init+0x44>)
 800ae58:	f7ff fb5e 	bl	800a518 <USBD_CDC_RegisterInterface>
 800ae5c:	b108      	cbz	r0, 800ae62 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800ae5e:	f7f8 fd81 	bl	8003964 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ae62:	4805      	ldr	r0, [pc, #20]	; (800ae78 <MX_USB_Device_Init+0x44>)
 800ae64:	f7ff fbcb 	bl	800a5fe <USBD_Start>
 800ae68:	b118      	cbz	r0, 800ae72 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ae6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ae6e:	f7f8 bd79 	b.w	8003964 <Error_Handler>
}
 800ae72:	bd08      	pop	{r3, pc}
 800ae74:	20000130 	.word	0x20000130
 800ae78:	20000f40 	.word	0x20000f40
 800ae7c:	2000000c 	.word	0x2000000c
 800ae80:	2000011c 	.word	0x2000011c

0800ae84 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 800ae84:	2000      	movs	r0, #0
 800ae86:	4770      	bx	lr

0800ae88 <CDC_TransmitCplt_FS>:
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800ae88:	2000      	movs	r0, #0
 800ae8a:	4770      	bx	lr

0800ae8c <CDC_Receive_FS>:
{
 800ae8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae8e:	4e0e      	ldr	r6, [pc, #56]	; (800aec8 <CDC_Receive_FS+0x3c>)
{
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae94:	4601      	mov	r1, r0
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff fb50 	bl	800a53c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff fb6e 	bl	800a57e <USBD_CDC_ReceivePacket>
	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 800aea2:	4b0a      	ldr	r3, [pc, #40]	; (800aecc <CDC_Receive_FS+0x40>)
 800aea4:	2240      	movs	r2, #64	; 0x40
 800aea6:	4618      	mov	r0, r3
 800aea8:	2100      	movs	r1, #0
 800aeaa:	f000 fad1 	bl	800b450 <memset>
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 800aeae:	782a      	ldrb	r2, [r5, #0]
 800aeb0:	9201      	str	r2, [sp, #4]
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	f000 fabe 	bl	800b434 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800aeb8:	9a01      	ldr	r2, [sp, #4]
 800aeba:	2100      	movs	r1, #0
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 fac7 	bl	800b450 <memset>
}
 800aec2:	2000      	movs	r0, #0
 800aec4:	b002      	add	sp, #8
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	20000f40 	.word	0x20000f40
 800aecc:	20002210 	.word	0x20002210

0800aed0 <CDC_Init_FS>:
{
 800aed0:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aed2:	4c06      	ldr	r4, [pc, #24]	; (800aeec <CDC_Init_FS+0x1c>)
 800aed4:	4906      	ldr	r1, [pc, #24]	; (800aef0 <CDC_Init_FS+0x20>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	4620      	mov	r0, r4
 800aeda:	f7ff fb24 	bl	800a526 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aede:	4905      	ldr	r1, [pc, #20]	; (800aef4 <CDC_Init_FS+0x24>)
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff fb2b 	bl	800a53c <USBD_CDC_SetRxBuffer>
}
 800aee6:	2000      	movs	r0, #0
 800aee8:	bd10      	pop	{r4, pc}
 800aeea:	bf00      	nop
 800aeec:	20000f40 	.word	0x20000f40
 800aef0:	20001a10 	.word	0x20001a10
 800aef4:	20001210 	.word	0x20001210

0800aef8 <CDC_Control_FS>:
	switch (cmd) {
 800aef8:	2822      	cmp	r0, #34	; 0x22
 800aefa:	d106      	bne.n	800af0a <CDC_Control_FS+0x12>
		if (req->wValue & 0x0001 != 0)
 800aefc:	884b      	ldrh	r3, [r1, #2]
 800aefe:	4a04      	ldr	r2, [pc, #16]	; (800af10 <CDC_Control_FS+0x18>)
 800af00:	f013 0301 	ands.w	r3, r3, #1
			host_com_port_open = 1;
 800af04:	bf18      	it	ne
 800af06:	2301      	movne	r3, #1
			host_com_port_open = 0;
 800af08:	7013      	strb	r3, [r2, #0]
}
 800af0a:	2000      	movs	r0, #0
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	20002250 	.word	0x20002250

0800af14 <CDC_Transmit_FS>:
{
 800af14:	b510      	push	{r4, lr}
 800af16:	460a      	mov	r2, r1
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 800af18:	490d      	ldr	r1, [pc, #52]	; (800af50 <CDC_Transmit_FS+0x3c>)
{
 800af1a:	4603      	mov	r3, r0
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 800af1c:	7808      	ldrb	r0, [r1, #0]
 800af1e:	b198      	cbz	r0, 800af48 <CDC_Transmit_FS+0x34>
 800af20:	4c0c      	ldr	r4, [pc, #48]	; (800af54 <CDC_Transmit_FS+0x40>)
 800af22:	f894 129c 	ldrb.w	r1, [r4, #668]	; 0x29c
 800af26:	2903      	cmp	r1, #3
 800af28:	d10d      	bne.n	800af46 <CDC_Transmit_FS+0x32>
		USBD_CDC_HandleTypeDef *hcdc =
 800af2a:	f8d4 12bc 	ldr.w	r1, [r4, #700]	; 0x2bc
		if (hcdc->TxState != 0) {
 800af2e:	f8d1 1214 	ldr.w	r1, [r1, #532]	; 0x214
 800af32:	b951      	cbnz	r1, 800af4a <CDC_Transmit_FS+0x36>
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800af34:	4620      	mov	r0, r4
 800af36:	4619      	mov	r1, r3
 800af38:	f7ff faf5 	bl	800a526 <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800af3c:	4620      	mov	r0, r4
}
 800af3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800af42:	f7ff bb04 	b.w	800a54e <USBD_CDC_TransmitPacket>
  uint8_t result = USBD_OK;
 800af46:	2000      	movs	r0, #0
}
 800af48:	bd10      	pop	{r4, pc}
			return USBD_BUSY;
 800af4a:	2001      	movs	r0, #1
 800af4c:	e7fc      	b.n	800af48 <CDC_Transmit_FS+0x34>
 800af4e:	bf00      	nop
 800af50:	20002250 	.word	0x20002250
 800af54:	20000f40 	.word	0x20000f40

0800af58 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800af58:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 800af5a:	4801      	ldr	r0, [pc, #4]	; (800af60 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 800af5c:	800b      	strh	r3, [r1, #0]
}
 800af5e:	4770      	bx	lr
 800af60:	20000150 	.word	0x20000150

0800af64 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af64:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800af66:	4801      	ldr	r0, [pc, #4]	; (800af6c <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800af68:	800b      	strh	r3, [r1, #0]
}
 800af6a:	4770      	bx	lr
 800af6c:	20000164 	.word	0x20000164

0800af70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af70:	2300      	movs	r3, #0
 800af72:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800af74:	1c4d      	adds	r5, r1, #1
 800af76:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 800af78:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800af7a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800af7e:	bf34      	ite	cc
 800af80:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af82:	3437      	addcs	r4, #55	; 0x37
 800af84:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800af88:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800af8c:	3301      	adds	r3, #1
 800af8e:	b2dc      	uxtb	r4, r3
 800af90:	42a2      	cmp	r2, r4
    value = value << 4;
 800af92:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800af96:	d8ef      	bhi.n	800af78 <IntToUnicode+0x8>
  }
}
 800af98:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af9c <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800af9c:	231a      	movs	r3, #26
{
 800af9e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800afa0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800afa2:	4b0a      	ldr	r3, [pc, #40]	; (800afcc <USBD_CDC_SerialStrDescriptor+0x30>)
 800afa4:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial0 += deviceserial2;
 800afa8:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800afac:	1880      	adds	r0, r0, r2
 800afae:	d00a      	beq.n	800afc6 <USBD_CDC_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afb0:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800afb4:	4906      	ldr	r1, [pc, #24]	; (800afd0 <USBD_CDC_SerialStrDescriptor+0x34>)
 800afb6:	2208      	movs	r2, #8
 800afb8:	f7ff ffda 	bl	800af70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800afbc:	2204      	movs	r2, #4
 800afbe:	3110      	adds	r1, #16
 800afc0:	4620      	mov	r0, r4
 800afc2:	f7ff ffd5 	bl	800af70 <IntToUnicode>
}
 800afc6:	4803      	ldr	r0, [pc, #12]	; (800afd4 <USBD_CDC_SerialStrDescriptor+0x38>)
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	1fff7000 	.word	0x1fff7000
 800afd0:	2000016a 	.word	0x2000016a
 800afd4:	20000168 	.word	0x20000168

0800afd8 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800afd8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afda:	4c04      	ldr	r4, [pc, #16]	; (800afec <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800afdc:	4804      	ldr	r0, [pc, #16]	; (800aff0 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 800afde:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afe0:	4621      	mov	r1, r4
 800afe2:	f7ff fe47 	bl	800ac74 <USBD_GetString>
}
 800afe6:	4620      	mov	r0, r4
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	bf00      	nop
 800afec:	20002254 	.word	0x20002254
 800aff0:	0800f25c 	.word	0x0800f25c

0800aff4 <USBD_CDC_ProductStrDescriptor>:
{
 800aff4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aff6:	4c04      	ldr	r4, [pc, #16]	; (800b008 <USBD_CDC_ProductStrDescriptor+0x14>)
 800aff8:	4804      	ldr	r0, [pc, #16]	; (800b00c <USBD_CDC_ProductStrDescriptor+0x18>)
{
 800affa:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800affc:	4621      	mov	r1, r4
 800affe:	f7ff fe39 	bl	800ac74 <USBD_GetString>
}
 800b002:	4620      	mov	r0, r4
 800b004:	bd10      	pop	{r4, pc}
 800b006:	bf00      	nop
 800b008:	20002254 	.word	0x20002254
 800b00c:	0800f26f 	.word	0x0800f26f

0800b010 <USBD_CDC_ConfigStrDescriptor>:
{
 800b010:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b012:	4c04      	ldr	r4, [pc, #16]	; (800b024 <USBD_CDC_ConfigStrDescriptor+0x14>)
 800b014:	4804      	ldr	r0, [pc, #16]	; (800b028 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 800b016:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b018:	4621      	mov	r1, r4
 800b01a:	f7ff fe2b 	bl	800ac74 <USBD_GetString>
}
 800b01e:	4620      	mov	r0, r4
 800b020:	bd10      	pop	{r4, pc}
 800b022:	bf00      	nop
 800b024:	20002254 	.word	0x20002254
 800b028:	0800f285 	.word	0x0800f285

0800b02c <USBD_CDC_InterfaceStrDescriptor>:
{
 800b02c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b02e:	4c04      	ldr	r4, [pc, #16]	; (800b040 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 800b030:	4804      	ldr	r0, [pc, #16]	; (800b044 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 800b032:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b034:	4621      	mov	r1, r4
 800b036:	f7ff fe1d 	bl	800ac74 <USBD_GetString>
}
 800b03a:	4620      	mov	r0, r4
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	20002254 	.word	0x20002254
 800b044:	0800f290 	.word	0x0800f290

0800b048 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800b048:	2803      	cmp	r0, #3
 800b04a:	bf9a      	itte	ls
 800b04c:	4b01      	ldrls	r3, [pc, #4]	; (800b054 <USBD_Get_USB_Status+0xc>)
 800b04e:	5c18      	ldrbls	r0, [r3, r0]
{
 800b050:	2003      	movhi	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800b052:	4770      	bx	lr
 800b054:	0800f29e 	.word	0x0800f29e

0800b058 <SystemClockConfig_Resume>:
{
 800b058:	b500      	push	{lr}
 800b05a:	b095      	sub	sp, #84	; 0x54
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b05c:	2238      	movs	r2, #56	; 0x38
 800b05e:	2100      	movs	r1, #0
 800b060:	a806      	add	r0, sp, #24
 800b062:	f000 f9f5 	bl	800b450 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b066:	2214      	movs	r2, #20
 800b068:	2100      	movs	r1, #0
 800b06a:	a801      	add	r0, sp, #4
 800b06c:	f000 f9f0 	bl	800b450 <memset>
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b070:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b074:	f7fc fb10 	bl	8007698 <HAL_PWREx_ControlVoltageScaling>
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800b078:	2322      	movs	r3, #34	; 0x22
 800b07a:	9306      	str	r3, [sp, #24]
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b07c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b080:	2340      	movs	r3, #64	; 0x40
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b082:	2201      	movs	r2, #1
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b084:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b088:	2302      	movs	r3, #2
 800b08a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800b08e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b092:	a806      	add	r0, sp, #24
		  RCC_OscInitStruct.PLL.PLLN = 16;
 800b094:	2210      	movs	r2, #16
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b096:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b09a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b09e:	f7fc fb55 	bl	800774c <HAL_RCC_OscConfig>
 800b0a2:	b108      	cbz	r0, 800b0a8 <SystemClockConfig_Resume+0x50>
		    Error_Handler();
 800b0a4:	f7f8 fc5e 	bl	8003964 <Error_Handler>
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b0a8:	230f      	movs	r3, #15
 800b0aa:	2103      	movs	r1, #3
 800b0ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b0b0:	a801      	add	r0, sp, #4
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b0b2:	2300      	movs	r3, #0
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b0b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b0b8:	9305      	str	r3, [sp, #20]
		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b0ba:	f7fc fd8d 	bl	8007bd8 <HAL_RCC_ClockConfig>
 800b0be:	b108      	cbz	r0, 800b0c4 <SystemClockConfig_Resume+0x6c>
		    Error_Handler();
 800b0c0:	f7f8 fc50 	bl	8003964 <Error_Handler>
}
 800b0c4:	b015      	add	sp, #84	; 0x54
 800b0c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b0cc <HAL_PCD_MspInit>:
{
 800b0cc:	b510      	push	{r4, lr}
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b0d2:	2254      	movs	r2, #84	; 0x54
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	a801      	add	r0, sp, #4
 800b0d8:	f000 f9ba 	bl	800b450 <memset>
  if(pcdHandle->Instance==USB)
 800b0dc:	6822      	ldr	r2, [r4, #0]
 800b0de:	4b10      	ldr	r3, [pc, #64]	; (800b120 <HAL_PCD_MspInit+0x54>)
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d11a      	bne.n	800b11a <HAL_PCD_MspInit+0x4e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b0e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b0e8:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b0ea:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b0ec:	f7fc fe92 	bl	8007e14 <HAL_RCCEx_PeriphCLKConfig>
 800b0f0:	b108      	cbz	r0, 800b0f6 <HAL_PCD_MspInit+0x2a>
      Error_Handler();
 800b0f2:	f7f8 fc37 	bl	8003964 <Error_Handler>
    __HAL_RCC_USB_CLK_ENABLE();
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	; (800b124 <HAL_PCD_MspInit+0x58>)
 800b0f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b0fe:	659a      	str	r2, [r3, #88]	; 0x58
 800b100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b102:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800b104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b108:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b10a:	2014      	movs	r0, #20
 800b10c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800b10e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b110:	f7fa fb5c 	bl	80057cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b114:	2014      	movs	r0, #20
 800b116:	f7fa fb8b 	bl	8005830 <HAL_NVIC_EnableIRQ>
}
 800b11a:	b016      	add	sp, #88	; 0x58
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	bf00      	nop
 800b120:	40005c00 	.word	0x40005c00
 800b124:	40021000 	.word	0x40021000

0800b128 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b128:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800b12c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b130:	f7ff ba76 	b.w	800a620 <USBD_LL_SetupStage>

0800b134 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b134:	2328      	movs	r3, #40	; 0x28
 800b136:	fb03 0301 	mla	r3, r3, r1, r0
 800b13a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b13e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b142:	f7ff ba9d 	b.w	800a680 <USBD_LL_DataOutStage>

0800b146 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b146:	2328      	movs	r3, #40	; 0x28
 800b148:	fb03 0301 	mla	r3, r3, r1, r0
 800b14c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b152:	f7ff bac5 	b.w	800a6e0 <USBD_LL_DataInStage>

0800b156 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b156:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b15a:	f7ff bb57 	b.w	800a80c <USBD_LL_SOF>

0800b15e <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b15e:	6883      	ldr	r3, [r0, #8]
 800b160:	2b02      	cmp	r3, #2
{
 800b162:	b510      	push	{r4, lr}
 800b164:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b166:	d001      	beq.n	800b16c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800b168:	f7f8 fbfc 	bl	8003964 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b16c:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800b170:	2101      	movs	r1, #1
 800b172:	f7ff fb33 	bl	800a7dc <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b176:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800b17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b17e:	f7ff bb01 	b.w	800a784 <USBD_LL_Reset>
	...

0800b184 <HAL_PCD_SuspendCallback>:
{
 800b184:	b510      	push	{r4, lr}
 800b186:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b188:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b18c:	f7ff fb29 	bl	800a7e2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800b190:	69a3      	ldr	r3, [r4, #24]
 800b192:	b123      	cbz	r3, 800b19e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b194:	4a02      	ldr	r2, [pc, #8]	; (800b1a0 <HAL_PCD_SuspendCallback+0x1c>)
 800b196:	6913      	ldr	r3, [r2, #16]
 800b198:	f043 0306 	orr.w	r3, r3, #6
 800b19c:	6113      	str	r3, [r2, #16]
}
 800b19e:	bd10      	pop	{r4, pc}
 800b1a0:	e000ed00 	.word	0xe000ed00

0800b1a4 <HAL_PCD_ResumeCallback>:
  if (hpcd->Init.low_power_enable)
 800b1a4:	6983      	ldr	r3, [r0, #24]
{
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800b1aa:	b133      	cbz	r3, 800b1ba <HAL_PCD_ResumeCallback+0x16>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1ac:	4a06      	ldr	r2, [pc, #24]	; (800b1c8 <HAL_PCD_ResumeCallback+0x24>)
 800b1ae:	6913      	ldr	r3, [r2, #16]
 800b1b0:	f023 0306 	bic.w	r3, r3, #6
 800b1b4:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b1b6:	f7ff ff4f 	bl	800b058 <SystemClockConfig_Resume>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1ba:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800b1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1c2:	f7ff bb18 	b.w	800a7f6 <USBD_LL_Resume>
 800b1c6:	bf00      	nop
 800b1c8:	e000ed00 	.word	0xe000ed00

0800b1cc <USBD_LL_Init>:
{
 800b1cc:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b1ce:	4a1f      	ldr	r2, [pc, #124]	; (800b24c <USBD_LL_Init+0x80>)
{
 800b1d0:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800b1d2:	481f      	ldr	r0, [pc, #124]	; (800b250 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b1d4:	2308      	movs	r3, #8
 800b1d6:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b1da:	2302      	movs	r3, #2
  hpcd_USB_FS.pData = pdev;
 800b1dc:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b1e0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1e2:	6103      	str	r3, [r0, #16]
  pdev->pData = &hpcd_USB_FS;
 800b1e4:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b1e8:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b1ea:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b1ee:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b1f2:	f7fb fba2 	bl	800693a <HAL_PCD_Init>
 800b1f6:	b108      	cbz	r0, 800b1fc <USBD_LL_Init+0x30>
    Error_Handler( );
 800b1f8:	f7f8 fbb4 	bl	8003964 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4611      	mov	r1, r2
 800b200:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b204:	2318      	movs	r3, #24
 800b206:	f7fc fa16 	bl	8007636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b20a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b20e:	2358      	movs	r3, #88	; 0x58
 800b210:	2200      	movs	r2, #0
 800b212:	2180      	movs	r1, #128	; 0x80
 800b214:	f7fc fa0f 	bl	8007636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b218:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b21c:	23c0      	movs	r3, #192	; 0xc0
 800b21e:	2200      	movs	r2, #0
 800b220:	2181      	movs	r1, #129	; 0x81
 800b222:	f7fc fa08 	bl	8007636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b226:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b22a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b22e:	2200      	movs	r2, #0
 800b230:	2101      	movs	r1, #1
 800b232:	f7fc fa00 	bl	8007636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b236:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b23a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b23e:	2200      	movs	r2, #0
 800b240:	2182      	movs	r1, #130	; 0x82
 800b242:	f7fc f9f8 	bl	8007636 <HAL_PCDEx_PMAConfig>
}
 800b246:	2000      	movs	r0, #0
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	bf00      	nop
 800b24c:	40005c00 	.word	0x40005c00
 800b250:	20002454 	.word	0x20002454

0800b254 <USBD_LL_Start>:
{
 800b254:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b256:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b25a:	f7fb fbcc 	bl	80069f6 <HAL_PCD_Start>
}
 800b25e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b262:	f7ff bef1 	b.w	800b048 <USBD_Get_USB_Status>

0800b266 <USBD_LL_OpenEP>:
{
 800b266:	b510      	push	{r4, lr}
 800b268:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b26a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800b26e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b270:	4623      	mov	r3, r4
 800b272:	f7fc f8d7 	bl	8007424 <HAL_PCD_EP_Open>
}
 800b276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b27a:	f7ff bee5 	b.w	800b048 <USBD_Get_USB_Status>

0800b27e <USBD_LL_CloseEP>:
{
 800b27e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b280:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b284:	f7fc f904 	bl	8007490 <HAL_PCD_EP_Close>
}
 800b288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b28c:	f7ff bedc 	b.w	800b048 <USBD_Get_USB_Status>

0800b290 <USBD_LL_StallEP>:
{
 800b290:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b292:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b296:	f7fc f966 	bl	8007566 <HAL_PCD_EP_SetStall>
}
 800b29a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b29e:	f7ff bed3 	b.w	800b048 <USBD_Get_USB_Status>

0800b2a2 <USBD_LL_ClearStallEP>:
{
 800b2a2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b2a4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b2a8:	f7fc f98f 	bl	80075ca <HAL_PCD_EP_ClrStall>
}
 800b2ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b0:	f7ff beca 	b.w	800b048 <USBD_Get_USB_Status>

0800b2b4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800b2b4:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b2b8:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800b2bc:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b2c0:	bf1d      	ittte	ne
 800b2c2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800b2c6:	fb01 2102 	mlane	r1, r1, r2, r2
 800b2ca:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2cc:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b2d0:	bf14      	ite	ne
 800b2d2:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2d4:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800b2d8:	4770      	bx	lr

0800b2da <USBD_LL_SetUSBAddress>:
{
 800b2da:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2dc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b2e0:	f7fb fb9e 	bl	8006a20 <HAL_PCD_SetAddress>
}
 800b2e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2e8:	f7ff beae 	b.w	800b048 <USBD_Get_USB_Status>

0800b2ec <USBD_LL_Transmit>:
{
 800b2ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2ee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b2f2:	f7fc f918 	bl	8007526 <HAL_PCD_EP_Transmit>
}
 800b2f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2fa:	f7ff bea5 	b.w	800b048 <USBD_Get_USB_Status>

0800b2fe <USBD_LL_PrepareReceive>:
{
 800b2fe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b300:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b304:	f7fc f8f1 	bl	80074ea <HAL_PCD_EP_Receive>
}
 800b308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b30c:	f7ff be9c 	b.w	800b048 <USBD_Get_USB_Status>

0800b310 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b310:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b314:	f7fc b8ff 	b.w	8007516 <HAL_PCD_EP_GetRxCount>

0800b318 <HAL_PCDEx_LPM_Callback>:
{
 800b318:	b510      	push	{r4, lr}
 800b31a:	4604      	mov	r4, r0
  switch (msg)
 800b31c:	b111      	cbz	r1, 800b324 <HAL_PCDEx_LPM_Callback+0xc>
 800b31e:	2901      	cmp	r1, #1
 800b320:	d00f      	beq.n	800b342 <HAL_PCDEx_LPM_Callback+0x2a>
}
 800b322:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800b324:	6983      	ldr	r3, [r0, #24]
 800b326:	b133      	cbz	r3, 800b336 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClockConfig_Resume();
 800b328:	f7ff fe96 	bl	800b058 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b32c:	4a0b      	ldr	r2, [pc, #44]	; (800b35c <HAL_PCDEx_LPM_Callback+0x44>)
 800b32e:	6913      	ldr	r3, [r2, #16]
 800b330:	f023 0306 	bic.w	r3, r3, #6
 800b334:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b336:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800b33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800b33e:	f7ff ba5a 	b.w	800a7f6 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 800b342:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b346:	f7ff fa4c 	bl	800a7e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b34a:	69a3      	ldr	r3, [r4, #24]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0e8      	beq.n	800b322 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b350:	4a02      	ldr	r2, [pc, #8]	; (800b35c <HAL_PCDEx_LPM_Callback+0x44>)
 800b352:	6913      	ldr	r3, [r2, #16]
 800b354:	f043 0306 	orr.w	r3, r3, #6
 800b358:	6113      	str	r3, [r2, #16]
}
 800b35a:	e7e2      	b.n	800b322 <HAL_PCDEx_LPM_Callback+0xa>
 800b35c:	e000ed00 	.word	0xe000ed00

0800b360 <USBD_static_malloc>:
}
 800b360:	4800      	ldr	r0, [pc, #0]	; (800b364 <USBD_static_malloc+0x4>)
 800b362:	4770      	bx	lr
 800b364:	20002748 	.word	0x20002748

0800b368 <USBD_static_free>:
}
 800b368:	4770      	bx	lr
	...

0800b36c <truncf>:
 800b36c:	ee10 1a10 	vmov	r1, s0
 800b370:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800b374:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b378:	2a16      	cmp	r2, #22
 800b37a:	dc0a      	bgt.n	800b392 <truncf+0x26>
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	bfa5      	ittet	ge
 800b380:	4b06      	ldrge	r3, [pc, #24]	; (800b39c <truncf+0x30>)
 800b382:	4113      	asrge	r3, r2
 800b384:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 800b388:	ea21 0303 	bicge.w	r3, r1, r3
 800b38c:	ee00 3a10 	vmov	s0, r3
 800b390:	4770      	bx	lr
 800b392:	2a80      	cmp	r2, #128	; 0x80
 800b394:	bf08      	it	eq
 800b396:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 800b39a:	4770      	bx	lr
 800b39c:	007fffff 	.word	0x007fffff

0800b3a0 <abort>:
 800b3a0:	b508      	push	{r3, lr}
 800b3a2:	2006      	movs	r0, #6
 800b3a4:	f000 fe6c 	bl	800c080 <raise>
 800b3a8:	2001      	movs	r0, #1
 800b3aa:	f7f8 ffbd 	bl	8004328 <_exit>
	...

0800b3b0 <__errno>:
 800b3b0:	4b01      	ldr	r3, [pc, #4]	; (800b3b8 <__errno+0x8>)
 800b3b2:	6818      	ldr	r0, [r3, #0]
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	20000184 	.word	0x20000184

0800b3bc <__libc_init_array>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	4d0d      	ldr	r5, [pc, #52]	; (800b3f4 <__libc_init_array+0x38>)
 800b3c0:	4c0d      	ldr	r4, [pc, #52]	; (800b3f8 <__libc_init_array+0x3c>)
 800b3c2:	1b64      	subs	r4, r4, r5
 800b3c4:	10a4      	asrs	r4, r4, #2
 800b3c6:	2600      	movs	r6, #0
 800b3c8:	42a6      	cmp	r6, r4
 800b3ca:	d109      	bne.n	800b3e0 <__libc_init_array+0x24>
 800b3cc:	4d0b      	ldr	r5, [pc, #44]	; (800b3fc <__libc_init_array+0x40>)
 800b3ce:	4c0c      	ldr	r4, [pc, #48]	; (800b400 <__libc_init_array+0x44>)
 800b3d0:	f002 fdcc 	bl	800df6c <_init>
 800b3d4:	1b64      	subs	r4, r4, r5
 800b3d6:	10a4      	asrs	r4, r4, #2
 800b3d8:	2600      	movs	r6, #0
 800b3da:	42a6      	cmp	r6, r4
 800b3dc:	d105      	bne.n	800b3ea <__libc_init_array+0x2e>
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e4:	4798      	blx	r3
 800b3e6:	3601      	adds	r6, #1
 800b3e8:	e7ee      	b.n	800b3c8 <__libc_init_array+0xc>
 800b3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ee:	4798      	blx	r3
 800b3f0:	3601      	adds	r6, #1
 800b3f2:	e7f2      	b.n	800b3da <__libc_init_array+0x1e>
 800b3f4:	0800f684 	.word	0x0800f684
 800b3f8:	0800f684 	.word	0x0800f684
 800b3fc:	0800f684 	.word	0x0800f684
 800b400:	0800f688 	.word	0x0800f688

0800b404 <malloc>:
 800b404:	4b02      	ldr	r3, [pc, #8]	; (800b410 <malloc+0xc>)
 800b406:	4601      	mov	r1, r0
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	f000 b895 	b.w	800b538 <_malloc_r>
 800b40e:	bf00      	nop
 800b410:	20000184 	.word	0x20000184

0800b414 <memcmp>:
 800b414:	b510      	push	{r4, lr}
 800b416:	3901      	subs	r1, #1
 800b418:	4402      	add	r2, r0
 800b41a:	4290      	cmp	r0, r2
 800b41c:	d101      	bne.n	800b422 <memcmp+0xe>
 800b41e:	2000      	movs	r0, #0
 800b420:	e005      	b.n	800b42e <memcmp+0x1a>
 800b422:	7803      	ldrb	r3, [r0, #0]
 800b424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d001      	beq.n	800b430 <memcmp+0x1c>
 800b42c:	1b18      	subs	r0, r3, r4
 800b42e:	bd10      	pop	{r4, pc}
 800b430:	3001      	adds	r0, #1
 800b432:	e7f2      	b.n	800b41a <memcmp+0x6>

0800b434 <memcpy>:
 800b434:	440a      	add	r2, r1
 800b436:	4291      	cmp	r1, r2
 800b438:	f100 33ff 	add.w	r3, r0, #4294967295
 800b43c:	d100      	bne.n	800b440 <memcpy+0xc>
 800b43e:	4770      	bx	lr
 800b440:	b510      	push	{r4, lr}
 800b442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44a:	4291      	cmp	r1, r2
 800b44c:	d1f9      	bne.n	800b442 <memcpy+0xe>
 800b44e:	bd10      	pop	{r4, pc}

0800b450 <memset>:
 800b450:	4402      	add	r2, r0
 800b452:	4603      	mov	r3, r0
 800b454:	4293      	cmp	r3, r2
 800b456:	d100      	bne.n	800b45a <memset+0xa>
 800b458:	4770      	bx	lr
 800b45a:	f803 1b01 	strb.w	r1, [r3], #1
 800b45e:	e7f9      	b.n	800b454 <memset+0x4>

0800b460 <_free_r>:
 800b460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b462:	2900      	cmp	r1, #0
 800b464:	d044      	beq.n	800b4f0 <_free_r+0x90>
 800b466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b46a:	9001      	str	r0, [sp, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f1a1 0404 	sub.w	r4, r1, #4
 800b472:	bfb8      	it	lt
 800b474:	18e4      	addlt	r4, r4, r3
 800b476:	f001 ff7d 	bl	800d374 <__malloc_lock>
 800b47a:	4a1e      	ldr	r2, [pc, #120]	; (800b4f4 <_free_r+0x94>)
 800b47c:	9801      	ldr	r0, [sp, #4]
 800b47e:	6813      	ldr	r3, [r2, #0]
 800b480:	b933      	cbnz	r3, 800b490 <_free_r+0x30>
 800b482:	6063      	str	r3, [r4, #4]
 800b484:	6014      	str	r4, [r2, #0]
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b48c:	f001 bf78 	b.w	800d380 <__malloc_unlock>
 800b490:	42a3      	cmp	r3, r4
 800b492:	d908      	bls.n	800b4a6 <_free_r+0x46>
 800b494:	6825      	ldr	r5, [r4, #0]
 800b496:	1961      	adds	r1, r4, r5
 800b498:	428b      	cmp	r3, r1
 800b49a:	bf01      	itttt	eq
 800b49c:	6819      	ldreq	r1, [r3, #0]
 800b49e:	685b      	ldreq	r3, [r3, #4]
 800b4a0:	1949      	addeq	r1, r1, r5
 800b4a2:	6021      	streq	r1, [r4, #0]
 800b4a4:	e7ed      	b.n	800b482 <_free_r+0x22>
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	b10b      	cbz	r3, 800b4b0 <_free_r+0x50>
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d9fa      	bls.n	800b4a6 <_free_r+0x46>
 800b4b0:	6811      	ldr	r1, [r2, #0]
 800b4b2:	1855      	adds	r5, r2, r1
 800b4b4:	42a5      	cmp	r5, r4
 800b4b6:	d10b      	bne.n	800b4d0 <_free_r+0x70>
 800b4b8:	6824      	ldr	r4, [r4, #0]
 800b4ba:	4421      	add	r1, r4
 800b4bc:	1854      	adds	r4, r2, r1
 800b4be:	42a3      	cmp	r3, r4
 800b4c0:	6011      	str	r1, [r2, #0]
 800b4c2:	d1e0      	bne.n	800b486 <_free_r+0x26>
 800b4c4:	681c      	ldr	r4, [r3, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	6053      	str	r3, [r2, #4]
 800b4ca:	4421      	add	r1, r4
 800b4cc:	6011      	str	r1, [r2, #0]
 800b4ce:	e7da      	b.n	800b486 <_free_r+0x26>
 800b4d0:	d902      	bls.n	800b4d8 <_free_r+0x78>
 800b4d2:	230c      	movs	r3, #12
 800b4d4:	6003      	str	r3, [r0, #0]
 800b4d6:	e7d6      	b.n	800b486 <_free_r+0x26>
 800b4d8:	6825      	ldr	r5, [r4, #0]
 800b4da:	1961      	adds	r1, r4, r5
 800b4dc:	428b      	cmp	r3, r1
 800b4de:	bf04      	itt	eq
 800b4e0:	6819      	ldreq	r1, [r3, #0]
 800b4e2:	685b      	ldreq	r3, [r3, #4]
 800b4e4:	6063      	str	r3, [r4, #4]
 800b4e6:	bf04      	itt	eq
 800b4e8:	1949      	addeq	r1, r1, r5
 800b4ea:	6021      	streq	r1, [r4, #0]
 800b4ec:	6054      	str	r4, [r2, #4]
 800b4ee:	e7ca      	b.n	800b486 <_free_r+0x26>
 800b4f0:	b003      	add	sp, #12
 800b4f2:	bd30      	pop	{r4, r5, pc}
 800b4f4:	20002968 	.word	0x20002968

0800b4f8 <sbrk_aligned>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	4e0e      	ldr	r6, [pc, #56]	; (800b534 <sbrk_aligned+0x3c>)
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	6831      	ldr	r1, [r6, #0]
 800b500:	4605      	mov	r5, r0
 800b502:	b911      	cbnz	r1, 800b50a <sbrk_aligned+0x12>
 800b504:	f000 fd84 	bl	800c010 <_sbrk_r>
 800b508:	6030      	str	r0, [r6, #0]
 800b50a:	4621      	mov	r1, r4
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 fd7f 	bl	800c010 <_sbrk_r>
 800b512:	1c43      	adds	r3, r0, #1
 800b514:	d00a      	beq.n	800b52c <sbrk_aligned+0x34>
 800b516:	1cc4      	adds	r4, r0, #3
 800b518:	f024 0403 	bic.w	r4, r4, #3
 800b51c:	42a0      	cmp	r0, r4
 800b51e:	d007      	beq.n	800b530 <sbrk_aligned+0x38>
 800b520:	1a21      	subs	r1, r4, r0
 800b522:	4628      	mov	r0, r5
 800b524:	f000 fd74 	bl	800c010 <_sbrk_r>
 800b528:	3001      	adds	r0, #1
 800b52a:	d101      	bne.n	800b530 <sbrk_aligned+0x38>
 800b52c:	f04f 34ff 	mov.w	r4, #4294967295
 800b530:	4620      	mov	r0, r4
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	2000296c 	.word	0x2000296c

0800b538 <_malloc_r>:
 800b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53c:	1ccd      	adds	r5, r1, #3
 800b53e:	f025 0503 	bic.w	r5, r5, #3
 800b542:	3508      	adds	r5, #8
 800b544:	2d0c      	cmp	r5, #12
 800b546:	bf38      	it	cc
 800b548:	250c      	movcc	r5, #12
 800b54a:	2d00      	cmp	r5, #0
 800b54c:	4607      	mov	r7, r0
 800b54e:	db01      	blt.n	800b554 <_malloc_r+0x1c>
 800b550:	42a9      	cmp	r1, r5
 800b552:	d905      	bls.n	800b560 <_malloc_r+0x28>
 800b554:	230c      	movs	r3, #12
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	2600      	movs	r6, #0
 800b55a:	4630      	mov	r0, r6
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b560:	4e2e      	ldr	r6, [pc, #184]	; (800b61c <_malloc_r+0xe4>)
 800b562:	f001 ff07 	bl	800d374 <__malloc_lock>
 800b566:	6833      	ldr	r3, [r6, #0]
 800b568:	461c      	mov	r4, r3
 800b56a:	bb34      	cbnz	r4, 800b5ba <_malloc_r+0x82>
 800b56c:	4629      	mov	r1, r5
 800b56e:	4638      	mov	r0, r7
 800b570:	f7ff ffc2 	bl	800b4f8 <sbrk_aligned>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	4604      	mov	r4, r0
 800b578:	d14d      	bne.n	800b616 <_malloc_r+0xde>
 800b57a:	6834      	ldr	r4, [r6, #0]
 800b57c:	4626      	mov	r6, r4
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d140      	bne.n	800b604 <_malloc_r+0xcc>
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	4631      	mov	r1, r6
 800b586:	4638      	mov	r0, r7
 800b588:	eb04 0803 	add.w	r8, r4, r3
 800b58c:	f000 fd40 	bl	800c010 <_sbrk_r>
 800b590:	4580      	cmp	r8, r0
 800b592:	d13a      	bne.n	800b60a <_malloc_r+0xd2>
 800b594:	6821      	ldr	r1, [r4, #0]
 800b596:	3503      	adds	r5, #3
 800b598:	1a6d      	subs	r5, r5, r1
 800b59a:	f025 0503 	bic.w	r5, r5, #3
 800b59e:	3508      	adds	r5, #8
 800b5a0:	2d0c      	cmp	r5, #12
 800b5a2:	bf38      	it	cc
 800b5a4:	250c      	movcc	r5, #12
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f7ff ffa5 	bl	800b4f8 <sbrk_aligned>
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d02b      	beq.n	800b60a <_malloc_r+0xd2>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	442b      	add	r3, r5
 800b5b6:	6023      	str	r3, [r4, #0]
 800b5b8:	e00e      	b.n	800b5d8 <_malloc_r+0xa0>
 800b5ba:	6822      	ldr	r2, [r4, #0]
 800b5bc:	1b52      	subs	r2, r2, r5
 800b5be:	d41e      	bmi.n	800b5fe <_malloc_r+0xc6>
 800b5c0:	2a0b      	cmp	r2, #11
 800b5c2:	d916      	bls.n	800b5f2 <_malloc_r+0xba>
 800b5c4:	1961      	adds	r1, r4, r5
 800b5c6:	42a3      	cmp	r3, r4
 800b5c8:	6025      	str	r5, [r4, #0]
 800b5ca:	bf18      	it	ne
 800b5cc:	6059      	strne	r1, [r3, #4]
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	bf08      	it	eq
 800b5d2:	6031      	streq	r1, [r6, #0]
 800b5d4:	5162      	str	r2, [r4, r5]
 800b5d6:	604b      	str	r3, [r1, #4]
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f104 060b 	add.w	r6, r4, #11
 800b5de:	f001 fecf 	bl	800d380 <__malloc_unlock>
 800b5e2:	f026 0607 	bic.w	r6, r6, #7
 800b5e6:	1d23      	adds	r3, r4, #4
 800b5e8:	1af2      	subs	r2, r6, r3
 800b5ea:	d0b6      	beq.n	800b55a <_malloc_r+0x22>
 800b5ec:	1b9b      	subs	r3, r3, r6
 800b5ee:	50a3      	str	r3, [r4, r2]
 800b5f0:	e7b3      	b.n	800b55a <_malloc_r+0x22>
 800b5f2:	6862      	ldr	r2, [r4, #4]
 800b5f4:	42a3      	cmp	r3, r4
 800b5f6:	bf0c      	ite	eq
 800b5f8:	6032      	streq	r2, [r6, #0]
 800b5fa:	605a      	strne	r2, [r3, #4]
 800b5fc:	e7ec      	b.n	800b5d8 <_malloc_r+0xa0>
 800b5fe:	4623      	mov	r3, r4
 800b600:	6864      	ldr	r4, [r4, #4]
 800b602:	e7b2      	b.n	800b56a <_malloc_r+0x32>
 800b604:	4634      	mov	r4, r6
 800b606:	6876      	ldr	r6, [r6, #4]
 800b608:	e7b9      	b.n	800b57e <_malloc_r+0x46>
 800b60a:	230c      	movs	r3, #12
 800b60c:	603b      	str	r3, [r7, #0]
 800b60e:	4638      	mov	r0, r7
 800b610:	f001 feb6 	bl	800d380 <__malloc_unlock>
 800b614:	e7a1      	b.n	800b55a <_malloc_r+0x22>
 800b616:	6025      	str	r5, [r4, #0]
 800b618:	e7de      	b.n	800b5d8 <_malloc_r+0xa0>
 800b61a:	bf00      	nop
 800b61c:	20002968 	.word	0x20002968

0800b620 <__cvt>:
 800b620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b624:	ec55 4b10 	vmov	r4, r5, d0
 800b628:	2d00      	cmp	r5, #0
 800b62a:	460e      	mov	r6, r1
 800b62c:	4619      	mov	r1, r3
 800b62e:	462b      	mov	r3, r5
 800b630:	bfbb      	ittet	lt
 800b632:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b636:	461d      	movlt	r5, r3
 800b638:	2300      	movge	r3, #0
 800b63a:	232d      	movlt	r3, #45	; 0x2d
 800b63c:	700b      	strb	r3, [r1, #0]
 800b63e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b640:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b644:	4691      	mov	r9, r2
 800b646:	f023 0820 	bic.w	r8, r3, #32
 800b64a:	bfbc      	itt	lt
 800b64c:	4622      	movlt	r2, r4
 800b64e:	4614      	movlt	r4, r2
 800b650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b654:	d005      	beq.n	800b662 <__cvt+0x42>
 800b656:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b65a:	d100      	bne.n	800b65e <__cvt+0x3e>
 800b65c:	3601      	adds	r6, #1
 800b65e:	2102      	movs	r1, #2
 800b660:	e000      	b.n	800b664 <__cvt+0x44>
 800b662:	2103      	movs	r1, #3
 800b664:	ab03      	add	r3, sp, #12
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	ab02      	add	r3, sp, #8
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	ec45 4b10 	vmov	d0, r4, r5
 800b670:	4653      	mov	r3, sl
 800b672:	4632      	mov	r2, r6
 800b674:	f000 fe6c 	bl	800c350 <_dtoa_r>
 800b678:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b67c:	4607      	mov	r7, r0
 800b67e:	d102      	bne.n	800b686 <__cvt+0x66>
 800b680:	f019 0f01 	tst.w	r9, #1
 800b684:	d022      	beq.n	800b6cc <__cvt+0xac>
 800b686:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b68a:	eb07 0906 	add.w	r9, r7, r6
 800b68e:	d110      	bne.n	800b6b2 <__cvt+0x92>
 800b690:	783b      	ldrb	r3, [r7, #0]
 800b692:	2b30      	cmp	r3, #48	; 0x30
 800b694:	d10a      	bne.n	800b6ac <__cvt+0x8c>
 800b696:	2200      	movs	r2, #0
 800b698:	2300      	movs	r3, #0
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7f5 fa3b 	bl	8000b18 <__aeabi_dcmpeq>
 800b6a2:	b918      	cbnz	r0, 800b6ac <__cvt+0x8c>
 800b6a4:	f1c6 0601 	rsb	r6, r6, #1
 800b6a8:	f8ca 6000 	str.w	r6, [sl]
 800b6ac:	f8da 3000 	ldr.w	r3, [sl]
 800b6b0:	4499      	add	r9, r3
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f5 fa2d 	bl	8000b18 <__aeabi_dcmpeq>
 800b6be:	b108      	cbz	r0, 800b6c4 <__cvt+0xa4>
 800b6c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6c4:	2230      	movs	r2, #48	; 0x30
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	454b      	cmp	r3, r9
 800b6ca:	d307      	bcc.n	800b6dc <__cvt+0xbc>
 800b6cc:	9b03      	ldr	r3, [sp, #12]
 800b6ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6d0:	1bdb      	subs	r3, r3, r7
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	b004      	add	sp, #16
 800b6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6dc:	1c59      	adds	r1, r3, #1
 800b6de:	9103      	str	r1, [sp, #12]
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	e7f0      	b.n	800b6c6 <__cvt+0xa6>

0800b6e4 <__exponent>:
 800b6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	bfb8      	it	lt
 800b6ec:	4249      	neglt	r1, r1
 800b6ee:	f803 2b02 	strb.w	r2, [r3], #2
 800b6f2:	bfb4      	ite	lt
 800b6f4:	222d      	movlt	r2, #45	; 0x2d
 800b6f6:	222b      	movge	r2, #43	; 0x2b
 800b6f8:	2909      	cmp	r1, #9
 800b6fa:	7042      	strb	r2, [r0, #1]
 800b6fc:	dd2a      	ble.n	800b754 <__exponent+0x70>
 800b6fe:	f10d 0407 	add.w	r4, sp, #7
 800b702:	46a4      	mov	ip, r4
 800b704:	270a      	movs	r7, #10
 800b706:	46a6      	mov	lr, r4
 800b708:	460a      	mov	r2, r1
 800b70a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b70e:	fb07 1516 	mls	r5, r7, r6, r1
 800b712:	3530      	adds	r5, #48	; 0x30
 800b714:	2a63      	cmp	r2, #99	; 0x63
 800b716:	f104 34ff 	add.w	r4, r4, #4294967295
 800b71a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b71e:	4631      	mov	r1, r6
 800b720:	dcf1      	bgt.n	800b706 <__exponent+0x22>
 800b722:	3130      	adds	r1, #48	; 0x30
 800b724:	f1ae 0502 	sub.w	r5, lr, #2
 800b728:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b72c:	1c44      	adds	r4, r0, #1
 800b72e:	4629      	mov	r1, r5
 800b730:	4561      	cmp	r1, ip
 800b732:	d30a      	bcc.n	800b74a <__exponent+0x66>
 800b734:	f10d 0209 	add.w	r2, sp, #9
 800b738:	eba2 020e 	sub.w	r2, r2, lr
 800b73c:	4565      	cmp	r5, ip
 800b73e:	bf88      	it	hi
 800b740:	2200      	movhi	r2, #0
 800b742:	4413      	add	r3, r2
 800b744:	1a18      	subs	r0, r3, r0
 800b746:	b003      	add	sp, #12
 800b748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b74a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b74e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b752:	e7ed      	b.n	800b730 <__exponent+0x4c>
 800b754:	2330      	movs	r3, #48	; 0x30
 800b756:	3130      	adds	r1, #48	; 0x30
 800b758:	7083      	strb	r3, [r0, #2]
 800b75a:	70c1      	strb	r1, [r0, #3]
 800b75c:	1d03      	adds	r3, r0, #4
 800b75e:	e7f1      	b.n	800b744 <__exponent+0x60>

0800b760 <_printf_float>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	ed2d 8b02 	vpush	{d8}
 800b768:	b08d      	sub	sp, #52	; 0x34
 800b76a:	460c      	mov	r4, r1
 800b76c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b770:	4616      	mov	r6, r2
 800b772:	461f      	mov	r7, r3
 800b774:	4605      	mov	r5, r0
 800b776:	f001 fd91 	bl	800d29c <_localeconv_r>
 800b77a:	f8d0 a000 	ldr.w	sl, [r0]
 800b77e:	4650      	mov	r0, sl
 800b780:	f7f4 fd9e 	bl	80002c0 <strlen>
 800b784:	2300      	movs	r3, #0
 800b786:	930a      	str	r3, [sp, #40]	; 0x28
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	9305      	str	r3, [sp, #20]
 800b78c:	f8d8 3000 	ldr.w	r3, [r8]
 800b790:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b794:	3307      	adds	r3, #7
 800b796:	f023 0307 	bic.w	r3, r3, #7
 800b79a:	f103 0208 	add.w	r2, r3, #8
 800b79e:	f8c8 2000 	str.w	r2, [r8]
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b7aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b7ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7b2:	9307      	str	r3, [sp, #28]
 800b7b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7b8:	ee08 0a10 	vmov	s16, r0
 800b7bc:	4b9f      	ldr	r3, [pc, #636]	; (800ba3c <_printf_float+0x2dc>)
 800b7be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c6:	f7f5 f9d9 	bl	8000b7c <__aeabi_dcmpun>
 800b7ca:	bb88      	cbnz	r0, 800b830 <_printf_float+0xd0>
 800b7cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7d0:	4b9a      	ldr	r3, [pc, #616]	; (800ba3c <_printf_float+0x2dc>)
 800b7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d6:	f7f5 f9b3 	bl	8000b40 <__aeabi_dcmple>
 800b7da:	bb48      	cbnz	r0, 800b830 <_printf_float+0xd0>
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	f7f5 f9a2 	bl	8000b2c <__aeabi_dcmplt>
 800b7e8:	b110      	cbz	r0, 800b7f0 <_printf_float+0x90>
 800b7ea:	232d      	movs	r3, #45	; 0x2d
 800b7ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7f0:	4b93      	ldr	r3, [pc, #588]	; (800ba40 <_printf_float+0x2e0>)
 800b7f2:	4894      	ldr	r0, [pc, #592]	; (800ba44 <_printf_float+0x2e4>)
 800b7f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b7f8:	bf94      	ite	ls
 800b7fa:	4698      	movls	r8, r3
 800b7fc:	4680      	movhi	r8, r0
 800b7fe:	2303      	movs	r3, #3
 800b800:	6123      	str	r3, [r4, #16]
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	f023 0204 	bic.w	r2, r3, #4
 800b808:	6022      	str	r2, [r4, #0]
 800b80a:	f04f 0900 	mov.w	r9, #0
 800b80e:	9700      	str	r7, [sp, #0]
 800b810:	4633      	mov	r3, r6
 800b812:	aa0b      	add	r2, sp, #44	; 0x2c
 800b814:	4621      	mov	r1, r4
 800b816:	4628      	mov	r0, r5
 800b818:	f000 f9d8 	bl	800bbcc <_printf_common>
 800b81c:	3001      	adds	r0, #1
 800b81e:	f040 8090 	bne.w	800b942 <_printf_float+0x1e2>
 800b822:	f04f 30ff 	mov.w	r0, #4294967295
 800b826:	b00d      	add	sp, #52	; 0x34
 800b828:	ecbd 8b02 	vpop	{d8}
 800b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b830:	4642      	mov	r2, r8
 800b832:	464b      	mov	r3, r9
 800b834:	4640      	mov	r0, r8
 800b836:	4649      	mov	r1, r9
 800b838:	f7f5 f9a0 	bl	8000b7c <__aeabi_dcmpun>
 800b83c:	b140      	cbz	r0, 800b850 <_printf_float+0xf0>
 800b83e:	464b      	mov	r3, r9
 800b840:	2b00      	cmp	r3, #0
 800b842:	bfbc      	itt	lt
 800b844:	232d      	movlt	r3, #45	; 0x2d
 800b846:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b84a:	487f      	ldr	r0, [pc, #508]	; (800ba48 <_printf_float+0x2e8>)
 800b84c:	4b7f      	ldr	r3, [pc, #508]	; (800ba4c <_printf_float+0x2ec>)
 800b84e:	e7d1      	b.n	800b7f4 <_printf_float+0x94>
 800b850:	6863      	ldr	r3, [r4, #4]
 800b852:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b856:	9206      	str	r2, [sp, #24]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	d13f      	bne.n	800b8dc <_printf_float+0x17c>
 800b85c:	2306      	movs	r3, #6
 800b85e:	6063      	str	r3, [r4, #4]
 800b860:	9b05      	ldr	r3, [sp, #20]
 800b862:	6861      	ldr	r1, [r4, #4]
 800b864:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b868:	2300      	movs	r3, #0
 800b86a:	9303      	str	r3, [sp, #12]
 800b86c:	ab0a      	add	r3, sp, #40	; 0x28
 800b86e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b872:	ab09      	add	r3, sp, #36	; 0x24
 800b874:	ec49 8b10 	vmov	d0, r8, r9
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	6022      	str	r2, [r4, #0]
 800b87c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b880:	4628      	mov	r0, r5
 800b882:	f7ff fecd 	bl	800b620 <__cvt>
 800b886:	9b06      	ldr	r3, [sp, #24]
 800b888:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b88a:	2b47      	cmp	r3, #71	; 0x47
 800b88c:	4680      	mov	r8, r0
 800b88e:	d108      	bne.n	800b8a2 <_printf_float+0x142>
 800b890:	1cc8      	adds	r0, r1, #3
 800b892:	db02      	blt.n	800b89a <_printf_float+0x13a>
 800b894:	6863      	ldr	r3, [r4, #4]
 800b896:	4299      	cmp	r1, r3
 800b898:	dd41      	ble.n	800b91e <_printf_float+0x1be>
 800b89a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b89e:	fa5f fb8b 	uxtb.w	fp, fp
 800b8a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8a6:	d820      	bhi.n	800b8ea <_printf_float+0x18a>
 800b8a8:	3901      	subs	r1, #1
 800b8aa:	465a      	mov	r2, fp
 800b8ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8b0:	9109      	str	r1, [sp, #36]	; 0x24
 800b8b2:	f7ff ff17 	bl	800b6e4 <__exponent>
 800b8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8b8:	1813      	adds	r3, r2, r0
 800b8ba:	2a01      	cmp	r2, #1
 800b8bc:	4681      	mov	r9, r0
 800b8be:	6123      	str	r3, [r4, #16]
 800b8c0:	dc02      	bgt.n	800b8c8 <_printf_float+0x168>
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	07d2      	lsls	r2, r2, #31
 800b8c6:	d501      	bpl.n	800b8cc <_printf_float+0x16c>
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d09c      	beq.n	800b80e <_printf_float+0xae>
 800b8d4:	232d      	movs	r3, #45	; 0x2d
 800b8d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8da:	e798      	b.n	800b80e <_printf_float+0xae>
 800b8dc:	9a06      	ldr	r2, [sp, #24]
 800b8de:	2a47      	cmp	r2, #71	; 0x47
 800b8e0:	d1be      	bne.n	800b860 <_printf_float+0x100>
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1bc      	bne.n	800b860 <_printf_float+0x100>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e7b9      	b.n	800b85e <_printf_float+0xfe>
 800b8ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b8ee:	d118      	bne.n	800b922 <_printf_float+0x1c2>
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	6863      	ldr	r3, [r4, #4]
 800b8f4:	dd0b      	ble.n	800b90e <_printf_float+0x1ae>
 800b8f6:	6121      	str	r1, [r4, #16]
 800b8f8:	b913      	cbnz	r3, 800b900 <_printf_float+0x1a0>
 800b8fa:	6822      	ldr	r2, [r4, #0]
 800b8fc:	07d0      	lsls	r0, r2, #31
 800b8fe:	d502      	bpl.n	800b906 <_printf_float+0x1a6>
 800b900:	3301      	adds	r3, #1
 800b902:	440b      	add	r3, r1
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	65a1      	str	r1, [r4, #88]	; 0x58
 800b908:	f04f 0900 	mov.w	r9, #0
 800b90c:	e7de      	b.n	800b8cc <_printf_float+0x16c>
 800b90e:	b913      	cbnz	r3, 800b916 <_printf_float+0x1b6>
 800b910:	6822      	ldr	r2, [r4, #0]
 800b912:	07d2      	lsls	r2, r2, #31
 800b914:	d501      	bpl.n	800b91a <_printf_float+0x1ba>
 800b916:	3302      	adds	r3, #2
 800b918:	e7f4      	b.n	800b904 <_printf_float+0x1a4>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e7f2      	b.n	800b904 <_printf_float+0x1a4>
 800b91e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b924:	4299      	cmp	r1, r3
 800b926:	db05      	blt.n	800b934 <_printf_float+0x1d4>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	6121      	str	r1, [r4, #16]
 800b92c:	07d8      	lsls	r0, r3, #31
 800b92e:	d5ea      	bpl.n	800b906 <_printf_float+0x1a6>
 800b930:	1c4b      	adds	r3, r1, #1
 800b932:	e7e7      	b.n	800b904 <_printf_float+0x1a4>
 800b934:	2900      	cmp	r1, #0
 800b936:	bfd4      	ite	le
 800b938:	f1c1 0202 	rsble	r2, r1, #2
 800b93c:	2201      	movgt	r2, #1
 800b93e:	4413      	add	r3, r2
 800b940:	e7e0      	b.n	800b904 <_printf_float+0x1a4>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	055a      	lsls	r2, r3, #21
 800b946:	d407      	bmi.n	800b958 <_printf_float+0x1f8>
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	4642      	mov	r2, r8
 800b94c:	4631      	mov	r1, r6
 800b94e:	4628      	mov	r0, r5
 800b950:	47b8      	blx	r7
 800b952:	3001      	adds	r0, #1
 800b954:	d12c      	bne.n	800b9b0 <_printf_float+0x250>
 800b956:	e764      	b.n	800b822 <_printf_float+0xc2>
 800b958:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b95c:	f240 80e0 	bls.w	800bb20 <_printf_float+0x3c0>
 800b960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b964:	2200      	movs	r2, #0
 800b966:	2300      	movs	r3, #0
 800b968:	f7f5 f8d6 	bl	8000b18 <__aeabi_dcmpeq>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d034      	beq.n	800b9da <_printf_float+0x27a>
 800b970:	4a37      	ldr	r2, [pc, #220]	; (800ba50 <_printf_float+0x2f0>)
 800b972:	2301      	movs	r3, #1
 800b974:	4631      	mov	r1, r6
 800b976:	4628      	mov	r0, r5
 800b978:	47b8      	blx	r7
 800b97a:	3001      	adds	r0, #1
 800b97c:	f43f af51 	beq.w	800b822 <_printf_float+0xc2>
 800b980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b984:	429a      	cmp	r2, r3
 800b986:	db02      	blt.n	800b98e <_printf_float+0x22e>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	07d8      	lsls	r0, r3, #31
 800b98c:	d510      	bpl.n	800b9b0 <_printf_float+0x250>
 800b98e:	ee18 3a10 	vmov	r3, s16
 800b992:	4652      	mov	r2, sl
 800b994:	4631      	mov	r1, r6
 800b996:	4628      	mov	r0, r5
 800b998:	47b8      	blx	r7
 800b99a:	3001      	adds	r0, #1
 800b99c:	f43f af41 	beq.w	800b822 <_printf_float+0xc2>
 800b9a0:	f04f 0800 	mov.w	r8, #0
 800b9a4:	f104 091a 	add.w	r9, r4, #26
 800b9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	4543      	cmp	r3, r8
 800b9ae:	dc09      	bgt.n	800b9c4 <_printf_float+0x264>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	079b      	lsls	r3, r3, #30
 800b9b4:	f100 8105 	bmi.w	800bbc2 <_printf_float+0x462>
 800b9b8:	68e0      	ldr	r0, [r4, #12]
 800b9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9bc:	4298      	cmp	r0, r3
 800b9be:	bfb8      	it	lt
 800b9c0:	4618      	movlt	r0, r3
 800b9c2:	e730      	b.n	800b826 <_printf_float+0xc6>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	464a      	mov	r2, r9
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	47b8      	blx	r7
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	f43f af27 	beq.w	800b822 <_printf_float+0xc2>
 800b9d4:	f108 0801 	add.w	r8, r8, #1
 800b9d8:	e7e6      	b.n	800b9a8 <_printf_float+0x248>
 800b9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	dc39      	bgt.n	800ba54 <_printf_float+0x2f4>
 800b9e0:	4a1b      	ldr	r2, [pc, #108]	; (800ba50 <_printf_float+0x2f0>)
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b8      	blx	r7
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f43f af19 	beq.w	800b822 <_printf_float+0xc2>
 800b9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	d102      	bne.n	800b9fe <_printf_float+0x29e>
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	07d9      	lsls	r1, r3, #31
 800b9fc:	d5d8      	bpl.n	800b9b0 <_printf_float+0x250>
 800b9fe:	ee18 3a10 	vmov	r3, s16
 800ba02:	4652      	mov	r2, sl
 800ba04:	4631      	mov	r1, r6
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b8      	blx	r7
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f43f af09 	beq.w	800b822 <_printf_float+0xc2>
 800ba10:	f04f 0900 	mov.w	r9, #0
 800ba14:	f104 0a1a 	add.w	sl, r4, #26
 800ba18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1a:	425b      	negs	r3, r3
 800ba1c:	454b      	cmp	r3, r9
 800ba1e:	dc01      	bgt.n	800ba24 <_printf_float+0x2c4>
 800ba20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba22:	e792      	b.n	800b94a <_printf_float+0x1ea>
 800ba24:	2301      	movs	r3, #1
 800ba26:	4652      	mov	r2, sl
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	47b8      	blx	r7
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f43f aef7 	beq.w	800b822 <_printf_float+0xc2>
 800ba34:	f109 0901 	add.w	r9, r9, #1
 800ba38:	e7ee      	b.n	800ba18 <_printf_float+0x2b8>
 800ba3a:	bf00      	nop
 800ba3c:	7fefffff 	.word	0x7fefffff
 800ba40:	0800f2a8 	.word	0x0800f2a8
 800ba44:	0800f2ac 	.word	0x0800f2ac
 800ba48:	0800f2b4 	.word	0x0800f2b4
 800ba4c:	0800f2b0 	.word	0x0800f2b0
 800ba50:	0800f2b8 	.word	0x0800f2b8
 800ba54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	bfa8      	it	ge
 800ba5c:	461a      	movge	r2, r3
 800ba5e:	2a00      	cmp	r2, #0
 800ba60:	4691      	mov	r9, r2
 800ba62:	dc37      	bgt.n	800bad4 <_printf_float+0x374>
 800ba64:	f04f 0b00 	mov.w	fp, #0
 800ba68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba6c:	f104 021a 	add.w	r2, r4, #26
 800ba70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba72:	9305      	str	r3, [sp, #20]
 800ba74:	eba3 0309 	sub.w	r3, r3, r9
 800ba78:	455b      	cmp	r3, fp
 800ba7a:	dc33      	bgt.n	800bae4 <_printf_float+0x384>
 800ba7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba80:	429a      	cmp	r2, r3
 800ba82:	db3b      	blt.n	800bafc <_printf_float+0x39c>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	07da      	lsls	r2, r3, #31
 800ba88:	d438      	bmi.n	800bafc <_printf_float+0x39c>
 800ba8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8c:	9a05      	ldr	r2, [sp, #20]
 800ba8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba90:	1a9a      	subs	r2, r3, r2
 800ba92:	eba3 0901 	sub.w	r9, r3, r1
 800ba96:	4591      	cmp	r9, r2
 800ba98:	bfa8      	it	ge
 800ba9a:	4691      	movge	r9, r2
 800ba9c:	f1b9 0f00 	cmp.w	r9, #0
 800baa0:	dc35      	bgt.n	800bb0e <_printf_float+0x3ae>
 800baa2:	f04f 0800 	mov.w	r8, #0
 800baa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baaa:	f104 0a1a 	add.w	sl, r4, #26
 800baae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bab2:	1a9b      	subs	r3, r3, r2
 800bab4:	eba3 0309 	sub.w	r3, r3, r9
 800bab8:	4543      	cmp	r3, r8
 800baba:	f77f af79 	ble.w	800b9b0 <_printf_float+0x250>
 800babe:	2301      	movs	r3, #1
 800bac0:	4652      	mov	r2, sl
 800bac2:	4631      	mov	r1, r6
 800bac4:	4628      	mov	r0, r5
 800bac6:	47b8      	blx	r7
 800bac8:	3001      	adds	r0, #1
 800baca:	f43f aeaa 	beq.w	800b822 <_printf_float+0xc2>
 800bace:	f108 0801 	add.w	r8, r8, #1
 800bad2:	e7ec      	b.n	800baae <_printf_float+0x34e>
 800bad4:	4613      	mov	r3, r2
 800bad6:	4631      	mov	r1, r6
 800bad8:	4642      	mov	r2, r8
 800bada:	4628      	mov	r0, r5
 800badc:	47b8      	blx	r7
 800bade:	3001      	adds	r0, #1
 800bae0:	d1c0      	bne.n	800ba64 <_printf_float+0x304>
 800bae2:	e69e      	b.n	800b822 <_printf_float+0xc2>
 800bae4:	2301      	movs	r3, #1
 800bae6:	4631      	mov	r1, r6
 800bae8:	4628      	mov	r0, r5
 800baea:	9205      	str	r2, [sp, #20]
 800baec:	47b8      	blx	r7
 800baee:	3001      	adds	r0, #1
 800baf0:	f43f ae97 	beq.w	800b822 <_printf_float+0xc2>
 800baf4:	9a05      	ldr	r2, [sp, #20]
 800baf6:	f10b 0b01 	add.w	fp, fp, #1
 800bafa:	e7b9      	b.n	800ba70 <_printf_float+0x310>
 800bafc:	ee18 3a10 	vmov	r3, s16
 800bb00:	4652      	mov	r2, sl
 800bb02:	4631      	mov	r1, r6
 800bb04:	4628      	mov	r0, r5
 800bb06:	47b8      	blx	r7
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d1be      	bne.n	800ba8a <_printf_float+0x32a>
 800bb0c:	e689      	b.n	800b822 <_printf_float+0xc2>
 800bb0e:	9a05      	ldr	r2, [sp, #20]
 800bb10:	464b      	mov	r3, r9
 800bb12:	4442      	add	r2, r8
 800bb14:	4631      	mov	r1, r6
 800bb16:	4628      	mov	r0, r5
 800bb18:	47b8      	blx	r7
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d1c1      	bne.n	800baa2 <_printf_float+0x342>
 800bb1e:	e680      	b.n	800b822 <_printf_float+0xc2>
 800bb20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb22:	2a01      	cmp	r2, #1
 800bb24:	dc01      	bgt.n	800bb2a <_printf_float+0x3ca>
 800bb26:	07db      	lsls	r3, r3, #31
 800bb28:	d538      	bpl.n	800bb9c <_printf_float+0x43c>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	4642      	mov	r2, r8
 800bb2e:	4631      	mov	r1, r6
 800bb30:	4628      	mov	r0, r5
 800bb32:	47b8      	blx	r7
 800bb34:	3001      	adds	r0, #1
 800bb36:	f43f ae74 	beq.w	800b822 <_printf_float+0xc2>
 800bb3a:	ee18 3a10 	vmov	r3, s16
 800bb3e:	4652      	mov	r2, sl
 800bb40:	4631      	mov	r1, r6
 800bb42:	4628      	mov	r0, r5
 800bb44:	47b8      	blx	r7
 800bb46:	3001      	adds	r0, #1
 800bb48:	f43f ae6b 	beq.w	800b822 <_printf_float+0xc2>
 800bb4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb50:	2200      	movs	r2, #0
 800bb52:	2300      	movs	r3, #0
 800bb54:	f7f4 ffe0 	bl	8000b18 <__aeabi_dcmpeq>
 800bb58:	b9d8      	cbnz	r0, 800bb92 <_printf_float+0x432>
 800bb5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb5c:	f108 0201 	add.w	r2, r8, #1
 800bb60:	3b01      	subs	r3, #1
 800bb62:	4631      	mov	r1, r6
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b8      	blx	r7
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d10e      	bne.n	800bb8a <_printf_float+0x42a>
 800bb6c:	e659      	b.n	800b822 <_printf_float+0xc2>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4652      	mov	r2, sl
 800bb72:	4631      	mov	r1, r6
 800bb74:	4628      	mov	r0, r5
 800bb76:	47b8      	blx	r7
 800bb78:	3001      	adds	r0, #1
 800bb7a:	f43f ae52 	beq.w	800b822 <_printf_float+0xc2>
 800bb7e:	f108 0801 	add.w	r8, r8, #1
 800bb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb84:	3b01      	subs	r3, #1
 800bb86:	4543      	cmp	r3, r8
 800bb88:	dcf1      	bgt.n	800bb6e <_printf_float+0x40e>
 800bb8a:	464b      	mov	r3, r9
 800bb8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb90:	e6dc      	b.n	800b94c <_printf_float+0x1ec>
 800bb92:	f04f 0800 	mov.w	r8, #0
 800bb96:	f104 0a1a 	add.w	sl, r4, #26
 800bb9a:	e7f2      	b.n	800bb82 <_printf_float+0x422>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4642      	mov	r2, r8
 800bba0:	e7df      	b.n	800bb62 <_printf_float+0x402>
 800bba2:	2301      	movs	r3, #1
 800bba4:	464a      	mov	r2, r9
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	f43f ae38 	beq.w	800b822 <_printf_float+0xc2>
 800bbb2:	f108 0801 	add.w	r8, r8, #1
 800bbb6:	68e3      	ldr	r3, [r4, #12]
 800bbb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbba:	1a5b      	subs	r3, r3, r1
 800bbbc:	4543      	cmp	r3, r8
 800bbbe:	dcf0      	bgt.n	800bba2 <_printf_float+0x442>
 800bbc0:	e6fa      	b.n	800b9b8 <_printf_float+0x258>
 800bbc2:	f04f 0800 	mov.w	r8, #0
 800bbc6:	f104 0919 	add.w	r9, r4, #25
 800bbca:	e7f4      	b.n	800bbb6 <_printf_float+0x456>

0800bbcc <_printf_common>:
 800bbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	4699      	mov	r9, r3
 800bbd4:	688a      	ldr	r2, [r1, #8]
 800bbd6:	690b      	ldr	r3, [r1, #16]
 800bbd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	bfb8      	it	lt
 800bbe0:	4613      	movlt	r3, r2
 800bbe2:	6033      	str	r3, [r6, #0]
 800bbe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbe8:	4607      	mov	r7, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	b10a      	cbz	r2, 800bbf2 <_printf_common+0x26>
 800bbee:	3301      	adds	r3, #1
 800bbf0:	6033      	str	r3, [r6, #0]
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	0699      	lsls	r1, r3, #26
 800bbf6:	bf42      	ittt	mi
 800bbf8:	6833      	ldrmi	r3, [r6, #0]
 800bbfa:	3302      	addmi	r3, #2
 800bbfc:	6033      	strmi	r3, [r6, #0]
 800bbfe:	6825      	ldr	r5, [r4, #0]
 800bc00:	f015 0506 	ands.w	r5, r5, #6
 800bc04:	d106      	bne.n	800bc14 <_printf_common+0x48>
 800bc06:	f104 0a19 	add.w	sl, r4, #25
 800bc0a:	68e3      	ldr	r3, [r4, #12]
 800bc0c:	6832      	ldr	r2, [r6, #0]
 800bc0e:	1a9b      	subs	r3, r3, r2
 800bc10:	42ab      	cmp	r3, r5
 800bc12:	dc26      	bgt.n	800bc62 <_printf_common+0x96>
 800bc14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc18:	1e13      	subs	r3, r2, #0
 800bc1a:	6822      	ldr	r2, [r4, #0]
 800bc1c:	bf18      	it	ne
 800bc1e:	2301      	movne	r3, #1
 800bc20:	0692      	lsls	r2, r2, #26
 800bc22:	d42b      	bmi.n	800bc7c <_printf_common+0xb0>
 800bc24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc28:	4649      	mov	r1, r9
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	47c0      	blx	r8
 800bc2e:	3001      	adds	r0, #1
 800bc30:	d01e      	beq.n	800bc70 <_printf_common+0xa4>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	68e5      	ldr	r5, [r4, #12]
 800bc36:	6832      	ldr	r2, [r6, #0]
 800bc38:	f003 0306 	and.w	r3, r3, #6
 800bc3c:	2b04      	cmp	r3, #4
 800bc3e:	bf08      	it	eq
 800bc40:	1aad      	subeq	r5, r5, r2
 800bc42:	68a3      	ldr	r3, [r4, #8]
 800bc44:	6922      	ldr	r2, [r4, #16]
 800bc46:	bf0c      	ite	eq
 800bc48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc4c:	2500      	movne	r5, #0
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	bfc4      	itt	gt
 800bc52:	1a9b      	subgt	r3, r3, r2
 800bc54:	18ed      	addgt	r5, r5, r3
 800bc56:	2600      	movs	r6, #0
 800bc58:	341a      	adds	r4, #26
 800bc5a:	42b5      	cmp	r5, r6
 800bc5c:	d11a      	bne.n	800bc94 <_printf_common+0xc8>
 800bc5e:	2000      	movs	r0, #0
 800bc60:	e008      	b.n	800bc74 <_printf_common+0xa8>
 800bc62:	2301      	movs	r3, #1
 800bc64:	4652      	mov	r2, sl
 800bc66:	4649      	mov	r1, r9
 800bc68:	4638      	mov	r0, r7
 800bc6a:	47c0      	blx	r8
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d103      	bne.n	800bc78 <_printf_common+0xac>
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc78:	3501      	adds	r5, #1
 800bc7a:	e7c6      	b.n	800bc0a <_printf_common+0x3e>
 800bc7c:	18e1      	adds	r1, r4, r3
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	2030      	movs	r0, #48	; 0x30
 800bc82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc86:	4422      	add	r2, r4
 800bc88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc90:	3302      	adds	r3, #2
 800bc92:	e7c7      	b.n	800bc24 <_printf_common+0x58>
 800bc94:	2301      	movs	r3, #1
 800bc96:	4622      	mov	r2, r4
 800bc98:	4649      	mov	r1, r9
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	47c0      	blx	r8
 800bc9e:	3001      	adds	r0, #1
 800bca0:	d0e6      	beq.n	800bc70 <_printf_common+0xa4>
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7d9      	b.n	800bc5a <_printf_common+0x8e>
	...

0800bca8 <_printf_i>:
 800bca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcac:	7e0f      	ldrb	r7, [r1, #24]
 800bcae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcb0:	2f78      	cmp	r7, #120	; 0x78
 800bcb2:	4691      	mov	r9, r2
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	469a      	mov	sl, r3
 800bcba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcbe:	d807      	bhi.n	800bcd0 <_printf_i+0x28>
 800bcc0:	2f62      	cmp	r7, #98	; 0x62
 800bcc2:	d80a      	bhi.n	800bcda <_printf_i+0x32>
 800bcc4:	2f00      	cmp	r7, #0
 800bcc6:	f000 80d8 	beq.w	800be7a <_printf_i+0x1d2>
 800bcca:	2f58      	cmp	r7, #88	; 0x58
 800bccc:	f000 80a3 	beq.w	800be16 <_printf_i+0x16e>
 800bcd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcd8:	e03a      	b.n	800bd50 <_printf_i+0xa8>
 800bcda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcde:	2b15      	cmp	r3, #21
 800bce0:	d8f6      	bhi.n	800bcd0 <_printf_i+0x28>
 800bce2:	a101      	add	r1, pc, #4	; (adr r1, 800bce8 <_printf_i+0x40>)
 800bce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bce8:	0800bd41 	.word	0x0800bd41
 800bcec:	0800bd55 	.word	0x0800bd55
 800bcf0:	0800bcd1 	.word	0x0800bcd1
 800bcf4:	0800bcd1 	.word	0x0800bcd1
 800bcf8:	0800bcd1 	.word	0x0800bcd1
 800bcfc:	0800bcd1 	.word	0x0800bcd1
 800bd00:	0800bd55 	.word	0x0800bd55
 800bd04:	0800bcd1 	.word	0x0800bcd1
 800bd08:	0800bcd1 	.word	0x0800bcd1
 800bd0c:	0800bcd1 	.word	0x0800bcd1
 800bd10:	0800bcd1 	.word	0x0800bcd1
 800bd14:	0800be61 	.word	0x0800be61
 800bd18:	0800bd85 	.word	0x0800bd85
 800bd1c:	0800be43 	.word	0x0800be43
 800bd20:	0800bcd1 	.word	0x0800bcd1
 800bd24:	0800bcd1 	.word	0x0800bcd1
 800bd28:	0800be83 	.word	0x0800be83
 800bd2c:	0800bcd1 	.word	0x0800bcd1
 800bd30:	0800bd85 	.word	0x0800bd85
 800bd34:	0800bcd1 	.word	0x0800bcd1
 800bd38:	0800bcd1 	.word	0x0800bcd1
 800bd3c:	0800be4b 	.word	0x0800be4b
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	1d1a      	adds	r2, r3, #4
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	602a      	str	r2, [r5, #0]
 800bd48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd50:	2301      	movs	r3, #1
 800bd52:	e0a3      	b.n	800be9c <_printf_i+0x1f4>
 800bd54:	6820      	ldr	r0, [r4, #0]
 800bd56:	6829      	ldr	r1, [r5, #0]
 800bd58:	0606      	lsls	r6, r0, #24
 800bd5a:	f101 0304 	add.w	r3, r1, #4
 800bd5e:	d50a      	bpl.n	800bd76 <_printf_i+0xce>
 800bd60:	680e      	ldr	r6, [r1, #0]
 800bd62:	602b      	str	r3, [r5, #0]
 800bd64:	2e00      	cmp	r6, #0
 800bd66:	da03      	bge.n	800bd70 <_printf_i+0xc8>
 800bd68:	232d      	movs	r3, #45	; 0x2d
 800bd6a:	4276      	negs	r6, r6
 800bd6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd70:	485e      	ldr	r0, [pc, #376]	; (800beec <_printf_i+0x244>)
 800bd72:	230a      	movs	r3, #10
 800bd74:	e019      	b.n	800bdaa <_printf_i+0x102>
 800bd76:	680e      	ldr	r6, [r1, #0]
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd7e:	bf18      	it	ne
 800bd80:	b236      	sxthne	r6, r6
 800bd82:	e7ef      	b.n	800bd64 <_printf_i+0xbc>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	6820      	ldr	r0, [r4, #0]
 800bd88:	1d19      	adds	r1, r3, #4
 800bd8a:	6029      	str	r1, [r5, #0]
 800bd8c:	0601      	lsls	r1, r0, #24
 800bd8e:	d501      	bpl.n	800bd94 <_printf_i+0xec>
 800bd90:	681e      	ldr	r6, [r3, #0]
 800bd92:	e002      	b.n	800bd9a <_printf_i+0xf2>
 800bd94:	0646      	lsls	r6, r0, #25
 800bd96:	d5fb      	bpl.n	800bd90 <_printf_i+0xe8>
 800bd98:	881e      	ldrh	r6, [r3, #0]
 800bd9a:	4854      	ldr	r0, [pc, #336]	; (800beec <_printf_i+0x244>)
 800bd9c:	2f6f      	cmp	r7, #111	; 0x6f
 800bd9e:	bf0c      	ite	eq
 800bda0:	2308      	moveq	r3, #8
 800bda2:	230a      	movne	r3, #10
 800bda4:	2100      	movs	r1, #0
 800bda6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdaa:	6865      	ldr	r5, [r4, #4]
 800bdac:	60a5      	str	r5, [r4, #8]
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	bfa2      	ittt	ge
 800bdb2:	6821      	ldrge	r1, [r4, #0]
 800bdb4:	f021 0104 	bicge.w	r1, r1, #4
 800bdb8:	6021      	strge	r1, [r4, #0]
 800bdba:	b90e      	cbnz	r6, 800bdc0 <_printf_i+0x118>
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	d04d      	beq.n	800be5c <_printf_i+0x1b4>
 800bdc0:	4615      	mov	r5, r2
 800bdc2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdc6:	fb03 6711 	mls	r7, r3, r1, r6
 800bdca:	5dc7      	ldrb	r7, [r0, r7]
 800bdcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdd0:	4637      	mov	r7, r6
 800bdd2:	42bb      	cmp	r3, r7
 800bdd4:	460e      	mov	r6, r1
 800bdd6:	d9f4      	bls.n	800bdc2 <_printf_i+0x11a>
 800bdd8:	2b08      	cmp	r3, #8
 800bdda:	d10b      	bne.n	800bdf4 <_printf_i+0x14c>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	07de      	lsls	r6, r3, #31
 800bde0:	d508      	bpl.n	800bdf4 <_printf_i+0x14c>
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	6861      	ldr	r1, [r4, #4]
 800bde6:	4299      	cmp	r1, r3
 800bde8:	bfde      	ittt	le
 800bdea:	2330      	movle	r3, #48	; 0x30
 800bdec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdf4:	1b52      	subs	r2, r2, r5
 800bdf6:	6122      	str	r2, [r4, #16]
 800bdf8:	f8cd a000 	str.w	sl, [sp]
 800bdfc:	464b      	mov	r3, r9
 800bdfe:	aa03      	add	r2, sp, #12
 800be00:	4621      	mov	r1, r4
 800be02:	4640      	mov	r0, r8
 800be04:	f7ff fee2 	bl	800bbcc <_printf_common>
 800be08:	3001      	adds	r0, #1
 800be0a:	d14c      	bne.n	800bea6 <_printf_i+0x1fe>
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
 800be10:	b004      	add	sp, #16
 800be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be16:	4835      	ldr	r0, [pc, #212]	; (800beec <_printf_i+0x244>)
 800be18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be1c:	6829      	ldr	r1, [r5, #0]
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	f851 6b04 	ldr.w	r6, [r1], #4
 800be24:	6029      	str	r1, [r5, #0]
 800be26:	061d      	lsls	r5, r3, #24
 800be28:	d514      	bpl.n	800be54 <_printf_i+0x1ac>
 800be2a:	07df      	lsls	r7, r3, #31
 800be2c:	bf44      	itt	mi
 800be2e:	f043 0320 	orrmi.w	r3, r3, #32
 800be32:	6023      	strmi	r3, [r4, #0]
 800be34:	b91e      	cbnz	r6, 800be3e <_printf_i+0x196>
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	f023 0320 	bic.w	r3, r3, #32
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	2310      	movs	r3, #16
 800be40:	e7b0      	b.n	800bda4 <_printf_i+0xfc>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	f043 0320 	orr.w	r3, r3, #32
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	2378      	movs	r3, #120	; 0x78
 800be4c:	4828      	ldr	r0, [pc, #160]	; (800bef0 <_printf_i+0x248>)
 800be4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be52:	e7e3      	b.n	800be1c <_printf_i+0x174>
 800be54:	0659      	lsls	r1, r3, #25
 800be56:	bf48      	it	mi
 800be58:	b2b6      	uxthmi	r6, r6
 800be5a:	e7e6      	b.n	800be2a <_printf_i+0x182>
 800be5c:	4615      	mov	r5, r2
 800be5e:	e7bb      	b.n	800bdd8 <_printf_i+0x130>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	6826      	ldr	r6, [r4, #0]
 800be64:	6961      	ldr	r1, [r4, #20]
 800be66:	1d18      	adds	r0, r3, #4
 800be68:	6028      	str	r0, [r5, #0]
 800be6a:	0635      	lsls	r5, r6, #24
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	d501      	bpl.n	800be74 <_printf_i+0x1cc>
 800be70:	6019      	str	r1, [r3, #0]
 800be72:	e002      	b.n	800be7a <_printf_i+0x1d2>
 800be74:	0670      	lsls	r0, r6, #25
 800be76:	d5fb      	bpl.n	800be70 <_printf_i+0x1c8>
 800be78:	8019      	strh	r1, [r3, #0]
 800be7a:	2300      	movs	r3, #0
 800be7c:	6123      	str	r3, [r4, #16]
 800be7e:	4615      	mov	r5, r2
 800be80:	e7ba      	b.n	800bdf8 <_printf_i+0x150>
 800be82:	682b      	ldr	r3, [r5, #0]
 800be84:	1d1a      	adds	r2, r3, #4
 800be86:	602a      	str	r2, [r5, #0]
 800be88:	681d      	ldr	r5, [r3, #0]
 800be8a:	6862      	ldr	r2, [r4, #4]
 800be8c:	2100      	movs	r1, #0
 800be8e:	4628      	mov	r0, r5
 800be90:	f7f4 f9c6 	bl	8000220 <memchr>
 800be94:	b108      	cbz	r0, 800be9a <_printf_i+0x1f2>
 800be96:	1b40      	subs	r0, r0, r5
 800be98:	6060      	str	r0, [r4, #4]
 800be9a:	6863      	ldr	r3, [r4, #4]
 800be9c:	6123      	str	r3, [r4, #16]
 800be9e:	2300      	movs	r3, #0
 800bea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bea4:	e7a8      	b.n	800bdf8 <_printf_i+0x150>
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	462a      	mov	r2, r5
 800beaa:	4649      	mov	r1, r9
 800beac:	4640      	mov	r0, r8
 800beae:	47d0      	blx	sl
 800beb0:	3001      	adds	r0, #1
 800beb2:	d0ab      	beq.n	800be0c <_printf_i+0x164>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	079b      	lsls	r3, r3, #30
 800beb8:	d413      	bmi.n	800bee2 <_printf_i+0x23a>
 800beba:	68e0      	ldr	r0, [r4, #12]
 800bebc:	9b03      	ldr	r3, [sp, #12]
 800bebe:	4298      	cmp	r0, r3
 800bec0:	bfb8      	it	lt
 800bec2:	4618      	movlt	r0, r3
 800bec4:	e7a4      	b.n	800be10 <_printf_i+0x168>
 800bec6:	2301      	movs	r3, #1
 800bec8:	4632      	mov	r2, r6
 800beca:	4649      	mov	r1, r9
 800becc:	4640      	mov	r0, r8
 800bece:	47d0      	blx	sl
 800bed0:	3001      	adds	r0, #1
 800bed2:	d09b      	beq.n	800be0c <_printf_i+0x164>
 800bed4:	3501      	adds	r5, #1
 800bed6:	68e3      	ldr	r3, [r4, #12]
 800bed8:	9903      	ldr	r1, [sp, #12]
 800beda:	1a5b      	subs	r3, r3, r1
 800bedc:	42ab      	cmp	r3, r5
 800bede:	dcf2      	bgt.n	800bec6 <_printf_i+0x21e>
 800bee0:	e7eb      	b.n	800beba <_printf_i+0x212>
 800bee2:	2500      	movs	r5, #0
 800bee4:	f104 0619 	add.w	r6, r4, #25
 800bee8:	e7f5      	b.n	800bed6 <_printf_i+0x22e>
 800beea:	bf00      	nop
 800beec:	0800f2ba 	.word	0x0800f2ba
 800bef0:	0800f2cb 	.word	0x0800f2cb

0800bef4 <iprintf>:
 800bef4:	b40f      	push	{r0, r1, r2, r3}
 800bef6:	4b0a      	ldr	r3, [pc, #40]	; (800bf20 <iprintf+0x2c>)
 800bef8:	b513      	push	{r0, r1, r4, lr}
 800befa:	681c      	ldr	r4, [r3, #0]
 800befc:	b124      	cbz	r4, 800bf08 <iprintf+0x14>
 800befe:	69a3      	ldr	r3, [r4, #24]
 800bf00:	b913      	cbnz	r3, 800bf08 <iprintf+0x14>
 800bf02:	4620      	mov	r0, r4
 800bf04:	f001 f92c 	bl	800d160 <__sinit>
 800bf08:	ab05      	add	r3, sp, #20
 800bf0a:	9a04      	ldr	r2, [sp, #16]
 800bf0c:	68a1      	ldr	r1, [r4, #8]
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	4620      	mov	r0, r4
 800bf12:	f001 fdff 	bl	800db14 <_vfiprintf_r>
 800bf16:	b002      	add	sp, #8
 800bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf1c:	b004      	add	sp, #16
 800bf1e:	4770      	bx	lr
 800bf20:	20000184 	.word	0x20000184

0800bf24 <_puts_r>:
 800bf24:	b570      	push	{r4, r5, r6, lr}
 800bf26:	460e      	mov	r6, r1
 800bf28:	4605      	mov	r5, r0
 800bf2a:	b118      	cbz	r0, 800bf34 <_puts_r+0x10>
 800bf2c:	6983      	ldr	r3, [r0, #24]
 800bf2e:	b90b      	cbnz	r3, 800bf34 <_puts_r+0x10>
 800bf30:	f001 f916 	bl	800d160 <__sinit>
 800bf34:	69ab      	ldr	r3, [r5, #24]
 800bf36:	68ac      	ldr	r4, [r5, #8]
 800bf38:	b913      	cbnz	r3, 800bf40 <_puts_r+0x1c>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f001 f910 	bl	800d160 <__sinit>
 800bf40:	4b2c      	ldr	r3, [pc, #176]	; (800bff4 <_puts_r+0xd0>)
 800bf42:	429c      	cmp	r4, r3
 800bf44:	d120      	bne.n	800bf88 <_puts_r+0x64>
 800bf46:	686c      	ldr	r4, [r5, #4]
 800bf48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf4a:	07db      	lsls	r3, r3, #31
 800bf4c:	d405      	bmi.n	800bf5a <_puts_r+0x36>
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	0598      	lsls	r0, r3, #22
 800bf52:	d402      	bmi.n	800bf5a <_puts_r+0x36>
 800bf54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf56:	f001 f9a6 	bl	800d2a6 <__retarget_lock_acquire_recursive>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	0719      	lsls	r1, r3, #28
 800bf5e:	d51d      	bpl.n	800bf9c <_puts_r+0x78>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	b1db      	cbz	r3, 800bf9c <_puts_r+0x78>
 800bf64:	3e01      	subs	r6, #1
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	60a3      	str	r3, [r4, #8]
 800bf70:	bb39      	cbnz	r1, 800bfc2 <_puts_r+0x9e>
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	da38      	bge.n	800bfe8 <_puts_r+0xc4>
 800bf76:	4622      	mov	r2, r4
 800bf78:	210a      	movs	r1, #10
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f000 f89c 	bl	800c0b8 <__swbuf_r>
 800bf80:	3001      	adds	r0, #1
 800bf82:	d011      	beq.n	800bfa8 <_puts_r+0x84>
 800bf84:	250a      	movs	r5, #10
 800bf86:	e011      	b.n	800bfac <_puts_r+0x88>
 800bf88:	4b1b      	ldr	r3, [pc, #108]	; (800bff8 <_puts_r+0xd4>)
 800bf8a:	429c      	cmp	r4, r3
 800bf8c:	d101      	bne.n	800bf92 <_puts_r+0x6e>
 800bf8e:	68ac      	ldr	r4, [r5, #8]
 800bf90:	e7da      	b.n	800bf48 <_puts_r+0x24>
 800bf92:	4b1a      	ldr	r3, [pc, #104]	; (800bffc <_puts_r+0xd8>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	bf08      	it	eq
 800bf98:	68ec      	ldreq	r4, [r5, #12]
 800bf9a:	e7d5      	b.n	800bf48 <_puts_r+0x24>
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f000 f8dc 	bl	800c15c <__swsetup_r>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d0dd      	beq.n	800bf64 <_puts_r+0x40>
 800bfa8:	f04f 35ff 	mov.w	r5, #4294967295
 800bfac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfae:	07da      	lsls	r2, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <_puts_r+0x9a>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	059b      	lsls	r3, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <_puts_r+0x9a>
 800bfb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfba:	f001 f975 	bl	800d2a8 <__retarget_lock_release_recursive>
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	bd70      	pop	{r4, r5, r6, pc}
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da04      	bge.n	800bfd0 <_puts_r+0xac>
 800bfc6:	69a2      	ldr	r2, [r4, #24]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	dc06      	bgt.n	800bfda <_puts_r+0xb6>
 800bfcc:	290a      	cmp	r1, #10
 800bfce:	d004      	beq.n	800bfda <_puts_r+0xb6>
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	6022      	str	r2, [r4, #0]
 800bfd6:	7019      	strb	r1, [r3, #0]
 800bfd8:	e7c5      	b.n	800bf66 <_puts_r+0x42>
 800bfda:	4622      	mov	r2, r4
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f000 f86b 	bl	800c0b8 <__swbuf_r>
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d1bf      	bne.n	800bf66 <_puts_r+0x42>
 800bfe6:	e7df      	b.n	800bfa8 <_puts_r+0x84>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	250a      	movs	r5, #10
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	6022      	str	r2, [r4, #0]
 800bff0:	701d      	strb	r5, [r3, #0]
 800bff2:	e7db      	b.n	800bfac <_puts_r+0x88>
 800bff4:	0800f38c 	.word	0x0800f38c
 800bff8:	0800f3ac 	.word	0x0800f3ac
 800bffc:	0800f36c 	.word	0x0800f36c

0800c000 <puts>:
 800c000:	4b02      	ldr	r3, [pc, #8]	; (800c00c <puts+0xc>)
 800c002:	4601      	mov	r1, r0
 800c004:	6818      	ldr	r0, [r3, #0]
 800c006:	f7ff bf8d 	b.w	800bf24 <_puts_r>
 800c00a:	bf00      	nop
 800c00c:	20000184 	.word	0x20000184

0800c010 <_sbrk_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4d06      	ldr	r5, [pc, #24]	; (800c02c <_sbrk_r+0x1c>)
 800c014:	2300      	movs	r3, #0
 800c016:	4604      	mov	r4, r0
 800c018:	4608      	mov	r0, r1
 800c01a:	602b      	str	r3, [r5, #0]
 800c01c:	f7f8 f9be 	bl	800439c <_sbrk>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	d102      	bne.n	800c02a <_sbrk_r+0x1a>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	b103      	cbz	r3, 800c02a <_sbrk_r+0x1a>
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	20002974 	.word	0x20002974

0800c030 <_raise_r>:
 800c030:	291f      	cmp	r1, #31
 800c032:	b538      	push	{r3, r4, r5, lr}
 800c034:	4604      	mov	r4, r0
 800c036:	460d      	mov	r5, r1
 800c038:	d904      	bls.n	800c044 <_raise_r+0x14>
 800c03a:	2316      	movs	r3, #22
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	f04f 30ff 	mov.w	r0, #4294967295
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c046:	b112      	cbz	r2, 800c04e <_raise_r+0x1e>
 800c048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c04c:	b94b      	cbnz	r3, 800c062 <_raise_r+0x32>
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 f830 	bl	800c0b4 <_getpid_r>
 800c054:	462a      	mov	r2, r5
 800c056:	4601      	mov	r1, r0
 800c058:	4620      	mov	r0, r4
 800c05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c05e:	f000 b817 	b.w	800c090 <_kill_r>
 800c062:	2b01      	cmp	r3, #1
 800c064:	d00a      	beq.n	800c07c <_raise_r+0x4c>
 800c066:	1c59      	adds	r1, r3, #1
 800c068:	d103      	bne.n	800c072 <_raise_r+0x42>
 800c06a:	2316      	movs	r3, #22
 800c06c:	6003      	str	r3, [r0, #0]
 800c06e:	2001      	movs	r0, #1
 800c070:	e7e7      	b.n	800c042 <_raise_r+0x12>
 800c072:	2400      	movs	r4, #0
 800c074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c078:	4628      	mov	r0, r5
 800c07a:	4798      	blx	r3
 800c07c:	2000      	movs	r0, #0
 800c07e:	e7e0      	b.n	800c042 <_raise_r+0x12>

0800c080 <raise>:
 800c080:	4b02      	ldr	r3, [pc, #8]	; (800c08c <raise+0xc>)
 800c082:	4601      	mov	r1, r0
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	f7ff bfd3 	b.w	800c030 <_raise_r>
 800c08a:	bf00      	nop
 800c08c:	20000184 	.word	0x20000184

0800c090 <_kill_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4d07      	ldr	r5, [pc, #28]	; (800c0b0 <_kill_r+0x20>)
 800c094:	2300      	movs	r3, #0
 800c096:	4604      	mov	r4, r0
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	602b      	str	r3, [r5, #0]
 800c09e:	f7f8 f93b 	bl	8004318 <_kill>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d102      	bne.n	800c0ac <_kill_r+0x1c>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b103      	cbz	r3, 800c0ac <_kill_r+0x1c>
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20002974 	.word	0x20002974

0800c0b4 <_getpid_r>:
 800c0b4:	f7f8 b92e 	b.w	8004314 <_getpid>

0800c0b8 <__swbuf_r>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	460e      	mov	r6, r1
 800c0bc:	4614      	mov	r4, r2
 800c0be:	4605      	mov	r5, r0
 800c0c0:	b118      	cbz	r0, 800c0ca <__swbuf_r+0x12>
 800c0c2:	6983      	ldr	r3, [r0, #24]
 800c0c4:	b90b      	cbnz	r3, 800c0ca <__swbuf_r+0x12>
 800c0c6:	f001 f84b 	bl	800d160 <__sinit>
 800c0ca:	4b21      	ldr	r3, [pc, #132]	; (800c150 <__swbuf_r+0x98>)
 800c0cc:	429c      	cmp	r4, r3
 800c0ce:	d12b      	bne.n	800c128 <__swbuf_r+0x70>
 800c0d0:	686c      	ldr	r4, [r5, #4]
 800c0d2:	69a3      	ldr	r3, [r4, #24]
 800c0d4:	60a3      	str	r3, [r4, #8]
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	071a      	lsls	r2, r3, #28
 800c0da:	d52f      	bpl.n	800c13c <__swbuf_r+0x84>
 800c0dc:	6923      	ldr	r3, [r4, #16]
 800c0de:	b36b      	cbz	r3, 800c13c <__swbuf_r+0x84>
 800c0e0:	6923      	ldr	r3, [r4, #16]
 800c0e2:	6820      	ldr	r0, [r4, #0]
 800c0e4:	1ac0      	subs	r0, r0, r3
 800c0e6:	6963      	ldr	r3, [r4, #20]
 800c0e8:	b2f6      	uxtb	r6, r6
 800c0ea:	4283      	cmp	r3, r0
 800c0ec:	4637      	mov	r7, r6
 800c0ee:	dc04      	bgt.n	800c0fa <__swbuf_r+0x42>
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f000 ffa0 	bl	800d038 <_fflush_r>
 800c0f8:	bb30      	cbnz	r0, 800c148 <__swbuf_r+0x90>
 800c0fa:	68a3      	ldr	r3, [r4, #8]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	60a3      	str	r3, [r4, #8]
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	6022      	str	r2, [r4, #0]
 800c106:	701e      	strb	r6, [r3, #0]
 800c108:	6963      	ldr	r3, [r4, #20]
 800c10a:	3001      	adds	r0, #1
 800c10c:	4283      	cmp	r3, r0
 800c10e:	d004      	beq.n	800c11a <__swbuf_r+0x62>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	07db      	lsls	r3, r3, #31
 800c114:	d506      	bpl.n	800c124 <__swbuf_r+0x6c>
 800c116:	2e0a      	cmp	r6, #10
 800c118:	d104      	bne.n	800c124 <__swbuf_r+0x6c>
 800c11a:	4621      	mov	r1, r4
 800c11c:	4628      	mov	r0, r5
 800c11e:	f000 ff8b 	bl	800d038 <_fflush_r>
 800c122:	b988      	cbnz	r0, 800c148 <__swbuf_r+0x90>
 800c124:	4638      	mov	r0, r7
 800c126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c128:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <__swbuf_r+0x9c>)
 800c12a:	429c      	cmp	r4, r3
 800c12c:	d101      	bne.n	800c132 <__swbuf_r+0x7a>
 800c12e:	68ac      	ldr	r4, [r5, #8]
 800c130:	e7cf      	b.n	800c0d2 <__swbuf_r+0x1a>
 800c132:	4b09      	ldr	r3, [pc, #36]	; (800c158 <__swbuf_r+0xa0>)
 800c134:	429c      	cmp	r4, r3
 800c136:	bf08      	it	eq
 800c138:	68ec      	ldreq	r4, [r5, #12]
 800c13a:	e7ca      	b.n	800c0d2 <__swbuf_r+0x1a>
 800c13c:	4621      	mov	r1, r4
 800c13e:	4628      	mov	r0, r5
 800c140:	f000 f80c 	bl	800c15c <__swsetup_r>
 800c144:	2800      	cmp	r0, #0
 800c146:	d0cb      	beq.n	800c0e0 <__swbuf_r+0x28>
 800c148:	f04f 37ff 	mov.w	r7, #4294967295
 800c14c:	e7ea      	b.n	800c124 <__swbuf_r+0x6c>
 800c14e:	bf00      	nop
 800c150:	0800f38c 	.word	0x0800f38c
 800c154:	0800f3ac 	.word	0x0800f3ac
 800c158:	0800f36c 	.word	0x0800f36c

0800c15c <__swsetup_r>:
 800c15c:	4b32      	ldr	r3, [pc, #200]	; (800c228 <__swsetup_r+0xcc>)
 800c15e:	b570      	push	{r4, r5, r6, lr}
 800c160:	681d      	ldr	r5, [r3, #0]
 800c162:	4606      	mov	r6, r0
 800c164:	460c      	mov	r4, r1
 800c166:	b125      	cbz	r5, 800c172 <__swsetup_r+0x16>
 800c168:	69ab      	ldr	r3, [r5, #24]
 800c16a:	b913      	cbnz	r3, 800c172 <__swsetup_r+0x16>
 800c16c:	4628      	mov	r0, r5
 800c16e:	f000 fff7 	bl	800d160 <__sinit>
 800c172:	4b2e      	ldr	r3, [pc, #184]	; (800c22c <__swsetup_r+0xd0>)
 800c174:	429c      	cmp	r4, r3
 800c176:	d10f      	bne.n	800c198 <__swsetup_r+0x3c>
 800c178:	686c      	ldr	r4, [r5, #4]
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c180:	0719      	lsls	r1, r3, #28
 800c182:	d42c      	bmi.n	800c1de <__swsetup_r+0x82>
 800c184:	06dd      	lsls	r5, r3, #27
 800c186:	d411      	bmi.n	800c1ac <__swsetup_r+0x50>
 800c188:	2309      	movs	r3, #9
 800c18a:	6033      	str	r3, [r6, #0]
 800c18c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c190:	81a3      	strh	r3, [r4, #12]
 800c192:	f04f 30ff 	mov.w	r0, #4294967295
 800c196:	e03e      	b.n	800c216 <__swsetup_r+0xba>
 800c198:	4b25      	ldr	r3, [pc, #148]	; (800c230 <__swsetup_r+0xd4>)
 800c19a:	429c      	cmp	r4, r3
 800c19c:	d101      	bne.n	800c1a2 <__swsetup_r+0x46>
 800c19e:	68ac      	ldr	r4, [r5, #8]
 800c1a0:	e7eb      	b.n	800c17a <__swsetup_r+0x1e>
 800c1a2:	4b24      	ldr	r3, [pc, #144]	; (800c234 <__swsetup_r+0xd8>)
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	bf08      	it	eq
 800c1a8:	68ec      	ldreq	r4, [r5, #12]
 800c1aa:	e7e6      	b.n	800c17a <__swsetup_r+0x1e>
 800c1ac:	0758      	lsls	r0, r3, #29
 800c1ae:	d512      	bpl.n	800c1d6 <__swsetup_r+0x7a>
 800c1b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1b2:	b141      	cbz	r1, 800c1c6 <__swsetup_r+0x6a>
 800c1b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1b8:	4299      	cmp	r1, r3
 800c1ba:	d002      	beq.n	800c1c2 <__swsetup_r+0x66>
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff f94f 	bl	800b460 <_free_r>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1cc:	81a3      	strh	r3, [r4, #12]
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	6063      	str	r3, [r4, #4]
 800c1d2:	6923      	ldr	r3, [r4, #16]
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	f043 0308 	orr.w	r3, r3, #8
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	b94b      	cbnz	r3, 800c1f6 <__swsetup_r+0x9a>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ec:	d003      	beq.n	800c1f6 <__swsetup_r+0x9a>
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f001 f87f 	bl	800d2f4 <__smakebuf_r>
 800c1f6:	89a0      	ldrh	r0, [r4, #12]
 800c1f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1fc:	f010 0301 	ands.w	r3, r0, #1
 800c200:	d00a      	beq.n	800c218 <__swsetup_r+0xbc>
 800c202:	2300      	movs	r3, #0
 800c204:	60a3      	str	r3, [r4, #8]
 800c206:	6963      	ldr	r3, [r4, #20]
 800c208:	425b      	negs	r3, r3
 800c20a:	61a3      	str	r3, [r4, #24]
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	b943      	cbnz	r3, 800c222 <__swsetup_r+0xc6>
 800c210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c214:	d1ba      	bne.n	800c18c <__swsetup_r+0x30>
 800c216:	bd70      	pop	{r4, r5, r6, pc}
 800c218:	0781      	lsls	r1, r0, #30
 800c21a:	bf58      	it	pl
 800c21c:	6963      	ldrpl	r3, [r4, #20]
 800c21e:	60a3      	str	r3, [r4, #8]
 800c220:	e7f4      	b.n	800c20c <__swsetup_r+0xb0>
 800c222:	2000      	movs	r0, #0
 800c224:	e7f7      	b.n	800c216 <__swsetup_r+0xba>
 800c226:	bf00      	nop
 800c228:	20000184 	.word	0x20000184
 800c22c:	0800f38c 	.word	0x0800f38c
 800c230:	0800f3ac 	.word	0x0800f3ac
 800c234:	0800f36c 	.word	0x0800f36c

0800c238 <quorem>:
 800c238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	6903      	ldr	r3, [r0, #16]
 800c23e:	690c      	ldr	r4, [r1, #16]
 800c240:	42a3      	cmp	r3, r4
 800c242:	4607      	mov	r7, r0
 800c244:	f2c0 8081 	blt.w	800c34a <quorem+0x112>
 800c248:	3c01      	subs	r4, #1
 800c24a:	f101 0814 	add.w	r8, r1, #20
 800c24e:	f100 0514 	add.w	r5, r0, #20
 800c252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c25c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c260:	3301      	adds	r3, #1
 800c262:	429a      	cmp	r2, r3
 800c264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c26c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c270:	d331      	bcc.n	800c2d6 <quorem+0x9e>
 800c272:	f04f 0e00 	mov.w	lr, #0
 800c276:	4640      	mov	r0, r8
 800c278:	46ac      	mov	ip, r5
 800c27a:	46f2      	mov	sl, lr
 800c27c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c280:	b293      	uxth	r3, r2
 800c282:	fb06 e303 	mla	r3, r6, r3, lr
 800c286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	ebaa 0303 	sub.w	r3, sl, r3
 800c290:	f8dc a000 	ldr.w	sl, [ip]
 800c294:	0c12      	lsrs	r2, r2, #16
 800c296:	fa13 f38a 	uxtah	r3, r3, sl
 800c29a:	fb06 e202 	mla	r2, r6, r2, lr
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	9b00      	ldr	r3, [sp, #0]
 800c2a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2a6:	b292      	uxth	r2, r2
 800c2a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2b4:	4581      	cmp	r9, r0
 800c2b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2ba:	f84c 3b04 	str.w	r3, [ip], #4
 800c2be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2c2:	d2db      	bcs.n	800c27c <quorem+0x44>
 800c2c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2c8:	b92b      	cbnz	r3, 800c2d6 <quorem+0x9e>
 800c2ca:	9b01      	ldr	r3, [sp, #4]
 800c2cc:	3b04      	subs	r3, #4
 800c2ce:	429d      	cmp	r5, r3
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	d32e      	bcc.n	800c332 <quorem+0xfa>
 800c2d4:	613c      	str	r4, [r7, #16]
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	f001 fada 	bl	800d890 <__mcmp>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	db24      	blt.n	800c32a <quorem+0xf2>
 800c2e0:	3601      	adds	r6, #1
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f04f 0c00 	mov.w	ip, #0
 800c2e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2ec:	f8d0 e000 	ldr.w	lr, [r0]
 800c2f0:	b293      	uxth	r3, r2
 800c2f2:	ebac 0303 	sub.w	r3, ip, r3
 800c2f6:	0c12      	lsrs	r2, r2, #16
 800c2f8:	fa13 f38e 	uxtah	r3, r3, lr
 800c2fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c304:	b29b      	uxth	r3, r3
 800c306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c30a:	45c1      	cmp	r9, r8
 800c30c:	f840 3b04 	str.w	r3, [r0], #4
 800c310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c314:	d2e8      	bcs.n	800c2e8 <quorem+0xb0>
 800c316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c31a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c31e:	b922      	cbnz	r2, 800c32a <quorem+0xf2>
 800c320:	3b04      	subs	r3, #4
 800c322:	429d      	cmp	r5, r3
 800c324:	461a      	mov	r2, r3
 800c326:	d30a      	bcc.n	800c33e <quorem+0x106>
 800c328:	613c      	str	r4, [r7, #16]
 800c32a:	4630      	mov	r0, r6
 800c32c:	b003      	add	sp, #12
 800c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	3b04      	subs	r3, #4
 800c336:	2a00      	cmp	r2, #0
 800c338:	d1cc      	bne.n	800c2d4 <quorem+0x9c>
 800c33a:	3c01      	subs	r4, #1
 800c33c:	e7c7      	b.n	800c2ce <quorem+0x96>
 800c33e:	6812      	ldr	r2, [r2, #0]
 800c340:	3b04      	subs	r3, #4
 800c342:	2a00      	cmp	r2, #0
 800c344:	d1f0      	bne.n	800c328 <quorem+0xf0>
 800c346:	3c01      	subs	r4, #1
 800c348:	e7eb      	b.n	800c322 <quorem+0xea>
 800c34a:	2000      	movs	r0, #0
 800c34c:	e7ee      	b.n	800c32c <quorem+0xf4>
	...

0800c350 <_dtoa_r>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	ed2d 8b04 	vpush	{d8-d9}
 800c358:	ec57 6b10 	vmov	r6, r7, d0
 800c35c:	b093      	sub	sp, #76	; 0x4c
 800c35e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c364:	9106      	str	r1, [sp, #24]
 800c366:	ee10 aa10 	vmov	sl, s0
 800c36a:	4604      	mov	r4, r0
 800c36c:	9209      	str	r2, [sp, #36]	; 0x24
 800c36e:	930c      	str	r3, [sp, #48]	; 0x30
 800c370:	46bb      	mov	fp, r7
 800c372:	b975      	cbnz	r5, 800c392 <_dtoa_r+0x42>
 800c374:	2010      	movs	r0, #16
 800c376:	f7ff f845 	bl	800b404 <malloc>
 800c37a:	4602      	mov	r2, r0
 800c37c:	6260      	str	r0, [r4, #36]	; 0x24
 800c37e:	b920      	cbnz	r0, 800c38a <_dtoa_r+0x3a>
 800c380:	4ba7      	ldr	r3, [pc, #668]	; (800c620 <_dtoa_r+0x2d0>)
 800c382:	21ea      	movs	r1, #234	; 0xea
 800c384:	48a7      	ldr	r0, [pc, #668]	; (800c624 <_dtoa_r+0x2d4>)
 800c386:	f001 fd4b 	bl	800de20 <__assert_func>
 800c38a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c38e:	6005      	str	r5, [r0, #0]
 800c390:	60c5      	str	r5, [r0, #12]
 800c392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c394:	6819      	ldr	r1, [r3, #0]
 800c396:	b151      	cbz	r1, 800c3ae <_dtoa_r+0x5e>
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	604a      	str	r2, [r1, #4]
 800c39c:	2301      	movs	r3, #1
 800c39e:	4093      	lsls	r3, r2
 800c3a0:	608b      	str	r3, [r1, #8]
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f001 f832 	bl	800d40c <_Bfree>
 800c3a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	1e3b      	subs	r3, r7, #0
 800c3b0:	bfaa      	itet	ge
 800c3b2:	2300      	movge	r3, #0
 800c3b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3b8:	f8c8 3000 	strge.w	r3, [r8]
 800c3bc:	4b9a      	ldr	r3, [pc, #616]	; (800c628 <_dtoa_r+0x2d8>)
 800c3be:	bfbc      	itt	lt
 800c3c0:	2201      	movlt	r2, #1
 800c3c2:	f8c8 2000 	strlt.w	r2, [r8]
 800c3c6:	ea33 030b 	bics.w	r3, r3, fp
 800c3ca:	d11b      	bne.n	800c404 <_dtoa_r+0xb4>
 800c3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3d8:	4333      	orrs	r3, r6
 800c3da:	f000 8592 	beq.w	800cf02 <_dtoa_r+0xbb2>
 800c3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e0:	b963      	cbnz	r3, 800c3fc <_dtoa_r+0xac>
 800c3e2:	4b92      	ldr	r3, [pc, #584]	; (800c62c <_dtoa_r+0x2dc>)
 800c3e4:	e022      	b.n	800c42c <_dtoa_r+0xdc>
 800c3e6:	4b92      	ldr	r3, [pc, #584]	; (800c630 <_dtoa_r+0x2e0>)
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3ee:	6013      	str	r3, [r2, #0]
 800c3f0:	9801      	ldr	r0, [sp, #4]
 800c3f2:	b013      	add	sp, #76	; 0x4c
 800c3f4:	ecbd 8b04 	vpop	{d8-d9}
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	4b8b      	ldr	r3, [pc, #556]	; (800c62c <_dtoa_r+0x2dc>)
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	3303      	adds	r3, #3
 800c402:	e7f3      	b.n	800c3ec <_dtoa_r+0x9c>
 800c404:	2200      	movs	r2, #0
 800c406:	2300      	movs	r3, #0
 800c408:	4650      	mov	r0, sl
 800c40a:	4659      	mov	r1, fp
 800c40c:	f7f4 fb84 	bl	8000b18 <__aeabi_dcmpeq>
 800c410:	ec4b ab19 	vmov	d9, sl, fp
 800c414:	4680      	mov	r8, r0
 800c416:	b158      	cbz	r0, 800c430 <_dtoa_r+0xe0>
 800c418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c41a:	2301      	movs	r3, #1
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 856b 	beq.w	800cefc <_dtoa_r+0xbac>
 800c426:	4883      	ldr	r0, [pc, #524]	; (800c634 <_dtoa_r+0x2e4>)
 800c428:	6018      	str	r0, [r3, #0]
 800c42a:	1e43      	subs	r3, r0, #1
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	e7df      	b.n	800c3f0 <_dtoa_r+0xa0>
 800c430:	ec4b ab10 	vmov	d0, sl, fp
 800c434:	aa10      	add	r2, sp, #64	; 0x40
 800c436:	a911      	add	r1, sp, #68	; 0x44
 800c438:	4620      	mov	r0, r4
 800c43a:	f001 facf 	bl	800d9dc <__d2b>
 800c43e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c442:	ee08 0a10 	vmov	s16, r0
 800c446:	2d00      	cmp	r5, #0
 800c448:	f000 8084 	beq.w	800c554 <_dtoa_r+0x204>
 800c44c:	ee19 3a90 	vmov	r3, s19
 800c450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c458:	4656      	mov	r6, sl
 800c45a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c45e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c466:	4b74      	ldr	r3, [pc, #464]	; (800c638 <_dtoa_r+0x2e8>)
 800c468:	2200      	movs	r2, #0
 800c46a:	4630      	mov	r0, r6
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f3 ff33 	bl	80002d8 <__aeabi_dsub>
 800c472:	a365      	add	r3, pc, #404	; (adr r3, 800c608 <_dtoa_r+0x2b8>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f4 f8e6 	bl	8000648 <__aeabi_dmul>
 800c47c:	a364      	add	r3, pc, #400	; (adr r3, 800c610 <_dtoa_r+0x2c0>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f3 ff2b 	bl	80002dc <__adddf3>
 800c486:	4606      	mov	r6, r0
 800c488:	4628      	mov	r0, r5
 800c48a:	460f      	mov	r7, r1
 800c48c:	f7f4 f872 	bl	8000574 <__aeabi_i2d>
 800c490:	a361      	add	r3, pc, #388	; (adr r3, 800c618 <_dtoa_r+0x2c8>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f4 f8d7 	bl	8000648 <__aeabi_dmul>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4630      	mov	r0, r6
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	f7f3 ff1b 	bl	80002dc <__adddf3>
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	f7f4 fb7d 	bl	8000ba8 <__aeabi_d2iz>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	9000      	str	r0, [sp, #0]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f4 fb38 	bl	8000b2c <__aeabi_dcmplt>
 800c4bc:	b150      	cbz	r0, 800c4d4 <_dtoa_r+0x184>
 800c4be:	9800      	ldr	r0, [sp, #0]
 800c4c0:	f7f4 f858 	bl	8000574 <__aeabi_i2d>
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	f7f4 fb26 	bl	8000b18 <__aeabi_dcmpeq>
 800c4cc:	b910      	cbnz	r0, 800c4d4 <_dtoa_r+0x184>
 800c4ce:	9b00      	ldr	r3, [sp, #0]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	9b00      	ldr	r3, [sp, #0]
 800c4d6:	2b16      	cmp	r3, #22
 800c4d8:	d85a      	bhi.n	800c590 <_dtoa_r+0x240>
 800c4da:	9a00      	ldr	r2, [sp, #0]
 800c4dc:	4b57      	ldr	r3, [pc, #348]	; (800c63c <_dtoa_r+0x2ec>)
 800c4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	ec51 0b19 	vmov	r0, r1, d9
 800c4ea:	f7f4 fb1f 	bl	8000b2c <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d050      	beq.n	800c594 <_dtoa_r+0x244>
 800c4f2:	9b00      	ldr	r3, [sp, #0]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4fe:	1b5d      	subs	r5, r3, r5
 800c500:	1e6b      	subs	r3, r5, #1
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	bf45      	ittet	mi
 800c506:	f1c5 0301 	rsbmi	r3, r5, #1
 800c50a:	9304      	strmi	r3, [sp, #16]
 800c50c:	2300      	movpl	r3, #0
 800c50e:	2300      	movmi	r3, #0
 800c510:	bf4c      	ite	mi
 800c512:	9305      	strmi	r3, [sp, #20]
 800c514:	9304      	strpl	r3, [sp, #16]
 800c516:	9b00      	ldr	r3, [sp, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	db3d      	blt.n	800c598 <_dtoa_r+0x248>
 800c51c:	9b05      	ldr	r3, [sp, #20]
 800c51e:	9a00      	ldr	r2, [sp, #0]
 800c520:	920a      	str	r2, [sp, #40]	; 0x28
 800c522:	4413      	add	r3, r2
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	2300      	movs	r3, #0
 800c528:	9307      	str	r3, [sp, #28]
 800c52a:	9b06      	ldr	r3, [sp, #24]
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	f200 8089 	bhi.w	800c644 <_dtoa_r+0x2f4>
 800c532:	2b05      	cmp	r3, #5
 800c534:	bfc4      	itt	gt
 800c536:	3b04      	subgt	r3, #4
 800c538:	9306      	strgt	r3, [sp, #24]
 800c53a:	9b06      	ldr	r3, [sp, #24]
 800c53c:	f1a3 0302 	sub.w	r3, r3, #2
 800c540:	bfcc      	ite	gt
 800c542:	2500      	movgt	r5, #0
 800c544:	2501      	movle	r5, #1
 800c546:	2b03      	cmp	r3, #3
 800c548:	f200 8087 	bhi.w	800c65a <_dtoa_r+0x30a>
 800c54c:	e8df f003 	tbb	[pc, r3]
 800c550:	59383a2d 	.word	0x59383a2d
 800c554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c558:	441d      	add	r5, r3
 800c55a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c55e:	2b20      	cmp	r3, #32
 800c560:	bfc1      	itttt	gt
 800c562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c56a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c56e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c572:	bfda      	itte	le
 800c574:	f1c3 0320 	rsble	r3, r3, #32
 800c578:	fa06 f003 	lslle.w	r0, r6, r3
 800c57c:	4318      	orrgt	r0, r3
 800c57e:	f7f3 ffe9 	bl	8000554 <__aeabi_ui2d>
 800c582:	2301      	movs	r3, #1
 800c584:	4606      	mov	r6, r0
 800c586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c58a:	3d01      	subs	r5, #1
 800c58c:	930e      	str	r3, [sp, #56]	; 0x38
 800c58e:	e76a      	b.n	800c466 <_dtoa_r+0x116>
 800c590:	2301      	movs	r3, #1
 800c592:	e7b2      	b.n	800c4fa <_dtoa_r+0x1aa>
 800c594:	900b      	str	r0, [sp, #44]	; 0x2c
 800c596:	e7b1      	b.n	800c4fc <_dtoa_r+0x1ac>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	9a00      	ldr	r2, [sp, #0]
 800c59c:	1a9b      	subs	r3, r3, r2
 800c59e:	9304      	str	r3, [sp, #16]
 800c5a0:	4253      	negs	r3, r2
 800c5a2:	9307      	str	r3, [sp, #28]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5a8:	e7bf      	b.n	800c52a <_dtoa_r+0x1da>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9308      	str	r3, [sp, #32]
 800c5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc55      	bgt.n	800c660 <_dtoa_r+0x310>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c5be:	e00c      	b.n	800c5da <_dtoa_r+0x28a>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e7f3      	b.n	800c5ac <_dtoa_r+0x25c>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5c8:	9308      	str	r3, [sp, #32]
 800c5ca:	9b00      	ldr	r3, [sp, #0]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	9302      	str	r3, [sp, #8]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	9303      	str	r3, [sp, #12]
 800c5d6:	bfb8      	it	lt
 800c5d8:	2301      	movlt	r3, #1
 800c5da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5dc:	2200      	movs	r2, #0
 800c5de:	6042      	str	r2, [r0, #4]
 800c5e0:	2204      	movs	r2, #4
 800c5e2:	f102 0614 	add.w	r6, r2, #20
 800c5e6:	429e      	cmp	r6, r3
 800c5e8:	6841      	ldr	r1, [r0, #4]
 800c5ea:	d93d      	bls.n	800c668 <_dtoa_r+0x318>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f000 fecd 	bl	800d38c <_Balloc>
 800c5f2:	9001      	str	r0, [sp, #4]
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d13b      	bne.n	800c670 <_dtoa_r+0x320>
 800c5f8:	4b11      	ldr	r3, [pc, #68]	; (800c640 <_dtoa_r+0x2f0>)
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c600:	e6c0      	b.n	800c384 <_dtoa_r+0x34>
 800c602:	2301      	movs	r3, #1
 800c604:	e7df      	b.n	800c5c6 <_dtoa_r+0x276>
 800c606:	bf00      	nop
 800c608:	636f4361 	.word	0x636f4361
 800c60c:	3fd287a7 	.word	0x3fd287a7
 800c610:	8b60c8b3 	.word	0x8b60c8b3
 800c614:	3fc68a28 	.word	0x3fc68a28
 800c618:	509f79fb 	.word	0x509f79fb
 800c61c:	3fd34413 	.word	0x3fd34413
 800c620:	0800f2e9 	.word	0x0800f2e9
 800c624:	0800f300 	.word	0x0800f300
 800c628:	7ff00000 	.word	0x7ff00000
 800c62c:	0800f2e5 	.word	0x0800f2e5
 800c630:	0800f2dc 	.word	0x0800f2dc
 800c634:	0800f2b9 	.word	0x0800f2b9
 800c638:	3ff80000 	.word	0x3ff80000
 800c63c:	0800f450 	.word	0x0800f450
 800c640:	0800f35b 	.word	0x0800f35b
 800c644:	2501      	movs	r5, #1
 800c646:	2300      	movs	r3, #0
 800c648:	9306      	str	r3, [sp, #24]
 800c64a:	9508      	str	r5, [sp, #32]
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295
 800c650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c654:	2200      	movs	r2, #0
 800c656:	2312      	movs	r3, #18
 800c658:	e7b0      	b.n	800c5bc <_dtoa_r+0x26c>
 800c65a:	2301      	movs	r3, #1
 800c65c:	9308      	str	r3, [sp, #32]
 800c65e:	e7f5      	b.n	800c64c <_dtoa_r+0x2fc>
 800c660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c666:	e7b8      	b.n	800c5da <_dtoa_r+0x28a>
 800c668:	3101      	adds	r1, #1
 800c66a:	6041      	str	r1, [r0, #4]
 800c66c:	0052      	lsls	r2, r2, #1
 800c66e:	e7b8      	b.n	800c5e2 <_dtoa_r+0x292>
 800c670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c672:	9a01      	ldr	r2, [sp, #4]
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	2b0e      	cmp	r3, #14
 800c67a:	f200 809d 	bhi.w	800c7b8 <_dtoa_r+0x468>
 800c67e:	2d00      	cmp	r5, #0
 800c680:	f000 809a 	beq.w	800c7b8 <_dtoa_r+0x468>
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd32      	ble.n	800c6f0 <_dtoa_r+0x3a0>
 800c68a:	4ab7      	ldr	r2, [pc, #732]	; (800c968 <_dtoa_r+0x618>)
 800c68c:	f003 030f 	and.w	r3, r3, #15
 800c690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c694:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c698:	9b00      	ldr	r3, [sp, #0]
 800c69a:	05d8      	lsls	r0, r3, #23
 800c69c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c6a0:	d516      	bpl.n	800c6d0 <_dtoa_r+0x380>
 800c6a2:	4bb2      	ldr	r3, [pc, #712]	; (800c96c <_dtoa_r+0x61c>)
 800c6a4:	ec51 0b19 	vmov	r0, r1, d9
 800c6a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6ac:	f7f4 f8f6 	bl	800089c <__aeabi_ddiv>
 800c6b0:	f007 070f 	and.w	r7, r7, #15
 800c6b4:	4682      	mov	sl, r0
 800c6b6:	468b      	mov	fp, r1
 800c6b8:	2503      	movs	r5, #3
 800c6ba:	4eac      	ldr	r6, [pc, #688]	; (800c96c <_dtoa_r+0x61c>)
 800c6bc:	b957      	cbnz	r7, 800c6d4 <_dtoa_r+0x384>
 800c6be:	4642      	mov	r2, r8
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	f7f4 f8e9 	bl	800089c <__aeabi_ddiv>
 800c6ca:	4682      	mov	sl, r0
 800c6cc:	468b      	mov	fp, r1
 800c6ce:	e028      	b.n	800c722 <_dtoa_r+0x3d2>
 800c6d0:	2502      	movs	r5, #2
 800c6d2:	e7f2      	b.n	800c6ba <_dtoa_r+0x36a>
 800c6d4:	07f9      	lsls	r1, r7, #31
 800c6d6:	d508      	bpl.n	800c6ea <_dtoa_r+0x39a>
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6e0:	f7f3 ffb2 	bl	8000648 <__aeabi_dmul>
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	4680      	mov	r8, r0
 800c6e8:	4689      	mov	r9, r1
 800c6ea:	107f      	asrs	r7, r7, #1
 800c6ec:	3608      	adds	r6, #8
 800c6ee:	e7e5      	b.n	800c6bc <_dtoa_r+0x36c>
 800c6f0:	f000 809b 	beq.w	800c82a <_dtoa_r+0x4da>
 800c6f4:	9b00      	ldr	r3, [sp, #0]
 800c6f6:	4f9d      	ldr	r7, [pc, #628]	; (800c96c <_dtoa_r+0x61c>)
 800c6f8:	425e      	negs	r6, r3
 800c6fa:	4b9b      	ldr	r3, [pc, #620]	; (800c968 <_dtoa_r+0x618>)
 800c6fc:	f006 020f 	and.w	r2, r6, #15
 800c700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	ec51 0b19 	vmov	r0, r1, d9
 800c70c:	f7f3 ff9c 	bl	8000648 <__aeabi_dmul>
 800c710:	1136      	asrs	r6, r6, #4
 800c712:	4682      	mov	sl, r0
 800c714:	468b      	mov	fp, r1
 800c716:	2300      	movs	r3, #0
 800c718:	2502      	movs	r5, #2
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	d17a      	bne.n	800c814 <_dtoa_r+0x4c4>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1d3      	bne.n	800c6ca <_dtoa_r+0x37a>
 800c722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 8082 	beq.w	800c82e <_dtoa_r+0x4de>
 800c72a:	4b91      	ldr	r3, [pc, #580]	; (800c970 <_dtoa_r+0x620>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	f7f4 f9fb 	bl	8000b2c <__aeabi_dcmplt>
 800c736:	2800      	cmp	r0, #0
 800c738:	d079      	beq.n	800c82e <_dtoa_r+0x4de>
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d076      	beq.n	800c82e <_dtoa_r+0x4de>
 800c740:	9b02      	ldr	r3, [sp, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	dd36      	ble.n	800c7b4 <_dtoa_r+0x464>
 800c746:	9b00      	ldr	r3, [sp, #0]
 800c748:	4650      	mov	r0, sl
 800c74a:	4659      	mov	r1, fp
 800c74c:	1e5f      	subs	r7, r3, #1
 800c74e:	2200      	movs	r2, #0
 800c750:	4b88      	ldr	r3, [pc, #544]	; (800c974 <_dtoa_r+0x624>)
 800c752:	f7f3 ff79 	bl	8000648 <__aeabi_dmul>
 800c756:	9e02      	ldr	r6, [sp, #8]
 800c758:	4682      	mov	sl, r0
 800c75a:	468b      	mov	fp, r1
 800c75c:	3501      	adds	r5, #1
 800c75e:	4628      	mov	r0, r5
 800c760:	f7f3 ff08 	bl	8000574 <__aeabi_i2d>
 800c764:	4652      	mov	r2, sl
 800c766:	465b      	mov	r3, fp
 800c768:	f7f3 ff6e 	bl	8000648 <__aeabi_dmul>
 800c76c:	4b82      	ldr	r3, [pc, #520]	; (800c978 <_dtoa_r+0x628>)
 800c76e:	2200      	movs	r2, #0
 800c770:	f7f3 fdb4 	bl	80002dc <__adddf3>
 800c774:	46d0      	mov	r8, sl
 800c776:	46d9      	mov	r9, fp
 800c778:	4682      	mov	sl, r0
 800c77a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c77e:	2e00      	cmp	r6, #0
 800c780:	d158      	bne.n	800c834 <_dtoa_r+0x4e4>
 800c782:	4b7e      	ldr	r3, [pc, #504]	; (800c97c <_dtoa_r+0x62c>)
 800c784:	2200      	movs	r2, #0
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f3 fda5 	bl	80002d8 <__aeabi_dsub>
 800c78e:	4652      	mov	r2, sl
 800c790:	465b      	mov	r3, fp
 800c792:	4680      	mov	r8, r0
 800c794:	4689      	mov	r9, r1
 800c796:	f7f4 f9e7 	bl	8000b68 <__aeabi_dcmpgt>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f040 8295 	bne.w	800ccca <_dtoa_r+0x97a>
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f4 f9bf 	bl	8000b2c <__aeabi_dcmplt>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	f040 8289 	bne.w	800ccc6 <_dtoa_r+0x976>
 800c7b4:	ec5b ab19 	vmov	sl, fp, d9
 800c7b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f2c0 8148 	blt.w	800ca50 <_dtoa_r+0x700>
 800c7c0:	9a00      	ldr	r2, [sp, #0]
 800c7c2:	2a0e      	cmp	r2, #14
 800c7c4:	f300 8144 	bgt.w	800ca50 <_dtoa_r+0x700>
 800c7c8:	4b67      	ldr	r3, [pc, #412]	; (800c968 <_dtoa_r+0x618>)
 800c7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f280 80d5 	bge.w	800c984 <_dtoa_r+0x634>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f300 80d1 	bgt.w	800c984 <_dtoa_r+0x634>
 800c7e2:	f040 826f 	bne.w	800ccc4 <_dtoa_r+0x974>
 800c7e6:	4b65      	ldr	r3, [pc, #404]	; (800c97c <_dtoa_r+0x62c>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	f7f3 ff2b 	bl	8000648 <__aeabi_dmul>
 800c7f2:	4652      	mov	r2, sl
 800c7f4:	465b      	mov	r3, fp
 800c7f6:	f7f4 f9ad 	bl	8000b54 <__aeabi_dcmpge>
 800c7fa:	9e03      	ldr	r6, [sp, #12]
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f040 8245 	bne.w	800cc8e <_dtoa_r+0x93e>
 800c804:	9d01      	ldr	r5, [sp, #4]
 800c806:	2331      	movs	r3, #49	; 0x31
 800c808:	f805 3b01 	strb.w	r3, [r5], #1
 800c80c:	9b00      	ldr	r3, [sp, #0]
 800c80e:	3301      	adds	r3, #1
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	e240      	b.n	800cc96 <_dtoa_r+0x946>
 800c814:	07f2      	lsls	r2, r6, #31
 800c816:	d505      	bpl.n	800c824 <_dtoa_r+0x4d4>
 800c818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c81c:	f7f3 ff14 	bl	8000648 <__aeabi_dmul>
 800c820:	3501      	adds	r5, #1
 800c822:	2301      	movs	r3, #1
 800c824:	1076      	asrs	r6, r6, #1
 800c826:	3708      	adds	r7, #8
 800c828:	e777      	b.n	800c71a <_dtoa_r+0x3ca>
 800c82a:	2502      	movs	r5, #2
 800c82c:	e779      	b.n	800c722 <_dtoa_r+0x3d2>
 800c82e:	9f00      	ldr	r7, [sp, #0]
 800c830:	9e03      	ldr	r6, [sp, #12]
 800c832:	e794      	b.n	800c75e <_dtoa_r+0x40e>
 800c834:	9901      	ldr	r1, [sp, #4]
 800c836:	4b4c      	ldr	r3, [pc, #304]	; (800c968 <_dtoa_r+0x618>)
 800c838:	4431      	add	r1, r6
 800c83a:	910d      	str	r1, [sp, #52]	; 0x34
 800c83c:	9908      	ldr	r1, [sp, #32]
 800c83e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c846:	2900      	cmp	r1, #0
 800c848:	d043      	beq.n	800c8d2 <_dtoa_r+0x582>
 800c84a:	494d      	ldr	r1, [pc, #308]	; (800c980 <_dtoa_r+0x630>)
 800c84c:	2000      	movs	r0, #0
 800c84e:	f7f4 f825 	bl	800089c <__aeabi_ddiv>
 800c852:	4652      	mov	r2, sl
 800c854:	465b      	mov	r3, fp
 800c856:	f7f3 fd3f 	bl	80002d8 <__aeabi_dsub>
 800c85a:	9d01      	ldr	r5, [sp, #4]
 800c85c:	4682      	mov	sl, r0
 800c85e:	468b      	mov	fp, r1
 800c860:	4649      	mov	r1, r9
 800c862:	4640      	mov	r0, r8
 800c864:	f7f4 f9a0 	bl	8000ba8 <__aeabi_d2iz>
 800c868:	4606      	mov	r6, r0
 800c86a:	f7f3 fe83 	bl	8000574 <__aeabi_i2d>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4640      	mov	r0, r8
 800c874:	4649      	mov	r1, r9
 800c876:	f7f3 fd2f 	bl	80002d8 <__aeabi_dsub>
 800c87a:	3630      	adds	r6, #48	; 0x30
 800c87c:	f805 6b01 	strb.w	r6, [r5], #1
 800c880:	4652      	mov	r2, sl
 800c882:	465b      	mov	r3, fp
 800c884:	4680      	mov	r8, r0
 800c886:	4689      	mov	r9, r1
 800c888:	f7f4 f950 	bl	8000b2c <__aeabi_dcmplt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d163      	bne.n	800c958 <_dtoa_r+0x608>
 800c890:	4642      	mov	r2, r8
 800c892:	464b      	mov	r3, r9
 800c894:	4936      	ldr	r1, [pc, #216]	; (800c970 <_dtoa_r+0x620>)
 800c896:	2000      	movs	r0, #0
 800c898:	f7f3 fd1e 	bl	80002d8 <__aeabi_dsub>
 800c89c:	4652      	mov	r2, sl
 800c89e:	465b      	mov	r3, fp
 800c8a0:	f7f4 f944 	bl	8000b2c <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f040 80b5 	bne.w	800ca14 <_dtoa_r+0x6c4>
 800c8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ac:	429d      	cmp	r5, r3
 800c8ae:	d081      	beq.n	800c7b4 <_dtoa_r+0x464>
 800c8b0:	4b30      	ldr	r3, [pc, #192]	; (800c974 <_dtoa_r+0x624>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4650      	mov	r0, sl
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	f7f3 fec6 	bl	8000648 <__aeabi_dmul>
 800c8bc:	4b2d      	ldr	r3, [pc, #180]	; (800c974 <_dtoa_r+0x624>)
 800c8be:	4682      	mov	sl, r0
 800c8c0:	468b      	mov	fp, r1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f7f3 febe 	bl	8000648 <__aeabi_dmul>
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	e7c6      	b.n	800c860 <_dtoa_r+0x510>
 800c8d2:	4650      	mov	r0, sl
 800c8d4:	4659      	mov	r1, fp
 800c8d6:	f7f3 feb7 	bl	8000648 <__aeabi_dmul>
 800c8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8dc:	9d01      	ldr	r5, [sp, #4]
 800c8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8e0:	4682      	mov	sl, r0
 800c8e2:	468b      	mov	fp, r1
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	f7f4 f95e 	bl	8000ba8 <__aeabi_d2iz>
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	f7f3 fe41 	bl	8000574 <__aeabi_i2d>
 800c8f2:	3630      	adds	r6, #48	; 0x30
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	f7f3 fcec 	bl	80002d8 <__aeabi_dsub>
 800c900:	f805 6b01 	strb.w	r6, [r5], #1
 800c904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c906:	429d      	cmp	r5, r3
 800c908:	4680      	mov	r8, r0
 800c90a:	4689      	mov	r9, r1
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	d124      	bne.n	800c95c <_dtoa_r+0x60c>
 800c912:	4b1b      	ldr	r3, [pc, #108]	; (800c980 <_dtoa_r+0x630>)
 800c914:	4650      	mov	r0, sl
 800c916:	4659      	mov	r1, fp
 800c918:	f7f3 fce0 	bl	80002dc <__adddf3>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4640      	mov	r0, r8
 800c922:	4649      	mov	r1, r9
 800c924:	f7f4 f920 	bl	8000b68 <__aeabi_dcmpgt>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d173      	bne.n	800ca14 <_dtoa_r+0x6c4>
 800c92c:	4652      	mov	r2, sl
 800c92e:	465b      	mov	r3, fp
 800c930:	4913      	ldr	r1, [pc, #76]	; (800c980 <_dtoa_r+0x630>)
 800c932:	2000      	movs	r0, #0
 800c934:	f7f3 fcd0 	bl	80002d8 <__aeabi_dsub>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4640      	mov	r0, r8
 800c93e:	4649      	mov	r1, r9
 800c940:	f7f4 f8f4 	bl	8000b2c <__aeabi_dcmplt>
 800c944:	2800      	cmp	r0, #0
 800c946:	f43f af35 	beq.w	800c7b4 <_dtoa_r+0x464>
 800c94a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c94c:	1e6b      	subs	r3, r5, #1
 800c94e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c954:	2b30      	cmp	r3, #48	; 0x30
 800c956:	d0f8      	beq.n	800c94a <_dtoa_r+0x5fa>
 800c958:	9700      	str	r7, [sp, #0]
 800c95a:	e049      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800c95c:	4b05      	ldr	r3, [pc, #20]	; (800c974 <_dtoa_r+0x624>)
 800c95e:	f7f3 fe73 	bl	8000648 <__aeabi_dmul>
 800c962:	4680      	mov	r8, r0
 800c964:	4689      	mov	r9, r1
 800c966:	e7bd      	b.n	800c8e4 <_dtoa_r+0x594>
 800c968:	0800f450 	.word	0x0800f450
 800c96c:	0800f428 	.word	0x0800f428
 800c970:	3ff00000 	.word	0x3ff00000
 800c974:	40240000 	.word	0x40240000
 800c978:	401c0000 	.word	0x401c0000
 800c97c:	40140000 	.word	0x40140000
 800c980:	3fe00000 	.word	0x3fe00000
 800c984:	9d01      	ldr	r5, [sp, #4]
 800c986:	4656      	mov	r6, sl
 800c988:	465f      	mov	r7, fp
 800c98a:	4642      	mov	r2, r8
 800c98c:	464b      	mov	r3, r9
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	f7f3 ff83 	bl	800089c <__aeabi_ddiv>
 800c996:	f7f4 f907 	bl	8000ba8 <__aeabi_d2iz>
 800c99a:	4682      	mov	sl, r0
 800c99c:	f7f3 fdea 	bl	8000574 <__aeabi_i2d>
 800c9a0:	4642      	mov	r2, r8
 800c9a2:	464b      	mov	r3, r9
 800c9a4:	f7f3 fe50 	bl	8000648 <__aeabi_dmul>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9b4:	f7f3 fc90 	bl	80002d8 <__aeabi_dsub>
 800c9b8:	f805 6b01 	strb.w	r6, [r5], #1
 800c9bc:	9e01      	ldr	r6, [sp, #4]
 800c9be:	9f03      	ldr	r7, [sp, #12]
 800c9c0:	1bae      	subs	r6, r5, r6
 800c9c2:	42b7      	cmp	r7, r6
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	d135      	bne.n	800ca36 <_dtoa_r+0x6e6>
 800c9ca:	f7f3 fc87 	bl	80002dc <__adddf3>
 800c9ce:	4642      	mov	r2, r8
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	460f      	mov	r7, r1
 800c9d6:	f7f4 f8c7 	bl	8000b68 <__aeabi_dcmpgt>
 800c9da:	b9d0      	cbnz	r0, 800ca12 <_dtoa_r+0x6c2>
 800c9dc:	4642      	mov	r2, r8
 800c9de:	464b      	mov	r3, r9
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	f7f4 f898 	bl	8000b18 <__aeabi_dcmpeq>
 800c9e8:	b110      	cbz	r0, 800c9f0 <_dtoa_r+0x6a0>
 800c9ea:	f01a 0f01 	tst.w	sl, #1
 800c9ee:	d110      	bne.n	800ca12 <_dtoa_r+0x6c2>
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	ee18 1a10 	vmov	r1, s16
 800c9f6:	f000 fd09 	bl	800d40c <_Bfree>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	9800      	ldr	r0, [sp, #0]
 800c9fe:	702b      	strb	r3, [r5, #0]
 800ca00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca02:	3001      	adds	r0, #1
 800ca04:	6018      	str	r0, [r3, #0]
 800ca06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f43f acf1 	beq.w	800c3f0 <_dtoa_r+0xa0>
 800ca0e:	601d      	str	r5, [r3, #0]
 800ca10:	e4ee      	b.n	800c3f0 <_dtoa_r+0xa0>
 800ca12:	9f00      	ldr	r7, [sp, #0]
 800ca14:	462b      	mov	r3, r5
 800ca16:	461d      	mov	r5, r3
 800ca18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca1c:	2a39      	cmp	r2, #57	; 0x39
 800ca1e:	d106      	bne.n	800ca2e <_dtoa_r+0x6de>
 800ca20:	9a01      	ldr	r2, [sp, #4]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d1f7      	bne.n	800ca16 <_dtoa_r+0x6c6>
 800ca26:	9901      	ldr	r1, [sp, #4]
 800ca28:	2230      	movs	r2, #48	; 0x30
 800ca2a:	3701      	adds	r7, #1
 800ca2c:	700a      	strb	r2, [r1, #0]
 800ca2e:	781a      	ldrb	r2, [r3, #0]
 800ca30:	3201      	adds	r2, #1
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	e790      	b.n	800c958 <_dtoa_r+0x608>
 800ca36:	4ba6      	ldr	r3, [pc, #664]	; (800ccd0 <_dtoa_r+0x980>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f7f3 fe05 	bl	8000648 <__aeabi_dmul>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2300      	movs	r3, #0
 800ca42:	4606      	mov	r6, r0
 800ca44:	460f      	mov	r7, r1
 800ca46:	f7f4 f867 	bl	8000b18 <__aeabi_dcmpeq>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d09d      	beq.n	800c98a <_dtoa_r+0x63a>
 800ca4e:	e7cf      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800ca50:	9a08      	ldr	r2, [sp, #32]
 800ca52:	2a00      	cmp	r2, #0
 800ca54:	f000 80d7 	beq.w	800cc06 <_dtoa_r+0x8b6>
 800ca58:	9a06      	ldr	r2, [sp, #24]
 800ca5a:	2a01      	cmp	r2, #1
 800ca5c:	f300 80ba 	bgt.w	800cbd4 <_dtoa_r+0x884>
 800ca60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	f000 80b2 	beq.w	800cbcc <_dtoa_r+0x87c>
 800ca68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca6c:	9e07      	ldr	r6, [sp, #28]
 800ca6e:	9d04      	ldr	r5, [sp, #16]
 800ca70:	9a04      	ldr	r2, [sp, #16]
 800ca72:	441a      	add	r2, r3
 800ca74:	9204      	str	r2, [sp, #16]
 800ca76:	9a05      	ldr	r2, [sp, #20]
 800ca78:	2101      	movs	r1, #1
 800ca7a:	441a      	add	r2, r3
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	9205      	str	r2, [sp, #20]
 800ca80:	f000 fd7c 	bl	800d57c <__i2b>
 800ca84:	4607      	mov	r7, r0
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	dd0c      	ble.n	800caa4 <_dtoa_r+0x754>
 800ca8a:	9b05      	ldr	r3, [sp, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dd09      	ble.n	800caa4 <_dtoa_r+0x754>
 800ca90:	42ab      	cmp	r3, r5
 800ca92:	9a04      	ldr	r2, [sp, #16]
 800ca94:	bfa8      	it	ge
 800ca96:	462b      	movge	r3, r5
 800ca98:	1ad2      	subs	r2, r2, r3
 800ca9a:	9204      	str	r2, [sp, #16]
 800ca9c:	9a05      	ldr	r2, [sp, #20]
 800ca9e:	1aed      	subs	r5, r5, r3
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	b31b      	cbz	r3, 800caf0 <_dtoa_r+0x7a0>
 800caa8:	9b08      	ldr	r3, [sp, #32]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f000 80af 	beq.w	800cc0e <_dtoa_r+0x8be>
 800cab0:	2e00      	cmp	r6, #0
 800cab2:	dd13      	ble.n	800cadc <_dtoa_r+0x78c>
 800cab4:	4639      	mov	r1, r7
 800cab6:	4632      	mov	r2, r6
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fe1f 	bl	800d6fc <__pow5mult>
 800cabe:	ee18 2a10 	vmov	r2, s16
 800cac2:	4601      	mov	r1, r0
 800cac4:	4607      	mov	r7, r0
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 fd6e 	bl	800d5a8 <__multiply>
 800cacc:	ee18 1a10 	vmov	r1, s16
 800cad0:	4680      	mov	r8, r0
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fc9a 	bl	800d40c <_Bfree>
 800cad8:	ee08 8a10 	vmov	s16, r8
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	1b9a      	subs	r2, r3, r6
 800cae0:	d006      	beq.n	800caf0 <_dtoa_r+0x7a0>
 800cae2:	ee18 1a10 	vmov	r1, s16
 800cae6:	4620      	mov	r0, r4
 800cae8:	f000 fe08 	bl	800d6fc <__pow5mult>
 800caec:	ee08 0a10 	vmov	s16, r0
 800caf0:	2101      	movs	r1, #1
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 fd42 	bl	800d57c <__i2b>
 800caf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	4606      	mov	r6, r0
 800cafe:	f340 8088 	ble.w	800cc12 <_dtoa_r+0x8c2>
 800cb02:	461a      	mov	r2, r3
 800cb04:	4601      	mov	r1, r0
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 fdf8 	bl	800d6fc <__pow5mult>
 800cb0c:	9b06      	ldr	r3, [sp, #24]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	4606      	mov	r6, r0
 800cb12:	f340 8081 	ble.w	800cc18 <_dtoa_r+0x8c8>
 800cb16:	f04f 0800 	mov.w	r8, #0
 800cb1a:	6933      	ldr	r3, [r6, #16]
 800cb1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb20:	6918      	ldr	r0, [r3, #16]
 800cb22:	f000 fcdb 	bl	800d4dc <__hi0bits>
 800cb26:	f1c0 0020 	rsb	r0, r0, #32
 800cb2a:	9b05      	ldr	r3, [sp, #20]
 800cb2c:	4418      	add	r0, r3
 800cb2e:	f010 001f 	ands.w	r0, r0, #31
 800cb32:	f000 8092 	beq.w	800cc5a <_dtoa_r+0x90a>
 800cb36:	f1c0 0320 	rsb	r3, r0, #32
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	f340 808a 	ble.w	800cc54 <_dtoa_r+0x904>
 800cb40:	f1c0 001c 	rsb	r0, r0, #28
 800cb44:	9b04      	ldr	r3, [sp, #16]
 800cb46:	4403      	add	r3, r0
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	4403      	add	r3, r0
 800cb4e:	4405      	add	r5, r0
 800cb50:	9305      	str	r3, [sp, #20]
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dd07      	ble.n	800cb68 <_dtoa_r+0x818>
 800cb58:	ee18 1a10 	vmov	r1, s16
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 fe26 	bl	800d7b0 <__lshift>
 800cb64:	ee08 0a10 	vmov	s16, r0
 800cb68:	9b05      	ldr	r3, [sp, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dd05      	ble.n	800cb7a <_dtoa_r+0x82a>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	461a      	mov	r2, r3
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 fe1c 	bl	800d7b0 <__lshift>
 800cb78:	4606      	mov	r6, r0
 800cb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d06e      	beq.n	800cc5e <_dtoa_r+0x90e>
 800cb80:	ee18 0a10 	vmov	r0, s16
 800cb84:	4631      	mov	r1, r6
 800cb86:	f000 fe83 	bl	800d890 <__mcmp>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	da67      	bge.n	800cc5e <_dtoa_r+0x90e>
 800cb8e:	9b00      	ldr	r3, [sp, #0]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	ee18 1a10 	vmov	r1, s16
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	220a      	movs	r2, #10
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fc57 	bl	800d450 <__multadd>
 800cba2:	9b08      	ldr	r3, [sp, #32]
 800cba4:	ee08 0a10 	vmov	s16, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 81b1 	beq.w	800cf10 <_dtoa_r+0xbc0>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	220a      	movs	r2, #10
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fc4b 	bl	800d450 <__multadd>
 800cbba:	9b02      	ldr	r3, [sp, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	4607      	mov	r7, r0
 800cbc0:	f300 808e 	bgt.w	800cce0 <_dtoa_r+0x990>
 800cbc4:	9b06      	ldr	r3, [sp, #24]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	dc51      	bgt.n	800cc6e <_dtoa_r+0x91e>
 800cbca:	e089      	b.n	800cce0 <_dtoa_r+0x990>
 800cbcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbd2:	e74b      	b.n	800ca6c <_dtoa_r+0x71c>
 800cbd4:	9b03      	ldr	r3, [sp, #12]
 800cbd6:	1e5e      	subs	r6, r3, #1
 800cbd8:	9b07      	ldr	r3, [sp, #28]
 800cbda:	42b3      	cmp	r3, r6
 800cbdc:	bfbf      	itttt	lt
 800cbde:	9b07      	ldrlt	r3, [sp, #28]
 800cbe0:	9607      	strlt	r6, [sp, #28]
 800cbe2:	1af2      	sublt	r2, r6, r3
 800cbe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cbe6:	bfb6      	itet	lt
 800cbe8:	189b      	addlt	r3, r3, r2
 800cbea:	1b9e      	subge	r6, r3, r6
 800cbec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cbee:	9b03      	ldr	r3, [sp, #12]
 800cbf0:	bfb8      	it	lt
 800cbf2:	2600      	movlt	r6, #0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfb7      	itett	lt
 800cbf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cbfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cc00:	1a9d      	sublt	r5, r3, r2
 800cc02:	2300      	movlt	r3, #0
 800cc04:	e734      	b.n	800ca70 <_dtoa_r+0x720>
 800cc06:	9e07      	ldr	r6, [sp, #28]
 800cc08:	9d04      	ldr	r5, [sp, #16]
 800cc0a:	9f08      	ldr	r7, [sp, #32]
 800cc0c:	e73b      	b.n	800ca86 <_dtoa_r+0x736>
 800cc0e:	9a07      	ldr	r2, [sp, #28]
 800cc10:	e767      	b.n	800cae2 <_dtoa_r+0x792>
 800cc12:	9b06      	ldr	r3, [sp, #24]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	dc18      	bgt.n	800cc4a <_dtoa_r+0x8fa>
 800cc18:	f1ba 0f00 	cmp.w	sl, #0
 800cc1c:	d115      	bne.n	800cc4a <_dtoa_r+0x8fa>
 800cc1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc22:	b993      	cbnz	r3, 800cc4a <_dtoa_r+0x8fa>
 800cc24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc28:	0d1b      	lsrs	r3, r3, #20
 800cc2a:	051b      	lsls	r3, r3, #20
 800cc2c:	b183      	cbz	r3, 800cc50 <_dtoa_r+0x900>
 800cc2e:	9b04      	ldr	r3, [sp, #16]
 800cc30:	3301      	adds	r3, #1
 800cc32:	9304      	str	r3, [sp, #16]
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	3301      	adds	r3, #1
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	f04f 0801 	mov.w	r8, #1
 800cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f47f af6a 	bne.w	800cb1a <_dtoa_r+0x7ca>
 800cc46:	2001      	movs	r0, #1
 800cc48:	e76f      	b.n	800cb2a <_dtoa_r+0x7da>
 800cc4a:	f04f 0800 	mov.w	r8, #0
 800cc4e:	e7f6      	b.n	800cc3e <_dtoa_r+0x8ee>
 800cc50:	4698      	mov	r8, r3
 800cc52:	e7f4      	b.n	800cc3e <_dtoa_r+0x8ee>
 800cc54:	f43f af7d 	beq.w	800cb52 <_dtoa_r+0x802>
 800cc58:	4618      	mov	r0, r3
 800cc5a:	301c      	adds	r0, #28
 800cc5c:	e772      	b.n	800cb44 <_dtoa_r+0x7f4>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dc37      	bgt.n	800ccd4 <_dtoa_r+0x984>
 800cc64:	9b06      	ldr	r3, [sp, #24]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	dd34      	ble.n	800ccd4 <_dtoa_r+0x984>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	9b02      	ldr	r3, [sp, #8]
 800cc70:	b96b      	cbnz	r3, 800cc8e <_dtoa_r+0x93e>
 800cc72:	4631      	mov	r1, r6
 800cc74:	2205      	movs	r2, #5
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fbea 	bl	800d450 <__multadd>
 800cc7c:	4601      	mov	r1, r0
 800cc7e:	4606      	mov	r6, r0
 800cc80:	ee18 0a10 	vmov	r0, s16
 800cc84:	f000 fe04 	bl	800d890 <__mcmp>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	f73f adbb 	bgt.w	800c804 <_dtoa_r+0x4b4>
 800cc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc90:	9d01      	ldr	r5, [sp, #4]
 800cc92:	43db      	mvns	r3, r3
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	f04f 0800 	mov.w	r8, #0
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f000 fbb5 	bl	800d40c <_Bfree>
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	f43f aea4 	beq.w	800c9f0 <_dtoa_r+0x6a0>
 800cca8:	f1b8 0f00 	cmp.w	r8, #0
 800ccac:	d005      	beq.n	800ccba <_dtoa_r+0x96a>
 800ccae:	45b8      	cmp	r8, r7
 800ccb0:	d003      	beq.n	800ccba <_dtoa_r+0x96a>
 800ccb2:	4641      	mov	r1, r8
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fba9 	bl	800d40c <_Bfree>
 800ccba:	4639      	mov	r1, r7
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fba5 	bl	800d40c <_Bfree>
 800ccc2:	e695      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800ccc4:	2600      	movs	r6, #0
 800ccc6:	4637      	mov	r7, r6
 800ccc8:	e7e1      	b.n	800cc8e <_dtoa_r+0x93e>
 800ccca:	9700      	str	r7, [sp, #0]
 800cccc:	4637      	mov	r7, r6
 800ccce:	e599      	b.n	800c804 <_dtoa_r+0x4b4>
 800ccd0:	40240000 	.word	0x40240000
 800ccd4:	9b08      	ldr	r3, [sp, #32]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80ca 	beq.w	800ce70 <_dtoa_r+0xb20>
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	9302      	str	r3, [sp, #8]
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	dd05      	ble.n	800ccf0 <_dtoa_r+0x9a0>
 800cce4:	4639      	mov	r1, r7
 800cce6:	462a      	mov	r2, r5
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 fd61 	bl	800d7b0 <__lshift>
 800ccee:	4607      	mov	r7, r0
 800ccf0:	f1b8 0f00 	cmp.w	r8, #0
 800ccf4:	d05b      	beq.n	800cdae <_dtoa_r+0xa5e>
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 fb47 	bl	800d38c <_Balloc>
 800ccfe:	4605      	mov	r5, r0
 800cd00:	b928      	cbnz	r0, 800cd0e <_dtoa_r+0x9be>
 800cd02:	4b87      	ldr	r3, [pc, #540]	; (800cf20 <_dtoa_r+0xbd0>)
 800cd04:	4602      	mov	r2, r0
 800cd06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd0a:	f7ff bb3b 	b.w	800c384 <_dtoa_r+0x34>
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	3202      	adds	r2, #2
 800cd12:	0092      	lsls	r2, r2, #2
 800cd14:	f107 010c 	add.w	r1, r7, #12
 800cd18:	300c      	adds	r0, #12
 800cd1a:	f7fe fb8b 	bl	800b434 <memcpy>
 800cd1e:	2201      	movs	r2, #1
 800cd20:	4629      	mov	r1, r5
 800cd22:	4620      	mov	r0, r4
 800cd24:	f000 fd44 	bl	800d7b0 <__lshift>
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	f103 0901 	add.w	r9, r3, #1
 800cd2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd32:	4413      	add	r3, r2
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	f00a 0301 	and.w	r3, sl, #1
 800cd3a:	46b8      	mov	r8, r7
 800cd3c:	9304      	str	r3, [sp, #16]
 800cd3e:	4607      	mov	r7, r0
 800cd40:	4631      	mov	r1, r6
 800cd42:	ee18 0a10 	vmov	r0, s16
 800cd46:	f7ff fa77 	bl	800c238 <quorem>
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	9002      	str	r0, [sp, #8]
 800cd4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd52:	ee18 0a10 	vmov	r0, s16
 800cd56:	f000 fd9b 	bl	800d890 <__mcmp>
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	9003      	str	r0, [sp, #12]
 800cd5e:	4631      	mov	r1, r6
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fdb1 	bl	800d8c8 <__mdiff>
 800cd66:	68c2      	ldr	r2, [r0, #12]
 800cd68:	f109 3bff 	add.w	fp, r9, #4294967295
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	bb02      	cbnz	r2, 800cdb2 <_dtoa_r+0xa62>
 800cd70:	4601      	mov	r1, r0
 800cd72:	ee18 0a10 	vmov	r0, s16
 800cd76:	f000 fd8b 	bl	800d890 <__mcmp>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4620      	mov	r0, r4
 800cd80:	9207      	str	r2, [sp, #28]
 800cd82:	f000 fb43 	bl	800d40c <_Bfree>
 800cd86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cd8a:	ea43 0102 	orr.w	r1, r3, r2
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	430b      	orrs	r3, r1
 800cd92:	464d      	mov	r5, r9
 800cd94:	d10f      	bne.n	800cdb6 <_dtoa_r+0xa66>
 800cd96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd9a:	d02a      	beq.n	800cdf2 <_dtoa_r+0xaa2>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dd02      	ble.n	800cda8 <_dtoa_r+0xa58>
 800cda2:	9b02      	ldr	r3, [sp, #8]
 800cda4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cda8:	f88b a000 	strb.w	sl, [fp]
 800cdac:	e775      	b.n	800cc9a <_dtoa_r+0x94a>
 800cdae:	4638      	mov	r0, r7
 800cdb0:	e7ba      	b.n	800cd28 <_dtoa_r+0x9d8>
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	e7e2      	b.n	800cd7c <_dtoa_r+0xa2c>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	db04      	blt.n	800cdc6 <_dtoa_r+0xa76>
 800cdbc:	9906      	ldr	r1, [sp, #24]
 800cdbe:	430b      	orrs	r3, r1
 800cdc0:	9904      	ldr	r1, [sp, #16]
 800cdc2:	430b      	orrs	r3, r1
 800cdc4:	d122      	bne.n	800ce0c <_dtoa_r+0xabc>
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	ddee      	ble.n	800cda8 <_dtoa_r+0xa58>
 800cdca:	ee18 1a10 	vmov	r1, s16
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f000 fced 	bl	800d7b0 <__lshift>
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	ee08 0a10 	vmov	s16, r0
 800cddc:	f000 fd58 	bl	800d890 <__mcmp>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	dc03      	bgt.n	800cdec <_dtoa_r+0xa9c>
 800cde4:	d1e0      	bne.n	800cda8 <_dtoa_r+0xa58>
 800cde6:	f01a 0f01 	tst.w	sl, #1
 800cdea:	d0dd      	beq.n	800cda8 <_dtoa_r+0xa58>
 800cdec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cdf0:	d1d7      	bne.n	800cda2 <_dtoa_r+0xa52>
 800cdf2:	2339      	movs	r3, #57	; 0x39
 800cdf4:	f88b 3000 	strb.w	r3, [fp]
 800cdf8:	462b      	mov	r3, r5
 800cdfa:	461d      	mov	r5, r3
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce02:	2a39      	cmp	r2, #57	; 0x39
 800ce04:	d071      	beq.n	800ceea <_dtoa_r+0xb9a>
 800ce06:	3201      	adds	r2, #1
 800ce08:	701a      	strb	r2, [r3, #0]
 800ce0a:	e746      	b.n	800cc9a <_dtoa_r+0x94a>
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	dd07      	ble.n	800ce20 <_dtoa_r+0xad0>
 800ce10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce14:	d0ed      	beq.n	800cdf2 <_dtoa_r+0xaa2>
 800ce16:	f10a 0301 	add.w	r3, sl, #1
 800ce1a:	f88b 3000 	strb.w	r3, [fp]
 800ce1e:	e73c      	b.n	800cc9a <_dtoa_r+0x94a>
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce26:	4599      	cmp	r9, r3
 800ce28:	d047      	beq.n	800ceba <_dtoa_r+0xb6a>
 800ce2a:	ee18 1a10 	vmov	r1, s16
 800ce2e:	2300      	movs	r3, #0
 800ce30:	220a      	movs	r2, #10
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fb0c 	bl	800d450 <__multadd>
 800ce38:	45b8      	cmp	r8, r7
 800ce3a:	ee08 0a10 	vmov	s16, r0
 800ce3e:	f04f 0300 	mov.w	r3, #0
 800ce42:	f04f 020a 	mov.w	r2, #10
 800ce46:	4641      	mov	r1, r8
 800ce48:	4620      	mov	r0, r4
 800ce4a:	d106      	bne.n	800ce5a <_dtoa_r+0xb0a>
 800ce4c:	f000 fb00 	bl	800d450 <__multadd>
 800ce50:	4680      	mov	r8, r0
 800ce52:	4607      	mov	r7, r0
 800ce54:	f109 0901 	add.w	r9, r9, #1
 800ce58:	e772      	b.n	800cd40 <_dtoa_r+0x9f0>
 800ce5a:	f000 faf9 	bl	800d450 <__multadd>
 800ce5e:	4639      	mov	r1, r7
 800ce60:	4680      	mov	r8, r0
 800ce62:	2300      	movs	r3, #0
 800ce64:	220a      	movs	r2, #10
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 faf2 	bl	800d450 <__multadd>
 800ce6c:	4607      	mov	r7, r0
 800ce6e:	e7f1      	b.n	800ce54 <_dtoa_r+0xb04>
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	9302      	str	r3, [sp, #8]
 800ce74:	9d01      	ldr	r5, [sp, #4]
 800ce76:	ee18 0a10 	vmov	r0, s16
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	f7ff f9dc 	bl	800c238 <quorem>
 800ce80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce84:	9b01      	ldr	r3, [sp, #4]
 800ce86:	f805 ab01 	strb.w	sl, [r5], #1
 800ce8a:	1aea      	subs	r2, r5, r3
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	dd09      	ble.n	800cea6 <_dtoa_r+0xb56>
 800ce92:	ee18 1a10 	vmov	r1, s16
 800ce96:	2300      	movs	r3, #0
 800ce98:	220a      	movs	r2, #10
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 fad8 	bl	800d450 <__multadd>
 800cea0:	ee08 0a10 	vmov	s16, r0
 800cea4:	e7e7      	b.n	800ce76 <_dtoa_r+0xb26>
 800cea6:	9b02      	ldr	r3, [sp, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bfc8      	it	gt
 800ceac:	461d      	movgt	r5, r3
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	bfd8      	it	le
 800ceb2:	2501      	movle	r5, #1
 800ceb4:	441d      	add	r5, r3
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	ee18 1a10 	vmov	r1, s16
 800cebe:	2201      	movs	r2, #1
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 fc75 	bl	800d7b0 <__lshift>
 800cec6:	4631      	mov	r1, r6
 800cec8:	ee08 0a10 	vmov	s16, r0
 800cecc:	f000 fce0 	bl	800d890 <__mcmp>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	dc91      	bgt.n	800cdf8 <_dtoa_r+0xaa8>
 800ced4:	d102      	bne.n	800cedc <_dtoa_r+0xb8c>
 800ced6:	f01a 0f01 	tst.w	sl, #1
 800ceda:	d18d      	bne.n	800cdf8 <_dtoa_r+0xaa8>
 800cedc:	462b      	mov	r3, r5
 800cede:	461d      	mov	r5, r3
 800cee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cee4:	2a30      	cmp	r2, #48	; 0x30
 800cee6:	d0fa      	beq.n	800cede <_dtoa_r+0xb8e>
 800cee8:	e6d7      	b.n	800cc9a <_dtoa_r+0x94a>
 800ceea:	9a01      	ldr	r2, [sp, #4]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d184      	bne.n	800cdfa <_dtoa_r+0xaaa>
 800cef0:	9b00      	ldr	r3, [sp, #0]
 800cef2:	3301      	adds	r3, #1
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	2331      	movs	r3, #49	; 0x31
 800cef8:	7013      	strb	r3, [r2, #0]
 800cefa:	e6ce      	b.n	800cc9a <_dtoa_r+0x94a>
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <_dtoa_r+0xbd4>)
 800cefe:	f7ff ba95 	b.w	800c42c <_dtoa_r+0xdc>
 800cf02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f aa6e 	bne.w	800c3e6 <_dtoa_r+0x96>
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <_dtoa_r+0xbd8>)
 800cf0c:	f7ff ba8e 	b.w	800c42c <_dtoa_r+0xdc>
 800cf10:	9b02      	ldr	r3, [sp, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dcae      	bgt.n	800ce74 <_dtoa_r+0xb24>
 800cf16:	9b06      	ldr	r3, [sp, #24]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	f73f aea8 	bgt.w	800cc6e <_dtoa_r+0x91e>
 800cf1e:	e7a9      	b.n	800ce74 <_dtoa_r+0xb24>
 800cf20:	0800f35b 	.word	0x0800f35b
 800cf24:	0800f2b8 	.word	0x0800f2b8
 800cf28:	0800f2dc 	.word	0x0800f2dc

0800cf2c <__sflush_r>:
 800cf2c:	898a      	ldrh	r2, [r1, #12]
 800cf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf32:	4605      	mov	r5, r0
 800cf34:	0710      	lsls	r0, r2, #28
 800cf36:	460c      	mov	r4, r1
 800cf38:	d458      	bmi.n	800cfec <__sflush_r+0xc0>
 800cf3a:	684b      	ldr	r3, [r1, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	dc05      	bgt.n	800cf4c <__sflush_r+0x20>
 800cf40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	dc02      	bgt.n	800cf4c <__sflush_r+0x20>
 800cf46:	2000      	movs	r0, #0
 800cf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf4e:	2e00      	cmp	r6, #0
 800cf50:	d0f9      	beq.n	800cf46 <__sflush_r+0x1a>
 800cf52:	2300      	movs	r3, #0
 800cf54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf58:	682f      	ldr	r7, [r5, #0]
 800cf5a:	602b      	str	r3, [r5, #0]
 800cf5c:	d032      	beq.n	800cfc4 <__sflush_r+0x98>
 800cf5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	075a      	lsls	r2, r3, #29
 800cf64:	d505      	bpl.n	800cf72 <__sflush_r+0x46>
 800cf66:	6863      	ldr	r3, [r4, #4]
 800cf68:	1ac0      	subs	r0, r0, r3
 800cf6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf6c:	b10b      	cbz	r3, 800cf72 <__sflush_r+0x46>
 800cf6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf70:	1ac0      	subs	r0, r0, r3
 800cf72:	2300      	movs	r3, #0
 800cf74:	4602      	mov	r2, r0
 800cf76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf78:	6a21      	ldr	r1, [r4, #32]
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	47b0      	blx	r6
 800cf7e:	1c43      	adds	r3, r0, #1
 800cf80:	89a3      	ldrh	r3, [r4, #12]
 800cf82:	d106      	bne.n	800cf92 <__sflush_r+0x66>
 800cf84:	6829      	ldr	r1, [r5, #0]
 800cf86:	291d      	cmp	r1, #29
 800cf88:	d82c      	bhi.n	800cfe4 <__sflush_r+0xb8>
 800cf8a:	4a2a      	ldr	r2, [pc, #168]	; (800d034 <__sflush_r+0x108>)
 800cf8c:	40ca      	lsrs	r2, r1
 800cf8e:	07d6      	lsls	r6, r2, #31
 800cf90:	d528      	bpl.n	800cfe4 <__sflush_r+0xb8>
 800cf92:	2200      	movs	r2, #0
 800cf94:	6062      	str	r2, [r4, #4]
 800cf96:	04d9      	lsls	r1, r3, #19
 800cf98:	6922      	ldr	r2, [r4, #16]
 800cf9a:	6022      	str	r2, [r4, #0]
 800cf9c:	d504      	bpl.n	800cfa8 <__sflush_r+0x7c>
 800cf9e:	1c42      	adds	r2, r0, #1
 800cfa0:	d101      	bne.n	800cfa6 <__sflush_r+0x7a>
 800cfa2:	682b      	ldr	r3, [r5, #0]
 800cfa4:	b903      	cbnz	r3, 800cfa8 <__sflush_r+0x7c>
 800cfa6:	6560      	str	r0, [r4, #84]	; 0x54
 800cfa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfaa:	602f      	str	r7, [r5, #0]
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d0ca      	beq.n	800cf46 <__sflush_r+0x1a>
 800cfb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfb4:	4299      	cmp	r1, r3
 800cfb6:	d002      	beq.n	800cfbe <__sflush_r+0x92>
 800cfb8:	4628      	mov	r0, r5
 800cfba:	f7fe fa51 	bl	800b460 <_free_r>
 800cfbe:	2000      	movs	r0, #0
 800cfc0:	6360      	str	r0, [r4, #52]	; 0x34
 800cfc2:	e7c1      	b.n	800cf48 <__sflush_r+0x1c>
 800cfc4:	6a21      	ldr	r1, [r4, #32]
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b0      	blx	r6
 800cfcc:	1c41      	adds	r1, r0, #1
 800cfce:	d1c7      	bne.n	800cf60 <__sflush_r+0x34>
 800cfd0:	682b      	ldr	r3, [r5, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0c4      	beq.n	800cf60 <__sflush_r+0x34>
 800cfd6:	2b1d      	cmp	r3, #29
 800cfd8:	d001      	beq.n	800cfde <__sflush_r+0xb2>
 800cfda:	2b16      	cmp	r3, #22
 800cfdc:	d101      	bne.n	800cfe2 <__sflush_r+0xb6>
 800cfde:	602f      	str	r7, [r5, #0]
 800cfe0:	e7b1      	b.n	800cf46 <__sflush_r+0x1a>
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	e7ad      	b.n	800cf48 <__sflush_r+0x1c>
 800cfec:	690f      	ldr	r7, [r1, #16]
 800cfee:	2f00      	cmp	r7, #0
 800cff0:	d0a9      	beq.n	800cf46 <__sflush_r+0x1a>
 800cff2:	0793      	lsls	r3, r2, #30
 800cff4:	680e      	ldr	r6, [r1, #0]
 800cff6:	bf08      	it	eq
 800cff8:	694b      	ldreq	r3, [r1, #20]
 800cffa:	600f      	str	r7, [r1, #0]
 800cffc:	bf18      	it	ne
 800cffe:	2300      	movne	r3, #0
 800d000:	eba6 0807 	sub.w	r8, r6, r7
 800d004:	608b      	str	r3, [r1, #8]
 800d006:	f1b8 0f00 	cmp.w	r8, #0
 800d00a:	dd9c      	ble.n	800cf46 <__sflush_r+0x1a>
 800d00c:	6a21      	ldr	r1, [r4, #32]
 800d00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d010:	4643      	mov	r3, r8
 800d012:	463a      	mov	r2, r7
 800d014:	4628      	mov	r0, r5
 800d016:	47b0      	blx	r6
 800d018:	2800      	cmp	r0, #0
 800d01a:	dc06      	bgt.n	800d02a <__sflush_r+0xfe>
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d022:	81a3      	strh	r3, [r4, #12]
 800d024:	f04f 30ff 	mov.w	r0, #4294967295
 800d028:	e78e      	b.n	800cf48 <__sflush_r+0x1c>
 800d02a:	4407      	add	r7, r0
 800d02c:	eba8 0800 	sub.w	r8, r8, r0
 800d030:	e7e9      	b.n	800d006 <__sflush_r+0xda>
 800d032:	bf00      	nop
 800d034:	20400001 	.word	0x20400001

0800d038 <_fflush_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	690b      	ldr	r3, [r1, #16]
 800d03c:	4605      	mov	r5, r0
 800d03e:	460c      	mov	r4, r1
 800d040:	b913      	cbnz	r3, 800d048 <_fflush_r+0x10>
 800d042:	2500      	movs	r5, #0
 800d044:	4628      	mov	r0, r5
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	b118      	cbz	r0, 800d052 <_fflush_r+0x1a>
 800d04a:	6983      	ldr	r3, [r0, #24]
 800d04c:	b90b      	cbnz	r3, 800d052 <_fflush_r+0x1a>
 800d04e:	f000 f887 	bl	800d160 <__sinit>
 800d052:	4b14      	ldr	r3, [pc, #80]	; (800d0a4 <_fflush_r+0x6c>)
 800d054:	429c      	cmp	r4, r3
 800d056:	d11b      	bne.n	800d090 <_fflush_r+0x58>
 800d058:	686c      	ldr	r4, [r5, #4]
 800d05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d0ef      	beq.n	800d042 <_fflush_r+0xa>
 800d062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d064:	07d0      	lsls	r0, r2, #31
 800d066:	d404      	bmi.n	800d072 <_fflush_r+0x3a>
 800d068:	0599      	lsls	r1, r3, #22
 800d06a:	d402      	bmi.n	800d072 <_fflush_r+0x3a>
 800d06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d06e:	f000 f91a 	bl	800d2a6 <__retarget_lock_acquire_recursive>
 800d072:	4628      	mov	r0, r5
 800d074:	4621      	mov	r1, r4
 800d076:	f7ff ff59 	bl	800cf2c <__sflush_r>
 800d07a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d07c:	07da      	lsls	r2, r3, #31
 800d07e:	4605      	mov	r5, r0
 800d080:	d4e0      	bmi.n	800d044 <_fflush_r+0xc>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	059b      	lsls	r3, r3, #22
 800d086:	d4dd      	bmi.n	800d044 <_fflush_r+0xc>
 800d088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d08a:	f000 f90d 	bl	800d2a8 <__retarget_lock_release_recursive>
 800d08e:	e7d9      	b.n	800d044 <_fflush_r+0xc>
 800d090:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <_fflush_r+0x70>)
 800d092:	429c      	cmp	r4, r3
 800d094:	d101      	bne.n	800d09a <_fflush_r+0x62>
 800d096:	68ac      	ldr	r4, [r5, #8]
 800d098:	e7df      	b.n	800d05a <_fflush_r+0x22>
 800d09a:	4b04      	ldr	r3, [pc, #16]	; (800d0ac <_fflush_r+0x74>)
 800d09c:	429c      	cmp	r4, r3
 800d09e:	bf08      	it	eq
 800d0a0:	68ec      	ldreq	r4, [r5, #12]
 800d0a2:	e7da      	b.n	800d05a <_fflush_r+0x22>
 800d0a4:	0800f38c 	.word	0x0800f38c
 800d0a8:	0800f3ac 	.word	0x0800f3ac
 800d0ac:	0800f36c 	.word	0x0800f36c

0800d0b0 <std>:
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0be:	6083      	str	r3, [r0, #8]
 800d0c0:	8181      	strh	r1, [r0, #12]
 800d0c2:	6643      	str	r3, [r0, #100]	; 0x64
 800d0c4:	81c2      	strh	r2, [r0, #14]
 800d0c6:	6183      	str	r3, [r0, #24]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	2208      	movs	r2, #8
 800d0cc:	305c      	adds	r0, #92	; 0x5c
 800d0ce:	f7fe f9bf 	bl	800b450 <memset>
 800d0d2:	4b05      	ldr	r3, [pc, #20]	; (800d0e8 <std+0x38>)
 800d0d4:	6263      	str	r3, [r4, #36]	; 0x24
 800d0d6:	4b05      	ldr	r3, [pc, #20]	; (800d0ec <std+0x3c>)
 800d0d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0da:	4b05      	ldr	r3, [pc, #20]	; (800d0f0 <std+0x40>)
 800d0dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0de:	4b05      	ldr	r3, [pc, #20]	; (800d0f4 <std+0x44>)
 800d0e0:	6224      	str	r4, [r4, #32]
 800d0e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d0e4:	bd10      	pop	{r4, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0800dd75 	.word	0x0800dd75
 800d0ec:	0800dd97 	.word	0x0800dd97
 800d0f0:	0800ddcf 	.word	0x0800ddcf
 800d0f4:	0800ddf3 	.word	0x0800ddf3

0800d0f8 <_cleanup_r>:
 800d0f8:	4901      	ldr	r1, [pc, #4]	; (800d100 <_cleanup_r+0x8>)
 800d0fa:	f000 b8af 	b.w	800d25c <_fwalk_reent>
 800d0fe:	bf00      	nop
 800d100:	0800d039 	.word	0x0800d039

0800d104 <__sfmoreglue>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	2268      	movs	r2, #104	; 0x68
 800d108:	1e4d      	subs	r5, r1, #1
 800d10a:	4355      	muls	r5, r2
 800d10c:	460e      	mov	r6, r1
 800d10e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d112:	f7fe fa11 	bl	800b538 <_malloc_r>
 800d116:	4604      	mov	r4, r0
 800d118:	b140      	cbz	r0, 800d12c <__sfmoreglue+0x28>
 800d11a:	2100      	movs	r1, #0
 800d11c:	e9c0 1600 	strd	r1, r6, [r0]
 800d120:	300c      	adds	r0, #12
 800d122:	60a0      	str	r0, [r4, #8]
 800d124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d128:	f7fe f992 	bl	800b450 <memset>
 800d12c:	4620      	mov	r0, r4
 800d12e:	bd70      	pop	{r4, r5, r6, pc}

0800d130 <__sfp_lock_acquire>:
 800d130:	4801      	ldr	r0, [pc, #4]	; (800d138 <__sfp_lock_acquire+0x8>)
 800d132:	f000 b8b8 	b.w	800d2a6 <__retarget_lock_acquire_recursive>
 800d136:	bf00      	nop
 800d138:	20002971 	.word	0x20002971

0800d13c <__sfp_lock_release>:
 800d13c:	4801      	ldr	r0, [pc, #4]	; (800d144 <__sfp_lock_release+0x8>)
 800d13e:	f000 b8b3 	b.w	800d2a8 <__retarget_lock_release_recursive>
 800d142:	bf00      	nop
 800d144:	20002971 	.word	0x20002971

0800d148 <__sinit_lock_acquire>:
 800d148:	4801      	ldr	r0, [pc, #4]	; (800d150 <__sinit_lock_acquire+0x8>)
 800d14a:	f000 b8ac 	b.w	800d2a6 <__retarget_lock_acquire_recursive>
 800d14e:	bf00      	nop
 800d150:	20002972 	.word	0x20002972

0800d154 <__sinit_lock_release>:
 800d154:	4801      	ldr	r0, [pc, #4]	; (800d15c <__sinit_lock_release+0x8>)
 800d156:	f000 b8a7 	b.w	800d2a8 <__retarget_lock_release_recursive>
 800d15a:	bf00      	nop
 800d15c:	20002972 	.word	0x20002972

0800d160 <__sinit>:
 800d160:	b510      	push	{r4, lr}
 800d162:	4604      	mov	r4, r0
 800d164:	f7ff fff0 	bl	800d148 <__sinit_lock_acquire>
 800d168:	69a3      	ldr	r3, [r4, #24]
 800d16a:	b11b      	cbz	r3, 800d174 <__sinit+0x14>
 800d16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d170:	f7ff bff0 	b.w	800d154 <__sinit_lock_release>
 800d174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d178:	6523      	str	r3, [r4, #80]	; 0x50
 800d17a:	4b13      	ldr	r3, [pc, #76]	; (800d1c8 <__sinit+0x68>)
 800d17c:	4a13      	ldr	r2, [pc, #76]	; (800d1cc <__sinit+0x6c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	62a2      	str	r2, [r4, #40]	; 0x28
 800d182:	42a3      	cmp	r3, r4
 800d184:	bf04      	itt	eq
 800d186:	2301      	moveq	r3, #1
 800d188:	61a3      	streq	r3, [r4, #24]
 800d18a:	4620      	mov	r0, r4
 800d18c:	f000 f820 	bl	800d1d0 <__sfp>
 800d190:	6060      	str	r0, [r4, #4]
 800d192:	4620      	mov	r0, r4
 800d194:	f000 f81c 	bl	800d1d0 <__sfp>
 800d198:	60a0      	str	r0, [r4, #8]
 800d19a:	4620      	mov	r0, r4
 800d19c:	f000 f818 	bl	800d1d0 <__sfp>
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	60e0      	str	r0, [r4, #12]
 800d1a4:	2104      	movs	r1, #4
 800d1a6:	6860      	ldr	r0, [r4, #4]
 800d1a8:	f7ff ff82 	bl	800d0b0 <std>
 800d1ac:	68a0      	ldr	r0, [r4, #8]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	2109      	movs	r1, #9
 800d1b2:	f7ff ff7d 	bl	800d0b0 <std>
 800d1b6:	68e0      	ldr	r0, [r4, #12]
 800d1b8:	2202      	movs	r2, #2
 800d1ba:	2112      	movs	r1, #18
 800d1bc:	f7ff ff78 	bl	800d0b0 <std>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	61a3      	str	r3, [r4, #24]
 800d1c4:	e7d2      	b.n	800d16c <__sinit+0xc>
 800d1c6:	bf00      	nop
 800d1c8:	0800f2a4 	.word	0x0800f2a4
 800d1cc:	0800d0f9 	.word	0x0800d0f9

0800d1d0 <__sfp>:
 800d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d2:	4607      	mov	r7, r0
 800d1d4:	f7ff ffac 	bl	800d130 <__sfp_lock_acquire>
 800d1d8:	4b1e      	ldr	r3, [pc, #120]	; (800d254 <__sfp+0x84>)
 800d1da:	681e      	ldr	r6, [r3, #0]
 800d1dc:	69b3      	ldr	r3, [r6, #24]
 800d1de:	b913      	cbnz	r3, 800d1e6 <__sfp+0x16>
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f7ff ffbd 	bl	800d160 <__sinit>
 800d1e6:	3648      	adds	r6, #72	; 0x48
 800d1e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	d503      	bpl.n	800d1f8 <__sfp+0x28>
 800d1f0:	6833      	ldr	r3, [r6, #0]
 800d1f2:	b30b      	cbz	r3, 800d238 <__sfp+0x68>
 800d1f4:	6836      	ldr	r6, [r6, #0]
 800d1f6:	e7f7      	b.n	800d1e8 <__sfp+0x18>
 800d1f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1fc:	b9d5      	cbnz	r5, 800d234 <__sfp+0x64>
 800d1fe:	4b16      	ldr	r3, [pc, #88]	; (800d258 <__sfp+0x88>)
 800d200:	60e3      	str	r3, [r4, #12]
 800d202:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d206:	6665      	str	r5, [r4, #100]	; 0x64
 800d208:	f000 f84c 	bl	800d2a4 <__retarget_lock_init_recursive>
 800d20c:	f7ff ff96 	bl	800d13c <__sfp_lock_release>
 800d210:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d214:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d218:	6025      	str	r5, [r4, #0]
 800d21a:	61a5      	str	r5, [r4, #24]
 800d21c:	2208      	movs	r2, #8
 800d21e:	4629      	mov	r1, r5
 800d220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d224:	f7fe f914 	bl	800b450 <memset>
 800d228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d22c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d230:	4620      	mov	r0, r4
 800d232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d234:	3468      	adds	r4, #104	; 0x68
 800d236:	e7d9      	b.n	800d1ec <__sfp+0x1c>
 800d238:	2104      	movs	r1, #4
 800d23a:	4638      	mov	r0, r7
 800d23c:	f7ff ff62 	bl	800d104 <__sfmoreglue>
 800d240:	4604      	mov	r4, r0
 800d242:	6030      	str	r0, [r6, #0]
 800d244:	2800      	cmp	r0, #0
 800d246:	d1d5      	bne.n	800d1f4 <__sfp+0x24>
 800d248:	f7ff ff78 	bl	800d13c <__sfp_lock_release>
 800d24c:	230c      	movs	r3, #12
 800d24e:	603b      	str	r3, [r7, #0]
 800d250:	e7ee      	b.n	800d230 <__sfp+0x60>
 800d252:	bf00      	nop
 800d254:	0800f2a4 	.word	0x0800f2a4
 800d258:	ffff0001 	.word	0xffff0001

0800d25c <_fwalk_reent>:
 800d25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d260:	4606      	mov	r6, r0
 800d262:	4688      	mov	r8, r1
 800d264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d268:	2700      	movs	r7, #0
 800d26a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d26e:	f1b9 0901 	subs.w	r9, r9, #1
 800d272:	d505      	bpl.n	800d280 <_fwalk_reent+0x24>
 800d274:	6824      	ldr	r4, [r4, #0]
 800d276:	2c00      	cmp	r4, #0
 800d278:	d1f7      	bne.n	800d26a <_fwalk_reent+0xe>
 800d27a:	4638      	mov	r0, r7
 800d27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d280:	89ab      	ldrh	r3, [r5, #12]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d907      	bls.n	800d296 <_fwalk_reent+0x3a>
 800d286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d28a:	3301      	adds	r3, #1
 800d28c:	d003      	beq.n	800d296 <_fwalk_reent+0x3a>
 800d28e:	4629      	mov	r1, r5
 800d290:	4630      	mov	r0, r6
 800d292:	47c0      	blx	r8
 800d294:	4307      	orrs	r7, r0
 800d296:	3568      	adds	r5, #104	; 0x68
 800d298:	e7e9      	b.n	800d26e <_fwalk_reent+0x12>
	...

0800d29c <_localeconv_r>:
 800d29c:	4800      	ldr	r0, [pc, #0]	; (800d2a0 <_localeconv_r+0x4>)
 800d29e:	4770      	bx	lr
 800d2a0:	200002d8 	.word	0x200002d8

0800d2a4 <__retarget_lock_init_recursive>:
 800d2a4:	4770      	bx	lr

0800d2a6 <__retarget_lock_acquire_recursive>:
 800d2a6:	4770      	bx	lr

0800d2a8 <__retarget_lock_release_recursive>:
 800d2a8:	4770      	bx	lr

0800d2aa <__swhatbuf_r>:
 800d2aa:	b570      	push	{r4, r5, r6, lr}
 800d2ac:	460e      	mov	r6, r1
 800d2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b2:	2900      	cmp	r1, #0
 800d2b4:	b096      	sub	sp, #88	; 0x58
 800d2b6:	4614      	mov	r4, r2
 800d2b8:	461d      	mov	r5, r3
 800d2ba:	da08      	bge.n	800d2ce <__swhatbuf_r+0x24>
 800d2bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	602a      	str	r2, [r5, #0]
 800d2c4:	061a      	lsls	r2, r3, #24
 800d2c6:	d410      	bmi.n	800d2ea <__swhatbuf_r+0x40>
 800d2c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2cc:	e00e      	b.n	800d2ec <__swhatbuf_r+0x42>
 800d2ce:	466a      	mov	r2, sp
 800d2d0:	f000 fde6 	bl	800dea0 <_fstat_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	dbf1      	blt.n	800d2bc <__swhatbuf_r+0x12>
 800d2d8:	9a01      	ldr	r2, [sp, #4]
 800d2da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2e2:	425a      	negs	r2, r3
 800d2e4:	415a      	adcs	r2, r3
 800d2e6:	602a      	str	r2, [r5, #0]
 800d2e8:	e7ee      	b.n	800d2c8 <__swhatbuf_r+0x1e>
 800d2ea:	2340      	movs	r3, #64	; 0x40
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	6023      	str	r3, [r4, #0]
 800d2f0:	b016      	add	sp, #88	; 0x58
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}

0800d2f4 <__smakebuf_r>:
 800d2f4:	898b      	ldrh	r3, [r1, #12]
 800d2f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2f8:	079d      	lsls	r5, r3, #30
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	d507      	bpl.n	800d310 <__smakebuf_r+0x1c>
 800d300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	6123      	str	r3, [r4, #16]
 800d308:	2301      	movs	r3, #1
 800d30a:	6163      	str	r3, [r4, #20]
 800d30c:	b002      	add	sp, #8
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
 800d310:	ab01      	add	r3, sp, #4
 800d312:	466a      	mov	r2, sp
 800d314:	f7ff ffc9 	bl	800d2aa <__swhatbuf_r>
 800d318:	9900      	ldr	r1, [sp, #0]
 800d31a:	4605      	mov	r5, r0
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7fe f90b 	bl	800b538 <_malloc_r>
 800d322:	b948      	cbnz	r0, 800d338 <__smakebuf_r+0x44>
 800d324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d328:	059a      	lsls	r2, r3, #22
 800d32a:	d4ef      	bmi.n	800d30c <__smakebuf_r+0x18>
 800d32c:	f023 0303 	bic.w	r3, r3, #3
 800d330:	f043 0302 	orr.w	r3, r3, #2
 800d334:	81a3      	strh	r3, [r4, #12]
 800d336:	e7e3      	b.n	800d300 <__smakebuf_r+0xc>
 800d338:	4b0d      	ldr	r3, [pc, #52]	; (800d370 <__smakebuf_r+0x7c>)
 800d33a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	6020      	str	r0, [r4, #0]
 800d340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d344:	81a3      	strh	r3, [r4, #12]
 800d346:	9b00      	ldr	r3, [sp, #0]
 800d348:	6163      	str	r3, [r4, #20]
 800d34a:	9b01      	ldr	r3, [sp, #4]
 800d34c:	6120      	str	r0, [r4, #16]
 800d34e:	b15b      	cbz	r3, 800d368 <__smakebuf_r+0x74>
 800d350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d354:	4630      	mov	r0, r6
 800d356:	f000 fdb5 	bl	800dec4 <_isatty_r>
 800d35a:	b128      	cbz	r0, 800d368 <__smakebuf_r+0x74>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f023 0303 	bic.w	r3, r3, #3
 800d362:	f043 0301 	orr.w	r3, r3, #1
 800d366:	81a3      	strh	r3, [r4, #12]
 800d368:	89a0      	ldrh	r0, [r4, #12]
 800d36a:	4305      	orrs	r5, r0
 800d36c:	81a5      	strh	r5, [r4, #12]
 800d36e:	e7cd      	b.n	800d30c <__smakebuf_r+0x18>
 800d370:	0800d0f9 	.word	0x0800d0f9

0800d374 <__malloc_lock>:
 800d374:	4801      	ldr	r0, [pc, #4]	; (800d37c <__malloc_lock+0x8>)
 800d376:	f7ff bf96 	b.w	800d2a6 <__retarget_lock_acquire_recursive>
 800d37a:	bf00      	nop
 800d37c:	20002970 	.word	0x20002970

0800d380 <__malloc_unlock>:
 800d380:	4801      	ldr	r0, [pc, #4]	; (800d388 <__malloc_unlock+0x8>)
 800d382:	f7ff bf91 	b.w	800d2a8 <__retarget_lock_release_recursive>
 800d386:	bf00      	nop
 800d388:	20002970 	.word	0x20002970

0800d38c <_Balloc>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d390:	4604      	mov	r4, r0
 800d392:	460d      	mov	r5, r1
 800d394:	b976      	cbnz	r6, 800d3b4 <_Balloc+0x28>
 800d396:	2010      	movs	r0, #16
 800d398:	f7fe f834 	bl	800b404 <malloc>
 800d39c:	4602      	mov	r2, r0
 800d39e:	6260      	str	r0, [r4, #36]	; 0x24
 800d3a0:	b920      	cbnz	r0, 800d3ac <_Balloc+0x20>
 800d3a2:	4b18      	ldr	r3, [pc, #96]	; (800d404 <_Balloc+0x78>)
 800d3a4:	4818      	ldr	r0, [pc, #96]	; (800d408 <_Balloc+0x7c>)
 800d3a6:	2166      	movs	r1, #102	; 0x66
 800d3a8:	f000 fd3a 	bl	800de20 <__assert_func>
 800d3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b0:	6006      	str	r6, [r0, #0]
 800d3b2:	60c6      	str	r6, [r0, #12]
 800d3b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3b6:	68f3      	ldr	r3, [r6, #12]
 800d3b8:	b183      	cbz	r3, 800d3dc <_Balloc+0x50>
 800d3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3c2:	b9b8      	cbnz	r0, 800d3f4 <_Balloc+0x68>
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ca:	1d72      	adds	r2, r6, #5
 800d3cc:	0092      	lsls	r2, r2, #2
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 fb60 	bl	800da94 <_calloc_r>
 800d3d4:	b160      	cbz	r0, 800d3f0 <_Balloc+0x64>
 800d3d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3da:	e00e      	b.n	800d3fa <_Balloc+0x6e>
 800d3dc:	2221      	movs	r2, #33	; 0x21
 800d3de:	2104      	movs	r1, #4
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f000 fb57 	bl	800da94 <_calloc_r>
 800d3e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e8:	60f0      	str	r0, [r6, #12]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e4      	bne.n	800d3ba <_Balloc+0x2e>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
 800d3f4:	6802      	ldr	r2, [r0, #0]
 800d3f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d400:	e7f7      	b.n	800d3f2 <_Balloc+0x66>
 800d402:	bf00      	nop
 800d404:	0800f2e9 	.word	0x0800f2e9
 800d408:	0800f3cc 	.word	0x0800f3cc

0800d40c <_Bfree>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d410:	4605      	mov	r5, r0
 800d412:	460c      	mov	r4, r1
 800d414:	b976      	cbnz	r6, 800d434 <_Bfree+0x28>
 800d416:	2010      	movs	r0, #16
 800d418:	f7fd fff4 	bl	800b404 <malloc>
 800d41c:	4602      	mov	r2, r0
 800d41e:	6268      	str	r0, [r5, #36]	; 0x24
 800d420:	b920      	cbnz	r0, 800d42c <_Bfree+0x20>
 800d422:	4b09      	ldr	r3, [pc, #36]	; (800d448 <_Bfree+0x3c>)
 800d424:	4809      	ldr	r0, [pc, #36]	; (800d44c <_Bfree+0x40>)
 800d426:	218a      	movs	r1, #138	; 0x8a
 800d428:	f000 fcfa 	bl	800de20 <__assert_func>
 800d42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d430:	6006      	str	r6, [r0, #0]
 800d432:	60c6      	str	r6, [r0, #12]
 800d434:	b13c      	cbz	r4, 800d446 <_Bfree+0x3a>
 800d436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d438:	6862      	ldr	r2, [r4, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d440:	6021      	str	r1, [r4, #0]
 800d442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	0800f2e9 	.word	0x0800f2e9
 800d44c:	0800f3cc 	.word	0x0800f3cc

0800d450 <__multadd>:
 800d450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d454:	690d      	ldr	r5, [r1, #16]
 800d456:	4607      	mov	r7, r0
 800d458:	460c      	mov	r4, r1
 800d45a:	461e      	mov	r6, r3
 800d45c:	f101 0c14 	add.w	ip, r1, #20
 800d460:	2000      	movs	r0, #0
 800d462:	f8dc 3000 	ldr.w	r3, [ip]
 800d466:	b299      	uxth	r1, r3
 800d468:	fb02 6101 	mla	r1, r2, r1, r6
 800d46c:	0c1e      	lsrs	r6, r3, #16
 800d46e:	0c0b      	lsrs	r3, r1, #16
 800d470:	fb02 3306 	mla	r3, r2, r6, r3
 800d474:	b289      	uxth	r1, r1
 800d476:	3001      	adds	r0, #1
 800d478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d47c:	4285      	cmp	r5, r0
 800d47e:	f84c 1b04 	str.w	r1, [ip], #4
 800d482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d486:	dcec      	bgt.n	800d462 <__multadd+0x12>
 800d488:	b30e      	cbz	r6, 800d4ce <__multadd+0x7e>
 800d48a:	68a3      	ldr	r3, [r4, #8]
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dc19      	bgt.n	800d4c4 <__multadd+0x74>
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	4638      	mov	r0, r7
 800d494:	3101      	adds	r1, #1
 800d496:	f7ff ff79 	bl	800d38c <_Balloc>
 800d49a:	4680      	mov	r8, r0
 800d49c:	b928      	cbnz	r0, 800d4aa <__multadd+0x5a>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <__multadd+0x84>)
 800d4a2:	480d      	ldr	r0, [pc, #52]	; (800d4d8 <__multadd+0x88>)
 800d4a4:	21b5      	movs	r1, #181	; 0xb5
 800d4a6:	f000 fcbb 	bl	800de20 <__assert_func>
 800d4aa:	6922      	ldr	r2, [r4, #16]
 800d4ac:	3202      	adds	r2, #2
 800d4ae:	f104 010c 	add.w	r1, r4, #12
 800d4b2:	0092      	lsls	r2, r2, #2
 800d4b4:	300c      	adds	r0, #12
 800d4b6:	f7fd ffbd 	bl	800b434 <memcpy>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff ffa5 	bl	800d40c <_Bfree>
 800d4c2:	4644      	mov	r4, r8
 800d4c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	615e      	str	r6, [r3, #20]
 800d4cc:	6125      	str	r5, [r4, #16]
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d4:	0800f35b 	.word	0x0800f35b
 800d4d8:	0800f3cc 	.word	0x0800f3cc

0800d4dc <__hi0bits>:
 800d4dc:	0c03      	lsrs	r3, r0, #16
 800d4de:	041b      	lsls	r3, r3, #16
 800d4e0:	b9d3      	cbnz	r3, 800d518 <__hi0bits+0x3c>
 800d4e2:	0400      	lsls	r0, r0, #16
 800d4e4:	2310      	movs	r3, #16
 800d4e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4ea:	bf04      	itt	eq
 800d4ec:	0200      	lsleq	r0, r0, #8
 800d4ee:	3308      	addeq	r3, #8
 800d4f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d4f4:	bf04      	itt	eq
 800d4f6:	0100      	lsleq	r0, r0, #4
 800d4f8:	3304      	addeq	r3, #4
 800d4fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4fe:	bf04      	itt	eq
 800d500:	0080      	lsleq	r0, r0, #2
 800d502:	3302      	addeq	r3, #2
 800d504:	2800      	cmp	r0, #0
 800d506:	db05      	blt.n	800d514 <__hi0bits+0x38>
 800d508:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d50c:	f103 0301 	add.w	r3, r3, #1
 800d510:	bf08      	it	eq
 800d512:	2320      	moveq	r3, #32
 800d514:	4618      	mov	r0, r3
 800d516:	4770      	bx	lr
 800d518:	2300      	movs	r3, #0
 800d51a:	e7e4      	b.n	800d4e6 <__hi0bits+0xa>

0800d51c <__lo0bits>:
 800d51c:	6803      	ldr	r3, [r0, #0]
 800d51e:	f013 0207 	ands.w	r2, r3, #7
 800d522:	4601      	mov	r1, r0
 800d524:	d00b      	beq.n	800d53e <__lo0bits+0x22>
 800d526:	07da      	lsls	r2, r3, #31
 800d528:	d423      	bmi.n	800d572 <__lo0bits+0x56>
 800d52a:	0798      	lsls	r0, r3, #30
 800d52c:	bf49      	itett	mi
 800d52e:	085b      	lsrmi	r3, r3, #1
 800d530:	089b      	lsrpl	r3, r3, #2
 800d532:	2001      	movmi	r0, #1
 800d534:	600b      	strmi	r3, [r1, #0]
 800d536:	bf5c      	itt	pl
 800d538:	600b      	strpl	r3, [r1, #0]
 800d53a:	2002      	movpl	r0, #2
 800d53c:	4770      	bx	lr
 800d53e:	b298      	uxth	r0, r3
 800d540:	b9a8      	cbnz	r0, 800d56e <__lo0bits+0x52>
 800d542:	0c1b      	lsrs	r3, r3, #16
 800d544:	2010      	movs	r0, #16
 800d546:	b2da      	uxtb	r2, r3
 800d548:	b90a      	cbnz	r2, 800d54e <__lo0bits+0x32>
 800d54a:	3008      	adds	r0, #8
 800d54c:	0a1b      	lsrs	r3, r3, #8
 800d54e:	071a      	lsls	r2, r3, #28
 800d550:	bf04      	itt	eq
 800d552:	091b      	lsreq	r3, r3, #4
 800d554:	3004      	addeq	r0, #4
 800d556:	079a      	lsls	r2, r3, #30
 800d558:	bf04      	itt	eq
 800d55a:	089b      	lsreq	r3, r3, #2
 800d55c:	3002      	addeq	r0, #2
 800d55e:	07da      	lsls	r2, r3, #31
 800d560:	d403      	bmi.n	800d56a <__lo0bits+0x4e>
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	f100 0001 	add.w	r0, r0, #1
 800d568:	d005      	beq.n	800d576 <__lo0bits+0x5a>
 800d56a:	600b      	str	r3, [r1, #0]
 800d56c:	4770      	bx	lr
 800d56e:	4610      	mov	r0, r2
 800d570:	e7e9      	b.n	800d546 <__lo0bits+0x2a>
 800d572:	2000      	movs	r0, #0
 800d574:	4770      	bx	lr
 800d576:	2020      	movs	r0, #32
 800d578:	4770      	bx	lr
	...

0800d57c <__i2b>:
 800d57c:	b510      	push	{r4, lr}
 800d57e:	460c      	mov	r4, r1
 800d580:	2101      	movs	r1, #1
 800d582:	f7ff ff03 	bl	800d38c <_Balloc>
 800d586:	4602      	mov	r2, r0
 800d588:	b928      	cbnz	r0, 800d596 <__i2b+0x1a>
 800d58a:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <__i2b+0x24>)
 800d58c:	4805      	ldr	r0, [pc, #20]	; (800d5a4 <__i2b+0x28>)
 800d58e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d592:	f000 fc45 	bl	800de20 <__assert_func>
 800d596:	2301      	movs	r3, #1
 800d598:	6144      	str	r4, [r0, #20]
 800d59a:	6103      	str	r3, [r0, #16]
 800d59c:	bd10      	pop	{r4, pc}
 800d59e:	bf00      	nop
 800d5a0:	0800f35b 	.word	0x0800f35b
 800d5a4:	0800f3cc 	.word	0x0800f3cc

0800d5a8 <__multiply>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	4691      	mov	r9, r2
 800d5ae:	690a      	ldr	r2, [r1, #16]
 800d5b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	bfb8      	it	lt
 800d5b8:	460b      	movlt	r3, r1
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	bfbc      	itt	lt
 800d5be:	464c      	movlt	r4, r9
 800d5c0:	4699      	movlt	r9, r3
 800d5c2:	6927      	ldr	r7, [r4, #16]
 800d5c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5c8:	68a3      	ldr	r3, [r4, #8]
 800d5ca:	6861      	ldr	r1, [r4, #4]
 800d5cc:	eb07 060a 	add.w	r6, r7, sl
 800d5d0:	42b3      	cmp	r3, r6
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	bfb8      	it	lt
 800d5d6:	3101      	addlt	r1, #1
 800d5d8:	f7ff fed8 	bl	800d38c <_Balloc>
 800d5dc:	b930      	cbnz	r0, 800d5ec <__multiply+0x44>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	4b44      	ldr	r3, [pc, #272]	; (800d6f4 <__multiply+0x14c>)
 800d5e2:	4845      	ldr	r0, [pc, #276]	; (800d6f8 <__multiply+0x150>)
 800d5e4:	f240 115d 	movw	r1, #349	; 0x15d
 800d5e8:	f000 fc1a 	bl	800de20 <__assert_func>
 800d5ec:	f100 0514 	add.w	r5, r0, #20
 800d5f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	4543      	cmp	r3, r8
 800d5fa:	d321      	bcc.n	800d640 <__multiply+0x98>
 800d5fc:	f104 0314 	add.w	r3, r4, #20
 800d600:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d604:	f109 0314 	add.w	r3, r9, #20
 800d608:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d60c:	9202      	str	r2, [sp, #8]
 800d60e:	1b3a      	subs	r2, r7, r4
 800d610:	3a15      	subs	r2, #21
 800d612:	f022 0203 	bic.w	r2, r2, #3
 800d616:	3204      	adds	r2, #4
 800d618:	f104 0115 	add.w	r1, r4, #21
 800d61c:	428f      	cmp	r7, r1
 800d61e:	bf38      	it	cc
 800d620:	2204      	movcc	r2, #4
 800d622:	9201      	str	r2, [sp, #4]
 800d624:	9a02      	ldr	r2, [sp, #8]
 800d626:	9303      	str	r3, [sp, #12]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d80c      	bhi.n	800d646 <__multiply+0x9e>
 800d62c:	2e00      	cmp	r6, #0
 800d62e:	dd03      	ble.n	800d638 <__multiply+0x90>
 800d630:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d634:	2b00      	cmp	r3, #0
 800d636:	d05a      	beq.n	800d6ee <__multiply+0x146>
 800d638:	6106      	str	r6, [r0, #16]
 800d63a:	b005      	add	sp, #20
 800d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d640:	f843 2b04 	str.w	r2, [r3], #4
 800d644:	e7d8      	b.n	800d5f8 <__multiply+0x50>
 800d646:	f8b3 a000 	ldrh.w	sl, [r3]
 800d64a:	f1ba 0f00 	cmp.w	sl, #0
 800d64e:	d024      	beq.n	800d69a <__multiply+0xf2>
 800d650:	f104 0e14 	add.w	lr, r4, #20
 800d654:	46a9      	mov	r9, r5
 800d656:	f04f 0c00 	mov.w	ip, #0
 800d65a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d65e:	f8d9 1000 	ldr.w	r1, [r9]
 800d662:	fa1f fb82 	uxth.w	fp, r2
 800d666:	b289      	uxth	r1, r1
 800d668:	fb0a 110b 	mla	r1, sl, fp, r1
 800d66c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d670:	f8d9 2000 	ldr.w	r2, [r9]
 800d674:	4461      	add	r1, ip
 800d676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d67a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d67e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d682:	b289      	uxth	r1, r1
 800d684:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d688:	4577      	cmp	r7, lr
 800d68a:	f849 1b04 	str.w	r1, [r9], #4
 800d68e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d692:	d8e2      	bhi.n	800d65a <__multiply+0xb2>
 800d694:	9a01      	ldr	r2, [sp, #4]
 800d696:	f845 c002 	str.w	ip, [r5, r2]
 800d69a:	9a03      	ldr	r2, [sp, #12]
 800d69c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	f1b9 0f00 	cmp.w	r9, #0
 800d6a6:	d020      	beq.n	800d6ea <__multiply+0x142>
 800d6a8:	6829      	ldr	r1, [r5, #0]
 800d6aa:	f104 0c14 	add.w	ip, r4, #20
 800d6ae:	46ae      	mov	lr, r5
 800d6b0:	f04f 0a00 	mov.w	sl, #0
 800d6b4:	f8bc b000 	ldrh.w	fp, [ip]
 800d6b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6bc:	fb09 220b 	mla	r2, r9, fp, r2
 800d6c0:	4492      	add	sl, r2
 800d6c2:	b289      	uxth	r1, r1
 800d6c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6c8:	f84e 1b04 	str.w	r1, [lr], #4
 800d6cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6d0:	f8be 1000 	ldrh.w	r1, [lr]
 800d6d4:	0c12      	lsrs	r2, r2, #16
 800d6d6:	fb09 1102 	mla	r1, r9, r2, r1
 800d6da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d6de:	4567      	cmp	r7, ip
 800d6e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6e4:	d8e6      	bhi.n	800d6b4 <__multiply+0x10c>
 800d6e6:	9a01      	ldr	r2, [sp, #4]
 800d6e8:	50a9      	str	r1, [r5, r2]
 800d6ea:	3504      	adds	r5, #4
 800d6ec:	e79a      	b.n	800d624 <__multiply+0x7c>
 800d6ee:	3e01      	subs	r6, #1
 800d6f0:	e79c      	b.n	800d62c <__multiply+0x84>
 800d6f2:	bf00      	nop
 800d6f4:	0800f35b 	.word	0x0800f35b
 800d6f8:	0800f3cc 	.word	0x0800f3cc

0800d6fc <__pow5mult>:
 800d6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d700:	4615      	mov	r5, r2
 800d702:	f012 0203 	ands.w	r2, r2, #3
 800d706:	4606      	mov	r6, r0
 800d708:	460f      	mov	r7, r1
 800d70a:	d007      	beq.n	800d71c <__pow5mult+0x20>
 800d70c:	4c25      	ldr	r4, [pc, #148]	; (800d7a4 <__pow5mult+0xa8>)
 800d70e:	3a01      	subs	r2, #1
 800d710:	2300      	movs	r3, #0
 800d712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d716:	f7ff fe9b 	bl	800d450 <__multadd>
 800d71a:	4607      	mov	r7, r0
 800d71c:	10ad      	asrs	r5, r5, #2
 800d71e:	d03d      	beq.n	800d79c <__pow5mult+0xa0>
 800d720:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d722:	b97c      	cbnz	r4, 800d744 <__pow5mult+0x48>
 800d724:	2010      	movs	r0, #16
 800d726:	f7fd fe6d 	bl	800b404 <malloc>
 800d72a:	4602      	mov	r2, r0
 800d72c:	6270      	str	r0, [r6, #36]	; 0x24
 800d72e:	b928      	cbnz	r0, 800d73c <__pow5mult+0x40>
 800d730:	4b1d      	ldr	r3, [pc, #116]	; (800d7a8 <__pow5mult+0xac>)
 800d732:	481e      	ldr	r0, [pc, #120]	; (800d7ac <__pow5mult+0xb0>)
 800d734:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d738:	f000 fb72 	bl	800de20 <__assert_func>
 800d73c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d740:	6004      	str	r4, [r0, #0]
 800d742:	60c4      	str	r4, [r0, #12]
 800d744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d74c:	b94c      	cbnz	r4, 800d762 <__pow5mult+0x66>
 800d74e:	f240 2171 	movw	r1, #625	; 0x271
 800d752:	4630      	mov	r0, r6
 800d754:	f7ff ff12 	bl	800d57c <__i2b>
 800d758:	2300      	movs	r3, #0
 800d75a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d75e:	4604      	mov	r4, r0
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	f04f 0900 	mov.w	r9, #0
 800d766:	07eb      	lsls	r3, r5, #31
 800d768:	d50a      	bpl.n	800d780 <__pow5mult+0x84>
 800d76a:	4639      	mov	r1, r7
 800d76c:	4622      	mov	r2, r4
 800d76e:	4630      	mov	r0, r6
 800d770:	f7ff ff1a 	bl	800d5a8 <__multiply>
 800d774:	4639      	mov	r1, r7
 800d776:	4680      	mov	r8, r0
 800d778:	4630      	mov	r0, r6
 800d77a:	f7ff fe47 	bl	800d40c <_Bfree>
 800d77e:	4647      	mov	r7, r8
 800d780:	106d      	asrs	r5, r5, #1
 800d782:	d00b      	beq.n	800d79c <__pow5mult+0xa0>
 800d784:	6820      	ldr	r0, [r4, #0]
 800d786:	b938      	cbnz	r0, 800d798 <__pow5mult+0x9c>
 800d788:	4622      	mov	r2, r4
 800d78a:	4621      	mov	r1, r4
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff ff0b 	bl	800d5a8 <__multiply>
 800d792:	6020      	str	r0, [r4, #0]
 800d794:	f8c0 9000 	str.w	r9, [r0]
 800d798:	4604      	mov	r4, r0
 800d79a:	e7e4      	b.n	800d766 <__pow5mult+0x6a>
 800d79c:	4638      	mov	r0, r7
 800d79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	bf00      	nop
 800d7a4:	0800f518 	.word	0x0800f518
 800d7a8:	0800f2e9 	.word	0x0800f2e9
 800d7ac:	0800f3cc 	.word	0x0800f3cc

0800d7b0 <__lshift>:
 800d7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	6849      	ldr	r1, [r1, #4]
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	4691      	mov	r9, r2
 800d7c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7c8:	f108 0601 	add.w	r6, r8, #1
 800d7cc:	42b3      	cmp	r3, r6
 800d7ce:	db0b      	blt.n	800d7e8 <__lshift+0x38>
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7ff fddb 	bl	800d38c <_Balloc>
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	b948      	cbnz	r0, 800d7ee <__lshift+0x3e>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	4b2a      	ldr	r3, [pc, #168]	; (800d888 <__lshift+0xd8>)
 800d7de:	482b      	ldr	r0, [pc, #172]	; (800d88c <__lshift+0xdc>)
 800d7e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7e4:	f000 fb1c 	bl	800de20 <__assert_func>
 800d7e8:	3101      	adds	r1, #1
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	e7ee      	b.n	800d7cc <__lshift+0x1c>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f100 0114 	add.w	r1, r0, #20
 800d7f4:	f100 0210 	add.w	r2, r0, #16
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	4553      	cmp	r3, sl
 800d7fc:	db37      	blt.n	800d86e <__lshift+0xbe>
 800d7fe:	6920      	ldr	r0, [r4, #16]
 800d800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d804:	f104 0314 	add.w	r3, r4, #20
 800d808:	f019 091f 	ands.w	r9, r9, #31
 800d80c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d810:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d814:	d02f      	beq.n	800d876 <__lshift+0xc6>
 800d816:	f1c9 0e20 	rsb	lr, r9, #32
 800d81a:	468a      	mov	sl, r1
 800d81c:	f04f 0c00 	mov.w	ip, #0
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	fa02 f209 	lsl.w	r2, r2, r9
 800d826:	ea42 020c 	orr.w	r2, r2, ip
 800d82a:	f84a 2b04 	str.w	r2, [sl], #4
 800d82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d832:	4298      	cmp	r0, r3
 800d834:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d838:	d8f2      	bhi.n	800d820 <__lshift+0x70>
 800d83a:	1b03      	subs	r3, r0, r4
 800d83c:	3b15      	subs	r3, #21
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	3304      	adds	r3, #4
 800d844:	f104 0215 	add.w	r2, r4, #21
 800d848:	4290      	cmp	r0, r2
 800d84a:	bf38      	it	cc
 800d84c:	2304      	movcc	r3, #4
 800d84e:	f841 c003 	str.w	ip, [r1, r3]
 800d852:	f1bc 0f00 	cmp.w	ip, #0
 800d856:	d001      	beq.n	800d85c <__lshift+0xac>
 800d858:	f108 0602 	add.w	r6, r8, #2
 800d85c:	3e01      	subs	r6, #1
 800d85e:	4638      	mov	r0, r7
 800d860:	612e      	str	r6, [r5, #16]
 800d862:	4621      	mov	r1, r4
 800d864:	f7ff fdd2 	bl	800d40c <_Bfree>
 800d868:	4628      	mov	r0, r5
 800d86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d872:	3301      	adds	r3, #1
 800d874:	e7c1      	b.n	800d7fa <__lshift+0x4a>
 800d876:	3904      	subs	r1, #4
 800d878:	f853 2b04 	ldr.w	r2, [r3], #4
 800d87c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d880:	4298      	cmp	r0, r3
 800d882:	d8f9      	bhi.n	800d878 <__lshift+0xc8>
 800d884:	e7ea      	b.n	800d85c <__lshift+0xac>
 800d886:	bf00      	nop
 800d888:	0800f35b 	.word	0x0800f35b
 800d88c:	0800f3cc 	.word	0x0800f3cc

0800d890 <__mcmp>:
 800d890:	b530      	push	{r4, r5, lr}
 800d892:	6902      	ldr	r2, [r0, #16]
 800d894:	690c      	ldr	r4, [r1, #16]
 800d896:	1b12      	subs	r2, r2, r4
 800d898:	d10e      	bne.n	800d8b8 <__mcmp+0x28>
 800d89a:	f100 0314 	add.w	r3, r0, #20
 800d89e:	3114      	adds	r1, #20
 800d8a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8b0:	42a5      	cmp	r5, r4
 800d8b2:	d003      	beq.n	800d8bc <__mcmp+0x2c>
 800d8b4:	d305      	bcc.n	800d8c2 <__mcmp+0x32>
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	bd30      	pop	{r4, r5, pc}
 800d8bc:	4283      	cmp	r3, r0
 800d8be:	d3f3      	bcc.n	800d8a8 <__mcmp+0x18>
 800d8c0:	e7fa      	b.n	800d8b8 <__mcmp+0x28>
 800d8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c6:	e7f7      	b.n	800d8b8 <__mcmp+0x28>

0800d8c8 <__mdiff>:
 800d8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4690      	mov	r8, r2
 800d8d6:	f7ff ffdb 	bl	800d890 <__mcmp>
 800d8da:	1e05      	subs	r5, r0, #0
 800d8dc:	d110      	bne.n	800d900 <__mdiff+0x38>
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f7ff fd53 	bl	800d38c <_Balloc>
 800d8e6:	b930      	cbnz	r0, 800d8f6 <__mdiff+0x2e>
 800d8e8:	4b3a      	ldr	r3, [pc, #232]	; (800d9d4 <__mdiff+0x10c>)
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	f240 2132 	movw	r1, #562	; 0x232
 800d8f0:	4839      	ldr	r0, [pc, #228]	; (800d9d8 <__mdiff+0x110>)
 800d8f2:	f000 fa95 	bl	800de20 <__assert_func>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d900:	bfa4      	itt	ge
 800d902:	4643      	movge	r3, r8
 800d904:	46a0      	movge	r8, r4
 800d906:	4630      	mov	r0, r6
 800d908:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d90c:	bfa6      	itte	ge
 800d90e:	461c      	movge	r4, r3
 800d910:	2500      	movge	r5, #0
 800d912:	2501      	movlt	r5, #1
 800d914:	f7ff fd3a 	bl	800d38c <_Balloc>
 800d918:	b920      	cbnz	r0, 800d924 <__mdiff+0x5c>
 800d91a:	4b2e      	ldr	r3, [pc, #184]	; (800d9d4 <__mdiff+0x10c>)
 800d91c:	4602      	mov	r2, r0
 800d91e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d922:	e7e5      	b.n	800d8f0 <__mdiff+0x28>
 800d924:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d928:	6926      	ldr	r6, [r4, #16]
 800d92a:	60c5      	str	r5, [r0, #12]
 800d92c:	f104 0914 	add.w	r9, r4, #20
 800d930:	f108 0514 	add.w	r5, r8, #20
 800d934:	f100 0e14 	add.w	lr, r0, #20
 800d938:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d93c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d940:	f108 0210 	add.w	r2, r8, #16
 800d944:	46f2      	mov	sl, lr
 800d946:	2100      	movs	r1, #0
 800d948:	f859 3b04 	ldr.w	r3, [r9], #4
 800d94c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d950:	fa1f f883 	uxth.w	r8, r3
 800d954:	fa11 f18b 	uxtah	r1, r1, fp
 800d958:	0c1b      	lsrs	r3, r3, #16
 800d95a:	eba1 0808 	sub.w	r8, r1, r8
 800d95e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d962:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d966:	fa1f f888 	uxth.w	r8, r8
 800d96a:	1419      	asrs	r1, r3, #16
 800d96c:	454e      	cmp	r6, r9
 800d96e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d972:	f84a 3b04 	str.w	r3, [sl], #4
 800d976:	d8e7      	bhi.n	800d948 <__mdiff+0x80>
 800d978:	1b33      	subs	r3, r6, r4
 800d97a:	3b15      	subs	r3, #21
 800d97c:	f023 0303 	bic.w	r3, r3, #3
 800d980:	3304      	adds	r3, #4
 800d982:	3415      	adds	r4, #21
 800d984:	42a6      	cmp	r6, r4
 800d986:	bf38      	it	cc
 800d988:	2304      	movcc	r3, #4
 800d98a:	441d      	add	r5, r3
 800d98c:	4473      	add	r3, lr
 800d98e:	469e      	mov	lr, r3
 800d990:	462e      	mov	r6, r5
 800d992:	4566      	cmp	r6, ip
 800d994:	d30e      	bcc.n	800d9b4 <__mdiff+0xec>
 800d996:	f10c 0203 	add.w	r2, ip, #3
 800d99a:	1b52      	subs	r2, r2, r5
 800d99c:	f022 0203 	bic.w	r2, r2, #3
 800d9a0:	3d03      	subs	r5, #3
 800d9a2:	45ac      	cmp	ip, r5
 800d9a4:	bf38      	it	cc
 800d9a6:	2200      	movcc	r2, #0
 800d9a8:	441a      	add	r2, r3
 800d9aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d9ae:	b17b      	cbz	r3, 800d9d0 <__mdiff+0x108>
 800d9b0:	6107      	str	r7, [r0, #16]
 800d9b2:	e7a3      	b.n	800d8fc <__mdiff+0x34>
 800d9b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9b8:	fa11 f288 	uxtah	r2, r1, r8
 800d9bc:	1414      	asrs	r4, r2, #16
 800d9be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9c2:	b292      	uxth	r2, r2
 800d9c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9c8:	f84e 2b04 	str.w	r2, [lr], #4
 800d9cc:	1421      	asrs	r1, r4, #16
 800d9ce:	e7e0      	b.n	800d992 <__mdiff+0xca>
 800d9d0:	3f01      	subs	r7, #1
 800d9d2:	e7ea      	b.n	800d9aa <__mdiff+0xe2>
 800d9d4:	0800f35b 	.word	0x0800f35b
 800d9d8:	0800f3cc 	.word	0x0800f3cc

0800d9dc <__d2b>:
 800d9dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9e0:	4689      	mov	r9, r1
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	ec57 6b10 	vmov	r6, r7, d0
 800d9e8:	4690      	mov	r8, r2
 800d9ea:	f7ff fccf 	bl	800d38c <_Balloc>
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b930      	cbnz	r0, 800da00 <__d2b+0x24>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	4b25      	ldr	r3, [pc, #148]	; (800da8c <__d2b+0xb0>)
 800d9f6:	4826      	ldr	r0, [pc, #152]	; (800da90 <__d2b+0xb4>)
 800d9f8:	f240 310a 	movw	r1, #778	; 0x30a
 800d9fc:	f000 fa10 	bl	800de20 <__assert_func>
 800da00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da08:	bb35      	cbnz	r5, 800da58 <__d2b+0x7c>
 800da0a:	2e00      	cmp	r6, #0
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	d028      	beq.n	800da62 <__d2b+0x86>
 800da10:	4668      	mov	r0, sp
 800da12:	9600      	str	r6, [sp, #0]
 800da14:	f7ff fd82 	bl	800d51c <__lo0bits>
 800da18:	9900      	ldr	r1, [sp, #0]
 800da1a:	b300      	cbz	r0, 800da5e <__d2b+0x82>
 800da1c:	9a01      	ldr	r2, [sp, #4]
 800da1e:	f1c0 0320 	rsb	r3, r0, #32
 800da22:	fa02 f303 	lsl.w	r3, r2, r3
 800da26:	430b      	orrs	r3, r1
 800da28:	40c2      	lsrs	r2, r0
 800da2a:	6163      	str	r3, [r4, #20]
 800da2c:	9201      	str	r2, [sp, #4]
 800da2e:	9b01      	ldr	r3, [sp, #4]
 800da30:	61a3      	str	r3, [r4, #24]
 800da32:	2b00      	cmp	r3, #0
 800da34:	bf14      	ite	ne
 800da36:	2202      	movne	r2, #2
 800da38:	2201      	moveq	r2, #1
 800da3a:	6122      	str	r2, [r4, #16]
 800da3c:	b1d5      	cbz	r5, 800da74 <__d2b+0x98>
 800da3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da42:	4405      	add	r5, r0
 800da44:	f8c9 5000 	str.w	r5, [r9]
 800da48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da4c:	f8c8 0000 	str.w	r0, [r8]
 800da50:	4620      	mov	r0, r4
 800da52:	b003      	add	sp, #12
 800da54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da5c:	e7d5      	b.n	800da0a <__d2b+0x2e>
 800da5e:	6161      	str	r1, [r4, #20]
 800da60:	e7e5      	b.n	800da2e <__d2b+0x52>
 800da62:	a801      	add	r0, sp, #4
 800da64:	f7ff fd5a 	bl	800d51c <__lo0bits>
 800da68:	9b01      	ldr	r3, [sp, #4]
 800da6a:	6163      	str	r3, [r4, #20]
 800da6c:	2201      	movs	r2, #1
 800da6e:	6122      	str	r2, [r4, #16]
 800da70:	3020      	adds	r0, #32
 800da72:	e7e3      	b.n	800da3c <__d2b+0x60>
 800da74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da7c:	f8c9 0000 	str.w	r0, [r9]
 800da80:	6918      	ldr	r0, [r3, #16]
 800da82:	f7ff fd2b 	bl	800d4dc <__hi0bits>
 800da86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da8a:	e7df      	b.n	800da4c <__d2b+0x70>
 800da8c:	0800f35b 	.word	0x0800f35b
 800da90:	0800f3cc 	.word	0x0800f3cc

0800da94 <_calloc_r>:
 800da94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da96:	fba1 2402 	umull	r2, r4, r1, r2
 800da9a:	b94c      	cbnz	r4, 800dab0 <_calloc_r+0x1c>
 800da9c:	4611      	mov	r1, r2
 800da9e:	9201      	str	r2, [sp, #4]
 800daa0:	f7fd fd4a 	bl	800b538 <_malloc_r>
 800daa4:	9a01      	ldr	r2, [sp, #4]
 800daa6:	4605      	mov	r5, r0
 800daa8:	b930      	cbnz	r0, 800dab8 <_calloc_r+0x24>
 800daaa:	4628      	mov	r0, r5
 800daac:	b003      	add	sp, #12
 800daae:	bd30      	pop	{r4, r5, pc}
 800dab0:	220c      	movs	r2, #12
 800dab2:	6002      	str	r2, [r0, #0]
 800dab4:	2500      	movs	r5, #0
 800dab6:	e7f8      	b.n	800daaa <_calloc_r+0x16>
 800dab8:	4621      	mov	r1, r4
 800daba:	f7fd fcc9 	bl	800b450 <memset>
 800dabe:	e7f4      	b.n	800daaa <_calloc_r+0x16>

0800dac0 <__sfputc_r>:
 800dac0:	6893      	ldr	r3, [r2, #8]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	b410      	push	{r4}
 800dac8:	6093      	str	r3, [r2, #8]
 800daca:	da08      	bge.n	800dade <__sfputc_r+0x1e>
 800dacc:	6994      	ldr	r4, [r2, #24]
 800dace:	42a3      	cmp	r3, r4
 800dad0:	db01      	blt.n	800dad6 <__sfputc_r+0x16>
 800dad2:	290a      	cmp	r1, #10
 800dad4:	d103      	bne.n	800dade <__sfputc_r+0x1e>
 800dad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dada:	f7fe baed 	b.w	800c0b8 <__swbuf_r>
 800dade:	6813      	ldr	r3, [r2, #0]
 800dae0:	1c58      	adds	r0, r3, #1
 800dae2:	6010      	str	r0, [r2, #0]
 800dae4:	7019      	strb	r1, [r3, #0]
 800dae6:	4608      	mov	r0, r1
 800dae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daec:	4770      	bx	lr

0800daee <__sfputs_r>:
 800daee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf0:	4606      	mov	r6, r0
 800daf2:	460f      	mov	r7, r1
 800daf4:	4614      	mov	r4, r2
 800daf6:	18d5      	adds	r5, r2, r3
 800daf8:	42ac      	cmp	r4, r5
 800dafa:	d101      	bne.n	800db00 <__sfputs_r+0x12>
 800dafc:	2000      	movs	r0, #0
 800dafe:	e007      	b.n	800db10 <__sfputs_r+0x22>
 800db00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db04:	463a      	mov	r2, r7
 800db06:	4630      	mov	r0, r6
 800db08:	f7ff ffda 	bl	800dac0 <__sfputc_r>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d1f3      	bne.n	800daf8 <__sfputs_r+0xa>
 800db10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db14 <_vfiprintf_r>:
 800db14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db18:	460d      	mov	r5, r1
 800db1a:	b09d      	sub	sp, #116	; 0x74
 800db1c:	4614      	mov	r4, r2
 800db1e:	4698      	mov	r8, r3
 800db20:	4606      	mov	r6, r0
 800db22:	b118      	cbz	r0, 800db2c <_vfiprintf_r+0x18>
 800db24:	6983      	ldr	r3, [r0, #24]
 800db26:	b90b      	cbnz	r3, 800db2c <_vfiprintf_r+0x18>
 800db28:	f7ff fb1a 	bl	800d160 <__sinit>
 800db2c:	4b89      	ldr	r3, [pc, #548]	; (800dd54 <_vfiprintf_r+0x240>)
 800db2e:	429d      	cmp	r5, r3
 800db30:	d11b      	bne.n	800db6a <_vfiprintf_r+0x56>
 800db32:	6875      	ldr	r5, [r6, #4]
 800db34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db36:	07d9      	lsls	r1, r3, #31
 800db38:	d405      	bmi.n	800db46 <_vfiprintf_r+0x32>
 800db3a:	89ab      	ldrh	r3, [r5, #12]
 800db3c:	059a      	lsls	r2, r3, #22
 800db3e:	d402      	bmi.n	800db46 <_vfiprintf_r+0x32>
 800db40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db42:	f7ff fbb0 	bl	800d2a6 <__retarget_lock_acquire_recursive>
 800db46:	89ab      	ldrh	r3, [r5, #12]
 800db48:	071b      	lsls	r3, r3, #28
 800db4a:	d501      	bpl.n	800db50 <_vfiprintf_r+0x3c>
 800db4c:	692b      	ldr	r3, [r5, #16]
 800db4e:	b9eb      	cbnz	r3, 800db8c <_vfiprintf_r+0x78>
 800db50:	4629      	mov	r1, r5
 800db52:	4630      	mov	r0, r6
 800db54:	f7fe fb02 	bl	800c15c <__swsetup_r>
 800db58:	b1c0      	cbz	r0, 800db8c <_vfiprintf_r+0x78>
 800db5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db5c:	07dc      	lsls	r4, r3, #31
 800db5e:	d50e      	bpl.n	800db7e <_vfiprintf_r+0x6a>
 800db60:	f04f 30ff 	mov.w	r0, #4294967295
 800db64:	b01d      	add	sp, #116	; 0x74
 800db66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db6a:	4b7b      	ldr	r3, [pc, #492]	; (800dd58 <_vfiprintf_r+0x244>)
 800db6c:	429d      	cmp	r5, r3
 800db6e:	d101      	bne.n	800db74 <_vfiprintf_r+0x60>
 800db70:	68b5      	ldr	r5, [r6, #8]
 800db72:	e7df      	b.n	800db34 <_vfiprintf_r+0x20>
 800db74:	4b79      	ldr	r3, [pc, #484]	; (800dd5c <_vfiprintf_r+0x248>)
 800db76:	429d      	cmp	r5, r3
 800db78:	bf08      	it	eq
 800db7a:	68f5      	ldreq	r5, [r6, #12]
 800db7c:	e7da      	b.n	800db34 <_vfiprintf_r+0x20>
 800db7e:	89ab      	ldrh	r3, [r5, #12]
 800db80:	0598      	lsls	r0, r3, #22
 800db82:	d4ed      	bmi.n	800db60 <_vfiprintf_r+0x4c>
 800db84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db86:	f7ff fb8f 	bl	800d2a8 <__retarget_lock_release_recursive>
 800db8a:	e7e9      	b.n	800db60 <_vfiprintf_r+0x4c>
 800db8c:	2300      	movs	r3, #0
 800db8e:	9309      	str	r3, [sp, #36]	; 0x24
 800db90:	2320      	movs	r3, #32
 800db92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db96:	f8cd 800c 	str.w	r8, [sp, #12]
 800db9a:	2330      	movs	r3, #48	; 0x30
 800db9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dd60 <_vfiprintf_r+0x24c>
 800dba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dba4:	f04f 0901 	mov.w	r9, #1
 800dba8:	4623      	mov	r3, r4
 800dbaa:	469a      	mov	sl, r3
 800dbac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbb0:	b10a      	cbz	r2, 800dbb6 <_vfiprintf_r+0xa2>
 800dbb2:	2a25      	cmp	r2, #37	; 0x25
 800dbb4:	d1f9      	bne.n	800dbaa <_vfiprintf_r+0x96>
 800dbb6:	ebba 0b04 	subs.w	fp, sl, r4
 800dbba:	d00b      	beq.n	800dbd4 <_vfiprintf_r+0xc0>
 800dbbc:	465b      	mov	r3, fp
 800dbbe:	4622      	mov	r2, r4
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f7ff ff93 	bl	800daee <__sfputs_r>
 800dbc8:	3001      	adds	r0, #1
 800dbca:	f000 80aa 	beq.w	800dd22 <_vfiprintf_r+0x20e>
 800dbce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbd0:	445a      	add	r2, fp
 800dbd2:	9209      	str	r2, [sp, #36]	; 0x24
 800dbd4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f000 80a2 	beq.w	800dd22 <_vfiprintf_r+0x20e>
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbe8:	f10a 0a01 	add.w	sl, sl, #1
 800dbec:	9304      	str	r3, [sp, #16]
 800dbee:	9307      	str	r3, [sp, #28]
 800dbf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbf4:	931a      	str	r3, [sp, #104]	; 0x68
 800dbf6:	4654      	mov	r4, sl
 800dbf8:	2205      	movs	r2, #5
 800dbfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbfe:	4858      	ldr	r0, [pc, #352]	; (800dd60 <_vfiprintf_r+0x24c>)
 800dc00:	f7f2 fb0e 	bl	8000220 <memchr>
 800dc04:	9a04      	ldr	r2, [sp, #16]
 800dc06:	b9d8      	cbnz	r0, 800dc40 <_vfiprintf_r+0x12c>
 800dc08:	06d1      	lsls	r1, r2, #27
 800dc0a:	bf44      	itt	mi
 800dc0c:	2320      	movmi	r3, #32
 800dc0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc12:	0713      	lsls	r3, r2, #28
 800dc14:	bf44      	itt	mi
 800dc16:	232b      	movmi	r3, #43	; 0x2b
 800dc18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc1c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc20:	2b2a      	cmp	r3, #42	; 0x2a
 800dc22:	d015      	beq.n	800dc50 <_vfiprintf_r+0x13c>
 800dc24:	9a07      	ldr	r2, [sp, #28]
 800dc26:	4654      	mov	r4, sl
 800dc28:	2000      	movs	r0, #0
 800dc2a:	f04f 0c0a 	mov.w	ip, #10
 800dc2e:	4621      	mov	r1, r4
 800dc30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc34:	3b30      	subs	r3, #48	; 0x30
 800dc36:	2b09      	cmp	r3, #9
 800dc38:	d94e      	bls.n	800dcd8 <_vfiprintf_r+0x1c4>
 800dc3a:	b1b0      	cbz	r0, 800dc6a <_vfiprintf_r+0x156>
 800dc3c:	9207      	str	r2, [sp, #28]
 800dc3e:	e014      	b.n	800dc6a <_vfiprintf_r+0x156>
 800dc40:	eba0 0308 	sub.w	r3, r0, r8
 800dc44:	fa09 f303 	lsl.w	r3, r9, r3
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	9304      	str	r3, [sp, #16]
 800dc4c:	46a2      	mov	sl, r4
 800dc4e:	e7d2      	b.n	800dbf6 <_vfiprintf_r+0xe2>
 800dc50:	9b03      	ldr	r3, [sp, #12]
 800dc52:	1d19      	adds	r1, r3, #4
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	9103      	str	r1, [sp, #12]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	bfbb      	ittet	lt
 800dc5c:	425b      	neglt	r3, r3
 800dc5e:	f042 0202 	orrlt.w	r2, r2, #2
 800dc62:	9307      	strge	r3, [sp, #28]
 800dc64:	9307      	strlt	r3, [sp, #28]
 800dc66:	bfb8      	it	lt
 800dc68:	9204      	strlt	r2, [sp, #16]
 800dc6a:	7823      	ldrb	r3, [r4, #0]
 800dc6c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc6e:	d10c      	bne.n	800dc8a <_vfiprintf_r+0x176>
 800dc70:	7863      	ldrb	r3, [r4, #1]
 800dc72:	2b2a      	cmp	r3, #42	; 0x2a
 800dc74:	d135      	bne.n	800dce2 <_vfiprintf_r+0x1ce>
 800dc76:	9b03      	ldr	r3, [sp, #12]
 800dc78:	1d1a      	adds	r2, r3, #4
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	9203      	str	r2, [sp, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	bfb8      	it	lt
 800dc82:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc86:	3402      	adds	r4, #2
 800dc88:	9305      	str	r3, [sp, #20]
 800dc8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd70 <_vfiprintf_r+0x25c>
 800dc8e:	7821      	ldrb	r1, [r4, #0]
 800dc90:	2203      	movs	r2, #3
 800dc92:	4650      	mov	r0, sl
 800dc94:	f7f2 fac4 	bl	8000220 <memchr>
 800dc98:	b140      	cbz	r0, 800dcac <_vfiprintf_r+0x198>
 800dc9a:	2340      	movs	r3, #64	; 0x40
 800dc9c:	eba0 000a 	sub.w	r0, r0, sl
 800dca0:	fa03 f000 	lsl.w	r0, r3, r0
 800dca4:	9b04      	ldr	r3, [sp, #16]
 800dca6:	4303      	orrs	r3, r0
 800dca8:	3401      	adds	r4, #1
 800dcaa:	9304      	str	r3, [sp, #16]
 800dcac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb0:	482c      	ldr	r0, [pc, #176]	; (800dd64 <_vfiprintf_r+0x250>)
 800dcb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcb6:	2206      	movs	r2, #6
 800dcb8:	f7f2 fab2 	bl	8000220 <memchr>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d03f      	beq.n	800dd40 <_vfiprintf_r+0x22c>
 800dcc0:	4b29      	ldr	r3, [pc, #164]	; (800dd68 <_vfiprintf_r+0x254>)
 800dcc2:	bb1b      	cbnz	r3, 800dd0c <_vfiprintf_r+0x1f8>
 800dcc4:	9b03      	ldr	r3, [sp, #12]
 800dcc6:	3307      	adds	r3, #7
 800dcc8:	f023 0307 	bic.w	r3, r3, #7
 800dccc:	3308      	adds	r3, #8
 800dcce:	9303      	str	r3, [sp, #12]
 800dcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd2:	443b      	add	r3, r7
 800dcd4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd6:	e767      	b.n	800dba8 <_vfiprintf_r+0x94>
 800dcd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcdc:	460c      	mov	r4, r1
 800dcde:	2001      	movs	r0, #1
 800dce0:	e7a5      	b.n	800dc2e <_vfiprintf_r+0x11a>
 800dce2:	2300      	movs	r3, #0
 800dce4:	3401      	adds	r4, #1
 800dce6:	9305      	str	r3, [sp, #20]
 800dce8:	4619      	mov	r1, r3
 800dcea:	f04f 0c0a 	mov.w	ip, #10
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcf4:	3a30      	subs	r2, #48	; 0x30
 800dcf6:	2a09      	cmp	r2, #9
 800dcf8:	d903      	bls.n	800dd02 <_vfiprintf_r+0x1ee>
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d0c5      	beq.n	800dc8a <_vfiprintf_r+0x176>
 800dcfe:	9105      	str	r1, [sp, #20]
 800dd00:	e7c3      	b.n	800dc8a <_vfiprintf_r+0x176>
 800dd02:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd06:	4604      	mov	r4, r0
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e7f0      	b.n	800dcee <_vfiprintf_r+0x1da>
 800dd0c:	ab03      	add	r3, sp, #12
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	462a      	mov	r2, r5
 800dd12:	4b16      	ldr	r3, [pc, #88]	; (800dd6c <_vfiprintf_r+0x258>)
 800dd14:	a904      	add	r1, sp, #16
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7fd fd22 	bl	800b760 <_printf_float>
 800dd1c:	4607      	mov	r7, r0
 800dd1e:	1c78      	adds	r0, r7, #1
 800dd20:	d1d6      	bne.n	800dcd0 <_vfiprintf_r+0x1bc>
 800dd22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd24:	07d9      	lsls	r1, r3, #31
 800dd26:	d405      	bmi.n	800dd34 <_vfiprintf_r+0x220>
 800dd28:	89ab      	ldrh	r3, [r5, #12]
 800dd2a:	059a      	lsls	r2, r3, #22
 800dd2c:	d402      	bmi.n	800dd34 <_vfiprintf_r+0x220>
 800dd2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd30:	f7ff faba 	bl	800d2a8 <__retarget_lock_release_recursive>
 800dd34:	89ab      	ldrh	r3, [r5, #12]
 800dd36:	065b      	lsls	r3, r3, #25
 800dd38:	f53f af12 	bmi.w	800db60 <_vfiprintf_r+0x4c>
 800dd3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd3e:	e711      	b.n	800db64 <_vfiprintf_r+0x50>
 800dd40:	ab03      	add	r3, sp, #12
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	462a      	mov	r2, r5
 800dd46:	4b09      	ldr	r3, [pc, #36]	; (800dd6c <_vfiprintf_r+0x258>)
 800dd48:	a904      	add	r1, sp, #16
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7fd ffac 	bl	800bca8 <_printf_i>
 800dd50:	e7e4      	b.n	800dd1c <_vfiprintf_r+0x208>
 800dd52:	bf00      	nop
 800dd54:	0800f38c 	.word	0x0800f38c
 800dd58:	0800f3ac 	.word	0x0800f3ac
 800dd5c:	0800f36c 	.word	0x0800f36c
 800dd60:	0800f524 	.word	0x0800f524
 800dd64:	0800f52e 	.word	0x0800f52e
 800dd68:	0800b761 	.word	0x0800b761
 800dd6c:	0800daef 	.word	0x0800daef
 800dd70:	0800f52a 	.word	0x0800f52a

0800dd74 <__sread>:
 800dd74:	b510      	push	{r4, lr}
 800dd76:	460c      	mov	r4, r1
 800dd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd7c:	f000 f8d6 	bl	800df2c <_read_r>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	bfab      	itete	ge
 800dd84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd86:	89a3      	ldrhlt	r3, [r4, #12]
 800dd88:	181b      	addge	r3, r3, r0
 800dd8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd8e:	bfac      	ite	ge
 800dd90:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd92:	81a3      	strhlt	r3, [r4, #12]
 800dd94:	bd10      	pop	{r4, pc}

0800dd96 <__swrite>:
 800dd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9a:	461f      	mov	r7, r3
 800dd9c:	898b      	ldrh	r3, [r1, #12]
 800dd9e:	05db      	lsls	r3, r3, #23
 800dda0:	4605      	mov	r5, r0
 800dda2:	460c      	mov	r4, r1
 800dda4:	4616      	mov	r6, r2
 800dda6:	d505      	bpl.n	800ddb4 <__swrite+0x1e>
 800dda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddac:	2302      	movs	r3, #2
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f000 f898 	bl	800dee4 <_lseek_r>
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddbe:	81a3      	strh	r3, [r4, #12]
 800ddc0:	4632      	mov	r2, r6
 800ddc2:	463b      	mov	r3, r7
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddca:	f000 b817 	b.w	800ddfc <_write_r>

0800ddce <__sseek>:
 800ddce:	b510      	push	{r4, lr}
 800ddd0:	460c      	mov	r4, r1
 800ddd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddd6:	f000 f885 	bl	800dee4 <_lseek_r>
 800ddda:	1c43      	adds	r3, r0, #1
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	bf15      	itete	ne
 800dde0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dde2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dde6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ddea:	81a3      	strheq	r3, [r4, #12]
 800ddec:	bf18      	it	ne
 800ddee:	81a3      	strhne	r3, [r4, #12]
 800ddf0:	bd10      	pop	{r4, pc}

0800ddf2 <__sclose>:
 800ddf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf6:	f000 b831 	b.w	800de5c <_close_r>
	...

0800ddfc <_write_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	4d07      	ldr	r5, [pc, #28]	; (800de1c <_write_r+0x20>)
 800de00:	4604      	mov	r4, r0
 800de02:	4608      	mov	r0, r1
 800de04:	4611      	mov	r1, r2
 800de06:	2200      	movs	r2, #0
 800de08:	602a      	str	r2, [r5, #0]
 800de0a:	461a      	mov	r2, r3
 800de0c:	f7f6 faa0 	bl	8004350 <_write>
 800de10:	1c43      	adds	r3, r0, #1
 800de12:	d102      	bne.n	800de1a <_write_r+0x1e>
 800de14:	682b      	ldr	r3, [r5, #0]
 800de16:	b103      	cbz	r3, 800de1a <_write_r+0x1e>
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	bd38      	pop	{r3, r4, r5, pc}
 800de1c:	20002974 	.word	0x20002974

0800de20 <__assert_func>:
 800de20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de22:	4614      	mov	r4, r2
 800de24:	461a      	mov	r2, r3
 800de26:	4b09      	ldr	r3, [pc, #36]	; (800de4c <__assert_func+0x2c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4605      	mov	r5, r0
 800de2c:	68d8      	ldr	r0, [r3, #12]
 800de2e:	b14c      	cbz	r4, 800de44 <__assert_func+0x24>
 800de30:	4b07      	ldr	r3, [pc, #28]	; (800de50 <__assert_func+0x30>)
 800de32:	9100      	str	r1, [sp, #0]
 800de34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de38:	4906      	ldr	r1, [pc, #24]	; (800de54 <__assert_func+0x34>)
 800de3a:	462b      	mov	r3, r5
 800de3c:	f000 f81e 	bl	800de7c <fiprintf>
 800de40:	f7fd faae 	bl	800b3a0 <abort>
 800de44:	4b04      	ldr	r3, [pc, #16]	; (800de58 <__assert_func+0x38>)
 800de46:	461c      	mov	r4, r3
 800de48:	e7f3      	b.n	800de32 <__assert_func+0x12>
 800de4a:	bf00      	nop
 800de4c:	20000184 	.word	0x20000184
 800de50:	0800f535 	.word	0x0800f535
 800de54:	0800f542 	.word	0x0800f542
 800de58:	0800f152 	.word	0x0800f152

0800de5c <_close_r>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	4d06      	ldr	r5, [pc, #24]	; (800de78 <_close_r+0x1c>)
 800de60:	2300      	movs	r3, #0
 800de62:	4604      	mov	r4, r0
 800de64:	4608      	mov	r0, r1
 800de66:	602b      	str	r3, [r5, #0]
 800de68:	f7f6 fa8c 	bl	8004384 <_close>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d102      	bne.n	800de76 <_close_r+0x1a>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b103      	cbz	r3, 800de76 <_close_r+0x1a>
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	20002974 	.word	0x20002974

0800de7c <fiprintf>:
 800de7c:	b40e      	push	{r1, r2, r3}
 800de7e:	b503      	push	{r0, r1, lr}
 800de80:	4601      	mov	r1, r0
 800de82:	ab03      	add	r3, sp, #12
 800de84:	4805      	ldr	r0, [pc, #20]	; (800de9c <fiprintf+0x20>)
 800de86:	f853 2b04 	ldr.w	r2, [r3], #4
 800de8a:	6800      	ldr	r0, [r0, #0]
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	f7ff fe41 	bl	800db14 <_vfiprintf_r>
 800de92:	b002      	add	sp, #8
 800de94:	f85d eb04 	ldr.w	lr, [sp], #4
 800de98:	b003      	add	sp, #12
 800de9a:	4770      	bx	lr
 800de9c:	20000184 	.word	0x20000184

0800dea0 <_fstat_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4d07      	ldr	r5, [pc, #28]	; (800dec0 <_fstat_r+0x20>)
 800dea4:	2300      	movs	r3, #0
 800dea6:	4604      	mov	r4, r0
 800dea8:	4608      	mov	r0, r1
 800deaa:	4611      	mov	r1, r2
 800deac:	602b      	str	r3, [r5, #0]
 800deae:	f7f6 fa6c 	bl	800438a <_fstat>
 800deb2:	1c43      	adds	r3, r0, #1
 800deb4:	d102      	bne.n	800debc <_fstat_r+0x1c>
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	b103      	cbz	r3, 800debc <_fstat_r+0x1c>
 800deba:	6023      	str	r3, [r4, #0]
 800debc:	bd38      	pop	{r3, r4, r5, pc}
 800debe:	bf00      	nop
 800dec0:	20002974 	.word	0x20002974

0800dec4 <_isatty_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d06      	ldr	r5, [pc, #24]	; (800dee0 <_isatty_r+0x1c>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	602b      	str	r3, [r5, #0]
 800ded0:	f7f6 fa60 	bl	8004394 <_isatty>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_isatty_r+0x1a>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	b103      	cbz	r3, 800dede <_isatty_r+0x1a>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	20002974 	.word	0x20002974

0800dee4 <_lseek_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4d07      	ldr	r5, [pc, #28]	; (800df04 <_lseek_r+0x20>)
 800dee8:	4604      	mov	r4, r0
 800deea:	4608      	mov	r0, r1
 800deec:	4611      	mov	r1, r2
 800deee:	2200      	movs	r2, #0
 800def0:	602a      	str	r2, [r5, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	f7f6 fa50 	bl	8004398 <_lseek>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d102      	bne.n	800df02 <_lseek_r+0x1e>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	b103      	cbz	r3, 800df02 <_lseek_r+0x1e>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	bd38      	pop	{r3, r4, r5, pc}
 800df04:	20002974 	.word	0x20002974

0800df08 <__ascii_mbtowc>:
 800df08:	b082      	sub	sp, #8
 800df0a:	b901      	cbnz	r1, 800df0e <__ascii_mbtowc+0x6>
 800df0c:	a901      	add	r1, sp, #4
 800df0e:	b142      	cbz	r2, 800df22 <__ascii_mbtowc+0x1a>
 800df10:	b14b      	cbz	r3, 800df26 <__ascii_mbtowc+0x1e>
 800df12:	7813      	ldrb	r3, [r2, #0]
 800df14:	600b      	str	r3, [r1, #0]
 800df16:	7812      	ldrb	r2, [r2, #0]
 800df18:	1e10      	subs	r0, r2, #0
 800df1a:	bf18      	it	ne
 800df1c:	2001      	movne	r0, #1
 800df1e:	b002      	add	sp, #8
 800df20:	4770      	bx	lr
 800df22:	4610      	mov	r0, r2
 800df24:	e7fb      	b.n	800df1e <__ascii_mbtowc+0x16>
 800df26:	f06f 0001 	mvn.w	r0, #1
 800df2a:	e7f8      	b.n	800df1e <__ascii_mbtowc+0x16>

0800df2c <_read_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4d07      	ldr	r5, [pc, #28]	; (800df4c <_read_r+0x20>)
 800df30:	4604      	mov	r4, r0
 800df32:	4608      	mov	r0, r1
 800df34:	4611      	mov	r1, r2
 800df36:	2200      	movs	r2, #0
 800df38:	602a      	str	r2, [r5, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	f7f6 f9fa 	bl	8004334 <_read>
 800df40:	1c43      	adds	r3, r0, #1
 800df42:	d102      	bne.n	800df4a <_read_r+0x1e>
 800df44:	682b      	ldr	r3, [r5, #0]
 800df46:	b103      	cbz	r3, 800df4a <_read_r+0x1e>
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	20002974 	.word	0x20002974

0800df50 <__ascii_wctomb>:
 800df50:	b149      	cbz	r1, 800df66 <__ascii_wctomb+0x16>
 800df52:	2aff      	cmp	r2, #255	; 0xff
 800df54:	bf85      	ittet	hi
 800df56:	238a      	movhi	r3, #138	; 0x8a
 800df58:	6003      	strhi	r3, [r0, #0]
 800df5a:	700a      	strbls	r2, [r1, #0]
 800df5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800df60:	bf98      	it	ls
 800df62:	2001      	movls	r0, #1
 800df64:	4770      	bx	lr
 800df66:	4608      	mov	r0, r1
 800df68:	4770      	bx	lr
	...

0800df6c <_init>:
 800df6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6e:	bf00      	nop
 800df70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df72:	bc08      	pop	{r3}
 800df74:	469e      	mov	lr, r3
 800df76:	4770      	bx	lr

0800df78 <_fini>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	bf00      	nop
 800df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7e:	bc08      	pop	{r3}
 800df80:	469e      	mov	lr, r3
 800df82:	4770      	bx	lr
