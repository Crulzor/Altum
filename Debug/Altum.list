
Altum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018294  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000161c  08018478  08018478  00028478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a94  08019a94  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08019a94  08019a94  00029a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a9c  08019a9c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019a9c  08019a9c  00029a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019aa0  08019aa0  00029aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08019aa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002624  20000354  08019df8  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002978  08019df8  00032978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005564d  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ec5  00000000  00000000  000859d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026f0  00000000  00000000  0008d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002490  00000000  00000000  0008ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003de2b  00000000  00000000  00092418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040fb3  00000000  00000000  000d0243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182ffb  00000000  00000000  001111f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002941f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b870  00000000  00000000  00294244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801845c 	.word	0x0801845c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	0801845c 	.word	0x0801845c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter>:
#include "Convertor.h"

Convertor::Convertor(SBUS *sbus, Initializer *init, Components* components, Altimeter* altimeter){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	461a      	mov	r2, r3
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	6053      	str	r3, [r2, #4]
 8000fb4:	6093      	str	r3, [r2, #8]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	330c      	adds	r3, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	861a      	strh	r2, [r3, #48]	; 0x30
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	865a      	strh	r2, [r3, #50]	; 0x32
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	869a      	strh	r2, [r3, #52]	; 0x34
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	this->_sbus = sbus;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	61da      	str	r2, [r3, #28]
	this->_timers = init;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	621a      	str	r2, [r3, #32]
	this->_components = components;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
	this->_altimeter = altimeter;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28

	this->_ledPWM = 0;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	859a      	strh	r2, [r3, #44]	; 0x2c


}
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_ZN9Convertor6getADCEv>:
void Convertor::testSelector(void){

	__HAL_TIM_SET_COMPARE(_timers->get_selector_Timer(),  TIM_CHANNEL_3, 200);
}

void Convertor::getADC(void){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]


    HAL_ADC_Start_DMA(_components->get_ADC_1(), (uint32_t*)&ADC_1_Buffer, 3);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fa27 	bl	800647c <_ZN10Components9get_ADC_1Ev>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	4619      	mov	r1, r3
 8001034:	f006 ff86 	bl	8007f44 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_2(), (uint32_t*)&ADC_2_Buffer, 2);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	4618      	mov	r0, r3
 800103e:	f005 fa29 	bl	8006494 <_ZN10Components9get_ADC_2Ev>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	330c      	adds	r3, #12
 8001046:	2202      	movs	r2, #2
 8001048:	4619      	mov	r1, r3
 800104a:	f006 ff7b 	bl	8007f44 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(_components->get_ADC_5(), (uint32_t*)&ADC_5_Buffer, 2);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	4618      	mov	r0, r3
 8001054:	f005 fa2c 	bl	80064b0 <_ZN10Components9get_ADC_5Ev>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3314      	adds	r3, #20
 800105c:	2202      	movs	r2, #2
 800105e:	4619      	mov	r1, r3
 8001060:	f006 ff70 	bl	8007f44 <HAL_ADC_Start_DMA>



}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN9Convertor9updateLEDEv>:

void Convertor::updateLED(void){
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]



	if(_sbus->B_button() && _ledPWM < 1000) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fecf 	bl	8004e1c <_ZN4SBUS8B_buttonEv>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <_ZN9Convertor9updateLEDEv+0x28>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800108a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800108e:	da01      	bge.n	8001094 <_ZN9Convertor9updateLEDEv+0x28>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <_ZN9Convertor9updateLEDEv+0x2a>
 8001094:	2300      	movs	r3, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d015      	beq.n	80010c6 <_ZN9Convertor9updateLEDEv+0x5a>
		_ledPWM += 250;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	33fa      	adds	r3, #250	; 0xfa
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	859a      	strh	r2, [r3, #44]	; 0x2c
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fba2 	bl	8002800 <_ZN11Initializer13get_LED_TimerEv>
 80010bc:	4603      	mov	r3, r0
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4622      	mov	r2, r4
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34



	}

}
 80010c4:	e026      	b.n	8001114 <_ZN9Convertor9updateLEDEv+0xa8>
	}else if(_sbus->A_button() && _ledPWM > 0){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 fe4c 	bl	8004d68 <_ZN4SBUS8A_buttonEv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <_ZN9Convertor9updateLEDEv+0x78>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd01      	ble.n	80010e4 <_ZN9Convertor9updateLEDEv+0x78>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <_ZN9Convertor9updateLEDEv+0x7a>
 80010e4:	2300      	movs	r3, #0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d014      	beq.n	8001114 <_ZN9Convertor9updateLEDEv+0xa8>
		_ledPWM -= 250;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3bfa      	subs	r3, #250	; 0xfa
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	859a      	strh	r2, [r3, #44]	; 0x2c
        __HAL_TIM_SET_COMPARE(_timers->get_LED_Timer(), TIM_CHANNEL_1, _ledPWM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4618      	mov	r0, r3
 8001108:	f001 fb7a 	bl	8002800 <_ZN11Initializer13get_LED_TimerEv>
 800110c:	4603      	mov	r3, r0
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4622      	mov	r2, r4
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}

0800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>:


//LOW LEVEL FUNCTION FOR CONTROLLING ACTUATOR PWM
//TAKES A HANDL

void Convertor::actuatorControl(int16_t pwm_input, TIM_HandleTypeDef *tim, uint32_t channelTimPlus, uint32_t channelTimMin){
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	460b      	mov	r3, r1
 800112a:	817b      	strh	r3, [r7, #10]

	if (pwm_input >= 0) { //if joystick is up then pwm is positive and will drive plus forward cahnnel of h bridge.
 800112c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db76      	blt.n	8001222 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x106>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, abs(pwm_input));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x32>
 800113a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfb8      	it	lt
 8001142:	425b      	neglt	r3, r3
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	635a      	str	r2, [r3, #52]	; 0x34
 800114c:	e03c      	b.n	80011c8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d109      	bne.n	8001168 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x4c>
 8001154:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001158:	2b00      	cmp	r3, #0
 800115a:	bfb8      	it	lt
 800115c:	425b      	neglt	r3, r3
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
 8001166:	e02f      	b.n	80011c8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d109      	bne.n	8001182 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x66>
 800116e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001172:	2b00      	cmp	r3, #0
 8001174:	bfb8      	it	lt
 8001176:	425b      	neglt	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001180:	e022      	b.n	80011c8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d109      	bne.n	800119c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x80>
 8001188:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800118c:	2b00      	cmp	r3, #0
 800118e:	bfb8      	it	lt
 8001190:	425b      	neglt	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
 800119a:	e015      	b.n	80011c8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d109      	bne.n	80011b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x9a>
 80011a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bfb8      	it	lt
 80011aa:	425b      	neglt	r3, r3
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	649a      	str	r2, [r3, #72]	; 0x48
 80011b4:	e008      	b.n	80011c8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xac>
 80011b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bfb8      	it	lt
 80011be:	425b      	neglt	r3, r3
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d104      	bne.n	80011d8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xbc>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34

	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
	}
}
 80011d6:	e09e      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d104      	bne.n	80011e8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xcc>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011e6:	e096      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d104      	bne.n	80011f8 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xdc>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011f6:	e08e      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d104      	bne.n	8001208 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xec>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001206:	e086      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d104      	bne.n	8001218 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0xfc>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001216:	e07e      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, 0);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001220:	e079      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
	} else if (pwm_input < 0) {//if joystick is down then pwm is negatieve and will drive plus forward channel of h bridge.
 8001222:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da75      	bge.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimPlus, 0);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x11e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
 8001238:	e023      	b.n	8001282 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d104      	bne.n	800124a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x12e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
 8001248:	e01b      	b.n	8001282 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d104      	bne.n	800125a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x13e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
 8001258:	e013      	b.n	8001282 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d104      	bne.n	800126a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x14e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
 8001268:	e00b      	b.n	8001282 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d104      	bne.n	800127a <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x15e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2200      	movs	r2, #0
 8001276:	649a      	str	r2, [r3, #72]	; 0x48
 8001278:	e003      	b.n	8001282 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x166>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x180>
 8001288:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bfb8      	it	lt
 8001290:	425b      	neglt	r3, r3
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
}
 800129a:	e03c      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d109      	bne.n	80012b6 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x19a>
 80012a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bfb8      	it	lt
 80012aa:	425b      	neglt	r3, r3
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012b4:	e02f      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d109      	bne.n	80012d0 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1b4>
 80012bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bfb8      	it	lt
 80012c4:	425b      	neglt	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012ce:	e022      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d109      	bne.n	80012ea <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1ce>
 80012d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bfb8      	it	lt
 80012de:	425b      	neglt	r3, r3
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012e8:	e015      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	d109      	bne.n	8001304 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1e8>
 80012f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bfb8      	it	lt
 80012f8:	425b      	neglt	r3, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001302:	e008      	b.n	8001316 <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm+0x1fa>
		__HAL_TIM_SET_COMPARE(tim, channelTimMin, abs(pwm_input));
 8001304:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001308:	2b00      	cmp	r3, #0
 800130a:	bfb8      	it	lt
 800130c:	425b      	neglt	r3, r3
 800130e:	b29a      	uxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_ZN9Convertor18updateCleanerMotorEv>:


void Convertor::updateCleanerMotor(void){
 8001322:	b590      	push	{r4, r7, lr}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]

	this->_cleanerMotorPWM = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	85da      	strh	r2, [r3, #46]	; 0x2e
	this->_cleanerMotorPWM = this->_sbus->getRightY();
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fbdf 	bl	8004af8 <_ZN4SBUS9getRightYEv>
 800133a:	eef0 7a40 	vmov.f32	s15, s0
 800133e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001342:	ee17 3a90 	vmov	r3, s15
 8001346:	b21a      	sxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	85da      	strh	r2, [r3, #46]	; 0x2e

	if(_cleanerMotorPWM > 10){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001352:	2b0a      	cmp	r3, #10
 8001354:	dd10      	ble.n	8001378 <_ZN9Convertor18updateCleanerMotorEv+0x56>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, abs(_cleanerMotorPWM));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800135c:	2b00      	cmp	r3, #0
 800135e:	bfb8      	it	lt
 8001360:	425b      	neglt	r3, r3
 8001362:	b29c      	uxth	r4, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4618      	mov	r0, r3
 800136a:	f001 fa7a 	bl	8002862 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 800136e:	4603      	mov	r3, r0
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4622      	mov	r2, r4
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c

	}



}
 8001376:	e008      	b.n	800138a <_ZN9Convertor18updateCleanerMotorEv+0x68>
		__HAL_TIM_SET_COMPARE(_timers->get_cleanerMotor_Timer(), TIM_CHANNEL_3, 0);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4618      	mov	r0, r3
 800137e:	f001 fa70 	bl	8002862 <_ZN11Initializer22get_cleanerMotor_TimerEv>
 8001382:	4603      	mov	r3, r0
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2200      	movs	r2, #0
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
	...

08001394 <_ZN9Convertor14updateSelectorEv>:



void Convertor::updateSelector(void){
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b087      	sub	sp, #28
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]

	//puts the ALTUM in either cleaner position or in sensor position.
	this->_selectorPWM = this->_sbus->getRightX();
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fc11 	bl	8004bc8 <_ZN4SBUS9getRightXEv>
 80013a6:	eef0 7a40 	vmov.f32	s15, s0
 80013aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ae:	ee17 3a90 	vmov	r3, s15
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	861a      	strh	r2, [r3, #48]	; 0x30

	float cleanerPos = 110;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <_ZN9Convertor14updateSelectorEv+0x8c>)
 80013ba:	60fb      	str	r3, [r7, #12]
	float probePos = 960;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <_ZN9Convertor14updateSelectorEv+0x90>)
 80013be:	60bb      	str	r3, [r7, #8]
	if(_selectorPWM > 0){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dd10      	ble.n	80013ec <_ZN9Convertor14updateSelectorEv+0x58>

		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 fa1f 	bl	8002818 <_ZN11Initializer18get_selector_TimerEv>
 80013da:	4602      	mov	r2, r0
 80013dc:	2308      	movs	r3, #8
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	230c      	movs	r3, #12
 80013e2:	4621      	mov	r1, r4
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe99 	bl	800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );

	}


}
 80013ea:	e014      	b.n	8001416 <_ZN9Convertor14updateSelectorEv+0x82>
	}else if(_selectorPWM < 0){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da0f      	bge.n	8001416 <_ZN9Convertor14updateSelectorEv+0x82>
		this->actuatorControl(_selectorPWM, this->_timers->get_selector_Timer(), TIM_CHANNEL_4,  TIM_CHANNEL_3 );
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f9b3 4030 	ldrsh.w	r4, [r3, #48]	; 0x30
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fa09 	bl	8002818 <_ZN11Initializer18get_selector_TimerEv>
 8001406:	4602      	mov	r2, r0
 8001408:	2308      	movs	r3, #8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	230c      	movs	r3, #12
 800140e:	4621      	mov	r1, r4
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fe83 	bl	800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	42dc0000 	.word	0x42dc0000
 8001424:	44700000 	.word	0x44700000

08001428 <_ZN9Convertor15updatePushMotorEv>:

void Convertor::updatePushMotor(void){
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b085      	sub	sp, #20
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]

	//currently basic implementation for push motor


	this->_pushMotorPWM = this->_sbus->getLeftY();
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fb0d 	bl	8004a54 <_ZN4SBUS8getLeftYEv>
 800143a:	eef0 7a40 	vmov.f32	s15, s0
 800143e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001442:	ee17 3a90 	vmov	r3, s15
 8001446:	b21a      	sxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	865a      	strh	r2, [r3, #50]	; 0x32

	if(_pushMotorPWM > 0){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001452:	2b00      	cmp	r3, #0
 8001454:	dd10      	ble.n	8001478 <_ZN9Convertor15updatePushMotorEv+0x50>

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_3);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f9b3 4032 	ldrsh.w	r4, [r3, #50]	; 0x32
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4618      	mov	r0, r3
 8001462:	f001 f9e5 	bl	8002830 <_ZN11Initializer19get_pushMotor_TimerEv>
 8001466:	4602      	mov	r2, r0
 8001468:	2308      	movs	r3, #8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2304      	movs	r3, #4
 800146e:	4621      	mov	r1, r4
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fe53 	bl	800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
	}else if(_pushMotorPWM < 0){

		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
	}

}
 8001476:	e014      	b.n	80014a2 <_ZN9Convertor15updatePushMotorEv+0x7a>
	}else if(_pushMotorPWM < 0){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800147e:	2b00      	cmp	r3, #0
 8001480:	da0f      	bge.n	80014a2 <_ZN9Convertor15updatePushMotorEv+0x7a>
		this->actuatorControl(_pushMotorPWM, this->_timers->get_pushMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_3);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f9b3 4032 	ldrsh.w	r4, [r3, #50]	; 0x32
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f9cf 	bl	8002830 <_ZN11Initializer19get_pushMotor_TimerEv>
 8001492:	4602      	mov	r2, r0
 8001494:	2308      	movs	r3, #8
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2304      	movs	r3, #4
 800149a:	4621      	mov	r1, r4
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe3d 	bl	800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <_ZN9Convertor16updateFluidMotorEv>:

void Convertor::updateFluidMotor(void){
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af02      	add	r7, sp, #8
 80014b0:	6078      	str	r0, [r7, #4]

	//currently basic implementation for fluid motor
	//simple movement with jogwheel for debug now, fix buttons and fluidpercentage later.

	this->_fluidPWM = this->_sbus->getJogWheel();
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fbee 	bl	8004c98 <_ZN4SBUS11getJogWheelEv>
 80014bc:	eef0 7a40 	vmov.f32	s15, s0
 80014c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c4:	ee17 3a90 	vmov	r3, s15
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	869a      	strh	r2, [r3, #52]	; 0x34

	if(_fluidPWM > 0){
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd10      	ble.n	80014fa <_ZN9Convertor16updateFluidMotorEv+0x50>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer() , TIM_CHANNEL_2, TIM_CHANNEL_1);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f9b3 4034 	ldrsh.w	r4, [r3, #52]	; 0x34
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 f9b0 	bl	8002848 <_ZN11Initializer20get_fluidMotor_TimerEv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2304      	movs	r3, #4
 80014f0:	4621      	mov	r1, r4
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe12 	bl	800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>

		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
	}


}
 80014f8:	e014      	b.n	8001524 <_ZN9Convertor16updateFluidMotorEv+0x7a>
	}else if(_fluidPWM < 0){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001500:	2b00      	cmp	r3, #0
 8001502:	da0f      	bge.n	8001524 <_ZN9Convertor16updateFluidMotorEv+0x7a>
		this->actuatorControl(_fluidPWM, this->_timers->get_fluidMotor_Timer(), TIM_CHANNEL_2, TIM_CHANNEL_1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f9b3 4034 	ldrsh.w	r4, [r3, #52]	; 0x34
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4618      	mov	r0, r3
 8001510:	f001 f99a 	bl	8002848 <_ZN11Initializer20get_fluidMotor_TimerEv>
 8001514:	4602      	mov	r2, r0
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2304      	movs	r3, #4
 800151c:	4621      	mov	r1, r4
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fdfc 	bl	800111c <_ZN9Convertor15actuatorControlEsP17TIM_HandleTypeDefmm>
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <_ZN9Convertor17updateFluidAmountEv>:

void Convertor::updateFluidAmount(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]


	if(this->_sbus->D_button() && (_fluidAmount < 100)){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fd23 	bl	8004f84 <_ZN4SBUS8D_buttonEv>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <_ZN9Convertor17updateFluidAmountEv+0x26>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 800154a:	2b63      	cmp	r3, #99	; 0x63
 800154c:	dc01      	bgt.n	8001552 <_ZN9Convertor17updateFluidAmountEv+0x26>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <_ZN9Convertor17updateFluidAmountEv+0x28>
 8001552:	2300      	movs	r3, #0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00a      	beq.n	800156e <_ZN9Convertor17updateFluidAmountEv+0x42>

		_fluidAmount += 10;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 800155e:	b2db      	uxtb	r3, r3
 8001560:	330a      	adds	r3, #10
 8001562:	b2db      	uxtb	r3, r3
 8001564:	b25a      	sxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}else if(_sbus->C_button() && (_fluidAmount > 0)){

		_fluidAmount -= 10;
	}

}
 800156c:	e01b      	b.n	80015a6 <_ZN9Convertor17updateFluidAmountEv+0x7a>
	}else if(_sbus->C_button() && (_fluidAmount > 0)){
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fcac 	bl	8004ed0 <_ZN4SBUS8C_buttonEv>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <_ZN9Convertor17updateFluidAmountEv+0x60>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001584:	2b00      	cmp	r3, #0
 8001586:	dd01      	ble.n	800158c <_ZN9Convertor17updateFluidAmountEv+0x60>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <_ZN9Convertor17updateFluidAmountEv+0x62>
 800158c:	2300      	movs	r3, #0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <_ZN9Convertor17updateFluidAmountEv+0x7a>
		_fluidAmount -= 10;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3b0a      	subs	r3, #10
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <_ZN9Convertor17setAltitudeOffsetEv>:

void Convertor::setAltitudeOffset(void){
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

	static uint8_t counter = 0;


	if(this->_sbus->home_button()){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fd3b 	bl	8005038 <_ZN4SBUS11home_buttonEv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00c      	beq.n	80015e2 <_ZN9Convertor17setAltitudeOffsetEv+0x32>
		counter += 1;
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <_ZN9Convertor17setAltitudeOffsetEv+0xb4>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <_ZN9Convertor17setAltitudeOffsetEv+0xb4>)
 80015d2:	701a      	strb	r2, [r3, #0]
		if (counter >= 2){
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <_ZN9Convertor17setAltitudeOffsetEv+0xb4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d902      	bls.n	80015e2 <_ZN9Convertor17setAltitudeOffsetEv+0x32>
			counter = 0;
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <_ZN9Convertor17setAltitudeOffsetEv+0xb4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
		}
	}

	switch(counter){
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <_ZN9Convertor17setAltitudeOffsetEv+0xb4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d02e      	beq.n	8001648 <_ZN9Convertor17setAltitudeOffsetEv+0x98>
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	dc35      	bgt.n	800165a <_ZN9Convertor17setAltitudeOffsetEv+0xaa>
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <_ZN9Convertor17setAltitudeOffsetEv+0x48>
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d008      	beq.n	8001608 <_ZN9Convertor17setAltitudeOffsetEv+0x58>
		case 2:
			_altimeter->set_offset(0);
			break;
	}

}
 80015f6:	e030      	b.n	800165a <_ZN9Convertor17setAltitudeOffsetEv+0xaa>
			_altimeter->set_offset(0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001668 <_ZN9Convertor17setAltitudeOffsetEv+0xb8>
 8001600:	4618      	mov	r0, r3
 8001602:	f004 f816 	bl	8005632 <_ZN9Altimeter10set_offsetEf>
			break;
 8001606:	e028      	b.n	800165a <_ZN9Convertor17setAltitudeOffsetEv+0xaa>
			if(_altimeter->get_offset() == 0){
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	4618      	mov	r0, r3
 800160e:	f004 f81f 	bl	8005650 <_ZN9Altimeter10get_offsetEv>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
 8001616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <_ZN9Convertor17setAltitudeOffsetEv+0xa8>
				_altimeter->set_offset(_altimeter->get_altitude());
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	4618      	mov	r0, r3
 8001634:	f003 ff9b 	bl	800556e <_ZN9Altimeter12get_altitudeEv>
 8001638:	eef0 7a40 	vmov.f32	s15, s0
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	4620      	mov	r0, r4
 8001642:	f003 fff6 	bl	8005632 <_ZN9Altimeter10set_offsetEf>
			break;
 8001646:	e007      	b.n	8001658 <_ZN9Convertor17setAltitudeOffsetEv+0xa8>
			_altimeter->set_offset(0);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001668 <_ZN9Convertor17setAltitudeOffsetEv+0xb8>
 8001650:	4618      	mov	r0, r3
 8001652:	f003 ffee 	bl	8005632 <_ZN9Altimeter10set_offsetEf>
			break;
 8001656:	e000      	b.n	800165a <_ZN9Convertor17setAltitudeOffsetEv+0xaa>
			break;
 8001658:	bf00      	nop
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	bf00      	nop
 8001664:	20000370 	.word	0x20000370
 8001668:	00000000 	.word	0x00000000

0800166c <_ZN9Convertor7processEv>:
int16_t Convertor::get_fluidAmount(void){

	return _fluidAmount;
}

void Convertor::process(void){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]


	this->updateLED();
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fcf9 	bl	800106c <_ZN9Convertor9updateLEDEv>
	this->updateSelector();
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fe8a 	bl	8001394 <_ZN9Convertor14updateSelectorEv>
	this->updatePushMotor();
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fed1 	bl	8001428 <_ZN9Convertor15updatePushMotorEv>
	this->updateFluidMotor();
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ff0f 	bl	80014aa <_ZN9Convertor16updateFluidMotorEv>
	this->updateCleanerMotor();
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe48 	bl	8001322 <_ZN9Convertor18updateCleanerMotorEv>
	this->getADC();
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fcc2 	bl	800101c <_ZN9Convertor6getADCEv>
	this->updateFluidAmount();
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff47 	bl	800152c <_ZN9Convertor17updateFluidAmountEv>
	this->setAltitudeOffset();
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ff86 	bl	80015b0 <_ZN9Convertor17setAltitudeOffsetEv>

}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>:
#include "Initializer.h"
//#include "../stm32g4xx_hal_msp.c"
Initializer::Initializer(UART_HandleTypeDef* huart1, UART_HandleTypeDef* huart2){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_+0x34>)
 80016bc:	609a      	str	r2, [r3, #8]

	this->_huart1 = huart1;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	601a      	str	r2, [r3, #0]
	this->_huart2 = huart2;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	605a      	str	r2, [r3, #4]
	this->initClock();
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f001 f832 	bl	8002734 <_ZN11Initializer9initClockEv>
	this->initGPIO();
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 ff89 	bl	80025e8 <_ZN11Initializer8initGPIOEv>
}
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000be4 	.word	0x20000be4

080016e4 <_ZN11Initializer12init_ConfigsEv>:





void Initializer::init_Configs(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]


	this->initDMA();
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 ff25 	bl	800253c <_ZN11Initializer7initDMAEv>

	this->initTIM_1();
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f822 	bl	800173c <_ZN11Initializer9initTIM_1Ev>

	this->initTIM_2();
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f923 	bl	8001944 <_ZN11Initializer9initTIM_2Ev>

	this->initTIM_3();
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f99a 	bl	8001a38 <_ZN11Initializer9initTIM_3Ev>
	this->initTIM_4();
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fa53 	bl	8001bb0 <_ZN11Initializer9initTIM_4Ev>
	this->initTIM_8();
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fb32 	bl	8001d74 <_ZN11Initializer9initTIM_8Ev>
	this->initTIM_16();
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fc45 	bl	8001fa0 <_ZN11Initializer10initTIM_16Ev>
	this->initTIM_20();
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fd0c 	bl	8002134 <_ZN11Initializer10initTIM_20Ev>
	this->initUSART_1();
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fd79 	bl	8002214 <_ZN11Initializer11initUSART_1Ev>
	this->initUSART_2();
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fdfe 	bl	8002324 <_ZN11Initializer11initUSART_2Ev>
	this->initI2C2();
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fe8b 	bl	8002444 <_ZN11Initializer8initI2C2Ev>


    MX_USB_Device_Init();
 800172e:	f013 fb27 	bl	8014d80 <MX_USB_Device_Init>


}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <_ZN11Initializer9initTIM_1Ev>:


void Initializer::initTIM_1(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	b09e      	sub	sp, #120	; 0x78
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM1_CLK_ENABLE();
 8001744:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001748:	4a7b      	ldr	r2, [pc, #492]	; (8001938 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 800174a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174e:	6613      	str	r3, [r2, #96]	; 0x60
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <_ZN11Initializer9initTIM_1Ev+0x1fc>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2234      	movs	r2, #52	; 0x34
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f014 f8d4 	bl	8015940 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a68      	ldr	r2, [pc, #416]	; (800193c <_ZN11Initializer9initTIM_1Ev+0x200>)
 800179c:	60da      	str	r2, [r3, #12]
	  htim1.Init.Prescaler = 8;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2208      	movs	r2, #8
 80017a2:	611a      	str	r2, [r3, #16]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
	  htim1.Init.Period = 1080;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80017b0:	619a      	str	r2, [r3, #24]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
	  htim1.Init.RepetitionCounter = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	330c      	adds	r3, #12
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00c fc3f 	bl	800e04c <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <_ZN11Initializer9initTIM_1Ev+0xae>
	  {
	    this->Error_Handler();
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f001 f84c 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80017e4:	4856      	ldr	r0, [pc, #344]	; (8001940 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80017e6:	f014 fdfd 	bl	80163e4 <iprintf>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	330c      	adds	r3, #12
 80017f4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00c fefa 	bl	800e5f4 <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <_ZN11Initializer9initTIM_1Ev+0xda>
	  {
	    Error_Handler();
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f001 f833 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	330c      	adds	r3, #12
 800181a:	4618      	mov	r0, r3
 800181c:	f00c fc6d 	bl	800e0fa <HAL_TIM_PWM_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <_ZN11Initializer9initTIM_1Ev+0x100>
	  {
	    this->Error_Handler();
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f001 f823 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001836:	4842      	ldr	r0, [pc, #264]	; (8001940 <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001838:	f014 fdd4 	bl	80163e4 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	330c      	adds	r3, #12
 800184c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f00d fd3a 	bl	800f2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <_ZN11Initializer9initTIM_1Ev+0x132>
	  {
	    this->Error_Handler();
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f001 f807 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186e:	2360      	movs	r3, #96	; 0x60
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001876:	2300      	movs	r3, #0
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	330c      	adds	r3, #12
 800188e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001892:	2208      	movs	r2, #8
 8001894:	4618      	mov	r0, r3
 8001896:	f00c fd99 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <_ZN11Initializer9initTIM_1Ev+0x17a>
	  {
	    this->Error_Handler();
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 ffe6 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 80018b0:	4823      	ldr	r0, [pc, #140]	; (8001940 <_ZN11Initializer9initTIM_1Ev+0x204>)
 80018b2:	f014 fd97 	bl	80163e4 <iprintf>

	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	330c      	adds	r3, #12
 80018f2:	f107 020c 	add.w	r2, r7, #12
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f00d fd7d 	bl	800f3f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <_ZN11Initializer9initTIM_1Ev+0x1de>
	  {
	    this->Error_Handler();
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 ffb4 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM1 init");
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <_ZN11Initializer9initTIM_1Ev+0x204>)
 8001916:	f014 fd65 	bl	80163e4 <iprintf>

	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	330c      	adds	r3, #12
 800191e:	4618      	mov	r0, r3
 8001920:	f005 fac8 	bl	8006eb4 <HAL_TIM_MspPostInit>
	   * These signals are used to drive a full-bridge inverter, which is a common configuration for driving
	   * motor loads. In this case, the function starts the	   *  timer channel's complementary output
	   *  (marked as "PWMN" in the function name) for the specified timer. */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	330c      	adds	r3, #12
 8001928:	2108      	movs	r1, #8
 800192a:	4618      	mov	r0, r3
 800192c:	f00d fc0c 	bl	800f148 <HAL_TIMEx_PWMN_Start>


}
 8001930:	bf00      	nop
 8001932:	3778      	adds	r7, #120	; 0x78
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40012c00 	.word	0x40012c00
 8001940:	08018478 	.word	0x08018478

08001944 <_ZN11Initializer9initTIM_2Ev>:

void Initializer::initTIM_2(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	  htim2.Init.Prescaler = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  htim2.Init.Period = 4.294967295E9;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00c fb53 	bl	800e04c <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <_ZN11Initializer9initTIM_2Ev+0x7e>
	  {
	    this->Error_Handler();
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 ff60 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80019bc:	481d      	ldr	r0, [pc, #116]	; (8001a34 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80019be:	f014 fd11 	bl	80163e4 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c6:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80019ce:	f107 0218 	add.w	r2, r7, #24
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00c fe0d 	bl	800e5f4 <HAL_TIM_ConfigClockSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <_ZN11Initializer9initTIM_2Ev+0xb2>
	  {
	    this->Error_Handler();
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 ff46 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 80019f2:	f014 fcf7 	bl	80163e4 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a04:	f107 020c 	add.w	r2, r7, #12
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00d fc5e 	bl	800f2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <_ZN11Initializer9initTIM_2Ev+0xe8>
	  {
	    this->Error_Handler();
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 ff2b 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM2 init");
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <_ZN11Initializer9initTIM_2Ev+0xf0>)
 8001a28:	f014 fcdc 	bl	80163e4 <iprintf>

	  }


}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	08018490 	.word	0x08018490

08001a38 <_ZN11Initializer9initTIM_3Ev>:


void Initializer::initTIM_3(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	; 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM3_CLK_ENABLE();  // Enable the TIM3 clock
 8001a40:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4c:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <_ZN11Initializer9initTIM_3Ev+0x16c>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]


	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	615a      	str	r2, [r3, #20]
 8001a76:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <_ZN11Initializer9initTIM_3Ev+0x170>)
 8001a7c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  htim3.Init.Prescaler = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	  htim3.Init.Period = 1000;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a96:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00c fb22 	bl	800e0fa <HAL_TIM_PWM_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <_ZN11Initializer9initTIM_3Ev+0x9a>
	  {
	    this->Error_Handler();
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fed8 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001acc:	4837      	ldr	r0, [pc, #220]	; (8001bac <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001ace:	f014 fc89 	bl	80163e4 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ae0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00d fbf0 	bl	800f2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <_ZN11Initializer9initTIM_3Ev+0xd0>
	  {
	    this->Error_Handler();
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 febd 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001b02:	482a      	ldr	r0, [pc, #168]	; (8001bac <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001b04:	f014 fc6e 	bl	80163e4 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b1e:	f107 0110 	add.w	r1, r7, #16
 8001b22:	2200      	movs	r2, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00c fc51 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <_ZN11Initializer9initTIM_3Ev+0x10e>
	  {
	    this->Error_Handler();
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fe9e 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001b40:	481a      	ldr	r0, [pc, #104]	; (8001bac <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001b42:	f014 fc4f 	bl	80163e4 <iprintf>

	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b4c:	f107 0110 	add.w	r1, r7, #16
 8001b50:	2204      	movs	r2, #4
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00c fc3a 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <_ZN11Initializer9initTIM_3Ev+0x13c>
	  {
	    this->Error_Handler();
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fe87 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM3 init");
 8001b6e:	480f      	ldr	r0, [pc, #60]	; (8001bac <_ZN11Initializer9initTIM_3Ev+0x174>)
 8001b70:	f014 fc38 	bl	80163e4 <iprintf>

	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 f99a 	bl	8006eb4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00c fb0d 	bl	800e1a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b94:	2104      	movs	r1, #4
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00c fb06 	bl	800e1a8 <HAL_TIM_PWM_Start>



}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	; 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	080184a8 	.word	0x080184a8

08001bb0 <_ZN11Initializer9initTIM_4Ev>:

void Initializer::initTIM_4(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b092      	sub	sp, #72	; 0x48
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM4_CLK_ENABLE();  // Enable the TIM4 clock
 8001bb8:	4b6b      	ldr	r3, [pc, #428]	; (8001d68 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	4a6a      	ldr	r2, [pc, #424]	; (8001d68 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc4:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <_ZN11Initializer9initTIM_4Ev+0x1b8>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM4_Init 1 */

	  /* USER CODE END TIM4_Init 1 */
	  htim4.Instance = TIM4;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a5a      	ldr	r2, [pc, #360]	; (8001d6c <_ZN11Initializer9initTIM_4Ev+0x1bc>)
 8001c02:	659a      	str	r2, [r3, #88]	; 0x58
	  htim4.Init.Prescaler = 2;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	65da      	str	r2, [r3, #92]	; 0x5c
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	661a      	str	r2, [r3, #96]	; 0x60
	  htim4.Init.Period = 1000;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c16:	665a      	str	r2, [r3, #100]	; 0x64
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	669a      	str	r2, [r3, #104]	; 0x68
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	671a      	str	r2, [r3, #112]	; 0x70
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3358      	adds	r3, #88	; 0x58
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00c fa0f 	bl	800e04c <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <_ZN11Initializer9initTIM_4Ev+0x9a>
	  {
	    this->Error_Handler();
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fe1c 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c44:	484a      	ldr	r0, [pc, #296]	; (8001d70 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c46:	f014 fbcd 	bl	80163e4 <iprintf>


	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3358      	adds	r3, #88	; 0x58
 8001c54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00c fcca 	bl	800e5f4 <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <_ZN11Initializer9initTIM_4Ev+0xcc>
	  {
	    this->Error_Handler();
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fe03 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c76:	483e      	ldr	r0, [pc, #248]	; (8001d70 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c78:	f014 fbb4 	bl	80163e4 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3358      	adds	r3, #88	; 0x58
 8001c80:	4618      	mov	r0, r3
 8001c82:	f00c fa3a 	bl	800e0fa <HAL_TIM_PWM_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <_ZN11Initializer9initTIM_4Ev+0xf2>
	  {
	    this->Error_Handler();
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fdf0 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001c9c:	4834      	ldr	r0, [pc, #208]	; (8001d70 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001c9e:	f014 fba1 	bl	80163e4 <iprintf>


	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3358      	adds	r3, #88	; 0x58
 8001cae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00d fb09 	bl	800f2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <_ZN11Initializer9initTIM_4Ev+0x126>
	  {
	    this->Error_Handler();
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fdd6 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001cd0:	4827      	ldr	r0, [pc, #156]	; (8001d70 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001cd2:	f014 fb87 	bl	80163e4 <iprintf>


	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd6:	2360      	movs	r3, #96	; 0x60
 8001cd8:	613b      	str	r3, [r7, #16]
	  sConfigOC.Pulse = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3358      	adds	r3, #88	; 0x58
 8001cea:	f107 0110 	add.w	r1, r7, #16
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00c fb6b 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <_ZN11Initializer9initTIM_4Ev+0x162>
	  {
	    this->Error_Handler();
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fdb8 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001d0c:	4818      	ldr	r0, [pc, #96]	; (8001d70 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001d0e:	f014 fb69 	bl	80163e4 <iprintf>


	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3358      	adds	r3, #88	; 0x58
 8001d16:	f107 0110 	add.w	r1, r7, #16
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00c fb55 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <_ZN11Initializer9initTIM_4Ev+0x18e>
	  {
	    this->Error_Handler();
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fda2 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM4 init");
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <_ZN11Initializer9initTIM_4Ev+0x1c0>)
 8001d3a:	f014 fb53 	bl	80163e4 <iprintf>

	  }
	  /* USER CODE BEGIN TIM4_Init 2 */

	  /* USER CODE END TIM4_Init 2 */
	  HAL_TIM_MspPostInit(&htim4);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3358      	adds	r3, #88	; 0x58
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 f8b6 	bl	8006eb4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3358      	adds	r3, #88	; 0x58
 8001d4c:	2108      	movs	r1, #8
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00c fa2a 	bl	800e1a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3358      	adds	r3, #88	; 0x58
 8001d58:	2104      	movs	r1, #4
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00c fa24 	bl	800e1a8 <HAL_TIM_PWM_Start>


}
 8001d60:	bf00      	nop
 8001d62:	3748      	adds	r7, #72	; 0x48
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	080184c0 	.word	0x080184c0

08001d74 <_ZN11Initializer9initTIM_8Ev>:

void Initializer::initTIM_8(void){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b09e      	sub	sp, #120	; 0x78
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM8_CLK_ENABLE();  // Enable the TIM16 clock
 8001d7c:	4b86      	ldr	r3, [pc, #536]	; (8001f98 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	4a85      	ldr	r2, [pc, #532]	; (8001f98 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001d82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d86:	6613      	str	r3, [r2, #96]	; 0x60
 8001d88:	4b83      	ldr	r3, [pc, #524]	; (8001f98 <_ZN11Initializer9initTIM_8Ev+0x224>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2234      	movs	r2, #52	; 0x34
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f013 fdb8 	bl	8015940 <memset>

	  /* USER CODE BEGIN TIM8_Init 1 */

	  /* USER CODE END TIM8_Init 1 */
	  htim8.Instance = TIM8;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a72      	ldr	r2, [pc, #456]	; (8001f9c <_ZN11Initializer9initTIM_8Ev+0x228>)
 8001dd4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	  htim8.Init.Prescaler = 2;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	  htim8.Init.Period = 1000;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dee:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	  htim8.Init.RepetitionCounter = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	33f0      	adds	r3, #240	; 0xf0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00c f91c 	bl	800e04c <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <_ZN11Initializer9initTIM_8Ev+0xb6>
	  {
	    Error_Handler();
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fd29 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	66bb      	str	r3, [r7, #104]	; 0x68
	  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	33f0      	adds	r3, #240	; 0xf0
 8001e34:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00c fbda 	bl	800e5f4 <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <_ZN11Initializer9initTIM_8Ev+0xe2>
	  {
	    Error_Handler();
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fd13 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	33f0      	adds	r3, #240	; 0xf0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f00c f94d 	bl	800e0fa <HAL_TIM_PWM_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <_ZN11Initializer9initTIM_8Ev+0x102>
	  {
	    Error_Handler();
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fd03 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	663b      	str	r3, [r7, #96]	; 0x60
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	667b      	str	r3, [r7, #100]	; 0x64
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	33f0      	adds	r3, #240	; 0xf0
 8001e86:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00d fa1d 	bl	800f2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf14      	ite	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	2300      	moveq	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <_ZN11Initializer9initTIM_8Ev+0x134>
	  {
	    Error_Handler();
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fcea 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea8:	2360      	movs	r3, #96	; 0x60
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.Pulse = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	65bb      	str	r3, [r7, #88]	; 0x58
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	33f0      	adds	r3, #240	; 0xf0
 8001ec8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00c fa7c 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <_ZN11Initializer9initTIM_8Ev+0x176>
	  {
	    Error_Handler();
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fcc9 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	33f0      	adds	r3, #240	; 0xf0
 8001eee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f00c fa69 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <_ZN11Initializer9initTIM_8Ev+0x19c>
	  {
	    Error_Handler();
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fcb6 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	33f0      	adds	r3, #240	; 0xf0
 8001f4c:	f107 020c 	add.w	r2, r7, #12
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00d fa50 	bl	800f3f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <_ZN11Initializer9initTIM_8Ev+0x1fa>
	  {
	    Error_Handler();
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fc87 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	  }
	  /* USER CODE BEGIN TIM8_Init 2 */

	  /* USER CODE END TIM8_Init 2 */
	  HAL_TIM_MspPostInit(&htim8);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	33f0      	adds	r3, #240	; 0xf0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 ff9e 	bl	8006eb4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	33f0      	adds	r3, #240	; 0xf0
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00c f912 	bl	800e1a8 <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_4);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	33f0      	adds	r3, #240	; 0xf0
 8001f88:	210c      	movs	r1, #12
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00d f8dc 	bl	800f148 <HAL_TIMEx_PWMN_Start>




}
 8001f90:	bf00      	nop
 8001f92:	3778      	adds	r7, #120	; 0x78
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40013400 	.word	0x40013400

08001fa0 <_ZN11Initializer10initTIM_16Ev>:

void Initializer::initTIM_16(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b098      	sub	sp, #96	; 0x60
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

	  __HAL_RCC_TIM16_CLK_ENABLE();  // Enable the TIM16 clock
 8001fa8:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb4:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <_ZN11Initializer10initTIM_16Ev+0x188>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	2234      	movs	r2, #52	; 0x34
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f013 fcaf 	bl	8015940 <memset>

	  /* USER CODE BEGIN TIM16_Init 1 */

	  /* USER CODE END TIM16_Init 1 */
	  htim16.Instance = TIM16;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <_ZN11Initializer10initTIM_16Ev+0x18c>)
 8001fe6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  htim16.Init.Prescaler = 128;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	  htim16.Init.Period = 1000;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002000:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  htim16.Init.RepetitionCounter = 0;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	33a4      	adds	r3, #164	; 0xa4
 8002020:	4618      	mov	r0, r3
 8002022:	f00c f813 	bl	800e04c <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <_ZN11Initializer10initTIM_16Ev+0xa2>
	  {
	    this->Error_Handler();
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fc20 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 800203c:	483c      	ldr	r0, [pc, #240]	; (8002130 <_ZN11Initializer10initTIM_16Ev+0x190>)
 800203e:	f014 f9d1 	bl	80163e4 <iprintf>


	  }
	  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	33a4      	adds	r3, #164	; 0xa4
 8002046:	4618      	mov	r0, r3
 8002048:	f00c f857 	bl	800e0fa <HAL_TIM_PWM_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <_ZN11Initializer10initTIM_16Ev+0xc8>
	  {
	    this->Error_Handler();
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fc0d 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8002062:	4833      	ldr	r0, [pc, #204]	; (8002130 <_ZN11Initializer10initTIM_16Ev+0x190>)
 8002064:	f014 f9be 	bl	80163e4 <iprintf>

	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	647b      	str	r3, [r7, #68]	; 0x44
	  sConfigOC.Pulse = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	64bb      	str	r3, [r7, #72]	; 0x48
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002070:	2300      	movs	r3, #0
 8002072:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002074:	2300      	movs	r3, #0
 8002076:	653b      	str	r3, [r7, #80]	; 0x50
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	657b      	str	r3, [r7, #84]	; 0x54
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	33a4      	adds	r3, #164	; 0xa4
 8002088:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800208c:	2200      	movs	r2, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f00c f99c 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <_ZN11Initializer10initTIM_16Ev+0x110>
	  {
	   this->Error_Handler();
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fbe9 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020aa:	4821      	ldr	r0, [pc, #132]	; (8002130 <_ZN11Initializer10initTIM_16Ev+0x190>)
 80020ac:	f014 f99a 	bl	80163e4 <iprintf>


	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
	  sBreakDeadTimeConfig.BreakFilter = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	643b      	str	r3, [r7, #64]	; 0x40
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	33a4      	adds	r3, #164	; 0xa4
 80020d6:	f107 0210 	add.w	r2, r7, #16
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f00d f98b 	bl	800f3f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <_ZN11Initializer10initTIM_16Ev+0x15e>
	  {
	    this->Error_Handler();
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fbc2 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <_ZN11Initializer10initTIM_16Ev+0x190>)
 80020fa:	f014 f973 	bl	80163e4 <iprintf>

	  }
	  /* USER CODE BEGIN TIM16_Init 2 */

	  /* USER CODE END TIM16_Init 2 */
	  HAL_TIM_MspPostInit(&htim16);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	33a4      	adds	r3, #164	; 0xa4
 8002102:	4618      	mov	r0, r3
 8002104:	f004 fed6 	bl	8006eb4 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	33a4      	adds	r3, #164	; 0xa4
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f00c f84a 	bl	800e1a8 <HAL_TIM_PWM_Start>
	  //set to zero...
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800211a:	2200      	movs	r2, #0
 800211c:	635a      	str	r2, [r3, #52]	; 0x34





}
 800211e:	bf00      	nop
 8002120:	3760      	adds	r7, #96	; 0x60
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	40014400 	.word	0x40014400
 8002130:	080184d8 	.word	0x080184d8

08002134 <_ZN11Initializer10initTIM_20Ev>:

void Initializer::initTIM_20(void){
 8002134:	b580      	push	{r7, lr}
 8002136:	b09c      	sub	sp, #112	; 0x70
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

	  TIM_HandleTypeDef htim20;
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM20_Init 1 */

	  /* USER CODE END TIM20_Init 1 */
	  htim20.Instance = TIM20;
 8002156:	4b2d      	ldr	r3, [pc, #180]	; (800220c <_ZN11Initializer10initTIM_20Ev+0xd8>)
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
	  htim20.Init.Prescaler = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
	  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
	  htim20.Init.Period = 65535;
 8002162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
	  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	2300      	movs	r3, #0
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
	  htim20.Init.RepetitionCounter = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
	  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002178:	4618      	mov	r0, r3
 800217a:	f00b ff67 	bl	800e04c <HAL_TIM_Base_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <_ZN11Initializer10initTIM_20Ev+0x66>
	  {
	    this->Error_Handler();
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fb74 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 8002194:	481e      	ldr	r0, [pc, #120]	; (8002210 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002196:	f014 f925 	bl	80163e4 <iprintf>

	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219e:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80021a0:	f107 0214 	add.w	r2, r7, #20
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00c fa22 	bl	800e5f4 <HAL_TIM_ConfigClockSource>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <_ZN11Initializer10initTIM_20Ev+0x98>
	  {
	    this->Error_Handler();
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fb5b 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80021c6:	4812      	ldr	r0, [pc, #72]	; (8002210 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 80021c8:	f014 f90c 	bl	80163e4 <iprintf>

	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80021d8:	f107 0208 	add.w	r2, r7, #8
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00d f872 	bl	800f2cc <HAL_TIMEx_MasterConfigSynchronization>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <_ZN11Initializer10initTIM_20Ev+0xd0>
	  {
	    this->Error_Handler();
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb3f 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with TIM16 init");
 80021fe:	4804      	ldr	r0, [pc, #16]	; (8002210 <_ZN11Initializer10initTIM_20Ev+0xdc>)
 8002200:	f014 f8f0 	bl	80163e4 <iprintf>

	  }



}
 8002204:	bf00      	nop
 8002206:	3770      	adds	r7, #112	; 0x70
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40015000 	.word	0x40015000
 8002210:	080184d8 	.word	0x080184d8

08002214 <_ZN11Initializer11initUSART_1Ev>:

void Initializer::initUSART_1(void){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

	  _huart1->Instance = USART1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3e      	ldr	r2, [pc, #248]	; (800231c <_ZN11Initializer11initUSART_1Ev+0x108>)
 8002222:	601a      	str	r2, [r3, #0]
	  _huart1->Init.BaudRate = 57600;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800222c:	605a      	str	r2, [r3, #4]
	  _huart1->Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
	  _huart1->Init.StopBits = UART_STOPBITS_1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
	  _huart1->Init.Parity = UART_PARITY_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
	  _huart1->Init.Mode = UART_MODE_TX_RX;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
	  _huart1->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
	  _huart1->Init.OverSampling = UART_OVERSAMPLING_16;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
	  _huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
	  _huart1->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
	  _huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(_huart1) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f00d f993 	bl	800f5a6 <HAL_UART_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <_ZN11Initializer11initUSART_1Ev+0x88>
	  {
	    this->Error_Handler();
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 faf3 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 8002296:	4822      	ldr	r0, [pc, #136]	; (8002320 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 8002298:	f014 f8a4 	bl	80163e4 <iprintf>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(_huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00e fd2e 	bl	8010d04 <HAL_UARTEx_SetTxFifoThreshold>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <_ZN11Initializer11initUSART_1Ev+0xb0>
	  {
	    this->Error_Handler();
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fadf 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80022be:	4818      	ldr	r0, [pc, #96]	; (8002320 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80022c0:	f014 f890 	bl	80163e4 <iprintf>

	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(_huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00e fd58 	bl	8010d80 <HAL_UARTEx_SetRxFifoThreshold>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <_ZN11Initializer11initUSART_1Ev+0xd8>
	  {
	    this->Error_Handler();
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 facb 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 80022e8:	f014 f87c 	bl	80163e4 <iprintf>

	  }
	  if (HAL_UARTEx_DisableFifoMode(_huart1) != HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00e fcce 	bl	8010c92 <HAL_UARTEx_DisableFifoMode>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <_ZN11Initializer11initUSART_1Ev+0xfe>
	  {
	    this->Error_Handler();
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fab8 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with UART1");
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <_ZN11Initializer11initUSART_1Ev+0x10c>)
 800230e:	f014 f869 	bl	80163e4 <iprintf>

	  }



}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40013800 	.word	0x40013800
 8002320:	080184f0 	.word	0x080184f0

08002324 <_ZN11Initializer11initUSART_2Ev>:

void Initializer::initUSART_2(void){
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

	   _huart2->Instance = USART2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a41      	ldr	r2, [pc, #260]	; (8002438 <_ZN11Initializer11initUSART_2Ev+0x114>)
 8002332:	601a      	str	r2, [r3, #0]
	   _huart2->Init.BaudRate = 100000;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a40      	ldr	r2, [pc, #256]	; (800243c <_ZN11Initializer11initUSART_2Ev+0x118>)
 800233a:	605a      	str	r2, [r3, #4]
	   _huart2->Init.WordLength = UART_WORDLENGTH_9B;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002344:	609a      	str	r2, [r3, #8]
	   _huart2->Init.StopBits = UART_STOPBITS_1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
	   _huart2->Init.Parity = UART_PARITY_EVEN;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002356:	611a      	str	r2, [r3, #16]
	   _huart2->Init.Mode = UART_MODE_TX_RX;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	220c      	movs	r2, #12
 800235e:	615a      	str	r2, [r3, #20]
	   _huart2->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
	   _huart2->Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
	   _huart2->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
	   _huart2->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
	   _huart2->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
	   _huart2->AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
	   if (HAL_UART_Init(_huart2) != HAL_OK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f00d f905 	bl	800f5a6 <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <_ZN11Initializer11initUSART_2Ev+0x94>
	   {
	     Error_Handler();
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fa65 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80023b2:	4823      	ldr	r0, [pc, #140]	; (8002440 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80023b4:	f014 f816 	bl	80163e4 <iprintf>

	   }
	   if (HAL_UARTEx_SetTxFifoThreshold(_huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f00e fca0 	bl	8010d04 <HAL_UARTEx_SetTxFifoThreshold>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <_ZN11Initializer11initUSART_2Ev+0xbc>
	   {
	     Error_Handler();
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fa51 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 80023da:	4819      	ldr	r0, [pc, #100]	; (8002440 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 80023dc:	f014 f802 	bl	80163e4 <iprintf>

	   }
	   if (HAL_UARTEx_SetRxFifoThreshold(_huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00e fcca 	bl	8010d80 <HAL_UARTEx_SetRxFifoThreshold>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <_ZN11Initializer11initUSART_2Ev+0xe4>
	   {
	     Error_Handler();
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fa3d 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002402:	480f      	ldr	r0, [pc, #60]	; (8002440 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 8002404:	f013 ffee 	bl	80163e4 <iprintf>

	   }
	   if (HAL_UARTEx_DisableFifoMode(_huart2) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	f00e fc40 	bl	8010c92 <HAL_UARTEx_DisableFifoMode>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <_ZN11Initializer11initUSART_2Ev+0x10a>
	   {
	     Error_Handler();
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa2a 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
		    printf("problem with UART2");
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <_ZN11Initializer11initUSART_2Ev+0x11c>)
 800242a:	f013 ffdb 	bl	80163e4 <iprintf>

	   /* USER CODE END USART2_Init 2 */



}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40004400 	.word	0x40004400
 800243c:	000186a0 	.word	0x000186a0
 8002440:	08018504 	.word	0x08018504

08002444 <_ZN11Initializer8initI2C2Ev>:

void Initializer::initI2C2(void){
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

	  hi2c_ptr->Instance = I2C2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a36      	ldr	r2, [pc, #216]	; (800252c <_ZN11Initializer8initI2C2Ev+0xe8>)
 8002452:	601a      	str	r2, [r3, #0]
	  hi2c_ptr->Init.Timing = 0x20A0C4DF;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a35      	ldr	r2, [pc, #212]	; (8002530 <_ZN11Initializer8initI2C2Ev+0xec>)
 800245a:	605a      	str	r2, [r3, #4]
	  hi2c_ptr->Init.OwnAddress1 = 0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
	  hi2c_ptr->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2201      	movs	r2, #1
 800246a:	60da      	str	r2, [r3, #12]
	  hi2c_ptr->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
	  hi2c_ptr->Init.OwnAddress2 = 0;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
	  hi2c_ptr->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
	  hi2c_ptr->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
	  hi2c_ptr->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(hi2c_ptr) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4618      	mov	r0, r3
 800249a:	f008 f841 	bl	800a520 <HAL_I2C_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <_ZN11Initializer8initI2C2Ev+0x76>
	  {
	    Error_Handler();
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9e4 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80024b4:	481f      	ldr	r0, [pc, #124]	; (8002534 <_ZN11Initializer8initI2C2Ev+0xf0>)
 80024b6:	f013 ff95 	bl	80163e4 <iprintf>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(hi2c_ptr, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f008 fdab 	bl	800b01c <HAL_I2CEx_ConfigAnalogFilter>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <_ZN11Initializer8initI2C2Ev+0x9e>
	  {
	    this->Error_Handler();
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f9d0 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 80024dc:	4815      	ldr	r0, [pc, #84]	; (8002534 <_ZN11Initializer8initI2C2Ev+0xf0>)
 80024de:	f013 ff81 	bl	80163e4 <iprintf>

	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(hi2c_ptr, 0) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f008 fde2 	bl	800b0b2 <HAL_I2CEx_ConfigDigitalFilter>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <_ZN11Initializer8initI2C2Ev+0xc6>
	  {
	    this->Error_Handler();
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9bc 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with I2C2");
 8002504:	480b      	ldr	r0, [pc, #44]	; (8002534 <_ZN11Initializer8initI2C2Ev+0xf0>)
 8002506:	f013 ff6d 	bl	80163e4 <iprintf>

	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */
	  __HAL_RCC_I2C2_CLK_ENABLE();
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <_ZN11Initializer8initI2C2Ev+0xf4>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002514:	6593      	str	r3, [r2, #88]	; 0x58
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <_ZN11Initializer8initI2C2Ev+0xf4>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]


}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40005800 	.word	0x40005800
 8002530:	20a0c4df 	.word	0x20a0c4df
 8002534:	08018518 	.word	0x08018518
 8002538:	40021000 	.word	0x40021000

0800253c <_ZN11Initializer7initDMAEv>:




void Initializer::initDMA(void){
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]


	  /* DMA controller clock enable */
	  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6493      	str	r3, [r2, #72]	; 0x48
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6493      	str	r3, [r2, #72]	; 0x48
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002578:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6493      	str	r3, [r2, #72]	; 0x48
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <_ZN11Initializer7initDMAEv+0xa8>)
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	200b      	movs	r0, #11
 8002592:	f007 f8e0 	bl	8009756 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002596:	200b      	movs	r0, #11
 8002598:	f007 f8f7 	bl	800978a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	200c      	movs	r0, #12
 80025a2:	f007 f8d8 	bl	8009756 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80025a6:	200c      	movs	r0, #12
 80025a8:	f007 f8ef 	bl	800978a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2100      	movs	r1, #0
 80025b0:	200d      	movs	r0, #13
 80025b2:	f007 f8d0 	bl	8009756 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80025b6:	200d      	movs	r0, #13
 80025b8:	f007 f8e7 	bl	800978a <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	200e      	movs	r0, #14
 80025c2:	f007 f8c8 	bl	8009756 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025c6:	200e      	movs	r0, #14
 80025c8:	f007 f8df 	bl	800978a <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2038      	movs	r0, #56	; 0x38
 80025d2:	f007 f8c0 	bl	8009756 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80025d6:	2038      	movs	r0, #56	; 0x38
 80025d8:	f007 f8d7 	bl	800978a <HAL_NVIC_EnableIRQ>

}
 80025dc:	bf00      	nop
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000

080025e8 <_ZN11Initializer8initGPIOEv>:

void Initializer::initGPIO(void){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	; 0x30
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002604:	4a47      	ldr	r2, [pc, #284]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260c:	4b45      	ldr	r3, [pc, #276]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002618:	4b42      	ldr	r3, [pc, #264]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a41      	ldr	r2, [pc, #260]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002630:	4b3c      	ldr	r3, [pc, #240]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	4a3b      	ldr	r2, [pc, #236]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 800264a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264c:	4a35      	ldr	r2, [pc, #212]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <_ZN11Initializer8initGPIOEv+0x13c>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, gled_pc14_Pin|PC15_RTS_Pin, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800267e:	482a      	ldr	r0, [pc, #168]	; (8002728 <_ZN11Initializer8initGPIOEv+0x140>)
 8002680:	f007 ff1c 	bl	800a4bc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PF1_CTS_GPIO_Port, PF1_CTS_Pin, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	2102      	movs	r1, #2
 8002688:	4828      	ldr	r0, [pc, #160]	; (800272c <_ZN11Initializer8initGPIOEv+0x144>)
 800268a:	f007 ff17 	bl	800a4bc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(PG10_NRST_GPIO_Port, PG10_NRST_Pin, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002694:	4826      	ldr	r0, [pc, #152]	; (8002730 <_ZN11Initializer8initGPIOEv+0x148>)
 8002696:	f007 ff11 	bl	800a4bc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	2110      	movs	r1, #16
 800269e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a2:	f007 ff0b 	bl	800a4bc <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : gled_pc14_Pin PC15_RTS_Pin */
	  GPIO_InitStruct.Pin = gled_pc14_Pin|PC15_RTS_Pin;
 80026a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026aa:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ac:	2301      	movs	r3, #1
 80026ae:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	481a      	ldr	r0, [pc, #104]	; (8002728 <_ZN11Initializer8initGPIOEv+0x140>)
 80026c0:	f007 fd7a 	bl	800a1b8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PF1_CTS_Pin */
	  GPIO_InitStruct.Pin = PF1_CTS_Pin;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PF1_CTS_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	4814      	ldr	r0, [pc, #80]	; (800272c <_ZN11Initializer8initGPIOEv+0x144>)
 80026dc:	f007 fd6c 	bl	800a1b8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PG10_NRST_Pin */
	  GPIO_InitStruct.Pin = PG10_NRST_Pin;
 80026e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e6:	2301      	movs	r3, #1
 80026e8:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(PG10_NRST_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4619      	mov	r1, r3
 80026f8:	480d      	ldr	r0, [pc, #52]	; (8002730 <_ZN11Initializer8initGPIOEv+0x148>)
 80026fa:	f007 fd5d 	bl	800a1b8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026fe:	2310      	movs	r3, #16
 8002700:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002718:	f007 fd4e 	bl	800a1b8 <HAL_GPIO_Init>

}
 800271c:	bf00      	nop
 800271e:	3730      	adds	r7, #48	; 0x30
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	48000800 	.word	0x48000800
 800272c:	48001400 	.word	0x48001400
 8002730:	48001800 	.word	0x48001800

08002734 <_ZN11Initializer9initClockEv>:


void Initializer::initClock(){
 8002734:	b580      	push	{r7, lr}
 8002736:	b096      	sub	sp, #88	; 0x58
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]


	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	2238      	movs	r2, #56	; 0x38
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f013 f8fb 	bl	8015940 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800275a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800275e:	f00a fc4f 	bl	800d000 <HAL_PWREx_ControlVoltageScaling>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002762:	2322      	movs	r3, #34	; 0x22
 8002764:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800276c:	2340      	movs	r3, #64	; 0x40
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002770:	2301      	movs	r3, #1
 8002772:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002774:	2302      	movs	r3, #2
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002778:	2302      	movs	r3, #2
 800277a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800277c:	2301      	movs	r3, #1
 800277e:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 16;
 8002780:	2310      	movs	r3, #16
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002784:	2302      	movs	r3, #2
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002788:	2302      	movs	r3, #2
 800278a:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800278c:	2302      	movs	r3, #2
 800278e:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002790:	f107 0320 	add.w	r3, r7, #32
 8002794:	4618      	mov	r0, r3
 8002796:	f00a fcd7 	bl	800d148 <HAL_RCC_OscConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <_ZN11Initializer9initClockEv+0x82>
	  {
	    this->Error_Handler();
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f866 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80027b0:	4812      	ldr	r0, [pc, #72]	; (80027fc <_ZN11Initializer9initClockEv+0xc8>)
 80027b2:	f013 fe17 	bl	80163e4 <iprintf>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b6:	230f      	movs	r3, #15
 80027b8:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ba:	2303      	movs	r3, #3
 80027bc:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	2103      	movs	r1, #3
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00a ffd1 	bl	800d778 <HAL_RCC_ClockConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf14      	ite	ne
 80027dc:	2301      	movne	r3, #1
 80027de:	2300      	moveq	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <_ZN11Initializer9initClockEv+0xbe>
	  {
	    this->Error_Handler();
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f848 	bl	800287c <_ZN11Initializer13Error_HandlerEv>
	    printf("problem with initClock function");
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <_ZN11Initializer9initClockEv+0xc8>)
 80027ee:	f013 fdf9 	bl	80163e4 <iprintf>

	  }


}
 80027f2:	bf00      	nop
 80027f4:	3758      	adds	r7, #88	; 0x58
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	0801852c 	.word	0x0801852c

08002800 <_ZN11Initializer13get_LED_TimerEv>:

TIM_HandleTypeDef* Initializer::get_LED_Timer(void){
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

	return &htim16;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	33a4      	adds	r3, #164	; 0xa4

}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_ZN11Initializer18get_selector_TimerEv>:

TIM_HandleTypeDef* Initializer::get_selector_Timer(void){
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

	return &htim8;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	33f0      	adds	r3, #240	; 0xf0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <_ZN11Initializer19get_pushMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_pushMotor_Timer(void){
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	return &htim4;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3358      	adds	r3, #88	; 0x58
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_ZN11Initializer20get_fluidMotor_TimerEv>:


TIM_HandleTypeDef* Initializer::get_fluidMotor_Timer(void){
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

	return &htim3;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f503 739e 	add.w	r3, r3, #316	; 0x13c

}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_ZN11Initializer22get_cleanerMotor_TimerEv>:

TIM_HandleTypeDef* Initializer::get_cleanerMotor_Timer(void){
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]

	return &htim1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	330c      	adds	r3, #12

}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_ZN11Initializer13Error_HandlerEv>:
	return &hi2c2;
}



void Initializer::Error_Handler(void){
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

	//separate error handler for the Initializer
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b1d      	cmp	r3, #29
 800288c:	d80e      	bhi.n	80028ac <_ZN11Initializer13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 800288e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002892:	4808      	ldr	r0, [pc, #32]	; (80028b4 <_ZN11Initializer13Error_HandlerEv+0x38>)
 8002894:	f007 fe2a 	bl	800a4ec <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8002898:	2032      	movs	r0, #50	; 0x32
 800289a:	f004 ff27 	bl	80076ec <HAL_Delay>
		printf("Initialization error handler !! \r\n");
 800289e:	4806      	ldr	r0, [pc, #24]	; (80028b8 <_ZN11Initializer13Error_HandlerEv+0x3c>)
 80028a0:	f013 fe26 	bl	80164f0 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	3301      	adds	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e7ed      	b.n	8002888 <_ZN11Initializer13Error_HandlerEv+0xc>

	}

}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	48000800 	.word	0x48000800
 80028b8:	0801854c 	.word	0x0801854c

080028bc <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	4053      	eors	r3, r2
 80028d2:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	b25a      	sxtb	r2, r3
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	4053      	eors	r3, r2
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b21a      	sxth	r2, r3
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4053      	eors	r3, r2
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	4053      	eors	r3, r2
 8002900:	b21a      	sxth	r2, r3
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	b2db      	uxtb	r3, r3
 8002908:	b21b      	sxth	r3, r3
 800290a:	4053      	eors	r3, r2
 800290c:	b21b      	sxth	r3, r3
 800290e:	b29a      	uxth	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	801a      	strh	r2, [r3, #0]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800292e:	801a      	strh	r2, [r3, #0]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8002948:	f107 030e 	add.w	r3, r7, #14
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ffe7 	bl	8002920 <crc_init>
	while (length--) {
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	1e5a      	subs	r2, r3, #1
 8002956:	807a      	strh	r2, [r7, #2]
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <crc_calculate+0x40>
                crc_accumulate(*pBuffer++, &crcTmp);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	f107 020e 	add.w	r2, r7, #14
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffa1 	bl	80028bc <crc_accumulate>
	while (length--) {
 800297a:	e7ea      	b.n	8002952 <crc_calculate+0x16>
        }
        return crcTmp;
 800297c:	89fb      	ldrh	r3, [r7, #14]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	4613      	mov	r3, r2
 8002992:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	617b      	str	r3, [r7, #20]
	while (length--) {
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	80fa      	strh	r2, [r7, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <crc_accumulate_buffer+0x38>
                crc_accumulate(*p++, crcAccum);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	617a      	str	r2, [r7, #20]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff80 	bl	80028bc <crc_accumulate>
	while (length--) {
 80029bc:	e7ec      	b.n	8002998 <crc_accumulate_buffer+0x12>
        }
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <mavlink_sha256_init+0x50>)
 80029e0:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <mavlink_sha256_init+0x54>)
 80029e6:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <mavlink_sha256_init+0x58>)
 80029ec:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <mavlink_sha256_init+0x5c>)
 80029f2:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <mavlink_sha256_init+0x60>)
 80029f8:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <mavlink_sha256_init+0x64>)
 80029fe:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <mavlink_sha256_init+0x68>)
 8002a04:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <mavlink_sha256_init+0x6c>)
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	6a09e667 	.word	0x6a09e667
 8002a1c:	bb67ae85 	.word	0xbb67ae85
 8002a20:	3c6ef372 	.word	0x3c6ef372
 8002a24:	a54ff53a 	.word	0xa54ff53a
 8002a28:	510e527f 	.word	0x510e527f
 8002a2c:	9b05688c 	.word	0x9b05688c
 8002a30:	1f83d9ab 	.word	0x1f83d9ab
 8002a34:	5be0cd19 	.word	0x5be0cd19

08002a38 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b0cf      	sub	sp, #316	; 0x13c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a42:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a46:	6018      	str	r0, [r3, #0]
 8002a48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a4c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a50:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8002a52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a56:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8002a62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a66:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8002a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8002a82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8002a92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a96:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8002aa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002aa6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8002ab2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ab6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8002ac2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ac6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	dc17      	bgt.n	8002b10 <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 8002ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002aea:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002afc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b0e:	e7e3      	b.n	8002ad8 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 8002b10:	2310      	movs	r3, #16
 8002b12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b1c:	dc6a      	bgt.n	8002bf4 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b22:	1e9a      	subs	r2, r3, #2
 8002b24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b30:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b38:	1e99      	subs	r1, r3, #2
 8002b3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b46:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002b4a:	405a      	eors	r2, r3
 8002b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b50:	1e99      	subs	r1, r3, #2
 8002b52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b5e:	0a9b      	lsrs	r3, r3, #10
 8002b60:	405a      	eors	r2, r3
 8002b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b66:	1fd9      	subs	r1, r3, #7
 8002b68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b74:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b7a:	f1a3 010f 	sub.w	r1, r3, #15
 8002b7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b8a:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b92:	f1a3 000f 	sub.w	r0, r3, #15
 8002b96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ba2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002ba6:	4059      	eors	r1, r3
 8002ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bac:	f1a3 000f 	sub.w	r0, r3, #15
 8002bb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002bc0:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc6:	f1a3 0110 	sub.w	r1, r3, #16
 8002bca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bd6:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002bd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002be0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bec:	3301      	adds	r3, #1
 8002bee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bf2:	e790      	b.n	8002b16 <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfe:	2b3f      	cmp	r3, #63	; 0x3f
 8002c00:	dc79      	bgt.n	8002cf6 <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002c02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c06:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002c0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c0e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002c12:	405a      	eors	r2, r3
 8002c14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c18:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002c1c:	405a      	eors	r2, r3
 8002c1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002c22:	441a      	add	r2, r3
 8002c24:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002c28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c2c:	4019      	ands	r1, r3
 8002c2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c32:	43d8      	mvns	r0, r3
 8002c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c38:	4003      	ands	r3, r0
 8002c3a:	404b      	eors	r3, r1
 8002c3c:	441a      	add	r2, r3
 8002c3e:	496d      	ldr	r1, [pc, #436]	; (8002df4 <mavlink_sha256_calc+0x3bc>)
 8002c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c48:	441a      	add	r2, r3
 8002c4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c52:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002c56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c64:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002c68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c6c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002c70:	405a      	eors	r2, r3
 8002c72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c76:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002c7a:	405a      	eors	r2, r3
 8002c7c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c84:	4059      	eors	r1, r3
 8002c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c8a:	4019      	ands	r1, r3
 8002c8c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c94:	4003      	ands	r3, r0
 8002c96:	404b      	eors	r3, r1
 8002c98:	4413      	add	r3, r2
 8002c9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8002c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ca2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002ca6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002caa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002cae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002cb6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002cba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002ccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002cd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002cd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002cd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002cdc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002cf4:	e781      	b.n	8002bfa <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8002cf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cfa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d06:	441a      	add	r2, r3
 8002d08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002d14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d24:	441a      	add	r2, r3
 8002d26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002d32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d42:	441a      	add	r2, r3
 8002d44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002d50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d60:	441a      	add	r2, r3
 8002d62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d66:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002d6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d72:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d7e:	441a      	add	r2, r3
 8002d80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002d8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d9c:	441a      	add	r2, r3
 8002d9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002da2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002daa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a1a      	ldr	r2, [r3, #32]
 8002db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dba:	441a      	add	r2, r3
 8002dbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dc0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002dc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dcc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002dd8:	441a      	add	r2, r3
 8002dda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002de6:	bf00      	nop
 8002de8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	08018b1c 	.word	0x08018b1c

08002df8 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b09c      	sub	sp, #112	; 0x70
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	441a      	add	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d904      	bls.n	8002e30 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e38:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d058      	beq.n	8002ef2 <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8002e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e42:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002e46:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d201      	bcs.n	8002e54 <mavlink_sha256_update+0x5c>
            l = len;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5c:	4413      	add	r3, r2
 8002e5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e60:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002e62:	4618      	mov	r0, r3
 8002e64:	f012 fd5e 	bl	8015924 <memcpy>
	offset += l;
 8002e68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e6c:	4413      	add	r3, r2
 8002e6e:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8002e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e74:	4413      	add	r3, r2
 8002e76:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d1d9      	bne.n	8002e3a <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3328      	adds	r3, #40	; 0x28
 8002e8a:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	dc24      	bgt.n	8002ee0 <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e9c:	4413      	add	r3, r2
 8002e9e:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002ea0:	f107 0210 	add.w	r2, r7, #16
 8002ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8002eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eae:	3303      	adds	r3, #3
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb4:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec8:	3302      	adds	r3, #2
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed0:	3303      	adds	r3, #3
 8002ed2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eda:	3301      	adds	r3, #1
 8002edc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ede:	e7d7      	b.n	8002e90 <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fda6 	bl	8002a38 <mavlink_sha256_calc>
	    offset = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8002ef0:	e7a3      	b.n	8002e3a <mavlink_sha256_update+0x42>
	}
    }
}
 8002ef2:	bf00      	nop
 8002ef4:	3770      	adds	r7, #112	; 0x70
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b098      	sub	sp, #96	; 0x60
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	08db      	lsrs	r3, r3, #3
 8002f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f12:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8002f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3308      	adds	r3, #8
 8002f22:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002f28:	f107 030c 	add.w	r3, r7, #12
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	2247      	movs	r2, #71	; 0x47
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f012 fd04 	bl	8015940 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3e:	3307      	adds	r3, #7
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	3360      	adds	r3, #96	; 0x60
 8002f44:	443b      	add	r3, r7
 8002f46:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0a1a      	lsrs	r2, r3, #8
 8002f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f52:	3306      	adds	r3, #6
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	3360      	adds	r3, #96	; 0x60
 8002f58:	443b      	add	r3, r7
 8002f5a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0c1a      	lsrs	r2, r3, #16
 8002f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f66:	3305      	adds	r3, #5
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	3360      	adds	r3, #96	; 0x60
 8002f6c:	443b      	add	r3, r7
 8002f6e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0e1a      	lsrs	r2, r3, #24
 8002f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	3360      	adds	r3, #96	; 0x60
 8002f80:	443b      	add	r3, r7
 8002f82:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8c:	3303      	adds	r3, #3
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	3360      	adds	r3, #96	; 0x60
 8002f92:	443b      	add	r3, r7
 8002f94:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	0a1a      	lsrs	r2, r3, #8
 8002f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	3360      	adds	r3, #96	; 0x60
 8002fa6:	443b      	add	r3, r7
 8002fa8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1a      	lsrs	r2, r3, #16
 8002fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	3360      	adds	r3, #96	; 0x60
 8002fba:	443b      	add	r3, r7
 8002fbc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	0e1b      	lsrs	r3, r3, #24
 8002fc6:	b2d9      	uxtb	r1, r3
 8002fc8:	f107 020c 	add.w	r2, r7, #12
 8002fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fce:	4413      	add	r3, r2
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8002fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd6:	f103 0208 	add.w	r2, r3, #8
 8002fda:	f107 030c 	add.w	r3, r7, #12
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff09 	bl	8002df8 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8002fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe8:	78da      	ldrb	r2, [r3, #3]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ff4:	7892      	ldrb	r2, [r2, #2]
 8002ff6:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ffe:	7852      	ldrb	r2, [r2, #1]
 8003000:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	3303      	adds	r3, #3
 8003006:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003008:	7812      	ldrb	r2, [r2, #0]
 800300a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	3304      	adds	r3, #4
 8003010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003012:	79d2      	ldrb	r2, [r2, #7]
 8003014:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	3305      	adds	r3, #5
 800301a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800301c:	7992      	ldrb	r2, [r2, #6]
 800301e:	701a      	strb	r2, [r3, #0]
}
 8003020:	bf00      	nop
 8003022:	3760      	adds	r7, #96	; 0x60
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4a03      	ldr	r2, [pc, #12]	; (800304c <mavlink_get_channel_status+0x24>)
 800303e:	4413      	add	r3, r2
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	20000374 	.word	0x20000374

08003050 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f240 1223 	movw	r2, #291	; 0x123
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	4a03      	ldr	r2, [pc, #12]	; (8003074 <mavlink_get_channel_buffer+0x24>)
 8003066:	4413      	add	r3, r2
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	200003d4 	.word	0x200003d4

08003078 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b0a0      	sub	sp, #128	; 0x80
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <mavlink_sign_packet+0x20>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <mavlink_sign_packet+0x24>
	    return 0;
 8003098:	2300      	movs	r3, #0
 800309a:	e04f      	b.n	800313c <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	785a      	ldrb	r2, [r3, #1]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3301      	adds	r3, #1
 80030b2:	f107 0110 	add.w	r1, r7, #16
 80030b6:	2206      	movs	r2, #6
 80030b8:	4618      	mov	r0, r3
 80030ba:	f012 fc33 	bl	8015924 <memcpy>
	signing->timestamp++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030c4:	1c54      	adds	r4, r2, #1
 80030c6:	f143 0500 	adc.w	r5, r3, #0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 80030d0:	f107 0318 	add.w	r3, r7, #24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fc77 	bl	80029c8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f103 0110 	add.w	r1, r3, #16
 80030e0:	f107 0318 	add.w	r3, r7, #24
 80030e4:	2220      	movs	r2, #32
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fe86 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	f107 0318 	add.w	r3, r7, #24
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe7f 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80030fa:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 80030fe:	f107 0318 	add.w	r3, r7, #24
 8003102:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fe76 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 800310c:	f107 0318 	add.w	r3, r7, #24
 8003110:	2202      	movs	r2, #2
 8003112:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fe6e 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800311c:	f107 0318 	add.w	r3, r7, #24
 8003120:	2207      	movs	r2, #7
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe67 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1dda      	adds	r2, r3, #7
 800312e:	f107 0318 	add.w	r3, r7, #24
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fee0 	bl	8002efa <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 800313a:	230d      	movs	r3, #13
}
 800313c:	4618      	mov	r0, r3
 800313e:	3780      	adds	r7, #128	; 0x80
 8003140:	46bd      	mov	sp, r7
 8003142:	bdb0      	pop	{r4, r5, r7, pc}

08003144 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d90a      	bls.n	800316c <_mav_trim_payload+0x28>
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	3b01      	subs	r3, #1
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <_mav_trim_payload+0x28>
		length--;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	3b01      	subs	r3, #1
 8003168:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 800316a:	e7f1      	b.n	8003150 <_mav_trim_payload+0xc>
	}
	return length;
 800316c:	78fb      	ldrb	r3, [r7, #3]
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b0aa      	sub	sp, #168	; 0xa8
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <mavlink_signature_check+0x16>
		return true;
 800318e:	2301      	movs	r3, #1
 8003190:	e13d      	b.n	800340e <mavlink_signature_check+0x292>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3302      	adds	r3, #2
 8003196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80031a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 80031a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031a8:	3307      	adds	r3, #7
 80031aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 80031ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fc08 	bl	80029c8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f103 0110 	add.w	r1, r3, #16
 80031be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c2:	2220      	movs	r2, #32
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fe17 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 80031ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ce:	220a      	movs	r2, #10
 80031d0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fe0f 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 010c 	add.w	r1, r3, #12
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	78db      	ldrb	r3, [r3, #3]
 80031e4:	461a      	mov	r2, r3
 80031e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe04 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f503 718a 	add.w	r1, r3, #276	; 0x114
 80031f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031fa:	2202      	movs	r2, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fdfb 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8003202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003206:	2207      	movs	r2, #7
 8003208:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fdf3 	bl	8002df8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8003212:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fe6c 	bl	8002efa <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 8003222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003226:	2206      	movs	r2, #6
 8003228:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800322c:	4618      	mov	r0, r3
 800322e:	f012 fb69 	bl	8015904 <memcmp>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return false;
 8003240:	2300      	movs	r3, #0
 8003242:	e0e4      	b.n	800340e <mavlink_signature_check+0x292>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8003244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 800325a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	f107 0318 	add.w	r3, r7, #24
 8003264:	2206      	movs	r2, #6
 8003266:	4618      	mov	r0, r3
 8003268:	f012 fb5c 	bl	8015924 <memcpy>

	if (signing_streams == NULL) {
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2203      	movs	r2, #3
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                return false;
 800327a:	2300      	movs	r3, #0
 800327c:	e0c7      	b.n	800340e <mavlink_signature_check+0x292>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800327e:	2300      	movs	r3, #0
 8003280:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800328c:	429a      	cmp	r2, r3
 800328e:	d22d      	bcs.n	80032ec <mavlink_signature_check+0x170>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	79d9      	ldrb	r1, [r3, #7]
 8003294:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003298:	68b8      	ldr	r0, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	4403      	add	r3, r0
 80032a2:	3303      	adds	r3, #3
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	4299      	cmp	r1, r3
 80032a8:	d119      	bne.n	80032de <mavlink_signature_check+0x162>
		    msg->compid == signing_streams->stream[i].compid &&
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7a19      	ldrb	r1, [r3, #8]
 80032ae:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80032b2:	68b8      	ldr	r0, [r7, #8]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	4403      	add	r3, r0
 80032bc:	3304      	adds	r3, #4
 80032be:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80032c0:	4299      	cmp	r1, r3
 80032c2:	d10c      	bne.n	80032de <mavlink_signature_check+0x162>
		    link_id == signing_streams->stream[i].link_id) {
 80032c4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	3302      	adds	r3, #2
 80032d4:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 80032d6:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80032da:	429a      	cmp	r2, r3
 80032dc:	d005      	beq.n	80032ea <mavlink_signature_check+0x16e>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80032de:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80032e2:	3301      	adds	r3, #1
 80032e4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80032e8:	e7cc      	b.n	8003284 <mavlink_signature_check+0x108>
			break;
 80032ea:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d146      	bne.n	8003386 <mavlink_signature_check+0x20a>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d905      	bls.n	800330c <mavlink_signature_check+0x190>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2204      	movs	r2, #4
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8003308:	2300      	movs	r3, #0
 800330a:	e080      	b.n	800340e <mavlink_signature_check+0x292>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 800330c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003310:	4941      	ldr	r1, [pc, #260]	; (8003418 <mavlink_signature_check+0x29c>)
 8003312:	1854      	adds	r4, r2, r1
 8003314:	f143 0500 	adc.w	r5, r3, #0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800331e:	4294      	cmp	r4, r2
 8003320:	eb75 0303 	sbcs.w	r3, r5, r3
 8003324:	d205      	bcs.n	8003332 <mavlink_signature_check+0x1b6>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2205      	movs	r2, #5
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 800332e:	2300      	movs	r3, #0
 8003330:	e06d      	b.n	800340e <mavlink_signature_check+0x292>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8003332:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	79d8      	ldrb	r0, [r3, #7]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	440b      	add	r3, r1
 8003344:	3303      	adds	r3, #3
 8003346:	4602      	mov	r2, r0
 8003348:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 800334a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7a18      	ldrb	r0, [r3, #8]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	440b      	add	r3, r1
 800335c:	3304      	adds	r3, #4
 800335e:	4602      	mov	r2, r0
 8003360:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8003362:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	440b      	add	r3, r1
 8003370:	3302      	adds	r3, #2
 8003372:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8003376:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	e021      	b.n	80033ca <mavlink_signature_check+0x24e>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8003392:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	4413      	add	r3, r2
 80033a0:	1d59      	adds	r1, r3, #5
 80033a2:	f107 0310 	add.w	r3, r7, #16
 80033a6:	2206      	movs	r2, #6
 80033a8:	4618      	mov	r0, r3
 80033aa:	f012 fabb 	bl	8015924 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 80033ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033b6:	4290      	cmp	r0, r2
 80033b8:	eb71 0303 	sbcs.w	r3, r1, r3
 80033bc:	d305      	bcc.n	80033ca <mavlink_signature_check+0x24e>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2206      	movs	r2, #6
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e021      	b.n	800340e <mavlink_signature_check+0x292>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80033ca:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	4413      	add	r3, r2
 80033d8:	1d58      	adds	r0, r3, #5
 80033da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033de:	3301      	adds	r3, #1
 80033e0:	2206      	movs	r2, #6
 80033e2:	4619      	mov	r1, r3
 80033e4:	f012 fa9e 	bl	8015924 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 80033e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80033f2:	4290      	cmp	r0, r2
 80033f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80033f8:	d204      	bcs.n	8003404 <mavlink_signature_check+0x288>
		signing->timestamp = tstamp.t64;
 80033fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return true;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	37a8      	adds	r7, #168	; 0xa8
 8003412:	46bd      	mov	sp, r7
 8003414:	bdb0      	pop	{r4, r5, r7, pc}
 8003416:	bf00      	nop
 8003418:	005b8d80 	.word	0x005b8d80

0800341c <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800341c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341e:	b08f      	sub	sp, #60	; 0x3c
 8003420:	af04      	add	r7, sp, #16
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	72fb      	strb	r3, [r7, #11]
 800342a:	4613      	mov	r3, r2
 800342c:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7b1b      	ldrb	r3, [r3, #12]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8003442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <mavlink_finalize_message_buffer+0x4e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <mavlink_finalize_message_buffer+0x4e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <mavlink_finalize_message_buffer+0x4e>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <mavlink_finalize_message_buffer+0x50>
 800346a:	2300      	movs	r3, #0
 800346c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8003470:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <mavlink_finalize_message_buffer+0x60>
 8003478:	230d      	movs	r3, #13
 800347a:	e000      	b.n	800347e <mavlink_finalize_message_buffer+0x62>
 800347c:	2300      	movs	r3, #0
 800347e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8003482:	230a      	movs	r3, #10
 8003484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8003488:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <mavlink_finalize_message_buffer+0x82>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	22fe      	movs	r2, #254	; 0xfe
 8003494:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8003496:	2306      	movs	r3, #6
 8003498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800349c:	e002      	b.n	80034a4 <mavlink_finalize_message_buffer+0x88>
	} else {
		msg->magic = MAVLINK_STX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22fd      	movs	r2, #253	; 0xfd
 80034a2:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80034a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <mavlink_finalize_message_buffer+0x96>
 80034ac:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80034b0:	e009      	b.n	80034c6 <mavlink_finalize_message_buffer+0xaa>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	330c      	adds	r3, #12
 80034b6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fe41 	bl	8003144 <_mav_trim_payload>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461a      	mov	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	7afa      	ldrb	r2, [r7, #11]
 80034ce:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	7aba      	ldrb	r2, [r7, #10]
 80034d4:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80034dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <mavlink_finalize_message_buffer+0xd6>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	791b      	ldrb	r3, [r3, #4]
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	799a      	ldrb	r2, [r3, #6]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	799b      	ldrb	r3, [r3, #6]
 8003504:	3301      	adds	r3, #1
 8003506:	b2da      	uxtb	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	789b      	ldrb	r3, [r3, #2]
 8003510:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	78db      	ldrb	r3, [r3, #3]
 8003516:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8003518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <mavlink_finalize_message_buffer+0x12c>
		buf[2] = msg->seq;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	799b      	ldrb	r3, [r3, #6]
 8003524:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	79db      	ldrb	r3, [r3, #7]
 800352a:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	7a1b      	ldrb	r3, [r3, #8]
 8003530:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	7a5a      	ldrb	r2, [r3, #9]
 8003536:	7a99      	ldrb	r1, [r3, #10]
 8003538:	0209      	lsls	r1, r1, #8
 800353a:	430a      	orrs	r2, r1
 800353c:	7adb      	ldrb	r3, [r3, #11]
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	4313      	orrs	r3, r2
 8003542:	b2db      	uxtb	r3, r3
 8003544:	777b      	strb	r3, [r7, #29]
 8003546:	e030      	b.n	80035aa <mavlink_finalize_message_buffer+0x18e>
	} else {
		buf[2] = msg->incompat_flags;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	795b      	ldrb	r3, [r3, #5]
 8003552:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	79db      	ldrb	r3, [r3, #7]
 800355e:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	7a1b      	ldrb	r3, [r3, #8]
 8003564:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	7a5a      	ldrb	r2, [r3, #9]
 800356a:	7a99      	ldrb	r1, [r3, #10]
 800356c:	0209      	lsls	r1, r1, #8
 800356e:	430a      	orrs	r2, r1
 8003570:	7adb      	ldrb	r3, [r3, #11]
 8003572:	041b      	lsls	r3, r3, #16
 8003574:	4313      	orrs	r3, r2
 8003576:	b2db      	uxtb	r3, r3
 8003578:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	7a5a      	ldrb	r2, [r3, #9]
 800357e:	7a99      	ldrb	r1, [r3, #10]
 8003580:	0209      	lsls	r1, r1, #8
 8003582:	430a      	orrs	r2, r1
 8003584:	7adb      	ldrb	r3, [r3, #11]
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	4313      	orrs	r3, r2
 800358a:	121b      	asrs	r3, r3, #8
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	7a5a      	ldrb	r2, [r3, #9]
 8003596:	7a99      	ldrb	r1, [r3, #10]
 8003598:	0209      	lsls	r1, r1, #8
 800359a:	430a      	orrs	r2, r1
 800359c:	7adb      	ldrb	r3, [r3, #11]
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	4313      	orrs	r3, r2
 80035a2:	141b      	asrs	r3, r3, #16
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 80035aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	f107 0318 	add.w	r3, r7, #24
 80035b8:	3301      	adds	r3, #1
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff f9bd 	bl	800293c <crc_calculate>
 80035c2:	4603      	mov	r3, r0
 80035c4:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f103 010c 	add.w	r1, r3, #12
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	78db      	ldrb	r3, [r3, #3]
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	f107 0316 	add.w	r3, r7, #22
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff f9d5 	bl	8002986 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80035dc:	f107 0216 	add.w	r2, r7, #22
 80035e0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f968 	bl	80028bc <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80035ec:	8af9      	ldrh	r1, [r7, #22]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	330c      	adds	r3, #12
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	78d2      	ldrb	r2, [r2, #3]
 80035f6:	4413      	add	r3, r2
 80035f8:	b2ca      	uxtb	r2, r1
 80035fa:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80035fc:	8afb      	ldrh	r3, [r7, #22]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b299      	uxth	r1, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f103 020c 	add.w	r2, r3, #12
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	78db      	ldrb	r3, [r3, #3]
 800360c:	3301      	adds	r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	b2ca      	uxtb	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8003614:	8afa      	ldrh	r2, [r7, #22]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 800361a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01a      	beq.n	8003658 <mavlink_finalize_message_buffer+0x23c>
		mavlink_sign_packet(status->signing,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	310c      	adds	r1, #12
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800363c:	4401      	add	r1, r0
 800363e:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8003642:	f107 0018 	add.w	r0, r7, #24
 8003646:	9102      	str	r1, [sp, #8]
 8003648:	9201      	str	r2, [sp, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4633      	mov	r3, r6
 800364e:	4602      	mov	r2, r0
 8003650:	4629      	mov	r1, r5
 8003652:	4620      	mov	r0, r4
 8003654:	f7ff fd10 	bl	8003078 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	78db      	ldrb	r3, [r3, #3]
 800365c:	b29a      	uxth	r2, r3
 800365e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003662:	b29b      	uxth	r3, r3
 8003664:	4413      	add	r3, r2
 8003666:	b29a      	uxth	r2, r3
 8003668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800366c:	b29b      	uxth	r3, r3
 800366e:	4413      	add	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	3302      	adds	r3, #2
 8003674:	b29b      	uxth	r3, r3
}
 8003676:	4618      	mov	r0, r3
 8003678:	372c      	adds	r7, #44	; 0x2c
 800367a:	46bd      	mov	sp, r7
 800367c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800367e <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b088      	sub	sp, #32
 8003682:	af04      	add	r7, sp, #16
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	4608      	mov	r0, r1
 8003688:	4611      	mov	r1, r2
 800368a:	461a      	mov	r2, r3
 800368c:	4603      	mov	r3, r0
 800368e:	70fb      	strb	r3, [r7, #3]
 8003690:	460b      	mov	r3, r1
 8003692:	70bb      	strb	r3, [r7, #2]
 8003694:	4613      	mov	r3, r2
 8003696:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8003698:	787b      	ldrb	r3, [r7, #1]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fcc4 	bl	8003028 <mavlink_get_channel_status>
 80036a0:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80036a2:	78ba      	ldrb	r2, [r7, #2]
 80036a4:	78f9      	ldrb	r1, [r7, #3]
 80036a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036aa:	9302      	str	r3, [sp, #8]
 80036ac:	7f3b      	ldrb	r3, [r7, #28]
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	7e3b      	ldrb	r3, [r7, #24]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff feb0 	bl	800341c <mavlink_finalize_message_buffer>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af04      	add	r7, sp, #16
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	4608      	mov	r0, r1
 80036d0:	4611      	mov	r1, r2
 80036d2:	461a      	mov	r2, r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	70fb      	strb	r3, [r7, #3]
 80036d8:	460b      	mov	r3, r1
 80036da:	70bb      	strb	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80036e0:	78ba      	ldrb	r2, [r7, #2]
 80036e2:	78f9      	ldrb	r1, [r7, #3]
 80036e4:	7d3b      	ldrb	r3, [r7, #20]
 80036e6:	9302      	str	r3, [sp, #8]
 80036e8:	7c3b      	ldrb	r3, [r7, #16]
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	787b      	ldrb	r3, [r7, #1]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffc3 	bl	800367e <mavlink_finalize_message_chan>
 80036f8:	4603      	mov	r3, r0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	789b      	ldrb	r3, [r3, #2]
 800370e:	3301      	adds	r3, #1
 8003710:	b2da      	uxtb	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	709a      	strb	r2, [r3, #2]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	78db      	ldrb	r3, [r3, #3]
 8003730:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	2bfe      	cmp	r3, #254	; 0xfe
 8003738:	d13a      	bne.n	80037b0 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800373e:	2305      	movs	r3, #5
 8003740:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	789a      	ldrb	r2, [r3, #2]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3301      	adds	r3, #1
 800374e:	7bfa      	ldrb	r2, [r7, #15]
 8003750:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3302      	adds	r3, #2
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	7992      	ldrb	r2, [r2, #6]
 800375a:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3303      	adds	r3, #3
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	79d2      	ldrb	r2, [r2, #7]
 8003764:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	7a12      	ldrb	r2, [r2, #8]
 800376e:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	7a5a      	ldrb	r2, [r3, #9]
 8003774:	7a99      	ldrb	r1, [r3, #10]
 8003776:	0209      	lsls	r1, r1, #8
 8003778:	430a      	orrs	r2, r1
 800377a:	7adb      	ldrb	r3, [r3, #11]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	4313      	orrs	r3, r2
 8003780:	461a      	mov	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3305      	adds	r3, #5
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1d98      	adds	r0, r3, #6
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f103 010c 	add.w	r1, r3, #12
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	78db      	ldrb	r3, [r3, #3]
 8003798:	461a      	mov	r2, r3
 800379a:	f012 f8c3 	bl	8015924 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800379e:	7dbb      	ldrb	r3, [r7, #22]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	78d2      	ldrb	r2, [r2, #3]
 80037a4:	4413      	add	r3, r2
 80037a6:	3301      	adds	r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	e06c      	b.n	800388a <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fcc3 	bl	8003144 <_mav_trim_payload>
 80037be:	4603      	mov	r3, r0
 80037c0:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80037c2:	2309      	movs	r3, #9
 80037c4:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	789a      	ldrb	r2, [r3, #2]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3301      	adds	r3, #1
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3302      	adds	r3, #2
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	7912      	ldrb	r2, [r2, #4]
 80037de:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3303      	adds	r3, #3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	7952      	ldrb	r2, [r2, #5]
 80037e8:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	7992      	ldrb	r2, [r2, #6]
 80037f2:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3305      	adds	r3, #5
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	79d2      	ldrb	r2, [r2, #7]
 80037fc:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3306      	adds	r3, #6
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	7a12      	ldrb	r2, [r2, #8]
 8003806:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	7a5a      	ldrb	r2, [r3, #9]
 800380c:	7a99      	ldrb	r1, [r3, #10]
 800380e:	0209      	lsls	r1, r1, #8
 8003810:	430a      	orrs	r2, r1
 8003812:	7adb      	ldrb	r3, [r3, #11]
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	4313      	orrs	r3, r2
 8003818:	461a      	mov	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3307      	adds	r3, #7
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	7a5a      	ldrb	r2, [r3, #9]
 8003826:	7a99      	ldrb	r1, [r3, #10]
 8003828:	0209      	lsls	r1, r1, #8
 800382a:	430a      	orrs	r2, r1
 800382c:	7adb      	ldrb	r3, [r3, #11]
 800382e:	041b      	lsls	r3, r3, #16
 8003830:	4313      	orrs	r3, r2
 8003832:	121a      	asrs	r2, r3, #8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3308      	adds	r3, #8
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	7a5a      	ldrb	r2, [r3, #9]
 8003840:	7a99      	ldrb	r1, [r3, #10]
 8003842:	0209      	lsls	r1, r1, #8
 8003844:	430a      	orrs	r2, r1
 8003846:	7adb      	ldrb	r3, [r3, #11]
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	4313      	orrs	r3, r2
 800384c:	141a      	asrs	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3309      	adds	r3, #9
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f103 000a 	add.w	r0, r3, #10
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	4619      	mov	r1, r3
 8003864:	f012 f85e 	bl	8015924 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8003868:	7dba      	ldrb	r2, [r7, #22]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	4413      	add	r3, r2
 800386e:	3301      	adds	r3, #1
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	791b      	ldrb	r3, [r3, #4]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <mavlink_msg_to_send_buffer+0x164>
 8003882:	230d      	movs	r3, #13
 8003884:	e000      	b.n	8003888 <mavlink_msg_to_send_buffer+0x166>
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	b2da      	uxtb	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b29a      	uxth	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1c98      	adds	r0, r3, #2
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80038b8:	7dfa      	ldrb	r2, [r7, #23]
 80038ba:	4619      	mov	r1, r3
 80038bc:	f012 f832 	bl	8015924 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80038c0:	7dbb      	ldrb	r3, [r7, #22]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3303      	adds	r3, #3
 80038d6:	b29b      	uxth	r3, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 80038ec:	f107 030e 	add.w	r3, r7, #14
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f815 	bl	8002920 <crc_init>
	msg->checksum = crcTmp;
 80038f6:	89fa      	ldrh	r2, [r7, #14]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	801a      	strh	r2, [r3, #0]
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8003918:	f107 020e 	add.w	r2, r7, #14
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe ffcb 	bl	80028bc <crc_accumulate>
	msg->checksum = checksum;
 8003926:	89fa      	ldrh	r2, [r7, #14]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	801a      	strh	r2, [r3, #0]
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	23dc      	movs	r3, #220	; 0xdc
 8003942:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	429a      	cmp	r2, r3
 800394a:	d226      	bcs.n	800399a <mavlink_get_msg_entry+0x66>
            uint32_t mid = (low+1+high)/2;
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	3301      	adds	r3, #1
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8003958:	491d      	ldr	r1, [pc, #116]	; (80039d0 <mavlink_get_msg_entry+0x9c>)
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d203      	bcs.n	8003976 <mavlink_get_msg_entry+0x42>
                high = mid-1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3b01      	subs	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
                continue;
 8003974:	e010      	b.n	8003998 <mavlink_get_msg_entry+0x64>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8003976:	4916      	ldr	r1, [pc, #88]	; (80039d0 <mavlink_get_msg_entry+0x9c>)
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d902      	bls.n	8003992 <mavlink_get_msg_entry+0x5e>
                low = mid;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	617b      	str	r3, [r7, #20]
                continue;
 8003990:	e002      	b.n	8003998 <mavlink_get_msg_entry+0x64>
            }
            low = mid;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	617b      	str	r3, [r7, #20]
            break;
 8003996:	e000      	b.n	800399a <mavlink_get_msg_entry+0x66>
        while (low < high) {
 8003998:	e7d4      	b.n	8003944 <mavlink_get_msg_entry+0x10>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 800399a:	490d      	ldr	r1, [pc, #52]	; (80039d0 <mavlink_get_msg_entry+0x9c>)
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e006      	b.n	80039c2 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <mavlink_get_msg_entry+0x9c>)
 80039c0:	4413      	add	r3, r2
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	08018c1c 	.word	0x08018c1c

080039d4 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	78db      	ldrb	r3, [r3, #3]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	f200 8277 	bhi.w	8003ee2 <mavlink_frame_char_buffer+0x50e>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <mavlink_frame_char_buffer+0x28>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a3d 	.word	0x08003a3d
 8003a00:	08003a3d 	.word	0x08003a3d
 8003a04:	08003a9b 	.word	0x08003a9b
 8003a08:	08003b01 	.word	0x08003b01
 8003a0c:	08003b39 	.word	0x08003b39
 8003a10:	08003b51 	.word	0x08003b51
 8003a14:	08003b69 	.word	0x08003b69
 8003a18:	08003b81 	.word	0x08003b81
 8003a1c:	08003b99 	.word	0x08003b99
 8003a20:	08003bf3 	.word	0x08003bf3
 8003a24:	08003c3f 	.word	0x08003c3f
 8003a28:	08003c9b 	.word	0x08003c9b
 8003a2c:	08003cd3 	.word	0x08003cd3
 8003a30:	08003d5f 	.word	0x08003d5f
 8003a34:	08003d5f 	.word	0x08003d5f
 8003a38:	08003e23 	.word	0x08003e23
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	2bfd      	cmp	r3, #253	; 0xfd
 8003a40:	d113      	bne.n	8003a6a <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2202      	movs	r2, #2
 8003a46:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	79fa      	ldrb	r2, [r7, #7]
 8003a52:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	7b1b      	ldrb	r3, [r3, #12]
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff ff3c 	bl	80038e0 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8003a68:	e232      	b.n	8003ed0 <mavlink_frame_char_buffer+0x4fc>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2bfe      	cmp	r3, #254	; 0xfe
 8003a6e:	f040 822f 	bne.w	8003ed0 <mavlink_frame_char_buffer+0x4fc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2202      	movs	r2, #2
 8003a76:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	79fa      	ldrb	r2, [r7, #7]
 8003a82:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	7b1b      	ldrb	r3, [r3, #12]
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff ff24 	bl	80038e0 <mavlink_start_checksum>
		break;
 8003a98:	e21a      	b.n	8003ed0 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00f      	beq.n	8003ac2 <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8003aae:	68b8      	ldr	r0, [r7, #8]
 8003ab0:	f7ff fe27 	bl	8003702 <_mav_parse_error>
			status->msg_received = 0;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2201      	movs	r2, #1
 8003abe:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8003ac0:	e20f      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
			rxmsg->len = c;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	79fa      	ldrb	r2, [r7, #7]
 8003ac6:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2200      	movs	r2, #0
 8003acc:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7ff ff16 	bl	8003904 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	7b1b      	ldrb	r3, [r3, #12]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2205      	movs	r2, #5
 8003af4:	70da      	strb	r2, [r3, #3]
		break;
 8003af6:	e1f4      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2203      	movs	r2, #3
 8003afc:	70da      	strb	r2, [r3, #3]
		break;
 8003afe:	e1f0      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	79fa      	ldrb	r2, [r7, #7]
 8003b04:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	791b      	ldrb	r3, [r3, #4]
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <mavlink_frame_char_buffer+0x152>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8003b12:	68b8      	ldr	r0, [r7, #8]
 8003b14:	f7ff fdf5 	bl	8003702 <_mav_parse_error>
			status->msg_received = 0;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2201      	movs	r2, #1
 8003b22:	70da      	strb	r2, [r3, #3]
			break;
 8003b24:	e1dd      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
		}
		mavlink_update_checksum(rxmsg, c);
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff feea 	bl	8003904 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2204      	movs	r2, #4
 8003b34:	70da      	strb	r2, [r3, #3]
		break;
 8003b36:	e1d4      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	79fa      	ldrb	r2, [r7, #7]
 8003b3c:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	4619      	mov	r1, r3
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff fede 	bl	8003904 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2205      	movs	r2, #5
 8003b4c:	70da      	strb	r2, [r3, #3]
		break;
 8003b4e:	e1c8      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	79fa      	ldrb	r2, [r7, #7]
 8003b54:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fed2 	bl	8003904 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2206      	movs	r2, #6
 8003b64:	70da      	strb	r2, [r3, #3]
		break;
 8003b66:	e1bc      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	79fa      	ldrb	r2, [r7, #7]
 8003b6c:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	4619      	mov	r1, r3
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff fec6 	bl	8003904 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	70da      	strb	r2, [r3, #3]
		break;
 8003b7e:	e1b0      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	79fa      	ldrb	r2, [r7, #7]
 8003b84:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff feba 	bl	8003904 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2208      	movs	r2, #8
 8003b94:	70da      	strb	r2, [r3, #3]
		break;
 8003b96:	e1a4      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	b2d9      	uxtb	r1, r3
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	4301      	orrs	r1, r0
 8003ba6:	7251      	strb	r1, [r2, #9]
 8003ba8:	0a19      	lsrs	r1, r3, #8
 8003baa:	b2c9      	uxtb	r1, r1
 8003bac:	2000      	movs	r0, #0
 8003bae:	4301      	orrs	r1, r0
 8003bb0:	7291      	strb	r1, [r2, #10]
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff fe9f 	bl	8003904 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	7b1b      	ldrb	r3, [r3, #12]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <mavlink_frame_char_buffer+0x216>
			if(rxmsg->len > 0) {
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	78db      	ldrb	r3, [r3, #3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <mavlink_frame_char_buffer+0x20e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	220b      	movs	r2, #11
 8003bde:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8003be0:	e17f      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	220c      	movs	r2, #12
 8003be6:	70da      	strb	r2, [r3, #3]
		break;
 8003be8:	e17b      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2209      	movs	r2, #9
 8003bee:	70da      	strb	r2, [r3, #3]
		break;
 8003bf0:	e177      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	7a5a      	ldrb	r2, [r3, #9]
 8003bf6:	7a99      	ldrb	r1, [r3, #10]
 8003bf8:	0209      	lsls	r1, r1, #8
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	7adb      	ldrb	r3, [r3, #11]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	4313      	orrs	r3, r2
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	b2d1      	uxtb	r1, r2
 8003c12:	2000      	movs	r0, #0
 8003c14:	4301      	orrs	r1, r0
 8003c16:	7259      	strb	r1, [r3, #9]
 8003c18:	0a11      	lsrs	r1, r2, #8
 8003c1a:	b2c9      	uxtb	r1, r1
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	4301      	orrs	r1, r0
 8003c20:	7299      	strb	r1, [r3, #10]
 8003c22:	0c12      	lsrs	r2, r2, #16
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	2100      	movs	r1, #0
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff fe67 	bl	8003904 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	220a      	movs	r2, #10
 8003c3a:	70da      	strb	r2, [r3, #3]
		break;
 8003c3c:	e151      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	7a5a      	ldrb	r2, [r3, #9]
 8003c42:	7a99      	ldrb	r1, [r3, #10]
 8003c44:	0209      	lsls	r1, r1, #8
 8003c46:	430a      	orrs	r2, r1
 8003c48:	7adb      	ldrb	r3, [r3, #11]
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	461a      	mov	r2, r3
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	b2d1      	uxtb	r1, r2
 8003c5e:	2000      	movs	r0, #0
 8003c60:	4301      	orrs	r1, r0
 8003c62:	7259      	strb	r1, [r3, #9]
 8003c64:	0a11      	lsrs	r1, r2, #8
 8003c66:	b2c9      	uxtb	r1, r1
 8003c68:	2000      	movs	r0, #0
 8003c6a:	4301      	orrs	r1, r0
 8003c6c:	7299      	strb	r1, [r3, #10]
 8003c6e:	0c12      	lsrs	r2, r2, #16
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	2100      	movs	r1, #0
 8003c74:	430a      	orrs	r2, r1
 8003c76:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fe41 	bl	8003904 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	78db      	ldrb	r3, [r3, #3]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <mavlink_frame_char_buffer+0x2be>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	220b      	movs	r2, #11
 8003c8e:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8003c90:	e127      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	220c      	movs	r2, #12
 8003c96:	70da      	strb	r2, [r3, #3]
		break;
 8003c98:	e123      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f103 020c 	add.w	r2, r3, #12
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	791b      	ldrb	r3, [r3, #4]
 8003ca4:	1c59      	adds	r1, r3, #1
 8003ca6:	b2c8      	uxtb	r0, r1
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	7108      	strb	r0, [r1, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	79fa      	ldrb	r2, [r7, #7]
 8003cb0:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff fe24 	bl	8003904 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	791a      	ldrb	r2, [r3, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f040 8105 	bne.w	8003ed4 <mavlink_frame_char_buffer+0x500>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	220c      	movs	r2, #12
 8003cce:	70da      	strb	r2, [r3, #3]
		}
		break;
 8003cd0:	e100      	b.n	8003ed4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	7a5a      	ldrb	r2, [r3, #9]
 8003cd6:	7a99      	ldrb	r1, [r3, #10]
 8003cd8:	0209      	lsls	r1, r1, #8
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	7adb      	ldrb	r3, [r3, #11]
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fe26 	bl	8003934 <mavlink_get_msg_entry>
 8003ce8:	61b8      	str	r0, [r7, #24]
		uint8_t crc_extra = e?e->crc_extra:0;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <mavlink_frame_char_buffer+0x322>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	791b      	ldrb	r3, [r3, #4]
 8003cf4:	e000      	b.n	8003cf8 <mavlink_frame_char_buffer+0x324>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
		mavlink_update_checksum(rxmsg, crc_extra);
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff fe00 	bl	8003904 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8003d04:	79fa      	ldrb	r2, [r7, #7]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d003      	beq.n	8003d1a <mavlink_frame_char_buffer+0x346>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	220e      	movs	r2, #14
 8003d16:	70da      	strb	r2, [r3, #3]
 8003d18:	e002      	b.n	8003d20 <mavlink_frame_char_buffer+0x34c>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	220d      	movs	r2, #13
 8003d1e:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	79fa      	ldrb	r2, [r7, #7]
 8003d24:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80d4 	beq.w	8003ed8 <mavlink_frame_char_buffer+0x504>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	791a      	ldrb	r2, [r3, #4]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	799b      	ldrb	r3, [r3, #6]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f080 80cd 	bcs.w	8003ed8 <mavlink_frame_char_buffer+0x504>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	330c      	adds	r3, #12
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	7912      	ldrb	r2, [r2, #4]
 8003d46:	1898      	adds	r0, r3, r2
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	799b      	ldrb	r3, [r3, #6]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	791b      	ldrb	r3, [r3, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	f011 fdf2 	bl	8015940 <memset>
		}
		break;
 8003d5c:	e0bc      	b.n	8003ed8 <mavlink_frame_char_buffer+0x504>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	78db      	ldrb	r3, [r3, #3]
 8003d62:	2b0e      	cmp	r3, #14
 8003d64:	d007      	beq.n	8003d76 <mavlink_frame_char_buffer+0x3a2>
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	8812      	ldrh	r2, [r2, #0]
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	0a12      	lsrs	r2, r2, #8
 8003d70:	b292      	uxth	r2, r2
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <mavlink_frame_char_buffer+0x3aa>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e002      	b.n	8003d84 <mavlink_frame_char_buffer+0x3b0>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	79fa      	ldrb	r2, [r7, #7]
 8003d88:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	791b      	ldrb	r3, [r3, #4]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <mavlink_frame_char_buffer+0x3e2>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	220d      	movs	r2, #13
 8003da2:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	f000 8097 	beq.w	8003edc <mavlink_frame_char_buffer+0x508>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8003db4:	e092      	b.n	8003edc <mavlink_frame_char_buffer+0x508>
			if (status->signing &&
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01a      	beq.n	8003df4 <mavlink_frame_char_buffer+0x420>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <mavlink_frame_char_buffer+0x41c>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	7a59      	ldrb	r1, [r3, #9]
 8003dd2:	7a98      	ldrb	r0, [r3, #10]
 8003dd4:	0200      	lsls	r0, r0, #8
 8003dd6:	4301      	orrs	r1, r0
 8003dd8:	7adb      	ldrb	r3, [r3, #11]
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	4619      	mov	r1, r3
 8003de0:	68b8      	ldr	r0, [r7, #8]
 8003de2:	4790      	blx	r2
 8003de4:	4603      	mov	r3, r0
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <mavlink_frame_char_buffer+0x420>
			if (status->signing &&
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <mavlink_frame_char_buffer+0x422>
 8003df4:	2300      	movs	r3, #0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d006      	beq.n	8003e08 <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d002      	beq.n	8003e08 <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2203      	movs	r2, #3
 8003e06:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d063      	beq.n	8003edc <mavlink_frame_char_buffer+0x508>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8003e14:	f240 1223 	movw	r2, #291	; 0x123
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	6838      	ldr	r0, [r7, #0]
 8003e1c:	f011 fd82 	bl	8015924 <memcpy>
		break;
 8003e20:	e05c      	b.n	8003edc <mavlink_frame_char_buffer+0x508>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	7b5b      	ldrb	r3, [r3, #13]
 8003e26:	f1c3 030d 	rsb	r3, r3, #13
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	79fa      	ldrb	r2, [r7, #7]
 8003e30:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	7b5b      	ldrb	r3, [r3, #13]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	7b5b      	ldrb	r3, [r3, #13]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d14b      	bne.n	8003ee0 <mavlink_frame_char_buffer+0x50c>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6918      	ldr	r0, [r3, #16]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7ff f992 	bl	800317c <mavlink_signature_check>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
 8003e5e:	f083 0301 	eor.w	r3, r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d012      	beq.n	8003e98 <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	7a59      	ldrb	r1, [r3, #9]
 8003e7c:	7a98      	ldrb	r0, [r3, #10]
 8003e7e:	0200      	lsls	r0, r0, #8
 8003e80:	4301      	orrs	r1, r0
 8003e82:	7adb      	ldrb	r3, [r3, #11]
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	430b      	orrs	r3, r1
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68b8      	ldr	r0, [r7, #8]
 8003e8c:	4790      	blx	r2
 8003e8e:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <mavlink_frame_char_buffer+0x4c4>
			if (!sig_ok &&
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <mavlink_frame_char_buffer+0x4c6>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <mavlink_frame_char_buffer+0x4ce>
				// accepted via application level override
				sig_ok = true;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8003ea2:	7ffb      	ldrb	r3, [r7, #31]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <mavlink_frame_char_buffer+0x4dc>
				status->msg_received = MAVLINK_FRAMING_OK;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <mavlink_frame_char_buffer+0x4e2>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <mavlink_frame_char_buffer+0x50c>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8003ec2:	f240 1223 	movw	r2, #291	; 0x123
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	6838      	ldr	r0, [r7, #0]
 8003eca:	f011 fd2b 	bl	8015924 <memcpy>
			}
		}
		break;
 8003ece:	e007      	b.n	8003ee0 <mavlink_frame_char_buffer+0x50c>
		break;
 8003ed0:	bf00      	nop
 8003ed2:	e006      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
		break;
 8003ed4:	bf00      	nop
 8003ed6:	e004      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
		break;
 8003ed8:	bf00      	nop
 8003eda:	e002      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
		break;
 8003edc:	bf00      	nop
 8003ede:	e000      	b.n	8003ee2 <mavlink_frame_char_buffer+0x50e>
		break;
 8003ee0:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d110      	bne.n	8003f0c <mavlink_frame_char_buffer+0x538>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	799a      	ldrb	r2, [r3, #6]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	891b      	ldrh	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <mavlink_frame_char_buffer+0x52c>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	891b      	ldrh	r3, [r3, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <mavlink_frame_char_buffer+0x546>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	78da      	ldrb	r2, [r3, #3]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01a      	beq.n	8003f56 <mavlink_frame_char_buffer+0x582>
           r_mavlink_status->parse_state = status->parse_state;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	78da      	ldrb	r2, [r3, #3]
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	791a      	ldrb	r2, [r3, #4]
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	795b      	ldrb	r3, [r3, #5]
 8003f34:	3301      	adds	r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	891a      	ldrh	r2, [r3, #8]
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	789b      	ldrb	r3, [r3, #2]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	7b1a      	ldrb	r2, [r3, #12]
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d110      	bne.n	8003f86 <mavlink_frame_char_buffer+0x5b2>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <mavlink_frame_char_buffer+0x5b2>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003f70:	b21a      	sxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	b21b      	sxth	r3, r3
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b21b      	sxth	r3, r3
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop

08003f94 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60ba      	str	r2, [r7, #8]
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff f851 	bl	8003050 <mavlink_get_channel_buffer>
 8003fae:	4604      	mov	r4, r0
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff f838 	bl	8003028 <mavlink_get_channel_status>
 8003fb8:	4601      	mov	r1, r0
 8003fba:	7bba      	ldrb	r2, [r7, #14]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7ff fd06 	bl	80039d4 <mavlink_frame_char_buffer>
 8003fc8:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd90      	pop	{r4, r7, pc}

08003fd2 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b088      	sub	sp, #32
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60ba      	str	r2, [r7, #8]
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8003fe4:	7bb9      	ldrb	r1, [r7, #14]
 8003fe6:	7bf8      	ldrb	r0, [r7, #15]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	f7ff ffd2 	bl	8003f94 <mavlink_frame_char>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d002      	beq.n	8004000 <mavlink_parse_char+0x2e>
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d120      	bne.n	8004042 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff f824 	bl	8003050 <mavlink_get_channel_buffer>
 8004008:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff f80b 	bl	8003028 <mavlink_get_channel_status>
 8004012:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8004014:	6978      	ldr	r0, [r7, #20]
 8004016:	f7ff fb74 	bl	8003702 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2201      	movs	r2, #1
 8004024:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8004026:	7bbb      	ldrb	r3, [r7, #14]
 8004028:	2bfd      	cmp	r3, #253	; 0xfd
 800402a:	d108      	bne.n	800403e <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2202      	movs	r2, #2
 8004030:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2200      	movs	r2, #0
 8004036:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8004038:	69b8      	ldr	r0, [r7, #24]
 800403a:	f7ff fc51 	bl	80038e0 <mavlink_start_checksum>
	    }
	    return 0;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8004042:	7ffb      	ldrb	r3, [r7, #31]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <mavlink_msg_sys_status_decode>:
 *
 * @param msg The message to decode
 * @param sys_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	78db      	ldrb	r3, [r3, #3]
 800405a:	2b2b      	cmp	r3, #43	; 0x2b
 800405c:	bf28      	it	cs
 800405e:	232b      	movcs	r3, #43	; 0x2b
 8004060:	73fb      	strb	r3, [r7, #15]
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 8004062:	222b      	movs	r2, #43	; 0x2b
 8004064:	2100      	movs	r1, #0
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	f011 fc6a 	bl	8015940 <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	330c      	adds	r3, #12
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	4619      	mov	r1, r3
 8004074:	6838      	ldr	r0, [r7, #0]
 8004076:	f011 fc55 	bl	8015924 <memcpy>
#endif
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <mavlink_msg_vfr_hud_pack>:
 * @param climb [m/s] Current climb rate.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b08e      	sub	sp, #56	; 0x38
 8004086:	af02      	add	r7, sp, #8
 8004088:	613a      	str	r2, [r7, #16]
 800408a:	ed87 0a03 	vstr	s0, [r7, #12]
 800408e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004092:	461a      	mov	r2, r3
 8004094:	ed87 1a01 	vstr	s2, [r7, #4]
 8004098:	edc7 1a00 	vstr	s3, [r7]
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]
 80040a0:	460b      	mov	r3, r1
 80040a2:	75bb      	strb	r3, [r7, #22]
 80040a4:	4613      	mov	r3, r2
 80040a6:	82bb      	strh	r3, [r7, #20]
    _mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	61fb      	str	r3, [r7, #28]
    packet.groundspeed = groundspeed;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	623b      	str	r3, [r7, #32]
    packet.alt = alt;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
    packet.climb = climb;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.heading = heading;
 80040b8:	8abb      	ldrh	r3, [r7, #20]
 80040ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
    packet.throttle = throttle;
 80040bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040be:	85fb      	strh	r3, [r7, #46]	; 0x2e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	330c      	adds	r3, #12
 80040c4:	f107 011c 	add.w	r1, r7, #28
 80040c8:	2214      	movs	r2, #20
 80040ca:	4618      	mov	r0, r3
 80040cc:	f011 fc2a 	bl	8015924 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 80040d8:	725a      	strb	r2, [r3, #9]
 80040da:	2200      	movs	r2, #0
 80040dc:	729a      	strb	r2, [r3, #10]
 80040de:	2200      	movs	r2, #0
 80040e0:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_MIN_LEN, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 80040e2:	7dba      	ldrb	r2, [r7, #22]
 80040e4:	7df9      	ldrb	r1, [r7, #23]
 80040e6:	2314      	movs	r3, #20
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	2314      	movs	r3, #20
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2314      	movs	r3, #20
 80040f0:	6938      	ldr	r0, [r7, #16]
 80040f2:	f7ff fae8 	bl	80036c6 <mavlink_finalize_message>
 80040f6:	4603      	mov	r3, r0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <mavlink_msg_altitude_pack>:
 * @param bottom_clearance [m] This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_altitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float altitude_monotonic, float altitude_amsl, float altitude_local, float altitude_relative, float altitude_terrain, float bottom_clearance)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b092      	sub	sp, #72	; 0x48
 8004104:	af02      	add	r7, sp, #8
 8004106:	4603      	mov	r3, r0
 8004108:	61ba      	str	r2, [r7, #24]
 800410a:	ed87 0a05 	vstr	s0, [r7, #20]
 800410e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004112:	ed87 1a03 	vstr	s2, [r7, #12]
 8004116:	edc7 1a02 	vstr	s3, [r7, #8]
 800411a:	ed87 2a01 	vstr	s4, [r7, #4]
 800411e:	edc7 2a00 	vstr	s5, [r7]
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	460b      	mov	r3, r1
 8004126:	77bb      	strb	r3, [r7, #30]
    _mav_put_float(buf, 28, bottom_clearance);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ALTITUDE_LEN);
#else
    mavlink_altitude_t packet;
    packet.time_usec = time_usec;
 8004128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800412c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    packet.altitude_monotonic = altitude_monotonic;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.altitude_amsl = altitude_amsl;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
    packet.altitude_local = altitude_local;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
    packet.altitude_relative = altitude_relative;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
    packet.altitude_terrain = altitude_terrain;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
    packet.bottom_clearance = bottom_clearance;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ALTITUDE_LEN);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	330c      	adds	r3, #12
 800414c:	f107 0120 	add.w	r1, r7, #32
 8004150:	2220      	movs	r2, #32
 8004152:	4618      	mov	r0, r3
 8004154:	f011 fbe6 	bl	8015924 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_ALTITUDE;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2200      	movs	r2, #0
 800415c:	f062 0272 	orn	r2, r2, #114	; 0x72
 8004160:	725a      	strb	r2, [r3, #9]
 8004162:	2200      	movs	r2, #0
 8004164:	729a      	strb	r2, [r3, #10]
 8004166:	2200      	movs	r2, #0
 8004168:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ALTITUDE_MIN_LEN, MAVLINK_MSG_ID_ALTITUDE_LEN, MAVLINK_MSG_ID_ALTITUDE_CRC);
 800416a:	7fba      	ldrb	r2, [r7, #30]
 800416c:	7ff9      	ldrb	r1, [r7, #31]
 800416e:	232f      	movs	r3, #47	; 0x2f
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	2320      	movs	r3, #32
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2320      	movs	r3, #32
 8004178:	69b8      	ldr	r0, [r7, #24]
 800417a:	f7ff faa4 	bl	80036c6 <mavlink_finalize_message>
 800417e:	4603      	mov	r3, r0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3740      	adds	r7, #64	; 0x40
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	603a      	str	r2, [r7, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
 8004196:	460b      	mov	r3, r1
 8004198:	71bb      	strb	r3, [r7, #6]
 800419a:	4613      	mov	r3, r2
 800419c:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 80041a2:	797b      	ldrb	r3, [r7, #5]
 80041a4:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 80041a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041aa:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 80041ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041b0:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 80041b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80041b6:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 80041b8:	2303      	movs	r3, #3
 80041ba:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	f107 010c 	add.w	r1, r7, #12
 80041c4:	2209      	movs	r2, #9
 80041c6:	4618      	mov	r0, r3
 80041c8:	f011 fbac 	bl	8015924 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	725a      	strb	r2, [r3, #9]
 80041d2:	2200      	movs	r2, #0
 80041d4:	729a      	strb	r2, [r3, #10]
 80041d6:	2200      	movs	r2, #0
 80041d8:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80041da:	79ba      	ldrb	r2, [r7, #6]
 80041dc:	79f9      	ldrb	r1, [r7, #7]
 80041de:	2332      	movs	r3, #50	; 0x32
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	2309      	movs	r3, #9
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2309      	movs	r3, #9
 80041e8:	6838      	ldr	r0, [r7, #0]
 80041ea:	f7ff fa6c 	bl	80036c6 <mavlink_finalize_message>
 80041ee:	4603      	mov	r3, r0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 80041f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af04      	add	r7, sp, #16
 80041fe:	60ba      	str	r2, [r7, #8]
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	4603      	mov	r3, r0
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	460b      	mov	r3, r1
 8004208:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	791e      	ldrb	r6, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	795b      	ldrb	r3, [r3, #5]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	7992      	ldrb	r2, [r2, #6]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	6809      	ldr	r1, [r1, #0]
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	79c0      	ldrb	r0, [r0, #7]
 800421e:	7bbd      	ldrb	r5, [r7, #14]
 8004220:	7bfc      	ldrb	r4, [r7, #15]
 8004222:	9003      	str	r0, [sp, #12]
 8004224:	9102      	str	r1, [sp, #8]
 8004226:	9201      	str	r2, [sp, #4]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	4633      	mov	r3, r6
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	4629      	mov	r1, r5
 8004230:	4620      	mov	r0, r4
 8004232:	f7ff ffa9 	bl	8004188 <mavlink_msg_heartbeat_pack>
 8004236:	4603      	mov	r3, r0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004240 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b09      	cmp	r3, #9
 8004250:	bf28      	it	cs
 8004252:	2309      	movcs	r3, #9
 8004254:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8004256:	2209      	movs	r2, #9
 8004258:	2100      	movs	r1, #0
 800425a:	6838      	ldr	r0, [r7, #0]
 800425c:	f011 fb70 	bl	8015940 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	330c      	adds	r3, #12
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	4619      	mov	r1, r3
 8004268:	6838      	ldr	r0, [r7, #0]
 800426a:	f011 fb5b 	bl	8015924 <memcpy>
#endif
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <_ZN14MavlinkControl16mavlink_header_tC1Ev>:
	        uint8_t compat_flags = 0;
	        uint8_t seq = 0;
	        uint8_t sysid = 0;
	        uint8_t compid = 0;
	        uint32_t msgid = 0;
	    } mavlink_header_t;
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	705a      	strb	r2, [r3, #1]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	709a      	strb	r2, [r3, #2]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	70da      	strb	r2, [r3, #3]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	711a      	strb	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	715a      	strb	r2, [r3, #5]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	719a      	strb	r2, [r3, #6]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter>:
MavlinkControl* MavlinkControl::instancePtr = nullptr;


MavlinkControl::MavlinkControl(){};

MavlinkControl::MavlinkControl(UART_HandleTypeDef* huart, Altimeter* altimeter)
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
: _huart_mavlink(huart), _altimeter(altimeter)  {
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	741a      	strb	r2, [r3, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	825a      	strh	r2, [r3, #18]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a29      	ldr	r2, [pc, #164]	; (8004390 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter+0xd4>)
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	609a      	str	r2, [r3, #8]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	220a      	movs	r2, #10
 8004302:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2203      	movs	r2, #3
 8004312:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800431c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f011 fb0c 	bl	8015940 <memset>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800433e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f011 fafb 	bl	8015940 <memset>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9c1 2300 	strd	r2, r3, [r1]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff86 	bl	8004276 <_ZN14MavlinkControl16mavlink_header_tC1Ev>

	  instancePtr = this;
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter+0xd8>)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6013      	str	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(_huart_mavlink, _receiveBuffer_1, MAVLINK_BUFFER_SIZE);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800437a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800437e:	4619      	mov	r1, r3
 8004380:	f00c fd3c 	bl	8010dfc <HAL_UARTEx_ReceiveToIdle_DMA>

		//HAL_UART_Receive_DMA(_huart_mavlink, _receiveBuffer_1, RX_BUFFER_SIZE);


}
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	08018570 	.word	0x08018570
 8004394:	20000860 	.word	0x20000860

08004398 <HAL_UARTEx_RxEventCallback>:
void MavlinkControl::uartRxCallback(UART_HandleTypeDef *huart, uint16_t Size) {
  // Call the overridden function with the instancePtr as the first argument
  HAL_UARTEx_RxEventCallback(instancePtr->_huart_mavlink, Size);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800439e:	af46      	add	r7, sp, #280	; 0x118
 80043a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80043a4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043a8:	6018      	str	r0, [r3, #0]
 80043aa:	460a      	mov	r2, r1
 80043ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80043b0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80043b4:	801a      	strh	r2, [r3, #0]

  // Access the instance of the class using the static member variable
  MavlinkControl* instance = MavlinkControl::instancePtr;
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <HAL_UARTEx_RxEventCallback+0x138>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
//  instance->process_header();
  mavlink_status_t status;
  mavlink_message_t msg;

  while (mavlink_parse_char(MAVLINK_COMM_0, instance->_receiveBuffer_1[instance->_bufferIndex++], &instance->_mavlinkReceived, &instance->_status) == MAVLINK_FRAMING_INCOMPLETE);
 80043be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043c2:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80043c6:	1c59      	adds	r1, r3, #1
 80043c8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80043cc:	f8c2 13f0 	str.w	r1, [r2, #1008]	; 0x3f0
 80043d0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80043d4:	4413      	add	r3, r2
 80043d6:	f893 12d0 	ldrb.w	r1, [r3, #720]	; 0x2d0
 80043da:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043de:	f103 0214 	add.w	r2, r3, #20
 80043e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7ff fdf1 	bl	8003fd2 <mavlink_parse_char>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d000      	beq.n	8004402 <HAL_UARTEx_RxEventCallback+0x6a>
 8004400:	e7dd      	b.n	80043be <HAL_UARTEx_RxEventCallback+0x26>
  instance->_mavlink_received_header.magic = instance->_mavlinkReceived.magic;
 8004402:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004406:	7d9a      	ldrb	r2, [r3, #22]
 8004408:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800440c:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
  instance->_mavlink_received_header.sysid = instance->_mavlinkReceived.sysid;
 8004410:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004414:	7eda      	ldrb	r2, [r3, #27]
 8004416:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800441a:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
  instance->_mavlink_received_header.compid = instance->_mavlinkReceived.compid;
 800441e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004422:	7f1a      	ldrb	r2, [r3, #28]
 8004424:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004428:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
  instance->_mavlink_received_header.seq = instance->_mavlinkReceived.seq;
 800442c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004430:	7e9a      	ldrb	r2, [r3, #26]
 8004432:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004436:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
  instance->_mavlink_received_header.compat_flags = instance->_mavlinkReceived.compat_flags;
 800443a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800443e:	7e5a      	ldrb	r2, [r3, #25]
 8004440:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004444:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
  instance->_mavlink_received_header.incompat_flags = instance->_mavlinkReceived.incompat_flags;
 8004448:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800444c:	7e1a      	ldrb	r2, [r3, #24]
 800444e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004452:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
  instance->_mavlink_received_header.msgid = instance->_mavlinkReceived.msgid;
 8004456:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004460:	461a      	mov	r2, r3
 8004462:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004466:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
  instance->_mavlink_received_header.len = instance->_mavlinkReceived.len;
 800446a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800446e:	7dda      	ldrb	r2, [r3, #23]
 8004470:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004474:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519

  instance->readFlightTime(instance->_mavlinkReceived);
 8004478:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 800447c:	4668      	mov	r0, sp
 800447e:	f104 0320 	add.w	r3, r4, #32
 8004482:	f240 1217 	movw	r2, #279	; 0x117
 8004486:	4619      	mov	r1, r3
 8004488:	f011 fa4c 	bl	8015924 <memcpy>
 800448c:	f104 0314 	add.w	r3, r4, #20
 8004490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004492:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8004496:	f000 f8af 	bl	80045f8 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message>
  instance->decodeHeartbeat(instance->_mavlinkReceived);
 800449a:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 800449e:	4668      	mov	r0, sp
 80044a0:	f104 0320 	add.w	r3, r4, #32
 80044a4:	f240 1217 	movw	r2, #279	; 0x117
 80044a8:	4619      	mov	r1, r3
 80044aa:	f011 fa3b 	bl	8015924 <memcpy>
 80044ae:	f104 0314 	add.w	r3, r4, #20
 80044b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b4:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80044b8:	f000 f880 	bl	80045bc <_ZN14MavlinkControl15decodeHeartbeatE17__mavlink_message>



  instance->_bufferIndex = 0;
 80044bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0

}
 80044c6:	bf00      	nop
 80044c8:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd90      	pop	{r4, r7, pc}
 80044d0:	20000860 	.word	0x20000860

080044d4 <_ZN14MavlinkControl9update_TXEv>:





void MavlinkControl::update_TX(void){
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

	this->sendAltitude();
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8b9 	bl	8004654 <_ZN14MavlinkControl12sendAltitudeEv>

	if(HAL_GetTick() % 500 == 0){
 80044e2:	f003 f8f7 	bl	80076d4 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <_ZN14MavlinkControl9update_TXEv+0x44>)
 80044ea:	fba3 1302 	umull	r1, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <_ZN14MavlinkControl9update_TXEv+0x3a>

		this->heartbeat();
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f807 	bl	800451c <_ZN14MavlinkControl9heartbeatEv>


	}

}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	10624dd3 	.word	0x10624dd3

0800451c <_ZN14MavlinkControl9heartbeatEv>:
	return _mavlink_received_header;

}


void MavlinkControl::heartbeat(void){
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af04      	add	r7, sp, #16
 8004522:	6078      	str	r0, [r7, #4]


	_bufferLength = mavlink_msg_heartbeat_encode(
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 02a0 	ldrb.w	r0, [r3, #672]	; 0x2a0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 12a1 	ldrb.w	r1, [r3, #673]	; 0x2a1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f203 1237 	addw	r2, r3, #311	; 0x137
			_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend,
			&_mavlink_heartbeat);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
	_bufferLength = mavlink_msg_heartbeat_encode(
 800453c:	f7ff fe5c 	bl	80041f8 <mavlink_msg_heartbeat_encode>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	825a      	strh	r2, [r3, #18]
	mavlink_msg_heartbeat_pack(_mavlink_system.sysid, _mavlink_system.compid,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 02a0 	ldrb.w	r0, [r3, #672]	; 0x2a0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 12a1 	ldrb.w	r1, [r3, #673]	; 0x2a1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f203 1237 	addw	r2, r3, #311	; 0x137
 800455a:	2303      	movs	r3, #3
 800455c:	9303      	str	r3, [sp, #12]
 800455e:	2300      	movs	r3, #0
 8004560:	9302      	str	r3, [sp, #8]
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	230a      	movs	r3, #10
 800456c:	f7ff fe0c 	bl	8004188 <mavlink_msg_heartbeat_pack>
			&_mavlinkSend, MAV_TYPE_GROUND_ROVER, MAV_AUTOPILOT_GENERIC,
			MAV_MODE_FLAG_SAFETY_ARMED, 0, MAV_STATE_STANDBY);
	mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 727d 	add.w	r2, r3, #1012	; 0x3f4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f203 1337 	addw	r3, r3, #311	; 0x137
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7ff f8cf 	bl	8003722 <mavlink_msg_to_send_buffer>

	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _bufferLength, 100) != HAL_OK){
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8a5a      	ldrh	r2, [r3, #18]
 8004592:	2364      	movs	r3, #100	; 0x64
 8004594:	f00b f857 	bl	800f646 <HAL_UART_Transmit>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <_ZN14MavlinkControl9heartbeatEv+0x92>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 80045a8:	4803      	ldr	r0, [pc, #12]	; (80045b8 <_ZN14MavlinkControl9heartbeatEv+0x9c>)
 80045aa:	f011 ffa1 	bl	80164f0 <puts>
	}

}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	08018574 	.word	0x08018574

080045bc <_ZN14MavlinkControl15decodeHeartbeatE17__mavlink_message>:
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
	}

}

void MavlinkControl::decodeHeartbeat(mavlink_message_t receivedMessage){
 80045bc:	b084      	sub	sp, #16
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	f107 0014 	add.w	r0, r7, #20
 80045ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(receivedMessage.msgid == MAVLINK_MSG_ID_HEARTBEAT){
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d108      	bne.n	80045ea <_ZN14MavlinkControl15decodeHeartbeatE17__mavlink_message+0x2e>

		mavlink_msg_heartbeat_decode(&receivedMessage, &_received_heartbeat);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f203 5224 	addw	r2, r3, #1316	; 0x524
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fe2b 	bl	8004240 <mavlink_msg_heartbeat_decode>

	}


}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045f4:	b004      	add	sp, #16
 80045f6:	4770      	bx	lr

080045f8 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message>:

void MavlinkControl::readFlightTime(mavlink_message_t receivedMessage) {
 80045f8:	b084      	sub	sp, #16
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08e      	sub	sp, #56	; 0x38
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004606:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if(receivedMessage.msgid == MAVLINK_MSG_ID_SYS_STATUS){
 800460a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004610:	2b01      	cmp	r3, #1
 8004612:	d115      	bne.n	8004640 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message+0x48>
		printf("inside read flight time function \r\n");
 8004614:	480e      	ldr	r0, [pc, #56]	; (8004650 <_ZN14MavlinkControl14readFlightTimeE17__mavlink_message+0x58>)
 8004616:	f011 ff6b 	bl	80164f0 <puts>
		mavlink_sys_status_t status;
		mavlink_msg_sys_status_decode(&receivedMessage,&status);
 800461a:	f107 020c 	add.w	r2, r7, #12
 800461e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fd11 	bl	800404c <mavlink_msg_sys_status_decode>
        _flight_time = status.onboard_control_sensors_present;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	f7fb ff91 	bl	8000554 <__aeabi_ui2d>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	f501 61a2 	add.w	r1, r1, #1296	; 0x510
 800463c:	e9c1 2300 	strd	r2, r3, [r1]

	}



}
 8004640:	bf00      	nop
 8004642:	3738      	adds	r7, #56	; 0x38
 8004644:	46bd      	mov	sp, r7
 8004646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800464a:	b004      	add	sp, #16
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	0801859c 	.word	0x0801859c

08004654 <_ZN14MavlinkControl12sendAltitudeEv>:


void MavlinkControl::sendAltitude(void){
 8004654:	b590      	push	{r4, r7, lr}
 8004656:	b087      	sub	sp, #28
 8004658:	af02      	add	r7, sp, #8
 800465a:	6078      	str	r0, [r7, #4]
	// mavlink_msg_vfr_hud_pack function below repacks the value to a hud message. These can be configured on the QgroundControl app.
	//The hud message can contain values such as ground speed, altitude, etc... autocomplete will give you an overview
	//of the different values that can be sent. The values itself are hardcoded into the firmware of the Herelink controller though


	float altitude = _altimeter->get_altitude();
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 ff84 	bl	800556e <_ZN9Altimeter12get_altitudeEv>
 8004666:	ed87 0a03 	vstr	s0, [r7, #12]
	//Function below repacks the value to a hud message. These can be configured on the QgroundControl app.
	mavlink_msg_vfr_hud_pack(_mavlink_system.sysid, _mavlink_system.compid,&_mavlinkSend, altitude , 0.0f,0,0,0,0);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 02a0 	ldrb.w	r0, [r3, #672]	; 0x2a0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 12a1 	ldrb.w	r1, [r3, #673]	; 0x2a1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f203 1237 	addw	r2, r3, #311	; 0x137
 800467c:	2300      	movs	r3, #0
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	eddf 1a28 	vldr	s3, [pc, #160]	; 8004724 <_ZN14MavlinkControl12sendAltitudeEv+0xd0>
 8004684:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8004724 <_ZN14MavlinkControl12sendAltitudeEv+0xd0>
 8004688:	2300      	movs	r3, #0
 800468a:	eddf 0a26 	vldr	s1, [pc, #152]	; 8004724 <_ZN14MavlinkControl12sendAltitudeEv+0xd0>
 800468e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004692:	f7ff fcf6 	bl	8004082 <mavlink_msg_vfr_hud_pack>
	mavlink_msg_altitude_pack(_mavlink_system.sysid, _mavlink_system.compid, &_mavlinkSend, 0 , altitude, altitude, altitude, altitude, 0, 0);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 02a0 	ldrb.w	r0, [r3, #672]	; 0x2a0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 12a1 	ldrb.w	r1, [r3, #673]	; 0x2a1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f203 1437 	addw	r4, r3, #311	; 0x137
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9cd 2300 	strd	r2, r3, [sp]
 80046b4:	eddf 2a1b 	vldr	s5, [pc, #108]	; 8004724 <_ZN14MavlinkControl12sendAltitudeEv+0xd0>
 80046b8:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 8004724 <_ZN14MavlinkControl12sendAltitudeEv+0xd0>
 80046bc:	edd7 1a03 	vldr	s3, [r7, #12]
 80046c0:	ed97 1a03 	vldr	s2, [r7, #12]
 80046c4:	edd7 0a03 	vldr	s1, [r7, #12]
 80046c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80046cc:	4622      	mov	r2, r4
 80046ce:	f7ff fd17 	bl	8004100 <mavlink_msg_altitude_pack>
	_TX_bufferLength = mavlink_msg_to_send_buffer(_bufferPackedforUart, &_mavlinkSend);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 727d 	add.w	r2, r3, #1012	; 0x3f4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f203 1337 	addw	r3, r3, #311	; 0x137
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7ff f81e 	bl	8003722 <mavlink_msg_to_send_buffer>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	if( HAL_UART_Transmit(_huart_mavlink, _bufferPackedforUart, _TX_bufferLength, 100) != HAL_OK){
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8b3 250c 	ldrh.w	r2, [r3, #1292]	; 0x50c
 8004700:	2364      	movs	r3, #100	; 0x64
 8004702:	f00a ffa0 	bl	800f646 <HAL_UART_Transmit>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <_ZN14MavlinkControl12sendAltitudeEv+0xc8>
		printf("NOT ABLE TO TRANSMIT MAVLINK PACKAGE \r\n");
 8004716:	4804      	ldr	r0, [pc, #16]	; (8004728 <_ZN14MavlinkControl12sendAltitudeEv+0xd4>)
 8004718:	f011 feea 	bl	80164f0 <puts>
	}

}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	00000000 	.word	0x00000000
 8004728:	08018574 	.word	0x08018574

0800472c <_ZN4SBUSC1EP20__UART_HandleTypeDef>:
#include "./SBUS.h"

SBUS::SBUS(UART_HandleTypeDef *huart_sbus){
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	611a      	str	r2, [r3, #16]
 8004746:	615a      	str	r2, [r3, #20]
 8004748:	761a      	strb	r2, [r3, #24]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	331e      	adds	r3, #30
 800474e:	2220      	movs	r2, #32
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f011 f8f4 	bl	8015940 <memset>

	this->_huart_sbus = huart_sbus;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	601a      	str	r2, [r3, #0]





}
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <_ZN4SBUS6updateEv>:

void SBUS::update(void){
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]



	HAL_UARTEx_ReceiveToIdle_DMA(this->_huart_sbus, this->_sbus_buffer, SBUS_PACKET_SIZE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	2219      	movs	r2, #25
 800477a:	4619      	mov	r1, r3
 800477c:	f00c fb3e 	bl	8010dfc <HAL_UARTEx_ReceiveToIdle_DMA>
	this->readSBUS();
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f804 	bl	800478e <_ZN4SBUS8readSBUSEv>




}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <_ZN4SBUS8readSBUSEv>:


bool SBUS::readSBUS(void){
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]

		//als iemand er ooit in slaagt om dit in een mooie for-loop of iets dergelijks te gieten, chapeau, ik vind hem niet :').


		//RIGHT JOYSTICK X
		uint16_t MSB =_sbus_buffer[1];
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	795b      	ldrb	r3, [r3, #5]
 800479a:	81fb      	strh	r3, [r7, #14]
		uint16_t LSB = _sbus_buffer[2] << 8;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	799b      	ldrb	r3, [r3, #6]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	81bb      	strh	r3, [r7, #12]
		uint16_t thirdByte;
		this->_channels[0] = (MSB | LSB) & 0x07FF;
 80047a6:	89fa      	ldrh	r2, [r7, #14]
 80047a8:	89bb      	ldrh	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	83da      	strh	r2, [r3, #30]

		//RIGHT JOYSTICK Y
		MSB = _sbus_buffer[2] >> 3;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	799b      	ldrb	r3, [r3, #6]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[3] << 5;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	79db      	ldrb	r3, [r3, #7]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	015b      	lsls	r3, r3, #5
 80047ca:	81bb      	strh	r3, [r7, #12]
		this->_channels[1] =(MSB | LSB ) & 0x07FF;
 80047cc:	89fa      	ldrh	r2, [r7, #14]
 80047ce:	89bb      	ldrh	r3, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	841a      	strh	r2, [r3, #32]

		//LEFT JOYSTICK X
		MSB = _sbus_buffer[3] >> 6;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	79db      	ldrb	r3, [r3, #7]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[4] << 2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7a1b      	ldrb	r3, [r3, #8]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[5] << 10;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7a5b      	ldrb	r3, [r3, #9]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	029b      	lsls	r3, r3, #10
 80047fa:	817b      	strh	r3, [r7, #10]
		this->_channels[2] = (MSB | LSB | thirdByte) & 0x07FF;
 80047fc:	89fa      	ldrh	r2, [r7, #14]
 80047fe:	89bb      	ldrh	r3, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	b29a      	uxth	r2, r3
 8004804:	897b      	ldrh	r3, [r7, #10]
 8004806:	4313      	orrs	r3, r2
 8004808:	b29b      	uxth	r3, r3
 800480a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	845a      	strh	r2, [r3, #34]	; 0x22

		//LEFT JOYSTICK Y
		MSB = _sbus_buffer[5] >> 1;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7a5b      	ldrb	r3, [r3, #9]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[6] << 7;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	7a9b      	ldrb	r3, [r3, #10]
 8004822:	b29b      	uxth	r3, r3
 8004824:	01db      	lsls	r3, r3, #7
 8004826:	81bb      	strh	r3, [r7, #12]
		this->_channels[3] = (MSB | LSB) & 0x07FF;
 8004828:	89fa      	ldrh	r2, [r7, #14]
 800482a:	89bb      	ldrh	r3, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	b29b      	uxth	r3, r3
 8004830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	849a      	strh	r2, [r3, #36]	; 0x24

		//JOGWHEEL
		MSB = _sbus_buffer[6] >> 4;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7a9b      	ldrb	r3, [r3, #10]
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	b2db      	uxtb	r3, r3
 8004842:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[7] << 4;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7adb      	ldrb	r3, [r3, #11]
 8004848:	b29b      	uxth	r3, r3
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	81bb      	strh	r3, [r7, #12]
		this->_channels[4] = (MSB | LSB) & 0x07FF;
 800484e:	89fa      	ldrh	r2, [r7, #14]
 8004850:	89bb      	ldrh	r3, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	b29b      	uxth	r3, r3
 8004856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	84da      	strh	r2, [r3, #38]	; 0x26

		//BUTTON A
		MSB = _sbus_buffer[7] >> 7;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	7adb      	ldrb	r3, [r3, #11]
 8004864:	09db      	lsrs	r3, r3, #7
 8004866:	b2db      	uxtb	r3, r3
 8004868:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[8] << 1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7b1b      	ldrb	r3, [r3, #12]
 800486e:	b29b      	uxth	r3, r3
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[9] << 9;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	7b5b      	ldrb	r3, [r3, #13]
 8004878:	b29b      	uxth	r3, r3
 800487a:	025b      	lsls	r3, r3, #9
 800487c:	817b      	strh	r3, [r7, #10]
		this->_channels[5] = (MSB | LSB | thirdByte) & 0x07FF;
 800487e:	89fa      	ldrh	r2, [r7, #14]
 8004880:	89bb      	ldrh	r3, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	4313      	orrs	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28

		//BUTTON B
		MSB = _sbus_buffer[9] >> 2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7b5b      	ldrb	r3, [r3, #13]
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	b2db      	uxtb	r3, r3
 800489e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[10] << 6;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7b9b      	ldrb	r3, [r3, #14]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	019b      	lsls	r3, r3, #6
 80048a8:	81bb      	strh	r3, [r7, #12]
		this->_channels[6] = (MSB | LSB) & 0x07FF;
 80048aa:	89fa      	ldrh	r2, [r7, #14]
 80048ac:	89bb      	ldrh	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a

		//BUTTON C
		MSB = _sbus_buffer[10] >> 5;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7b9b      	ldrb	r3, [r3, #14]
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[11] << 3;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	7bdb      	ldrb	r3, [r3, #15]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	81bb      	strh	r3, [r7, #12]
		this->_channels[7] = (MSB | LSB) & 0x07FF;
 80048d0:	89fa      	ldrh	r2, [r7, #14]
 80048d2:	89bb      	ldrh	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	859a      	strh	r2, [r3, #44]	; 0x2c

		//BUTTON D
		MSB = _sbus_buffer[12];
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7c1b      	ldrb	r3, [r3, #16]
 80048e6:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[13] << 8;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	7c5b      	ldrb	r3, [r3, #17]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	81bb      	strh	r3, [r7, #12]
		this->_channels[8] = (MSB | LSB) & 0x07FF;
 80048f2:	89fa      	ldrh	r2, [r7, #14]
 80048f4:	89bb      	ldrh	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	85da      	strh	r2, [r3, #46]	; 0x2e

		//BUTTON HOME
		MSB = _sbus_buffer[13] >> 3;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	7c5b      	ldrb	r3, [r3, #17]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[14] << 5;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	7c9b      	ldrb	r3, [r3, #18]
 8004912:	b29b      	uxth	r3, r3
 8004914:	015b      	lsls	r3, r3, #5
 8004916:	81bb      	strh	r3, [r7, #12]
		this->_channels[9] = (MSB | LSB) & 0x07FF;
 8004918:	89fa      	ldrh	r2, [r7, #14]
 800491a:	89bb      	ldrh	r3, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	b29b      	uxth	r3, r3
 8004920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	861a      	strh	r2, [r3, #48]	; 0x30

		MSB = _sbus_buffer[14] >> 6;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7c9b      	ldrb	r3, [r3, #18]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	b2db      	uxtb	r3, r3
 8004932:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[15] << 2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7cdb      	ldrb	r3, [r3, #19]
 8004938:	b29b      	uxth	r3, r3
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[16] << 10;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	7d1b      	ldrb	r3, [r3, #20]
 8004942:	b29b      	uxth	r3, r3
 8004944:	029b      	lsls	r3, r3, #10
 8004946:	817b      	strh	r3, [r7, #10]
		this->_channels[10] = (MSB | LSB | thirdByte) & 0x07FF;
 8004948:	89fa      	ldrh	r2, [r7, #14]
 800494a:	89bb      	ldrh	r3, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	b29a      	uxth	r2, r3
 8004950:	897b      	ldrh	r3, [r7, #10]
 8004952:	4313      	orrs	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	865a      	strh	r2, [r3, #50]	; 0x32

		MSB = _sbus_buffer[16] >> 1;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	7d1b      	ldrb	r3, [r3, #20]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[17] << 7;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7d5b      	ldrb	r3, [r3, #21]
 800496e:	b29b      	uxth	r3, r3
 8004970:	01db      	lsls	r3, r3, #7
 8004972:	81bb      	strh	r3, [r7, #12]
		this->_channels[11] = (MSB | LSB) & 0x07FF;
 8004974:	89fa      	ldrh	r2, [r7, #14]
 8004976:	89bb      	ldrh	r3, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	869a      	strh	r2, [r3, #52]	; 0x34

		MSB = _sbus_buffer[17] >> 4;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7d5b      	ldrb	r3, [r3, #21]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	b2db      	uxtb	r3, r3
 800498e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[18] << 4;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7d9b      	ldrb	r3, [r3, #22]
 8004994:	b29b      	uxth	r3, r3
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	81bb      	strh	r3, [r7, #12]
		this->_channels[12] = (MSB | LSB) & 0x07FF;
 800499a:	89fa      	ldrh	r2, [r7, #14]
 800499c:	89bb      	ldrh	r3, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	86da      	strh	r2, [r3, #54]	; 0x36

		MSB = _sbus_buffer[18] >> 7;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7d9b      	ldrb	r3, [r3, #22]
 80049b0:	09db      	lsrs	r3, r3, #7
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[19] << 1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7ddb      	ldrb	r3, [r3, #23]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	81bb      	strh	r3, [r7, #12]
		thirdByte = _sbus_buffer[20] >> 9;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	7e1b      	ldrb	r3, [r3, #24]
 80049c4:	125b      	asrs	r3, r3, #9
 80049c6:	817b      	strh	r3, [r7, #10]
		this->_channels[13] = (MSB | LSB | thirdByte) & 0x07FF;
 80049c8:	89fa      	ldrh	r2, [r7, #14]
 80049ca:	89bb      	ldrh	r3, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	897b      	ldrh	r3, [r7, #10]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	871a      	strh	r2, [r3, #56]	; 0x38

		MSB = _sbus_buffer[20] >> 2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7e1b      	ldrb	r3, [r3, #24]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[21] << 6;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	7e5b      	ldrb	r3, [r3, #25]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	019b      	lsls	r3, r3, #6
 80049f2:	81bb      	strh	r3, [r7, #12]
		this->_channels[14] = (MSB| LSB)  & 0x07FF;
 80049f4:	89fa      	ldrh	r2, [r7, #14]
 80049f6:	89bb      	ldrh	r3, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	875a      	strh	r2, [r3, #58]	; 0x3a

		MSB = _sbus_buffer[21] >> 5;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7e5b      	ldrb	r3, [r3, #25]
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	81fb      	strh	r3, [r7, #14]
		LSB = _sbus_buffer[22] << 3;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7e9b      	ldrb	r3, [r3, #26]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	81bb      	strh	r3, [r7, #12]
		this->_channels[15] = (MSB| LSB)  & 0x07FF;
 8004a1a:	89fa      	ldrh	r2, [r7, #14]
 8004a1c:	89bb      	ldrh	r3, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	879a      	strh	r2, [r3, #60]	; 0x3c

		_channels[16] = _sbus_buffer[23] & 0x001 ? 2047 : 0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7edb      	ldrb	r3, [r3, #27]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <_ZN4SBUS8readSBUSEv+0x2b0>
 8004a38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004a3c:	e000      	b.n	8004a40 <_ZN4SBUS8readSBUSEv+0x2b2>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	87da      	strh	r2, [r3, #62]	; 0x3e



		return 1;
 8004a44:	2301      	movs	r3, #1


}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <_ZN4SBUS8getLeftYEv>:

//Normalizing joystick values between -100/100

// normalized value = (raw_value - center value) * 100 / (max_value - center_value)

float SBUS::getLeftY(void){
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[2];
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004a60:	81fb      	strh	r3, [r7, #14]
	int16_t center_value = 1024;
 8004a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a66:	81bb      	strh	r3, [r7, #12]
	int16_t max_up = 364;
 8004a68:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8004a6c:	817b      	strh	r3, [r7, #10]
	int16_t max_down = 1684;
 8004a6e:	f240 6394 	movw	r3, #1684	; 0x694
 8004a72:	813b      	strh	r3, [r7, #8]

	if(raw_value < center_value){
 8004a74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	da14      	bge.n	8004aaa <_ZN4SBUS8getLeftYEv+0x56>

		return ((raw_value - center_value) * 1000) / (max_up - center_value);
 8004a80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a8e:	fb03 f202 	mul.w	r2, r3, r2
 8004a92:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004a96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a9a:	1acb      	subs	r3, r1, r3
 8004a9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa8:	e01b      	b.n	8004ae2 <_ZN4SBUS8getLeftYEv+0x8e>

	}else if(raw_value > center_value){
 8004aaa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004aae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	dd13      	ble.n	8004ade <_ZN4SBUS8getLeftYEv+0x8a>

		return ((raw_value - center_value) * -1000) / (max_down - center_value);
 8004ab6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004aba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	4a0b      	ldr	r2, [pc, #44]	; (8004af0 <_ZN4SBUS8getLeftYEv+0x9c>)
 8004ac2:	fb03 f202 	mul.w	r2, r3, r2
 8004ac6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8004aca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ace:	1acb      	subs	r3, r1, r3
 8004ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004adc:	e001      	b.n	8004ae2 <_ZN4SBUS8getLeftYEv+0x8e>

	}else{

	    return 0.0f;
 8004ade:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004af4 <_ZN4SBUS8getLeftYEv+0xa0>

	}

}
 8004ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	fffffc18 	.word	0xfffffc18
 8004af4:	00000000 	.word	0x00000000

08004af8 <_ZN4SBUS9getRightYEv>:

  }
}


float SBUS::getRightY(void){
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[1];
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8c1b      	ldrh	r3, [r3, #32]
 8004b04:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8004b06:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8004b0a:	613b      	str	r3, [r7, #16]
  float max_up = 364.0f;
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <_ZN4SBUS9getRightYEv+0xc0>)
 8004b0e:	60fb      	str	r3, [r7, #12]
  float max_down = 1684.0f;
 8004b10:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <_ZN4SBUS9getRightYEv+0xc4>)
 8004b12:	60bb      	str	r3, [r7, #8]

  if (raw_value < center_value) {
 8004b14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b20:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	dd16      	ble.n	8004b5c <_ZN4SBUS9getRightYEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_down);
 8004b2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b42:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004bc0 <_ZN4SBUS9getRightYEv+0xc8>
 8004b46:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004b4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5a:	e025      	b.n	8004ba8 <_ZN4SBUS9getRightYEv+0xb0>

  } else if (raw_value > center_value) {
 8004b5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b68:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	d516      	bpl.n	8004ba4 <_ZN4SBUS9getRightYEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_up - center_value);
 8004b76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004bc0 <_ZN4SBUS9getRightYEv+0xc8>
 8004b8e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004b92:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba2:	e001      	b.n	8004ba8 <_ZN4SBUS9getRightYEv+0xb0>

  } else {

	  return 0.0f;
 8004ba4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004bc4 <_ZN4SBUS9getRightYEv+0xcc>

  }
}
 8004ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	43b60000 	.word	0x43b60000
 8004bbc:	44d28000 	.word	0x44d28000
 8004bc0:	447a0000 	.word	0x447a0000
 8004bc4:	00000000 	.word	0x00000000

08004bc8 <_ZN4SBUS9getRightXEv>:


float SBUS::getRightX(void){
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

  int16_t raw_value = _channels[0];
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8bdb      	ldrh	r3, [r3, #30]
 8004bd4:	82fb      	strh	r3, [r7, #22]
  float center_value = 1024.0f;
 8004bd6:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8004bda:	613b      	str	r3, [r7, #16]
  float max_left = 364.0f;
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	; (8004c88 <_ZN4SBUS9getRightXEv+0xc0>)
 8004bde:	60fb      	str	r3, [r7, #12]
  float max_right = 1684.0f;
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <_ZN4SBUS9getRightXEv+0xc4>)
 8004be2:	60bb      	str	r3, [r7, #8]


  if (raw_value < center_value) {
 8004be4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	dd16      	ble.n	8004c2c <_ZN4SBUS9getRightXEv+0x64>

    return ((raw_value - center_value) * 1000.0f) / (center_value - max_left);
 8004bfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c12:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004c90 <_ZN4SBUS9getRightXEv+0xc8>
 8004c16:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004c1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c2a:	e025      	b.n	8004c78 <_ZN4SBUS9getRightXEv+0xb0>

  } else if (raw_value > center_value) {
 8004c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c38:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c44:	d516      	bpl.n	8004c74 <_ZN4SBUS9getRightXEv+0xac>

    return ((raw_value - center_value) * 1000.0f) / (max_right - center_value);
 8004c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c5a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004c90 <_ZN4SBUS9getRightXEv+0xc8>
 8004c5e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c66:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c72:	e001      	b.n	8004c78 <_ZN4SBUS9getRightXEv+0xb0>

  } else {

    return 0.0f;
 8004c74:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004c94 <_ZN4SBUS9getRightXEv+0xcc>

  }

}
 8004c78:	eeb0 0a67 	vmov.f32	s0, s15
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	43b60000 	.word	0x43b60000
 8004c8c:	44d28000 	.word	0x44d28000
 8004c90:	447a0000 	.word	0x447a0000
 8004c94:	00000000 	.word	0x00000000

08004c98 <_ZN4SBUS11getJogWheelEv>:


float SBUS::getJogWheel(void){
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

	int16_t raw_value = _channels[4];
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca4:	82fb      	strh	r3, [r7, #22]

	float center_value = 1024.0f;
 8004ca6:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8004caa:	613b      	str	r3, [r7, #16]
	float max_left = 1684.0f;
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <_ZN4SBUS11getJogWheelEv+0xc0>)
 8004cae:	60fb      	str	r3, [r7, #12]
	float max_right = 364.0f;
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <_ZN4SBUS11getJogWheelEv+0xc4>)
 8004cb2:	60bb      	str	r3, [r7, #8]

	if(raw_value < center_value){
 8004cb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ccc:	dd16      	ble.n	8004cfc <_ZN4SBUS11getJogWheelEv+0x64>

		return ((raw_value - center_value) * 1000.0f /(center_value - max_left));
 8004cce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cda:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ce2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d60 <_ZN4SBUS11getJogWheelEv+0xc8>
 8004ce6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004cea:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cfa:	e025      	b.n	8004d48 <_ZN4SBUS11getJogWheelEv+0xb0>

	}else if (raw_value > center_value){
 8004cfc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d08:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	d516      	bpl.n	8004d44 <_ZN4SBUS11getJogWheelEv+0xac>

		return ((raw_value - center_value) * 1000.0f / (max_right - center_value));
 8004d16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d2a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004d60 <_ZN4SBUS11getJogWheelEv+0xc8>
 8004d2e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004d32:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d36:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d42:	e001      	b.n	8004d48 <_ZN4SBUS11getJogWheelEv+0xb0>
	}else {

		return 0.0f;
 8004d44:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004d64 <_ZN4SBUS11getJogWheelEv+0xcc>
	}


}
 8004d48:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	44d28000 	.word	0x44d28000
 8004d5c:	43b60000 	.word	0x43b60000
 8004d60:	447a0000 	.word	0x447a0000
 8004d64:	00000000 	.word	0x00000000

08004d68 <_ZN4SBUS8A_buttonEv>:

bool SBUS::A_button(void){
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	//state machine to make sure the button presses debounce correctly (I know it's overkill but hey...).

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[5] > 500);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d78:	bf8c      	ite	hi
 8004d7a:	2301      	movhi	r3, #1
 8004d7c:	2300      	movls	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8004d80:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <_ZN4SBUS8A_buttonEv+0xac>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d02d      	beq.n	8004de4 <_ZN4SBUS8A_buttonEv+0x7c>
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	dc3b      	bgt.n	8004e04 <_ZN4SBUS8A_buttonEv+0x9c>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <_ZN4SBUS8A_buttonEv+0x2e>
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d00a      	beq.n	8004daa <_ZN4SBUS8A_buttonEv+0x42>
 8004d94:	e036      	b.n	8004e04 <_ZN4SBUS8A_buttonEv+0x9c>

	    case 0:
	      if (button_pressed) {
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02e      	beq.n	8004dfa <_ZN4SBUS8A_buttonEv+0x92>
	        debounce_state = 1;
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <_ZN4SBUS8A_buttonEv+0xac>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <_ZN4SBUS8A_buttonEv+0xb0>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8004da8:	e027      	b.n	8004dfa <_ZN4SBUS8A_buttonEv+0x92>

	      // button pressed, waiting for debounce
	    case 1:
	      if (!button_pressed) {
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	f083 0301 	eor.w	r3, r3, #1
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <_ZN4SBUS8A_buttonEv+0x56>
	        debounce_state = 0;
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <_ZN4SBUS8A_buttonEv+0xac>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8004dbc:	e01f      	b.n	8004dfe <_ZN4SBUS8A_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <_ZN4SBUS8A_buttonEv+0xb0>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <_ZN4SBUS8A_buttonEv+0xb0>)
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <_ZN4SBUS8A_buttonEv+0xb0>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b27      	cmp	r3, #39	; 0x27
 8004dd0:	bf8c      	ite	hi
 8004dd2:	2301      	movhi	r3, #1
 8004dd4:	2300      	movls	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <_ZN4SBUS8A_buttonEv+0x96>
	        debounce_state = 2;
 8004ddc:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <_ZN4SBUS8A_buttonEv+0xac>)
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]
	      break;
 8004de2:	e00c      	b.n	8004dfe <_ZN4SBUS8A_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	f083 0301 	eor.w	r3, r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <_ZN4SBUS8A_buttonEv+0x9a>
	        debounce_state = 0;
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <_ZN4SBUS8A_buttonEv+0xac>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
	        return true;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e005      	b.n	8004e06 <_ZN4SBUS8A_buttonEv+0x9e>
	      break;
 8004dfa:	bf00      	nop
 8004dfc:	e002      	b.n	8004e04 <_ZN4SBUS8A_buttonEv+0x9c>
	      break;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <_ZN4SBUS8A_buttonEv+0x9c>
	      }
	      break;
 8004e02:	bf00      	nop
	  }

	  return false;
 8004e04:	2300      	movs	r3, #0

}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000864 	.word	0x20000864
 8004e18:	20000865 	.word	0x20000865

08004e1c <_ZN4SBUS8B_buttonEv>:

bool SBUS::B_button(void){
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]


	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[6] > 1000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e2c:	bf8c      	ite	hi
 8004e2e:	2301      	movhi	r3, #1
 8004e30:	2300      	movls	r3, #0
 8004e32:	73fb      	strb	r3, [r7, #15]
			  );

	  switch (debounce_state) {
 8004e34:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <_ZN4SBUS8B_buttonEv+0xac>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d02d      	beq.n	8004e98 <_ZN4SBUS8B_buttonEv+0x7c>
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	dc3b      	bgt.n	8004eb8 <_ZN4SBUS8B_buttonEv+0x9c>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <_ZN4SBUS8B_buttonEv+0x2e>
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d00a      	beq.n	8004e5e <_ZN4SBUS8B_buttonEv+0x42>
 8004e48:	e036      	b.n	8004eb8 <_ZN4SBUS8B_buttonEv+0x9c>
	    case 0:  // button released
	      if (button_pressed) {
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02e      	beq.n	8004eae <_ZN4SBUS8B_buttonEv+0x92>
	        debounce_state = 1;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <_ZN4SBUS8B_buttonEv+0xac>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
	        debounce_counter = 0;
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <_ZN4SBUS8B_buttonEv+0xb0>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8004e5c:	e027      	b.n	8004eae <_ZN4SBUS8B_buttonEv+0x92>

	    case 1:  // button pressed, waiting for debounce
	      if (!button_pressed) {
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	f083 0301 	eor.w	r3, r3, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <_ZN4SBUS8B_buttonEv+0x56>
	        debounce_state = 0;
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <_ZN4SBUS8B_buttonEv+0xac>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
	      } else if (++debounce_counter >= _debounceTime) {
	        debounce_state = 2;
	      }
	      break;
 8004e70:	e01f      	b.n	8004eb2 <_ZN4SBUS8B_buttonEv+0x96>
	      } else if (++debounce_counter >= _debounceTime) {
 8004e72:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <_ZN4SBUS8B_buttonEv+0xb0>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	3301      	adds	r3, #1
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4b14      	ldr	r3, [pc, #80]	; (8004ecc <_ZN4SBUS8B_buttonEv+0xb0>)
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <_ZN4SBUS8B_buttonEv+0xb0>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b27      	cmp	r3, #39	; 0x27
 8004e84:	bf8c      	ite	hi
 8004e86:	2301      	movhi	r3, #1
 8004e88:	2300      	movls	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d010      	beq.n	8004eb2 <_ZN4SBUS8B_buttonEv+0x96>
	        debounce_state = 2;
 8004e90:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <_ZN4SBUS8B_buttonEv+0xac>)
 8004e92:	2202      	movs	r2, #2
 8004e94:	701a      	strb	r2, [r3, #0]
	      break;
 8004e96:	e00c      	b.n	8004eb2 <_ZN4SBUS8B_buttonEv+0x96>

	    case 2:  // button pressed and debounced
	      if (!button_pressed) {
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	f083 0301 	eor.w	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <_ZN4SBUS8B_buttonEv+0x9a>
	        debounce_state = 0;
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <_ZN4SBUS8B_buttonEv+0xac>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
	        return true;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e005      	b.n	8004eba <_ZN4SBUS8B_buttonEv+0x9e>
	      break;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <_ZN4SBUS8B_buttonEv+0x9c>
	      break;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <_ZN4SBUS8B_buttonEv+0x9c>
	      }
	      break;
 8004eb6:	bf00      	nop
	  }

	  return false;
 8004eb8:	2300      	movs	r3, #0


}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000866 	.word	0x20000866
 8004ecc:	20000867 	.word	0x20000867

08004ed0 <_ZN4SBUS8C_buttonEv>:

bool SBUS::C_button(void){
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[7] > 1000);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ee0:	bf8c      	ite	hi
 8004ee2:	2301      	movhi	r3, #1
 8004ee4:	2300      	movls	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <_ZN4SBUS8C_buttonEv+0xac>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d02d      	beq.n	8004f4c <_ZN4SBUS8C_buttonEv+0x7c>
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	dc3b      	bgt.n	8004f6c <_ZN4SBUS8C_buttonEv+0x9c>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <_ZN4SBUS8C_buttonEv+0x2e>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d00a      	beq.n	8004f12 <_ZN4SBUS8C_buttonEv+0x42>
 8004efc:	e036      	b.n	8004f6c <_ZN4SBUS8C_buttonEv+0x9c>
		case 0:  // button released
		  if (button_pressed) {
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d02e      	beq.n	8004f62 <_ZN4SBUS8C_buttonEv+0x92>
			debounce_state = 1;
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <_ZN4SBUS8C_buttonEv+0xac>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
			debounce_counter = 0;
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004f10:	e027      	b.n	8004f62 <_ZN4SBUS8C_buttonEv+0x92>

		case 1:  // button pressed, waiting for debounce
		  if (!button_pressed) {
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	f083 0301 	eor.w	r3, r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <_ZN4SBUS8C_buttonEv+0x56>
			debounce_state = 0;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <_ZN4SBUS8C_buttonEv+0xac>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
		  } else if (++debounce_counter >= _debounceTime) {
			debounce_state = 2;
		  }
		  break;
 8004f24:	e01f      	b.n	8004f66 <_ZN4SBUS8C_buttonEv+0x96>
		  } else if (++debounce_counter >= _debounceTime) {
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <_ZN4SBUS8C_buttonEv+0xb0>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b27      	cmp	r3, #39	; 0x27
 8004f38:	bf8c      	ite	hi
 8004f3a:	2301      	movhi	r3, #1
 8004f3c:	2300      	movls	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <_ZN4SBUS8C_buttonEv+0x96>
			debounce_state = 2;
 8004f44:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <_ZN4SBUS8C_buttonEv+0xac>)
 8004f46:	2202      	movs	r2, #2
 8004f48:	701a      	strb	r2, [r3, #0]
		  break;
 8004f4a:	e00c      	b.n	8004f66 <_ZN4SBUS8C_buttonEv+0x96>

		case 2:  // button pressed and debounced
		  if (!button_pressed) {
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	f083 0301 	eor.w	r3, r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <_ZN4SBUS8C_buttonEv+0x9a>
			debounce_state = 0;
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <_ZN4SBUS8C_buttonEv+0xac>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
			return true;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e005      	b.n	8004f6e <_ZN4SBUS8C_buttonEv+0x9e>
		  break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <_ZN4SBUS8C_buttonEv+0x9c>
		  break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <_ZN4SBUS8C_buttonEv+0x9c>
		  }
		  break;
 8004f6a:	bf00      	nop
	  }

	  return false;
 8004f6c:	2300      	movs	r3, #0

}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000868 	.word	0x20000868
 8004f80:	20000869 	.word	0x20000869

08004f84 <_ZN4SBUS8D_buttonEv>:

bool SBUS::D_button(void){
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

	  static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[8] > 1000);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f94:	bf8c      	ite	hi
 8004f96:	2301      	movhi	r3, #1
 8004f98:	2300      	movls	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8004f9c:	4b24      	ldr	r3, [pc, #144]	; (8005030 <_ZN4SBUS8D_buttonEv+0xac>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d02d      	beq.n	8005000 <_ZN4SBUS8D_buttonEv+0x7c>
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	dc3b      	bgt.n	8005020 <_ZN4SBUS8D_buttonEv+0x9c>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <_ZN4SBUS8D_buttonEv+0x2e>
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d00a      	beq.n	8004fc6 <_ZN4SBUS8D_buttonEv+0x42>
 8004fb0:	e036      	b.n	8005020 <_ZN4SBUS8D_buttonEv+0x9c>
		case 0:  // button released
		  if (button_pressed) {
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02e      	beq.n	8005016 <_ZN4SBUS8D_buttonEv+0x92>
			debounce_state = 1;
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <_ZN4SBUS8D_buttonEv+0xac>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
			debounce_counter = 0;
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004fc4:	e027      	b.n	8005016 <_ZN4SBUS8D_buttonEv+0x92>

		case 1:  // button pressed, waiting for debounce
		  if (!button_pressed) {
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	f083 0301 	eor.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <_ZN4SBUS8D_buttonEv+0x56>
			debounce_state = 0;
 8004fd2:	4b17      	ldr	r3, [pc, #92]	; (8005030 <_ZN4SBUS8D_buttonEv+0xac>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
		  } else if (++debounce_counter >= _debounceTime) {
			debounce_state = 2;
		  }
		  break;
 8004fd8:	e01f      	b.n	800501a <_ZN4SBUS8D_buttonEv+0x96>
		  } else if (++debounce_counter >= _debounceTime) {
 8004fda:	4b16      	ldr	r3, [pc, #88]	; (8005034 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <_ZN4SBUS8D_buttonEv+0xb0>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b27      	cmp	r3, #39	; 0x27
 8004fec:	bf8c      	ite	hi
 8004fee:	2301      	movhi	r3, #1
 8004ff0:	2300      	movls	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d010      	beq.n	800501a <_ZN4SBUS8D_buttonEv+0x96>
			debounce_state = 2;
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <_ZN4SBUS8D_buttonEv+0xac>)
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	701a      	strb	r2, [r3, #0]
		  break;
 8004ffe:	e00c      	b.n	800501a <_ZN4SBUS8D_buttonEv+0x96>

		case 2:  // button pressed and debounced
		  if (!button_pressed) {
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	f083 0301 	eor.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <_ZN4SBUS8D_buttonEv+0x9a>
			debounce_state = 0;
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <_ZN4SBUS8D_buttonEv+0xac>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
			return true;
 8005012:	2301      	movs	r3, #1
 8005014:	e005      	b.n	8005022 <_ZN4SBUS8D_buttonEv+0x9e>
		  break;
 8005016:	bf00      	nop
 8005018:	e002      	b.n	8005020 <_ZN4SBUS8D_buttonEv+0x9c>
		  break;
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <_ZN4SBUS8D_buttonEv+0x9c>
		  }
		  break;
 800501e:	bf00      	nop
	  }

	  return false;
 8005020:	2300      	movs	r3, #0

}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	2000086a 	.word	0x2000086a
 8005034:	2000086b 	.word	0x2000086b

08005038 <_ZN4SBUS11home_buttonEv>:

	  return false;

}

bool SBUS::home_button(void){
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

      static uint8_t debounce_state = 0;
	  static uint8_t debounce_counter = 0;

	  bool button_pressed = (_channels[9] > 1000);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005048:	bf8c      	ite	hi
 800504a:	2301      	movhi	r3, #1
 800504c:	2300      	movls	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]

	  switch (debounce_state) {
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <_ZN4SBUS11home_buttonEv+0xac>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d02d      	beq.n	80050b4 <_ZN4SBUS11home_buttonEv+0x7c>
 8005058:	2b02      	cmp	r3, #2
 800505a:	dc3b      	bgt.n	80050d4 <_ZN4SBUS11home_buttonEv+0x9c>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <_ZN4SBUS11home_buttonEv+0x2e>
 8005060:	2b01      	cmp	r3, #1
 8005062:	d00a      	beq.n	800507a <_ZN4SBUS11home_buttonEv+0x42>
 8005064:	e036      	b.n	80050d4 <_ZN4SBUS11home_buttonEv+0x9c>
		case 0:  // button released
		  if (button_pressed) {
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02e      	beq.n	80050ca <_ZN4SBUS11home_buttonEv+0x92>
			debounce_state = 1;
 800506c:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <_ZN4SBUS11home_buttonEv+0xac>)
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
			debounce_counter = 0;
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <_ZN4SBUS11home_buttonEv+0xb0>)
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8005078:	e027      	b.n	80050ca <_ZN4SBUS11home_buttonEv+0x92>

		case 1:  // button pressed, waiting for debounce
		  if (!button_pressed) {
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	f083 0301 	eor.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <_ZN4SBUS11home_buttonEv+0x56>
			debounce_state = 0;
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <_ZN4SBUS11home_buttonEv+0xac>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
		  } else if (++debounce_counter >= _debounceTime) {
			debounce_state = 2;
		  }
		  break;
 800508c:	e01f      	b.n	80050ce <_ZN4SBUS11home_buttonEv+0x96>
		  } else if (++debounce_counter >= _debounceTime) {
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <_ZN4SBUS11home_buttonEv+0xb0>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	b2da      	uxtb	r2, r3
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <_ZN4SBUS11home_buttonEv+0xb0>)
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <_ZN4SBUS11home_buttonEv+0xb0>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b27      	cmp	r3, #39	; 0x27
 80050a0:	bf8c      	ite	hi
 80050a2:	2301      	movhi	r3, #1
 80050a4:	2300      	movls	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <_ZN4SBUS11home_buttonEv+0x96>
			debounce_state = 2;
 80050ac:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <_ZN4SBUS11home_buttonEv+0xac>)
 80050ae:	2202      	movs	r2, #2
 80050b0:	701a      	strb	r2, [r3, #0]
		  break;
 80050b2:	e00c      	b.n	80050ce <_ZN4SBUS11home_buttonEv+0x96>

		case 2:  // button pressed and debounced
		  if (!button_pressed) {
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	f083 0301 	eor.w	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <_ZN4SBUS11home_buttonEv+0x9a>
			debounce_state = 0;
 80050c0:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <_ZN4SBUS11home_buttonEv+0xac>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
			return true;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e005      	b.n	80050d6 <_ZN4SBUS11home_buttonEv+0x9e>
		  break;
 80050ca:	bf00      	nop
 80050cc:	e002      	b.n	80050d4 <_ZN4SBUS11home_buttonEv+0x9c>
		  break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <_ZN4SBUS11home_buttonEv+0x9c>
		  }
		  break;
 80050d2:	bf00      	nop
	  }

	  return false;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	2000086c 	.word	0x2000086c
 80050e8:	2000086d 	.word	0x2000086d

080050ec <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>:
#include "altimeter.h"

Altimeter::Altimeter(I2C_HandleTypeDef* i2c){
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	611a      	str	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	615a      	str	r2, [r3, #20]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3318      	adds	r3, #24
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	609a      	str	r2, [r3, #8]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	611a      	str	r2, [r3, #16]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	_i2c = i2c;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	601a      	str	r2, [r3, #0]
}
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <_ZN9Altimeter14init_altimeterEv>:


void Altimeter::init_altimeter(void){
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af04      	add	r7, sp, #16
 8005172:	6078      	str	r0, [r7, #4]
	uint8_t transmit_data;

	//First check connection and read who_am_I register
	do{

		this->whoAmI();
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8bd 	bl	80052f4 <_ZN9Altimeter6whoAmIEv>
		printf("Attempting to read from chip \r\n");
 800517a:	4853      	ldr	r0, [pc, #332]	; (80052c8 <_ZN9Altimeter14init_altimeterEv+0x15c>)
 800517c:	f011 f9b8 	bl	80164f0 <puts>

	}while(_whoAmI != 0xC4);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005186:	2bc4      	cmp	r3, #196	; 0xc4
 8005188:	d000      	beq.n	800518c <_ZN9Altimeter14init_altimeterEv+0x20>
	do{
 800518a:	e7f3      	b.n	8005174 <_ZN9Altimeter14init_altimeterEv+0x8>

	//Next do a reset for good measure. Reset bit is bit 3 in ctrl register 1.
	//and wait a bit for device to come back online.
	transmit_data = 0x04;
 800518c:	2304      	movs	r3, #4
 800518e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &transmit_data, 1, 100);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	2364      	movs	r3, #100	; 0x64
 8005196:	9302      	str	r3, [sp, #8]
 8005198:	2301      	movs	r3, #1
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	f107 030a 	add.w	r3, r7, #10
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2301      	movs	r3, #1
 80051a4:	2226      	movs	r2, #38	; 0x26
 80051a6:	21c0      	movs	r1, #192	; 0xc0
 80051a8:	f005 fa4a 	bl	800a640 <HAL_I2C_Mem_Write>

	int counter = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
	do{
		counter++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]

	}while(HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &response, 1, 100) != HAL_OK);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	2364      	movs	r3, #100	; 0x64
 80051bc:	9302      	str	r3, [sp, #8]
 80051be:	2301      	movs	r3, #1
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	f107 030b 	add.w	r3, r7, #11
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2301      	movs	r3, #1
 80051ca:	2226      	movs	r2, #38	; 0x26
 80051cc:	21c0      	movs	r1, #192	; 0xc0
 80051ce:	f005 fb4b 	bl	800a868 <HAL_I2C_Mem_Read>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf14      	ite	ne
 80051d8:	2301      	movne	r3, #1
 80051da:	2300      	moveq	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d000      	beq.n	80051e4 <_ZN9Altimeter14init_altimeterEv+0x78>
	do{
 80051e2:	e7e5      	b.n	80051b0 <_ZN9Altimeter14init_altimeterEv+0x44>

	printf("ctrl_reg1 after reset %d \r\n", response);
 80051e4:	7afb      	ldrb	r3, [r7, #11]
 80051e6:	4619      	mov	r1, r3
 80051e8:	4838      	ldr	r0, [pc, #224]	; (80052cc <_ZN9Altimeter14init_altimeterEv+0x160>)
 80051ea:	f011 f8fb 	bl	80163e4 <iprintf>
	printf("delay after reset: %d \r\n", counter);
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	4837      	ldr	r0, [pc, #220]	; (80052d0 <_ZN9Altimeter14init_altimeterEv+0x164>)
 80051f2:	f011 f8f7 	bl	80163e4 <iprintf>

	//Set mode to standby (bit 2 of ctrl reg 1)
	transmit_data = 0x02;
 80051f6:	2302      	movs	r3, #2
 80051f8:	72bb      	strb	r3, [r7, #10]
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 80051fa:	7abb      	ldrb	r3, [r7, #10]
 80051fc:	461a      	mov	r2, r3
 80051fe:	2126      	movs	r1, #38	; 0x26
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f9c3 	bl	800558c <_ZN9Altimeter17write_to_registerEhh>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	bf14      	ite	ne
 800520c:	2301      	movne	r3, #1
 800520e:	2300      	moveq	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <_ZN9Altimeter14init_altimeterEv+0xba>

		printf("could not write to ctrl register 1 \r\n");
 8005216:	482f      	ldr	r0, [pc, #188]	; (80052d4 <_ZN9Altimeter14init_altimeterEv+0x168>)
 8005218:	f011 f96a 	bl	80164f0 <puts>
		_ctrl_reg1_data = response;
 800521c:	7afa      	ldrb	r2, [r7, #11]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 8005224:	e7e9      	b.n	80051fa <_ZN9Altimeter14init_altimeterEv+0x8e>

	}
	//Set pressure & temp event flegs
	transmit_data = 0x07;
 8005226:	2307      	movs	r3, #7
 8005228:	72bb      	strb	r3, [r7, #10]
	while(this->write_to_register(_altimeter_data_event_flag_reg, transmit_data) != HAL_OK){
 800522a:	7abb      	ldrb	r3, [r7, #10]
 800522c:	461a      	mov	r2, r3
 800522e:	2113      	movs	r1, #19
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f9ab 	bl	800558c <_ZN9Altimeter17write_to_registerEhh>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <_ZN9Altimeter14init_altimeterEv+0xe2>

		printf("Cannot write to flag register\r\n");
 8005246:	4824      	ldr	r0, [pc, #144]	; (80052d8 <_ZN9Altimeter14init_altimeterEv+0x16c>)
 8005248:	f011 f952 	bl	80164f0 <puts>
	while(this->write_to_register(_altimeter_data_event_flag_reg, transmit_data) != HAL_OK){
 800524c:	e7ed      	b.n	800522a <_ZN9Altimeter14init_altimeterEv+0xbe>

	}

	//Set oversampling mode to x128 and keep the chip in standby mode
	transmit_data = 0x3A;
 800524e:	233a      	movs	r3, #58	; 0x3a
 8005250:	72bb      	strb	r3, [r7, #10]
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 8005252:	7abb      	ldrb	r3, [r7, #10]
 8005254:	461a      	mov	r2, r3
 8005256:	2126      	movs	r1, #38	; 0x26
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f997 	bl	800558c <_ZN9Altimeter17write_to_registerEhh>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <_ZN9Altimeter14init_altimeterEv+0x10a>

		printf("Cannot write to flag register\r\n");
 800526e:	481a      	ldr	r0, [pc, #104]	; (80052d8 <_ZN9Altimeter14init_altimeterEv+0x16c>)
 8005270:	f011 f93e 	bl	80164f0 <puts>
	while(this->write_to_register(_altimeter_ctrl_reg_1, transmit_data) != HAL_OK){
 8005274:	e7ed      	b.n	8005252 <_ZN9Altimeter14init_altimeterEv+0xe6>

	}

	//Some print statements to check the initialization. Delete this later.
	printf("\r\n");
 8005276:	4819      	ldr	r0, [pc, #100]	; (80052dc <_ZN9Altimeter14init_altimeterEv+0x170>)
 8005278:	f011 f93a 	bl	80164f0 <puts>
	printf("Checking registers to see if everything is initialized correctly \r\n");
 800527c:	4818      	ldr	r0, [pc, #96]	; (80052e0 <_ZN9Altimeter14init_altimeterEv+0x174>)
 800527e:	f011 f937 	bl	80164f0 <puts>
	printf("Ctrl reg1 after samplerate set: %d \r\n", this->read_ctrl_reg_1());
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f928 	bl	80054d8 <_ZN9Altimeter15read_ctrl_reg_1Ev>
 8005288:	4603      	mov	r3, r0
 800528a:	4619      	mov	r1, r3
 800528c:	4815      	ldr	r0, [pc, #84]	; (80052e4 <_ZN9Altimeter14init_altimeterEv+0x178>)
 800528e:	f011 f8a9 	bl	80163e4 <iprintf>
	printf("Status reg: %d \r\n", this->read_status_reg());
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f939 	bl	800550a <_ZN9Altimeter15read_status_regEv>
 8005298:	4603      	mov	r3, r0
 800529a:	4619      	mov	r1, r3
 800529c:	4812      	ldr	r0, [pc, #72]	; (80052e8 <_ZN9Altimeter14init_altimeterEv+0x17c>)
 800529e:	f011 f8a1 	bl	80163e4 <iprintf>
	printf("Flag data reg: %d \r\n", this->read_data_reg());
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f94a 	bl	800553c <_ZN9Altimeter13read_data_regEv>
 80052a8:	4603      	mov	r3, r0
 80052aa:	4619      	mov	r1, r3
 80052ac:	480f      	ldr	r0, [pc, #60]	; (80052ec <_ZN9Altimeter14init_altimeterEv+0x180>)
 80052ae:	f011 f899 	bl	80163e4 <iprintf>
	printf("WhoAmI register: %d \r\n", this->_whoAmI);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052b8:	4619      	mov	r1, r3
 80052ba:	480d      	ldr	r0, [pc, #52]	; (80052f0 <_ZN9Altimeter14init_altimeterEv+0x184>)
 80052bc:	f011 f892 	bl	80163e4 <iprintf>


}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	080185c0 	.word	0x080185c0
 80052cc:	080185e0 	.word	0x080185e0
 80052d0:	080185fc 	.word	0x080185fc
 80052d4:	08018618 	.word	0x08018618
 80052d8:	08018640 	.word	0x08018640
 80052dc:	08018660 	.word	0x08018660
 80052e0:	08018664 	.word	0x08018664
 80052e4:	080186a8 	.word	0x080186a8
 80052e8:	080186d0 	.word	0x080186d0
 80052ec:	080186e4 	.word	0x080186e4
 80052f0:	080186fc 	.word	0x080186fc

080052f4 <_ZN9Altimeter6whoAmIEv>:

bool Altimeter::whoAmI(void){
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af04      	add	r7, sp, #16
 80052fa:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_whoAmI, I2C_MEMADD_SIZE_8BIT, &_whoAmI, 1, 100);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3331      	adds	r3, #49	; 0x31
 8005304:	2264      	movs	r2, #100	; 0x64
 8005306:	9202      	str	r2, [sp, #8]
 8005308:	2201      	movs	r2, #1
 800530a:	9201      	str	r2, [sp, #4]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	2301      	movs	r3, #1
 8005310:	220c      	movs	r2, #12
 8005312:	21c0      	movs	r1, #192	; 0xc0
 8005314:	f005 faa8 	bl	800a868 <HAL_I2C_Mem_Read>
	if(_whoAmI != 0xC4){
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800531e:	2bc4      	cmp	r3, #196	; 0xc4
 8005320:	d001      	beq.n	8005326 <_ZN9Altimeter6whoAmIEv+0x32>
		return false;
 8005322:	2300      	movs	r3, #0
 8005324:	e7ff      	b.n	8005326 <_ZN9Altimeter6whoAmIEv+0x32>
	}

}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <_ZN9Altimeter13read_altitudeEv>:

float Altimeter::read_altitude(void){
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af04      	add	r7, sp, #16
 8005336:	6078      	str	r0, [r7, #4]

	float altitude;
	uint8_t dataBytes[3];

	this->set_mode_altimeter();
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f8b2 	bl	80054a2 <_ZN9Altimeter18set_mode_altimeterEv>
	this->toggle_one_shot();
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f948 	bl	80055d4 <_ZN9Altimeter15toggle_one_shotEv>

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_delta_pressure_MSB, I2C_MEMADD_SIZE_8BIT, &_pressure_registers[0], 1, 100);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	2264      	movs	r2, #100	; 0x64
 800534e:	9202      	str	r2, [sp, #8]
 8005350:	2201      	movs	r2, #1
 8005352:	9201      	str	r2, [sp, #4]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	2301      	movs	r3, #1
 8005358:	2207      	movs	r2, #7
 800535a:	21c0      	movs	r1, #192	; 0xc0
 800535c:	f005 fa84 	bl	800a868 <HAL_I2C_Mem_Read>
	if((this->read_status_reg() & 0x04) != 0){
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8d2 	bl	800550a <_ZN9Altimeter15read_status_regEv>
 8005366:	4603      	mov	r3, r0
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03f      	beq.n	80053fa <_ZN9Altimeter13read_altitudeEv+0xca>

		HAL_I2C_Mem_Read(_i2c, _altimeter_address, 0x01, 1, dataBytes, 3, 512);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	2303      	movs	r3, #3
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	f107 030c 	add.w	r3, r7, #12
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	2301      	movs	r3, #1
 8005390:	2201      	movs	r2, #1
 8005392:	21c0      	movs	r1, #192	; 0xc0
 8005394:	f005 fa68 	bl	800a868 <HAL_I2C_Mem_Read>
		// do some bitshifting first to get a 20bit altitude value info from datasheet:  there are some typos there though )
		//Left shifting the
		//OUT_P_MSB byte by 24 bits into a 32 variable and doing a logical OR with the OUT_P_CSB byte
		//left shifted 16 bits and a logical OR with the OUT_P_LSB byte left shifted 8 bits gives the
		//altitude in meters times 65536.
		int32_t raw_altitude = (dataBytes[0] << 24) | (dataBytes[1] << 16) | (dataBytes[2] << 8);
 8005398:	7b3b      	ldrb	r3, [r7, #12]
 800539a:	061a      	lsls	r2, r3, #24
 800539c:	7b7b      	ldrb	r3, [r7, #13]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	431a      	orrs	r2, r3
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
		//2's complement because it's always a signed value for some reason
		raw_altitude = (~raw_altitude +1) *-1;
		float raw_altitude_shifted = raw_altitude / 65536.0;
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7fb f8e2 	bl	8000574 <__aeabi_i2d>
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <_ZN9Altimeter13read_altitudeEv+0xd4>)
 80053b6:	f7fb fa71 	bl	800089c <__aeabi_ddiv>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	f7fb fc19 	bl	8000bf8 <__aeabi_d2f>
 80053c6:	4603      	mov	r3, r0
 80053c8:	613b      	str	r3, [r7, #16]

		_altitude = raw_altitude_shifted - this->get_offset();
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f940 	bl	8005650 <_ZN9Altimeter10get_offsetEv>
 80053d0:	eeb0 7a40 	vmov.f32	s14, s0
 80053d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80053d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	edc3 7a02 	vstr	s15, [r3, #8]


		//calculate the moving average of the last 5 readings
		this->process_altitude(_altitude);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80053e8:	eeb0 0a67 	vmov.f32	s0, s15
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f80b 	bl	8005408 <_ZN9Altimeter16process_altitudeEf>
		return raw_altitude_shifted;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	e7ff      	b.n	80053fa <_ZN9Altimeter13read_altitudeEv+0xca>
	}




}
 80053fa:	eeb0 0a67 	vmov.f32	s0, s15
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40f00000 	.word	0x40f00000

08005408 <_ZN9Altimeter16process_altitudeEf>:

float Altimeter::process_altitude(float altitude){
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	ed87 0a00 	vstr	s0, [r7]


	//shift readings back by one index
	for(int i = 4 ; i > 0; i --){
 8005414:	2304      	movs	r3, #4
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	dd10      	ble.n	8005440 <_ZN9Altimeter16process_altitudeEf+0x38>

		_tempArray[i] = _tempArray[i -1];
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	3b01      	subs	r3, #1
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	3306      	adds	r3, #6
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	3306      	adds	r3, #6
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	601a      	str	r2, [r3, #0]
	for(int i = 4 ; i > 0; i --){
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3b01      	subs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e7eb      	b.n	8005418 <_ZN9Altimeter16process_altitudeEf+0x10>

	}
	//calculate the average of the array
	_tempArray[0] = _altitude;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	619a      	str	r2, [r3, #24]

	float sum = 0;
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < (sizeof(_tempArray) / sizeof(float)); i++){
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d810      	bhi.n	800547a <_ZN9Altimeter16process_altitudeEf+0x72>

		sum += _tempArray[i];
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3306      	adds	r3, #6
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	edd3 7a00 	vldr	s15, [r3]
 8005466:	ed97 7a04 	vldr	s14, [r7, #16]
 800546a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800546e:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i < (sizeof(_tempArray) / sizeof(float)); i++){
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3301      	adds	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e7eb      	b.n	8005452 <_ZN9Altimeter16process_altitudeEf+0x4a>

	}
	_moving_avg = sum / 5.0;
 800547a:	ed97 7a04 	vldr	s14, [r7, #16]
 800547e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8005482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	edc3 7a05 	vstr	s15, [r3, #20]
	return _moving_avg;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	ee07 3a90 	vmov	s15, r3

}
 8005494:	eeb0 0a67 	vmov.f32	s0, s15
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <_ZN9Altimeter18set_mode_altimeterEv>:
}




void Altimeter::set_mode_altimeter(void){
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]

	uint8_t response = this->read_ctrl_reg_1();
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f814 	bl	80054d8 <_ZN9Altimeter15read_ctrl_reg_1Ev>
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
	uint8_t transmit_data;
	if((response & 0x80) == 0){
 80054b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	db09      	blt.n	80054d0 <_ZN9Altimeter18set_mode_altimeterEv+0x2e>

		transmit_data = response | 0x80;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054c2:	73bb      	strb	r3, [r7, #14]
		this->write_to_register(_altimeter_ctrl_reg_1, transmit_data);
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	461a      	mov	r2, r3
 80054c8:	2126      	movs	r1, #38	; 0x26
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f85e 	bl	800558c <_ZN9Altimeter17write_to_registerEhh>

	}

}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <_ZN9Altimeter15read_ctrl_reg_1Ev>:

}



uint8_t Altimeter::read_ctrl_reg_1(void){
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af04      	add	r7, sp, #16
 80054de:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_ctrl_reg_1, I2C_MEMADD_SIZE_8BIT, &_ctrl_reg1_data, 1, 100);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	332d      	adds	r3, #45	; 0x2d
 80054e8:	2264      	movs	r2, #100	; 0x64
 80054ea:	9202      	str	r2, [sp, #8]
 80054ec:	2201      	movs	r2, #1
 80054ee:	9201      	str	r2, [sp, #4]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	2301      	movs	r3, #1
 80054f4:	2226      	movs	r2, #38	; 0x26
 80054f6:	21c0      	movs	r1, #192	; 0xc0
 80054f8:	f005 f9b6 	bl	800a868 <HAL_I2C_Mem_Read>
	return _ctrl_reg1_data;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <_ZN9Altimeter15read_status_regEv>:

uint8_t Altimeter::read_status_reg(void){
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af04      	add	r7, sp, #16
 8005510:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_status_reg, I2C_MEMADD_SIZE_8BIT, &_status_reg_data, 1, 100);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	332c      	adds	r3, #44	; 0x2c
 800551a:	2264      	movs	r2, #100	; 0x64
 800551c:	9202      	str	r2, [sp, #8]
 800551e:	2201      	movs	r2, #1
 8005520:	9201      	str	r2, [sp, #4]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2301      	movs	r3, #1
 8005526:	2200      	movs	r2, #0
 8005528:	21c0      	movs	r1, #192	; 0xc0
 800552a:	f005 f99d 	bl	800a868 <HAL_I2C_Mem_Read>
	return _status_reg_data;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <_ZN9Altimeter13read_data_regEv>:

uint8_t Altimeter::read_data_reg(void){
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af04      	add	r7, sp, #16
 8005542:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Read(_i2c, _altimeter_address, _altimeter_data_event_flag_reg, I2C_MEMADD_SIZE_8BIT, &_flag_reg_data, 1, 100);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	332f      	adds	r3, #47	; 0x2f
 800554c:	2264      	movs	r2, #100	; 0x64
 800554e:	9202      	str	r2, [sp, #8]
 8005550:	2201      	movs	r2, #1
 8005552:	9201      	str	r2, [sp, #4]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2301      	movs	r3, #1
 8005558:	2213      	movs	r2, #19
 800555a:	21c0      	movs	r1, #192	; 0xc0
 800555c:	f005 f984 	bl	800a868 <HAL_I2C_Mem_Read>
	return _flag_reg_data;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <_ZN9Altimeter12get_altitudeEv>:

float Altimeter::get_altitude(void){
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]

	return _moving_avg;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	ee07 3a90 	vmov	s15, r3
}
 800557e:	eeb0 0a67 	vmov.f32	s0, s15
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <_ZN9Altimeter17write_to_registerEhh>:

bool Altimeter::write_to_register(uint8_t adress, uint8_t value){
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af04      	add	r7, sp, #16
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
 8005598:	4613      	mov	r3, r2
 800559a:	70bb      	strb	r3, [r7, #2]

	if(	HAL_I2C_Mem_Write(_i2c, _altimeter_address, adress, I2C_MEMADD_SIZE_8BIT, &value, 1, 100) != HAL_OK){
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	2364      	movs	r3, #100	; 0x64
 80055a6:	9302      	str	r3, [sp, #8]
 80055a8:	2301      	movs	r3, #1
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	1cbb      	adds	r3, r7, #2
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2301      	movs	r3, #1
 80055b2:	21c0      	movs	r1, #192	; 0xc0
 80055b4:	f005 f844 	bl	800a640 <HAL_I2C_Mem_Write>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <_ZN9Altimeter17write_to_registerEhh+0x40>

		return false;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e7ff      	b.n	80055cc <_ZN9Altimeter17write_to_registerEhh+0x40>
	}

}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZN9Altimeter15toggle_one_shotEv>:

void Altimeter::toggle_one_shot(void){
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

	uint8_t response;
	uint8_t transmit_data;
	//first clear OST bit
	response = this->read_ctrl_reg_1();
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff7b 	bl	80054d8 <_ZN9Altimeter15read_ctrl_reg_1Ev>
 80055e2:	4603      	mov	r3, r0
 80055e4:	73fb      	strb	r3, [r7, #15]
	if((response & 0x02) != 0){
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <_ZN9Altimeter15toggle_one_shotEv+0x30>

		response &= ~(0x02);
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	f023 0302 	bic.w	r3, r3, #2
 80055f6:	73fb      	strb	r3, [r7, #15]
		this->write_to_register(_altimeter_ctrl_reg_1, (response));
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	461a      	mov	r2, r3
 80055fc:	2126      	movs	r1, #38	; 0x26
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff ffc4 	bl	800558c <_ZN9Altimeter17write_to_registerEhh>

	}
	//check status again and set OST bit
	response = this->read_ctrl_reg_1();
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff67 	bl	80054d8 <_ZN9Altimeter15read_ctrl_reg_1Ev>
 800560a:	4603      	mov	r3, r0
 800560c:	73fb      	strb	r3, [r7, #15]
	if((response & 0x02) == 0){
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <_ZN9Altimeter15toggle_one_shotEv+0x56>

		this->write_to_register(_altimeter_ctrl_reg_1, response | 0x02);
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	2126      	movs	r1, #38	; 0x26
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ffb1 	bl	800558c <_ZN9Altimeter17write_to_registerEhh>
	}


}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <_ZN9Altimeter10set_offsetEf>:



//Crude debug offset-setter. Change this with a write to the offset register later
void Altimeter::set_offset(float offset){
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	ed87 0a00 	vstr	s0, [r7]

	this->_altitude_offset = offset;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	60da      	str	r2, [r3, #12]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <_ZN9Altimeter10get_offsetEv>:

float Altimeter::get_offset(void){
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

	return this->_altitude_offset;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	ee07 3a90 	vmov	s15, r3
}
 8005660:	eeb0 0a67 	vmov.f32	s0, s15
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <_ZN10Components13Error_HandlerEv>:
#include "components.h"




void Components::Error_Handler(void){
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

	//separate error handler for the components
	//adapted the handler to show the error on the status led then exit and try again.

	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b1d      	cmp	r3, #29
 8005680:	d80e      	bhi.n	80056a0 <_ZN10Components13Error_HandlerEv+0x30>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8005682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005686:	4808      	ldr	r0, [pc, #32]	; (80056a8 <_ZN10Components13Error_HandlerEv+0x38>)
 8005688:	f004 ff30 	bl	800a4ec <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800568c:	20c8      	movs	r0, #200	; 0xc8
 800568e:	f002 f82d 	bl	80076ec <HAL_Delay>
		printf("Components error handler !! \r\n");
 8005692:	4806      	ldr	r0, [pc, #24]	; (80056ac <_ZN10Components13Error_HandlerEv+0x3c>)
 8005694:	f010 ff2c 	bl	80164f0 <puts>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	3301      	adds	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
 800569e:	e7ed      	b.n	800567c <_ZN10Components13Error_HandlerEv+0xc>
	}


}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	48000800 	.word	0x48000800
 80056ac:	080187a8 	.word	0x080187a8

080056b0 <_ZN10Components15init_ComponentsEv>:



void Components::init_Components(void){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

	//DEZE VOLGORDE VAN INITIALISEREN AANHOUDEN. ADC/OPAMPS ZIJN SOMS AAN ELKAAR GELINKT

	this->init_COMP_1();
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fb09 	bl	8005cd0 <_ZN10Components11init_COMP_1Ev>
	this->init_COMP_2();
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fb42 	bl	8005d48 <_ZN10Components11init_COMP_2Ev>
	this->init_COMP_4();
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fb7b 	bl	8005dc0 <_ZN10Components11init_COMP_4Ev>
	this->init_COMP_5();
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fbb0 	bl	8005e30 <_ZN10Components11init_COMP_5Ev>
	this->init_COMP_7();
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fbe9 	bl	8005ea8 <_ZN10Components11init_COMP_7Ev>
	this->init_ADC_1();
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f86a 	bl	80057b0 <_ZN10Components10init_ADC_1Ev>
	this->init_DAC_1();
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fc19 	bl	8005f14 <_ZN10Components10init_DAC_1Ev>
	this->init_DAC_2();
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fc7e 	bl	8005fe4 <_ZN10Components10init_DAC_2Ev>
	this->init_DAC_3();
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fccf 	bl	800608c <_ZN10Components10init_DAC_3Ev>
	this->init_DAC_4();
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fd1e 	bl	8006130 <_ZN10Components10init_DAC_4Ev>
	this->init_OA_1();
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fd6d 	bl	80061d4 <_ZN10Components9init_OA_1Ev>
	this->init_OA_2();
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fdae 	bl	800625c <_ZN10Components9init_OA_2Ev>
	this->init_ADC_2();
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f95f 	bl	80059c4 <_ZN10Components10init_ADC_2Ev>
	this->init_OA_3();
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fdec 	bl	80062e4 <_ZN10Components9init_OA_3Ev>
	this->init_OA_4();
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fe2d 	bl	800636c <_ZN10Components9init_OA_4Ev>
	this->init_ADC_5();
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa1a 	bl	8005b4c <_ZN10Components10init_ADC_5Ev>
	this->init_OA_5();
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fe6b 	bl	80063f4 <_ZN10Components9init_OA_5Ev>


		HAL_OPAMP_Start(hopamp1_ptr);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f005 fde2 	bl	800b2ec <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp2_ptr);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	4618      	mov	r0, r3
 800572e:	f005 fddd 	bl	800b2ec <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp3_ptr);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	4618      	mov	r0, r3
 8005738:	f005 fdd8 	bl	800b2ec <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp4_ptr);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4618      	mov	r0, r3
 8005742:	f005 fdd3 	bl	800b2ec <HAL_OPAMP_Start>
		HAL_OPAMP_Start(hopamp5_ptr);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	4618      	mov	r0, r3
 800574c:	f005 fdce 	bl	800b2ec <HAL_OPAMP_Start>

		HAL_OPAMP_SelfCalibrate(hopamp1_ptr);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	4618      	mov	r0, r3
 8005756:	f005 fdfa 	bl	800b34e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp2_ptr);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	4618      	mov	r0, r3
 8005760:	f005 fdf5 	bl	800b34e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp3_ptr);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4618      	mov	r0, r3
 800576a:	f005 fdf0 	bl	800b34e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp4_ptr);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	4618      	mov	r0, r3
 8005774:	f005 fdeb 	bl	800b34e <HAL_OPAMP_SelfCalibrate>
		HAL_OPAMP_SelfCalibrate(hopamp5_ptr);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577c:	4618      	mov	r0, r3
 800577e:	f005 fde6 	bl	800b34e <HAL_OPAMP_SelfCalibrate>
		HAL_ADCEx_Calibration_Start(hadc1_ptr, ADC_SINGLE_ENDED);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	217f      	movs	r1, #127	; 0x7f
 8005788:	4618      	mov	r0, r3
 800578a:	f003 fab5 	bl	8008cf8 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	217f      	movs	r1, #127	; 0x7f
 8005794:	4618      	mov	r0, r3
 8005796:	f003 faaf 	bl	8008cf8 <HAL_ADCEx_Calibration_Start>
		HAL_ADCEx_Calibration_Start(hadc5_ptr, ADC_SINGLE_ENDED);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	217f      	movs	r1, #127	; 0x7f
 80057a0:	4618      	mov	r0, r3
 80057a2:	f003 faa9 	bl	8008cf8 <HAL_ADCEx_Calibration_Start>
		//HAL_ADCEx_Calibration_Start(hadc2_ptr, ADC_SINGLE_ENDED);




}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <_ZN10Components10init_ADC_1Ev>:


void Components::init_ADC_1(void){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08e      	sub	sp, #56	; 0x38
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

		  ADC_MultiModeTypeDef multimode = {0};
 80057b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	609a      	str	r2, [r3, #8]
		  ADC_ChannelConfTypeDef sConfig = {0};
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	2220      	movs	r2, #32
 80057ca:	2100      	movs	r1, #0
 80057cc:	4618      	mov	r0, r3
 80057ce:	f010 f8b7 	bl	8015940 <memset>

		  /** Common config
		  */
		  hadc1_ptr->Instance = ADC1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80057da:	601a      	str	r2, [r3, #0]
		  hadc1_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80057e4:	605a      	str	r2, [r3, #4]
		  hadc1_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	2200      	movs	r2, #0
 80057ec:	609a      	str	r2, [r3, #8]
		  hadc1_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	2200      	movs	r2, #0
 80057f4:	60da      	str	r2, [r3, #12]
		  hadc1_ptr->Init.GainCompensation = 0;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]
		  hadc1_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;		// Enable scanning mode
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	2201      	movs	r2, #1
 8005804:	615a      	str	r2, [r3, #20]
		  hadc1_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;		// Use end of sequence conversion
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	2208      	movs	r2, #8
 800580c:	619a      	str	r2, [r3, #24]
		  hadc1_ptr->Init.LowPowerAutoWait = DISABLE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	2200      	movs	r2, #0
 8005814:	771a      	strb	r2, [r3, #28]
		  hadc1_ptr->Init.ContinuousConvMode = DISABLE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	2200      	movs	r2, #0
 800581c:	775a      	strb	r2, [r3, #29]
		  hadc1_ptr->Init.NbrOfConversion = 3;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	2203      	movs	r2, #3
 8005824:	621a      	str	r2, [r3, #32]
		  hadc1_ptr->Init.DiscontinuousConvMode = DISABLE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  hadc1_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	2200      	movs	r2, #0
 8005836:	62da      	str	r2, [r3, #44]	; 0x2c
		  hadc1_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
		  hadc1_ptr->Init.DMAContinuousRequests = DISABLE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		  hadc1_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	2200      	movs	r2, #0
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c
		  hadc1_ptr->Init.OversamplingMode = ENABLE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		  hadc1_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	221c      	movs	r2, #28
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
		  hadc1_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800586c:	649a      	str	r2, [r3, #72]	; 0x48
		  hadc1_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	2200      	movs	r2, #0
 8005874:	64da      	str	r2, [r3, #76]	; 0x4c
		  hadc1_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	2201      	movs	r2, #1
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
		  if (HAL_ADC_Init(hadc1_ptr) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4618      	mov	r0, r3
 8005884:	f002 f99c 	bl	8007bc0 <HAL_ADC_Init>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <_ZN10Components10init_ADC_1Ev+0xf4>
		  {
		    this->Error_Handler();
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fee9 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 init failed");
 800589e:	4842      	ldr	r0, [pc, #264]	; (80059a8 <_ZN10Components10init_ADC_1Ev+0x1f8>)
 80058a0:	f010 fda0 	bl	80163e4 <iprintf>
		  }

		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
 80058a4:	2300      	movs	r3, #0
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if (HAL_ADCEx_MultiModeConfigChannel(hadc1_ptr, &multimode) != HAL_OK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f003 fa82 	bl	8008dbc <HAL_ADCEx_MultiModeConfigChannel>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <_ZN10Components10init_ADC_1Ev+0x124>
		  {
		    this->Error_Handler();
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fed1 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		    printf("ADC1 HAL_ADCEx_MultiModeConfigChannel failed");
 80058ce:	4837      	ldr	r0, [pc, #220]	; (80059ac <_ZN10Components10init_ADC_1Ev+0x1fc>)
 80058d0:	f010 fd88 	bl	80163e4 <iprintf>

		  //SAMPLING TIME ORIGINEEL OP 47 CYCLES. MISSCHIEN NOG AANPASSEN


		  //KANAAL VOOR DE SELECTOR POT
		  sConfig.Channel = ADC_CHANNEL_11;
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <_ZN10Components10init_ADC_1Ev+0x200>)
 80058d6:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 80058d8:	2306      	movs	r3, #6
 80058da:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80058dc:	2304      	movs	r3, #4
 80058de:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80058e0:	237f      	movs	r3, #127	; 0x7f
 80058e2:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80058e4:	2304      	movs	r3, #4
 80058e6:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	f107 020c 	add.w	r2, r7, #12
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f002 fc16 	bl	8008128 <HAL_ADC_ConfigChannel>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bf14      	ite	ne
 8005902:	2301      	movne	r3, #1
 8005904:	2300      	moveq	r3, #0
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <_ZN10Components10init_ADC_1Ev+0x168>
		  {
		    this->Error_Handler();
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff feaf 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel NOT ok");
 8005912:	4828      	ldr	r0, [pc, #160]	; (80059b4 <_ZN10Components10init_ADC_1Ev+0x204>)
 8005914:	f010 fd66 	bl	80163e4 <iprintf>
		  }


		  //KANAAL VOOR DE PUSH POT
		  sConfig.Channel = ADC_CHANNEL_14;
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <_ZN10Components10init_ADC_1Ev+0x208>)
 800591a:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_3;
 800591c:	2312      	movs	r3, #18
 800591e:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005920:	2304      	movs	r3, #4
 8005922:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005924:	237f      	movs	r3, #127	; 0x7f
 8005926:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005928:	2304      	movs	r3, #4
 800592a:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	f107 020c 	add.w	r2, r7, #12
 8005938:	4611      	mov	r1, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f002 fbf4 	bl	8008128 <HAL_ADC_ConfigChannel>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf14      	ite	ne
 8005946:	2301      	movne	r3, #1
 8005948:	2300      	moveq	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <_ZN10Components10init_ADC_1Ev+0x1ac>
		  {
		    this->Error_Handler();
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fe8d 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 8005956:	4819      	ldr	r0, [pc, #100]	; (80059bc <_ZN10Components10init_ADC_1Ev+0x20c>)
 8005958:	f010 fd44 	bl	80163e4 <iprintf>
		  }

		  //KANAAL VOOR DE FLUID POT
		  sConfig.Channel = ADC_CHANNEL_12;
 800595c:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <_ZN10Components10init_ADC_1Ev+0x210>)
 800595e:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005960:	2318      	movs	r3, #24
 8005962:	613b      	str	r3, [r7, #16]
		  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005964:	2304      	movs	r3, #4
 8005966:	617b      	str	r3, [r7, #20]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005968:	237f      	movs	r3, #127	; 0x7f
 800596a:	61bb      	str	r3, [r7, #24]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800596c:	2304      	movs	r3, #4
 800596e:	61fb      	str	r3, [r7, #28]
		  sConfig.Offset = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	623b      	str	r3, [r7, #32]
		  if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	f107 020c 	add.w	r2, r7, #12
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f002 fbd2 	bl	8008128 <HAL_ADC_ConfigChannel>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	bf14      	ite	ne
 800598a:	2301      	movne	r3, #1
 800598c:	2300      	moveq	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <_ZN10Components10init_ADC_1Ev+0x1f0>
		  {
		    this->Error_Handler();
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff fe6b 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		    printf("ADC 1 HAL_ADC_ConfigChannel Vopamp1 NOT ok");
 800599a:	4808      	ldr	r0, [pc, #32]	; (80059bc <_ZN10Components10init_ADC_1Ev+0x20c>)
 800599c:	f010 fd22 	bl	80163e4 <iprintf>
		  }


}
 80059a0:	bf00      	nop
 80059a2:	3738      	adds	r7, #56	; 0x38
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	080187c8 	.word	0x080187c8
 80059ac:	080187dc 	.word	0x080187dc
 80059b0:	2e300800 	.word	0x2e300800
 80059b4:	0801880c 	.word	0x0801880c
 80059b8:	3ac04000 	.word	0x3ac04000
 80059bc:	08018830 	.word	0x08018830
 80059c0:	32601000 	.word	0x32601000

080059c4 <_ZN10Components10init_ADC_2Ev>:

void Components::init_ADC_2(void){
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]


	  ADC_ChannelConfTypeDef sConfig = {0};
 80059cc:	f107 0308 	add.w	r3, r7, #8
 80059d0:	2220      	movs	r2, #32
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f00f ffb3 	bl	8015940 <memset>


	  /** Common config
	  */
	  hadc2_ptr->Instance = ADC2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	4a55      	ldr	r2, [pc, #340]	; (8005b34 <_ZN10Components10init_ADC_2Ev+0x170>)
 80059e0:	601a      	str	r2, [r3, #0]
	  hadc2_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80059ea:	605a      	str	r2, [r3, #4]
	  hadc2_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f0:	2200      	movs	r2, #0
 80059f2:	609a      	str	r2, [r3, #8]
	  hadc2_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f8:	2200      	movs	r2, #0
 80059fa:	60da      	str	r2, [r3, #12]
	  hadc2_ptr->Init.GainCompensation = 0;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	2200      	movs	r2, #0
 8005a02:	611a      	str	r2, [r3, #16]
	  hadc2_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	2201      	movs	r2, #1
 8005a0a:	615a      	str	r2, [r3, #20]
	  hadc2_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	2208      	movs	r2, #8
 8005a12:	619a      	str	r2, [r3, #24]
	  hadc2_ptr->Init.LowPowerAutoWait = DISABLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
	  hadc2_ptr->Init.ContinuousConvMode = DISABLE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	2200      	movs	r2, #0
 8005a22:	775a      	strb	r2, [r3, #29]
	  hadc2_ptr->Init.NbrOfConversion = 2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	2202      	movs	r2, #2
 8005a2a:	621a      	str	r2, [r3, #32]
	  hadc2_ptr->Init.DiscontinuousConvMode = DISABLE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc2_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc2_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc2_ptr->Init.DMAContinuousRequests = DISABLE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc2_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	2200      	movs	r2, #0
 8005a56:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc2_ptr->Init.OversamplingMode = ENABLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc2_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	2218      	movs	r2, #24
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc2_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	22e0      	movs	r2, #224	; 0xe0
 8005a70:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc2_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	2200      	movs	r2, #0
 8005a78:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc2_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2201      	movs	r2, #1
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc2_ptr) != HAL_OK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	4618      	mov	r0, r3
 8005a88:	f002 f89a 	bl	8007bc0 <HAL_ADC_Init>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf14      	ite	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	2300      	moveq	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <_ZN10Components10init_ADC_2Ev+0xe4>
	  {
	    this->Error_Handler();
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fde7 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 init \r\n");
 8005aa2:	4825      	ldr	r0, [pc, #148]	; (8005b38 <_ZN10Components10init_ADC_2Ev+0x174>)
 8005aa4:	f010 fd24 	bl	80164f0 <puts>
	  /** Configure Regular Channel
	  */

	  //led current

	  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8005aa8:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <_ZN10Components10init_ADC_2Ev+0x178>)
 8005aaa:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005aac:	2306      	movs	r3, #6
 8005aae:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005ab4:	237f      	movs	r3, #127	; 0x7f
 8005ab6:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005ab8:	2304      	movs	r3, #4
 8005aba:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	f107 0208 	add.w	r2, r7, #8
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 fb2c 	bl	8008128 <HAL_ADC_ConfigChannel>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <_ZN10Components10init_ADC_2Ev+0x128>
	  {
	    this->Error_Handler();
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fdc5 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC2 channel one init \r\n");
 8005ae6:	4816      	ldr	r0, [pc, #88]	; (8005b40 <_ZN10Components10init_ADC_2Ev+0x17c>)
 8005ae8:	f010 fd02 	bl	80164f0 <puts>

	  }

	  //fluid current
	  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8005aec:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <_ZN10Components10init_ADC_2Ev+0x180>)
 8005aee:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005af0:	230c      	movs	r3, #12
 8005af2:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005af4:	2304      	movs	r3, #4
 8005af6:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005af8:	237f      	movs	r3, #127	; 0x7f
 8005afa:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005afc:	2304      	movs	r3, #4
 8005afe:	61bb      	str	r3, [r7, #24]
	  if(HAL_ADC_ConfigChannel(hadc2_ptr, &sConfig) != HAL_OK){
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	f107 0208 	add.w	r2, r7, #8
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f002 fb0c 	bl	8008128 <HAL_ADC_ConfigChannel>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <_ZN10Components10init_ADC_2Ev+0x168>

		  this->Error_Handler();
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff fda5 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		  printf("problem with ADC2 channel two init \r\n");
 8005b26:	4808      	ldr	r0, [pc, #32]	; (8005b48 <_ZN10Components10init_ADC_2Ev+0x184>)
 8005b28:	f010 fce2 	bl	80164f0 <puts>

	  }


}
 8005b2c:	bf00      	nop
 8005b2e:	3728      	adds	r7, #40	; 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	50000100 	.word	0x50000100
 8005b38:	0801885c 	.word	0x0801885c
 8005b3c:	c3290000 	.word	0xc3290000
 8005b40:	08018878 	.word	0x08018878
 8005b44:	cb8c0000 	.word	0xcb8c0000
 8005b48:	080188a0 	.word	0x080188a0

08005b4c <_ZN10Components10init_ADC_5Ev>:

void Components::init_ADC_5(void){
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8005b54:	f107 0308 	add.w	r3, r7, #8
 8005b58:	2220      	movs	r2, #32
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f00f feef 	bl	8015940 <memset>


	  /** Common config
	  */
	  hadc5_ptr->Instance = ADC5;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	4a55      	ldr	r2, [pc, #340]	; (8005cbc <_ZN10Components10init_ADC_5Ev+0x170>)
 8005b68:	601a      	str	r2, [r3, #0]
	  hadc5_ptr->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005b72:	605a      	str	r2, [r3, #4]
	  hadc5_ptr->Init.Resolution = ADC_RESOLUTION_12B;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2200      	movs	r2, #0
 8005b7a:	609a      	str	r2, [r3, #8]
	  hadc5_ptr->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
	  hadc5_ptr->Init.GainCompensation = 0;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	2200      	movs	r2, #0
 8005b8a:	611a      	str	r2, [r3, #16]
	  hadc5_ptr->Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	2201      	movs	r2, #1
 8005b92:	615a      	str	r2, [r3, #20]
	  hadc5_ptr->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	2208      	movs	r2, #8
 8005b9a:	619a      	str	r2, [r3, #24]
	  hadc5_ptr->Init.LowPowerAutoWait = DISABLE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
	  hadc5_ptr->Init.ContinuousConvMode = DISABLE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	2200      	movs	r2, #0
 8005baa:	775a      	strb	r2, [r3, #29]
	  hadc5_ptr->Init.NbrOfConversion = 2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	621a      	str	r2, [r3, #32]
	  hadc5_ptr->Init.DiscontinuousConvMode = DISABLE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  hadc5_ptr->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc5_ptr->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc5_ptr->Init.DMAContinuousRequests = DISABLE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  hadc5_ptr->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2200      	movs	r2, #0
 8005bde:	63da      	str	r2, [r3, #60]	; 0x3c
	  hadc5_ptr->Init.OversamplingMode = ENABLE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  hadc5_ptr->Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2218      	movs	r2, #24
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
	  hadc5_ptr->Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	22e0      	movs	r2, #224	; 0xe0
 8005bf8:	649a      	str	r2, [r3, #72]	; 0x48
	  hadc5_ptr->Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	2200      	movs	r2, #0
 8005c00:	64da      	str	r2, [r3, #76]	; 0x4c
	  hadc5_ptr->Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	2201      	movs	r2, #1
 8005c08:	651a      	str	r2, [r3, #80]	; 0x50
	  if (HAL_ADC_Init(hadc5_ptr) != HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 ffd6 	bl	8007bc0 <HAL_ADC_Init>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <_ZN10Components10init_ADC_5Ev+0xe4>
	  {
	    this->Error_Handler();
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fd23 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 init");
 8005c2a:	4825      	ldr	r0, [pc, #148]	; (8005cc0 <_ZN10Components10init_ADC_5Ev+0x174>)
 8005c2c:	f010 fbda 	bl	80163e4 <iprintf>
	  }

	  /** Configure Regular Channel
	  */
	  //push motor shunt channel (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 8005c30:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <_ZN10Components10init_ADC_5Ev+0x178>)
 8005c32:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c34:	2306      	movs	r3, #6
 8005c36:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005c3c:	237f      	movs	r3, #127	; 0x7f
 8005c3e:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005c40:	2304      	movs	r3, #4
 8005c42:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f107 0208 	add.w	r2, r7, #8
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f002 fa68 	bl	8008128 <HAL_ADC_ConfigChannel>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <_ZN10Components10init_ADC_5Ev+0x128>
	  {
	    this->Error_Handler();
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fd01 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 8005c6e:	4816      	ldr	r0, [pc, #88]	; (8005cc8 <_ZN10Components10init_ADC_5Ev+0x17c>)
 8005c70:	f010 fbb8 	bl	80163e4 <iprintf>

	  }

	  //selector motor (current)
	  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <_ZN10Components10init_ADC_5Ev+0x180>)
 8005c76:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005c78:	230c      	movs	r3, #12
 8005c7a:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005c80:	237f      	movs	r3, #127	; 0x7f
 8005c82:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005c84:	2304      	movs	r3, #4
 8005c86:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc5_ptr, &sConfig) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	f107 0208 	add.w	r2, r7, #8
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f002 fa48 	bl	8008128 <HAL_ADC_ConfigChannel>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bf14      	ite	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	2300      	moveq	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <_ZN10Components10init_ADC_5Ev+0x168>
	  {
	    this->Error_Handler();
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fce1 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with ADC5 config channel");
 8005cae:	4806      	ldr	r0, [pc, #24]	; (8005cc8 <_ZN10Components10init_ADC_5Ev+0x17c>)
 8005cb0:	f010 fb98 	bl	80163e4 <iprintf>
	  }




}
 8005cb4:	bf00      	nop
 8005cb6:	3728      	adds	r7, #40	; 0x28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	50000600 	.word	0x50000600
 8005cc0:	080188c8 	.word	0x080188c8
 8005cc4:	94f00020 	.word	0x94f00020
 8005cc8:	080188e0 	.word	0x080188e0
 8005ccc:	8c900008 	.word	0x8c900008

08005cd0 <_ZN10Components11init_COMP_1Ev>:

void Components::init_COMP_1(void){
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

	  hcomp1_ptr->Instance = COMP1;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <_ZN10Components11init_COMP_1Ev+0x70>)
 8005cde:	601a      	str	r2, [r3, #0]
	  hcomp1_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	605a      	str	r2, [r3, #4]
	  hcomp1_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2250      	movs	r2, #80	; 0x50
 8005cee:	609a      	str	r2, [r3, #8]
	  hcomp1_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	611a      	str	r2, [r3, #16]
	  hcomp1_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60da      	str	r2, [r3, #12]
	  hcomp1_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2200      	movs	r2, #0
 8005d06:	615a      	str	r2, [r3, #20]
	  hcomp1_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp1_ptr) != HAL_OK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f003 faa9 	bl	800926c <HAL_COMP_Init>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <_ZN10Components11init_COMP_1Ev+0x66>
	  {
	    this->Error_Handler();
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fca0 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP1 init");
 8005d30:	4804      	ldr	r0, [pc, #16]	; (8005d44 <_ZN10Components11init_COMP_1Ev+0x74>)
 8005d32:	f010 fb57 	bl	80163e4 <iprintf>

	  }
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40010200 	.word	0x40010200
 8005d44:	08018904 	.word	0x08018904

08005d48 <_ZN10Components11init_COMP_2Ev>:

void Components::init_COMP_2(void){
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

	    hcomp2_ptr->Instance = COMP2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <_ZN10Components11init_COMP_2Ev+0x70>)
 8005d56:	601a      	str	r2, [r3, #0]
	    hcomp2_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	605a      	str	r2, [r3, #4]
	    hcomp2_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2250      	movs	r2, #80	; 0x50
 8005d66:	609a      	str	r2, [r3, #8]
	    hcomp2_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	611a      	str	r2, [r3, #16]
	    hcomp2_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	60da      	str	r2, [r3, #12]
	    hcomp2_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	615a      	str	r2, [r3, #20]
	    hcomp2_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	619a      	str	r2, [r3, #24]
	    if (HAL_COMP_Init(hcomp2_ptr) != HAL_OK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f003 fa6d 	bl	800926c <HAL_COMP_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <_ZN10Components11init_COMP_2Ev+0x66>
	    {
	      this->Error_Handler();
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fc64 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		  printf("problem with COMP2 init");
 8005da8:	4804      	ldr	r0, [pc, #16]	; (8005dbc <_ZN10Components11init_COMP_2Ev+0x74>)
 8005daa:	f010 fb1b 	bl	80163e4 <iprintf>
	    }




}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40010204 	.word	0x40010204
 8005dbc:	0801891c 	.word	0x0801891c

08005dc0 <_ZN10Components11init_COMP_4Ev>:

void Components::init_COMP_4(void){
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

    hcomp4_ptr->Instance = COMP4;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	4a16      	ldr	r2, [pc, #88]	; (8005e28 <_ZN10Components11init_COMP_4Ev+0x68>)
 8005dce:	601a      	str	r2, [r3, #0]
    hcomp4_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	605a      	str	r2, [r3, #4]
    hcomp4_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2240      	movs	r2, #64	; 0x40
 8005dde:	609a      	str	r2, [r3, #8]
    hcomp4_ptr->Init.OutputPol = COMP_HYSTERESIS_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	611a      	str	r2, [r3, #16]
    hcomp4_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	615a      	str	r2, [r3, #20]
    hcomp4_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2200      	movs	r2, #0
 8005df6:	619a      	str	r2, [r3, #24]
    if (HAL_COMP_Init(hcomp4_ptr) != HAL_OK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f003 fa35 	bl	800926c <HAL_COMP_Init>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <_ZN10Components11init_COMP_4Ev+0x5e>
    {
        this->Error_Handler();
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fc2c 	bl	8005670 <_ZN10Components13Error_HandlerEv>
        printf("problem with COMP4 init");
 8005e18:	4804      	ldr	r0, [pc, #16]	; (8005e2c <_ZN10Components11init_COMP_4Ev+0x6c>)
 8005e1a:	f010 fae3 	bl	80163e4 <iprintf>
    }
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	4001020c 	.word	0x4001020c
 8005e2c:	08018934 	.word	0x08018934

08005e30 <_ZN10Components11init_COMP_5Ev>:

void Components::init_COMP_5(void){
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

	  hcomp5_ptr->Instance = COMP5;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <_ZN10Components11init_COMP_5Ev+0x70>)
 8005e3e:	601a      	str	r2, [r3, #0]
	  hcomp5_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	605a      	str	r2, [r3, #4]
	  hcomp5_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	2240      	movs	r2, #64	; 0x40
 8005e4e:	609a      	str	r2, [r3, #8]
	  hcomp5_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	611a      	str	r2, [r3, #16]
	  hcomp5_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	60da      	str	r2, [r3, #12]
	  hcomp5_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	615a      	str	r2, [r3, #20]
	  hcomp5_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	619a      	str	r2, [r3, #24]
	  if (HAL_COMP_Init(hcomp5_ptr) != HAL_OK)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f003 f9f9 	bl	800926c <HAL_COMP_Init>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <_ZN10Components11init_COMP_5Ev+0x66>
	  {
		this->Error_Handler();
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fbf0 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with COMP5 init");
 8005e90:	4804      	ldr	r0, [pc, #16]	; (8005ea4 <_ZN10Components11init_COMP_5Ev+0x74>)
 8005e92:	f010 faa7 	bl	80163e4 <iprintf>

	  }

}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40010210 	.word	0x40010210
 8005ea4:	0801894c 	.word	0x0801894c

08005ea8 <_ZN10Components11init_COMP_7Ev>:

void Components::init_COMP_7(void){
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]


	   hcomp7_ptr->Instance = COMP7;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <_ZN10Components11init_COMP_7Ev+0x68>)
 8005eb6:	601a      	str	r2, [r3, #0]
	   hcomp7_ptr->Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	605a      	str	r2, [r3, #4]
	   hcomp7_ptr->Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2250      	movs	r2, #80	; 0x50
 8005ec6:	609a      	str	r2, [r3, #8]
	   hcomp7_ptr->Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	611a      	str	r2, [r3, #16]
	   hcomp7_ptr->Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60da      	str	r2, [r3, #12]
	   hcomp7_ptr->Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2200      	movs	r2, #0
 8005ede:	615a      	str	r2, [r3, #20]
	   hcomp7_ptr->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	619a      	str	r2, [r3, #24]
	   if (HAL_COMP_Init(hcomp7_ptr) != HAL_OK)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f003 f9bd 	bl	800926c <HAL_COMP_Init>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bf14      	ite	ne
 8005ef8:	2301      	movne	r3, #1
 8005efa:	2300      	moveq	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <_ZN10Components11init_COMP_7Ev+0x60>
	   {
	     this->Error_Handler();
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fbb4 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	   }



}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40010218 	.word	0x40010218

08005f14 <_ZN10Components10init_DAC_1Ev>:


void Components::init_DAC_1(void){
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08e      	sub	sp, #56	; 0x38
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

    DAC_ChannelConfTypeDef sConfig = {0};
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	2230      	movs	r2, #48	; 0x30
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f00f fd0b 	bl	8015940 <memset>
    /** DAC Initialization
    */
    hdac1_ptr->Instance = DAC1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4a2b      	ldr	r2, [pc, #172]	; (8005fdc <_ZN10Components10init_DAC_1Ev+0xc8>)
 8005f30:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(hdac1_ptr) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f003 fc41 	bl	80097be <HAL_DAC_Init>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bf14      	ite	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	2300      	moveq	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <_ZN10Components10init_DAC_1Ev+0x44>
    {
        this->Error_Handler();
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fb8f 	bl	8005670 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8005f52:	4823      	ldr	r0, [pc, #140]	; (8005fe0 <_ZN10Components10init_DAC_1Ev+0xcc>)
 8005f54:	f010 fa46 	bl	80163e4 <iprintf>

    }

    /** DAC channel OUT1 config
    */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	733b      	strb	r3, [r7, #12]
    sConfig.DAC_SignedFormat = DISABLE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	737b      	strb	r3, [r7, #13]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8005f70:	2302      	movs	r3, #2
 8005f72:	61fb      	str	r3, [r7, #28]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8005f74:	2302      	movs	r3, #2
 8005f76:	623b      	str	r3, [r7, #32]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f107 0108 	add.w	r1, r7, #8
 8005f84:	2200      	movs	r2, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f003 fc3c 	bl	8009804 <HAL_DAC_ConfigChannel>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	2300      	moveq	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <_ZN10Components10init_DAC_1Ev+0x94>
    {
        this->Error_Handler();
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fb67 	bl	8005670 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8005fa2:	480f      	ldr	r0, [pc, #60]	; (8005fe0 <_ZN10Components10init_DAC_1Ev+0xcc>)
 8005fa4:	f010 fa1e 	bl	80163e4 <iprintf>

    }

    /** DAC channel OUT2 config
    */
    if (HAL_DAC_ConfigChannel(hdac1_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f107 0108 	add.w	r1, r7, #8
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f003 fc26 	bl	8009804 <HAL_DAC_ConfigChannel>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bf14      	ite	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	2300      	moveq	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <_ZN10Components10init_DAC_1Ev+0xc0>
    {
        this->Error_Handler();
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fb51 	bl	8005670 <_ZN10Components13Error_HandlerEv>
        printf("problem with DAC1 init");
 8005fce:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <_ZN10Components10init_DAC_1Ev+0xcc>)
 8005fd0:	f010 fa08 	bl	80163e4 <iprintf>

    }

}
 8005fd4:	bf00      	nop
 8005fd6:	3738      	adds	r7, #56	; 0x38
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	50000800 	.word	0x50000800
 8005fe0:	08018964 	.word	0x08018964

08005fe4 <_ZN10Components10init_DAC_2Ev>:

void Components::init_DAC_2(void){
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08e      	sub	sp, #56	; 0x38
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8005fec:	f107 0308 	add.w	r3, r7, #8
 8005ff0:	2230      	movs	r2, #48	; 0x30
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f00f fca3 	bl	8015940 <memset>

	  /** DAC Initialization
	  */
	  hdac2_ptr->Instance = DAC2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	4a20      	ldr	r2, [pc, #128]	; (8006080 <_ZN10Components10init_DAC_2Ev+0x9c>)
 8006000:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac2_ptr) != HAL_OK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	4618      	mov	r0, r3
 8006008:	f003 fbd9 	bl	80097be <HAL_DAC_Init>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	bf14      	ite	ne
 8006012:	2301      	movne	r3, #1
 8006014:	2300      	moveq	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <_ZN10Components10init_DAC_2Ev+0x44>
	  {
	    this->Error_Handler();
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff fb27 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8006022:	4818      	ldr	r0, [pc, #96]	; (8006084 <_ZN10Components10init_DAC_2Ev+0xa0>)
 8006024:	f010 f9de 	bl	80163e4 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8006028:	2302      	movs	r3, #2
 800602a:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800602c:	2300      	movs	r3, #0
 800602e:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 8006030:	2300      	movs	r3, #0
 8006032:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800603c:	2300      	movs	r3, #0
 800603e:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8006040:	2302      	movs	r3, #2
 8006042:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8006044:	2302      	movs	r3, #2
 8006046:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006048:	2300      	movs	r3, #0
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	2200      	movs	r2, #0
 8006052:	4619      	mov	r1, r3
 8006054:	480c      	ldr	r0, [pc, #48]	; (8006088 <_ZN10Components10init_DAC_2Ev+0xa4>)
 8006056:	f003 fbd5 	bl	8009804 <HAL_DAC_ConfigChannel>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	bf14      	ite	ne
 8006060:	2301      	movne	r3, #1
 8006062:	2300      	moveq	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <_ZN10Components10init_DAC_2Ev+0x92>
	  {
	    this->Error_Handler();
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fb00 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC2 init");
 8006070:	4804      	ldr	r0, [pc, #16]	; (8006084 <_ZN10Components10init_DAC_2Ev+0xa0>)
 8006072:	f010 f9b7 	bl	80163e4 <iprintf>

	  }


}
 8006076:	bf00      	nop
 8006078:	3738      	adds	r7, #56	; 0x38
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	50000c00 	.word	0x50000c00
 8006084:	0801897c 	.word	0x0801897c
 8006088:	20000938 	.word	0x20000938

0800608c <_ZN10Components10init_DAC_3Ev>:

void Components::init_DAC_3(void){
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	; 0x38
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

	  DAC_ChannelConfTypeDef sConfig = {0};
 8006094:	f107 0308 	add.w	r3, r7, #8
 8006098:	2230      	movs	r2, #48	; 0x30
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f00f fc4f 	bl	8015940 <memset>


	  /** DAC Initialization
	  */
	  hdac3_ptr->Instance = DAC3;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4a20      	ldr	r2, [pc, #128]	; (8006128 <_ZN10Components10init_DAC_3Ev+0x9c>)
 80060a8:	601a      	str	r2, [r3, #0]

	  if (HAL_DAC_Init(hdac3_ptr) != HAL_OK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f003 fb85 	bl	80097be <HAL_DAC_Init>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf14      	ite	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	2300      	moveq	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <_ZN10Components10init_DAC_3Ev+0x44>
	  {
	    this->Error_Handler();
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fad3 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 80060ca:	4818      	ldr	r0, [pc, #96]	; (800612c <_ZN10Components10init_DAC_3Ev+0xa0>)
 80060cc:	f010 f98a 	bl	80163e4 <iprintf>

	  }

	  /** DAC channel OUT2 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80060d0:	2302      	movs	r3, #2
 80060d2:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80060e8:	2302      	movs	r3, #2
 80060ea:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80060ec:	2302      	movs	r3, #2
 80060ee:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac3_ptr, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f107 0108 	add.w	r1, r7, #8
 80060fc:	2210      	movs	r2, #16
 80060fe:	4618      	mov	r0, r3
 8006100:	f003 fb80 	bl	8009804 <HAL_DAC_ConfigChannel>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	bf14      	ite	ne
 800610a:	2301      	movne	r3, #1
 800610c:	2300      	moveq	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <_ZN10Components10init_DAC_3Ev+0x94>
	  {
	    this->Error_Handler();
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff faab 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC3 init");
 800611a:	4804      	ldr	r0, [pc, #16]	; (800612c <_ZN10Components10init_DAC_3Ev+0xa0>)
 800611c:	f010 f962 	bl	80163e4 <iprintf>

	  }



}
 8006120:	bf00      	nop
 8006122:	3738      	adds	r7, #56	; 0x38
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	50001000 	.word	0x50001000
 800612c:	08018994 	.word	0x08018994

08006130 <_ZN10Components10init_DAC_4Ev>:

void Components::init_DAC_4(void){
 8006130:	b580      	push	{r7, lr}
 8006132:	b08e      	sub	sp, #56	; 0x38
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]


	  DAC_ChannelConfTypeDef sConfig = {0};
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	2230      	movs	r2, #48	; 0x30
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f00f fbfd 	bl	8015940 <memset>

	  /** DAC Initialization
	  */
	  hdac4_ptr->Instance = DAC4;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	4a20      	ldr	r2, [pc, #128]	; (80061cc <_ZN10Components10init_DAC_4Ev+0x9c>)
 800614c:	601a      	str	r2, [r3, #0]
	  if (HAL_DAC_Init(hdac4_ptr) != HAL_OK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	4618      	mov	r0, r3
 8006154:	f003 fb33 	bl	80097be <HAL_DAC_Init>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <_ZN10Components10init_DAC_4Ev+0x44>
	  {
	    this->Error_Handler();
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fa81 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 800616e:	4818      	ldr	r0, [pc, #96]	; (80061d0 <_ZN10Components10init_DAC_4Ev+0xa0>)
 8006170:	f010 f938 	bl	80163e4 <iprintf>

	  }

	  /** DAC channel OUT1 config
	  */
	  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8006174:	2302      	movs	r3, #2
 8006176:	60bb      	str	r3, [r7, #8]
	  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006178:	2300      	movs	r3, #0
 800617a:	733b      	strb	r3, [r7, #12]
	  sConfig.DAC_SignedFormat = DISABLE;
 800617c:	2300      	movs	r3, #0
 800617e:	737b      	strb	r3, [r7, #13]
	  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
	  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
	  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006188:	2300      	movs	r3, #0
 800618a:	61bb      	str	r3, [r7, #24]
	  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800618c:	2302      	movs	r3, #2
 800618e:	61fb      	str	r3, [r7, #28]
	  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8006190:	2302      	movs	r3, #2
 8006192:	623b      	str	r3, [r7, #32]
	  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006194:	2300      	movs	r3, #0
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_DAC_ConfigChannel(hdac4_ptr, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f107 0108 	add.w	r1, r7, #8
 80061a0:	2200      	movs	r2, #0
 80061a2:	4618      	mov	r0, r3
 80061a4:	f003 fb2e 	bl	8009804 <HAL_DAC_ConfigChannel>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <_ZN10Components10init_DAC_4Ev+0x94>
	  {
	    this->Error_Handler();
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fa59 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with DAC4 init");
 80061be:	4804      	ldr	r0, [pc, #16]	; (80061d0 <_ZN10Components10init_DAC_4Ev+0xa0>)
 80061c0:	f010 f910 	bl	80163e4 <iprintf>

	  }


}
 80061c4:	bf00      	nop
 80061c6:	3738      	adds	r7, #56	; 0x38
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	50001400 	.word	0x50001400
 80061d0:	080189ac 	.word	0x080189ac

080061d4 <_ZN10Components9init_OA_1Ev>:

void Components::init_OA_1(void){
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

	  hopamp1_ptr->Instance = OPAMP1;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <_ZN10Components9init_OA_1Ev+0x80>)
 80061e2:	601a      	str	r2, [r3, #0]
	  hopamp1_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	2200      	movs	r2, #0
 80061ea:	605a      	str	r2, [r3, #4]
	  hopamp1_ptr->Init.Mode = OPAMP_PGA_MODE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	609a      	str	r2, [r3, #8]
	  hopamp1_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2200      	movs	r2, #0
 80061fa:	611a      	str	r2, [r3, #16]
	  hopamp1_ptr->Init.InternalOutput = ENABLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2201      	movs	r2, #1
 8006202:	751a      	strb	r2, [r3, #20]
	  hopamp1_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2200      	movs	r2, #0
 800620a:	619a      	str	r2, [r3, #24]
	  hopamp1_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	2200      	movs	r2, #0
 8006212:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp1_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2200      	movs	r2, #0
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp1_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2200      	movs	r2, #0
 8006222:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp1_ptr) != HAL_OK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	4618      	mov	r0, r3
 800622a:	f004 ff8f 	bl	800b14c <HAL_OPAMP_Init>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	bf14      	ite	ne
 8006234:	2301      	movne	r3, #1
 8006236:	2300      	moveq	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <_ZN10Components9init_OA_1Ev+0x76>
	  {
	    this->Error_Handler();
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fa16 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA1 init");
 8006244:	4804      	ldr	r0, [pc, #16]	; (8006258 <_ZN10Components9init_OA_1Ev+0x84>)
 8006246:	f010 f8cd 	bl	80163e4 <iprintf>
	  }


}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40010300 	.word	0x40010300
 8006258:	080189c4 	.word	0x080189c4

0800625c <_ZN10Components9init_OA_2Ev>:

void Components::init_OA_2(void){
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

	    hopamp2_ptr->Instance = OPAMP2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <_ZN10Components9init_OA_2Ev+0x80>)
 800626a:	601a      	str	r2, [r3, #0]
	    hopamp2_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	2200      	movs	r2, #0
 8006272:	605a      	str	r2, [r3, #4]
	    hopamp2_ptr->Init.Mode = OPAMP_PGA_MODE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	2240      	movs	r2, #64	; 0x40
 800627a:	609a      	str	r2, [r3, #8]
	    hopamp2_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	2200      	movs	r2, #0
 8006282:	611a      	str	r2, [r3, #16]
	    hopamp2_ptr->Init.InternalOutput = ENABLE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	2201      	movs	r2, #1
 800628a:	751a      	strb	r2, [r3, #20]
	    hopamp2_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	2200      	movs	r2, #0
 8006292:	619a      	str	r2, [r3, #24]
	    hopamp2_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	2200      	movs	r2, #0
 800629a:	625a      	str	r2, [r3, #36]	; 0x24
	    hopamp2_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80062a4:	629a      	str	r2, [r3, #40]	; 0x28
	    hopamp2_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	2200      	movs	r2, #0
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c
	    if (HAL_OPAMP_Init(hopamp2_ptr) != HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	4618      	mov	r0, r3
 80062b4:	f004 ff4a 	bl	800b14c <HAL_OPAMP_Init>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bf14      	ite	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	2300      	moveq	r3, #0
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <_ZN10Components9init_OA_2Ev+0x78>
	    {
	      this->Error_Handler();
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff f9d1 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA2 init");
 80062ce:	4804      	ldr	r0, [pc, #16]	; (80062e0 <_ZN10Components9init_OA_2Ev+0x84>)
 80062d0:	f010 f888 	bl	80163e4 <iprintf>

	    }


}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40010304 	.word	0x40010304
 80062e0:	080189dc 	.word	0x080189dc

080062e4 <_ZN10Components9init_OA_3Ev>:

void Components::init_OA_3(void){
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

	   hopamp3_ptr->Instance = OPAMP3;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	4a1c      	ldr	r2, [pc, #112]	; (8006364 <_ZN10Components9init_OA_3Ev+0x80>)
 80062f2:	601a      	str	r2, [r3, #0]
	   hopamp3_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	2200      	movs	r2, #0
 80062fa:	605a      	str	r2, [r3, #4]
	   hopamp3_ptr->Init.Mode = OPAMP_PGA_MODE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	2240      	movs	r2, #64	; 0x40
 8006302:	609a      	str	r2, [r3, #8]
	   hopamp3_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	2200      	movs	r2, #0
 800630a:	611a      	str	r2, [r3, #16]
	   hopamp3_ptr->Init.InternalOutput = ENABLE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	751a      	strb	r2, [r3, #20]
	   hopamp3_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	2200      	movs	r2, #0
 800631a:	619a      	str	r2, [r3, #24]
	   hopamp3_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	2200      	movs	r2, #0
 8006322:	625a      	str	r2, [r3, #36]	; 0x24
	   hopamp3_ptr->Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	2200      	movs	r2, #0
 800632a:	629a      	str	r2, [r3, #40]	; 0x28
	   hopamp3_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2200      	movs	r2, #0
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c
	   if (HAL_OPAMP_Init(hopamp3_ptr) != HAL_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4618      	mov	r0, r3
 800633a:	f004 ff07 	bl	800b14c <HAL_OPAMP_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <_ZN10Components9init_OA_3Ev+0x76>
	   {
	     this->Error_Handler();
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff f98e 	bl	8005670 <_ZN10Components13Error_HandlerEv>
		    printf("problem with OA3 init");
 8006354:	4804      	ldr	r0, [pc, #16]	; (8006368 <_ZN10Components9init_OA_3Ev+0x84>)
 8006356:	f010 f845 	bl	80163e4 <iprintf>

	   }

}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40010308 	.word	0x40010308
 8006368:	080189f4 	.word	0x080189f4

0800636c <_ZN10Components9init_OA_4Ev>:

void Components::init_OA_4(void){
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

	  hopamp4_ptr->Instance = OPAMP4;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <_ZN10Components9init_OA_4Ev+0x80>)
 800637a:	601a      	str	r2, [r3, #0]
	  hopamp4_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	605a      	str	r2, [r3, #4]
	  hopamp4_ptr->Init.Mode = OPAMP_PGA_MODE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	2240      	movs	r2, #64	; 0x40
 800638a:	609a      	str	r2, [r3, #8]
	  hopamp4_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	2200      	movs	r2, #0
 8006392:	611a      	str	r2, [r3, #16]
	  hopamp4_ptr->Init.InternalOutput = ENABLE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	2201      	movs	r2, #1
 800639a:	751a      	strb	r2, [r3, #20]
	  hopamp4_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	2200      	movs	r2, #0
 80063a2:	619a      	str	r2, [r3, #24]
	  hopamp4_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2200      	movs	r2, #0
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp4_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp4_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	2200      	movs	r2, #0
 80063bc:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp4_ptr) != HAL_OK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	4618      	mov	r0, r3
 80063c4:	f004 fec2 	bl	800b14c <HAL_OPAMP_Init>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <_ZN10Components9init_OA_4Ev+0x78>
	  {
	    this->Error_Handler();
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff f949 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA4 init");
 80063de:	4804      	ldr	r0, [pc, #16]	; (80063f0 <_ZN10Components9init_OA_4Ev+0x84>)
 80063e0:	f010 f800 	bl	80163e4 <iprintf>

	  }
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	4001030c 	.word	0x4001030c
 80063f0:	08018a0c 	.word	0x08018a0c

080063f4 <_ZN10Components9init_OA_5Ev>:

void Components::init_OA_5(void){
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

	  hopamp5_ptr->Instance = OPAMP5;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006400:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <_ZN10Components9init_OA_5Ev+0x80>)
 8006402:	601a      	str	r2, [r3, #0]
	  hopamp5_ptr->Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006408:	2200      	movs	r2, #0
 800640a:	605a      	str	r2, [r3, #4]
	  hopamp5_ptr->Init.Mode = OPAMP_PGA_MODE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006410:	2240      	movs	r2, #64	; 0x40
 8006412:	609a      	str	r2, [r3, #8]
	  hopamp5_ptr->Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	2200      	movs	r2, #0
 800641a:	611a      	str	r2, [r3, #16]
	  hopamp5_ptr->Init.InternalOutput = ENABLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	2201      	movs	r2, #1
 8006422:	751a      	strb	r2, [r3, #20]
	  hopamp5_ptr->Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	2200      	movs	r2, #0
 800642a:	619a      	str	r2, [r3, #24]
	  hopamp5_ptr->Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	2200      	movs	r2, #0
 8006432:	625a      	str	r2, [r3, #36]	; 0x24
	  hopamp5_ptr->Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
	  hopamp5_ptr->Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006442:	2200      	movs	r2, #0
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_OPAMP_Init(hopamp5_ptr) != HAL_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644a:	4618      	mov	r0, r3
 800644c:	f004 fe7e 	bl	800b14c <HAL_OPAMP_Init>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	bf14      	ite	ne
 8006456:	2301      	movne	r3, #1
 8006458:	2300      	moveq	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <_ZN10Components9init_OA_5Ev+0x78>
	  {
	    this->Error_Handler();
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff f905 	bl	8005670 <_ZN10Components13Error_HandlerEv>
	    printf("problem with OA5 init");
 8006466:	4804      	ldr	r0, [pc, #16]	; (8006478 <_ZN10Components9init_OA_5Ev+0x84>)
 8006468:	f00f ffbc 	bl	80163e4 <iprintf>

	  }

}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40010310 	.word	0x40010310
 8006478:	08018a24 	.word	0x08018a24

0800647c <_ZN10Components9get_ADC_1Ev>:

ADC_HandleTypeDef* Components::get_ADC_1(void){
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

	return hadc1_ptr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <_ZN10Components9get_ADC_2Ev>:

ADC_HandleTypeDef* Components::get_ADC_2(void){
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

	return &hadc2;
 800649c:	4b03      	ldr	r3, [pc, #12]	; (80064ac <_ZN10Components9get_ADC_2Ev+0x18>)
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000b0c 	.word	0x20000b0c

080064b0 <_ZN10Components9get_ADC_5Ev>:

ADC_HandleTypeDef* Components::get_ADC_5(void){
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

	return &hadc5;
 80064b8:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <_ZN10Components9get_ADC_5Ev+0x18>)

}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000b78 	.word	0x20000b78

080064cc <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9ConvertorP9Altimeter>:
#include "debugger.h"

Debugger::Debugger(SBUS *sbus, MavlinkControl* mavlink, Convertor *convertor, Altimeter* altimeter){
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]

	this->_sbus = sbus;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	601a      	str	r2, [r3, #0]
	this->_convertor = convertor;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	605a      	str	r2, [r3, #4]
	this->_mavlink = mavlink;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	609a      	str	r2, [r3, #8]
	this->_altimeter = altimeter;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	60da      	str	r2, [r3, #12]

}
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <main>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;



int main(void){
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8006506:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes
	 * the Flash interface and the Systick. */
	HAL_Init();
 8006508:	f001 f87f 	bl	800760a <HAL_Init>
	//Initialize clock/DMA/... configurations and components.
	HAL_Delay(100);
 800650c:	2064      	movs	r0, #100	; 0x64
 800650e:	f001 f8ed 	bl	80076ec <HAL_Delay>
	Initializer init(&huart1, &huart2);
 8006512:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006516:	4a39      	ldr	r2, [pc, #228]	; (80065fc <main+0xfc>)
 8006518:	4939      	ldr	r1, [pc, #228]	; (8006600 <main+0x100>)
 800651a:	4618      	mov	r0, r3
 800651c:	f7fb f8c6 	bl	80016ac <_ZN11InitializerC1EP20__UART_HandleTypeDefS1_>
	init.init_Configs();
 8006520:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006524:	4618      	mov	r0, r3
 8006526:	f7fb f8dd 	bl	80016e4 <_ZN11Initializer12init_ConfigsEv>

	Components components;
 800652a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800652e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8006532:	4a34      	ldr	r2, [pc, #208]	; (8006604 <main+0x104>)
 8006534:	4618      	mov	r0, r3
 8006536:	4611      	mov	r1, r2
 8006538:	2344      	movs	r3, #68	; 0x44
 800653a:	461a      	mov	r2, r3
 800653c:	f00f f9f2 	bl	8015924 <memcpy>
	components.init_Components();
 8006540:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff f8b3 	bl	80056b0 <_ZN10Components15init_ComponentsEv>

	HAL_Delay(100);
 800654a:	2064      	movs	r0, #100	; 0x64
 800654c:	f001 f8ce 	bl	80076ec <HAL_Delay>
	//SBUS, Convertor, Debugger Objects
	SBUS sbus(&huart2);
 8006550:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8006554:	4929      	ldr	r1, [pc, #164]	; (80065fc <main+0xfc>)
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe f8e8 	bl	800472c <_ZN4SBUSC1EP20__UART_HandleTypeDef>
	Altimeter altimeter(&hi2c2);
 800655c:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8006560:	4929      	ldr	r1, [pc, #164]	; (8006608 <main+0x108>)
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe fdc2 	bl	80050ec <_ZN9AltimeterC1EP19__I2C_HandleTypeDef>
	MavlinkControl mavlink(&huart1, &altimeter);
 8006568:	f207 527c 	addw	r2, r7, #1404	; 0x57c
 800656c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006570:	4923      	ldr	r1, [pc, #140]	; (8006600 <main+0x100>)
 8006572:	4618      	mov	r0, r3
 8006574:	f7fd fea2 	bl	80042bc <_ZN14MavlinkControlC1EP20__UART_HandleTypeDefP9Altimeter>

	Convertor convertor(&sbus, &init, &components, &altimeter);
 8006578:	f507 64be 	add.w	r4, r7, #1520	; 0x5f0
 800657c:	f207 6234 	addw	r2, r7, #1588	; 0x634
 8006580:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8006584:	f107 0010 	add.w	r0, r7, #16
 8006588:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	4623      	mov	r3, r4
 8006590:	f7fa fd04 	bl	8000f9c <_ZN9ConvertorC1EP4SBUSP11InitializerP10ComponentsP9Altimeter>
	Debugger debugger(&sbus, &mavlink, &convertor, &altimeter);
 8006594:	f107 0410 	add.w	r4, r7, #16
 8006598:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800659c:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 80065a0:	4638      	mov	r0, r7
 80065a2:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4623      	mov	r3, r4
 80065aa:	f7ff ff8f 	bl	80064cc <_ZN8DebuggerC1EP4SBUSP14MavlinkControlP9ConvertorP9Altimeter>


	HAL_Delay(5000);
 80065ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80065b2:	f001 f89b 	bl	80076ec <HAL_Delay>

	printf("\r\n sanity check \r \n");
 80065b6:	4815      	ldr	r0, [pc, #84]	; (800660c <main+0x10c>)
 80065b8:	f00f ff9a 	bl	80164f0 <puts>


    altimeter.init_altimeter();
 80065bc:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fdd3 	bl	800516c <_ZN9Altimeter14init_altimeterEv>

	/* Main loop */
	while (1){


		sbus.update();
 80065c6:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe f8cc 	bl	8004768 <_ZN4SBUS6updateEv>
		convertor.process();
 80065d0:	f107 0310 	add.w	r3, r7, #16
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fb f849 	bl	800166c <_ZN9Convertor7processEv>
		mavlink.update_TX();
 80065da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fd ff78 	bl	80044d4 <_ZN14MavlinkControl9update_TXEv>
		//mavlink.update_RX();
		altimeter.read_altitude();
 80065e4:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe fea1 	bl	8005330 <_ZN9Altimeter13read_altitudeEv>
		//debugger.displayMavlink_header();
		//debugger.displaySBUS_channels();
		//debugger.displayMavlink_RAW();


		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin);
 80065ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065f2:	4807      	ldr	r0, [pc, #28]	; (8006610 <main+0x110>)
 80065f4:	f003 ff7a 	bl	800a4ec <HAL_GPIO_TogglePin>
		sbus.update();
 80065f8:	e7e5      	b.n	80065c6 <main+0xc6>
 80065fa:	bf00      	nop
 80065fc:	20000cc0 	.word	0x20000cc0
 8006600:	20000c30 	.word	0x20000c30
 8006604:	08018a50 	.word	0x08018a50
 8006608:	20000be4 	.word	0x20000be4
 800660c:	08018a3c 	.word	0x08018a3c
 8006610:	48000800 	.word	0x48000800

08006614 <Error_Handler>:
}




void Error_Handler(void){
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0


	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800661a:	2300      	movs	r3, #0
 800661c:	71fb      	strb	r3, [r7, #7]
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b1d      	cmp	r3, #29
 8006622:	d80e      	bhi.n	8006642 <Error_Handler+0x2e>
		HAL_GPIO_TogglePin(gled_pc14_GPIO_Port, gled_pc14_Pin); //signal led
 8006624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006628:	4808      	ldr	r0, [pc, #32]	; (800664c <Error_Handler+0x38>)
 800662a:	f003 ff5f 	bl	800a4ec <HAL_GPIO_TogglePin>
		printf("MESSAGE FROM MAIN ERROR HANDLER \r\n");
 800662e:	4808      	ldr	r0, [pc, #32]	; (8006650 <Error_Handler+0x3c>)
 8006630:	f00f ff5e 	bl	80164f0 <puts>
		HAL_Delay(100);
 8006634:	2064      	movs	r0, #100	; 0x64
 8006636:	f001 f859 	bl	80076ec <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++){		/* Toggle LED signal for error */
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	3301      	adds	r3, #1
 800663e:	71fb      	strb	r3, [r7, #7]
 8006640:	e7ed      	b.n	800661e <Error_Handler+0xa>
	}

}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	48000800 	.word	0x48000800
 8006650:	08018a94 	.word	0x08018a94

08006654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800665a:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <HAL_MspInit+0x44>)
 800665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665e:	4a0e      	ldr	r2, [pc, #56]	; (8006698 <HAL_MspInit+0x44>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6613      	str	r3, [r2, #96]	; 0x60
 8006666:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <HAL_MspInit+0x44>)
 8006668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	607b      	str	r3, [r7, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_MspInit+0x44>)
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	4a08      	ldr	r2, [pc, #32]	; (8006698 <HAL_MspInit+0x44>)
 8006678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667c:	6593      	str	r3, [r2, #88]	; 0x58
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_MspInit+0x44>)
 8006680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000

0800669c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b0a2      	sub	sp, #136	; 0x88
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066b4:	f107 0320 	add.w	r3, r7, #32
 80066b8:	2254      	movs	r2, #84	; 0x54
 80066ba:	2100      	movs	r1, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f00f f93f 	bl	8015940 <memset>
  if(hadc->Instance==ADC1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ca:	f040 8087 	bne.w	80067dc <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80066d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80066d8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066da:	f107 0320 	add.w	r3, r7, #32
 80066de:	4618      	mov	r0, r3
 80066e0:	f007 fa66 	bl	800dbb0 <HAL_RCCEx_PeriphCLKConfig>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80066ea:	f7ff ff93 	bl	8006614 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80066ee:	4b8f      	ldr	r3, [pc, #572]	; (800692c <HAL_ADC_MspInit+0x290>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a8d      	ldr	r2, [pc, #564]	; (800692c <HAL_ADC_MspInit+0x290>)
 80066f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80066f8:	4b8c      	ldr	r3, [pc, #560]	; (800692c <HAL_ADC_MspInit+0x290>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10b      	bne.n	8006718 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006700:	4b8b      	ldr	r3, [pc, #556]	; (8006930 <HAL_ADC_MspInit+0x294>)
 8006702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006704:	4a8a      	ldr	r2, [pc, #552]	; (8006930 <HAL_ADC_MspInit+0x294>)
 8006706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800670a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800670c:	4b88      	ldr	r3, [pc, #544]	; (8006930 <HAL_ADC_MspInit+0x294>)
 800670e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006714:	61fb      	str	r3, [r7, #28]
 8006716:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006718:	4b85      	ldr	r3, [pc, #532]	; (8006930 <HAL_ADC_MspInit+0x294>)
 800671a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671c:	4a84      	ldr	r2, [pc, #528]	; (8006930 <HAL_ADC_MspInit+0x294>)
 800671e:	f043 0301 	orr.w	r3, r3, #1
 8006722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006724:	4b82      	ldr	r3, [pc, #520]	; (8006930 <HAL_ADC_MspInit+0x294>)
 8006726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006730:	4b7f      	ldr	r3, [pc, #508]	; (8006930 <HAL_ADC_MspInit+0x294>)
 8006732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006734:	4a7e      	ldr	r2, [pc, #504]	; (8006930 <HAL_ADC_MspInit+0x294>)
 8006736:	f043 0302 	orr.w	r3, r3, #2
 800673a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800673c:	4b7c      	ldr	r3, [pc, #496]	; (8006930 <HAL_ADC_MspInit+0x294>)
 800673e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8006748:	2301      	movs	r3, #1
 800674a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800674c:	2303      	movs	r3, #3
 800674e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006750:	2300      	movs	r3, #0
 8006752:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8006754:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006758:	4619      	mov	r1, r3
 800675a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800675e:	f003 fd2b 	bl	800a1b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_LIN3_Pin|ADC_LIN2_Pin|ADC_LIN1_Pin;
 8006762:	f641 0302 	movw	r3, #6146	; 0x1802
 8006766:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006768:	2303      	movs	r3, #3
 800676a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676c:	2300      	movs	r3, #0
 800676e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006770:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006774:	4619      	mov	r1, r3
 8006776:	486f      	ldr	r0, [pc, #444]	; (8006934 <HAL_ADC_MspInit+0x298>)
 8006778:	f003 fd1e 	bl	800a1b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800677c:	4b6e      	ldr	r3, [pc, #440]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 800677e:	4a6f      	ldr	r2, [pc, #444]	; (800693c <HAL_ADC_MspInit+0x2a0>)
 8006780:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006782:	4b6d      	ldr	r3, [pc, #436]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 8006784:	2205      	movs	r2, #5
 8006786:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006788:	4b6b      	ldr	r3, [pc, #428]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 800678a:	2200      	movs	r2, #0
 800678c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800678e:	4b6a      	ldr	r3, [pc, #424]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 8006790:	2200      	movs	r2, #0
 8006792:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006794:	4b68      	ldr	r3, [pc, #416]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 8006796:	2280      	movs	r2, #128	; 0x80
 8006798:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800679a:	4b67      	ldr	r3, [pc, #412]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 800679c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067a2:	4b65      	ldr	r3, [pc, #404]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 80067a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80067aa:	4b63      	ldr	r3, [pc, #396]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80067b0:	4b61      	ldr	r3, [pc, #388]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 80067b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80067b8:	485f      	ldr	r0, [pc, #380]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 80067ba:	f003 f9cb 	bl	8009b54 <HAL_DMA_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 80067c4:	f7ff ff26 	bl	8006614 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a5b      	ldr	r2, [pc, #364]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54
 80067ce:	4a5a      	ldr	r2, [pc, #360]	; (8006938 <HAL_ADC_MspInit+0x29c>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */
    printf("we reached link with dma \r\n");
 80067d4:	485a      	ldr	r0, [pc, #360]	; (8006940 <HAL_ADC_MspInit+0x2a4>)
 80067d6:	f00f fe8b 	bl	80164f0 <puts>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80067da:	e0a3      	b.n	8006924 <HAL_ADC_MspInit+0x288>
  else if(hadc->Instance==ADC2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_ADC_MspInit+0x2a8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d151      	bne.n	800688a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80067e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80067ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80067f0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80067f2:	f107 0320 	add.w	r3, r7, #32
 80067f6:	4618      	mov	r0, r3
 80067f8:	f007 f9da 	bl	800dbb0 <HAL_RCCEx_PeriphCLKConfig>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 8006802:	f7ff ff07 	bl	8006614 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006806:	4b49      	ldr	r3, [pc, #292]	; (800692c <HAL_ADC_MspInit+0x290>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	4a47      	ldr	r2, [pc, #284]	; (800692c <HAL_ADC_MspInit+0x290>)
 800680e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006810:	4b46      	ldr	r3, [pc, #280]	; (800692c <HAL_ADC_MspInit+0x290>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d10b      	bne.n	8006830 <HAL_ADC_MspInit+0x194>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006818:	4b45      	ldr	r3, [pc, #276]	; (8006930 <HAL_ADC_MspInit+0x294>)
 800681a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681c:	4a44      	ldr	r2, [pc, #272]	; (8006930 <HAL_ADC_MspInit+0x294>)
 800681e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006824:	4b42      	ldr	r3, [pc, #264]	; (8006930 <HAL_ADC_MspInit+0x294>)
 8006826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	693b      	ldr	r3, [r7, #16]
    hdma_adc2.Instance = DMA1_Channel3;
 8006830:	4b45      	ldr	r3, [pc, #276]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006832:	4a46      	ldr	r2, [pc, #280]	; (800694c <HAL_ADC_MspInit+0x2b0>)
 8006834:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8006836:	4b44      	ldr	r3, [pc, #272]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006838:	2224      	movs	r2, #36	; 0x24
 800683a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800683c:	4b42      	ldr	r3, [pc, #264]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006842:	4b41      	ldr	r3, [pc, #260]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006844:	2200      	movs	r2, #0
 8006846:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006848:	4b3f      	ldr	r3, [pc, #252]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 800684a:	2280      	movs	r2, #128	; 0x80
 800684c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800684e:	4b3e      	ldr	r3, [pc, #248]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006854:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006856:	4b3c      	ldr	r3, [pc, #240]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800685c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800685e:	4b3a      	ldr	r3, [pc, #232]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006860:	2200      	movs	r2, #0
 8006862:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006864:	4b38      	ldr	r3, [pc, #224]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006866:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800686a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800686c:	4836      	ldr	r0, [pc, #216]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 800686e:	f003 f971 	bl	8009b54 <HAL_DMA_Init>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8006878:	f7ff fecc 	bl	8006614 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a32      	ldr	r2, [pc, #200]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006880:	655a      	str	r2, [r3, #84]	; 0x54
 8006882:	4a31      	ldr	r2, [pc, #196]	; (8006948 <HAL_ADC_MspInit+0x2ac>)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006888:	e04c      	b.n	8006924 <HAL_ADC_MspInit+0x288>
  else if(hadc->Instance==ADC5)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a30      	ldr	r2, [pc, #192]	; (8006950 <HAL_ADC_MspInit+0x2b4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d147      	bne.n	8006924 <HAL_ADC_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8006894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006898:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800689a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800689e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068a0:	f107 0320 	add.w	r3, r7, #32
 80068a4:	4618      	mov	r0, r3
 80068a6:	f007 f983 	bl	800dbb0 <HAL_RCCEx_PeriphCLKConfig>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80068b0:	f7ff feb0 	bl	8006614 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80068b4:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <HAL_ADC_MspInit+0x294>)
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	4a1d      	ldr	r2, [pc, #116]	; (8006930 <HAL_ADC_MspInit+0x294>)
 80068ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068c0:	4b1b      	ldr	r3, [pc, #108]	; (8006930 <HAL_ADC_MspInit+0x294>)
 80068c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 80068cc:	4b21      	ldr	r3, [pc, #132]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068ce:	4a22      	ldr	r2, [pc, #136]	; (8006958 <HAL_ADC_MspInit+0x2bc>)
 80068d0:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80068d2:	4b20      	ldr	r3, [pc, #128]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068d4:	2227      	movs	r2, #39	; 0x27
 80068d6:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068da:	2200      	movs	r2, #0
 80068dc:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068e6:	2280      	movs	r2, #128	; 0x80
 80068e8:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068ea:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068f0:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068f2:	4b18      	ldr	r3, [pc, #96]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068f8:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 80068fa:	4b16      	ldr	r3, [pc, #88]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006900:	4b14      	ldr	r3, [pc, #80]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 8006902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8006908:	4812      	ldr	r0, [pc, #72]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 800690a:	f003 f923 	bl	8009b54 <HAL_DMA_Init>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8006914:	f7ff fe7e 	bl	8006614 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
 800691e:	4a0d      	ldr	r2, [pc, #52]	; (8006954 <HAL_ADC_MspInit+0x2b8>)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006924:	bf00      	nop
 8006926:	3788      	adds	r7, #136	; 0x88
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000f30 	.word	0x20000f30
 8006930:	40021000 	.word	0x40021000
 8006934:	48000400 	.word	0x48000400
 8006938:	20000d50 	.word	0x20000d50
 800693c:	4002001c 	.word	0x4002001c
 8006940:	08018ab8 	.word	0x08018ab8
 8006944:	50000100 	.word	0x50000100
 8006948:	20000db0 	.word	0x20000db0
 800694c:	40020030 	.word	0x40020030
 8006950:	50000600 	.word	0x50000600
 8006954:	20000e10 	.word	0x20000e10
 8006958:	40020044 	.word	0x40020044

0800695c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	; 0x30
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006964:	f107 031c 	add.w	r3, r7, #28
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	605a      	str	r2, [r3, #4]
 800696e:	609a      	str	r2, [r3, #8]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a3d      	ldr	r2, [pc, #244]	; (8006a70 <HAL_COMP_MspInit+0x114>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d119      	bne.n	80069b2 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800697e:	4b3d      	ldr	r3, [pc, #244]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 8006980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006982:	4a3c      	ldr	r2, [pc, #240]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800698a:	4b3a      	ldr	r3, [pc, #232]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 800698c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006996:	2380      	movs	r3, #128	; 0x80
 8006998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800699a:	2303      	movs	r3, #3
 800699c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069a2:	f107 031c 	add.w	r3, r7, #28
 80069a6:	4619      	mov	r1, r3
 80069a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069ac:	f003 fc04 	bl	800a1b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP7_MspInit 1 */

  /* USER CODE END COMP7_MspInit 1 */
  }

}
 80069b0:	e05a      	b.n	8006a68 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a30      	ldr	r2, [pc, #192]	; (8006a78 <HAL_COMP_MspInit+0x11c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d118      	bne.n	80069ee <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069bc:	4b2d      	ldr	r3, [pc, #180]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 80069be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c0:	4a2c      	ldr	r2, [pc, #176]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 80069c2:	f043 0302 	orr.w	r3, r3, #2
 80069c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069c8:	4b2a      	ldr	r3, [pc, #168]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 80069ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin;
 80069d4:	2301      	movs	r3, #1
 80069d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069d8:	2303      	movs	r3, #3
 80069da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN3_GPIO_Port, &GPIO_InitStruct);
 80069e0:	f107 031c 	add.w	r3, r7, #28
 80069e4:	4619      	mov	r1, r3
 80069e6:	4825      	ldr	r0, [pc, #148]	; (8006a7c <HAL_COMP_MspInit+0x120>)
 80069e8:	f003 fbe6 	bl	800a1b8 <HAL_GPIO_Init>
}
 80069ec:	e03c      	b.n	8006a68 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP5)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <HAL_COMP_MspInit+0x124>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d119      	bne.n	8006a2c <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069f8:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 80069fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a04:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 8006a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN2_Pin;
 8006a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a16:	2303      	movs	r3, #3
 8006a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN2_GPIO_Port, &GPIO_InitStruct);
 8006a1e:	f107 031c 	add.w	r3, r7, #28
 8006a22:	4619      	mov	r1, r3
 8006a24:	4815      	ldr	r0, [pc, #84]	; (8006a7c <HAL_COMP_MspInit+0x120>)
 8006a26:	f003 fbc7 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006a2a:	e01d      	b.n	8006a68 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP7)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a14      	ldr	r2, [pc, #80]	; (8006a84 <HAL_COMP_MspInit+0x128>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d118      	bne.n	8006a68 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a36:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	4a0e      	ldr	r2, [pc, #56]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 8006a3c:	f043 0302 	orr.w	r3, r3, #2
 8006a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <HAL_COMP_MspInit+0x118>)
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin;
 8006a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a54:	2303      	movs	r3, #3
 8006a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHUNT_LIN1_GPIO_Port, &GPIO_InitStruct);
 8006a5c:	f107 031c 	add.w	r3, r7, #28
 8006a60:	4619      	mov	r1, r3
 8006a62:	4806      	ldr	r0, [pc, #24]	; (8006a7c <HAL_COMP_MspInit+0x120>)
 8006a64:	f003 fba8 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006a68:	bf00      	nop
 8006a6a:	3730      	adds	r7, #48	; 0x30
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40010204 	.word	0x40010204
 8006a74:	40021000 	.word	0x40021000
 8006a78:	4001020c 	.word	0x4001020c
 8006a7c:	48000400 	.word	0x48000400
 8006a80:	40010210 	.word	0x40010210
 8006a84:	40010218 	.word	0x40010218

08006a88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a25      	ldr	r2, [pc, #148]	; (8006b2c <HAL_DAC_MspInit+0xa4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d10c      	bne.n	8006ab4 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006a9a:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9e:	4a24      	ldr	r2, [pc, #144]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aa6:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8006ab2:	e034      	b.n	8006b1e <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC2)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <HAL_DAC_MspInit+0xac>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d10c      	bne.n	8006ad8 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006abe:	4b1c      	ldr	r3, [pc, #112]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aca:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	693b      	ldr	r3, [r7, #16]
}
 8006ad6:	e022      	b.n	8006b1e <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC3)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a16      	ldr	r2, [pc, #88]	; (8006b38 <HAL_DAC_MspInit+0xb0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d10c      	bne.n	8006afc <HAL_DAC_MspInit+0x74>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
}
 8006afa:	e010      	b.n	8006b1e <HAL_DAC_MspInit+0x96>
  else if(hdac->Instance==DAC4)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0e      	ldr	r2, [pc, #56]	; (8006b3c <HAL_DAC_MspInit+0xb4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d10b      	bne.n	8006b1e <HAL_DAC_MspInit+0x96>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b12:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <HAL_DAC_MspInit+0xa8>)
 8006b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	50000800 	.word	0x50000800
 8006b30:	40021000 	.word	0x40021000
 8006b34:	50000c00 	.word	0x50000c00
 8006b38:	50001000 	.word	0x50001000
 8006b3c:	50001400 	.word	0x50001400

08006b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b09e      	sub	sp, #120	; 0x78
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	60da      	str	r2, [r3, #12]
 8006b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b58:	f107 0310 	add.w	r3, r7, #16
 8006b5c:	2254      	movs	r2, #84	; 0x54
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f00e feed 	bl	8015940 <memset>
  if(hi2c->Instance==I2C2)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <HAL_I2C_MspInit+0xb8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d13f      	bne.n	8006bf0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006b70:	2380      	movs	r3, #128	; 0x80
 8006b72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006b74:	2300      	movs	r3, #0
 8006b76:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b78:	f107 0310 	add.w	r3, r7, #16
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f007 f817 	bl	800dbb0 <HAL_RCCEx_PeriphCLKConfig>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006b88:	f7ff fd44 	bl	8006614 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <HAL_I2C_MspInit+0xbc>)
 8006b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b90:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <HAL_I2C_MspInit+0xbc>)
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b98:	4b18      	ldr	r3, [pc, #96]	; (8006bfc <HAL_I2C_MspInit+0xbc>)
 8006b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ba8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006baa:	2312      	movs	r3, #18
 8006bac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bc4:	f003 faf8 	bl	800a1b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <HAL_I2C_MspInit+0xbc>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	4a0b      	ldr	r2, [pc, #44]	; (8006bfc <HAL_I2C_MspInit+0xbc>)
 8006bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <HAL_I2C_MspInit+0xbc>)
 8006bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8006be0:	2200      	movs	r2, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	2021      	movs	r0, #33	; 0x21
 8006be6:	f002 fdb6 	bl	8009756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006bea:	2021      	movs	r0, #33	; 0x21
 8006bec:	f002 fdcd 	bl	800978a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006bf0:	bf00      	nop
 8006bf2:	3778      	adds	r7, #120	; 0x78
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40005800 	.word	0x40005800
 8006bfc:	40021000 	.word	0x40021000

08006c00 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	; 0x30
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 031c 	add.w	r3, r7, #28
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a4d      	ldr	r2, [pc, #308]	; (8006d54 <HAL_OPAMP_MspInit+0x154>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d119      	bne.n	8006c56 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c22:	4b4d      	ldr	r3, [pc, #308]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	4a4c      	ldr	r2, [pc, #304]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c2e:	4b4a      	ldr	r3, [pc, #296]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = SHUNT_MOTOR_Pin|GPIO_PIN_3;
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c46:	f107 031c 	add.w	r3, r7, #28
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c50:	f003 fab2 	bl	800a1b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP5_MspInit 1 */

  /* USER CODE END OPAMP5_MspInit 1 */
  }

}
 8006c54:	e079      	b.n	8006d4a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a40      	ldr	r2, [pc, #256]	; (8006d5c <HAL_OPAMP_MspInit+0x15c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d119      	bne.n	8006c94 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c60:	4b3d      	ldr	r3, [pc, #244]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c64:	4a3c      	ldr	r2, [pc, #240]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c6c:	4b3a      	ldr	r3, [pc, #232]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006c78:	23a0      	movs	r3, #160	; 0xa0
 8006c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c84:	f107 031c 	add.w	r3, r7, #28
 8006c88:	4619      	mov	r1, r3
 8006c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c8e:	f003 fa93 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006c92:	e05a      	b.n	8006d4a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a31      	ldr	r2, [pc, #196]	; (8006d60 <HAL_OPAMP_MspInit+0x160>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d118      	bne.n	8006cd0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c9e:	4b2e      	ldr	r3, [pc, #184]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca2:	4a2d      	ldr	r2, [pc, #180]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006ca4:	f043 0302 	orr.w	r3, r3, #2
 8006ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006caa:	4b2b      	ldr	r3, [pc, #172]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SHUNT_LIN3_Pin|GPIO_PIN_2;
 8006cb6:	2305      	movs	r3, #5
 8006cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cc2:	f107 031c 	add.w	r3, r7, #28
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4826      	ldr	r0, [pc, #152]	; (8006d64 <HAL_OPAMP_MspInit+0x164>)
 8006cca:	f003 fa75 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006cce:	e03c      	b.n	8006d4a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP4)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a24      	ldr	r2, [pc, #144]	; (8006d68 <HAL_OPAMP_MspInit+0x168>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d119      	bne.n	8006d0e <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cda:	4b1f      	ldr	r3, [pc, #124]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006ce0:	f043 0302 	orr.w	r3, r3, #2
 8006ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|SHUNT_LIN2_Pin;
 8006cf2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8006cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d00:	f107 031c 	add.w	r3, r7, #28
 8006d04:	4619      	mov	r1, r3
 8006d06:	4817      	ldr	r0, [pc, #92]	; (8006d64 <HAL_OPAMP_MspInit+0x164>)
 8006d08:	f003 fa56 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006d0c:	e01d      	b.n	8006d4a <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <HAL_OPAMP_MspInit+0x16c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d118      	bne.n	8006d4a <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d18:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1c:	4a0e      	ldr	r2, [pc, #56]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006d1e:	f043 0302 	orr.w	r3, r3, #2
 8006d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <HAL_OPAMP_MspInit+0x158>)
 8006d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	60bb      	str	r3, [r7, #8]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHUNT_LIN1_Pin|GPIO_PIN_15;
 8006d30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d36:	2303      	movs	r3, #3
 8006d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d3e:	f107 031c 	add.w	r3, r7, #28
 8006d42:	4619      	mov	r1, r3
 8006d44:	4807      	ldr	r0, [pc, #28]	; (8006d64 <HAL_OPAMP_MspInit+0x164>)
 8006d46:	f003 fa37 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006d4a:	bf00      	nop
 8006d4c:	3730      	adds	r7, #48	; 0x30
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40010300 	.word	0x40010300
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	40010304 	.word	0x40010304
 8006d60:	40010308 	.word	0x40010308
 8006d64:	48000400 	.word	0x48000400
 8006d68:	4001030c 	.word	0x4001030c
 8006d6c:	40010310 	.word	0x40010310

08006d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b089      	sub	sp, #36	; 0x24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a37      	ldr	r2, [pc, #220]	; (8006e5c <HAL_TIM_Base_MspInit+0xec>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d10c      	bne.n	8006d9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006d82:	4b37      	ldr	r3, [pc, #220]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d86:	4a36      	ldr	r2, [pc, #216]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8006d8e:	4b34      	ldr	r3, [pc, #208]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8006d9a:	e058      	b.n	8006e4e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da4:	d10c      	bne.n	8006dc0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006da6:	4b2e      	ldr	r3, [pc, #184]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	4a2d      	ldr	r2, [pc, #180]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6593      	str	r3, [r2, #88]	; 0x58
 8006db2:	4b2b      	ldr	r3, [pc, #172]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	69bb      	ldr	r3, [r7, #24]
}
 8006dbe:	e046      	b.n	8006e4e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <HAL_TIM_Base_MspInit+0xf4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10c      	bne.n	8006de4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006dca:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dce:	4a24      	ldr	r2, [pc, #144]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006dd0:	f043 0304 	orr.w	r3, r3, #4
 8006dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8006dd6:	4b22      	ldr	r3, [pc, #136]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	697b      	ldr	r3, [r7, #20]
}
 8006de2:	e034      	b.n	8006e4e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <HAL_TIM_Base_MspInit+0xf8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006dee:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df2:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006df8:	6613      	str	r3, [r2, #96]	; 0x60
 8006dfa:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	693b      	ldr	r3, [r7, #16]
}
 8006e06:	e022      	b.n	8006e4e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM16)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <HAL_TIM_Base_MspInit+0xfc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10c      	bne.n	8006e2c <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e16:	4a12      	ldr	r2, [pc, #72]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8006e1e:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
}
 8006e2a:	e010      	b.n	8006e4e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM20)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <HAL_TIM_Base_MspInit+0x100>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d10b      	bne.n	8006e4e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8006e36:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3a:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e40:	6613      	str	r3, [r2, #96]	; 0x60
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <HAL_TIM_Base_MspInit+0xf0>)
 8006e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e4a:	60bb      	str	r3, [r7, #8]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
}
 8006e4e:	bf00      	nop
 8006e50:	3724      	adds	r7, #36	; 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40013400 	.word	0x40013400
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40015000 	.word	0x40015000

08006e74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <HAL_TIM_PWM_MspInit+0x38>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d10b      	bne.n	8006e9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006e86:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8006e8c:	f043 0302 	orr.w	r3, r3, #2
 8006e90:	6593      	str	r3, [r2, #88]	; 0x58
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40021000 	.word	0x40021000

08006eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08e      	sub	sp, #56	; 0x38
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	60da      	str	r2, [r3, #12]
 8006eca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a65      	ldr	r2, [pc, #404]	; (8007068 <HAL_TIM_MspPostInit+0x1b4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d11c      	bne.n	8006f10 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ed6:	4b65      	ldr	r3, [pc, #404]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	4a64      	ldr	r2, [pc, #400]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006edc:	f043 0320 	orr.w	r3, r3, #32
 8006ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ee2:	4b62      	ldr	r3, [pc, #392]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	623b      	str	r3, [r7, #32]
 8006eec:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_3N_Pin;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006efa:	2300      	movs	r3, #0
 8006efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8006efe:	2306      	movs	r3, #6
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_TIM1_3N_GPIO_Port, &GPIO_InitStruct);
 8006f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f06:	4619      	mov	r1, r3
 8006f08:	4859      	ldr	r0, [pc, #356]	; (8007070 <HAL_TIM_MspPostInit+0x1bc>)
 8006f0a:	f003 f955 	bl	800a1b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8006f0e:	e0a6      	b.n	800705e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a57      	ldr	r2, [pc, #348]	; (8007074 <HAL_TIM_MspPostInit+0x1c0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d11c      	bne.n	8006f54 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f1a:	4b54      	ldr	r3, [pc, #336]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1e:	4a53      	ldr	r2, [pc, #332]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006f20:	f043 0302 	orr.w	r3, r3, #2
 8006f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f26:	4b51      	ldr	r3, [pc, #324]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	61fb      	str	r3, [r7, #28]
 8006f30:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LINEAR_RIN3_Pin|LINEAR_FIN3_Pin;
 8006f32:	2330      	movs	r3, #48	; 0x30
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f36:	2302      	movs	r3, #2
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f42:	2302      	movs	r3, #2
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	484a      	ldr	r0, [pc, #296]	; (8007078 <HAL_TIM_MspPostInit+0x1c4>)
 8006f4e:	f003 f933 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006f52:	e084      	b.n	800705e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM4)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a48      	ldr	r2, [pc, #288]	; (800707c <HAL_TIM_MspPostInit+0x1c8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d11d      	bne.n	8006f9a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f5e:	4b43      	ldr	r3, [pc, #268]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	4a42      	ldr	r2, [pc, #264]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006f64:	f043 0302 	orr.w	r3, r3, #2
 8006f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f6a:	4b40      	ldr	r3, [pc, #256]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LINEAR_RIN2_Pin|LINEAR_FIN2_TIM4CH3_Pin;
 8006f76:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f84:	2300      	movs	r3, #0
 8006f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f90:	4619      	mov	r1, r3
 8006f92:	4839      	ldr	r0, [pc, #228]	; (8007078 <HAL_TIM_MspPostInit+0x1c4>)
 8006f94:	f003 f910 	bl	800a1b8 <HAL_GPIO_Init>
}
 8006f98:	e061      	b.n	800705e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a38      	ldr	r2, [pc, #224]	; (8007080 <HAL_TIM_MspPostInit+0x1cc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d13a      	bne.n	800701a <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fa4:	4b31      	ldr	r3, [pc, #196]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa8:	4a30      	ldr	r2, [pc, #192]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006faa:	f043 0304 	orr.w	r3, r3, #4
 8006fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fb0:	4b2e      	ldr	r3, [pc, #184]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006fc2:	f043 0302 	orr.w	r3, r3, #2
 8006fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fc8:	4b28      	ldr	r3, [pc, #160]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8006fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LINEAR_FIN1_Pin;
 8006fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8006fe6:	2306      	movs	r3, #6
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_FIN1_GPIO_Port, &GPIO_InitStruct);
 8006fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4824      	ldr	r0, [pc, #144]	; (8007084 <HAL_TIM_MspPostInit+0x1d0>)
 8006ff2:	f003 f8e1 	bl	800a1b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINEAR_RIN1_TIM8CH3_Pin;
 8006ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007000:	2300      	movs	r3, #0
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007004:	2300      	movs	r3, #0
 8007006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8007008:	230a      	movs	r3, #10
 800700a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LINEAR_RIN1_TIM8CH3_GPIO_Port, &GPIO_InitStruct);
 800700c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007010:	4619      	mov	r1, r3
 8007012:	4819      	ldr	r0, [pc, #100]	; (8007078 <HAL_TIM_MspPostInit+0x1c4>)
 8007014:	f003 f8d0 	bl	800a1b8 <HAL_GPIO_Init>
}
 8007018:	e021      	b.n	800705e <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM16)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <HAL_TIM_MspPostInit+0x1d4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d11c      	bne.n	800705e <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	4a10      	ldr	r2, [pc, #64]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007030:	4b0e      	ldr	r3, [pc, #56]	; (800706c <HAL_TIM_MspPostInit+0x1b8>)
 8007032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_tim16_1_Pin;
 800703c:	2340      	movs	r3, #64	; 0x40
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007040:	2302      	movs	r3, #2
 8007042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007048:	2300      	movs	r3, #0
 800704a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800704c:	2301      	movs	r3, #1
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(led_tim16_1_GPIO_Port, &GPIO_InitStruct);
 8007050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800705a:	f003 f8ad 	bl	800a1b8 <HAL_GPIO_Init>
}
 800705e:	bf00      	nop
 8007060:	3738      	adds	r7, #56	; 0x38
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40021000 	.word	0x40021000
 8007070:	48001400 	.word	0x48001400
 8007074:	40000400 	.word	0x40000400
 8007078:	48000400 	.word	0x48000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40013400 	.word	0x40013400
 8007084:	48000800 	.word	0x48000800
 8007088:	40014400 	.word	0x40014400

0800708c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b0a2      	sub	sp, #136	; 0x88
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007094:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070a4:	f107 0320 	add.w	r3, r7, #32
 80070a8:	2254      	movs	r2, #84	; 0x54
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f00e fc47 	bl	8015940 <memset>
  if(huart->Instance==USART1)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a82      	ldr	r2, [pc, #520]	; (80072c0 <HAL_UART_MspInit+0x234>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	f040 808b 	bne.w	80071d4 <HAL_UART_MspInit+0x148>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80070be:	2301      	movs	r3, #1
 80070c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80070c6:	f107 0320 	add.w	r3, r7, #32
 80070ca:	4618      	mov	r0, r3
 80070cc:	f006 fd70 	bl	800dbb0 <HAL_RCCEx_PeriphCLKConfig>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80070d6:	f7ff fa9d 	bl	8006614 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80070da:	4b7a      	ldr	r3, [pc, #488]	; (80072c4 <HAL_UART_MspInit+0x238>)
 80070dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070de:	4a79      	ldr	r2, [pc, #484]	; (80072c4 <HAL_UART_MspInit+0x238>)
 80070e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070e4:	6613      	str	r3, [r2, #96]	; 0x60
 80070e6:	4b77      	ldr	r3, [pc, #476]	; (80072c4 <HAL_UART_MspInit+0x238>)
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070f2:	4b74      	ldr	r3, [pc, #464]	; (80072c4 <HAL_UART_MspInit+0x238>)
 80070f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f6:	4a73      	ldr	r2, [pc, #460]	; (80072c4 <HAL_UART_MspInit+0x238>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070fe:	4b71      	ldr	r3, [pc, #452]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800710a:	4b6e      	ldr	r3, [pc, #440]	; (80072c4 <HAL_UART_MspInit+0x238>)
 800710c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710e:	4a6d      	ldr	r2, [pc, #436]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007110:	f043 0302 	orr.w	r3, r3, #2
 8007114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007116:	4b6b      	ldr	r3, [pc, #428]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007126:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007128:	2302      	movs	r3, #2
 800712a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800712c:	2300      	movs	r3, #0
 800712e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007130:	2300      	movs	r3, #0
 8007132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007136:	2307      	movs	r3, #7
 8007138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800713c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007140:	4619      	mov	r1, r3
 8007142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007146:	f003 f837 	bl	800a1b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800714a:	2340      	movs	r3, #64	; 0x40
 800714c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800714e:	2302      	movs	r3, #2
 8007150:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007152:	2300      	movs	r3, #0
 8007154:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007156:	2300      	movs	r3, #0
 8007158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800715c:	2307      	movs	r3, #7
 800715e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007162:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007166:	4619      	mov	r1, r3
 8007168:	4857      	ldr	r0, [pc, #348]	; (80072c8 <HAL_UART_MspInit+0x23c>)
 800716a:	f003 f825 	bl	800a1b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800716e:	4b57      	ldr	r3, [pc, #348]	; (80072cc <HAL_UART_MspInit+0x240>)
 8007170:	4a57      	ldr	r2, [pc, #348]	; (80072d0 <HAL_UART_MspInit+0x244>)
 8007172:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8007174:	4b55      	ldr	r3, [pc, #340]	; (80072cc <HAL_UART_MspInit+0x240>)
 8007176:	2218      	movs	r2, #24
 8007178:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800717a:	4b54      	ldr	r3, [pc, #336]	; (80072cc <HAL_UART_MspInit+0x240>)
 800717c:	2200      	movs	r2, #0
 800717e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007180:	4b52      	ldr	r3, [pc, #328]	; (80072cc <HAL_UART_MspInit+0x240>)
 8007182:	2200      	movs	r2, #0
 8007184:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007186:	4b51      	ldr	r3, [pc, #324]	; (80072cc <HAL_UART_MspInit+0x240>)
 8007188:	2280      	movs	r2, #128	; 0x80
 800718a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800718c:	4b4f      	ldr	r3, [pc, #316]	; (80072cc <HAL_UART_MspInit+0x240>)
 800718e:	2200      	movs	r2, #0
 8007190:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007192:	4b4e      	ldr	r3, [pc, #312]	; (80072cc <HAL_UART_MspInit+0x240>)
 8007194:	2200      	movs	r2, #0
 8007196:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007198:	4b4c      	ldr	r3, [pc, #304]	; (80072cc <HAL_UART_MspInit+0x240>)
 800719a:	2200      	movs	r2, #0
 800719c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800719e:	4b4b      	ldr	r3, [pc, #300]	; (80072cc <HAL_UART_MspInit+0x240>)
 80071a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80071a6:	4849      	ldr	r0, [pc, #292]	; (80072cc <HAL_UART_MspInit+0x240>)
 80071a8:	f002 fcd4 	bl	8009b54 <HAL_DMA_Init>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80071b2:	f7ff fa2f 	bl	8006614 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a44      	ldr	r2, [pc, #272]	; (80072cc <HAL_UART_MspInit+0x240>)
 80071ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80071bc:	4a43      	ldr	r2, [pc, #268]	; (80072cc <HAL_UART_MspInit+0x240>)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80071c2:	2200      	movs	r2, #0
 80071c4:	2100      	movs	r1, #0
 80071c6:	2025      	movs	r0, #37	; 0x25
 80071c8:	f002 fac5 	bl	8009756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80071cc:	2025      	movs	r0, #37	; 0x25
 80071ce:	f002 fadc 	bl	800978a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80071d2:	e070      	b.n	80072b6 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART2)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a3e      	ldr	r2, [pc, #248]	; (80072d4 <HAL_UART_MspInit+0x248>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d16b      	bne.n	80072b6 <HAL_UART_MspInit+0x22a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80071de:	2302      	movs	r3, #2
 80071e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80071e2:	2300      	movs	r3, #0
 80071e4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071e6:	f107 0320 	add.w	r3, r7, #32
 80071ea:	4618      	mov	r0, r3
 80071ec:	f006 fce0 	bl	800dbb0 <HAL_RCCEx_PeriphCLKConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80071f6:	f7ff fa0d 	bl	8006614 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80071fa:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <HAL_UART_MspInit+0x238>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	4a31      	ldr	r2, [pc, #196]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007204:	6593      	str	r3, [r2, #88]	; 0x58
 8007206:	4b2f      	ldr	r3, [pc, #188]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007212:	4b2c      	ldr	r3, [pc, #176]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007216:	4a2b      	ldr	r2, [pc, #172]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800721e:	4b29      	ldr	r3, [pc, #164]	; (80072c4 <HAL_UART_MspInit+0x238>)
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800722a:	f248 0304 	movw	r3, #32772	; 0x8004
 800722e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007230:	2302      	movs	r3, #2
 8007232:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007234:	2300      	movs	r3, #0
 8007236:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800723e:	2307      	movs	r3, #7
 8007240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007244:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007248:	4619      	mov	r1, r3
 800724a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800724e:	f002 ffb3 	bl	800a1b8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8007252:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 8007254:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_UART_MspInit+0x250>)
 8007256:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8007258:	4b1f      	ldr	r3, [pc, #124]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 800725a:	221a      	movs	r2, #26
 800725c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800725e:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 8007260:	2200      	movs	r2, #0
 8007262:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007264:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 8007266:	2200      	movs	r2, #0
 8007268:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800726a:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 800726c:	2280      	movs	r2, #128	; 0x80
 800726e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 8007272:	2200      	movs	r2, #0
 8007274:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007276:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 8007278:	2200      	movs	r2, #0
 800727a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800727c:	4b16      	ldr	r3, [pc, #88]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 800727e:	2200      	movs	r2, #0
 8007280:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007282:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 8007284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007288:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800728a:	4813      	ldr	r0, [pc, #76]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 800728c:	f002 fc62 	bl	8009b54 <HAL_DMA_Init>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_UART_MspInit+0x20e>
      Error_Handler();
 8007296:	f7ff f9bd 	bl	8006614 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a0e      	ldr	r2, [pc, #56]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 800729e:	67da      	str	r2, [r3, #124]	; 0x7c
 80072a0:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <HAL_UART_MspInit+0x24c>)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	2026      	movs	r0, #38	; 0x26
 80072ac:	f002 fa53 	bl	8009756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80072b0:	2026      	movs	r0, #38	; 0x26
 80072b2:	f002 fa6a 	bl	800978a <HAL_NVIC_EnableIRQ>
}
 80072b6:	bf00      	nop
 80072b8:	3788      	adds	r7, #136	; 0x88
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40013800 	.word	0x40013800
 80072c4:	40021000 	.word	0x40021000
 80072c8:	48000400 	.word	0x48000400
 80072cc:	20000e70 	.word	0x20000e70
 80072d0:	40020008 	.word	0x40020008
 80072d4:	40004400 	.word	0x40004400
 80072d8:	20000ed0 	.word	0x20000ed0
 80072dc:	40020408 	.word	0x40020408

080072e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072e4:	e7fe      	b.n	80072e4 <NMI_Handler+0x4>

080072e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072e6:	b480      	push	{r7}
 80072e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072ea:	e7fe      	b.n	80072ea <HardFault_Handler+0x4>

080072ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072f0:	e7fe      	b.n	80072f0 <MemManage_Handler+0x4>

080072f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072f2:	b480      	push	{r7}
 80072f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072f6:	e7fe      	b.n	80072f6 <BusFault_Handler+0x4>

080072f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072fc:	e7fe      	b.n	80072fc <UsageFault_Handler+0x4>

080072fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072fe:	b480      	push	{r7}
 8007300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007302:	bf00      	nop
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007310:	bf00      	nop
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800731a:	b480      	push	{r7}
 800731c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800731e:	bf00      	nop
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800732c:	f000 f9c0 	bl	80076b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007330:	bf00      	nop
 8007332:	bd80      	pop	{r7, pc}

08007334 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007338:	4802      	ldr	r0, [pc, #8]	; (8007344 <DMA1_Channel1_IRQHandler+0x10>)
 800733a:	f002 fdee 	bl	8009f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800733e:	bf00      	nop
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000e70 	.word	0x20000e70

08007348 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800734c:	4802      	ldr	r0, [pc, #8]	; (8007358 <DMA1_Channel2_IRQHandler+0x10>)
 800734e:	f002 fde4 	bl	8009f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007352:	bf00      	nop
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000d50 	.word	0x20000d50

0800735c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007360:	4802      	ldr	r0, [pc, #8]	; (800736c <DMA1_Channel3_IRQHandler+0x10>)
 8007362:	f002 fdda 	bl	8009f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007366:	bf00      	nop
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000db0 	.word	0x20000db0

08007370 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8007374:	4802      	ldr	r0, [pc, #8]	; (8007380 <DMA1_Channel4_IRQHandler+0x10>)
 8007376:	f002 fdd0 	bl	8009f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800737a:	bf00      	nop
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000e10 	.word	0x20000e10

08007384 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007388:	4802      	ldr	r0, [pc, #8]	; (8007394 <USB_LP_IRQHandler+0x10>)
 800738a:	f004 fa0c 	bl	800b7a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800738e:	bf00      	nop
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20002454 	.word	0x20002454

08007398 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800739c:	4802      	ldr	r0, [pc, #8]	; (80073a8 <I2C2_EV_IRQHandler+0x10>)
 800739e:	f003 fb7d 	bl	800aa9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80073a2:	bf00      	nop
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000be4 	.word	0x20000be4

080073ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80073b0:	4802      	ldr	r0, [pc, #8]	; (80073bc <USART1_IRQHandler+0x10>)
 80073b2:	f008 f9df 	bl	800f774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000c30 	.word	0x20000c30

080073c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80073c4:	4802      	ldr	r0, [pc, #8]	; (80073d0 <USART2_IRQHandler+0x10>)
 80073c6:	f008 f9d5 	bl	800f774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000cc0 	.word	0x20000cc0

080073d4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80073d8:	4802      	ldr	r0, [pc, #8]	; (80073e4 <DMA2_Channel1_IRQHandler+0x10>)
 80073da:	f002 fd9e 	bl	8009f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000ed0 	.word	0x20000ed0

080073e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return 1;
 80073ec:	2301      	movs	r3, #1
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <_kill>:

int _kill(int pid, int sig)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007402:	f00e fa4d 	bl	80158a0 <__errno>
 8007406:	4603      	mov	r3, r0
 8007408:	2216      	movs	r2, #22
 800740a:	601a      	str	r2, [r3, #0]
  return -1;
 800740c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <_exit>:

void _exit (int status)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007420:	f04f 31ff 	mov.w	r1, #4294967295
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ffe7 	bl	80073f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800742a:	e7fe      	b.n	800742a <_exit+0x12>

0800742c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e00a      	b.n	8007454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800743e:	f3af 8000 	nop.w
 8007442:	4601      	mov	r1, r0
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	60ba      	str	r2, [r7, #8]
 800744a:	b2ca      	uxtb	r2, r1
 800744c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	3301      	adds	r3, #1
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	dbf0      	blt.n	800743e <_read+0x12>
  }

  return len;
 800745c:	687b      	ldr	r3, [r7, #4]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
	if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d002      	beq.n	800747e <_write+0x18>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d115      	bne.n	80074aa <_write+0x44>
		    {
		        uint8_t result;
		        do {
		        	result = CDC_Transmit_FS((uint8_t*)ptr, len);
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	68b8      	ldr	r0, [r7, #8]
 8007482:	f00d fd63 	bl	8014f4c <CDC_Transmit_FS>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]
		        } while (result == USBD_BUSY);
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d0f6      	beq.n	800747e <_write+0x18>
		        if (result != USBD_OK)
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <_write+0x40>
		        {
		            errno = EIO;
 8007496:	f00e fa03 	bl	80158a0 <__errno>
 800749a:	4603      	mov	r3, r0
 800749c:	2205      	movs	r2, #5
 800749e:	601a      	str	r2, [r3, #0]
		            return -1;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	e008      	b.n	80074b8 <_write+0x52>
		        }
		        return len;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	e006      	b.n	80074b8 <_write+0x52>
		    }
		    errno = EBADF;
 80074aa:	f00e f9f9 	bl	80158a0 <__errno>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2209      	movs	r2, #9
 80074b2:	601a      	str	r2, [r3, #0]
		    return -1;
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <_close>:

int _close(int file)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074e8:	605a      	str	r2, [r3, #4]
  return 0;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <_isatty>:

int _isatty(int file)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007500:	2301      	movs	r3, #1
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007530:	4a14      	ldr	r2, [pc, #80]	; (8007584 <_sbrk+0x5c>)
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <_sbrk+0x60>)
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <_sbrk+0x64>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <_sbrk+0x64>)
 8007546:	4a12      	ldr	r2, [pc, #72]	; (8007590 <_sbrk+0x68>)
 8007548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <_sbrk+0x64>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	429a      	cmp	r2, r3
 8007556:	d207      	bcs.n	8007568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007558:	f00e f9a2 	bl	80158a0 <__errno>
 800755c:	4603      	mov	r3, r0
 800755e:	220c      	movs	r2, #12
 8007560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295
 8007566:	e009      	b.n	800757c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007568:	4b08      	ldr	r3, [pc, #32]	; (800758c <_sbrk+0x64>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <_sbrk+0x64>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	4a05      	ldr	r2, [pc, #20]	; (800758c <_sbrk+0x64>)
 8007578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800757a:	68fb      	ldr	r3, [r7, #12]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20020000 	.word	0x20020000
 8007588:	00000400 	.word	0x00000400
 800758c:	20000f34 	.word	0x20000f34
 8007590:	20002978 	.word	0x20002978

08007594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007594:	b480      	push	{r7}
 8007596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007598:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <SystemInit+0x20>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759e:	4a05      	ldr	r2, [pc, #20]	; (80075b4 <SystemInit+0x20>)
 80075a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80075a8:	bf00      	nop
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80075b8:	480d      	ldr	r0, [pc, #52]	; (80075f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80075ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075bc:	480d      	ldr	r0, [pc, #52]	; (80075f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80075be:	490e      	ldr	r1, [pc, #56]	; (80075f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80075c0:	4a0e      	ldr	r2, [pc, #56]	; (80075fc <LoopForever+0xe>)
  movs r3, #0
 80075c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80075c4:	e002      	b.n	80075cc <LoopCopyDataInit>

080075c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075ca:	3304      	adds	r3, #4

080075cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075d0:	d3f9      	bcc.n	80075c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075d2:	4a0b      	ldr	r2, [pc, #44]	; (8007600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80075d4:	4c0b      	ldr	r4, [pc, #44]	; (8007604 <LoopForever+0x16>)
  movs r3, #0
 80075d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075d8:	e001      	b.n	80075de <LoopFillZerobss>

080075da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075dc:	3204      	adds	r2, #4

080075de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075e0:	d3fb      	bcc.n	80075da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80075e2:	f7ff ffd7 	bl	8007594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075e6:	f00e f961 	bl	80158ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80075ea:	f7fe ff89 	bl	8006500 <main>

080075ee <LoopForever>:

LoopForever:
    b LoopForever
 80075ee:	e7fe      	b.n	80075ee <LoopForever>
  ldr   r0, =_estack
 80075f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80075f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075f8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80075fc:	08019aa4 	.word	0x08019aa4
  ldr r2, =_sbss
 8007600:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8007604:	20002978 	.word	0x20002978

08007608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007608:	e7fe      	b.n	8007608 <ADC1_2_IRQHandler>

0800760a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007614:	2003      	movs	r0, #3
 8007616:	f002 f893 	bl	8009740 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800761a:	200f      	movs	r0, #15
 800761c:	f000 f80e 	bl	800763c <HAL_InitTick>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	71fb      	strb	r3, [r7, #7]
 800762a:	e001      	b.n	8007630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800762c:	f7ff f812 	bl	8006654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007630:	79fb      	ldrb	r3, [r7, #7]

}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007648:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <HAL_InitTick+0x68>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d022      	beq.n	8007696 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007650:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <HAL_InitTick+0x6c>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <HAL_InitTick+0x68>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800765c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	4618      	mov	r0, r3
 8007666:	f002 f89e 	bl	80097a6 <HAL_SYSTICK_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10f      	bne.n	8007690 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b0f      	cmp	r3, #15
 8007674:	d809      	bhi.n	800768a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007676:	2200      	movs	r2, #0
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	f002 f86a 	bl	8009756 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007682:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <HAL_InitTick+0x70>)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	e007      	b.n	800769a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	73fb      	strb	r3, [r7, #15]
 800768e:	e004      	b.n	800769a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e001      	b.n	800769a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000008 	.word	0x20000008
 80076a8:	20000000 	.word	0x20000000
 80076ac:	20000004 	.word	0x20000004

080076b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <HAL_IncTick+0x1c>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <HAL_IncTick+0x20>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4413      	add	r3, r2
 80076be:	4a03      	ldr	r2, [pc, #12]	; (80076cc <HAL_IncTick+0x1c>)
 80076c0:	6013      	str	r3, [r2, #0]
}
 80076c2:	bf00      	nop
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20000f38 	.word	0x20000f38
 80076d0:	20000008 	.word	0x20000008

080076d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  return uwTick;
 80076d8:	4b03      	ldr	r3, [pc, #12]	; (80076e8 <HAL_GetTick+0x14>)
 80076da:	681b      	ldr	r3, [r3, #0]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000f38 	.word	0x20000f38

080076ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076f4:	f7ff ffee 	bl	80076d4 <HAL_GetTick>
 80076f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d004      	beq.n	8007710 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007706:	4b09      	ldr	r3, [pc, #36]	; (800772c <HAL_Delay+0x40>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007710:	bf00      	nop
 8007712:	f7ff ffdf 	bl	80076d4 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	429a      	cmp	r2, r3
 8007720:	d8f7      	bhi.n	8007712 <HAL_Delay+0x26>
  {
  }
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000008 	.word	0x20000008

08007730 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	609a      	str	r2, [r3, #8]
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3360      	adds	r3, #96	; 0x60
 80077aa:	461a      	mov	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b08      	ldr	r3, [pc, #32]	; (80077dc <LL_ADC_SetOffset+0x44>)
 80077ba:	4013      	ands	r3, r2
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	03fff000 	.word	0x03fff000

080077e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3360      	adds	r3, #96	; 0x60
 80077ee:	461a      	mov	r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3360      	adds	r3, #96	; 0x60
 800781c:	461a      	mov	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	431a      	orrs	r2, r3
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3360      	adds	r3, #96	; 0x60
 8007852:	461a      	mov	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	431a      	orrs	r2, r3
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3360      	adds	r3, #96	; 0x60
 8007888:	461a      	mov	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	431a      	orrs	r2, r3
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	615a      	str	r2, [r3, #20]
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b087      	sub	sp, #28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3330      	adds	r3, #48	; 0x30
 800790a:	461a      	mov	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	f003 030c 	and.w	r3, r3, #12
 8007916:	4413      	add	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	211f      	movs	r1, #31
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	43db      	mvns	r3, r3
 800792c:	401a      	ands	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	0e9b      	lsrs	r3, r3, #26
 8007932:	f003 011f 	and.w	r1, r3, #31
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	fa01 f303 	lsl.w	r3, r1, r3
 8007940:	431a      	orrs	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007946:	bf00      	nop
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007952:	b480      	push	{r7}
 8007954:	b087      	sub	sp, #28
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3314      	adds	r3, #20
 8007962:	461a      	mov	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	0e5b      	lsrs	r3, r3, #25
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	f003 0304 	and.w	r3, r3, #4
 800796e:	4413      	add	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	0d1b      	lsrs	r3, r3, #20
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	2107      	movs	r1, #7
 8007980:	fa01 f303 	lsl.w	r3, r1, r3
 8007984:	43db      	mvns	r3, r3
 8007986:	401a      	ands	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	0d1b      	lsrs	r3, r3, #20
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	fa01 f303 	lsl.w	r3, r1, r3
 8007996:	431a      	orrs	r2, r3
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800799c:	bf00      	nop
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a0f      	ldr	r2, [pc, #60]	; (80079f4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d10a      	bne.n	80079d2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c8:	431a      	orrs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80079d0:	e00a      	b.n	80079e8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079de:	43db      	mvns	r3, r3
 80079e0:	401a      	ands	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	407f0000 	.word	0x407f0000

080079f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 031f 	and.w	r3, r3, #31
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6093      	str	r3, [r2, #8]
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a4c:	d101      	bne.n	8007a52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a9c:	d101      	bne.n	8007aa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ac4:	f043 0201 	orr.w	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007aec:	f043 0202 	orr.w	r2, r3, #2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <LL_ADC_IsEnabled+0x18>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <LL_ADC_IsEnabled+0x1a>
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d101      	bne.n	8007b3e <LL_ADC_IsDisableOngoing+0x18>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <LL_ADC_IsDisableOngoing+0x1a>
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b60:	f043 0204 	orr.w	r2, r3, #4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d101      	bne.n	8007b8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d101      	bne.n	8007bb2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007bc0:	b590      	push	{r4, r7, lr}
 8007bc2:	b089      	sub	sp, #36	; 0x24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e1af      	b.n	8007f3a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fe fd57 	bl	800669c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff ff19 	bl	8007a38 <LL_ADC_IsDeepPowerDownEnabled>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff feff 	bl	8007a14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff ff34 	bl	8007a88 <LL_ADC_IsInternalRegulatorEnabled>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d115      	bne.n	8007c52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff ff18 	bl	8007a60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007c30:	4b9f      	ldr	r3, [pc, #636]	; (8007eb0 <HAL_ADC_Init+0x2f0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	099b      	lsrs	r3, r3, #6
 8007c36:	4a9f      	ldr	r2, [pc, #636]	; (8007eb4 <HAL_ADC_Init+0x2f4>)
 8007c38:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3c:	099b      	lsrs	r3, r3, #6
 8007c3e:	3301      	adds	r3, #1
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007c44:	e002      	b.n	8007c4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1f9      	bne.n	8007c46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ff16 	bl	8007a88 <LL_ADC_IsInternalRegulatorEnabled>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10d      	bne.n	8007c7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c66:	f043 0210 	orr.w	r2, r3, #16
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c72:	f043 0201 	orr.w	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff ff76 	bl	8007b74 <LL_ADC_REG_IsConversionOngoing>
 8007c88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 8148 	bne.w	8007f28 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 8144 	bne.w	8007f28 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ca4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007ca8:	f043 0202 	orr.w	r2, r3, #2
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff ff23 	bl	8007b00 <LL_ADC_IsEnabled>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d141      	bne.n	8007d44 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cc8:	d004      	beq.n	8007cd4 <HAL_ADC_Init+0x114>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a7a      	ldr	r2, [pc, #488]	; (8007eb8 <HAL_ADC_Init+0x2f8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10f      	bne.n	8007cf4 <HAL_ADC_Init+0x134>
 8007cd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007cd8:	f7ff ff12 	bl	8007b00 <LL_ADC_IsEnabled>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	4876      	ldr	r0, [pc, #472]	; (8007eb8 <HAL_ADC_Init+0x2f8>)
 8007ce0:	f7ff ff0e 	bl	8007b00 <LL_ADC_IsEnabled>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	4323      	orrs	r3, r4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e012      	b.n	8007d1a <HAL_ADC_Init+0x15a>
 8007cf4:	4871      	ldr	r0, [pc, #452]	; (8007ebc <HAL_ADC_Init+0x2fc>)
 8007cf6:	f7ff ff03 	bl	8007b00 <LL_ADC_IsEnabled>
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4870      	ldr	r0, [pc, #448]	; (8007ec0 <HAL_ADC_Init+0x300>)
 8007cfe:	f7ff feff 	bl	8007b00 <LL_ADC_IsEnabled>
 8007d02:	4603      	mov	r3, r0
 8007d04:	431c      	orrs	r4, r3
 8007d06:	486f      	ldr	r0, [pc, #444]	; (8007ec4 <HAL_ADC_Init+0x304>)
 8007d08:	f7ff fefa 	bl	8007b00 <LL_ADC_IsEnabled>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	4323      	orrs	r3, r4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d012      	beq.n	8007d44 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d26:	d004      	beq.n	8007d32 <HAL_ADC_Init+0x172>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a62      	ldr	r2, [pc, #392]	; (8007eb8 <HAL_ADC_Init+0x2f8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d101      	bne.n	8007d36 <HAL_ADC_Init+0x176>
 8007d32:	4a65      	ldr	r2, [pc, #404]	; (8007ec8 <HAL_ADC_Init+0x308>)
 8007d34:	e000      	b.n	8007d38 <HAL_ADC_Init+0x178>
 8007d36:	4a65      	ldr	r2, [pc, #404]	; (8007ecc <HAL_ADC_Init+0x30c>)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7ff fcf6 	bl	8007730 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7f5b      	ldrb	r3, [r3, #29]
 8007d48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007d4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007d54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007d5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007d64:	4313      	orrs	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d106      	bne.n	8007d80 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	3b01      	subs	r3, #1
 8007d78:	045b      	lsls	r3, r3, #17
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	4b4b      	ldr	r3, [pc, #300]	; (8007ed0 <HAL_ADC_Init+0x310>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	69b9      	ldr	r1, [r7, #24]
 8007dac:	430b      	orrs	r3, r1
 8007dae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff fed2 	bl	8007b74 <LL_ADC_REG_IsConversionOngoing>
 8007dd0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fedf 	bl	8007b9a <LL_ADC_INJ_IsConversionOngoing>
 8007ddc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d17f      	bne.n	8007ee4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d17c      	bne.n	8007ee4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007dee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007df6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e06:	f023 0302 	bic.w	r3, r3, #2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	69b9      	ldr	r1, [r7, #24]
 8007e10:	430b      	orrs	r3, r1
 8007e12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d017      	beq.n	8007e4c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007e2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007e38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6911      	ldr	r1, [r2, #16]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6812      	ldr	r2, [r2, #0]
 8007e44:	430b      	orrs	r3, r1
 8007e46:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007e4a:	e013      	b.n	8007e74 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e70:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d12a      	bne.n	8007ed4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e88:	f023 0304 	bic.w	r3, r3, #4
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e94:	4311      	orrs	r1, r2
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007e9a:	4311      	orrs	r1, r2
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0201 	orr.w	r2, r2, #1
 8007eac:	611a      	str	r2, [r3, #16]
 8007eae:	e019      	b.n	8007ee4 <HAL_ADC_Init+0x324>
 8007eb0:	20000000 	.word	0x20000000
 8007eb4:	053e2d63 	.word	0x053e2d63
 8007eb8:	50000100 	.word	0x50000100
 8007ebc:	50000400 	.word	0x50000400
 8007ec0:	50000500 	.word	0x50000500
 8007ec4:	50000600 	.word	0x50000600
 8007ec8:	50000300 	.word	0x50000300
 8007ecc:	50000700 	.word	0x50000700
 8007ed0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d10c      	bne.n	8007f06 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f023 010f 	bic.w	r1, r3, #15
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	1e5a      	subs	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	631a      	str	r2, [r3, #48]	; 0x30
 8007f04:	e007      	b.n	8007f16 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 020f 	bic.w	r2, r2, #15
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	f043 0201 	orr.w	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f26:	e007      	b.n	8007f38 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2c:	f043 0210 	orr.w	r2, r3, #16
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3724      	adds	r7, #36	; 0x24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd90      	pop	{r4, r7, pc}
 8007f42:	bf00      	nop

08007f44 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f58:	d004      	beq.n	8007f64 <HAL_ADC_Start_DMA+0x20>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a5a      	ldr	r2, [pc, #360]	; (80080c8 <HAL_ADC_Start_DMA+0x184>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d101      	bne.n	8007f68 <HAL_ADC_Start_DMA+0x24>
 8007f64:	4b59      	ldr	r3, [pc, #356]	; (80080cc <HAL_ADC_Start_DMA+0x188>)
 8007f66:	e000      	b.n	8007f6a <HAL_ADC_Start_DMA+0x26>
 8007f68:	4b59      	ldr	r3, [pc, #356]	; (80080d0 <HAL_ADC_Start_DMA+0x18c>)
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff fd44 	bl	80079f8 <LL_ADC_GetMultimode>
 8007f70:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fdfc 	bl	8007b74 <LL_ADC_REG_IsConversionOngoing>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 809b 	bne.w	80080ba <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_ADC_Start_DMA+0x4e>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e096      	b.n	80080c0 <HAL_ADC_Start_DMA+0x17c>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a4d      	ldr	r2, [pc, #308]	; (80080d4 <HAL_ADC_Start_DMA+0x190>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d008      	beq.n	8007fb6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	2b05      	cmp	r3, #5
 8007fae:	d002      	beq.n	8007fb6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2b09      	cmp	r3, #9
 8007fb4:	d17a      	bne.n	80080ac <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fcf6 	bl	80089a8 <ADC_Enable>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d16d      	bne.n	80080a2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a3a      	ldr	r2, [pc, #232]	; (80080c8 <HAL_ADC_Start_DMA+0x184>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d009      	beq.n	8007ff8 <HAL_ADC_Start_DMA+0xb4>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a3b      	ldr	r2, [pc, #236]	; (80080d8 <HAL_ADC_Start_DMA+0x194>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d002      	beq.n	8007ff4 <HAL_ADC_Start_DMA+0xb0>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	e003      	b.n	8007ffc <HAL_ADC_Start_DMA+0xb8>
 8007ff4:	4b39      	ldr	r3, [pc, #228]	; (80080dc <HAL_ADC_Start_DMA+0x198>)
 8007ff6:	e001      	b.n	8007ffc <HAL_ADC_Start_DMA+0xb8>
 8007ff8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	4293      	cmp	r3, r2
 8008002:	d002      	beq.n	800800a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d006      	beq.n	8008030 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008026:	f023 0206 	bic.w	r2, r3, #6
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	661a      	str	r2, [r3, #96]	; 0x60
 800802e:	e002      	b.n	8008036 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803a:	4a29      	ldr	r2, [pc, #164]	; (80080e0 <HAL_ADC_Start_DMA+0x19c>)
 800803c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	4a28      	ldr	r2, [pc, #160]	; (80080e4 <HAL_ADC_Start_DMA+0x1a0>)
 8008044:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804a:	4a27      	ldr	r2, [pc, #156]	; (80080e8 <HAL_ADC_Start_DMA+0x1a4>)
 800804c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	221c      	movs	r2, #28
 8008054:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0210 	orr.w	r2, r2, #16
 800806c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3340      	adds	r3, #64	; 0x40
 8008088:	4619      	mov	r1, r3
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f001 fe09 	bl	8009ca4 <HAL_DMA_Start_IT>
 8008092:	4603      	mov	r3, r0
 8008094:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff fd56 	bl	8007b4c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80080a0:	e00d      	b.n	80080be <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80080aa:	e008      	b.n	80080be <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80080b8:	e001      	b.n	80080be <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80080ba:	2302      	movs	r3, #2
 80080bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	50000100 	.word	0x50000100
 80080cc:	50000300 	.word	0x50000300
 80080d0:	50000700 	.word	0x50000700
 80080d4:	50000600 	.word	0x50000600
 80080d8:	50000500 	.word	0x50000500
 80080dc:	50000400 	.word	0x50000400
 80080e0:	08008b2b 	.word	0x08008b2b
 80080e4:	08008c03 	.word	0x08008c03
 80080e8:	08008c1f 	.word	0x08008c1f

080080ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b0b6      	sub	sp, #216	; 0xd8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008142:	2b01      	cmp	r3, #1
 8008144:	d102      	bne.n	800814c <HAL_ADC_ConfigChannel+0x24>
 8008146:	2302      	movs	r3, #2
 8008148:	f000 bc13 	b.w	8008972 <HAL_ADC_ConfigChannel+0x84a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fd0b 	bl	8007b74 <LL_ADC_REG_IsConversionOngoing>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 83f3 	bne.w	800894c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6859      	ldr	r1, [r3, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	f7ff fbc1 	bl	80078fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fcf9 	bl	8007b74 <LL_ADC_REG_IsConversionOngoing>
 8008182:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fd05 	bl	8007b9a <LL_ADC_INJ_IsConversionOngoing>
 8008190:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008194:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 81d9 	bne.w	8008550 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800819e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 81d4 	bne.w	8008550 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b0:	d10f      	bne.n	80081d2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	4619      	mov	r1, r3
 80081be:	f7ff fbc8 	bl	8007952 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff fb6f 	bl	80078ae <LL_ADC_SetSamplingTimeCommonConfig>
 80081d0:	e00e      	b.n	80081f0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7ff fbb7 	bl	8007952 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2100      	movs	r1, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fb5f 	bl	80078ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	08db      	lsrs	r3, r3, #3
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b04      	cmp	r3, #4
 8008210:	d022      	beq.n	8008258 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6919      	ldr	r1, [r3, #16]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008222:	f7ff fab9 	bl	8007798 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6919      	ldr	r1, [r3, #16]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	461a      	mov	r2, r3
 8008234:	f7ff fb05 	bl	8007842 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	6919      	ldr	r1, [r3, #16]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	7f1b      	ldrb	r3, [r3, #28]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d102      	bne.n	800824e <HAL_ADC_ConfigChannel+0x126>
 8008248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800824c:	e000      	b.n	8008250 <HAL_ADC_ConfigChannel+0x128>
 800824e:	2300      	movs	r3, #0
 8008250:	461a      	mov	r2, r3
 8008252:	f7ff fb11 	bl	8007878 <LL_ADC_SetOffsetSaturation>
 8008256:	e17b      	b.n	8008550 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2100      	movs	r1, #0
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fabe 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 8008264:	4603      	mov	r3, r0
 8008266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <HAL_ADC_ConfigChannel+0x15c>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fab3 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 800827a:	4603      	mov	r3, r0
 800827c:	0e9b      	lsrs	r3, r3, #26
 800827e:	f003 021f 	and.w	r2, r3, #31
 8008282:	e01e      	b.n	80082c2 <HAL_ADC_ConfigChannel+0x19a>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff faa8 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 8008290:	4603      	mov	r3, r0
 8008292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008296:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800829a:	fa93 f3a3 	rbit	r3, r3
 800829e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80082a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80082aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80082b2:	2320      	movs	r3, #32
 80082b4:	e004      	b.n	80082c0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80082b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082ba:	fab3 f383 	clz	r3, r3
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <HAL_ADC_ConfigChannel+0x1b2>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	0e9b      	lsrs	r3, r3, #26
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	e018      	b.n	800830c <HAL_ADC_ConfigChannel+0x1e4>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082e6:	fa93 f3a3 	rbit	r3, r3
 80082ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80082ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80082f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80082fe:	2320      	movs	r3, #32
 8008300:	e004      	b.n	800830c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8008302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008306:	fab3 f383 	clz	r3, r3
 800830a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800830c:	429a      	cmp	r2, r3
 800830e:	d106      	bne.n	800831e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2200      	movs	r2, #0
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fa77 	bl	800780c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fa5b 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 800832a:	4603      	mov	r3, r0
 800832c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <HAL_ADC_ConfigChannel+0x222>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2101      	movs	r1, #1
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fa50 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 8008340:	4603      	mov	r3, r0
 8008342:	0e9b      	lsrs	r3, r3, #26
 8008344:	f003 021f 	and.w	r2, r3, #31
 8008348:	e01e      	b.n	8008388 <HAL_ADC_ConfigChannel+0x260>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fa45 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 8008356:	4603      	mov	r3, r0
 8008358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800835c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008360:	fa93 f3a3 	rbit	r3, r3
 8008364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800836c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008378:	2320      	movs	r3, #32
 800837a:	e004      	b.n	8008386 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800837c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008380:	fab3 f383 	clz	r3, r3
 8008384:	b2db      	uxtb	r3, r3
 8008386:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <HAL_ADC_ConfigChannel+0x278>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	0e9b      	lsrs	r3, r3, #26
 800839a:	f003 031f 	and.w	r3, r3, #31
 800839e:	e018      	b.n	80083d2 <HAL_ADC_ConfigChannel+0x2aa>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083ac:	fa93 f3a3 	rbit	r3, r3
 80083b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80083b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80083bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80083c4:	2320      	movs	r3, #32
 80083c6:	e004      	b.n	80083d2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80083c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083cc:	fab3 f383 	clz	r3, r3
 80083d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d106      	bne.n	80083e4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2200      	movs	r2, #0
 80083dc:	2101      	movs	r1, #1
 80083de:	4618      	mov	r0, r3
 80083e0:	f7ff fa14 	bl	800780c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2102      	movs	r1, #2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff f9f8 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10a      	bne.n	8008410 <HAL_ADC_ConfigChannel+0x2e8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2102      	movs	r1, #2
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff f9ed 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 8008406:	4603      	mov	r3, r0
 8008408:	0e9b      	lsrs	r3, r3, #26
 800840a:	f003 021f 	and.w	r2, r3, #31
 800840e:	e01e      	b.n	800844e <HAL_ADC_ConfigChannel+0x326>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2102      	movs	r1, #2
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff f9e2 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 800841c:	4603      	mov	r3, r0
 800841e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008426:	fa93 f3a3 	rbit	r3, r3
 800842a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800842e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800843e:	2320      	movs	r3, #32
 8008440:	e004      	b.n	800844c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8008442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008446:	fab3 f383 	clz	r3, r3
 800844a:	b2db      	uxtb	r3, r3
 800844c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008456:	2b00      	cmp	r3, #0
 8008458:	d105      	bne.n	8008466 <HAL_ADC_ConfigChannel+0x33e>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	0e9b      	lsrs	r3, r3, #26
 8008460:	f003 031f 	and.w	r3, r3, #31
 8008464:	e016      	b.n	8008494 <HAL_ADC_ConfigChannel+0x36c>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800846e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008472:	fa93 f3a3 	rbit	r3, r3
 8008476:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008478:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800847a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800847e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008486:	2320      	movs	r3, #32
 8008488:	e004      	b.n	8008494 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800848a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800848e:	fab3 f383 	clz	r3, r3
 8008492:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008494:	429a      	cmp	r2, r3
 8008496:	d106      	bne.n	80084a6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2200      	movs	r2, #0
 800849e:	2102      	movs	r1, #2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff f9b3 	bl	800780c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2103      	movs	r1, #3
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff f997 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <HAL_ADC_ConfigChannel+0x3aa>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2103      	movs	r1, #3
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff f98c 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 80084c8:	4603      	mov	r3, r0
 80084ca:	0e9b      	lsrs	r3, r3, #26
 80084cc:	f003 021f 	and.w	r2, r3, #31
 80084d0:	e017      	b.n	8008502 <HAL_ADC_ConfigChannel+0x3da>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2103      	movs	r1, #3
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff f981 	bl	80077e0 <LL_ADC_GetOffsetChannel>
 80084de:	4603      	mov	r3, r0
 80084e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e4:	fa93 f3a3 	rbit	r3, r3
 80084e8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80084ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084ec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80084ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80084f4:	2320      	movs	r3, #32
 80084f6:	e003      	b.n	8008500 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80084f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084fa:	fab3 f383 	clz	r3, r3
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <HAL_ADC_ConfigChannel+0x3f2>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	0e9b      	lsrs	r3, r3, #26
 8008514:	f003 031f 	and.w	r3, r3, #31
 8008518:	e011      	b.n	800853e <HAL_ADC_ConfigChannel+0x416>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008522:	fa93 f3a3 	rbit	r3, r3
 8008526:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800852a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800852c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8008532:	2320      	movs	r3, #32
 8008534:	e003      	b.n	800853e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008538:	fab3 f383 	clz	r3, r3
 800853c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800853e:	429a      	cmp	r2, r3
 8008540:	d106      	bne.n	8008550 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	2103      	movs	r1, #3
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff f95e 	bl	800780c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fad3 	bl	8007b00 <LL_ADC_IsEnabled>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	f040 813d 	bne.w	80087dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6819      	ldr	r1, [r3, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	461a      	mov	r2, r3
 8008570:	f7ff fa1a 	bl	80079a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	4aa2      	ldr	r2, [pc, #648]	; (8008804 <HAL_ADC_ConfigChannel+0x6dc>)
 800857a:	4293      	cmp	r3, r2
 800857c:	f040 812e 	bne.w	80087dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10b      	bne.n	80085a8 <HAL_ADC_ConfigChannel+0x480>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	0e9b      	lsrs	r3, r3, #26
 8008596:	3301      	adds	r3, #1
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	2b09      	cmp	r3, #9
 800859e:	bf94      	ite	ls
 80085a0:	2301      	movls	r3, #1
 80085a2:	2300      	movhi	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	e019      	b.n	80085dc <HAL_ADC_ConfigChannel+0x4b4>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b0:	fa93 f3a3 	rbit	r3, r3
 80085b4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80085b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80085ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80085c0:	2320      	movs	r3, #32
 80085c2:	e003      	b.n	80085cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80085c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c6:	fab3 f383 	clz	r3, r3
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	3301      	adds	r3, #1
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	2b09      	cmp	r3, #9
 80085d4:	bf94      	ite	ls
 80085d6:	2301      	movls	r3, #1
 80085d8:	2300      	movhi	r3, #0
 80085da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d079      	beq.n	80086d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d107      	bne.n	80085fc <HAL_ADC_ConfigChannel+0x4d4>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	0e9b      	lsrs	r3, r3, #26
 80085f2:	3301      	adds	r3, #1
 80085f4:	069b      	lsls	r3, r3, #26
 80085f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80085fa:	e015      	b.n	8008628 <HAL_ADC_ConfigChannel+0x500>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008604:	fa93 f3a3 	rbit	r3, r3
 8008608:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800860a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800860e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008614:	2320      	movs	r3, #32
 8008616:	e003      	b.n	8008620 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800861a:	fab3 f383 	clz	r3, r3
 800861e:	b2db      	uxtb	r3, r3
 8008620:	3301      	adds	r3, #1
 8008622:	069b      	lsls	r3, r3, #26
 8008624:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008630:	2b00      	cmp	r3, #0
 8008632:	d109      	bne.n	8008648 <HAL_ADC_ConfigChannel+0x520>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	0e9b      	lsrs	r3, r3, #26
 800863a:	3301      	adds	r3, #1
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	2101      	movs	r1, #1
 8008642:	fa01 f303 	lsl.w	r3, r1, r3
 8008646:	e017      	b.n	8008678 <HAL_ADC_ConfigChannel+0x550>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800864e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008650:	fa93 f3a3 	rbit	r3, r3
 8008654:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008658:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800865a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8008660:	2320      	movs	r3, #32
 8008662:	e003      	b.n	800866c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008666:	fab3 f383 	clz	r3, r3
 800866a:	b2db      	uxtb	r3, r3
 800866c:	3301      	adds	r3, #1
 800866e:	f003 031f 	and.w	r3, r3, #31
 8008672:	2101      	movs	r1, #1
 8008674:	fa01 f303 	lsl.w	r3, r1, r3
 8008678:	ea42 0103 	orr.w	r1, r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <HAL_ADC_ConfigChannel+0x576>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	0e9b      	lsrs	r3, r3, #26
 800868e:	3301      	adds	r3, #1
 8008690:	f003 021f 	and.w	r2, r3, #31
 8008694:	4613      	mov	r3, r2
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	4413      	add	r3, r2
 800869a:	051b      	lsls	r3, r3, #20
 800869c:	e018      	b.n	80086d0 <HAL_ADC_ConfigChannel+0x5a8>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	fa93 f3a3 	rbit	r3, r3
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80086b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80086b6:	2320      	movs	r3, #32
 80086b8:	e003      	b.n	80086c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80086ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086bc:	fab3 f383 	clz	r3, r3
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	3301      	adds	r3, #1
 80086c4:	f003 021f 	and.w	r2, r3, #31
 80086c8:	4613      	mov	r3, r2
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	4413      	add	r3, r2
 80086ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80086d0:	430b      	orrs	r3, r1
 80086d2:	e07e      	b.n	80087d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d107      	bne.n	80086f0 <HAL_ADC_ConfigChannel+0x5c8>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	0e9b      	lsrs	r3, r3, #26
 80086e6:	3301      	adds	r3, #1
 80086e8:	069b      	lsls	r3, r3, #26
 80086ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80086ee:	e015      	b.n	800871c <HAL_ADC_ConfigChannel+0x5f4>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	fa93 f3a3 	rbit	r3, r3
 80086fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008708:	2320      	movs	r3, #32
 800870a:	e003      	b.n	8008714 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	fab3 f383 	clz	r3, r3
 8008712:	b2db      	uxtb	r3, r3
 8008714:	3301      	adds	r3, #1
 8008716:	069b      	lsls	r3, r3, #26
 8008718:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <HAL_ADC_ConfigChannel+0x614>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	0e9b      	lsrs	r3, r3, #26
 800872e:	3301      	adds	r3, #1
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	2101      	movs	r1, #1
 8008736:	fa01 f303 	lsl.w	r3, r1, r3
 800873a:	e017      	b.n	800876c <HAL_ADC_ConfigChannel+0x644>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	fa93 f3a3 	rbit	r3, r3
 8008748:	61fb      	str	r3, [r7, #28]
  return result;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008754:	2320      	movs	r3, #32
 8008756:	e003      	b.n	8008760 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	fab3 f383 	clz	r3, r3
 800875e:	b2db      	uxtb	r3, r3
 8008760:	3301      	adds	r3, #1
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	2101      	movs	r1, #1
 8008768:	fa01 f303 	lsl.w	r3, r1, r3
 800876c:	ea42 0103 	orr.w	r1, r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10d      	bne.n	8008798 <HAL_ADC_ConfigChannel+0x670>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	0e9b      	lsrs	r3, r3, #26
 8008782:	3301      	adds	r3, #1
 8008784:	f003 021f 	and.w	r2, r3, #31
 8008788:	4613      	mov	r3, r2
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	4413      	add	r3, r2
 800878e:	3b1e      	subs	r3, #30
 8008790:	051b      	lsls	r3, r3, #20
 8008792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008796:	e01b      	b.n	80087d0 <HAL_ADC_ConfigChannel+0x6a8>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	fa93 f3a3 	rbit	r3, r3
 80087a4:	613b      	str	r3, [r7, #16]
  return result;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80087b0:	2320      	movs	r3, #32
 80087b2:	e003      	b.n	80087bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	fab3 f383 	clz	r3, r3
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	3301      	adds	r3, #1
 80087be:	f003 021f 	and.w	r2, r3, #31
 80087c2:	4613      	mov	r3, r2
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4413      	add	r3, r2
 80087c8:	3b1e      	subs	r3, #30
 80087ca:	051b      	lsls	r3, r3, #20
 80087cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80087d0:	430b      	orrs	r3, r1
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	6892      	ldr	r2, [r2, #8]
 80087d6:	4619      	mov	r1, r3
 80087d8:	f7ff f8bb 	bl	8007952 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <HAL_ADC_ConfigChannel+0x6e0>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80be 	beq.w	8008966 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087f2:	d004      	beq.n	80087fe <HAL_ADC_ConfigChannel+0x6d6>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a04      	ldr	r2, [pc, #16]	; (800880c <HAL_ADC_ConfigChannel+0x6e4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d10a      	bne.n	8008814 <HAL_ADC_ConfigChannel+0x6ec>
 80087fe:	4b04      	ldr	r3, [pc, #16]	; (8008810 <HAL_ADC_ConfigChannel+0x6e8>)
 8008800:	e009      	b.n	8008816 <HAL_ADC_ConfigChannel+0x6ee>
 8008802:	bf00      	nop
 8008804:	407f0000 	.word	0x407f0000
 8008808:	80080000 	.word	0x80080000
 800880c:	50000100 	.word	0x50000100
 8008810:	50000300 	.word	0x50000300
 8008814:	4b59      	ldr	r3, [pc, #356]	; (800897c <HAL_ADC_ConfigChannel+0x854>)
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe ffb0 	bl	800777c <LL_ADC_GetCommonPathInternalCh>
 800881c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a56      	ldr	r2, [pc, #344]	; (8008980 <HAL_ADC_ConfigChannel+0x858>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d004      	beq.n	8008834 <HAL_ADC_ConfigChannel+0x70c>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a55      	ldr	r2, [pc, #340]	; (8008984 <HAL_ADC_ConfigChannel+0x85c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d13a      	bne.n	80088aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d134      	bne.n	80088aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008848:	d005      	beq.n	8008856 <HAL_ADC_ConfigChannel+0x72e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a4e      	ldr	r2, [pc, #312]	; (8008988 <HAL_ADC_ConfigChannel+0x860>)
 8008850:	4293      	cmp	r3, r2
 8008852:	f040 8085 	bne.w	8008960 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800885e:	d004      	beq.n	800886a <HAL_ADC_ConfigChannel+0x742>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a49      	ldr	r2, [pc, #292]	; (800898c <HAL_ADC_ConfigChannel+0x864>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d101      	bne.n	800886e <HAL_ADC_ConfigChannel+0x746>
 800886a:	4a49      	ldr	r2, [pc, #292]	; (8008990 <HAL_ADC_ConfigChannel+0x868>)
 800886c:	e000      	b.n	8008870 <HAL_ADC_ConfigChannel+0x748>
 800886e:	4a43      	ldr	r2, [pc, #268]	; (800897c <HAL_ADC_ConfigChannel+0x854>)
 8008870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f7fe ff6b 	bl	8007756 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008880:	4b44      	ldr	r3, [pc, #272]	; (8008994 <HAL_ADC_ConfigChannel+0x86c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	099b      	lsrs	r3, r3, #6
 8008886:	4a44      	ldr	r2, [pc, #272]	; (8008998 <HAL_ADC_ConfigChannel+0x870>)
 8008888:	fba2 2303 	umull	r2, r3, r2, r3
 800888c:	099b      	lsrs	r3, r3, #6
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800889a:	e002      	b.n	80088a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3b01      	subs	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f9      	bne.n	800889c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80088a8:	e05a      	b.n	8008960 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a3b      	ldr	r2, [pc, #236]	; (800899c <HAL_ADC_ConfigChannel+0x874>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d125      	bne.n	8008900 <HAL_ADC_ConfigChannel+0x7d8>
 80088b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d11f      	bne.n	8008900 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a31      	ldr	r2, [pc, #196]	; (800898c <HAL_ADC_ConfigChannel+0x864>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d104      	bne.n	80088d4 <HAL_ADC_ConfigChannel+0x7ac>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a34      	ldr	r2, [pc, #208]	; (80089a0 <HAL_ADC_ConfigChannel+0x878>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d047      	beq.n	8008964 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088dc:	d004      	beq.n	80088e8 <HAL_ADC_ConfigChannel+0x7c0>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a2a      	ldr	r2, [pc, #168]	; (800898c <HAL_ADC_ConfigChannel+0x864>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d101      	bne.n	80088ec <HAL_ADC_ConfigChannel+0x7c4>
 80088e8:	4a29      	ldr	r2, [pc, #164]	; (8008990 <HAL_ADC_ConfigChannel+0x868>)
 80088ea:	e000      	b.n	80088ee <HAL_ADC_ConfigChannel+0x7c6>
 80088ec:	4a23      	ldr	r2, [pc, #140]	; (800897c <HAL_ADC_ConfigChannel+0x854>)
 80088ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f7fe ff2c 	bl	8007756 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80088fe:	e031      	b.n	8008964 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a27      	ldr	r2, [pc, #156]	; (80089a4 <HAL_ADC_ConfigChannel+0x87c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d12d      	bne.n	8008966 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800890a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800890e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d127      	bne.n	8008966 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a1c      	ldr	r2, [pc, #112]	; (800898c <HAL_ADC_ConfigChannel+0x864>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d022      	beq.n	8008966 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008928:	d004      	beq.n	8008934 <HAL_ADC_ConfigChannel+0x80c>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a17      	ldr	r2, [pc, #92]	; (800898c <HAL_ADC_ConfigChannel+0x864>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d101      	bne.n	8008938 <HAL_ADC_ConfigChannel+0x810>
 8008934:	4a16      	ldr	r2, [pc, #88]	; (8008990 <HAL_ADC_ConfigChannel+0x868>)
 8008936:	e000      	b.n	800893a <HAL_ADC_ConfigChannel+0x812>
 8008938:	4a10      	ldr	r2, [pc, #64]	; (800897c <HAL_ADC_ConfigChannel+0x854>)
 800893a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800893e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f7fe ff06 	bl	8007756 <LL_ADC_SetCommonPathInternalCh>
 800894a:	e00c      	b.n	8008966 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008950:	f043 0220 	orr.w	r2, r3, #32
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800895e:	e002      	b.n	8008966 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008960:	bf00      	nop
 8008962:	e000      	b.n	8008966 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008964:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800896e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008972:	4618      	mov	r0, r3
 8008974:	37d8      	adds	r7, #216	; 0xd8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	50000700 	.word	0x50000700
 8008980:	c3210000 	.word	0xc3210000
 8008984:	90c00010 	.word	0x90c00010
 8008988:	50000600 	.word	0x50000600
 800898c:	50000100 	.word	0x50000100
 8008990:	50000300 	.word	0x50000300
 8008994:	20000000 	.word	0x20000000
 8008998:	053e2d63 	.word	0x053e2d63
 800899c:	c7520000 	.word	0xc7520000
 80089a0:	50000500 	.word	0x50000500
 80089a4:	cb840000 	.word	0xcb840000

080089a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff f8a3 	bl	8007b00 <LL_ADC_IsEnabled>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d14d      	bne.n	8008a5c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	4b28      	ldr	r3, [pc, #160]	; (8008a68 <ADC_Enable+0xc0>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d2:	f043 0210 	orr.w	r2, r3, #16
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089de:	f043 0201 	orr.w	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e039      	b.n	8008a5e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff f85e 	bl	8007ab0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80089f4:	f7fe fe6e 	bl	80076d4 <HAL_GetTick>
 80089f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80089fa:	e028      	b.n	8008a4e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff f87d 	bl	8007b00 <LL_ADC_IsEnabled>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff f84d 	bl	8007ab0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008a16:	f7fe fe5d 	bl	80076d4 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d914      	bls.n	8008a4e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d00d      	beq.n	8008a4e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a36:	f043 0210 	orr.w	r2, r3, #16
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a42:	f043 0201 	orr.w	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e007      	b.n	8008a5e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d1cf      	bne.n	80089fc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	8000003f 	.word	0x8000003f

08008a6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff f854 	bl	8007b26 <LL_ADC_IsDisableOngoing>
 8008a7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff f83b 	bl	8007b00 <LL_ADC_IsEnabled>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d047      	beq.n	8008b20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d144      	bne.n	8008b20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f003 030d 	and.w	r3, r3, #13
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d10c      	bne.n	8008abe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff f815 	bl	8007ad8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008ab6:	f7fe fe0d 	bl	80076d4 <HAL_GetTick>
 8008aba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008abc:	e029      	b.n	8008b12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac2:	f043 0210 	orr.w	r2, r3, #16
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ace:	f043 0201 	orr.w	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e023      	b.n	8008b22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008ada:	f7fe fdfb 	bl	80076d4 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d914      	bls.n	8008b12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00d      	beq.n	8008b12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008afa:	f043 0210 	orr.w	r2, r3, #16
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b06:	f043 0201 	orr.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e007      	b.n	8008b22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1dc      	bne.n	8008ada <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d14b      	bne.n	8008bdc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d021      	beq.n	8008ba2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe feb6 	bl	80078d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d032      	beq.n	8008bd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d12b      	bne.n	8008bd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d11f      	bne.n	8008bd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b98:	f043 0201 	orr.w	r2, r3, #1
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ba0:	e018      	b.n	8008bd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d111      	bne.n	8008bd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d105      	bne.n	8008bd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bcc:	f043 0201 	orr.w	r2, r3, #1
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fa89 	bl	80080ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008bda:	e00e      	b.n	8008bfa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7ff fa93 	bl	8008114 <HAL_ADC_ErrorCallback>
}
 8008bee:	e004      	b.n	8008bfa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7ff fa75 	bl	8008100 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3c:	f043 0204 	orr.w	r2, r3, #4
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff fa65 	bl	8008114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <LL_ADC_IsEnabled>:
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <LL_ADC_IsEnabled+0x18>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <LL_ADC_IsEnabled+0x1a>
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <LL_ADC_StartCalibration>:
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008c8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008c94:	4313      	orrs	r3, r2
 8008c96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	609a      	str	r2, [r3, #8]
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <LL_ADC_IsCalibrationOnGoing>:
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cbe:	d101      	bne.n	8008cc4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d101      	bne.n	8008cea <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d101      	bne.n	8008d14 <HAL_ADCEx_Calibration_Start+0x1c>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e04d      	b.n	8008db0 <HAL_ADCEx_Calibration_Start+0xb8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff fea5 	bl	8008a6c <ADC_Disable>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d136      	bne.n	8008d9a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008d34:	f023 0302 	bic.w	r3, r3, #2
 8008d38:	f043 0202 	orr.w	r2, r3, #2
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff ff96 	bl	8008c78 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008d4c:	e014      	b.n	8008d78 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3301      	adds	r3, #1
 8008d52:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4a18      	ldr	r2, [pc, #96]	; (8008db8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d90d      	bls.n	8008d78 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d60:	f023 0312 	bic.w	r3, r3, #18
 8008d64:	f043 0210 	orr.w	r2, r3, #16
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e01b      	b.n	8008db0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff ff94 	bl	8008caa <LL_ADC_IsCalibrationOnGoing>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e2      	bne.n	8008d4e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8c:	f023 0303 	bic.w	r3, r3, #3
 8008d90:	f043 0201 	orr.w	r2, r3, #1
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d98:	e005      	b.n	8008da6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d9e:	f043 0210 	orr.w	r2, r3, #16
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	0004de01 	.word	0x0004de01

08008dbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008dbc:	b590      	push	{r4, r7, lr}
 8008dbe:	b0a1      	sub	sp, #132	; 0x84
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d101      	bne.n	8008dda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e0e7      	b.n	8008faa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8008de2:	2300      	movs	r3, #0
 8008de4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8008de6:	2300      	movs	r3, #0
 8008de8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008df2:	d102      	bne.n	8008dfa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008df4:	4b6f      	ldr	r3, [pc, #444]	; (8008fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	e009      	b.n	8008e0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a6e      	ldr	r2, [pc, #440]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d102      	bne.n	8008e0a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8008e04:	4b6d      	ldr	r3, [pc, #436]	; (8008fbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008e06:	60bb      	str	r3, [r7, #8]
 8008e08:	e001      	b.n	8008e0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10b      	bne.n	8008e2c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e18:	f043 0220 	orr.w	r2, r3, #32
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0be      	b.n	8008faa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff ff4f 	bl	8008cd2 <LL_ADC_REG_IsConversionOngoing>
 8008e34:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff ff49 	bl	8008cd2 <LL_ADC_REG_IsConversionOngoing>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f040 80a0 	bne.w	8008f88 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f040 809c 	bne.w	8008f88 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e58:	d004      	beq.n	8008e64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a55      	ldr	r2, [pc, #340]	; (8008fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d101      	bne.n	8008e68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008e64:	4b56      	ldr	r3, [pc, #344]	; (8008fc0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008e66:	e000      	b.n	8008e6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008e68:	4b56      	ldr	r3, [pc, #344]	; (8008fc4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8008e6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d04b      	beq.n	8008f0c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	6859      	ldr	r1, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e86:	035b      	lsls	r3, r3, #13
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e98:	d004      	beq.n	8008ea4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a45      	ldr	r2, [pc, #276]	; (8008fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d10f      	bne.n	8008ec4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008ea4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008ea8:	f7ff fed3 	bl	8008c52 <LL_ADC_IsEnabled>
 8008eac:	4604      	mov	r4, r0
 8008eae:	4841      	ldr	r0, [pc, #260]	; (8008fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008eb0:	f7ff fecf 	bl	8008c52 <LL_ADC_IsEnabled>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	4323      	orrs	r3, r4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf0c      	ite	eq
 8008ebc:	2301      	moveq	r3, #1
 8008ebe:	2300      	movne	r3, #0
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	e012      	b.n	8008eea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008ec4:	483c      	ldr	r0, [pc, #240]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008ec6:	f7ff fec4 	bl	8008c52 <LL_ADC_IsEnabled>
 8008eca:	4604      	mov	r4, r0
 8008ecc:	483b      	ldr	r0, [pc, #236]	; (8008fbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008ece:	f7ff fec0 	bl	8008c52 <LL_ADC_IsEnabled>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	431c      	orrs	r4, r3
 8008ed6:	483c      	ldr	r0, [pc, #240]	; (8008fc8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008ed8:	f7ff febb 	bl	8008c52 <LL_ADC_IsEnabled>
 8008edc:	4603      	mov	r3, r0
 8008ede:	4323      	orrs	r3, r4
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2301      	moveq	r3, #1
 8008ee6:	2300      	movne	r3, #0
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d056      	beq.n	8008f9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008ef6:	f023 030f 	bic.w	r3, r3, #15
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	6811      	ldr	r1, [r2, #0]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	6892      	ldr	r2, [r2, #8]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	431a      	orrs	r2, r3
 8008f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f08:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f0a:	e047      	b.n	8008f9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f16:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f20:	d004      	beq.n	8008f2c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a23      	ldr	r2, [pc, #140]	; (8008fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d10f      	bne.n	8008f4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008f2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f30:	f7ff fe8f 	bl	8008c52 <LL_ADC_IsEnabled>
 8008f34:	4604      	mov	r4, r0
 8008f36:	481f      	ldr	r0, [pc, #124]	; (8008fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008f38:	f7ff fe8b 	bl	8008c52 <LL_ADC_IsEnabled>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	4323      	orrs	r3, r4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bf0c      	ite	eq
 8008f44:	2301      	moveq	r3, #1
 8008f46:	2300      	movne	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	e012      	b.n	8008f72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008f4c:	481a      	ldr	r0, [pc, #104]	; (8008fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008f4e:	f7ff fe80 	bl	8008c52 <LL_ADC_IsEnabled>
 8008f52:	4604      	mov	r4, r0
 8008f54:	4819      	ldr	r0, [pc, #100]	; (8008fbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008f56:	f7ff fe7c 	bl	8008c52 <LL_ADC_IsEnabled>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	431c      	orrs	r4, r3
 8008f5e:	481a      	ldr	r0, [pc, #104]	; (8008fc8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008f60:	f7ff fe77 	bl	8008c52 <LL_ADC_IsEnabled>
 8008f64:	4603      	mov	r3, r0
 8008f66:	4323      	orrs	r3, r4
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	bf0c      	ite	eq
 8008f6c:	2301      	moveq	r3, #1
 8008f6e:	2300      	movne	r3, #0
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d012      	beq.n	8008f9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f7e:	f023 030f 	bic.w	r3, r3, #15
 8008f82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f86:	e009      	b.n	8008f9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8c:	f043 0220 	orr.w	r2, r3, #32
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008f9a:	e000      	b.n	8008f9e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008fa6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3784      	adds	r7, #132	; 0x84
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd90      	pop	{r4, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	50000100 	.word	0x50000100
 8008fb8:	50000400 	.word	0x50000400
 8008fbc:	50000500 	.word	0x50000500
 8008fc0:	50000300 	.word	0x50000300
 8008fc4:	50000700 	.word	0x50000700
 8008fc8:	50000600 	.word	0x50000600

08008fcc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008fd4:	4b05      	ldr	r3, [pc, #20]	; (8008fec <LL_EXTI_EnableIT_0_31+0x20>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	4904      	ldr	r1, [pc, #16]	; (8008fec <LL_EXTI_EnableIT_0_31+0x20>)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	600b      	str	r3, [r1, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	40010400 	.word	0x40010400

08008ff0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <LL_EXTI_EnableIT_32_63+0x20>)
 8008ffa:	6a1a      	ldr	r2, [r3, #32]
 8008ffc:	4904      	ldr	r1, [pc, #16]	; (8009010 <LL_EXTI_EnableIT_32_63+0x20>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4313      	orrs	r3, r2
 8009002:	620b      	str	r3, [r1, #32]
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	40010400 	.word	0x40010400

08009014 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <LL_EXTI_DisableIT_0_31+0x24>)
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	43db      	mvns	r3, r3
 8009024:	4904      	ldr	r1, [pc, #16]	; (8009038 <LL_EXTI_DisableIT_0_31+0x24>)
 8009026:	4013      	ands	r3, r2
 8009028:	600b      	str	r3, [r1, #0]
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	40010400 	.word	0x40010400

0800903c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009044:	4b06      	ldr	r3, [pc, #24]	; (8009060 <LL_EXTI_DisableIT_32_63+0x24>)
 8009046:	6a1a      	ldr	r2, [r3, #32]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	43db      	mvns	r3, r3
 800904c:	4904      	ldr	r1, [pc, #16]	; (8009060 <LL_EXTI_DisableIT_32_63+0x24>)
 800904e:	4013      	ands	r3, r2
 8009050:	620b      	str	r3, [r1, #32]
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	40010400 	.word	0x40010400

08009064 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800906c:	4b05      	ldr	r3, [pc, #20]	; (8009084 <LL_EXTI_EnableEvent_0_31+0x20>)
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	4904      	ldr	r1, [pc, #16]	; (8009084 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4313      	orrs	r3, r2
 8009076:	604b      	str	r3, [r1, #4]

}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	40010400 	.word	0x40010400

08009088 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009094:	4904      	ldr	r1, [pc, #16]	; (80090a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4313      	orrs	r3, r2
 800909a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	40010400 	.word	0x40010400

080090ac <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80090b4:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	43db      	mvns	r3, r3
 80090bc:	4904      	ldr	r1, [pc, #16]	; (80090d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80090be:	4013      	ands	r3, r2
 80090c0:	604b      	str	r3, [r1, #4]
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	40010400 	.word	0x40010400

080090d4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80090dc:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80090de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	43db      	mvns	r3, r3
 80090e4:	4904      	ldr	r1, [pc, #16]	; (80090f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40010400 	.word	0x40010400

080090fc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	4904      	ldr	r1, [pc, #16]	; (800911c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4313      	orrs	r3, r2
 800910e:	608b      	str	r3, [r1, #8]

}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	40010400 	.word	0x40010400

08009120 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800912a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800912c:	4904      	ldr	r1, [pc, #16]	; (8009140 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4313      	orrs	r3, r2
 8009132:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	40010400 	.word	0x40010400

08009144 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800914c:	4b06      	ldr	r3, [pc, #24]	; (8009168 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	43db      	mvns	r3, r3
 8009154:	4904      	ldr	r1, [pc, #16]	; (8009168 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009156:	4013      	ands	r3, r2
 8009158:	608b      	str	r3, [r1, #8]

}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	40010400 	.word	0x40010400

0800916c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009174:	4b06      	ldr	r3, [pc, #24]	; (8009190 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	43db      	mvns	r3, r3
 800917c:	4904      	ldr	r1, [pc, #16]	; (8009190 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800917e:	4013      	ands	r3, r2
 8009180:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	40010400 	.word	0x40010400

08009194 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	4904      	ldr	r1, [pc, #16]	; (80091b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60cb      	str	r3, [r1, #12]
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	40010400 	.word	0x40010400

080091b8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80091c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c4:	4904      	ldr	r1, [pc, #16]	; (80091d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	40010400 	.word	0x40010400

080091dc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	43db      	mvns	r3, r3
 80091ec:	4904      	ldr	r1, [pc, #16]	; (8009200 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	60cb      	str	r3, [r1, #12]
}
 80091f2:	bf00      	nop
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40010400 	.word	0x40010400

08009204 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	43db      	mvns	r3, r3
 8009214:	4904      	ldr	r1, [pc, #16]	; (8009228 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009216:	4013      	ands	r3, r2
 8009218:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	40010400 	.word	0x40010400

0800922c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009234:	4a04      	ldr	r2, [pc, #16]	; (8009248 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6153      	str	r3, [r2, #20]
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40010400 	.word	0x40010400

0800924c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009254:	4a04      	ldr	r2, [pc, #16]	; (8009268 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6353      	str	r3, [r2, #52]	; 0x34
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40010400 	.word	0x40010400

0800926c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	77fb      	strb	r3, [r7, #31]
 8009286:	e181      	b.n	800958c <HAL_COMP_Init+0x320>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009296:	d102      	bne.n	800929e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	77fb      	strb	r3, [r7, #31]
 800929c:	e176      	b.n	800958c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	7f5b      	ldrb	r3, [r3, #29]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d108      	bne.n	80092ba <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7fd fb51 	bl	800695c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092c4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80092e0:	4313      	orrs	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	4b90      	ldr	r3, [pc, #576]	; (800952c <HAL_COMP_Init+0x2c0>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	6979      	ldr	r1, [r7, #20]
 80092f4:	430b      	orrs	r3, r1
 80092f6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d016      	beq.n	8009334 <HAL_COMP_Init+0xc8>
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d113      	bne.n	8009334 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800930c:	4b88      	ldr	r3, [pc, #544]	; (8009530 <HAL_COMP_Init+0x2c4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	099b      	lsrs	r3, r3, #6
 8009312:	4a88      	ldr	r2, [pc, #544]	; (8009534 <HAL_COMP_Init+0x2c8>)
 8009314:	fba2 2303 	umull	r2, r3, r2, r3
 8009318:	099b      	lsrs	r3, r3, #6
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009326:	e002      	b.n	800932e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3b01      	subs	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f9      	bne.n	8009328 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a7f      	ldr	r2, [pc, #508]	; (8009538 <HAL_COMP_Init+0x2cc>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d028      	beq.n	8009390 <HAL_COMP_Init+0x124>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a7e      	ldr	r2, [pc, #504]	; (800953c <HAL_COMP_Init+0x2d0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d020      	beq.n	800938a <HAL_COMP_Init+0x11e>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a7c      	ldr	r2, [pc, #496]	; (8009540 <HAL_COMP_Init+0x2d4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d018      	beq.n	8009384 <HAL_COMP_Init+0x118>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a7b      	ldr	r2, [pc, #492]	; (8009544 <HAL_COMP_Init+0x2d8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d010      	beq.n	800937e <HAL_COMP_Init+0x112>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a79      	ldr	r2, [pc, #484]	; (8009548 <HAL_COMP_Init+0x2dc>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d008      	beq.n	8009378 <HAL_COMP_Init+0x10c>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a78      	ldr	r2, [pc, #480]	; (800954c <HAL_COMP_Init+0x2e0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d101      	bne.n	8009374 <HAL_COMP_Init+0x108>
 8009370:	2301      	movs	r3, #1
 8009372:	e00f      	b.n	8009394 <HAL_COMP_Init+0x128>
 8009374:	2302      	movs	r3, #2
 8009376:	e00d      	b.n	8009394 <HAL_COMP_Init+0x128>
 8009378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800937c:	e00a      	b.n	8009394 <HAL_COMP_Init+0x128>
 800937e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009382:	e007      	b.n	8009394 <HAL_COMP_Init+0x128>
 8009384:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009388:	e004      	b.n	8009394 <HAL_COMP_Init+0x128>
 800938a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800938e:	e001      	b.n	8009394 <HAL_COMP_Init+0x128>
 8009390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009394:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 80b6 	beq.w	8009510 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	f003 0310 	and.w	r3, r3, #16
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d011      	beq.n	80093d4 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a65      	ldr	r2, [pc, #404]	; (800954c <HAL_COMP_Init+0x2e0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d004      	beq.n	80093c4 <HAL_COMP_Init+0x158>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a64      	ldr	r2, [pc, #400]	; (8009550 <HAL_COMP_Init+0x2e4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d103      	bne.n	80093cc <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80093c4:	6938      	ldr	r0, [r7, #16]
 80093c6:	f7ff feab 	bl	8009120 <LL_EXTI_EnableRisingTrig_32_63>
 80093ca:	e014      	b.n	80093f6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80093cc:	6938      	ldr	r0, [r7, #16]
 80093ce:	f7ff fe95 	bl	80090fc <LL_EXTI_EnableRisingTrig_0_31>
 80093d2:	e010      	b.n	80093f6 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a5c      	ldr	r2, [pc, #368]	; (800954c <HAL_COMP_Init+0x2e0>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d004      	beq.n	80093e8 <HAL_COMP_Init+0x17c>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a5b      	ldr	r2, [pc, #364]	; (8009550 <HAL_COMP_Init+0x2e4>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d103      	bne.n	80093f0 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80093e8:	6938      	ldr	r0, [r7, #16]
 80093ea:	f7ff febf 	bl	800916c <LL_EXTI_DisableRisingTrig_32_63>
 80093ee:	e002      	b.n	80093f6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80093f0:	6938      	ldr	r0, [r7, #16]
 80093f2:	f7ff fea7 	bl	8009144 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	f003 0320 	and.w	r3, r3, #32
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d011      	beq.n	8009426 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a51      	ldr	r2, [pc, #324]	; (800954c <HAL_COMP_Init+0x2e0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d004      	beq.n	8009416 <HAL_COMP_Init+0x1aa>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a4f      	ldr	r2, [pc, #316]	; (8009550 <HAL_COMP_Init+0x2e4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d103      	bne.n	800941e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009416:	6938      	ldr	r0, [r7, #16]
 8009418:	f7ff fece 	bl	80091b8 <LL_EXTI_EnableFallingTrig_32_63>
 800941c:	e014      	b.n	8009448 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800941e:	6938      	ldr	r0, [r7, #16]
 8009420:	f7ff feb8 	bl	8009194 <LL_EXTI_EnableFallingTrig_0_31>
 8009424:	e010      	b.n	8009448 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a48      	ldr	r2, [pc, #288]	; (800954c <HAL_COMP_Init+0x2e0>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <HAL_COMP_Init+0x1ce>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a46      	ldr	r2, [pc, #280]	; (8009550 <HAL_COMP_Init+0x2e4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d103      	bne.n	8009442 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800943a:	6938      	ldr	r0, [r7, #16]
 800943c:	f7ff fee2 	bl	8009204 <LL_EXTI_DisableFallingTrig_32_63>
 8009440:	e002      	b.n	8009448 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009442:	6938      	ldr	r0, [r7, #16]
 8009444:	f7ff feca 	bl	80091dc <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a3f      	ldr	r2, [pc, #252]	; (800954c <HAL_COMP_Init+0x2e0>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_COMP_Init+0x1f0>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a3e      	ldr	r2, [pc, #248]	; (8009550 <HAL_COMP_Init+0x2e4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d103      	bne.n	8009464 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800945c:	6938      	ldr	r0, [r7, #16]
 800945e:	f7ff fef5 	bl	800924c <LL_EXTI_ClearFlag_32_63>
 8009462:	e002      	b.n	800946a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009464:	6938      	ldr	r0, [r7, #16]
 8009466:	f7ff fee1 	bl	800922c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d011      	beq.n	800949a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a34      	ldr	r2, [pc, #208]	; (800954c <HAL_COMP_Init+0x2e0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d004      	beq.n	800948a <HAL_COMP_Init+0x21e>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a32      	ldr	r2, [pc, #200]	; (8009550 <HAL_COMP_Init+0x2e4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d103      	bne.n	8009492 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800948a:	6938      	ldr	r0, [r7, #16]
 800948c:	f7ff fdfc 	bl	8009088 <LL_EXTI_EnableEvent_32_63>
 8009490:	e014      	b.n	80094bc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009492:	6938      	ldr	r0, [r7, #16]
 8009494:	f7ff fde6 	bl	8009064 <LL_EXTI_EnableEvent_0_31>
 8009498:	e010      	b.n	80094bc <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a2b      	ldr	r2, [pc, #172]	; (800954c <HAL_COMP_Init+0x2e0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d004      	beq.n	80094ae <HAL_COMP_Init+0x242>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a29      	ldr	r2, [pc, #164]	; (8009550 <HAL_COMP_Init+0x2e4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d103      	bne.n	80094b6 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80094ae:	6938      	ldr	r0, [r7, #16]
 80094b0:	f7ff fe10 	bl	80090d4 <LL_EXTI_DisableEvent_32_63>
 80094b4:	e002      	b.n	80094bc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80094b6:	6938      	ldr	r0, [r7, #16]
 80094b8:	f7ff fdf8 	bl	80090ac <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d011      	beq.n	80094ec <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1f      	ldr	r2, [pc, #124]	; (800954c <HAL_COMP_Init+0x2e0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d004      	beq.n	80094dc <HAL_COMP_Init+0x270>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1e      	ldr	r2, [pc, #120]	; (8009550 <HAL_COMP_Init+0x2e4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d103      	bne.n	80094e4 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80094dc:	6938      	ldr	r0, [r7, #16]
 80094de:	f7ff fd87 	bl	8008ff0 <LL_EXTI_EnableIT_32_63>
 80094e2:	e04b      	b.n	800957c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80094e4:	6938      	ldr	r0, [r7, #16]
 80094e6:	f7ff fd71 	bl	8008fcc <LL_EXTI_EnableIT_0_31>
 80094ea:	e047      	b.n	800957c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a16      	ldr	r2, [pc, #88]	; (800954c <HAL_COMP_Init+0x2e0>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d004      	beq.n	8009500 <HAL_COMP_Init+0x294>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a15      	ldr	r2, [pc, #84]	; (8009550 <HAL_COMP_Init+0x2e4>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009500:	6938      	ldr	r0, [r7, #16]
 8009502:	f7ff fd9b 	bl	800903c <LL_EXTI_DisableIT_32_63>
 8009506:	e039      	b.n	800957c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009508:	6938      	ldr	r0, [r7, #16]
 800950a:	f7ff fd83 	bl	8009014 <LL_EXTI_DisableIT_0_31>
 800950e:	e035      	b.n	800957c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a0d      	ldr	r2, [pc, #52]	; (800954c <HAL_COMP_Init+0x2e0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d004      	beq.n	8009524 <HAL_COMP_Init+0x2b8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a0c      	ldr	r2, [pc, #48]	; (8009550 <HAL_COMP_Init+0x2e4>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d117      	bne.n	8009554 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009524:	6938      	ldr	r0, [r7, #16]
 8009526:	f7ff fdd5 	bl	80090d4 <LL_EXTI_DisableEvent_32_63>
 800952a:	e016      	b.n	800955a <HAL_COMP_Init+0x2ee>
 800952c:	ff007e0f 	.word	0xff007e0f
 8009530:	20000000 	.word	0x20000000
 8009534:	053e2d63 	.word	0x053e2d63
 8009538:	40010200 	.word	0x40010200
 800953c:	40010204 	.word	0x40010204
 8009540:	40010208 	.word	0x40010208
 8009544:	4001020c 	.word	0x4001020c
 8009548:	40010210 	.word	0x40010210
 800954c:	40010214 	.word	0x40010214
 8009550:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009554:	6938      	ldr	r0, [r7, #16]
 8009556:	f7ff fda9 	bl	80090ac <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a0e      	ldr	r2, [pc, #56]	; (8009598 <HAL_COMP_Init+0x32c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d004      	beq.n	800956e <HAL_COMP_Init+0x302>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a0c      	ldr	r2, [pc, #48]	; (800959c <HAL_COMP_Init+0x330>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d103      	bne.n	8009576 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800956e:	6938      	ldr	r0, [r7, #16]
 8009570:	f7ff fd64 	bl	800903c <LL_EXTI_DisableIT_32_63>
 8009574:	e002      	b.n	800957c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009576:	6938      	ldr	r0, [r7, #16]
 8009578:	f7ff fd4c 	bl	8009014 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7f5b      	ldrb	r3, [r3, #29]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800958c:	7ffb      	ldrb	r3, [r7, #31]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	40010214 	.word	0x40010214
 800959c:	40010218 	.word	0x40010218

080095a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80095b0:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <__NVIC_SetPriorityGrouping+0x44>)
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80095bc:	4013      	ands	r3, r2
 80095be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80095c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80095cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80095d2:	4a04      	ldr	r2, [pc, #16]	; (80095e4 <__NVIC_SetPriorityGrouping+0x44>)
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	60d3      	str	r3, [r2, #12]
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	e000ed00 	.word	0xe000ed00

080095e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80095ec:	4b04      	ldr	r3, [pc, #16]	; (8009600 <__NVIC_GetPriorityGrouping+0x18>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	0a1b      	lsrs	r3, r3, #8
 80095f2:	f003 0307 	and.w	r3, r3, #7
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	e000ed00 	.word	0xe000ed00

08009604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800960e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009612:	2b00      	cmp	r3, #0
 8009614:	db0b      	blt.n	800962e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	f003 021f 	and.w	r2, r3, #31
 800961c:	4907      	ldr	r1, [pc, #28]	; (800963c <__NVIC_EnableIRQ+0x38>)
 800961e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009622:	095b      	lsrs	r3, r3, #5
 8009624:	2001      	movs	r0, #1
 8009626:	fa00 f202 	lsl.w	r2, r0, r2
 800962a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	e000e100 	.word	0xe000e100

08009640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800964c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009650:	2b00      	cmp	r3, #0
 8009652:	db0a      	blt.n	800966a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	b2da      	uxtb	r2, r3
 8009658:	490c      	ldr	r1, [pc, #48]	; (800968c <__NVIC_SetPriority+0x4c>)
 800965a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800965e:	0112      	lsls	r2, r2, #4
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	440b      	add	r3, r1
 8009664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009668:	e00a      	b.n	8009680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	b2da      	uxtb	r2, r3
 800966e:	4908      	ldr	r1, [pc, #32]	; (8009690 <__NVIC_SetPriority+0x50>)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	3b04      	subs	r3, #4
 8009678:	0112      	lsls	r2, r2, #4
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	440b      	add	r3, r1
 800967e:	761a      	strb	r2, [r3, #24]
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	e000e100 	.word	0xe000e100
 8009690:	e000ed00 	.word	0xe000ed00

08009694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009694:	b480      	push	{r7}
 8009696:	b089      	sub	sp, #36	; 0x24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	f1c3 0307 	rsb	r3, r3, #7
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	bf28      	it	cs
 80096b2:	2304      	movcs	r3, #4
 80096b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	3304      	adds	r3, #4
 80096ba:	2b06      	cmp	r3, #6
 80096bc:	d902      	bls.n	80096c4 <NVIC_EncodePriority+0x30>
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	3b03      	subs	r3, #3
 80096c2:	e000      	b.n	80096c6 <NVIC_EncodePriority+0x32>
 80096c4:	2300      	movs	r3, #0
 80096c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096c8:	f04f 32ff 	mov.w	r2, #4294967295
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	fa02 f303 	lsl.w	r3, r2, r3
 80096d2:	43da      	mvns	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	401a      	ands	r2, r3
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80096dc:	f04f 31ff 	mov.w	r1, #4294967295
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	fa01 f303 	lsl.w	r3, r1, r3
 80096e6:	43d9      	mvns	r1, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096ec:	4313      	orrs	r3, r2
         );
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3724      	adds	r7, #36	; 0x24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
	...

080096fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3b01      	subs	r3, #1
 8009708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800970c:	d301      	bcc.n	8009712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800970e:	2301      	movs	r3, #1
 8009710:	e00f      	b.n	8009732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009712:	4a0a      	ldr	r2, [pc, #40]	; (800973c <SysTick_Config+0x40>)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3b01      	subs	r3, #1
 8009718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800971a:	210f      	movs	r1, #15
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	f7ff ff8e 	bl	8009640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009724:	4b05      	ldr	r3, [pc, #20]	; (800973c <SysTick_Config+0x40>)
 8009726:	2200      	movs	r2, #0
 8009728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800972a:	4b04      	ldr	r3, [pc, #16]	; (800973c <SysTick_Config+0x40>)
 800972c:	2207      	movs	r2, #7
 800972e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	e000e010 	.word	0xe000e010

08009740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff ff29 	bl	80095a0 <__NVIC_SetPriorityGrouping>
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	4603      	mov	r3, r0
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	607a      	str	r2, [r7, #4]
 8009762:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009764:	f7ff ff40 	bl	80095e8 <__NVIC_GetPriorityGrouping>
 8009768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	68b9      	ldr	r1, [r7, #8]
 800976e:	6978      	ldr	r0, [r7, #20]
 8009770:	f7ff ff90 	bl	8009694 <NVIC_EncodePriority>
 8009774:	4602      	mov	r2, r0
 8009776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f7ff ff5f 	bl	8009640 <__NVIC_SetPriority>
}
 8009782:	bf00      	nop
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	4603      	mov	r3, r0
 8009792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff ff33 	bl	8009604 <__NVIC_EnableIRQ>
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff ffa4 	bl	80096fc <SysTick_Config>
 80097b4:	4603      	mov	r3, r0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e014      	b.n	80097fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	791b      	ldrb	r3, [r3, #4]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7fd f951 	bl	8006a88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2202      	movs	r2, #2
 80097ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08a      	sub	sp, #40	; 0x28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	795b      	ldrb	r3, [r3, #5]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_DAC_ConfigChannel+0x18>
 8009818:	2302      	movs	r3, #2
 800981a:	e192      	b.n	8009b42 <HAL_DAC_ConfigChannel+0x33e>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2201      	movs	r2, #1
 8009820:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2202      	movs	r2, #2
 8009826:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	2b04      	cmp	r3, #4
 800982e:	d174      	bne.n	800991a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009830:	f7fd ff50 	bl	80076d4 <HAL_GetTick>
 8009834:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d134      	bne.n	80098a6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800983c:	e011      	b.n	8009862 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800983e:	f7fd ff49 	bl	80076d4 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b01      	cmp	r3, #1
 800984a:	d90a      	bls.n	8009862 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f043 0208 	orr.w	r2, r3, #8
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2203      	movs	r2, #3
 800985c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e16f      	b.n	8009b42 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e6      	bne.n	800983e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8009870:	2001      	movs	r0, #1
 8009872:	f7fd ff3b 	bl	80076ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800987e:	641a      	str	r2, [r3, #64]	; 0x40
 8009880:	e01e      	b.n	80098c0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009882:	f7fd ff27 	bl	80076d4 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	d90a      	bls.n	80098a6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f043 0208 	orr.w	r2, r3, #8
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2203      	movs	r2, #3
 80098a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e14d      	b.n	8009b42 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dbe8      	blt.n	8009882 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80098b0:	2001      	movs	r0, #1
 80098b2:	f7fd ff1b 	bl	80076ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098be:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80098d0:	fa01 f303 	lsl.w	r3, r1, r3
 80098d4:	43db      	mvns	r3, r3
 80098d6:	ea02 0103 	and.w	r1, r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	409a      	lsls	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f003 0310 	and.w	r3, r3, #16
 80098fa:	21ff      	movs	r1, #255	; 0xff
 80098fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009900:	43db      	mvns	r3, r3
 8009902:	ea02 0103 	and.w	r1, r2, r3
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f003 0310 	and.w	r3, r3, #16
 8009910:	409a      	lsls	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d11d      	bne.n	800995e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	221f      	movs	r2, #31
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	43db      	mvns	r3, r3
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	4013      	ands	r3, r2
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009952:	4313      	orrs	r3, r2
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f003 0310 	and.w	r3, r3, #16
 800996c:	2207      	movs	r2, #7
 800996e:	fa02 f303 	lsl.w	r3, r2, r3
 8009972:	43db      	mvns	r3, r3
 8009974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009976:	4013      	ands	r3, r2
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d102      	bne.n	8009988 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8009982:	2300      	movs	r3, #0
 8009984:	623b      	str	r3, [r7, #32]
 8009986:	e00f      	b.n	80099a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d102      	bne.n	8009996 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009990:	2301      	movs	r3, #1
 8009992:	623b      	str	r3, [r7, #32]
 8009994:	e008      	b.n	80099a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800999e:	2301      	movs	r3, #1
 80099a0:	623b      	str	r3, [r7, #32]
 80099a2:	e001      	b.n	80099a8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	6a3a      	ldr	r2, [r7, #32]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f003 0310 	and.w	r3, r3, #16
 80099be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099c2:	fa02 f303 	lsl.w	r3, r2, r3
 80099c6:	43db      	mvns	r3, r3
 80099c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ca:	4013      	ands	r3, r2
 80099cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	791b      	ldrb	r3, [r3, #4]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d102      	bne.n	80099dc <HAL_DAC_ConfigChannel+0x1d8>
 80099d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099da:	e000      	b.n	80099de <HAL_DAC_ConfigChannel+0x1da>
 80099dc:	2300      	movs	r3, #0
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f003 0310 	and.w	r3, r3, #16
 80099ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	43db      	mvns	r3, r3
 80099f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f6:	4013      	ands	r3, r2
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	795b      	ldrb	r3, [r3, #5]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d102      	bne.n	8009a08 <HAL_DAC_ConfigChannel+0x204>
 8009a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a06:	e000      	b.n	8009a0a <HAL_DAC_ConfigChannel+0x206>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d114      	bne.n	8009a4a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009a20:	f004 f848 	bl	800dab4 <HAL_RCC_GetHCLKFreq>
 8009a24:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	4a48      	ldr	r2, [pc, #288]	; (8009b4c <HAL_DAC_ConfigChannel+0x348>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d904      	bls.n	8009a38 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
 8009a36:	e00f      	b.n	8009a58 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	4a45      	ldr	r2, [pc, #276]	; (8009b50 <HAL_DAC_ConfigChannel+0x34c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d90a      	bls.n	8009a56 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24
 8009a48:	e006      	b.n	8009a58 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a50:	4313      	orrs	r3, r2
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
 8009a54:	e000      	b.n	8009a58 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8009a56:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f003 0310 	and.w	r3, r3, #16
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	fa02 f303 	lsl.w	r3, r2, r3
 8009a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a66:	4313      	orrs	r3, r2
 8009a68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6819      	ldr	r1, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a82:	fa02 f303 	lsl.w	r3, r2, r3
 8009a86:	43da      	mvns	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	400a      	ands	r2, r1
 8009a8e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa6:	43db      	mvns	r3, r3
 8009aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aaa:	4013      	ands	r3, r2
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0310 	and.w	r3, r3, #16
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009acc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6819      	ldr	r1, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f003 0310 	and.w	r3, r3, #16
 8009ada:	22c0      	movs	r2, #192	; 0xc0
 8009adc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae0:	43da      	mvns	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	400a      	ands	r2, r1
 8009ae8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	089b      	lsrs	r3, r3, #2
 8009af0:	f003 030f 	and.w	r3, r3, #15
 8009af4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	089b      	lsrs	r3, r3, #2
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f003 0310 	and.w	r3, r3, #16
 8009b14:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009b18:	fa01 f303 	lsl.w	r3, r1, r3
 8009b1c:	43db      	mvns	r3, r3
 8009b1e:	ea02 0103 	and.w	r1, r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f003 0310 	and.w	r3, r3, #16
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	409a      	lsls	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3728      	adds	r7, #40	; 0x28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	09896800 	.word	0x09896800
 8009b50:	04c4b400 	.word	0x04c4b400

08009b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e08d      	b.n	8009c82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	4b47      	ldr	r3, [pc, #284]	; (8009c8c <HAL_DMA_Init+0x138>)
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d80f      	bhi.n	8009b92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	4b45      	ldr	r3, [pc, #276]	; (8009c90 <HAL_DMA_Init+0x13c>)
 8009b7a:	4413      	add	r3, r2
 8009b7c:	4a45      	ldr	r2, [pc, #276]	; (8009c94 <HAL_DMA_Init+0x140>)
 8009b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b82:	091b      	lsrs	r3, r3, #4
 8009b84:	009a      	lsls	r2, r3, #2
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a42      	ldr	r2, [pc, #264]	; (8009c98 <HAL_DMA_Init+0x144>)
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8009b90:	e00e      	b.n	8009bb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	4b40      	ldr	r3, [pc, #256]	; (8009c9c <HAL_DMA_Init+0x148>)
 8009b9a:	4413      	add	r3, r2
 8009b9c:	4a3d      	ldr	r2, [pc, #244]	; (8009c94 <HAL_DMA_Init+0x140>)
 8009b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba2:	091b      	lsrs	r3, r3, #4
 8009ba4:	009a      	lsls	r2, r3, #2
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a3c      	ldr	r2, [pc, #240]	; (8009ca0 <HAL_DMA_Init+0x14c>)
 8009bae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa76 	bl	800a0f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c10:	d102      	bne.n	8009c18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c20:	b2d2      	uxtb	r2, r2
 8009c22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d010      	beq.n	8009c58 <HAL_DMA_Init+0x104>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	d80c      	bhi.n	8009c58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa96 	bl	800a170 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009c54:	605a      	str	r2, [r3, #4]
 8009c56:	e008      	b.n	8009c6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40020407 	.word	0x40020407
 8009c90:	bffdfff8 	.word	0xbffdfff8
 8009c94:	cccccccd 	.word	0xcccccccd
 8009c98:	40020000 	.word	0x40020000
 8009c9c:	bffdfbf8 	.word	0xbffdfbf8
 8009ca0:	40020400 	.word	0x40020400

08009ca4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <HAL_DMA_Start_IT+0x20>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e066      	b.n	8009d92 <HAL_DMA_Start_IT+0xee>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d155      	bne.n	8009d84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0201 	bic.w	r2, r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 f9bb 	bl	800a078 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d008      	beq.n	8009d1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 020e 	orr.w	r2, r2, #14
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	e00f      	b.n	8009d3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0204 	bic.w	r2, r2, #4
 8009d2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f042 020a 	orr.w	r2, r2, #10
 8009d3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d007      	beq.n	8009d72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f042 0201 	orr.w	r2, r2, #1
 8009d80:	601a      	str	r2, [r3, #0]
 8009d82:	e005      	b.n	8009d90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d005      	beq.n	8009dbe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2204      	movs	r2, #4
 8009db6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
 8009dbc:	e037      	b.n	8009e2e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 020e 	bic.w	r2, r2, #14
 8009dcc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ddc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 0201 	bic.w	r2, r2, #1
 8009dec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df2:	f003 021f 	and.w	r2, r3, #31
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8009e00:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e0a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00c      	beq.n	8009e2e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e22:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e2c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d00d      	beq.n	8009e80 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2204      	movs	r2, #4
 8009e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	73fb      	strb	r3, [r7, #15]
 8009e7e:	e047      	b.n	8009f10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 020e 	bic.w	r2, r2, #14
 8009e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0201 	bic.w	r2, r2, #1
 8009e9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb4:	f003 021f 	and.w	r2, r3, #31
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8009ec2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ecc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00c      	beq.n	8009ef0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ee4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009eee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	4798      	blx	r3
    }
  }
  return status;
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f36:	f003 031f 	and.w	r3, r3, #31
 8009f3a:	2204      	movs	r2, #4
 8009f3c:	409a      	lsls	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4013      	ands	r3, r2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d026      	beq.n	8009f94 <HAL_DMA_IRQHandler+0x7a>
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d021      	beq.n	8009f94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0204 	bic.w	r2, r2, #4
 8009f6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f72:	f003 021f 	and.w	r2, r3, #31
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8009f80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d071      	beq.n	800a06e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009f92:	e06c      	b.n	800a06e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f98:	f003 031f 	and.w	r3, r3, #31
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	409a      	lsls	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d02e      	beq.n	800a006 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f003 0302 	and.w	r3, r3, #2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d029      	beq.n	800a006 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0320 	and.w	r3, r3, #32
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10b      	bne.n	8009fd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f022 020a 	bic.w	r2, r2, #10
 8009fce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fdc:	f003 021f 	and.w	r2, r3, #31
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe4:	2102      	movs	r1, #2
 8009fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8009fea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d038      	beq.n	800a06e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a004:	e033      	b.n	800a06e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	f003 031f 	and.w	r3, r3, #31
 800a00e:	2208      	movs	r2, #8
 800a010:	409a      	lsls	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4013      	ands	r3, r2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d02a      	beq.n	800a070 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f003 0308 	and.w	r3, r3, #8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d025      	beq.n	800a070 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 020e 	bic.w	r2, r2, #14
 800a032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a038:	f003 021f 	and.w	r2, r3, #31
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	2101      	movs	r1, #1
 800a042:	fa01 f202 	lsl.w	r2, r1, r2
 800a046:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a06e:	bf00      	nop
 800a070:	bf00      	nop
}
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a08e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a094:	2b00      	cmp	r3, #0
 800a096:	d004      	beq.n	800a0a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a0a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a6:	f003 021f 	and.w	r2, r3, #31
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	fa01 f202 	lsl.w	r2, r1, r2
 800a0b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	2b10      	cmp	r3, #16
 800a0c4:	d108      	bne.n	800a0d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a0d6:	e007      	b.n	800a0e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	60da      	str	r2, [r3, #12]
}
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	4b16      	ldr	r3, [pc, #88]	; (800a15c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a104:	429a      	cmp	r2, r3
 800a106:	d802      	bhi.n	800a10e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e001      	b.n	800a112 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a10e:	4b15      	ldr	r3, [pc, #84]	; (800a164 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a110:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	3b08      	subs	r3, #8
 800a11e:	4a12      	ldr	r2, [pc, #72]	; (800a168 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a120:	fba2 2303 	umull	r2, r3, r2, r3
 800a124:	091b      	lsrs	r3, r3, #4
 800a126:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12c:	089b      	lsrs	r3, r3, #2
 800a12e:	009a      	lsls	r2, r3, #2
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	4413      	add	r3, r2
 800a134:	461a      	mov	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a0b      	ldr	r2, [pc, #44]	; (800a16c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a13e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f003 031f 	and.w	r3, r3, #31
 800a146:	2201      	movs	r2, #1
 800a148:	409a      	lsls	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a14e:	bf00      	nop
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	40020407 	.word	0x40020407
 800a160:	40020800 	.word	0x40020800
 800a164:	40020820 	.word	0x40020820
 800a168:	cccccccd 	.word	0xcccccccd
 800a16c:	40020880 	.word	0x40020880

0800a170 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	461a      	mov	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a192:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3b01      	subs	r3, #1
 800a198:	f003 031f 	and.w	r3, r3, #31
 800a19c:	2201      	movs	r2, #1
 800a19e:	409a      	lsls	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a1a4:	bf00      	nop
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	1000823f 	.word	0x1000823f
 800a1b4:	40020940 	.word	0x40020940

0800a1b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a1c6:	e15a      	b.n	800a47e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 814c 	beq.w	800a478 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f003 0303 	and.w	r3, r3, #3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d005      	beq.n	800a1f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d130      	bne.n	800a25a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	2203      	movs	r2, #3
 800a204:	fa02 f303 	lsl.w	r3, r2, r3
 800a208:	43db      	mvns	r3, r3
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	4013      	ands	r3, r2
 800a20e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	fa02 f303 	lsl.w	r3, r2, r3
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	4313      	orrs	r3, r2
 800a220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a22e:	2201      	movs	r2, #1
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	43db      	mvns	r3, r3
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4013      	ands	r3, r2
 800a23c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	091b      	lsrs	r3, r3, #4
 800a244:	f003 0201 	and.w	r2, r3, #1
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	fa02 f303 	lsl.w	r3, r2, r3
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	2b03      	cmp	r3, #3
 800a264:	d017      	beq.n	800a296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	2203      	movs	r2, #3
 800a272:	fa02 f303 	lsl.w	r3, r2, r3
 800a276:	43db      	mvns	r3, r3
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4013      	ands	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	fa02 f303 	lsl.w	r3, r2, r3
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d123      	bne.n	800a2ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	08da      	lsrs	r2, r3, #3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3208      	adds	r2, #8
 800a2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	220f      	movs	r2, #15
 800a2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a2be:	43db      	mvns	r3, r3
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f003 0307 	and.w	r3, r3, #7
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	08da      	lsrs	r2, r3, #3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3208      	adds	r2, #8
 800a2e4:	6939      	ldr	r1, [r7, #16]
 800a2e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	2203      	movs	r2, #3
 800a2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fa:	43db      	mvns	r3, r3
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	4013      	ands	r3, r2
 800a300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f003 0203 	and.w	r2, r3, #3
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	fa02 f303 	lsl.w	r3, r2, r3
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	4313      	orrs	r3, r2
 800a316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 80a6 	beq.w	800a478 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a32c:	4b5b      	ldr	r3, [pc, #364]	; (800a49c <HAL_GPIO_Init+0x2e4>)
 800a32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a330:	4a5a      	ldr	r2, [pc, #360]	; (800a49c <HAL_GPIO_Init+0x2e4>)
 800a332:	f043 0301 	orr.w	r3, r3, #1
 800a336:	6613      	str	r3, [r2, #96]	; 0x60
 800a338:	4b58      	ldr	r3, [pc, #352]	; (800a49c <HAL_GPIO_Init+0x2e4>)
 800a33a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	60bb      	str	r3, [r7, #8]
 800a342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a344:	4a56      	ldr	r2, [pc, #344]	; (800a4a0 <HAL_GPIO_Init+0x2e8>)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	089b      	lsrs	r3, r3, #2
 800a34a:	3302      	adds	r3, #2
 800a34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	220f      	movs	r2, #15
 800a35c:	fa02 f303 	lsl.w	r3, r2, r3
 800a360:	43db      	mvns	r3, r3
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4013      	ands	r3, r2
 800a366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a36e:	d01f      	beq.n	800a3b0 <HAL_GPIO_Init+0x1f8>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a4c      	ldr	r2, [pc, #304]	; (800a4a4 <HAL_GPIO_Init+0x2ec>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d019      	beq.n	800a3ac <HAL_GPIO_Init+0x1f4>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a4b      	ldr	r2, [pc, #300]	; (800a4a8 <HAL_GPIO_Init+0x2f0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d013      	beq.n	800a3a8 <HAL_GPIO_Init+0x1f0>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a4a      	ldr	r2, [pc, #296]	; (800a4ac <HAL_GPIO_Init+0x2f4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d00d      	beq.n	800a3a4 <HAL_GPIO_Init+0x1ec>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a49      	ldr	r2, [pc, #292]	; (800a4b0 <HAL_GPIO_Init+0x2f8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d007      	beq.n	800a3a0 <HAL_GPIO_Init+0x1e8>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a48      	ldr	r2, [pc, #288]	; (800a4b4 <HAL_GPIO_Init+0x2fc>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d101      	bne.n	800a39c <HAL_GPIO_Init+0x1e4>
 800a398:	2305      	movs	r3, #5
 800a39a:	e00a      	b.n	800a3b2 <HAL_GPIO_Init+0x1fa>
 800a39c:	2306      	movs	r3, #6
 800a39e:	e008      	b.n	800a3b2 <HAL_GPIO_Init+0x1fa>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	e006      	b.n	800a3b2 <HAL_GPIO_Init+0x1fa>
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e004      	b.n	800a3b2 <HAL_GPIO_Init+0x1fa>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e002      	b.n	800a3b2 <HAL_GPIO_Init+0x1fa>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e000      	b.n	800a3b2 <HAL_GPIO_Init+0x1fa>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	f002 0203 	and.w	r2, r2, #3
 800a3b8:	0092      	lsls	r2, r2, #2
 800a3ba:	4093      	lsls	r3, r2
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a3c2:	4937      	ldr	r1, [pc, #220]	; (800a4a0 <HAL_GPIO_Init+0x2e8>)
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	089b      	lsrs	r3, r3, #2
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a3d0:	4b39      	ldr	r3, [pc, #228]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	43db      	mvns	r3, r3
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	4013      	ands	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d003      	beq.n	800a3f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a3f4:	4a30      	ldr	r2, [pc, #192]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a3fa:	4b2f      	ldr	r3, [pc, #188]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	43db      	mvns	r3, r3
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	4013      	ands	r3, r2
 800a408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a41e:	4a26      	ldr	r2, [pc, #152]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a424:	4b24      	ldr	r3, [pc, #144]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	43db      	mvns	r3, r3
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4013      	ands	r3, r2
 800a432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4313      	orrs	r3, r2
 800a446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a448:	4a1b      	ldr	r2, [pc, #108]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a44e:	4b1a      	ldr	r3, [pc, #104]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	43db      	mvns	r3, r3
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4013      	ands	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a472:	4a11      	ldr	r2, [pc, #68]	; (800a4b8 <HAL_GPIO_Init+0x300>)
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	3301      	adds	r3, #1
 800a47c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	fa22 f303 	lsr.w	r3, r2, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f47f ae9d 	bne.w	800a1c8 <HAL_GPIO_Init+0x10>
  }
}
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	40021000 	.word	0x40021000
 800a4a0:	40010000 	.word	0x40010000
 800a4a4:	48000400 	.word	0x48000400
 800a4a8:	48000800 	.word	0x48000800
 800a4ac:	48000c00 	.word	0x48000c00
 800a4b0:	48001000 	.word	0x48001000
 800a4b4:	48001400 	.word	0x48001400
 800a4b8:	40010400 	.word	0x40010400

0800a4bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	807b      	strh	r3, [r7, #2]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a4cc:	787b      	ldrb	r3, [r7, #1]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a4d8:	e002      	b.n	800a4e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a4da:	887a      	ldrh	r2, [r7, #2]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a4fe:	887a      	ldrh	r2, [r7, #2]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4013      	ands	r3, r2
 800a504:	041a      	lsls	r2, r3, #16
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	43d9      	mvns	r1, r3
 800a50a:	887b      	ldrh	r3, [r7, #2]
 800a50c:	400b      	ands	r3, r1
 800a50e:	431a      	orrs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	619a      	str	r2, [r3, #24]
}
 800a514:	bf00      	nop
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e081      	b.n	800a636 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7fc fafa 	bl	8006b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2224      	movs	r2, #36	; 0x24
 800a550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0201 	bic.w	r2, r2, #1
 800a562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a570:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a580:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d107      	bne.n	800a59a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	e006      	b.n	800a5a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689a      	ldr	r2, [r3, #8]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a5a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d104      	bne.n	800a5ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	6812      	ldr	r2, [r2, #0]
 800a5c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a5c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68da      	ldr	r2, [r3, #12]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691a      	ldr	r2, [r3, #16]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69d9      	ldr	r1, [r3, #28]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1a      	ldr	r2, [r3, #32]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af02      	add	r7, sp, #8
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	4608      	mov	r0, r1
 800a64a:	4611      	mov	r1, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	4603      	mov	r3, r0
 800a650:	817b      	strh	r3, [r7, #10]
 800a652:	460b      	mov	r3, r1
 800a654:	813b      	strh	r3, [r7, #8]
 800a656:	4613      	mov	r3, r2
 800a658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b20      	cmp	r3, #32
 800a664:	f040 80f9 	bne.w	800a85a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <HAL_I2C_Mem_Write+0x34>
 800a66e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a670:	2b00      	cmp	r3, #0
 800a672:	d105      	bne.n	800a680 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a67a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e0ed      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a686:	2b01      	cmp	r3, #1
 800a688:	d101      	bne.n	800a68e <HAL_I2C_Mem_Write+0x4e>
 800a68a:	2302      	movs	r3, #2
 800a68c:	e0e6      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a696:	f7fd f81d 	bl	80076d4 <HAL_GetTick>
 800a69a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2319      	movs	r3, #25
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 fadd 	bl	800ac68 <I2C_WaitOnFlagUntilTimeout>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e0d1      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2221      	movs	r2, #33	; 0x21
 800a6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2240      	movs	r2, #64	; 0x40
 800a6c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a3a      	ldr	r2, [r7, #32]
 800a6d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a6d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a6e0:	88f8      	ldrh	r0, [r7, #6]
 800a6e2:	893a      	ldrh	r2, [r7, #8]
 800a6e4:	8979      	ldrh	r1, [r7, #10]
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	9301      	str	r3, [sp, #4]
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 f9ed 	bl	800aad0 <I2C_RequestMemoryWrite>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e0a9      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	2bff      	cmp	r3, #255	; 0xff
 800a710:	d90e      	bls.n	800a730 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	22ff      	movs	r2, #255	; 0xff
 800a716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	8979      	ldrh	r1, [r7, #10]
 800a720:	2300      	movs	r3, #0
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 fc45 	bl	800afb8 <I2C_TransferConfig>
 800a72e:	e00f      	b.n	800a750 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a734:	b29a      	uxth	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	8979      	ldrh	r1, [r7, #10]
 800a742:	2300      	movs	r3, #0
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 fc34 	bl	800afb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 fac7 	bl	800ace8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e07b      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	781a      	ldrb	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a77e:	b29b      	uxth	r3, r3
 800a780:	3b01      	subs	r3, #1
 800a782:	b29a      	uxth	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a78c:	3b01      	subs	r3, #1
 800a78e:	b29a      	uxth	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a798:	b29b      	uxth	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d034      	beq.n	800a808 <HAL_I2C_Mem_Write+0x1c8>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d130      	bne.n	800a808 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2180      	movs	r1, #128	; 0x80
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 fa59 	bl	800ac68 <I2C_WaitOnFlagUntilTimeout>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e04d      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	2bff      	cmp	r3, #255	; 0xff
 800a7c8:	d90e      	bls.n	800a7e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	22ff      	movs	r2, #255	; 0xff
 800a7ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	8979      	ldrh	r1, [r7, #10]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 fbe9 	bl	800afb8 <I2C_TransferConfig>
 800a7e6:	e00f      	b.n	800a808 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	8979      	ldrh	r1, [r7, #10]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fbd8 	bl	800afb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d19e      	bne.n	800a750 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 faa6 	bl	800ad68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e01a      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2220      	movs	r2, #32
 800a82c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6859      	ldr	r1, [r3, #4]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	4b0a      	ldr	r3, [pc, #40]	; (800a864 <HAL_I2C_Mem_Write+0x224>)
 800a83a:	400b      	ands	r3, r1
 800a83c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2220      	movs	r2, #32
 800a842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	e000      	b.n	800a85c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a85a:	2302      	movs	r3, #2
  }
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	fe00e800 	.word	0xfe00e800

0800a868 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af02      	add	r7, sp, #8
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	4608      	mov	r0, r1
 800a872:	4611      	mov	r1, r2
 800a874:	461a      	mov	r2, r3
 800a876:	4603      	mov	r3, r0
 800a878:	817b      	strh	r3, [r7, #10]
 800a87a:	460b      	mov	r3, r1
 800a87c:	813b      	strh	r3, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	f040 80fd 	bne.w	800aa8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <HAL_I2C_Mem_Read+0x34>
 800a896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d105      	bne.n	800a8a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0f1      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d101      	bne.n	800a8b6 <HAL_I2C_Mem_Read+0x4e>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e0ea      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a8be:	f7fc ff09 	bl	80076d4 <HAL_GetTick>
 800a8c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	2319      	movs	r3, #25
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f9c9 	bl	800ac68 <I2C_WaitOnFlagUntilTimeout>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e0d5      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2222      	movs	r2, #34	; 0x22
 800a8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2240      	movs	r2, #64	; 0x40
 800a8ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a3a      	ldr	r2, [r7, #32]
 800a8fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a908:	88f8      	ldrh	r0, [r7, #6]
 800a90a:	893a      	ldrh	r2, [r7, #8]
 800a90c:	8979      	ldrh	r1, [r7, #10]
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	4603      	mov	r3, r0
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f92d 	bl	800ab78 <I2C_RequestMemoryRead>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e0ad      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a934:	b29b      	uxth	r3, r3
 800a936:	2bff      	cmp	r3, #255	; 0xff
 800a938:	d90e      	bls.n	800a958 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	22ff      	movs	r2, #255	; 0xff
 800a93e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a944:	b2da      	uxtb	r2, r3
 800a946:	8979      	ldrh	r1, [r7, #10]
 800a948:	4b52      	ldr	r3, [pc, #328]	; (800aa94 <HAL_I2C_Mem_Read+0x22c>)
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fb31 	bl	800afb8 <I2C_TransferConfig>
 800a956:	e00f      	b.n	800a978 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a966:	b2da      	uxtb	r2, r3
 800a968:	8979      	ldrh	r1, [r7, #10]
 800a96a:	4b4a      	ldr	r3, [pc, #296]	; (800aa94 <HAL_I2C_Mem_Read+0x22c>)
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 fb20 	bl	800afb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	2200      	movs	r2, #0
 800a980:	2104      	movs	r1, #4
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 f970 	bl	800ac68 <I2C_WaitOnFlagUntilTimeout>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e07c      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	b2d2      	uxtb	r2, r2
 800a99e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d034      	beq.n	800aa38 <HAL_I2C_Mem_Read+0x1d0>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d130      	bne.n	800aa38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2180      	movs	r1, #128	; 0x80
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f941 	bl	800ac68 <I2C_WaitOnFlagUntilTimeout>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e04d      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	2bff      	cmp	r3, #255	; 0xff
 800a9f8:	d90e      	bls.n	800aa18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	22ff      	movs	r2, #255	; 0xff
 800a9fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	8979      	ldrh	r1, [r7, #10]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 fad1 	bl	800afb8 <I2C_TransferConfig>
 800aa16:	e00f      	b.n	800aa38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	8979      	ldrh	r1, [r7, #10]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f000 fac0 	bl	800afb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d19a      	bne.n	800a978 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 f98e 	bl	800ad68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e01a      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6859      	ldr	r1, [r3, #4]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	4b0b      	ldr	r3, [pc, #44]	; (800aa98 <HAL_I2C_Mem_Read+0x230>)
 800aa6a:	400b      	ands	r3, r1
 800aa6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2220      	movs	r2, #32
 800aa72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	e000      	b.n	800aa8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aa8a:	2302      	movs	r3, #2
  }
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	80002400 	.word	0x80002400
 800aa98:	fe00e800 	.word	0xfe00e800

0800aa9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	68f9      	ldr	r1, [r7, #12]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
  }
}
 800aac8:	bf00      	nop
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af02      	add	r7, sp, #8
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	4608      	mov	r0, r1
 800aada:	4611      	mov	r1, r2
 800aadc:	461a      	mov	r2, r3
 800aade:	4603      	mov	r3, r0
 800aae0:	817b      	strh	r3, [r7, #10]
 800aae2:	460b      	mov	r3, r1
 800aae4:	813b      	strh	r3, [r7, #8]
 800aae6:	4613      	mov	r3, r2
 800aae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aaea:	88fb      	ldrh	r3, [r7, #6]
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	8979      	ldrh	r1, [r7, #10]
 800aaf0:	4b20      	ldr	r3, [pc, #128]	; (800ab74 <I2C_RequestMemoryWrite+0xa4>)
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 fa5d 	bl	800afb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	69b9      	ldr	r1, [r7, #24]
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 f8f0 	bl	800ace8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e02c      	b.n	800ab6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d105      	bne.n	800ab24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab18:	893b      	ldrh	r3, [r7, #8]
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	629a      	str	r2, [r3, #40]	; 0x28
 800ab22:	e015      	b.n	800ab50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ab24:	893b      	ldrh	r3, [r7, #8]
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	69b9      	ldr	r1, [r7, #24]
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f000 f8d6 	bl	800ace8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e012      	b.n	800ab6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab46:	893b      	ldrh	r3, [r7, #8]
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	2200      	movs	r2, #0
 800ab58:	2180      	movs	r1, #128	; 0x80
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 f884 	bl	800ac68 <I2C_WaitOnFlagUntilTimeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e000      	b.n	800ab6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	80002000 	.word	0x80002000

0800ab78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af02      	add	r7, sp, #8
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	4608      	mov	r0, r1
 800ab82:	4611      	mov	r1, r2
 800ab84:	461a      	mov	r2, r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	817b      	strh	r3, [r7, #10]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	813b      	strh	r3, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	8979      	ldrh	r1, [r7, #10]
 800ab98:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <I2C_RequestMemoryRead+0xa4>)
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 fa0a 	bl	800afb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	69b9      	ldr	r1, [r7, #24]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f89d 	bl	800ace8 <I2C_WaitOnTXISFlagUntilTimeout>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e02c      	b.n	800ac12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abb8:	88fb      	ldrh	r3, [r7, #6]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d105      	bne.n	800abca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800abbe:	893b      	ldrh	r3, [r7, #8]
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	629a      	str	r2, [r3, #40]	; 0x28
 800abc8:	e015      	b.n	800abf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800abca:	893b      	ldrh	r3, [r7, #8]
 800abcc:	0a1b      	lsrs	r3, r3, #8
 800abce:	b29b      	uxth	r3, r3
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	69b9      	ldr	r1, [r7, #24]
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f883 	bl	800ace8 <I2C_WaitOnTXISFlagUntilTimeout>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e012      	b.n	800ac12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800abec:	893b      	ldrh	r3, [r7, #8]
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	2200      	movs	r2, #0
 800abfe:	2140      	movs	r1, #64	; 0x40
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 f831 	bl	800ac68 <I2C_WaitOnFlagUntilTimeout>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e000      	b.n	800ac12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	80002000 	.word	0x80002000

0800ac20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d103      	bne.n	800ac3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d007      	beq.n	800ac5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699a      	ldr	r2, [r3, #24]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f042 0201 	orr.w	r2, r2, #1
 800ac5a:	619a      	str	r2, [r3, #24]
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	4613      	mov	r3, r2
 800ac76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac78:	e022      	b.n	800acc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac80:	d01e      	beq.n	800acc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac82:	f7fc fd27 	bl	80076d4 <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d302      	bcc.n	800ac98 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d113      	bne.n	800acc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac9c:	f043 0220 	orr.w	r2, r3, #32
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2220      	movs	r2, #32
 800aca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e00f      	b.n	800ace0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	4013      	ands	r3, r2
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	429a      	cmp	r2, r3
 800acce:	bf0c      	ite	eq
 800acd0:	2301      	moveq	r3, #1
 800acd2:	2300      	movne	r3, #0
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	461a      	mov	r2, r3
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d0cd      	beq.n	800ac7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800acf4:	e02c      	b.n	800ad50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 f870 	bl	800ade0 <I2C_IsErrorOccurred>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e02a      	b.n	800ad60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad10:	d01e      	beq.n	800ad50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad12:	f7fc fcdf 	bl	80076d4 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d302      	bcc.n	800ad28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d113      	bne.n	800ad50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2c:	f043 0220 	orr.w	r2, r3, #32
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e007      	b.n	800ad60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d1cb      	bne.n	800acf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad74:	e028      	b.n	800adc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	68b9      	ldr	r1, [r7, #8]
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 f830 	bl	800ade0 <I2C_IsErrorOccurred>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e026      	b.n	800add8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad8a:	f7fc fca3 	bl	80076d4 <HAL_GetTick>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d302      	bcc.n	800ada0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d113      	bne.n	800adc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada4:	f043 0220 	orr.w	r2, r3, #32
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2220      	movs	r2, #32
 800adb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e007      	b.n	800add8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	2b20      	cmp	r3, #32
 800add4:	d1cf      	bne.n	800ad76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	f003 0310 	and.w	r3, r3, #16
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d075      	beq.n	800aef8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2210      	movs	r2, #16
 800ae12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae14:	e056      	b.n	800aec4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1c:	d052      	beq.n	800aec4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae1e:	f7fc fc59 	bl	80076d4 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <I2C_IsErrorOccurred+0x54>
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d147      	bne.n	800aec4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae56:	d12e      	bne.n	800aeb6 <I2C_IsErrorOccurred+0xd6>
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae5e:	d02a      	beq.n	800aeb6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800ae60:	7cfb      	ldrb	r3, [r7, #19]
 800ae62:	2b20      	cmp	r3, #32
 800ae64:	d027      	beq.n	800aeb6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae74:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ae76:	f7fc fc2d 	bl	80076d4 <HAL_GetTick>
 800ae7a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae7c:	e01b      	b.n	800aeb6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ae7e:	f7fc fc29 	bl	80076d4 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	2b19      	cmp	r3, #25
 800ae8a:	d914      	bls.n	800aeb6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae90:	f043 0220 	orr.w	r2, r3, #32
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b20      	cmp	r3, #32
 800aec2:	d1dc      	bne.n	800ae7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	f003 0320 	and.w	r3, r3, #32
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d003      	beq.n	800aeda <I2C_IsErrorOccurred+0xfa>
 800aed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d09d      	beq.n	800ae16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800aeda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d103      	bne.n	800aeea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2220      	movs	r2, #32
 800aee8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	f043 0304 	orr.w	r3, r3, #4
 800aef0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00b      	beq.n	800af22 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	f043 0301 	orr.w	r3, r3, #1
 800af10:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	f043 0308 	orr.w	r3, r3, #8
 800af32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00b      	beq.n	800af66 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	f043 0302 	orr.w	r3, r3, #2
 800af54:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800af66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d01c      	beq.n	800afa8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f7ff fe56 	bl	800ac20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6859      	ldr	r1, [r3, #4]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	4b0d      	ldr	r3, [pc, #52]	; (800afb4 <I2C_IsErrorOccurred+0x1d4>)
 800af80:	400b      	ands	r3, r1
 800af82:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	431a      	orrs	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2220      	movs	r2, #32
 800af94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800afa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800afac:	4618      	mov	r0, r3
 800afae:	3728      	adds	r7, #40	; 0x28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	fe00e800 	.word	0xfe00e800

0800afb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800afb8:	b480      	push	{r7}
 800afba:	b087      	sub	sp, #28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	607b      	str	r3, [r7, #4]
 800afc2:	460b      	mov	r3, r1
 800afc4:	817b      	strh	r3, [r7, #10]
 800afc6:	4613      	mov	r3, r2
 800afc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800afca:	897b      	ldrh	r3, [r7, #10]
 800afcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800afd0:	7a7b      	ldrb	r3, [r7, #9]
 800afd2:	041b      	lsls	r3, r3, #16
 800afd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800afd8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afe6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	0d5b      	lsrs	r3, r3, #21
 800aff2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aff6:	4b08      	ldr	r3, [pc, #32]	; (800b018 <I2C_TransferConfig+0x60>)
 800aff8:	430b      	orrs	r3, r1
 800affa:	43db      	mvns	r3, r3
 800affc:	ea02 0103 	and.w	r1, r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	430a      	orrs	r2, r1
 800b008:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b00a:	bf00      	nop
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	03ff63ff 	.word	0x03ff63ff

0800b01c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b20      	cmp	r3, #32
 800b030:	d138      	bne.n	800b0a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d101      	bne.n	800b040 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b03c:	2302      	movs	r3, #2
 800b03e:	e032      	b.n	800b0a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2224      	movs	r2, #36	; 0x24
 800b04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0201 	bic.w	r2, r2, #1
 800b05e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b06e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f042 0201 	orr.w	r2, r2, #1
 800b08e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2220      	movs	r2, #32
 800b094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e000      	b.n	800b0a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b0a4:	2302      	movs	r3, #2
  }
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b085      	sub	sp, #20
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d139      	bne.n	800b13c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e033      	b.n	800b13e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2224      	movs	r2, #36	; 0x24
 800b0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f022 0201 	bic.w	r2, r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b104:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0201 	orr.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	e000      	b.n	800b13e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b13c:	2302      	movs	r3, #2
  }
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
	...

0800b14c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e0bb      	b.n	800b2da <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b05      	cmp	r3, #5
 800b16c:	d101      	bne.n	800b172 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e0b3      	b.n	800b2da <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d101      	bne.n	800b182 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e0ab      	b.n	800b2da <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b182:	4b58      	ldr	r3, [pc, #352]	; (800b2e4 <HAL_OPAMP_Init+0x198>)
 800b184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b186:	4a57      	ldr	r2, [pc, #348]	; (800b2e4 <HAL_OPAMP_Init+0x198>)
 800b188:	f043 0301 	orr.w	r3, r3, #1
 800b18c:	6613      	str	r3, [r2, #96]	; 0x60
 800b18e:	4b55      	ldr	r3, [pc, #340]	; (800b2e4 <HAL_OPAMP_Init+0x198>)
 800b190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	60bb      	str	r3, [r7, #8]
 800b198:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d103      	bne.n	800b1ae <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7fb fd26 	bl	8006c00 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	2b40      	cmp	r3, #64	; 0x40
 800b1ba:	d003      	beq.n	800b1c4 <HAL_OPAMP_Init+0x78>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	2b60      	cmp	r3, #96	; 0x60
 800b1c2:	d133      	bne.n	800b22c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f023 0110 	bic.w	r1, r3, #16
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	4b41      	ldr	r3, [pc, #260]	; (800b2e8 <HAL_OPAMP_Init+0x19c>)
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	6851      	ldr	r1, [r2, #4]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	6892      	ldr	r2, [r2, #8]
 800b1ec:	4311      	orrs	r1, r2
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6912      	ldr	r2, [r2, #16]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	7d09      	ldrb	r1, [r1, #20]
 800b1f8:	2901      	cmp	r1, #1
 800b1fa:	d102      	bne.n	800b202 <HAL_OPAMP_Init+0xb6>
 800b1fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b200:	e000      	b.n	800b204 <HAL_OPAMP_Init+0xb8>
 800b202:	2100      	movs	r1, #0
 800b204:	4311      	orrs	r1, r2
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b20a:	4311      	orrs	r1, r2
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b210:	4311      	orrs	r1, r2
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b216:	04d2      	lsls	r2, r2, #19
 800b218:	4311      	orrs	r1, r2
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b21e:	0612      	lsls	r2, r2, #24
 800b220:	4311      	orrs	r1, r2
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6812      	ldr	r2, [r2, #0]
 800b226:	430b      	orrs	r3, r1
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	e035      	b.n	800b298 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f023 0110 	bic.w	r1, r3, #16
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	430a      	orrs	r2, r1
 800b240:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	4b27      	ldr	r3, [pc, #156]	; (800b2e8 <HAL_OPAMP_Init+0x19c>)
 800b24a:	4013      	ands	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6851      	ldr	r1, [r2, #4]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	6892      	ldr	r2, [r2, #8]
 800b254:	4311      	orrs	r1, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	68d2      	ldr	r2, [r2, #12]
 800b25a:	4311      	orrs	r1, r2
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	6912      	ldr	r2, [r2, #16]
 800b260:	430a      	orrs	r2, r1
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	7d09      	ldrb	r1, [r1, #20]
 800b266:	2901      	cmp	r1, #1
 800b268:	d102      	bne.n	800b270 <HAL_OPAMP_Init+0x124>
 800b26a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b26e:	e000      	b.n	800b272 <HAL_OPAMP_Init+0x126>
 800b270:	2100      	movs	r1, #0
 800b272:	4311      	orrs	r1, r2
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b278:	4311      	orrs	r1, r2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b27e:	4311      	orrs	r1, r2
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b284:	04d2      	lsls	r2, r2, #19
 800b286:	4311      	orrs	r1, r2
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b28c:	0612      	lsls	r2, r2, #24
 800b28e:	4311      	orrs	r1, r2
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	6812      	ldr	r2, [r2, #0]
 800b294:	430b      	orrs	r3, r1
 800b296:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	db10      	blt.n	800b2c4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	699a      	ldr	r2, [r3, #24]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	40021000 	.word	0x40021000
 800b2e8:	e0003e11 	.word	0xe0003e11

0800b2ec <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	73fb      	strb	r3, [r7, #15]
 800b302:	e01d      	b.n	800b340 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b05      	cmp	r3, #5
 800b30e:	d102      	bne.n	800b316 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	73fb      	strb	r3, [r7, #15]
 800b314:	e014      	b.n	800b340 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d10c      	bne.n	800b33c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f042 0201 	orr.w	r2, r2, #1
 800b330:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2204      	movs	r2, #4
 800b336:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800b33a:	e001      	b.n	800b340 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b086      	sub	sp, #24
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	75fb      	strb	r3, [r7, #23]
 800b364:	e113      	b.n	800b58e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b05      	cmp	r3, #5
 800b370:	d102      	bne.n	800b378 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	75fb      	strb	r3, [r7, #23]
 800b376:	e10a      	b.n	800b58e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b01      	cmp	r3, #1
 800b382:	f040 8102 	bne.w	800b58a <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f042 0202 	orr.w	r2, r2, #2
 800b394:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0210 	orr.w	r2, r2, #16
 800b3a4:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3b4:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800b3c4:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f042 0201 	orr.w	r2, r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 800b3d6:	2310      	movs	r3, #16
 800b3d8:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 800b3da:	2308      	movs	r3, #8
 800b3dc:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800b3de:	e020      	b.n	800b422 <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	061a      	lsls	r2, r3, #24
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800b3f6:	2002      	movs	r0, #2
 800b3f8:	f7fc f978 	bl	80076ec <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d004      	beq.n	800b414 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4413      	add	r3, r2
 800b410:	613b      	str	r3, [r7, #16]
 800b412:	e003      	b.n	800b41c <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	085b      	lsrs	r3, r3, #1
 800b420:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1db      	bne.n	800b3e0 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	061a      	lsls	r2, r3, #24
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800b43e:	2002      	movs	r0, #2
 800b440:	f7fc f954 	bl	80076ec <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00d      	beq.n	800b46e <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	3301      	adds	r3, #1
 800b456:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	061a      	lsls	r2, r3, #24
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b480:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 800b482:	2310      	movs	r3, #16
 800b484:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 800b486:	2308      	movs	r3, #8
 800b488:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800b48a:	e020      	b.n	800b4ce <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	04da      	lsls	r2, r3, #19
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 800b4a2:	2002      	movs	r0, #2
 800b4a4:	f7fc f922 	bl	80076ec <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d004      	beq.n	800b4c0 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	e003      	b.n	800b4c8 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	085b      	lsrs	r3, r3, #1
 800b4cc:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1db      	bne.n	800b48c <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	04da      	lsls	r2, r3, #19
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800b4ea:	2002      	movs	r0, #2
 800b4ec:	f7fc f8fe 	bl	80076ec <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	04da      	lsls	r2, r3, #19
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	430a      	orrs	r2, r1
 800b518:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b528:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f022 0201 	bic.w	r2, r2, #1
 800b538:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 0202 	bic.w	r2, r2, #2
 800b548:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2210      	movs	r2, #16
 800b55a:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	04da      	lsls	r2, r3, #19
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	061a      	lsls	r2, r3, #24
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	430a      	orrs	r2, r1
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	e001      	b.n	800b58e <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b59a:	b08b      	sub	sp, #44	; 0x2c
 800b59c:	af06      	add	r7, sp, #24
 800b59e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e0d7      	b.n	800b75a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d106      	bne.n	800b5c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f009 fe18 	bl	80151f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2203      	movs	r2, #3
 800b5c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f005 fcd4 	bl	8010f7e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	73fb      	strb	r3, [r7, #15]
 800b5da:	e04c      	b.n	800b676 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	440b      	add	r3, r1
 800b602:	7bfa      	ldrb	r2, [r7, #15]
 800b604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b606:	7bfa      	ldrb	r2, [r7, #15]
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	b298      	uxth	r0, r3
 800b60c:	6879      	ldr	r1, [r7, #4]
 800b60e:	4613      	mov	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	00db      	lsls	r3, r3, #3
 800b616:	440b      	add	r3, r1
 800b618:	3336      	adds	r3, #54	; 0x36
 800b61a:	4602      	mov	r2, r0
 800b61c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	6879      	ldr	r1, [r7, #4]
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	4613      	mov	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	440b      	add	r3, r1
 800b62e:	3303      	adds	r3, #3
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b634:	7bfa      	ldrb	r2, [r7, #15]
 800b636:	6879      	ldr	r1, [r7, #4]
 800b638:	4613      	mov	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	00db      	lsls	r3, r3, #3
 800b640:	440b      	add	r3, r1
 800b642:	3338      	adds	r3, #56	; 0x38
 800b644:	2200      	movs	r2, #0
 800b646:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b648:	7bfa      	ldrb	r2, [r7, #15]
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	00db      	lsls	r3, r3, #3
 800b654:	440b      	add	r3, r1
 800b656:	333c      	adds	r3, #60	; 0x3c
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b65c:	7bfa      	ldrb	r2, [r7, #15]
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	00db      	lsls	r3, r3, #3
 800b668:	440b      	add	r3, r1
 800b66a:	3340      	adds	r3, #64	; 0x40
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	3301      	adds	r3, #1
 800b674:	73fb      	strb	r3, [r7, #15]
 800b676:	7bfa      	ldrb	r2, [r7, #15]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d3ad      	bcc.n	800b5dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b680:	2300      	movs	r3, #0
 800b682:	73fb      	strb	r3, [r7, #15]
 800b684:	e044      	b.n	800b710 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b686:	7bfa      	ldrb	r2, [r7, #15]
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	4613      	mov	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	440b      	add	r3, r1
 800b694:	f203 1369 	addw	r3, r3, #361	; 0x169
 800b698:	2200      	movs	r2, #0
 800b69a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b69c:	7bfa      	ldrb	r2, [r7, #15]
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	440b      	add	r3, r1
 800b6aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b6ae:	7bfa      	ldrb	r2, [r7, #15]
 800b6b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b6b2:	7bfa      	ldrb	r2, [r7, #15]
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	440b      	add	r3, r1
 800b6c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b6c8:	7bfa      	ldrb	r2, [r7, #15]
 800b6ca:	6879      	ldr	r1, [r7, #4]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	00db      	lsls	r3, r3, #3
 800b6d4:	440b      	add	r3, r1
 800b6d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b6de:	7bfa      	ldrb	r2, [r7, #15]
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	440b      	add	r3, r1
 800b6ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b6f4:	7bfa      	ldrb	r2, [r7, #15]
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	440b      	add	r3, r1
 800b702:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b706:	2200      	movs	r2, #0
 800b708:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	3301      	adds	r3, #1
 800b70e:	73fb      	strb	r3, [r7, #15]
 800b710:	7bfa      	ldrb	r2, [r7, #15]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	429a      	cmp	r2, r3
 800b718:	d3b5      	bcc.n	800b686 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	687e      	ldr	r6, [r7, #4]
 800b722:	466d      	mov	r5, sp
 800b724:	f106 0410 	add.w	r4, r6, #16
 800b728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b72a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	602b      	str	r3, [r5, #0]
 800b730:	1d33      	adds	r3, r6, #4
 800b732:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b734:	6838      	ldr	r0, [r7, #0]
 800b736:	f005 fc3d 	bl	8010fb4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	69db      	ldr	r3, [r3, #28]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d102      	bne.n	800b758 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fc29 	bl	800cfaa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b762 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b770:	2b01      	cmp	r3, #1
 800b772:	d101      	bne.n	800b778 <HAL_PCD_Start+0x16>
 800b774:	2302      	movs	r3, #2
 800b776:	e012      	b.n	800b79e <HAL_PCD_Start+0x3c>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4618      	mov	r0, r3
 800b786:	f005 fbe3 	bl	8010f50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4618      	mov	r0, r3
 800b790:	f007 fdfc 	bl	801338c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f007 fe01 	bl	80133ba <USB_ReadInterrupts>
 800b7b8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fb26 	bl	800be16 <PCD_EP_ISR_Handler>

    return;
 800b7ca:	e110      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d013      	beq.n	800b7fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7e8:	b292      	uxth	r2, r2
 800b7ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f009 fd91 	bl	8015316 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f8fc 	bl	800b9f4 <HAL_PCD_SetAddress>

    return;
 800b7fc:	e0f7      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00c      	beq.n	800b822 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b810:	b29a      	uxth	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b81a:	b292      	uxth	r2, r2
 800b81c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b820:	e0e5      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00c      	beq.n	800b846 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b834:	b29a      	uxth	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b83e:	b292      	uxth	r2, r2
 800b840:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b844:	e0d3      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d034      	beq.n	800b8ba <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f022 0204 	bic.w	r2, r2, #4
 800b862:	b292      	uxth	r2, r2
 800b864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b870:	b29a      	uxth	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0208 	bic.w	r2, r2, #8
 800b87a:	b292      	uxth	r2, r2
 800b87c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b886:	2b01      	cmp	r3, #1
 800b888:	d107      	bne.n	800b89a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b892:	2100      	movs	r1, #0
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f009 ff33 	bl	8015700 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f009 fd74 	bl	8015388 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b8b2:	b292      	uxth	r2, r2
 800b8b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b8b8:	e099      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d027      	beq.n	800b914 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f042 0208 	orr.w	r2, r2, #8
 800b8d6:	b292      	uxth	r2, r2
 800b8d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8ee:	b292      	uxth	r2, r2
 800b8f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f042 0204 	orr.w	r2, r2, #4
 800b906:	b292      	uxth	r2, r2
 800b908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f009 fd21 	bl	8015354 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b912:	e06c      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d040      	beq.n	800b9a0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b926:	b29a      	uxth	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b930:	b292      	uxth	r2, r2
 800b932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d12b      	bne.n	800b998 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b948:	b29a      	uxth	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f042 0204 	orr.w	r2, r2, #4
 800b952:	b292      	uxth	r2, r2
 800b954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b960:	b29a      	uxth	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f042 0208 	orr.w	r2, r2, #8
 800b96a:	b292      	uxth	r2, r2
 800b96c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b980:	b29b      	uxth	r3, r3
 800b982:	089b      	lsrs	r3, r3, #2
 800b984:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b98e:	2101      	movs	r1, #1
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f009 feb5 	bl	8015700 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b996:	e02a      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f009 fcdb 	bl	8015354 <HAL_PCD_SuspendCallback>
    return;
 800b99e:	e026      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00f      	beq.n	800b9ca <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b9bc:	b292      	uxth	r2, r2
 800b9be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f009 fc99 	bl	80152fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b9c8:	e011      	b.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00c      	beq.n	800b9ee <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9e6:	b292      	uxth	r2, r2
 800b9e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b9ec:	bf00      	nop
  }
}
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d101      	bne.n	800ba0e <HAL_PCD_SetAddress+0x1a>
 800ba0a:	2302      	movs	r3, #2
 800ba0c:	e013      	b.n	800ba36 <HAL_PCD_SetAddress+0x42>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	78fa      	ldrb	r2, [r7, #3]
 800ba24:	4611      	mov	r1, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f007 fc9c 	bl	8013364 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	70fb      	strb	r3, [r7, #3]
 800ba50:	460b      	mov	r3, r1
 800ba52:	803b      	strh	r3, [r7, #0]
 800ba54:	4613      	mov	r3, r2
 800ba56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ba5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	da0e      	bge.n	800ba82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba64:	78fb      	ldrb	r3, [r7, #3]
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	4413      	add	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	705a      	strb	r2, [r3, #1]
 800ba80:	e00e      	b.n	800baa0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba82:	78fb      	ldrb	r3, [r7, #3]
 800ba84:	f003 0207 	and.w	r2, r3, #7
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	4413      	add	r3, r2
 800ba98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	f003 0307 	and.w	r3, r3, #7
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800baac:	883a      	ldrh	r2, [r7, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	78ba      	ldrb	r2, [r7, #2]
 800bab6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	785b      	ldrb	r3, [r3, #1]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800baca:	78bb      	ldrb	r3, [r7, #2]
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d102      	bne.n	800bad6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800badc:	2b01      	cmp	r3, #1
 800bade:	d101      	bne.n	800bae4 <HAL_PCD_EP_Open+0xa6>
 800bae0:	2302      	movs	r3, #2
 800bae2:	e00e      	b.n	800bb02 <HAL_PCD_EP_Open+0xc4>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68f9      	ldr	r1, [r7, #12]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f005 fa80 	bl	8010ff8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800bb00:	7afb      	ldrb	r3, [r7, #11]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bb16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da0e      	bge.n	800bb3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb1e:	78fb      	ldrb	r3, [r7, #3]
 800bb20:	f003 0307 	and.w	r3, r3, #7
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2201      	movs	r2, #1
 800bb38:	705a      	strb	r2, [r3, #1]
 800bb3a:	e00e      	b.n	800bb5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb3c:	78fb      	ldrb	r3, [r7, #3]
 800bb3e:	f003 0207 	and.w	r2, r3, #7
 800bb42:	4613      	mov	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	4413      	add	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	f003 0307 	and.w	r3, r3, #7
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d101      	bne.n	800bb74 <HAL_PCD_EP_Close+0x6a>
 800bb70:	2302      	movs	r3, #2
 800bb72:	e00e      	b.n	800bb92 <HAL_PCD_EP_Close+0x88>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68f9      	ldr	r1, [r7, #12]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f005 fdcc 	bl	8011720 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b086      	sub	sp, #24
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	60f8      	str	r0, [r7, #12]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	603b      	str	r3, [r7, #0]
 800bba6:	460b      	mov	r3, r1
 800bba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bbaa:	7afb      	ldrb	r3, [r7, #11]
 800bbac:	f003 0207 	and.w	r2, r3, #7
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	00db      	lsls	r3, r3, #3
 800bbb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bbda:	7afb      	ldrb	r3, [r7, #11]
 800bbdc:	f003 0307 	and.w	r3, r3, #7
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	f003 0307 	and.w	r3, r3, #7
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d106      	bne.n	800bbfe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6979      	ldr	r1, [r7, #20]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f005 ff7f 	bl	8011afa <USB_EPStartXfer>
 800bbfc:	e005      	b.n	800bc0a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6979      	ldr	r1, [r7, #20]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f005 ff78 	bl	8011afa <USB_EPStartXfer>
  }

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	f003 0207 	and.w	r2, r3, #7
 800bc26:	6879      	ldr	r1, [r7, #4]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	440b      	add	r3, r1
 800bc32:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bc36:	681b      	ldr	r3, [r3, #0]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	607a      	str	r2, [r7, #4]
 800bc4e:	603b      	str	r3, [r7, #0]
 800bc50:	460b      	mov	r3, r1
 800bc52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc54:	7afb      	ldrb	r3, [r7, #11]
 800bc56:	f003 0307 	and.w	r3, r3, #7
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	4413      	add	r3, r2
 800bc68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2200      	movs	r2, #0
 800bc88:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc90:	7afb      	ldrb	r3, [r7, #11]
 800bc92:	f003 0307 	and.w	r3, r3, #7
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	f003 0307 	and.w	r3, r3, #7
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	6979      	ldr	r1, [r7, #20]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f005 ff24 	bl	8011afa <USB_EPStartXfer>
 800bcb2:	e005      	b.n	800bcc0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6979      	ldr	r1, [r7, #20]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f005 ff1d 	bl	8011afa <USB_EPStartXfer>
  }

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bcd6:	78fb      	ldrb	r3, [r7, #3]
 800bcd8:	f003 0207 	and.w	r2, r3, #7
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d901      	bls.n	800bce8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e03e      	b.n	800bd66 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da0e      	bge.n	800bd0e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	f003 0307 	and.w	r3, r3, #7
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	4413      	add	r3, r2
 800bd04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	705a      	strb	r2, [r3, #1]
 800bd0c:	e00c      	b.n	800bd28 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bd0e:	78fa      	ldrb	r2, [r7, #3]
 800bd10:	4613      	mov	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	4413      	add	r3, r2
 800bd20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bd2e:	78fb      	ldrb	r3, [r7, #3]
 800bd30:	f003 0307 	and.w	r3, r3, #7
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d101      	bne.n	800bd48 <HAL_PCD_EP_SetStall+0x7e>
 800bd44:	2302      	movs	r3, #2
 800bd46:	e00e      	b.n	800bd66 <HAL_PCD_EP_SetStall+0x9c>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68f9      	ldr	r1, [r7, #12]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f007 fa05 	bl	8013166 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	460b      	mov	r3, r1
 800bd78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bd7a:	78fb      	ldrb	r3, [r7, #3]
 800bd7c:	f003 020f 	and.w	r2, r3, #15
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d901      	bls.n	800bd8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e040      	b.n	800be0e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	da0e      	bge.n	800bdb2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd94:	78fb      	ldrb	r3, [r7, #3]
 800bd96:	f003 0307 	and.w	r3, r3, #7
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	4413      	add	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2201      	movs	r2, #1
 800bdae:	705a      	strb	r2, [r3, #1]
 800bdb0:	e00e      	b.n	800bdd0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bdb2:	78fb      	ldrb	r3, [r7, #3]
 800bdb4:	f003 0207 	and.w	r2, r3, #7
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bdd6:	78fb      	ldrb	r3, [r7, #3]
 800bdd8:	f003 0307 	and.w	r3, r3, #7
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d101      	bne.n	800bdf0 <HAL_PCD_EP_ClrStall+0x82>
 800bdec:	2302      	movs	r3, #2
 800bdee:	e00e      	b.n	800be0e <HAL_PCD_EP_ClrStall+0xa0>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68f9      	ldr	r1, [r7, #12]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f007 fa02 	bl	8013208 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b096      	sub	sp, #88	; 0x58
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800be1e:	e39c      	b.n	800c55a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800be2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800be30:	b2db      	uxtb	r3, r3
 800be32:	f003 030f 	and.w	r3, r3, #15
 800be36:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800be3a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f040 815e 	bne.w	800c100 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800be44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800be48:	f003 0310 	and.w	r3, r3, #16
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d150      	bne.n	800bef2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	b29b      	uxth	r3, r3
 800be58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800be5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be60:	81fb      	strh	r3, [r7, #14]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	89fb      	ldrh	r3, [r7, #14]
 800be68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be70:	b29b      	uxth	r3, r3
 800be72:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3328      	adds	r3, #40	; 0x28
 800be78:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be82:	b29b      	uxth	r3, r3
 800be84:	461a      	mov	r2, r3
 800be86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	4413      	add	r3, r2
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	6812      	ldr	r2, [r2, #0]
 800be92:	4413      	add	r3, r2
 800be94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800bea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea4:	695a      	ldr	r2, [r3, #20]
 800bea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea8:	69db      	ldr	r3, [r3, #28]
 800beaa:	441a      	add	r2, r3
 800beac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800beb0:	2100      	movs	r1, #0
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f009 fa07 	bl	80152c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 834a 	beq.w	800c55a <PCD_EP_ISR_Handler+0x744>
 800bec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f040 8345 	bne.w	800c55a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	b292      	uxth	r2, r2
 800bee4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bef0:	e333      	b.n	800c55a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bef8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bf04:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bf08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d032      	beq.n	800bf76 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	00db      	lsls	r3, r3, #3
 800bf22:	4413      	add	r3, r2
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6812      	ldr	r2, [r2, #0]
 800bf28:	4413      	add	r3, r2
 800bf2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bf34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf36:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6818      	ldr	r0, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800bf42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf44:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bf46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf48:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	f007 fa87 	bl	801345e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	823b      	strh	r3, [r7, #16]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	8a3a      	ldrh	r2, [r7, #16]
 800bf66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf6a:	b292      	uxth	r2, r2
 800bf6c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f009 f97c 	bl	801526c <HAL_PCD_SetupStageCallback>
 800bf74:	e2f1      	b.n	800c55a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bf76:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f280 82ed 	bge.w	800c55a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	83fb      	strh	r3, [r7, #30]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	8bfa      	ldrh	r2, [r7, #30]
 800bf96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf9a:	b292      	uxth	r2, r2
 800bf9c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	00db      	lsls	r3, r3, #3
 800bfb0:	4413      	add	r3, r2
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	6812      	ldr	r2, [r2, #0]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfbc:	881b      	ldrh	r3, [r3, #0]
 800bfbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bfc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bfc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d019      	beq.n	800c002 <PCD_EP_ISR_Handler+0x1ec>
 800bfce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d015      	beq.n	800c002 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfdc:	6959      	ldr	r1, [r3, #20]
 800bfde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	f007 fa39 	bl	801345e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfee:	695a      	ldr	r2, [r3, #20]
 800bff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff2:	69db      	ldr	r3, [r3, #28]
 800bff4:	441a      	add	r2, r3
 800bff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bffa:	2100      	movs	r1, #0
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f009 f947 	bl	8015290 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	b29b      	uxth	r3, r3
 800c00a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f040 82a3 	bne.w	800c55a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	61bb      	str	r3, [r7, #24]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c022:	b29b      	uxth	r3, r3
 800c024:	461a      	mov	r2, r3
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	4413      	add	r3, r2
 800c02a:	61bb      	str	r3, [r7, #24]
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	2b3e      	cmp	r3, #62	; 0x3e
 800c03a:	d918      	bls.n	800c06e <PCD_EP_ISR_Handler+0x258>
 800c03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	095b      	lsrs	r3, r3, #5
 800c042:	647b      	str	r3, [r7, #68]	; 0x44
 800c044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	f003 031f 	and.w	r3, r3, #31
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d102      	bne.n	800c056 <PCD_EP_ISR_Handler+0x240>
 800c050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c052:	3b01      	subs	r3, #1
 800c054:	647b      	str	r3, [r7, #68]	; 0x44
 800c056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c058:	b29b      	uxth	r3, r3
 800c05a:	029b      	lsls	r3, r3, #10
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c066:	b29a      	uxth	r2, r3
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	801a      	strh	r2, [r3, #0]
 800c06c:	e029      	b.n	800c0c2 <PCD_EP_ISR_Handler+0x2ac>
 800c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d112      	bne.n	800c09c <PCD_EP_ISR_Handler+0x286>
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	881b      	ldrh	r3, [r3, #0]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c080:	b29a      	uxth	r2, r3
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	801a      	strh	r2, [r3, #0]
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c094:	b29a      	uxth	r2, r3
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	801a      	strh	r2, [r3, #0]
 800c09a:	e012      	b.n	800c0c2 <PCD_EP_ISR_Handler+0x2ac>
 800c09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	085b      	lsrs	r3, r3, #1
 800c0a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	f003 0301 	and.w	r3, r3, #1
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <PCD_EP_ISR_Handler+0x2a0>
 800c0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	647b      	str	r3, [r7, #68]	; 0x44
 800c0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	029b      	lsls	r3, r3, #10
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0d2:	827b      	strh	r3, [r7, #18]
 800c0d4:	8a7b      	ldrh	r3, [r7, #18]
 800c0d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c0da:	827b      	strh	r3, [r7, #18]
 800c0dc:	8a7b      	ldrh	r3, [r7, #18]
 800c0de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c0e2:	827b      	strh	r3, [r7, #18]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	8a7b      	ldrh	r3, [r7, #18]
 800c0ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	8013      	strh	r3, [r2, #0]
 800c0fe:	e22c      	b.n	800c55a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c114:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f280 80f6 	bge.w	800c30a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	b29a      	uxth	r2, r3
 800c130:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c134:	4013      	ands	r3, r2
 800c136:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800c14c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c150:	b292      	uxth	r2, r2
 800c152:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800c154:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	4413      	add	r3, r2
 800c168:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800c16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c16c:	7b1b      	ldrb	r3, [r3, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d123      	bne.n	800c1ba <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	461a      	mov	r2, r3
 800c17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	4413      	add	r3, r2
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	6812      	ldr	r2, [r2, #0]
 800c18a:	4413      	add	r3, r2
 800c18c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c196:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800c19a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 808e 	beq.w	800c2c0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6818      	ldr	r0, [r3, #0]
 800c1a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1aa:	6959      	ldr	r1, [r3, #20]
 800c1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ae:	88da      	ldrh	r2, [r3, #6]
 800c1b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c1b4:	f007 f953 	bl	801345e <USB_ReadPMA>
 800c1b8:	e082      	b.n	800c2c0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800c1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1bc:	78db      	ldrb	r3, [r3, #3]
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d10a      	bne.n	800c1d8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800c1c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9d3 	bl	800c576 <HAL_PCD_EP_DB_Receive>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c1d6:	e073      	b.n	800c2c0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	441a      	add	r2, r3
 800c204:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c20c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c218:	b29b      	uxth	r3, r3
 800c21a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	461a      	mov	r2, r3
 800c222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d022      	beq.n	800c27c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c23e:	b29b      	uxth	r3, r3
 800c240:	461a      	mov	r2, r3
 800c242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	4413      	add	r3, r2
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	6812      	ldr	r2, [r2, #0]
 800c24e:	4413      	add	r3, r2
 800c250:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c25a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800c25e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c262:	2b00      	cmp	r3, #0
 800c264:	d02c      	beq.n	800c2c0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c26c:	6959      	ldr	r1, [r3, #20]
 800c26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c270:	891a      	ldrh	r2, [r3, #8]
 800c272:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c276:	f007 f8f2 	bl	801345e <USB_ReadPMA>
 800c27a:	e021      	b.n	800c2c0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c284:	b29b      	uxth	r3, r3
 800c286:	461a      	mov	r2, r3
 800c288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	00db      	lsls	r3, r3, #3
 800c28e:	4413      	add	r3, r2
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	6812      	ldr	r2, [r2, #0]
 800c294:	4413      	add	r3, r2
 800c296:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800c2a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d009      	beq.n	800c2c0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b2:	6959      	ldr	r1, [r3, #20]
 800c2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b6:	895a      	ldrh	r2, [r3, #10]
 800c2b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c2bc:	f007 f8cf 	bl	801345e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800c2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c2:	69da      	ldr	r2, [r3, #28]
 800c2c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c2c8:	441a      	add	r2, r3
 800c2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800c2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d0:	695a      	ldr	r2, [r3, #20]
 800c2d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c2d6:	441a      	add	r2, r3
 800c2d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800c2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <PCD_EP_ISR_Handler+0x4da>
 800c2e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800c2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d206      	bcs.n	800c2fe <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f008 ffca 	bl	8015290 <HAL_PCD_DataOutStageCallback>
 800c2fc:	e005      	b.n	800c30a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c304:	4618      	mov	r0, r3
 800c306:	f005 fbf8 	bl	8011afa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800c30a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 8121 	beq.w	800c55a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800c318:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	4613      	mov	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	4413      	add	r3, r2
 800c32a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c346:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	441a      	add	r2, r3
 800c358:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c35c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c364:	b29b      	uxth	r3, r3
 800c366:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800c368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c36a:	78db      	ldrb	r3, [r3, #3]
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	f000 80a2 	beq.w	800c4b6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800c372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c374:	2200      	movs	r2, #0
 800c376:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800c378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c37a:	7b1b      	ldrb	r3, [r3, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f000 8093 	beq.w	800c4a8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c382:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d046      	beq.n	800c41c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c390:	785b      	ldrb	r3, [r3, #1]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d126      	bne.n	800c3e4 <PCD_EP_ISR_Handler+0x5ce>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	627b      	str	r3, [r7, #36]	; 0x24
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	4413      	add	r3, r2
 800c3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c3ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	00da      	lsls	r2, r3, #3
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3bc:	623b      	str	r3, [r7, #32]
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	801a      	strh	r2, [r3, #0]
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	801a      	strh	r2, [r3, #0]
 800c3e2:	e061      	b.n	800c4a8 <PCD_EP_ISR_Handler+0x692>
 800c3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e6:	785b      	ldrb	r3, [r3, #1]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d15d      	bne.n	800c4a8 <PCD_EP_ISR_Handler+0x692>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	4413      	add	r3, r2
 800c402:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	00da      	lsls	r2, r3, #3
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	4413      	add	r3, r2
 800c40e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c412:	62bb      	str	r3, [r7, #40]	; 0x28
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	2200      	movs	r2, #0
 800c418:	801a      	strh	r2, [r3, #0]
 800c41a:	e045      	b.n	800c4a8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c424:	785b      	ldrb	r3, [r3, #1]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d126      	bne.n	800c478 <PCD_EP_ISR_Handler+0x662>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	637b      	str	r3, [r7, #52]	; 0x34
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c438:	b29b      	uxth	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43e:	4413      	add	r3, r2
 800c440:	637b      	str	r3, [r7, #52]	; 0x34
 800c442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	00da      	lsls	r2, r3, #3
 800c448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44a:	4413      	add	r3, r2
 800c44c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c450:	633b      	str	r3, [r7, #48]	; 0x30
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	881b      	ldrh	r3, [r3, #0]
 800c456:	b29b      	uxth	r3, r3
 800c458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	801a      	strh	r2, [r3, #0]
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	b29b      	uxth	r3, r3
 800c468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c46c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c470:	b29a      	uxth	r2, r3
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	801a      	strh	r2, [r3, #0]
 800c476:	e017      	b.n	800c4a8 <PCD_EP_ISR_Handler+0x692>
 800c478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d113      	bne.n	800c4a8 <PCD_EP_ISR_Handler+0x692>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c488:	b29b      	uxth	r3, r3
 800c48a:	461a      	mov	r2, r3
 800c48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48e:	4413      	add	r3, r2
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	00da      	lsls	r2, r3, #3
 800c498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49a:	4413      	add	r3, r2
 800c49c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f008 ff09 	bl	80152c6 <HAL_PCD_DataInStageCallback>
 800c4b4:	e051      	b.n	800c55a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c4b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c4ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d144      	bne.n	800c54c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	4413      	add	r3, r2
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	6812      	ldr	r2, [r2, #0]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800c4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ec:	699a      	ldr	r2, [r3, #24]
 800c4ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d907      	bls.n	800c506 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800c4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f8:	699a      	ldr	r2, [r3, #24]
 800c4fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c502:	619a      	str	r2, [r3, #24]
 800c504:	e002      	b.n	800c50c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800c506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c508:	2200      	movs	r2, #0
 800c50a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d106      	bne.n	800c522 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f008 fed3 	bl	80152c6 <HAL_PCD_DataInStageCallback>
 800c520:	e01b      	b.n	800c55a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c524:	695a      	ldr	r2, [r3, #20]
 800c526:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c52a:	441a      	add	r2, r3
 800c52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c52e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c532:	69da      	ldr	r2, [r3, #28]
 800c534:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c538:	441a      	add	r2, r3
 800c53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c53c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c544:	4618      	mov	r0, r3
 800c546:	f005 fad8 	bl	8011afa <USB_EPStartXfer>
 800c54a:	e006      	b.n	800c55a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c54c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c550:	461a      	mov	r2, r3
 800c552:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f917 	bl	800c788 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c562:	b29b      	uxth	r3, r3
 800c564:	b21b      	sxth	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	f6ff ac5a 	blt.w	800be20 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3758      	adds	r7, #88	; 0x58
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b088      	sub	sp, #32
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	60f8      	str	r0, [r7, #12]
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	4613      	mov	r3, r2
 800c582:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c584:	88fb      	ldrh	r3, [r7, #6]
 800c586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d07c      	beq.n	800c688 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c596:	b29b      	uxth	r3, r3
 800c598:	461a      	mov	r2, r3
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	4413      	add	r3, r2
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	6812      	ldr	r2, [r2, #0]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	699a      	ldr	r2, [r3, #24]
 800c5b8:	8b7b      	ldrh	r3, [r7, #26]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d306      	bcc.n	800c5cc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	699a      	ldr	r2, [r3, #24]
 800c5c2:	8b7b      	ldrh	r3, [r7, #26]
 800c5c4:	1ad2      	subs	r2, r2, r3
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	619a      	str	r2, [r3, #24]
 800c5ca:	e002      	b.n	800c5d2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d123      	bne.n	800c622 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	881b      	ldrh	r3, [r3, #0]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5f4:	833b      	strh	r3, [r7, #24]
 800c5f6:	8b3b      	ldrh	r3, [r7, #24]
 800c5f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c5fc:	833b      	strh	r3, [r7, #24]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	461a      	mov	r2, r3
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	441a      	add	r2, r3
 800c60c:	8b3b      	ldrh	r3, [r7, #24]
 800c60e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c61e:	b29b      	uxth	r3, r3
 800c620:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c622:	88fb      	ldrh	r3, [r7, #6]
 800c624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01f      	beq.n	800c66c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	881b      	ldrh	r3, [r3, #0]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c646:	82fb      	strh	r3, [r7, #22]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	461a      	mov	r2, r3
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	441a      	add	r2, r3
 800c656:	8afb      	ldrh	r3, [r7, #22]
 800c658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c65c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c668:	b29b      	uxth	r3, r3
 800c66a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c66c:	8b7b      	ldrh	r3, [r7, #26]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 8085 	beq.w	800c77e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	6959      	ldr	r1, [r3, #20]
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	891a      	ldrh	r2, [r3, #8]
 800c680:	8b7b      	ldrh	r3, [r7, #26]
 800c682:	f006 feec 	bl	801345e <USB_ReadPMA>
 800c686:	e07a      	b.n	800c77e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c690:	b29b      	uxth	r3, r3
 800c692:	461a      	mov	r2, r3
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	00db      	lsls	r3, r3, #3
 800c69a:	4413      	add	r3, r2
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	6812      	ldr	r2, [r2, #0]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	699a      	ldr	r2, [r3, #24]
 800c6b2:	8b7b      	ldrh	r3, [r7, #26]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d306      	bcc.n	800c6c6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	699a      	ldr	r2, [r3, #24]
 800c6bc:	8b7b      	ldrh	r3, [r7, #26]
 800c6be:	1ad2      	subs	r2, r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	619a      	str	r2, [r3, #24]
 800c6c4:	e002      	b.n	800c6cc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d123      	bne.n	800c71c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ee:	83fb      	strh	r3, [r7, #30]
 800c6f0:	8bfb      	ldrh	r3, [r7, #30]
 800c6f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c6f6:	83fb      	strh	r3, [r7, #30]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	441a      	add	r2, r3
 800c706:	8bfb      	ldrh	r3, [r7, #30]
 800c708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c70c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c718:	b29b      	uxth	r3, r3
 800c71a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c71c:	88fb      	ldrh	r3, [r7, #6]
 800c71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d11f      	bne.n	800c766 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	b29b      	uxth	r3, r3
 800c738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c740:	83bb      	strh	r3, [r7, #28]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	441a      	add	r2, r3
 800c750:	8bbb      	ldrh	r3, [r7, #28]
 800c752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c75a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c75e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c762:	b29b      	uxth	r3, r3
 800c764:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c766:	8b7b      	ldrh	r3, [r7, #26]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d008      	beq.n	800c77e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6818      	ldr	r0, [r3, #0]
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	6959      	ldr	r1, [r3, #20]
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	895a      	ldrh	r2, [r3, #10]
 800c778:	8b7b      	ldrh	r3, [r7, #26]
 800c77a:	f006 fe70 	bl	801345e <USB_ReadPMA>
    }
  }

  return count;
 800c77e:	8b7b      	ldrh	r3, [r7, #26]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3720      	adds	r7, #32
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b0a2      	sub	sp, #136	; 0x88
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	4613      	mov	r3, r2
 800c794:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c796:	88fb      	ldrh	r3, [r7, #6]
 800c798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 81c5 	beq.w	800cb2c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	00db      	lsls	r3, r3, #3
 800c7b4:	4413      	add	r3, r2
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	6812      	ldr	r2, [r2, #0]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	699a      	ldr	r2, [r3, #24]
 800c7ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d907      	bls.n	800c7e6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	699a      	ldr	r2, [r3, #24]
 800c7da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7de:	1ad2      	subs	r2, r2, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	619a      	str	r2, [r3, #24]
 800c7e4:	e002      	b.n	800c7ec <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f040 80b9 	bne.w	800c968 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	785b      	ldrb	r3, [r3, #1]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d126      	bne.n	800c84c <HAL_PCD_EP_DB_Transmit+0xc4>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	62bb      	str	r3, [r7, #40]	; 0x28
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	461a      	mov	r2, r3
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	4413      	add	r3, r2
 800c814:	62bb      	str	r3, [r7, #40]	; 0x28
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	00da      	lsls	r2, r3, #3
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	4413      	add	r3, r2
 800c820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c824:	627b      	str	r3, [r7, #36]	; 0x24
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c830:	b29a      	uxth	r2, r3
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	801a      	strh	r2, [r3, #0]
 800c836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c844:	b29a      	uxth	r2, r3
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	801a      	strh	r2, [r3, #0]
 800c84a:	e01a      	b.n	800c882 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d116      	bne.n	800c882 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	633b      	str	r3, [r7, #48]	; 0x30
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c862:	b29b      	uxth	r3, r3
 800c864:	461a      	mov	r2, r3
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	4413      	add	r3, r2
 800c86a:	633b      	str	r3, [r7, #48]	; 0x30
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	00da      	lsls	r2, r3, #3
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	4413      	add	r3, r2
 800c876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c87a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	2200      	movs	r2, #0
 800c880:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	623b      	str	r3, [r7, #32]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	785b      	ldrb	r3, [r3, #1]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d126      	bne.n	800c8de <HAL_PCD_EP_DB_Transmit+0x156>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	61bb      	str	r3, [r7, #24]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	61bb      	str	r3, [r7, #24]
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	00da      	lsls	r2, r3, #3
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	801a      	strh	r2, [r3, #0]
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	801a      	strh	r2, [r3, #0]
 800c8dc:	e017      	b.n	800c90e <HAL_PCD_EP_DB_Transmit+0x186>
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	785b      	ldrb	r3, [r3, #1]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d113      	bne.n	800c90e <HAL_PCD_EP_DB_Transmit+0x186>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	623b      	str	r3, [r7, #32]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	00da      	lsls	r2, r3, #3
 800c8fe:	6a3b      	ldr	r3, [r7, #32]
 800c900:	4413      	add	r3, r2
 800c902:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c906:	61fb      	str	r3, [r7, #28]
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	2200      	movs	r2, #0
 800c90c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f008 fcd6 	bl	80152c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c91a:	88fb      	ldrh	r3, [r7, #6]
 800c91c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 82d2 	beq.w	800ceca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	881b      	ldrh	r3, [r3, #0]
 800c936:	b29b      	uxth	r3, r3
 800c938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c93c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c940:	827b      	strh	r3, [r7, #18]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	441a      	add	r2, r3
 800c950:	8a7b      	ldrh	r3, [r7, #18]
 800c952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c95a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c962:	b29b      	uxth	r3, r3
 800c964:	8013      	strh	r3, [r2, #0]
 800c966:	e2b0      	b.n	800ceca <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c968:	88fb      	ldrh	r3, [r7, #6]
 800c96a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d021      	beq.n	800c9b6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	b29b      	uxth	r3, r3
 800c984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c98c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	461a      	mov	r2, r3
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	441a      	add	r2, r3
 800c99e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c9a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	f040 8284 	bne.w	800ceca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	695a      	ldr	r2, [r3, #20]
 800c9c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9ca:	441a      	add	r2, r3
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	69da      	ldr	r2, [r3, #28]
 800c9d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9d8:	441a      	add	r2, r3
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	6a1a      	ldr	r2, [r3, #32]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d309      	bcc.n	800c9fe <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	6a1a      	ldr	r2, [r3, #32]
 800c9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9f6:	1ad2      	subs	r2, r2, r3
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	621a      	str	r2, [r3, #32]
 800c9fc:	e015      	b.n	800ca2a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d107      	bne.n	800ca16 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800ca06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca0a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ca14:	e009      	b.n	800ca2a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2200      	movs	r2, #0
 800ca28:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d155      	bne.n	800cade <HAL_PCD_EP_DB_Transmit+0x356>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	461a      	mov	r2, r3
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	4413      	add	r3, r2
 800ca48:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	00da      	lsls	r2, r3, #3
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	4413      	add	r3, r2
 800ca54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ca58:	637b      	str	r3, [r7, #52]	; 0x34
 800ca5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca5c:	2b3e      	cmp	r3, #62	; 0x3e
 800ca5e:	d916      	bls.n	800ca8e <HAL_PCD_EP_DB_Transmit+0x306>
 800ca60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca62:	095b      	lsrs	r3, r3, #5
 800ca64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca68:	f003 031f 	and.w	r3, r3, #31
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800ca70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca72:	3b01      	subs	r3, #1
 800ca74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	029b      	lsls	r3, r3, #10
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8a:	801a      	strh	r2, [r3, #0]
 800ca8c:	e043      	b.n	800cb16 <HAL_PCD_EP_DB_Transmit+0x38e>
 800ca8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d112      	bne.n	800caba <HAL_PCD_EP_DB_Transmit+0x332>
 800ca94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa2:	801a      	strh	r2, [r3, #0]
 800caa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab6:	801a      	strh	r2, [r3, #0]
 800cab8:	e02d      	b.n	800cb16 <HAL_PCD_EP_DB_Transmit+0x38e>
 800caba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cabc:	085b      	lsrs	r3, r3, #1
 800cabe:	64bb      	str	r3, [r7, #72]	; 0x48
 800cac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac2:	f003 0301 	and.w	r3, r3, #1
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d002      	beq.n	800cad0 <HAL_PCD_EP_DB_Transmit+0x348>
 800caca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cacc:	3301      	adds	r3, #1
 800cace:	64bb      	str	r3, [r7, #72]	; 0x48
 800cad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	029b      	lsls	r3, r3, #10
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cada:	801a      	strh	r2, [r3, #0]
 800cadc:	e01b      	b.n	800cb16 <HAL_PCD_EP_DB_Transmit+0x38e>
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d117      	bne.n	800cb16 <HAL_PCD_EP_DB_Transmit+0x38e>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	643b      	str	r3, [r7, #64]	; 0x40
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	461a      	mov	r2, r3
 800caf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cafa:	4413      	add	r3, r2
 800cafc:	643b      	str	r3, [r7, #64]	; 0x40
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	00da      	lsls	r2, r3, #3
 800cb04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb06:	4413      	add	r3, r2
 800cb08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb14:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6818      	ldr	r0, [r3, #0]
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	6959      	ldr	r1, [r3, #20]
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	891a      	ldrh	r2, [r3, #8]
 800cb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	f006 fc58 	bl	80133da <USB_WritePMA>
 800cb2a:	e1ce      	b.n	800ceca <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	461a      	mov	r2, r3
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	4413      	add	r3, r2
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	6812      	ldr	r2, [r2, #0]
 800cb44:	4413      	add	r3, r2
 800cb46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	699a      	ldr	r2, [r3, #24]
 800cb58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d307      	bcc.n	800cb70 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	699a      	ldr	r2, [r3, #24]
 800cb64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb68:	1ad2      	subs	r2, r2, r3
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	619a      	str	r2, [r3, #24]
 800cb6e:	e002      	b.n	800cb76 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	2200      	movs	r2, #0
 800cb74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f040 80c4 	bne.w	800cd08 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	785b      	ldrb	r3, [r3, #1]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d126      	bne.n	800cbd6 <HAL_PCD_EP_DB_Transmit+0x44e>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb9c:	4413      	add	r3, r2
 800cb9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	00da      	lsls	r2, r3, #3
 800cba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cba8:	4413      	add	r3, r2
 800cbaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cbae:	667b      	str	r3, [r7, #100]	; 0x64
 800cbb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbb2:	881b      	ldrh	r3, [r3, #0]
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbbe:	801a      	strh	r2, [r3, #0]
 800cbc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbc2:	881b      	ldrh	r3, [r3, #0]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbd2:	801a      	strh	r2, [r3, #0]
 800cbd4:	e01a      	b.n	800cc0c <HAL_PCD_EP_DB_Transmit+0x484>
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d116      	bne.n	800cc0c <HAL_PCD_EP_DB_Transmit+0x484>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	673b      	str	r3, [r7, #112]	; 0x70
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	461a      	mov	r2, r3
 800cbf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbf2:	4413      	add	r3, r2
 800cbf4:	673b      	str	r3, [r7, #112]	; 0x70
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	00da      	lsls	r2, r3, #3
 800cbfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbfe:	4413      	add	r3, r2
 800cc00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc04:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc08:	2200      	movs	r2, #0
 800cc0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	785b      	ldrb	r3, [r3, #1]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d12f      	bne.n	800cc7a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc32:	4413      	add	r3, r2
 800cc34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	00da      	lsls	r2, r3, #3
 800cc3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc42:	4413      	add	r3, r2
 800cc44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc50:	881b      	ldrh	r3, [r3, #0]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc5e:	801a      	strh	r2, [r3, #0]
 800cc60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc76:	801a      	strh	r2, [r3, #0]
 800cc78:	e017      	b.n	800ccaa <HAL_PCD_EP_DB_Transmit+0x522>
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	785b      	ldrb	r3, [r3, #1]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d113      	bne.n	800ccaa <HAL_PCD_EP_DB_Transmit+0x522>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc90:	4413      	add	r3, r2
 800cc92:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	00da      	lsls	r2, r3, #3
 800cc9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cca2:	67bb      	str	r3, [r7, #120]	; 0x78
 800cca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cca6:	2200      	movs	r2, #0
 800cca8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f008 fb08 	bl	80152c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ccb6:	88fb      	ldrh	r3, [r7, #6]
 800ccb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f040 8104 	bne.w	800ceca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	881b      	ldrh	r3, [r3, #0]
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccdc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	461a      	mov	r2, r3
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	441a      	add	r2, r3
 800ccee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ccfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	8013      	strh	r3, [r2, #0]
 800cd06:	e0e0      	b.n	800ceca <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d121      	bne.n	800cd56 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd2c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	461a      	mov	r2, r3
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	441a      	add	r2, r3
 800cd3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800cd42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	f040 80b4 	bne.w	800ceca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	695a      	ldr	r2, [r3, #20]
 800cd66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd6a:	441a      	add	r2, r3
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	69da      	ldr	r2, [r3, #28]
 800cd74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd78:	441a      	add	r2, r3
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	6a1a      	ldr	r2, [r3, #32]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d309      	bcc.n	800cd9e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	6a1a      	ldr	r2, [r3, #32]
 800cd94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd96:	1ad2      	subs	r2, r2, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	621a      	str	r2, [r3, #32]
 800cd9c:	e015      	b.n	800cdca <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d107      	bne.n	800cdb6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800cda6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cdaa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800cdb4:	e009      	b.n	800cdca <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	663b      	str	r3, [r7, #96]	; 0x60
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d155      	bne.n	800ce84 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	461a      	mov	r2, r3
 800cdea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdec:	4413      	add	r3, r2
 800cdee:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	00da      	lsls	r2, r3, #3
 800cdf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cdfe:	657b      	str	r3, [r7, #84]	; 0x54
 800ce00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce02:	2b3e      	cmp	r3, #62	; 0x3e
 800ce04:	d916      	bls.n	800ce34 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800ce06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce08:	095b      	lsrs	r3, r3, #5
 800ce0a:	677b      	str	r3, [r7, #116]	; 0x74
 800ce0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce0e:	f003 031f 	and.w	r3, r3, #31
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d102      	bne.n	800ce1c <HAL_PCD_EP_DB_Transmit+0x694>
 800ce16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	677b      	str	r3, [r7, #116]	; 0x74
 800ce1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	029b      	lsls	r3, r3, #10
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce30:	801a      	strh	r2, [r3, #0]
 800ce32:	e040      	b.n	800ceb6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ce34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d112      	bne.n	800ce60 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800ce3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce48:	801a      	strh	r2, [r3, #0]
 800ce4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce5c:	801a      	strh	r2, [r3, #0]
 800ce5e:	e02a      	b.n	800ceb6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ce60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce62:	085b      	lsrs	r3, r3, #1
 800ce64:	677b      	str	r3, [r7, #116]	; 0x74
 800ce66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800ce70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce72:	3301      	adds	r3, #1
 800ce74:	677b      	str	r3, [r7, #116]	; 0x74
 800ce76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	029b      	lsls	r3, r3, #10
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce80:	801a      	strh	r2, [r3, #0]
 800ce82:	e018      	b.n	800ceb6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	785b      	ldrb	r3, [r3, #1]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d114      	bne.n	800ceb6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	461a      	mov	r2, r3
 800ce98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce9a:	4413      	add	r3, r2
 800ce9c:	663b      	str	r3, [r7, #96]	; 0x60
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	00da      	lsls	r2, r3, #3
 800cea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cea6:	4413      	add	r3, r2
 800cea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ceac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceb4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	6959      	ldr	r1, [r3, #20]
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	895a      	ldrh	r2, [r3, #10]
 800cec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	f006 fa88 	bl	80133da <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cee4:	823b      	strh	r3, [r7, #16]
 800cee6:	8a3b      	ldrh	r3, [r7, #16]
 800cee8:	f083 0310 	eor.w	r3, r3, #16
 800ceec:	823b      	strh	r3, [r7, #16]
 800ceee:	8a3b      	ldrh	r3, [r7, #16]
 800cef0:	f083 0320 	eor.w	r3, r3, #32
 800cef4:	823b      	strh	r3, [r7, #16]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	441a      	add	r2, r3
 800cf04:	8a3b      	ldrh	r3, [r7, #16]
 800cf06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3788      	adds	r7, #136	; 0x88
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b087      	sub	sp, #28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	607b      	str	r3, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	817b      	strh	r3, [r7, #10]
 800cf32:	4613      	mov	r3, r2
 800cf34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800cf36:	897b      	ldrh	r3, [r7, #10]
 800cf38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00b      	beq.n	800cf5a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf42:	897b      	ldrh	r3, [r7, #10]
 800cf44:	f003 0307 	and.w	r3, r3, #7
 800cf48:	1c5a      	adds	r2, r3, #1
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	4413      	add	r3, r2
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	e009      	b.n	800cf6e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cf5a:	897a      	ldrh	r2, [r7, #10]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	00db      	lsls	r3, r3, #3
 800cf64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800cf6e:	893b      	ldrh	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d107      	bne.n	800cf84 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	2200      	movs	r2, #0
 800cf78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	80da      	strh	r2, [r3, #6]
 800cf82:	e00b      	b.n	800cf9c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	2201      	movs	r2, #1
 800cf88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	0c1b      	lsrs	r3, r3, #16
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	371c      	adds	r7, #28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b085      	sub	sp, #20
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f043 0301 	orr.w	r3, r3, #1
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	f043 0302 	orr.w	r3, r3, #2
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3714      	adds	r7, #20
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
	...

0800d000 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d141      	bne.n	800d092 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d00e:	4b4b      	ldr	r3, [pc, #300]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d01a:	d131      	bne.n	800d080 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d01c:	4b47      	ldr	r3, [pc, #284]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d022:	4a46      	ldr	r2, [pc, #280]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d02c:	4b43      	ldr	r3, [pc, #268]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d034:	4a41      	ldr	r2, [pc, #260]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d03a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d03c:	4b40      	ldr	r3, [pc, #256]	; (800d140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2232      	movs	r2, #50	; 0x32
 800d042:	fb02 f303 	mul.w	r3, r2, r3
 800d046:	4a3f      	ldr	r2, [pc, #252]	; (800d144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d048:	fba2 2303 	umull	r2, r3, r2, r3
 800d04c:	0c9b      	lsrs	r3, r3, #18
 800d04e:	3301      	adds	r3, #1
 800d050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d052:	e002      	b.n	800d05a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3b01      	subs	r3, #1
 800d058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d05a:	4b38      	ldr	r3, [pc, #224]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d066:	d102      	bne.n	800d06e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1f2      	bne.n	800d054 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d06e:	4b33      	ldr	r3, [pc, #204]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d07a:	d158      	bne.n	800d12e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e057      	b.n	800d130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d080:	4b2e      	ldr	r3, [pc, #184]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d086:	4a2d      	ldr	r2, [pc, #180]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d08c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d090:	e04d      	b.n	800d12e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d098:	d141      	bne.n	800d11e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d09a:	4b28      	ldr	r3, [pc, #160]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d0a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0a6:	d131      	bne.n	800d10c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d0a8:	4b24      	ldr	r3, [pc, #144]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0ae:	4a23      	ldr	r2, [pc, #140]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0b8:	4b20      	ldr	r3, [pc, #128]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d0c0:	4a1e      	ldr	r2, [pc, #120]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d0c8:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2232      	movs	r2, #50	; 0x32
 800d0ce:	fb02 f303 	mul.w	r3, r2, r3
 800d0d2:	4a1c      	ldr	r2, [pc, #112]	; (800d144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d8:	0c9b      	lsrs	r3, r3, #18
 800d0da:	3301      	adds	r3, #1
 800d0dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d0de:	e002      	b.n	800d0e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d0e6:	4b15      	ldr	r3, [pc, #84]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0f2:	d102      	bne.n	800d0fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1f2      	bne.n	800d0e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d0fa:	4b10      	ldr	r3, [pc, #64]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d106:	d112      	bne.n	800d12e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d108:	2303      	movs	r3, #3
 800d10a:	e011      	b.n	800d130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d10c:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d112:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d11c:	e007      	b.n	800d12e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d11e:	4b07      	ldr	r3, [pc, #28]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d126:	4a05      	ldr	r2, [pc, #20]	; (800d13c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d12c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	40007000 	.word	0x40007000
 800d140:	20000000 	.word	0x20000000
 800d144:	431bde83 	.word	0x431bde83

0800d148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	e306      	b.n	800d768 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d075      	beq.n	800d252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d166:	4b97      	ldr	r3, [pc, #604]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	f003 030c 	and.w	r3, r3, #12
 800d16e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d170:	4b94      	ldr	r3, [pc, #592]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	f003 0303 	and.w	r3, r3, #3
 800d178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	2b0c      	cmp	r3, #12
 800d17e:	d102      	bne.n	800d186 <HAL_RCC_OscConfig+0x3e>
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	2b03      	cmp	r3, #3
 800d184:	d002      	beq.n	800d18c <HAL_RCC_OscConfig+0x44>
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	2b08      	cmp	r3, #8
 800d18a:	d10b      	bne.n	800d1a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d18c:	4b8d      	ldr	r3, [pc, #564]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d194:	2b00      	cmp	r3, #0
 800d196:	d05b      	beq.n	800d250 <HAL_RCC_OscConfig+0x108>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d157      	bne.n	800d250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e2e1      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ac:	d106      	bne.n	800d1bc <HAL_RCC_OscConfig+0x74>
 800d1ae:	4b85      	ldr	r3, [pc, #532]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a84      	ldr	r2, [pc, #528]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1b8:	6013      	str	r3, [r2, #0]
 800d1ba:	e01d      	b.n	800d1f8 <HAL_RCC_OscConfig+0xb0>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d1c4:	d10c      	bne.n	800d1e0 <HAL_RCC_OscConfig+0x98>
 800d1c6:	4b7f      	ldr	r3, [pc, #508]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a7e      	ldr	r2, [pc, #504]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d1d0:	6013      	str	r3, [r2, #0]
 800d1d2:	4b7c      	ldr	r3, [pc, #496]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a7b      	ldr	r2, [pc, #492]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	e00b      	b.n	800d1f8 <HAL_RCC_OscConfig+0xb0>
 800d1e0:	4b78      	ldr	r3, [pc, #480]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a77      	ldr	r2, [pc, #476]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	4b75      	ldr	r3, [pc, #468]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a74      	ldr	r2, [pc, #464]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d1f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d013      	beq.n	800d228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d200:	f7fa fa68 	bl	80076d4 <HAL_GetTick>
 800d204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d206:	e008      	b.n	800d21a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d208:	f7fa fa64 	bl	80076d4 <HAL_GetTick>
 800d20c:	4602      	mov	r2, r0
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	2b64      	cmp	r3, #100	; 0x64
 800d214:	d901      	bls.n	800d21a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	e2a6      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d21a:	4b6a      	ldr	r3, [pc, #424]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0f0      	beq.n	800d208 <HAL_RCC_OscConfig+0xc0>
 800d226:	e014      	b.n	800d252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d228:	f7fa fa54 	bl	80076d4 <HAL_GetTick>
 800d22c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d22e:	e008      	b.n	800d242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d230:	f7fa fa50 	bl	80076d4 <HAL_GetTick>
 800d234:	4602      	mov	r2, r0
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	2b64      	cmp	r3, #100	; 0x64
 800d23c:	d901      	bls.n	800d242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d23e:	2303      	movs	r3, #3
 800d240:	e292      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d242:	4b60      	ldr	r3, [pc, #384]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1f0      	bne.n	800d230 <HAL_RCC_OscConfig+0xe8>
 800d24e:	e000      	b.n	800d252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f003 0302 	and.w	r3, r3, #2
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d075      	beq.n	800d34a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d25e:	4b59      	ldr	r3, [pc, #356]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	f003 030c 	and.w	r3, r3, #12
 800d266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d268:	4b56      	ldr	r3, [pc, #344]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	f003 0303 	and.w	r3, r3, #3
 800d270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	2b0c      	cmp	r3, #12
 800d276:	d102      	bne.n	800d27e <HAL_RCC_OscConfig+0x136>
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d002      	beq.n	800d284 <HAL_RCC_OscConfig+0x13c>
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	2b04      	cmp	r3, #4
 800d282:	d11f      	bne.n	800d2c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d284:	4b4f      	ldr	r3, [pc, #316]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d005      	beq.n	800d29c <HAL_RCC_OscConfig+0x154>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	e265      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d29c:	4b49      	ldr	r3, [pc, #292]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	061b      	lsls	r3, r3, #24
 800d2aa:	4946      	ldr	r1, [pc, #280]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d2b0:	4b45      	ldr	r3, [pc, #276]	; (800d3c8 <HAL_RCC_OscConfig+0x280>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fa f9c1 	bl	800763c <HAL_InitTick>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d043      	beq.n	800d348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e251      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d023      	beq.n	800d314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d2cc:	4b3d      	ldr	r3, [pc, #244]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a3c      	ldr	r2, [pc, #240]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d2d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2d8:	f7fa f9fc 	bl	80076d4 <HAL_GetTick>
 800d2dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d2de:	e008      	b.n	800d2f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d2e0:	f7fa f9f8 	bl	80076d4 <HAL_GetTick>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d901      	bls.n	800d2f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e23a      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d2f2:	4b34      	ldr	r3, [pc, #208]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d0f0      	beq.n	800d2e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2fe:	4b31      	ldr	r3, [pc, #196]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	061b      	lsls	r3, r3, #24
 800d30c:	492d      	ldr	r1, [pc, #180]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d30e:	4313      	orrs	r3, r2
 800d310:	604b      	str	r3, [r1, #4]
 800d312:	e01a      	b.n	800d34a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d314:	4b2b      	ldr	r3, [pc, #172]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a2a      	ldr	r2, [pc, #168]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d31a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d31e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d320:	f7fa f9d8 	bl	80076d4 <HAL_GetTick>
 800d324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d326:	e008      	b.n	800d33a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d328:	f7fa f9d4 	bl	80076d4 <HAL_GetTick>
 800d32c:	4602      	mov	r2, r0
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	2b02      	cmp	r3, #2
 800d334:	d901      	bls.n	800d33a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d336:	2303      	movs	r3, #3
 800d338:	e216      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d33a:	4b22      	ldr	r3, [pc, #136]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1f0      	bne.n	800d328 <HAL_RCC_OscConfig+0x1e0>
 800d346:	e000      	b.n	800d34a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 0308 	and.w	r3, r3, #8
 800d352:	2b00      	cmp	r3, #0
 800d354:	d041      	beq.n	800d3da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d01c      	beq.n	800d398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d35e:	4b19      	ldr	r3, [pc, #100]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d364:	4a17      	ldr	r2, [pc, #92]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d366:	f043 0301 	orr.w	r3, r3, #1
 800d36a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d36e:	f7fa f9b1 	bl	80076d4 <HAL_GetTick>
 800d372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d374:	e008      	b.n	800d388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d376:	f7fa f9ad 	bl	80076d4 <HAL_GetTick>
 800d37a:	4602      	mov	r2, r0
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	2b02      	cmp	r3, #2
 800d382:	d901      	bls.n	800d388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d384:	2303      	movs	r3, #3
 800d386:	e1ef      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d388:	4b0e      	ldr	r3, [pc, #56]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d38e:	f003 0302 	and.w	r3, r3, #2
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0ef      	beq.n	800d376 <HAL_RCC_OscConfig+0x22e>
 800d396:	e020      	b.n	800d3da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d398:	4b0a      	ldr	r3, [pc, #40]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d39a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d39e:	4a09      	ldr	r2, [pc, #36]	; (800d3c4 <HAL_RCC_OscConfig+0x27c>)
 800d3a0:	f023 0301 	bic.w	r3, r3, #1
 800d3a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3a8:	f7fa f994 	bl	80076d4 <HAL_GetTick>
 800d3ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d3ae:	e00d      	b.n	800d3cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d3b0:	f7fa f990 	bl	80076d4 <HAL_GetTick>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d906      	bls.n	800d3cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d3be:	2303      	movs	r3, #3
 800d3c0:	e1d2      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
 800d3c2:	bf00      	nop
 800d3c4:	40021000 	.word	0x40021000
 800d3c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d3cc:	4b8c      	ldr	r3, [pc, #560]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d3ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3d2:	f003 0302 	and.w	r3, r3, #2
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1ea      	bne.n	800d3b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 0304 	and.w	r3, r3, #4
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 80a6 	beq.w	800d534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d3ec:	4b84      	ldr	r3, [pc, #528]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <HAL_RCC_OscConfig+0x2b4>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e000      	b.n	800d3fe <HAL_RCC_OscConfig+0x2b6>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00d      	beq.n	800d41e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d402:	4b7f      	ldr	r3, [pc, #508]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d406:	4a7e      	ldr	r2, [pc, #504]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d40c:	6593      	str	r3, [r2, #88]	; 0x58
 800d40e:	4b7c      	ldr	r3, [pc, #496]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d41a:	2301      	movs	r3, #1
 800d41c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d41e:	4b79      	ldr	r3, [pc, #484]	; (800d604 <HAL_RCC_OscConfig+0x4bc>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d426:	2b00      	cmp	r3, #0
 800d428:	d118      	bne.n	800d45c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d42a:	4b76      	ldr	r3, [pc, #472]	; (800d604 <HAL_RCC_OscConfig+0x4bc>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a75      	ldr	r2, [pc, #468]	; (800d604 <HAL_RCC_OscConfig+0x4bc>)
 800d430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d436:	f7fa f94d 	bl	80076d4 <HAL_GetTick>
 800d43a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d43c:	e008      	b.n	800d450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d43e:	f7fa f949 	bl	80076d4 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d901      	bls.n	800d450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d44c:	2303      	movs	r3, #3
 800d44e:	e18b      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d450:	4b6c      	ldr	r3, [pc, #432]	; (800d604 <HAL_RCC_OscConfig+0x4bc>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d0f0      	beq.n	800d43e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d108      	bne.n	800d476 <HAL_RCC_OscConfig+0x32e>
 800d464:	4b66      	ldr	r3, [pc, #408]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d46a:	4a65      	ldr	r2, [pc, #404]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d46c:	f043 0301 	orr.w	r3, r3, #1
 800d470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d474:	e024      	b.n	800d4c0 <HAL_RCC_OscConfig+0x378>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	d110      	bne.n	800d4a0 <HAL_RCC_OscConfig+0x358>
 800d47e:	4b60      	ldr	r3, [pc, #384]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d484:	4a5e      	ldr	r2, [pc, #376]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d486:	f043 0304 	orr.w	r3, r3, #4
 800d48a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d48e:	4b5c      	ldr	r3, [pc, #368]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d494:	4a5a      	ldr	r2, [pc, #360]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d496:	f043 0301 	orr.w	r3, r3, #1
 800d49a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d49e:	e00f      	b.n	800d4c0 <HAL_RCC_OscConfig+0x378>
 800d4a0:	4b57      	ldr	r3, [pc, #348]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4a6:	4a56      	ldr	r2, [pc, #344]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d4a8:	f023 0301 	bic.w	r3, r3, #1
 800d4ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d4b0:	4b53      	ldr	r3, [pc, #332]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4b6:	4a52      	ldr	r2, [pc, #328]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d4b8:	f023 0304 	bic.w	r3, r3, #4
 800d4bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d016      	beq.n	800d4f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4c8:	f7fa f904 	bl	80076d4 <HAL_GetTick>
 800d4cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d4ce:	e00a      	b.n	800d4e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4d0:	f7fa f900 	bl	80076d4 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d901      	bls.n	800d4e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	e140      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d4e6:	4b46      	ldr	r3, [pc, #280]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4ec:	f003 0302 	and.w	r3, r3, #2
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d0ed      	beq.n	800d4d0 <HAL_RCC_OscConfig+0x388>
 800d4f4:	e015      	b.n	800d522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4f6:	f7fa f8ed 	bl	80076d4 <HAL_GetTick>
 800d4fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d4fc:	e00a      	b.n	800d514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4fe:	f7fa f8e9 	bl	80076d4 <HAL_GetTick>
 800d502:	4602      	mov	r2, r0
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	f241 3288 	movw	r2, #5000	; 0x1388
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d901      	bls.n	800d514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d510:	2303      	movs	r3, #3
 800d512:	e129      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d514:	4b3a      	ldr	r3, [pc, #232]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d51a:	f003 0302 	and.w	r3, r3, #2
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1ed      	bne.n	800d4fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d522:	7ffb      	ldrb	r3, [r7, #31]
 800d524:	2b01      	cmp	r3, #1
 800d526:	d105      	bne.n	800d534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d528:	4b35      	ldr	r3, [pc, #212]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d52c:	4a34      	ldr	r2, [pc, #208]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d52e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f003 0320 	and.w	r3, r3, #32
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d03c      	beq.n	800d5ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d01c      	beq.n	800d582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d548:	4b2d      	ldr	r3, [pc, #180]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d54a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d54e:	4a2c      	ldr	r2, [pc, #176]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d550:	f043 0301 	orr.w	r3, r3, #1
 800d554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d558:	f7fa f8bc 	bl	80076d4 <HAL_GetTick>
 800d55c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d55e:	e008      	b.n	800d572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d560:	f7fa f8b8 	bl	80076d4 <HAL_GetTick>
 800d564:	4602      	mov	r2, r0
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d901      	bls.n	800d572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	e0fa      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d572:	4b23      	ldr	r3, [pc, #140]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d578:	f003 0302 	and.w	r3, r3, #2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d0ef      	beq.n	800d560 <HAL_RCC_OscConfig+0x418>
 800d580:	e01b      	b.n	800d5ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d582:	4b1f      	ldr	r3, [pc, #124]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d588:	4a1d      	ldr	r2, [pc, #116]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d58a:	f023 0301 	bic.w	r3, r3, #1
 800d58e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d592:	f7fa f89f 	bl	80076d4 <HAL_GetTick>
 800d596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d598:	e008      	b.n	800d5ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d59a:	f7fa f89b 	bl	80076d4 <HAL_GetTick>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d901      	bls.n	800d5ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e0dd      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d5ac:	4b14      	ldr	r3, [pc, #80]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d5ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1ef      	bne.n	800d59a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	69db      	ldr	r3, [r3, #28]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f000 80d1 	beq.w	800d766 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d5c4:	4b0e      	ldr	r3, [pc, #56]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f003 030c 	and.w	r3, r3, #12
 800d5cc:	2b0c      	cmp	r3, #12
 800d5ce:	f000 808b 	beq.w	800d6e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d15e      	bne.n	800d698 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5da:	4b09      	ldr	r3, [pc, #36]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a08      	ldr	r2, [pc, #32]	; (800d600 <HAL_RCC_OscConfig+0x4b8>)
 800d5e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d5e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5e6:	f7fa f875 	bl	80076d4 <HAL_GetTick>
 800d5ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d5ec:	e00c      	b.n	800d608 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5ee:	f7fa f871 	bl	80076d4 <HAL_GetTick>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d905      	bls.n	800d608 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	e0b3      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
 800d600:	40021000 	.word	0x40021000
 800d604:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d608:	4b59      	ldr	r3, [pc, #356]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1ec      	bne.n	800d5ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d614:	4b56      	ldr	r3, [pc, #344]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d616:	68da      	ldr	r2, [r3, #12]
 800d618:	4b56      	ldr	r3, [pc, #344]	; (800d774 <HAL_RCC_OscConfig+0x62c>)
 800d61a:	4013      	ands	r3, r2
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	6a11      	ldr	r1, [r2, #32]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d624:	3a01      	subs	r2, #1
 800d626:	0112      	lsls	r2, r2, #4
 800d628:	4311      	orrs	r1, r2
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d62e:	0212      	lsls	r2, r2, #8
 800d630:	4311      	orrs	r1, r2
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d636:	0852      	lsrs	r2, r2, #1
 800d638:	3a01      	subs	r2, #1
 800d63a:	0552      	lsls	r2, r2, #21
 800d63c:	4311      	orrs	r1, r2
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d642:	0852      	lsrs	r2, r2, #1
 800d644:	3a01      	subs	r2, #1
 800d646:	0652      	lsls	r2, r2, #25
 800d648:	4311      	orrs	r1, r2
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d64e:	06d2      	lsls	r2, r2, #27
 800d650:	430a      	orrs	r2, r1
 800d652:	4947      	ldr	r1, [pc, #284]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d654:	4313      	orrs	r3, r2
 800d656:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d658:	4b45      	ldr	r3, [pc, #276]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a44      	ldr	r2, [pc, #272]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d65e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d662:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d664:	4b42      	ldr	r3, [pc, #264]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	4a41      	ldr	r2, [pc, #260]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d66a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d66e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d670:	f7fa f830 	bl	80076d4 <HAL_GetTick>
 800d674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d676:	e008      	b.n	800d68a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d678:	f7fa f82c 	bl	80076d4 <HAL_GetTick>
 800d67c:	4602      	mov	r2, r0
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	2b02      	cmp	r3, #2
 800d684:	d901      	bls.n	800d68a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d686:	2303      	movs	r3, #3
 800d688:	e06e      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d68a:	4b39      	ldr	r3, [pc, #228]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d692:	2b00      	cmp	r3, #0
 800d694:	d0f0      	beq.n	800d678 <HAL_RCC_OscConfig+0x530>
 800d696:	e066      	b.n	800d766 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d698:	4b35      	ldr	r3, [pc, #212]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a34      	ldr	r2, [pc, #208]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d69e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d6a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d6a4:	4b32      	ldr	r3, [pc, #200]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	4a31      	ldr	r2, [pc, #196]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d6aa:	f023 0303 	bic.w	r3, r3, #3
 800d6ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d6b0:	4b2f      	ldr	r3, [pc, #188]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	4a2e      	ldr	r2, [pc, #184]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d6b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d6ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6c0:	f7fa f808 	bl	80076d4 <HAL_GetTick>
 800d6c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d6c6:	e008      	b.n	800d6da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6c8:	f7fa f804 	bl	80076d4 <HAL_GetTick>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d901      	bls.n	800d6da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	e046      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d6da:	4b25      	ldr	r3, [pc, #148]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1f0      	bne.n	800d6c8 <HAL_RCC_OscConfig+0x580>
 800d6e6:	e03e      	b.n	800d766 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	69db      	ldr	r3, [r3, #28]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d101      	bne.n	800d6f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e039      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d6f4:	4b1e      	ldr	r3, [pc, #120]	; (800d770 <HAL_RCC_OscConfig+0x628>)
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	f003 0203 	and.w	r2, r3, #3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6a1b      	ldr	r3, [r3, #32]
 800d704:	429a      	cmp	r2, r3
 800d706:	d12c      	bne.n	800d762 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	3b01      	subs	r3, #1
 800d714:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d716:	429a      	cmp	r2, r3
 800d718:	d123      	bne.n	800d762 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d724:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d726:	429a      	cmp	r2, r3
 800d728:	d11b      	bne.n	800d762 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d734:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d736:	429a      	cmp	r2, r3
 800d738:	d113      	bne.n	800d762 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d744:	085b      	lsrs	r3, r3, #1
 800d746:	3b01      	subs	r3, #1
 800d748:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d109      	bne.n	800d762 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d758:	085b      	lsrs	r3, r3, #1
 800d75a:	3b01      	subs	r3, #1
 800d75c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d75e:	429a      	cmp	r2, r3
 800d760:	d001      	beq.n	800d766 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e000      	b.n	800d768 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3720      	adds	r7, #32
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	40021000 	.word	0x40021000
 800d774:	019f800c 	.word	0x019f800c

0800d778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e11e      	b.n	800d9ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d790:	4b91      	ldr	r3, [pc, #580]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 030f 	and.w	r3, r3, #15
 800d798:	683a      	ldr	r2, [r7, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d910      	bls.n	800d7c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d79e:	4b8e      	ldr	r3, [pc, #568]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f023 020f 	bic.w	r2, r3, #15
 800d7a6:	498c      	ldr	r1, [pc, #560]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7ae:	4b8a      	ldr	r3, [pc, #552]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f003 030f 	and.w	r3, r3, #15
 800d7b6:	683a      	ldr	r2, [r7, #0]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d001      	beq.n	800d7c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	e106      	b.n	800d9ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d073      	beq.n	800d8b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d129      	bne.n	800d828 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d7d4:	4b81      	ldr	r3, [pc, #516]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e0f4      	b.n	800d9ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d7e4:	f000 f99e 	bl	800db24 <RCC_GetSysClockFreqFromPLLSource>
 800d7e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	4a7c      	ldr	r2, [pc, #496]	; (800d9e0 <HAL_RCC_ClockConfig+0x268>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d93f      	bls.n	800d872 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d7f2:	4b7a      	ldr	r3, [pc, #488]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d009      	beq.n	800d812 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d806:	2b00      	cmp	r3, #0
 800d808:	d033      	beq.n	800d872 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d12f      	bne.n	800d872 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d812:	4b72      	ldr	r3, [pc, #456]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d81a:	4a70      	ldr	r2, [pc, #448]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d820:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d822:	2380      	movs	r3, #128	; 0x80
 800d824:	617b      	str	r3, [r7, #20]
 800d826:	e024      	b.n	800d872 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d107      	bne.n	800d840 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d830:	4b6a      	ldr	r3, [pc, #424]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d109      	bne.n	800d850 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e0c6      	b.n	800d9ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d840:	4b66      	ldr	r3, [pc, #408]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d101      	bne.n	800d850 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e0be      	b.n	800d9ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d850:	f000 f8ce 	bl	800d9f0 <HAL_RCC_GetSysClockFreq>
 800d854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	4a61      	ldr	r2, [pc, #388]	; (800d9e0 <HAL_RCC_ClockConfig+0x268>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d909      	bls.n	800d872 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d85e:	4b5f      	ldr	r3, [pc, #380]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d866:	4a5d      	ldr	r2, [pc, #372]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d86c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d86e:	2380      	movs	r3, #128	; 0x80
 800d870:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d872:	4b5a      	ldr	r3, [pc, #360]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f023 0203 	bic.w	r2, r3, #3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	4957      	ldr	r1, [pc, #348]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d880:	4313      	orrs	r3, r2
 800d882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d884:	f7f9 ff26 	bl	80076d4 <HAL_GetTick>
 800d888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d88a:	e00a      	b.n	800d8a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d88c:	f7f9 ff22 	bl	80076d4 <HAL_GetTick>
 800d890:	4602      	mov	r2, r0
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	f241 3288 	movw	r2, #5000	; 0x1388
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d901      	bls.n	800d8a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d89e:	2303      	movs	r3, #3
 800d8a0:	e095      	b.n	800d9ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8a2:	4b4e      	ldr	r3, [pc, #312]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	f003 020c 	and.w	r2, r3, #12
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d1eb      	bne.n	800d88c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f003 0302 	and.w	r3, r3, #2
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d023      	beq.n	800d908 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f003 0304 	and.w	r3, r3, #4
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d005      	beq.n	800d8d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d8cc:	4b43      	ldr	r3, [pc, #268]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	4a42      	ldr	r2, [pc, #264]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d8d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d8d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f003 0308 	and.w	r3, r3, #8
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d007      	beq.n	800d8f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d8e4:	4b3d      	ldr	r3, [pc, #244]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d8ec:	4a3b      	ldr	r2, [pc, #236]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d8ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d8f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d8f4:	4b39      	ldr	r3, [pc, #228]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	4936      	ldr	r1, [pc, #216]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d902:	4313      	orrs	r3, r2
 800d904:	608b      	str	r3, [r1, #8]
 800d906:	e008      	b.n	800d91a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2b80      	cmp	r3, #128	; 0x80
 800d90c:	d105      	bne.n	800d91a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d90e:	4b33      	ldr	r3, [pc, #204]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	4a32      	ldr	r2, [pc, #200]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d918:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d91a:	4b2f      	ldr	r3, [pc, #188]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 030f 	and.w	r3, r3, #15
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	429a      	cmp	r2, r3
 800d926:	d21d      	bcs.n	800d964 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d928:	4b2b      	ldr	r3, [pc, #172]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f023 020f 	bic.w	r2, r3, #15
 800d930:	4929      	ldr	r1, [pc, #164]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	4313      	orrs	r3, r2
 800d936:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d938:	f7f9 fecc 	bl	80076d4 <HAL_GetTick>
 800d93c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d93e:	e00a      	b.n	800d956 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d940:	f7f9 fec8 	bl	80076d4 <HAL_GetTick>
 800d944:	4602      	mov	r2, r0
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d94e:	4293      	cmp	r3, r2
 800d950:	d901      	bls.n	800d956 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d952:	2303      	movs	r3, #3
 800d954:	e03b      	b.n	800d9ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d956:	4b20      	ldr	r3, [pc, #128]	; (800d9d8 <HAL_RCC_ClockConfig+0x260>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f003 030f 	and.w	r3, r3, #15
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	429a      	cmp	r2, r3
 800d962:	d1ed      	bne.n	800d940 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f003 0304 	and.w	r3, r3, #4
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d008      	beq.n	800d982 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d970:	4b1a      	ldr	r3, [pc, #104]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	4917      	ldr	r1, [pc, #92]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d97e:	4313      	orrs	r3, r2
 800d980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f003 0308 	and.w	r3, r3, #8
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d009      	beq.n	800d9a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d98e:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	490f      	ldr	r1, [pc, #60]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d9a2:	f000 f825 	bl	800d9f0 <HAL_RCC_GetSysClockFreq>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <HAL_RCC_ClockConfig+0x264>)
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	091b      	lsrs	r3, r3, #4
 800d9ae:	f003 030f 	and.w	r3, r3, #15
 800d9b2:	490c      	ldr	r1, [pc, #48]	; (800d9e4 <HAL_RCC_ClockConfig+0x26c>)
 800d9b4:	5ccb      	ldrb	r3, [r1, r3]
 800d9b6:	f003 031f 	and.w	r3, r3, #31
 800d9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d9be:	4a0a      	ldr	r2, [pc, #40]	; (800d9e8 <HAL_RCC_ClockConfig+0x270>)
 800d9c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d9c2:	4b0a      	ldr	r3, [pc, #40]	; (800d9ec <HAL_RCC_ClockConfig+0x274>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7f9 fe38 	bl	800763c <HAL_InitTick>
 800d9cc:	4603      	mov	r3, r0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	40022000 	.word	0x40022000
 800d9dc:	40021000 	.word	0x40021000
 800d9e0:	04c4b400 	.word	0x04c4b400
 800d9e4:	08019678 	.word	0x08019678
 800d9e8:	20000000 	.word	0x20000000
 800d9ec:	20000004 	.word	0x20000004

0800d9f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b087      	sub	sp, #28
 800d9f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d9f6:	4b2c      	ldr	r3, [pc, #176]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	f003 030c 	and.w	r3, r3, #12
 800d9fe:	2b04      	cmp	r3, #4
 800da00:	d102      	bne.n	800da08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800da02:	4b2a      	ldr	r3, [pc, #168]	; (800daac <HAL_RCC_GetSysClockFreq+0xbc>)
 800da04:	613b      	str	r3, [r7, #16]
 800da06:	e047      	b.n	800da98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800da08:	4b27      	ldr	r3, [pc, #156]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	f003 030c 	and.w	r3, r3, #12
 800da10:	2b08      	cmp	r3, #8
 800da12:	d102      	bne.n	800da1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800da14:	4b26      	ldr	r3, [pc, #152]	; (800dab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800da16:	613b      	str	r3, [r7, #16]
 800da18:	e03e      	b.n	800da98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800da1a:	4b23      	ldr	r3, [pc, #140]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	f003 030c 	and.w	r3, r3, #12
 800da22:	2b0c      	cmp	r3, #12
 800da24:	d136      	bne.n	800da94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800da26:	4b20      	ldr	r3, [pc, #128]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	f003 0303 	and.w	r3, r3, #3
 800da2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800da30:	4b1d      	ldr	r3, [pc, #116]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	091b      	lsrs	r3, r3, #4
 800da36:	f003 030f 	and.w	r3, r3, #15
 800da3a:	3301      	adds	r3, #1
 800da3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b03      	cmp	r3, #3
 800da42:	d10c      	bne.n	800da5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800da44:	4a1a      	ldr	r2, [pc, #104]	; (800dab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	fbb2 f3f3 	udiv	r3, r2, r3
 800da4c:	4a16      	ldr	r2, [pc, #88]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800da4e:	68d2      	ldr	r2, [r2, #12]
 800da50:	0a12      	lsrs	r2, r2, #8
 800da52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800da56:	fb02 f303 	mul.w	r3, r2, r3
 800da5a:	617b      	str	r3, [r7, #20]
      break;
 800da5c:	e00c      	b.n	800da78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800da5e:	4a13      	ldr	r2, [pc, #76]	; (800daac <HAL_RCC_GetSysClockFreq+0xbc>)
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	fbb2 f3f3 	udiv	r3, r2, r3
 800da66:	4a10      	ldr	r2, [pc, #64]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800da68:	68d2      	ldr	r2, [r2, #12]
 800da6a:	0a12      	lsrs	r2, r2, #8
 800da6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800da70:	fb02 f303 	mul.w	r3, r2, r3
 800da74:	617b      	str	r3, [r7, #20]
      break;
 800da76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800da78:	4b0b      	ldr	r3, [pc, #44]	; (800daa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	0e5b      	lsrs	r3, r3, #25
 800da7e:	f003 0303 	and.w	r3, r3, #3
 800da82:	3301      	adds	r3, #1
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	e001      	b.n	800da98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800da94:	2300      	movs	r3, #0
 800da96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800da98:	693b      	ldr	r3, [r7, #16]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	371c      	adds	r7, #28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	40021000 	.word	0x40021000
 800daac:	00f42400 	.word	0x00f42400
 800dab0:	007a1200 	.word	0x007a1200

0800dab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dab4:	b480      	push	{r7}
 800dab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dab8:	4b03      	ldr	r3, [pc, #12]	; (800dac8 <HAL_RCC_GetHCLKFreq+0x14>)
 800daba:	681b      	ldr	r3, [r3, #0]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	20000000 	.word	0x20000000

0800dacc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800dad0:	f7ff fff0 	bl	800dab4 <HAL_RCC_GetHCLKFreq>
 800dad4:	4602      	mov	r2, r0
 800dad6:	4b06      	ldr	r3, [pc, #24]	; (800daf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	0a1b      	lsrs	r3, r3, #8
 800dadc:	f003 0307 	and.w	r3, r3, #7
 800dae0:	4904      	ldr	r1, [pc, #16]	; (800daf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dae2:	5ccb      	ldrb	r3, [r1, r3]
 800dae4:	f003 031f 	and.w	r3, r3, #31
 800dae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800daec:	4618      	mov	r0, r3
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	40021000 	.word	0x40021000
 800daf4:	08019688 	.word	0x08019688

0800daf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800dafc:	f7ff ffda 	bl	800dab4 <HAL_RCC_GetHCLKFreq>
 800db00:	4602      	mov	r2, r0
 800db02:	4b06      	ldr	r3, [pc, #24]	; (800db1c <HAL_RCC_GetPCLK2Freq+0x24>)
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	0adb      	lsrs	r3, r3, #11
 800db08:	f003 0307 	and.w	r3, r3, #7
 800db0c:	4904      	ldr	r1, [pc, #16]	; (800db20 <HAL_RCC_GetPCLK2Freq+0x28>)
 800db0e:	5ccb      	ldrb	r3, [r1, r3]
 800db10:	f003 031f 	and.w	r3, r3, #31
 800db14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800db18:	4618      	mov	r0, r3
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	40021000 	.word	0x40021000
 800db20:	08019688 	.word	0x08019688

0800db24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800db24:	b480      	push	{r7}
 800db26:	b087      	sub	sp, #28
 800db28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800db2a:	4b1e      	ldr	r3, [pc, #120]	; (800dba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	f003 0303 	and.w	r3, r3, #3
 800db32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800db34:	4b1b      	ldr	r3, [pc, #108]	; (800dba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	091b      	lsrs	r3, r3, #4
 800db3a:	f003 030f 	and.w	r3, r3, #15
 800db3e:	3301      	adds	r3, #1
 800db40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	2b03      	cmp	r3, #3
 800db46:	d10c      	bne.n	800db62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800db48:	4a17      	ldr	r2, [pc, #92]	; (800dba8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db50:	4a14      	ldr	r2, [pc, #80]	; (800dba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800db52:	68d2      	ldr	r2, [r2, #12]
 800db54:	0a12      	lsrs	r2, r2, #8
 800db56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800db5a:	fb02 f303 	mul.w	r3, r2, r3
 800db5e:	617b      	str	r3, [r7, #20]
    break;
 800db60:	e00c      	b.n	800db7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800db62:	4a12      	ldr	r2, [pc, #72]	; (800dbac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	fbb2 f3f3 	udiv	r3, r2, r3
 800db6a:	4a0e      	ldr	r2, [pc, #56]	; (800dba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800db6c:	68d2      	ldr	r2, [r2, #12]
 800db6e:	0a12      	lsrs	r2, r2, #8
 800db70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800db74:	fb02 f303 	mul.w	r3, r2, r3
 800db78:	617b      	str	r3, [r7, #20]
    break;
 800db7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800db7c:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	0e5b      	lsrs	r3, r3, #25
 800db82:	f003 0303 	and.w	r3, r3, #3
 800db86:	3301      	adds	r3, #1
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	fbb2 f3f3 	udiv	r3, r2, r3
 800db94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800db96:	687b      	ldr	r3, [r7, #4]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	371c      	adds	r7, #28
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	40021000 	.word	0x40021000
 800dba8:	007a1200 	.word	0x007a1200
 800dbac:	00f42400 	.word	0x00f42400

0800dbb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dbb8:	2300      	movs	r3, #0
 800dbba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 8098 	beq.w	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dbd2:	4b43      	ldr	r3, [pc, #268]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10d      	bne.n	800dbfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dbde:	4b40      	ldr	r3, [pc, #256]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbe2:	4a3f      	ldr	r2, [pc, #252]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbe8:	6593      	str	r3, [r2, #88]	; 0x58
 800dbea:	4b3d      	ldr	r3, [pc, #244]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbf2:	60bb      	str	r3, [r7, #8]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dbfa:	4b3a      	ldr	r3, [pc, #232]	; (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a39      	ldr	r2, [pc, #228]	; (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dc06:	f7f9 fd65 	bl	80076d4 <HAL_GetTick>
 800dc0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dc0c:	e009      	b.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc0e:	f7f9 fd61 	bl	80076d4 <HAL_GetTick>
 800dc12:	4602      	mov	r2, r0
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d902      	bls.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	74fb      	strb	r3, [r7, #19]
        break;
 800dc20:	e005      	b.n	800dc2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dc22:	4b30      	ldr	r3, [pc, #192]	; (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0ef      	beq.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800dc2e:	7cfb      	ldrb	r3, [r7, #19]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d159      	bne.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dc34:	4b2a      	ldr	r3, [pc, #168]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d01e      	beq.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d019      	beq.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dc50:	4b23      	ldr	r3, [pc, #140]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dc5c:	4b20      	ldr	r3, [pc, #128]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc62:	4a1f      	ldr	r2, [pc, #124]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dc6c:	4b1c      	ldr	r3, [pc, #112]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc72:	4a1b      	ldr	r2, [pc, #108]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dc7c:	4a18      	ldr	r2, [pc, #96]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d016      	beq.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc8e:	f7f9 fd21 	bl	80076d4 <HAL_GetTick>
 800dc92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc94:	e00b      	b.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc96:	f7f9 fd1d 	bl	80076d4 <HAL_GetTick>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d902      	bls.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	74fb      	strb	r3, [r7, #19]
            break;
 800dcac:	e006      	b.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dcae:	4b0c      	ldr	r3, [pc, #48]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dcb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcb4:	f003 0302 	and.w	r3, r3, #2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0ec      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800dcbc:	7cfb      	ldrb	r3, [r7, #19]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10b      	bne.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dcc2:	4b07      	ldr	r3, [pc, #28]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dcc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcd0:	4903      	ldr	r1, [pc, #12]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800dcd8:	e008      	b.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dcda:	7cfb      	ldrb	r3, [r7, #19]
 800dcdc:	74bb      	strb	r3, [r7, #18]
 800dcde:	e005      	b.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800dce0:	40021000 	.word	0x40021000
 800dce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dce8:	7cfb      	ldrb	r3, [r7, #19]
 800dcea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dcec:	7c7b      	ldrb	r3, [r7, #17]
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d105      	bne.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dcf2:	4ba7      	ldr	r3, [pc, #668]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcf6:	4aa6      	ldr	r2, [pc, #664]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dcfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dd0a:	4ba1      	ldr	r3, [pc, #644]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd10:	f023 0203 	bic.w	r2, r3, #3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	499d      	ldr	r1, [pc, #628]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f003 0302 	and.w	r3, r3, #2
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00a      	beq.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dd2c:	4b98      	ldr	r3, [pc, #608]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd32:	f023 020c 	bic.w	r2, r3, #12
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	689b      	ldr	r3, [r3, #8]
 800dd3a:	4995      	ldr	r1, [pc, #596]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f003 0304 	and.w	r3, r3, #4
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00a      	beq.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dd4e:	4b90      	ldr	r3, [pc, #576]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	498c      	ldr	r1, [pc, #560]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f003 0308 	and.w	r3, r3, #8
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00a      	beq.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dd70:	4b87      	ldr	r3, [pc, #540]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	4984      	ldr	r1, [pc, #528]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd80:	4313      	orrs	r3, r2
 800dd82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f003 0310 	and.w	r3, r3, #16
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00a      	beq.n	800dda8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dd92:	4b7f      	ldr	r3, [pc, #508]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	695b      	ldr	r3, [r3, #20]
 800dda0:	497b      	ldr	r1, [pc, #492]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dda2:	4313      	orrs	r3, r2
 800dda4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 0320 	and.w	r3, r3, #32
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00a      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ddb4:	4b76      	ldr	r3, [pc, #472]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	4973      	ldr	r1, [pc, #460]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00a      	beq.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ddd6:	4b6e      	ldr	r3, [pc, #440]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dddc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	69db      	ldr	r3, [r3, #28]
 800dde4:	496a      	ldr	r1, [pc, #424]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dde6:	4313      	orrs	r3, r2
 800dde8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00a      	beq.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ddf8:	4b65      	ldr	r3, [pc, #404]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	4962      	ldr	r1, [pc, #392]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de08:	4313      	orrs	r3, r2
 800de0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00a      	beq.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800de1a:	4b5d      	ldr	r3, [pc, #372]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de28:	4959      	ldr	r1, [pc, #356]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de2a:	4313      	orrs	r3, r2
 800de2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00a      	beq.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800de3c:	4b54      	ldr	r3, [pc, #336]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de42:	f023 0203 	bic.w	r2, r3, #3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de4a:	4951      	ldr	r1, [pc, #324]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de4c:	4313      	orrs	r3, r2
 800de4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00a      	beq.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800de5e:	4b4c      	ldr	r3, [pc, #304]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6c:	4948      	ldr	r1, [pc, #288]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de6e:	4313      	orrs	r3, r2
 800de70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d015      	beq.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800de80:	4b43      	ldr	r3, [pc, #268]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8e:	4940      	ldr	r1, [pc, #256]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de90:	4313      	orrs	r3, r2
 800de92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de9e:	d105      	bne.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dea0:	4b3b      	ldr	r3, [pc, #236]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	4a3a      	ldr	r2, [pc, #232]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800deaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d015      	beq.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800deb8:	4b35      	ldr	r3, [pc, #212]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800deba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800debe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec6:	4932      	ldr	r1, [pc, #200]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dec8:	4313      	orrs	r3, r2
 800deca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ded2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ded6:	d105      	bne.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ded8:	4b2d      	ldr	r3, [pc, #180]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	4a2c      	ldr	r2, [pc, #176]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dee2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800deec:	2b00      	cmp	r3, #0
 800deee:	d015      	beq.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800def0:	4b27      	ldr	r3, [pc, #156]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800def2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800def6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	4924      	ldr	r1, [pc, #144]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df00:	4313      	orrs	r3, r2
 800df02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df0e:	d105      	bne.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df10:	4b1f      	ldr	r3, [pc, #124]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	4a1e      	ldr	r2, [pc, #120]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d015      	beq.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800df28:	4b19      	ldr	r3, [pc, #100]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df36:	4916      	ldr	r1, [pc, #88]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df38:	4313      	orrs	r3, r2
 800df3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df46:	d105      	bne.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df48:	4b11      	ldr	r3, [pc, #68]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	4a10      	ldr	r2, [pc, #64]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d019      	beq.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800df60:	4b0b      	ldr	r3, [pc, #44]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df6e:	4908      	ldr	r1, [pc, #32]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df70:	4313      	orrs	r3, r2
 800df72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df7e:	d109      	bne.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df80:	4b03      	ldr	r3, [pc, #12]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	4a02      	ldr	r2, [pc, #8]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df8a:	60d3      	str	r3, [r2, #12]
 800df8c:	e002      	b.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800df8e:	bf00      	nop
 800df90:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d015      	beq.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800dfa0:	4b29      	ldr	r3, [pc, #164]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dfa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfae:	4926      	ldr	r1, [pc, #152]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfbe:	d105      	bne.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dfc0:	4b21      	ldr	r3, [pc, #132]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	4a20      	ldr	r2, [pc, #128]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dfc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d015      	beq.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800dfd8:	4b1b      	ldr	r3, [pc, #108]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dfda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfde:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfe6:	4918      	ldr	r1, [pc, #96]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dff6:	d105      	bne.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dff8:	4b13      	ldr	r3, [pc, #76]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	4a12      	ldr	r2, [pc, #72]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e002:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d015      	beq.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e010:	4b0d      	ldr	r3, [pc, #52]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e01e:	490a      	ldr	r1, [pc, #40]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e020:	4313      	orrs	r3, r2
 800e022:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e02a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e02e:	d105      	bne.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e030:	4b05      	ldr	r3, [pc, #20]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	4a04      	ldr	r2, [pc, #16]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e03a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e03c:	7cbb      	ldrb	r3, [r7, #18]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	40021000 	.word	0x40021000

0800e04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e049      	b.n	800e0f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d106      	bne.n	800e078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7f8 fe7c 	bl	8006d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2202      	movs	r2, #2
 800e07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3304      	adds	r3, #4
 800e088:	4619      	mov	r1, r3
 800e08a:	4610      	mov	r0, r2
 800e08c:	f000 fbc8 	bl	800e820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b082      	sub	sp, #8
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	e049      	b.n	800e1a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7f8 fea7 	bl	8006e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2202      	movs	r2, #2
 800e12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	3304      	adds	r3, #4
 800e136:	4619      	mov	r1, r3
 800e138:	4610      	mov	r0, r2
 800e13a:	f000 fb71 	bl	800e820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2201      	movs	r2, #1
 800e142:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2201      	movs	r2, #1
 800e14a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2201      	movs	r2, #1
 800e162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2201      	movs	r2, #1
 800e172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2201      	movs	r2, #1
 800e18a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2201      	movs	r2, #1
 800e192:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d109      	bne.n	800e1cc <HAL_TIM_PWM_Start+0x24>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	bf14      	ite	ne
 800e1c4:	2301      	movne	r3, #1
 800e1c6:	2300      	moveq	r3, #0
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	e03c      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2b04      	cmp	r3, #4
 800e1d0:	d109      	bne.n	800e1e6 <HAL_TIM_PWM_Start+0x3e>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	bf14      	ite	ne
 800e1de:	2301      	movne	r3, #1
 800e1e0:	2300      	moveq	r3, #0
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	e02f      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2b08      	cmp	r3, #8
 800e1ea:	d109      	bne.n	800e200 <HAL_TIM_PWM_Start+0x58>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	bf14      	ite	ne
 800e1f8:	2301      	movne	r3, #1
 800e1fa:	2300      	moveq	r3, #0
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	e022      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	2b0c      	cmp	r3, #12
 800e204:	d109      	bne.n	800e21a <HAL_TIM_PWM_Start+0x72>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b01      	cmp	r3, #1
 800e210:	bf14      	ite	ne
 800e212:	2301      	movne	r3, #1
 800e214:	2300      	moveq	r3, #0
 800e216:	b2db      	uxtb	r3, r3
 800e218:	e015      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	2b10      	cmp	r3, #16
 800e21e:	d109      	bne.n	800e234 <HAL_TIM_PWM_Start+0x8c>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b01      	cmp	r3, #1
 800e22a:	bf14      	ite	ne
 800e22c:	2301      	movne	r3, #1
 800e22e:	2300      	moveq	r3, #0
 800e230:	b2db      	uxtb	r3, r3
 800e232:	e008      	b.n	800e246 <HAL_TIM_PWM_Start+0x9e>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	bf14      	ite	ne
 800e240:	2301      	movne	r3, #1
 800e242:	2300      	moveq	r3, #0
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e0a6      	b.n	800e39c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d104      	bne.n	800e25e <HAL_TIM_PWM_Start+0xb6>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2202      	movs	r2, #2
 800e258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e25c:	e023      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b04      	cmp	r3, #4
 800e262:	d104      	bne.n	800e26e <HAL_TIM_PWM_Start+0xc6>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2202      	movs	r2, #2
 800e268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e26c:	e01b      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b08      	cmp	r3, #8
 800e272:	d104      	bne.n	800e27e <HAL_TIM_PWM_Start+0xd6>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e27c:	e013      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b0c      	cmp	r3, #12
 800e282:	d104      	bne.n	800e28e <HAL_TIM_PWM_Start+0xe6>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2202      	movs	r2, #2
 800e288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e28c:	e00b      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	2b10      	cmp	r3, #16
 800e292:	d104      	bne.n	800e29e <HAL_TIM_PWM_Start+0xf6>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2202      	movs	r2, #2
 800e298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e29c:	e003      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xfe>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 ff24 	bl	800f0fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a3a      	ldr	r2, [pc, #232]	; (800e3a4 <HAL_TIM_PWM_Start+0x1fc>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d018      	beq.n	800e2f0 <HAL_TIM_PWM_Start+0x148>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a39      	ldr	r2, [pc, #228]	; (800e3a8 <HAL_TIM_PWM_Start+0x200>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d013      	beq.n	800e2f0 <HAL_TIM_PWM_Start+0x148>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a37      	ldr	r2, [pc, #220]	; (800e3ac <HAL_TIM_PWM_Start+0x204>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d00e      	beq.n	800e2f0 <HAL_TIM_PWM_Start+0x148>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a36      	ldr	r2, [pc, #216]	; (800e3b0 <HAL_TIM_PWM_Start+0x208>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d009      	beq.n	800e2f0 <HAL_TIM_PWM_Start+0x148>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a34      	ldr	r2, [pc, #208]	; (800e3b4 <HAL_TIM_PWM_Start+0x20c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d004      	beq.n	800e2f0 <HAL_TIM_PWM_Start+0x148>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4a33      	ldr	r2, [pc, #204]	; (800e3b8 <HAL_TIM_PWM_Start+0x210>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d101      	bne.n	800e2f4 <HAL_TIM_PWM_Start+0x14c>
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e000      	b.n	800e2f6 <HAL_TIM_PWM_Start+0x14e>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d007      	beq.n	800e30a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e308:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a25      	ldr	r2, [pc, #148]	; (800e3a4 <HAL_TIM_PWM_Start+0x1fc>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d022      	beq.n	800e35a <HAL_TIM_PWM_Start+0x1b2>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e31c:	d01d      	beq.n	800e35a <HAL_TIM_PWM_Start+0x1b2>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a26      	ldr	r2, [pc, #152]	; (800e3bc <HAL_TIM_PWM_Start+0x214>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d018      	beq.n	800e35a <HAL_TIM_PWM_Start+0x1b2>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a24      	ldr	r2, [pc, #144]	; (800e3c0 <HAL_TIM_PWM_Start+0x218>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d013      	beq.n	800e35a <HAL_TIM_PWM_Start+0x1b2>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a23      	ldr	r2, [pc, #140]	; (800e3c4 <HAL_TIM_PWM_Start+0x21c>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d00e      	beq.n	800e35a <HAL_TIM_PWM_Start+0x1b2>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a19      	ldr	r2, [pc, #100]	; (800e3a8 <HAL_TIM_PWM_Start+0x200>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d009      	beq.n	800e35a <HAL_TIM_PWM_Start+0x1b2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a18      	ldr	r2, [pc, #96]	; (800e3ac <HAL_TIM_PWM_Start+0x204>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d004      	beq.n	800e35a <HAL_TIM_PWM_Start+0x1b2>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a18      	ldr	r2, [pc, #96]	; (800e3b8 <HAL_TIM_PWM_Start+0x210>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d115      	bne.n	800e386 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689a      	ldr	r2, [r3, #8]
 800e360:	4b19      	ldr	r3, [pc, #100]	; (800e3c8 <HAL_TIM_PWM_Start+0x220>)
 800e362:	4013      	ands	r3, r2
 800e364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2b06      	cmp	r3, #6
 800e36a:	d015      	beq.n	800e398 <HAL_TIM_PWM_Start+0x1f0>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e372:	d011      	beq.n	800e398 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f042 0201 	orr.w	r2, r2, #1
 800e382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e384:	e008      	b.n	800e398 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f042 0201 	orr.w	r2, r2, #1
 800e394:	601a      	str	r2, [r3, #0]
 800e396:	e000      	b.n	800e39a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	40012c00 	.word	0x40012c00
 800e3a8:	40013400 	.word	0x40013400
 800e3ac:	40014000 	.word	0x40014000
 800e3b0:	40014400 	.word	0x40014400
 800e3b4:	40014800 	.word	0x40014800
 800e3b8:	40015000 	.word	0x40015000
 800e3bc:	40000400 	.word	0x40000400
 800e3c0:	40000800 	.word	0x40000800
 800e3c4:	40000c00 	.word	0x40000c00
 800e3c8:	00010007 	.word	0x00010007

0800e3cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d101      	bne.n	800e3ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	e0ff      	b.n	800e5ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b14      	cmp	r3, #20
 800e3f6:	f200 80f0 	bhi.w	800e5da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e455 	.word	0x0800e455
 800e404:	0800e5db 	.word	0x0800e5db
 800e408:	0800e5db 	.word	0x0800e5db
 800e40c:	0800e5db 	.word	0x0800e5db
 800e410:	0800e495 	.word	0x0800e495
 800e414:	0800e5db 	.word	0x0800e5db
 800e418:	0800e5db 	.word	0x0800e5db
 800e41c:	0800e5db 	.word	0x0800e5db
 800e420:	0800e4d7 	.word	0x0800e4d7
 800e424:	0800e5db 	.word	0x0800e5db
 800e428:	0800e5db 	.word	0x0800e5db
 800e42c:	0800e5db 	.word	0x0800e5db
 800e430:	0800e517 	.word	0x0800e517
 800e434:	0800e5db 	.word	0x0800e5db
 800e438:	0800e5db 	.word	0x0800e5db
 800e43c:	0800e5db 	.word	0x0800e5db
 800e440:	0800e559 	.word	0x0800e559
 800e444:	0800e5db 	.word	0x0800e5db
 800e448:	0800e5db 	.word	0x0800e5db
 800e44c:	0800e5db 	.word	0x0800e5db
 800e450:	0800e599 	.word	0x0800e599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fa88 	bl	800e970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	699a      	ldr	r2, [r3, #24]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f042 0208 	orr.w	r2, r2, #8
 800e46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	699a      	ldr	r2, [r3, #24]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f022 0204 	bic.w	r2, r2, #4
 800e47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6999      	ldr	r1, [r3, #24]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	691a      	ldr	r2, [r3, #16]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	430a      	orrs	r2, r1
 800e490:	619a      	str	r2, [r3, #24]
      break;
 800e492:	e0a5      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68b9      	ldr	r1, [r7, #8]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f000 fb02 	bl	800eaa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	699a      	ldr	r2, [r3, #24]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6999      	ldr	r1, [r3, #24]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	691b      	ldr	r3, [r3, #16]
 800e4ca:	021a      	lsls	r2, r3, #8
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	430a      	orrs	r2, r1
 800e4d2:	619a      	str	r2, [r3, #24]
      break;
 800e4d4:	e084      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fb75 	bl	800ebcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	69da      	ldr	r2, [r3, #28]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f042 0208 	orr.w	r2, r2, #8
 800e4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	69da      	ldr	r2, [r3, #28]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f022 0204 	bic.w	r2, r2, #4
 800e500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	69d9      	ldr	r1, [r3, #28]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	691a      	ldr	r2, [r3, #16]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	61da      	str	r2, [r3, #28]
      break;
 800e514:	e064      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f000 fbe7 	bl	800ecf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	69da      	ldr	r2, [r3, #28]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	69da      	ldr	r2, [r3, #28]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	69d9      	ldr	r1, [r3, #28]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	691b      	ldr	r3, [r3, #16]
 800e54c:	021a      	lsls	r2, r3, #8
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	430a      	orrs	r2, r1
 800e554:	61da      	str	r2, [r3, #28]
      break;
 800e556:	e043      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68b9      	ldr	r1, [r7, #8]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 fc5a 	bl	800ee18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f042 0208 	orr.w	r2, r2, #8
 800e572:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 0204 	bic.w	r2, r2, #4
 800e582:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	691a      	ldr	r2, [r3, #16]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	430a      	orrs	r2, r1
 800e594:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e596:	e023      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68b9      	ldr	r1, [r7, #8]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 fca4 	bl	800eeec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	021a      	lsls	r2, r3, #8
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	430a      	orrs	r2, r1
 800e5d6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e5d8:	e002      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800e5de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3718      	adds	r7, #24
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop

0800e5f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5fe:	2300      	movs	r3, #0
 800e600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d101      	bne.n	800e610 <HAL_TIM_ConfigClockSource+0x1c>
 800e60c:	2302      	movs	r3, #2
 800e60e:	e0f6      	b.n	800e7fe <HAL_TIM_ConfigClockSource+0x20a>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2201      	movs	r2, #1
 800e614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2202      	movs	r2, #2
 800e61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e62e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e63a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a6f      	ldr	r2, [pc, #444]	; (800e808 <HAL_TIM_ConfigClockSource+0x214>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	f000 80c1 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e650:	4a6d      	ldr	r2, [pc, #436]	; (800e808 <HAL_TIM_ConfigClockSource+0x214>)
 800e652:	4293      	cmp	r3, r2
 800e654:	f200 80c6 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e658:	4a6c      	ldr	r2, [pc, #432]	; (800e80c <HAL_TIM_ConfigClockSource+0x218>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	f000 80b9 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e660:	4a6a      	ldr	r2, [pc, #424]	; (800e80c <HAL_TIM_ConfigClockSource+0x218>)
 800e662:	4293      	cmp	r3, r2
 800e664:	f200 80be 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e668:	4a69      	ldr	r2, [pc, #420]	; (800e810 <HAL_TIM_ConfigClockSource+0x21c>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	f000 80b1 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e670:	4a67      	ldr	r2, [pc, #412]	; (800e810 <HAL_TIM_ConfigClockSource+0x21c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	f200 80b6 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e678:	4a66      	ldr	r2, [pc, #408]	; (800e814 <HAL_TIM_ConfigClockSource+0x220>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	f000 80a9 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e680:	4a64      	ldr	r2, [pc, #400]	; (800e814 <HAL_TIM_ConfigClockSource+0x220>)
 800e682:	4293      	cmp	r3, r2
 800e684:	f200 80ae 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e688:	4a63      	ldr	r2, [pc, #396]	; (800e818 <HAL_TIM_ConfigClockSource+0x224>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	f000 80a1 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e690:	4a61      	ldr	r2, [pc, #388]	; (800e818 <HAL_TIM_ConfigClockSource+0x224>)
 800e692:	4293      	cmp	r3, r2
 800e694:	f200 80a6 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e698:	4a60      	ldr	r2, [pc, #384]	; (800e81c <HAL_TIM_ConfigClockSource+0x228>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	f000 8099 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e6a0:	4a5e      	ldr	r2, [pc, #376]	; (800e81c <HAL_TIM_ConfigClockSource+0x228>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	f200 809e 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e6ac:	f000 8091 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e6b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e6b4:	f200 8096 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6bc:	f000 8089 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e6c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6c4:	f200 808e 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6cc:	d03e      	beq.n	800e74c <HAL_TIM_ConfigClockSource+0x158>
 800e6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6d2:	f200 8087 	bhi.w	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6da:	f000 8086 	beq.w	800e7ea <HAL_TIM_ConfigClockSource+0x1f6>
 800e6de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6e2:	d87f      	bhi.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6e4:	2b70      	cmp	r3, #112	; 0x70
 800e6e6:	d01a      	beq.n	800e71e <HAL_TIM_ConfigClockSource+0x12a>
 800e6e8:	2b70      	cmp	r3, #112	; 0x70
 800e6ea:	d87b      	bhi.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6ec:	2b60      	cmp	r3, #96	; 0x60
 800e6ee:	d050      	beq.n	800e792 <HAL_TIM_ConfigClockSource+0x19e>
 800e6f0:	2b60      	cmp	r3, #96	; 0x60
 800e6f2:	d877      	bhi.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6f4:	2b50      	cmp	r3, #80	; 0x50
 800e6f6:	d03c      	beq.n	800e772 <HAL_TIM_ConfigClockSource+0x17e>
 800e6f8:	2b50      	cmp	r3, #80	; 0x50
 800e6fa:	d873      	bhi.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e6fc:	2b40      	cmp	r3, #64	; 0x40
 800e6fe:	d058      	beq.n	800e7b2 <HAL_TIM_ConfigClockSource+0x1be>
 800e700:	2b40      	cmp	r3, #64	; 0x40
 800e702:	d86f      	bhi.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e704:	2b30      	cmp	r3, #48	; 0x30
 800e706:	d064      	beq.n	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e708:	2b30      	cmp	r3, #48	; 0x30
 800e70a:	d86b      	bhi.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e70c:	2b20      	cmp	r3, #32
 800e70e:	d060      	beq.n	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e710:	2b20      	cmp	r3, #32
 800e712:	d867      	bhi.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e714:	2b00      	cmp	r3, #0
 800e716:	d05c      	beq.n	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e718:	2b10      	cmp	r3, #16
 800e71a:	d05a      	beq.n	800e7d2 <HAL_TIM_ConfigClockSource+0x1de>
 800e71c:	e062      	b.n	800e7e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6818      	ldr	r0, [r3, #0]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	6899      	ldr	r1, [r3, #8]
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	f000 fcc5 	bl	800f0bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	609a      	str	r2, [r3, #8]
      break;
 800e74a:	e04f      	b.n	800e7ec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	6899      	ldr	r1, [r3, #8]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	f000 fcae 	bl	800f0bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	689a      	ldr	r2, [r3, #8]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e76e:	609a      	str	r2, [r3, #8]
      break;
 800e770:	e03c      	b.n	800e7ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6818      	ldr	r0, [r3, #0]
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	6859      	ldr	r1, [r3, #4]
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	461a      	mov	r2, r3
 800e780:	f000 fc20 	bl	800efc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2150      	movs	r1, #80	; 0x50
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 fc79 	bl	800f082 <TIM_ITRx_SetConfig>
      break;
 800e790:	e02c      	b.n	800e7ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6818      	ldr	r0, [r3, #0]
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	6859      	ldr	r1, [r3, #4]
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	f000 fc3f 	bl	800f022 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2160      	movs	r1, #96	; 0x60
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f000 fc69 	bl	800f082 <TIM_ITRx_SetConfig>
      break;
 800e7b0:	e01c      	b.n	800e7ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6818      	ldr	r0, [r3, #0]
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	6859      	ldr	r1, [r3, #4]
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	f000 fc00 	bl	800efc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2140      	movs	r1, #64	; 0x40
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f000 fc59 	bl	800f082 <TIM_ITRx_SetConfig>
      break;
 800e7d0:	e00c      	b.n	800e7ec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4619      	mov	r1, r3
 800e7dc:	4610      	mov	r0, r2
 800e7de:	f000 fc50 	bl	800f082 <TIM_ITRx_SetConfig>
      break;
 800e7e2:	e003      	b.n	800e7ec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7e8:	e000      	b.n	800e7ec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e7ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	00100070 	.word	0x00100070
 800e80c:	00100060 	.word	0x00100060
 800e810:	00100050 	.word	0x00100050
 800e814:	00100040 	.word	0x00100040
 800e818:	00100030 	.word	0x00100030
 800e81c:	00100020 	.word	0x00100020

0800e820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4a46      	ldr	r2, [pc, #280]	; (800e94c <TIM_Base_SetConfig+0x12c>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d017      	beq.n	800e868 <TIM_Base_SetConfig+0x48>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e83e:	d013      	beq.n	800e868 <TIM_Base_SetConfig+0x48>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a43      	ldr	r2, [pc, #268]	; (800e950 <TIM_Base_SetConfig+0x130>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d00f      	beq.n	800e868 <TIM_Base_SetConfig+0x48>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4a42      	ldr	r2, [pc, #264]	; (800e954 <TIM_Base_SetConfig+0x134>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d00b      	beq.n	800e868 <TIM_Base_SetConfig+0x48>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a41      	ldr	r2, [pc, #260]	; (800e958 <TIM_Base_SetConfig+0x138>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d007      	beq.n	800e868 <TIM_Base_SetConfig+0x48>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a40      	ldr	r2, [pc, #256]	; (800e95c <TIM_Base_SetConfig+0x13c>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d003      	beq.n	800e868 <TIM_Base_SetConfig+0x48>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a3f      	ldr	r2, [pc, #252]	; (800e960 <TIM_Base_SetConfig+0x140>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d108      	bne.n	800e87a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e86e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	4313      	orrs	r3, r2
 800e878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a33      	ldr	r2, [pc, #204]	; (800e94c <TIM_Base_SetConfig+0x12c>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d023      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e888:	d01f      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a30      	ldr	r2, [pc, #192]	; (800e950 <TIM_Base_SetConfig+0x130>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d01b      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a2f      	ldr	r2, [pc, #188]	; (800e954 <TIM_Base_SetConfig+0x134>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d017      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a2e      	ldr	r2, [pc, #184]	; (800e958 <TIM_Base_SetConfig+0x138>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d013      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a2d      	ldr	r2, [pc, #180]	; (800e95c <TIM_Base_SetConfig+0x13c>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d00f      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a2d      	ldr	r2, [pc, #180]	; (800e964 <TIM_Base_SetConfig+0x144>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d00b      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a2c      	ldr	r2, [pc, #176]	; (800e968 <TIM_Base_SetConfig+0x148>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d007      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4a2b      	ldr	r2, [pc, #172]	; (800e96c <TIM_Base_SetConfig+0x14c>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d003      	beq.n	800e8ca <TIM_Base_SetConfig+0xaa>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4a26      	ldr	r2, [pc, #152]	; (800e960 <TIM_Base_SetConfig+0x140>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d108      	bne.n	800e8dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	689a      	ldr	r2, [r3, #8]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a12      	ldr	r2, [pc, #72]	; (800e94c <TIM_Base_SetConfig+0x12c>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d013      	beq.n	800e930 <TIM_Base_SetConfig+0x110>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a14      	ldr	r2, [pc, #80]	; (800e95c <TIM_Base_SetConfig+0x13c>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d00f      	beq.n	800e930 <TIM_Base_SetConfig+0x110>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a14      	ldr	r2, [pc, #80]	; (800e964 <TIM_Base_SetConfig+0x144>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d00b      	beq.n	800e930 <TIM_Base_SetConfig+0x110>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a13      	ldr	r2, [pc, #76]	; (800e968 <TIM_Base_SetConfig+0x148>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d007      	beq.n	800e930 <TIM_Base_SetConfig+0x110>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a12      	ldr	r2, [pc, #72]	; (800e96c <TIM_Base_SetConfig+0x14c>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d003      	beq.n	800e930 <TIM_Base_SetConfig+0x110>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a0d      	ldr	r2, [pc, #52]	; (800e960 <TIM_Base_SetConfig+0x140>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d103      	bne.n	800e938 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	691a      	ldr	r2, [r3, #16]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	615a      	str	r2, [r3, #20]
}
 800e93e:	bf00      	nop
 800e940:	3714      	adds	r7, #20
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	40012c00 	.word	0x40012c00
 800e950:	40000400 	.word	0x40000400
 800e954:	40000800 	.word	0x40000800
 800e958:	40000c00 	.word	0x40000c00
 800e95c:	40013400 	.word	0x40013400
 800e960:	40015000 	.word	0x40015000
 800e964:	40014000 	.word	0x40014000
 800e968:	40014400 	.word	0x40014400
 800e96c:	40014800 	.word	0x40014800

0800e970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e970:	b480      	push	{r7}
 800e972:	b087      	sub	sp, #28
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	f023 0201 	bic.w	r2, r3, #1
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f023 0303 	bic.w	r3, r3, #3
 800e9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	f023 0302 	bic.w	r3, r3, #2
 800e9bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a30      	ldr	r2, [pc, #192]	; (800ea8c <TIM_OC1_SetConfig+0x11c>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d013      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x88>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a2f      	ldr	r2, [pc, #188]	; (800ea90 <TIM_OC1_SetConfig+0x120>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d00f      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x88>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a2e      	ldr	r2, [pc, #184]	; (800ea94 <TIM_OC1_SetConfig+0x124>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00b      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x88>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a2d      	ldr	r2, [pc, #180]	; (800ea98 <TIM_OC1_SetConfig+0x128>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d007      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x88>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a2c      	ldr	r2, [pc, #176]	; (800ea9c <TIM_OC1_SetConfig+0x12c>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d003      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x88>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	4a2b      	ldr	r2, [pc, #172]	; (800eaa0 <TIM_OC1_SetConfig+0x130>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d10c      	bne.n	800ea12 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	f023 0308 	bic.w	r3, r3, #8
 800e9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	697a      	ldr	r2, [r7, #20]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	f023 0304 	bic.w	r3, r3, #4
 800ea10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4a1d      	ldr	r2, [pc, #116]	; (800ea8c <TIM_OC1_SetConfig+0x11c>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d013      	beq.n	800ea42 <TIM_OC1_SetConfig+0xd2>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a1c      	ldr	r2, [pc, #112]	; (800ea90 <TIM_OC1_SetConfig+0x120>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d00f      	beq.n	800ea42 <TIM_OC1_SetConfig+0xd2>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a1b      	ldr	r2, [pc, #108]	; (800ea94 <TIM_OC1_SetConfig+0x124>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d00b      	beq.n	800ea42 <TIM_OC1_SetConfig+0xd2>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a1a      	ldr	r2, [pc, #104]	; (800ea98 <TIM_OC1_SetConfig+0x128>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d007      	beq.n	800ea42 <TIM_OC1_SetConfig+0xd2>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4a19      	ldr	r2, [pc, #100]	; (800ea9c <TIM_OC1_SetConfig+0x12c>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d003      	beq.n	800ea42 <TIM_OC1_SetConfig+0xd2>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	4a18      	ldr	r2, [pc, #96]	; (800eaa0 <TIM_OC1_SetConfig+0x130>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d111      	bne.n	800ea66 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	693a      	ldr	r2, [r7, #16]
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	693a      	ldr	r2, [r7, #16]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	693a      	ldr	r2, [r7, #16]
 800ea6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	697a      	ldr	r2, [r7, #20]
 800ea7e:	621a      	str	r2, [r3, #32]
}
 800ea80:	bf00      	nop
 800ea82:	371c      	adds	r7, #28
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	40012c00 	.word	0x40012c00
 800ea90:	40013400 	.word	0x40013400
 800ea94:	40014000 	.word	0x40014000
 800ea98:	40014400 	.word	0x40014400
 800ea9c:	40014800 	.word	0x40014800
 800eaa0:	40015000 	.word	0x40015000

0800eaa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b087      	sub	sp, #28
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a1b      	ldr	r3, [r3, #32]
 800eab2:	f023 0210 	bic.w	r2, r3, #16
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6a1b      	ldr	r3, [r3, #32]
 800eabe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	699b      	ldr	r3, [r3, #24]
 800eaca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ead2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ead6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	021b      	lsls	r3, r3, #8
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	f023 0320 	bic.w	r3, r3, #32
 800eaf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	011b      	lsls	r3, r3, #4
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	4313      	orrs	r3, r2
 800eafe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a2c      	ldr	r2, [pc, #176]	; (800ebb4 <TIM_OC2_SetConfig+0x110>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d007      	beq.n	800eb18 <TIM_OC2_SetConfig+0x74>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4a2b      	ldr	r2, [pc, #172]	; (800ebb8 <TIM_OC2_SetConfig+0x114>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d003      	beq.n	800eb18 <TIM_OC2_SetConfig+0x74>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a2a      	ldr	r2, [pc, #168]	; (800ebbc <TIM_OC2_SetConfig+0x118>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d10d      	bne.n	800eb34 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	011b      	lsls	r3, r3, #4
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a1f      	ldr	r2, [pc, #124]	; (800ebb4 <TIM_OC2_SetConfig+0x110>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d013      	beq.n	800eb64 <TIM_OC2_SetConfig+0xc0>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a1e      	ldr	r2, [pc, #120]	; (800ebb8 <TIM_OC2_SetConfig+0x114>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d00f      	beq.n	800eb64 <TIM_OC2_SetConfig+0xc0>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a1e      	ldr	r2, [pc, #120]	; (800ebc0 <TIM_OC2_SetConfig+0x11c>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d00b      	beq.n	800eb64 <TIM_OC2_SetConfig+0xc0>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a1d      	ldr	r2, [pc, #116]	; (800ebc4 <TIM_OC2_SetConfig+0x120>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d007      	beq.n	800eb64 <TIM_OC2_SetConfig+0xc0>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a1c      	ldr	r2, [pc, #112]	; (800ebc8 <TIM_OC2_SetConfig+0x124>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d003      	beq.n	800eb64 <TIM_OC2_SetConfig+0xc0>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a17      	ldr	r2, [pc, #92]	; (800ebbc <TIM_OC2_SetConfig+0x118>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d113      	bne.n	800eb8c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	695b      	ldr	r3, [r3, #20]
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	699b      	ldr	r3, [r3, #24]
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	693a      	ldr	r2, [r7, #16]
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	621a      	str	r2, [r3, #32]
}
 800eba6:	bf00      	nop
 800eba8:	371c      	adds	r7, #28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	40012c00 	.word	0x40012c00
 800ebb8:	40013400 	.word	0x40013400
 800ebbc:	40015000 	.word	0x40015000
 800ebc0:	40014000 	.word	0x40014000
 800ebc4:	40014400 	.word	0x40014400
 800ebc8:	40014800 	.word	0x40014800

0800ebcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b087      	sub	sp, #28
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ebfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f023 0303 	bic.w	r3, r3, #3
 800ec06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	021b      	lsls	r3, r3, #8
 800ec20:	697a      	ldr	r2, [r7, #20]
 800ec22:	4313      	orrs	r3, r2
 800ec24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4a2b      	ldr	r2, [pc, #172]	; (800ecd8 <TIM_OC3_SetConfig+0x10c>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d007      	beq.n	800ec3e <TIM_OC3_SetConfig+0x72>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	4a2a      	ldr	r2, [pc, #168]	; (800ecdc <TIM_OC3_SetConfig+0x110>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d003      	beq.n	800ec3e <TIM_OC3_SetConfig+0x72>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4a29      	ldr	r2, [pc, #164]	; (800ece0 <TIM_OC3_SetConfig+0x114>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d10d      	bne.n	800ec5a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	021b      	lsls	r3, r3, #8
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4a1e      	ldr	r2, [pc, #120]	; (800ecd8 <TIM_OC3_SetConfig+0x10c>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d013      	beq.n	800ec8a <TIM_OC3_SetConfig+0xbe>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4a1d      	ldr	r2, [pc, #116]	; (800ecdc <TIM_OC3_SetConfig+0x110>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d00f      	beq.n	800ec8a <TIM_OC3_SetConfig+0xbe>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4a1d      	ldr	r2, [pc, #116]	; (800ece4 <TIM_OC3_SetConfig+0x118>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d00b      	beq.n	800ec8a <TIM_OC3_SetConfig+0xbe>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4a1c      	ldr	r2, [pc, #112]	; (800ece8 <TIM_OC3_SetConfig+0x11c>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d007      	beq.n	800ec8a <TIM_OC3_SetConfig+0xbe>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4a1b      	ldr	r2, [pc, #108]	; (800ecec <TIM_OC3_SetConfig+0x120>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d003      	beq.n	800ec8a <TIM_OC3_SetConfig+0xbe>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a16      	ldr	r2, [pc, #88]	; (800ece0 <TIM_OC3_SetConfig+0x114>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d113      	bne.n	800ecb2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	695b      	ldr	r3, [r3, #20]
 800ec9e:	011b      	lsls	r3, r3, #4
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	699b      	ldr	r3, [r3, #24]
 800ecaa:	011b      	lsls	r3, r3, #4
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68fa      	ldr	r2, [r7, #12]
 800ecbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	621a      	str	r2, [r3, #32]
}
 800eccc:	bf00      	nop
 800ecce:	371c      	adds	r7, #28
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	40012c00 	.word	0x40012c00
 800ecdc:	40013400 	.word	0x40013400
 800ece0:	40015000 	.word	0x40015000
 800ece4:	40014000 	.word	0x40014000
 800ece8:	40014400 	.word	0x40014400
 800ecec:	40014800 	.word	0x40014800

0800ecf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b087      	sub	sp, #28
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a1b      	ldr	r3, [r3, #32]
 800ecfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	69db      	ldr	r3, [r3, #28]
 800ed16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	021b      	lsls	r3, r3, #8
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	031b      	lsls	r3, r3, #12
 800ed46:	697a      	ldr	r2, [r7, #20]
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4a2c      	ldr	r2, [pc, #176]	; (800ee00 <TIM_OC4_SetConfig+0x110>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d007      	beq.n	800ed64 <TIM_OC4_SetConfig+0x74>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a2b      	ldr	r2, [pc, #172]	; (800ee04 <TIM_OC4_SetConfig+0x114>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d003      	beq.n	800ed64 <TIM_OC4_SetConfig+0x74>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4a2a      	ldr	r2, [pc, #168]	; (800ee08 <TIM_OC4_SetConfig+0x118>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d10d      	bne.n	800ed80 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ed6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	031b      	lsls	r3, r3, #12
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a1f      	ldr	r2, [pc, #124]	; (800ee00 <TIM_OC4_SetConfig+0x110>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d013      	beq.n	800edb0 <TIM_OC4_SetConfig+0xc0>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a1e      	ldr	r2, [pc, #120]	; (800ee04 <TIM_OC4_SetConfig+0x114>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d00f      	beq.n	800edb0 <TIM_OC4_SetConfig+0xc0>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a1e      	ldr	r2, [pc, #120]	; (800ee0c <TIM_OC4_SetConfig+0x11c>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d00b      	beq.n	800edb0 <TIM_OC4_SetConfig+0xc0>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a1d      	ldr	r2, [pc, #116]	; (800ee10 <TIM_OC4_SetConfig+0x120>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d007      	beq.n	800edb0 <TIM_OC4_SetConfig+0xc0>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a1c      	ldr	r2, [pc, #112]	; (800ee14 <TIM_OC4_SetConfig+0x124>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d003      	beq.n	800edb0 <TIM_OC4_SetConfig+0xc0>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a17      	ldr	r2, [pc, #92]	; (800ee08 <TIM_OC4_SetConfig+0x118>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d113      	bne.n	800edd8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800edb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800edbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	695b      	ldr	r3, [r3, #20]
 800edc4:	019b      	lsls	r3, r3, #6
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	4313      	orrs	r3, r2
 800edca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	699b      	ldr	r3, [r3, #24]
 800edd0:	019b      	lsls	r3, r3, #6
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	685a      	ldr	r2, [r3, #4]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	621a      	str	r2, [r3, #32]
}
 800edf2:	bf00      	nop
 800edf4:	371c      	adds	r7, #28
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	40012c00 	.word	0x40012c00
 800ee04:	40013400 	.word	0x40013400
 800ee08:	40015000 	.word	0x40015000
 800ee0c:	40014000 	.word	0x40014000
 800ee10:	40014400 	.word	0x40014400
 800ee14:	40014800 	.word	0x40014800

0800ee18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b087      	sub	sp, #28
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a1b      	ldr	r3, [r3, #32]
 800ee32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	4313      	orrs	r3, r2
 800ee54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ee5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	689b      	ldr	r3, [r3, #8]
 800ee62:	041b      	lsls	r3, r3, #16
 800ee64:	693a      	ldr	r2, [r7, #16]
 800ee66:	4313      	orrs	r3, r2
 800ee68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4a19      	ldr	r2, [pc, #100]	; (800eed4 <TIM_OC5_SetConfig+0xbc>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d013      	beq.n	800ee9a <TIM_OC5_SetConfig+0x82>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4a18      	ldr	r2, [pc, #96]	; (800eed8 <TIM_OC5_SetConfig+0xc0>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d00f      	beq.n	800ee9a <TIM_OC5_SetConfig+0x82>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a17      	ldr	r2, [pc, #92]	; (800eedc <TIM_OC5_SetConfig+0xc4>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d00b      	beq.n	800ee9a <TIM_OC5_SetConfig+0x82>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4a16      	ldr	r2, [pc, #88]	; (800eee0 <TIM_OC5_SetConfig+0xc8>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d007      	beq.n	800ee9a <TIM_OC5_SetConfig+0x82>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4a15      	ldr	r2, [pc, #84]	; (800eee4 <TIM_OC5_SetConfig+0xcc>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d003      	beq.n	800ee9a <TIM_OC5_SetConfig+0x82>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4a14      	ldr	r2, [pc, #80]	; (800eee8 <TIM_OC5_SetConfig+0xd0>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d109      	bne.n	800eeae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	695b      	ldr	r3, [r3, #20]
 800eea6:	021b      	lsls	r3, r3, #8
 800eea8:	697a      	ldr	r2, [r7, #20]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	697a      	ldr	r2, [r7, #20]
 800eeb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	621a      	str	r2, [r3, #32]
}
 800eec8:	bf00      	nop
 800eeca:	371c      	adds	r7, #28
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	40012c00 	.word	0x40012c00
 800eed8:	40013400 	.word	0x40013400
 800eedc:	40014000 	.word	0x40014000
 800eee0:	40014400 	.word	0x40014400
 800eee4:	40014800 	.word	0x40014800
 800eee8:	40015000 	.word	0x40015000

0800eeec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b087      	sub	sp, #28
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a1b      	ldr	r3, [r3, #32]
 800ef06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ef1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	021b      	lsls	r3, r3, #8
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ef32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	051b      	lsls	r3, r3, #20
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a1a      	ldr	r2, [pc, #104]	; (800efac <TIM_OC6_SetConfig+0xc0>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d013      	beq.n	800ef70 <TIM_OC6_SetConfig+0x84>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a19      	ldr	r2, [pc, #100]	; (800efb0 <TIM_OC6_SetConfig+0xc4>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d00f      	beq.n	800ef70 <TIM_OC6_SetConfig+0x84>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a18      	ldr	r2, [pc, #96]	; (800efb4 <TIM_OC6_SetConfig+0xc8>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d00b      	beq.n	800ef70 <TIM_OC6_SetConfig+0x84>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a17      	ldr	r2, [pc, #92]	; (800efb8 <TIM_OC6_SetConfig+0xcc>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d007      	beq.n	800ef70 <TIM_OC6_SetConfig+0x84>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a16      	ldr	r2, [pc, #88]	; (800efbc <TIM_OC6_SetConfig+0xd0>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d003      	beq.n	800ef70 <TIM_OC6_SetConfig+0x84>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a15      	ldr	r2, [pc, #84]	; (800efc0 <TIM_OC6_SetConfig+0xd4>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d109      	bne.n	800ef84 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	695b      	ldr	r3, [r3, #20]
 800ef7c:	029b      	lsls	r3, r3, #10
 800ef7e:	697a      	ldr	r2, [r7, #20]
 800ef80:	4313      	orrs	r3, r2
 800ef82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	693a      	ldr	r2, [r7, #16]
 800ef9c:	621a      	str	r2, [r3, #32]
}
 800ef9e:	bf00      	nop
 800efa0:	371c      	adds	r7, #28
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	40012c00 	.word	0x40012c00
 800efb0:	40013400 	.word	0x40013400
 800efb4:	40014000 	.word	0x40014000
 800efb8:	40014400 	.word	0x40014400
 800efbc:	40014800 	.word	0x40014800
 800efc0:	40015000 	.word	0x40015000

0800efc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b087      	sub	sp, #28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6a1b      	ldr	r3, [r3, #32]
 800efd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	f023 0201 	bic.w	r2, r3, #1
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800efee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	011b      	lsls	r3, r3, #4
 800eff4:	693a      	ldr	r2, [r7, #16]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	f023 030a 	bic.w	r3, r3, #10
 800f000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f002:	697a      	ldr	r2, [r7, #20]
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	4313      	orrs	r3, r2
 800f008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	693a      	ldr	r2, [r7, #16]
 800f00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	621a      	str	r2, [r3, #32]
}
 800f016:	bf00      	nop
 800f018:	371c      	adds	r7, #28
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f022:	b480      	push	{r7}
 800f024:	b087      	sub	sp, #28
 800f026:	af00      	add	r7, sp, #0
 800f028:	60f8      	str	r0, [r7, #12]
 800f02a:	60b9      	str	r1, [r7, #8]
 800f02c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6a1b      	ldr	r3, [r3, #32]
 800f032:	f023 0210 	bic.w	r2, r3, #16
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6a1b      	ldr	r3, [r3, #32]
 800f044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f04c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	031b      	lsls	r3, r3, #12
 800f052:	697a      	ldr	r2, [r7, #20]
 800f054:	4313      	orrs	r3, r2
 800f056:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f05e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	011b      	lsls	r3, r3, #4
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	4313      	orrs	r3, r2
 800f068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	697a      	ldr	r2, [r7, #20]
 800f06e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	621a      	str	r2, [r3, #32]
}
 800f076:	bf00      	nop
 800f078:	371c      	adds	r7, #28
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr

0800f082 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f082:	b480      	push	{r7}
 800f084:	b085      	sub	sp, #20
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
 800f08a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f09c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	f043 0307 	orr.w	r3, r3, #7
 800f0a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	609a      	str	r2, [r3, #8]
}
 800f0b0:	bf00      	nop
 800f0b2:	3714      	adds	r7, #20
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b087      	sub	sp, #28
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	689b      	ldr	r3, [r3, #8]
 800f0ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f0d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	021a      	lsls	r2, r3, #8
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	431a      	orrs	r2, r3
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	697a      	ldr	r2, [r7, #20]
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	697a      	ldr	r2, [r7, #20]
 800f0ee:	609a      	str	r2, [r3, #8]
}
 800f0f0:	bf00      	nop
 800f0f2:	371c      	adds	r7, #28
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b087      	sub	sp, #28
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	f003 031f 	and.w	r3, r3, #31
 800f10e:	2201      	movs	r2, #1
 800f110:	fa02 f303 	lsl.w	r3, r2, r3
 800f114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6a1a      	ldr	r2, [r3, #32]
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	43db      	mvns	r3, r3
 800f11e:	401a      	ands	r2, r3
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6a1a      	ldr	r2, [r3, #32]
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	f003 031f 	and.w	r3, r3, #31
 800f12e:	6879      	ldr	r1, [r7, #4]
 800f130:	fa01 f303 	lsl.w	r3, r1, r3
 800f134:	431a      	orrs	r2, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	621a      	str	r2, [r3, #32]
}
 800f13a:	bf00      	nop
 800f13c:	371c      	adds	r7, #28
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
	...

0800f148 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d109      	bne.n	800f16c <HAL_TIMEx_PWMN_Start+0x24>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b01      	cmp	r3, #1
 800f162:	bf14      	ite	ne
 800f164:	2301      	movne	r3, #1
 800f166:	2300      	moveq	r3, #0
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	e022      	b.n	800f1b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b04      	cmp	r3, #4
 800f170:	d109      	bne.n	800f186 <HAL_TIMEx_PWMN_Start+0x3e>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	bf14      	ite	ne
 800f17e:	2301      	movne	r3, #1
 800f180:	2300      	moveq	r3, #0
 800f182:	b2db      	uxtb	r3, r3
 800f184:	e015      	b.n	800f1b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	2b08      	cmp	r3, #8
 800f18a:	d109      	bne.n	800f1a0 <HAL_TIMEx_PWMN_Start+0x58>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b01      	cmp	r3, #1
 800f196:	bf14      	ite	ne
 800f198:	2301      	movne	r3, #1
 800f19a:	2300      	moveq	r3, #0
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	e008      	b.n	800f1b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	bf14      	ite	ne
 800f1ac:	2301      	movne	r3, #1
 800f1ae:	2300      	moveq	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e073      	b.n	800f2a2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d104      	bne.n	800f1ca <HAL_TIMEx_PWMN_Start+0x82>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1c8:	e013      	b.n	800f1f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2b04      	cmp	r3, #4
 800f1ce:	d104      	bne.n	800f1da <HAL_TIMEx_PWMN_Start+0x92>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1d8:	e00b      	b.n	800f1f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	2b08      	cmp	r3, #8
 800f1de:	d104      	bne.n	800f1ea <HAL_TIMEx_PWMN_Start+0xa2>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2202      	movs	r2, #2
 800f1e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f1e8:	e003      	b.n	800f1f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2202      	movs	r2, #2
 800f1ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2204      	movs	r2, #4
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f000 f9ae 	bl	800f55c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f20e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4a25      	ldr	r2, [pc, #148]	; (800f2ac <HAL_TIMEx_PWMN_Start+0x164>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d022      	beq.n	800f260 <HAL_TIMEx_PWMN_Start+0x118>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f222:	d01d      	beq.n	800f260 <HAL_TIMEx_PWMN_Start+0x118>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a21      	ldr	r2, [pc, #132]	; (800f2b0 <HAL_TIMEx_PWMN_Start+0x168>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d018      	beq.n	800f260 <HAL_TIMEx_PWMN_Start+0x118>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4a20      	ldr	r2, [pc, #128]	; (800f2b4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d013      	beq.n	800f260 <HAL_TIMEx_PWMN_Start+0x118>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a1e      	ldr	r2, [pc, #120]	; (800f2b8 <HAL_TIMEx_PWMN_Start+0x170>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d00e      	beq.n	800f260 <HAL_TIMEx_PWMN_Start+0x118>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a1d      	ldr	r2, [pc, #116]	; (800f2bc <HAL_TIMEx_PWMN_Start+0x174>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d009      	beq.n	800f260 <HAL_TIMEx_PWMN_Start+0x118>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a1b      	ldr	r2, [pc, #108]	; (800f2c0 <HAL_TIMEx_PWMN_Start+0x178>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d004      	beq.n	800f260 <HAL_TIMEx_PWMN_Start+0x118>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a1a      	ldr	r2, [pc, #104]	; (800f2c4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d115      	bne.n	800f28c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	689a      	ldr	r2, [r3, #8]
 800f266:	4b18      	ldr	r3, [pc, #96]	; (800f2c8 <HAL_TIMEx_PWMN_Start+0x180>)
 800f268:	4013      	ands	r3, r2
 800f26a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2b06      	cmp	r3, #6
 800f270:	d015      	beq.n	800f29e <HAL_TIMEx_PWMN_Start+0x156>
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f278:	d011      	beq.n	800f29e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f042 0201 	orr.w	r2, r2, #1
 800f288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f28a:	e008      	b.n	800f29e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f042 0201 	orr.w	r2, r2, #1
 800f29a:	601a      	str	r2, [r3, #0]
 800f29c:	e000      	b.n	800f2a0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f29e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	40012c00 	.word	0x40012c00
 800f2b0:	40000400 	.word	0x40000400
 800f2b4:	40000800 	.word	0x40000800
 800f2b8:	40000c00 	.word	0x40000c00
 800f2bc:	40013400 	.word	0x40013400
 800f2c0:	40014000 	.word	0x40014000
 800f2c4:	40015000 	.word	0x40015000
 800f2c8:	00010007 	.word	0x00010007

0800f2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d101      	bne.n	800f2e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	e074      	b.n	800f3ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2202      	movs	r2, #2
 800f2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a34      	ldr	r2, [pc, #208]	; (800f3dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d009      	beq.n	800f322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a33      	ldr	r2, [pc, #204]	; (800f3e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d004      	beq.n	800f322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4a31      	ldr	r2, [pc, #196]	; (800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d108      	bne.n	800f334 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f328:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	4313      	orrs	r3, r2
 800f332:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f33e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4313      	orrs	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a21      	ldr	r2, [pc, #132]	; (800f3dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d022      	beq.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f364:	d01d      	beq.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a1f      	ldr	r2, [pc, #124]	; (800f3e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d018      	beq.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a1d      	ldr	r2, [pc, #116]	; (800f3ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d013      	beq.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a1c      	ldr	r2, [pc, #112]	; (800f3f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d00e      	beq.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a15      	ldr	r2, [pc, #84]	; (800f3e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d009      	beq.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a18      	ldr	r2, [pc, #96]	; (800f3f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d004      	beq.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a11      	ldr	r2, [pc, #68]	; (800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d10c      	bne.n	800f3bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	68ba      	ldr	r2, [r7, #8]
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	40012c00 	.word	0x40012c00
 800f3e0:	40013400 	.word	0x40013400
 800f3e4:	40015000 	.word	0x40015000
 800f3e8:	40000400 	.word	0x40000400
 800f3ec:	40000800 	.word	0x40000800
 800f3f0:	40000c00 	.word	0x40000c00
 800f3f4:	40014000 	.word	0x40014000

0800f3f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f402:	2300      	movs	r3, #0
 800f404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d101      	bne.n	800f414 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f410:	2302      	movs	r3, #2
 800f412:	e096      	b.n	800f542 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2201      	movs	r2, #1
 800f418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	4313      	orrs	r3, r2
 800f428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	4313      	orrs	r3, r2
 800f436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	4313      	orrs	r3, r2
 800f444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4313      	orrs	r3, r2
 800f452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	4313      	orrs	r3, r2
 800f460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	695b      	ldr	r3, [r3, #20]
 800f46c:	4313      	orrs	r3, r2
 800f46e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f47a:	4313      	orrs	r3, r2
 800f47c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	699b      	ldr	r3, [r3, #24]
 800f488:	041b      	lsls	r3, r3, #16
 800f48a:	4313      	orrs	r3, r2
 800f48c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a2f      	ldr	r2, [pc, #188]	; (800f550 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d009      	beq.n	800f4ac <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4a2d      	ldr	r2, [pc, #180]	; (800f554 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d004      	beq.n	800f4ac <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a2c      	ldr	r2, [pc, #176]	; (800f558 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d106      	bne.n	800f4ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	69db      	ldr	r3, [r3, #28]
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a24      	ldr	r2, [pc, #144]	; (800f550 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d009      	beq.n	800f4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a22      	ldr	r2, [pc, #136]	; (800f554 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d004      	beq.n	800f4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a21      	ldr	r2, [pc, #132]	; (800f558 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d12b      	bne.n	800f530 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e2:	051b      	lsls	r3, r3, #20
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	6a1b      	ldr	r3, [r3, #32]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f500:	4313      	orrs	r3, r2
 800f502:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a11      	ldr	r2, [pc, #68]	; (800f550 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d009      	beq.n	800f522 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4a10      	ldr	r2, [pc, #64]	; (800f554 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d004      	beq.n	800f522 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4a0e      	ldr	r2, [pc, #56]	; (800f558 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d106      	bne.n	800f530 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f52c:	4313      	orrs	r3, r2
 800f52e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3714      	adds	r7, #20
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	40012c00 	.word	0x40012c00
 800f554:	40013400 	.word	0x40013400
 800f558:	40015000 	.word	0x40015000

0800f55c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	f003 031f 	and.w	r3, r3, #31
 800f56e:	2204      	movs	r2, #4
 800f570:	fa02 f303 	lsl.w	r3, r2, r3
 800f574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6a1a      	ldr	r2, [r3, #32]
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	43db      	mvns	r3, r3
 800f57e:	401a      	ands	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6a1a      	ldr	r2, [r3, #32]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	f003 031f 	and.w	r3, r3, #31
 800f58e:	6879      	ldr	r1, [r7, #4]
 800f590:	fa01 f303 	lsl.w	r3, r1, r3
 800f594:	431a      	orrs	r2, r3
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	621a      	str	r2, [r3, #32]
}
 800f59a:	bf00      	nop
 800f59c:	371c      	adds	r7, #28
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr

0800f5a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b082      	sub	sp, #8
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e042      	b.n	800f63e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7f7 fd5e 	bl	800708c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2224      	movs	r2, #36	; 0x24
 800f5d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f022 0201 	bic.w	r2, r2, #1
 800f5e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fc03 	bl	800fdf4 <UART_SetConfig>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d101      	bne.n	800f5f8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e022      	b.n	800f63e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 fef3 	bl	80103ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f614:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	689a      	ldr	r2, [r3, #8]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f624:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f042 0201 	orr.w	r2, r2, #1
 800f634:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 ff7a 	bl	8010530 <UART_CheckIdleState>
 800f63c:	4603      	mov	r3, r0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b08a      	sub	sp, #40	; 0x28
 800f64a:	af02      	add	r7, sp, #8
 800f64c:	60f8      	str	r0, [r7, #12]
 800f64e:	60b9      	str	r1, [r7, #8]
 800f650:	603b      	str	r3, [r7, #0]
 800f652:	4613      	mov	r3, r2
 800f654:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f65c:	2b20      	cmp	r3, #32
 800f65e:	f040 8083 	bne.w	800f768 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d002      	beq.n	800f66e <HAL_UART_Transmit+0x28>
 800f668:	88fb      	ldrh	r3, [r7, #6]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	e07b      	b.n	800f76a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d101      	bne.n	800f680 <HAL_UART_Transmit+0x3a>
 800f67c:	2302      	movs	r3, #2
 800f67e:	e074      	b.n	800f76a <HAL_UART_Transmit+0x124>
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2201      	movs	r2, #1
 800f684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2221      	movs	r2, #33	; 0x21
 800f694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f698:	f7f8 f81c 	bl	80076d4 <HAL_GetTick>
 800f69c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	88fa      	ldrh	r2, [r7, #6]
 800f6a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	88fa      	ldrh	r2, [r7, #6]
 800f6aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6b6:	d108      	bne.n	800f6ca <HAL_UART_Transmit+0x84>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d104      	bne.n	800f6ca <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	61bb      	str	r3, [r7, #24]
 800f6c8:	e003      	b.n	800f6d2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f6da:	e02c      	b.n	800f736 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	2180      	movs	r1, #128	; 0x80
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f000 ff6d 	bl	80105c6 <UART_WaitOnFlagUntilTimeout>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d001      	beq.n	800f6f6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f6f2:	2303      	movs	r3, #3
 800f6f4:	e039      	b.n	800f76a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d10b      	bne.n	800f714 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	461a      	mov	r2, r3
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f70a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f70c:	69bb      	ldr	r3, [r7, #24]
 800f70e:	3302      	adds	r3, #2
 800f710:	61bb      	str	r3, [r7, #24]
 800f712:	e007      	b.n	800f724 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	781a      	ldrb	r2, [r3, #0]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	3301      	adds	r3, #1
 800f722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	3b01      	subs	r3, #1
 800f72e:	b29a      	uxth	r2, r3
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1cc      	bne.n	800f6dc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2200      	movs	r2, #0
 800f74a:	2140      	movs	r1, #64	; 0x40
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 ff3a 	bl	80105c6 <UART_WaitOnFlagUntilTimeout>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f758:	2303      	movs	r3, #3
 800f75a:	e006      	b.n	800f76a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2220      	movs	r2, #32
 800f760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	e000      	b.n	800f76a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f768:	2302      	movs	r3, #2
  }
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3720      	adds	r7, #32
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
	...

0800f774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b0ba      	sub	sp, #232	; 0xe8
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f79a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f79e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f7a2:	4013      	ands	r3, r2
 800f7a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f7a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d11b      	bne.n	800f7e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7b4:	f003 0320 	and.w	r3, r3, #32
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d015      	beq.n	800f7e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7c0:	f003 0320 	and.w	r3, r3, #32
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d105      	bne.n	800f7d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d009      	beq.n	800f7e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 82d6 	beq.w	800fd8a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	4798      	blx	r3
      }
      return;
 800f7e6:	e2d0      	b.n	800fd8a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f000 811f 	beq.w	800fa30 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f7f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f7f6:	4b8b      	ldr	r3, [pc, #556]	; (800fa24 <HAL_UART_IRQHandler+0x2b0>)
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d106      	bne.n	800f80c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f7fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f802:	4b89      	ldr	r3, [pc, #548]	; (800fa28 <HAL_UART_IRQHandler+0x2b4>)
 800f804:	4013      	ands	r3, r2
 800f806:	2b00      	cmp	r3, #0
 800f808:	f000 8112 	beq.w	800fa30 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f810:	f003 0301 	and.w	r3, r3, #1
 800f814:	2b00      	cmp	r3, #0
 800f816:	d011      	beq.n	800f83c <HAL_UART_IRQHandler+0xc8>
 800f818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f81c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00b      	beq.n	800f83c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2201      	movs	r2, #1
 800f82a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f832:	f043 0201 	orr.w	r2, r3, #1
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f840:	f003 0302 	and.w	r3, r3, #2
 800f844:	2b00      	cmp	r3, #0
 800f846:	d011      	beq.n	800f86c <HAL_UART_IRQHandler+0xf8>
 800f848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f84c:	f003 0301 	and.w	r3, r3, #1
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00b      	beq.n	800f86c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2202      	movs	r2, #2
 800f85a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f862:	f043 0204 	orr.w	r2, r3, #4
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f870:	f003 0304 	and.w	r3, r3, #4
 800f874:	2b00      	cmp	r3, #0
 800f876:	d011      	beq.n	800f89c <HAL_UART_IRQHandler+0x128>
 800f878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00b      	beq.n	800f89c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2204      	movs	r2, #4
 800f88a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f892:	f043 0202 	orr.w	r2, r3, #2
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8a0:	f003 0308 	and.w	r3, r3, #8
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d017      	beq.n	800f8d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8ac:	f003 0320 	and.w	r3, r3, #32
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d105      	bne.n	800f8c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f8b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f8b8:	4b5a      	ldr	r3, [pc, #360]	; (800fa24 <HAL_UART_IRQHandler+0x2b0>)
 800f8ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00b      	beq.n	800f8d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	2208      	movs	r2, #8
 800f8c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8ce:	f043 0208 	orr.w	r2, r3, #8
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d012      	beq.n	800f90a <HAL_UART_IRQHandler+0x196>
 800f8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00c      	beq.n	800f90a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f900:	f043 0220 	orr.w	r2, r3, #32
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f910:	2b00      	cmp	r3, #0
 800f912:	f000 823c 	beq.w	800fd8e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f91a:	f003 0320 	and.w	r3, r3, #32
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d013      	beq.n	800f94a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f926:	f003 0320 	and.w	r3, r3, #32
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d105      	bne.n	800f93a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f92e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f936:	2b00      	cmp	r3, #0
 800f938:	d007      	beq.n	800f94a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d003      	beq.n	800f94a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	689b      	ldr	r3, [r3, #8]
 800f95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f95e:	2b40      	cmp	r3, #64	; 0x40
 800f960:	d005      	beq.n	800f96e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f966:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d04f      	beq.n	800fa0e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 ffdb 	bl	801092a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f97e:	2b40      	cmp	r3, #64	; 0x40
 800f980:	d141      	bne.n	800fa06 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3308      	adds	r3, #8
 800f988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f98c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f990:	e853 3f00 	ldrex	r3, [r3]
 800f994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f99c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	3308      	adds	r3, #8
 800f9aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f9ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f9b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f9ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f9be:	e841 2300 	strex	r3, r2, [r1]
 800f9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f9c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1d9      	bne.n	800f982 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d013      	beq.n	800f9fe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9da:	4a14      	ldr	r2, [pc, #80]	; (800fa2c <HAL_UART_IRQHandler+0x2b8>)
 800f9dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fa fa32 	bl	8009e4c <HAL_DMA_Abort_IT>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d017      	beq.n	800fa1e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f9f8:	4610      	mov	r0, r2
 800f9fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9fc:	e00f      	b.n	800fa1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 f9ee 	bl	800fde0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa04:	e00b      	b.n	800fa1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f9ea 	bl	800fde0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa0c:	e007      	b.n	800fa1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 f9e6 	bl	800fde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800fa1c:	e1b7      	b.n	800fd8e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa1e:	bf00      	nop
    return;
 800fa20:	e1b5      	b.n	800fd8e <HAL_UART_IRQHandler+0x61a>
 800fa22:	bf00      	nop
 800fa24:	10000001 	.word	0x10000001
 800fa28:	04000120 	.word	0x04000120
 800fa2c:	08010bd5 	.word	0x08010bd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	f040 814a 	bne.w	800fcce <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa3e:	f003 0310 	and.w	r3, r3, #16
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 8143 	beq.w	800fcce <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa4c:	f003 0310 	and.w	r3, r3, #16
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f000 813c 	beq.w	800fcce <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2210      	movs	r2, #16
 800fa5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa68:	2b40      	cmp	r3, #64	; 0x40
 800fa6a:	f040 80b5 	bne.w	800fbd8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f000 8187 	beq.w	800fd92 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	f080 817f 	bcs.w	800fd92 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fa9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f003 0320 	and.w	r3, r3, #32
 800faaa:	2b00      	cmp	r3, #0
 800faac:	f040 8086 	bne.w	800fbbc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fabc:	e853 3f00 	ldrex	r3, [r3]
 800fac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800facc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	461a      	mov	r2, r3
 800fad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fade:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800faea:	e841 2300 	strex	r3, r2, [r1]
 800faee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800faf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1da      	bne.n	800fab0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3308      	adds	r3, #8
 800fb00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb04:	e853 3f00 	ldrex	r3, [r3]
 800fb08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fb0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb0c:	f023 0301 	bic.w	r3, r3, #1
 800fb10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	3308      	adds	r3, #8
 800fb1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fb1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fb22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fb26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb2a:	e841 2300 	strex	r3, r2, [r1]
 800fb2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fb30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1e1      	bne.n	800fafa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	3308      	adds	r3, #8
 800fb3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb40:	e853 3f00 	ldrex	r3, [r3]
 800fb44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3308      	adds	r3, #8
 800fb56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fb5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fb5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fb60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fb62:	e841 2300 	strex	r3, r2, [r1]
 800fb66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fb68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1e3      	bne.n	800fb36 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2220      	movs	r2, #32
 800fb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb84:	e853 3f00 	ldrex	r3, [r3]
 800fb88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fb8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb8c:	f023 0310 	bic.w	r3, r3, #16
 800fb90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fba6:	e841 2300 	strex	r3, r2, [r1]
 800fbaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1e4      	bne.n	800fb7c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7fa f8ef 	bl	8009d9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	4619      	mov	r1, r3
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7f4 fbe1 	bl	8004398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fbd6:	e0dc      	b.n	800fd92 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	f000 80ce 	beq.w	800fd96 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800fbfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 80c9 	beq.w	800fd96 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0c:	e853 3f00 	ldrex	r3, [r3]
 800fc10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	461a      	mov	r2, r3
 800fc22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc26:	647b      	str	r3, [r7, #68]	; 0x44
 800fc28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc2e:	e841 2300 	strex	r3, r2, [r1]
 800fc32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1e4      	bne.n	800fc04 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	3308      	adds	r3, #8
 800fc40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc44:	e853 3f00 	ldrex	r3, [r3]
 800fc48:	623b      	str	r3, [r7, #32]
   return(result);
 800fc4a:	6a3b      	ldr	r3, [r7, #32]
 800fc4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc50:	f023 0301 	bic.w	r3, r3, #1
 800fc54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3308      	adds	r3, #8
 800fc5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fc62:	633a      	str	r2, [r7, #48]	; 0x30
 800fc64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc6a:	e841 2300 	strex	r3, r2, [r1]
 800fc6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1e1      	bne.n	800fc3a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2220      	movs	r2, #32
 800fc7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	e853 3f00 	ldrex	r3, [r3]
 800fc96:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f023 0310 	bic.w	r3, r3, #16
 800fc9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fcac:	61fb      	str	r3, [r7, #28]
 800fcae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb0:	69b9      	ldr	r1, [r7, #24]
 800fcb2:	69fa      	ldr	r2, [r7, #28]
 800fcb4:	e841 2300 	strex	r3, r2, [r1]
 800fcb8:	617b      	str	r3, [r7, #20]
   return(result);
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1e4      	bne.n	800fc8a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fcc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f7f4 fb66 	bl	8004398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fccc:	e063      	b.n	800fd96 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fcce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00e      	beq.n	800fcf8 <HAL_UART_IRQHandler+0x584>
 800fcda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d008      	beq.n	800fcf8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fcee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 ffb0 	bl	8010c56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fcf6:	e051      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fcf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d014      	beq.n	800fd2e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d105      	bne.n	800fd1c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fd10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fd14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d008      	beq.n	800fd2e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d03a      	beq.n	800fd9a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	4798      	blx	r3
    }
    return;
 800fd2c:	e035      	b.n	800fd9a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d009      	beq.n	800fd4e <HAL_UART_IRQHandler+0x5da>
 800fd3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 ff5a 	bl	8010c00 <UART_EndTransmit_IT>
    return;
 800fd4c:	e026      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fd4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d009      	beq.n	800fd6e <HAL_UART_IRQHandler+0x5fa>
 800fd5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d003      	beq.n	800fd6e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 ff89 	bl	8010c7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd6c:	e016      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d010      	beq.n	800fd9c <HAL_UART_IRQHandler+0x628>
 800fd7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	da0c      	bge.n	800fd9c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 ff71 	bl	8010c6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd88:	e008      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
      return;
 800fd8a:	bf00      	nop
 800fd8c:	e006      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
    return;
 800fd8e:	bf00      	nop
 800fd90:	e004      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
      return;
 800fd92:	bf00      	nop
 800fd94:	e002      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
      return;
 800fd96:	bf00      	nop
 800fd98:	e000      	b.n	800fd9c <HAL_UART_IRQHandler+0x628>
    return;
 800fd9a:	bf00      	nop
  }
}
 800fd9c:	37e8      	adds	r7, #232	; 0xe8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop

0800fda4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fdac:	bf00      	nop
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fdc0:	bf00      	nop
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fdd4:	bf00      	nop
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fde8:	bf00      	nop
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fdf8:	b08c      	sub	sp, #48	; 0x30
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	689a      	ldr	r2, [r3, #8]
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	431a      	orrs	r2, r3
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	695b      	ldr	r3, [r3, #20]
 800fe12:	431a      	orrs	r2, r3
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	69db      	ldr	r3, [r3, #28]
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	4baa      	ldr	r3, [pc, #680]	; (80100cc <UART_SetConfig+0x2d8>)
 800fe24:	4013      	ands	r3, r2
 800fe26:	697a      	ldr	r2, [r7, #20]
 800fe28:	6812      	ldr	r2, [r2, #0]
 800fe2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe2c:	430b      	orrs	r3, r1
 800fe2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	68da      	ldr	r2, [r3, #12]
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	430a      	orrs	r2, r1
 800fe44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a9f      	ldr	r2, [pc, #636]	; (80100d0 <UART_SetConfig+0x2dc>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d004      	beq.n	800fe60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	6a1b      	ldr	r3, [r3, #32]
 800fe5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	689b      	ldr	r3, [r3, #8]
 800fe66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800fe6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fe6e:	697a      	ldr	r2, [r7, #20]
 800fe70:	6812      	ldr	r2, [r2, #0]
 800fe72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe74:	430b      	orrs	r3, r1
 800fe76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7e:	f023 010f 	bic.w	r1, r3, #15
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	430a      	orrs	r2, r1
 800fe8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a90      	ldr	r2, [pc, #576]	; (80100d4 <UART_SetConfig+0x2e0>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d125      	bne.n	800fee4 <UART_SetConfig+0xf0>
 800fe98:	4b8f      	ldr	r3, [pc, #572]	; (80100d8 <UART_SetConfig+0x2e4>)
 800fe9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe9e:	f003 0303 	and.w	r3, r3, #3
 800fea2:	2b03      	cmp	r3, #3
 800fea4:	d81a      	bhi.n	800fedc <UART_SetConfig+0xe8>
 800fea6:	a201      	add	r2, pc, #4	; (adr r2, 800feac <UART_SetConfig+0xb8>)
 800fea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feac:	0800febd 	.word	0x0800febd
 800feb0:	0800fecd 	.word	0x0800fecd
 800feb4:	0800fec5 	.word	0x0800fec5
 800feb8:	0800fed5 	.word	0x0800fed5
 800febc:	2301      	movs	r3, #1
 800febe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fec2:	e116      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800fec4:	2302      	movs	r3, #2
 800fec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feca:	e112      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800fecc:	2304      	movs	r3, #4
 800fece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fed2:	e10e      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800fed4:	2308      	movs	r3, #8
 800fed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feda:	e10a      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800fedc:	2310      	movs	r3, #16
 800fede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fee2:	e106      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4a7c      	ldr	r2, [pc, #496]	; (80100dc <UART_SetConfig+0x2e8>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d138      	bne.n	800ff60 <UART_SetConfig+0x16c>
 800feee:	4b7a      	ldr	r3, [pc, #488]	; (80100d8 <UART_SetConfig+0x2e4>)
 800fef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fef4:	f003 030c 	and.w	r3, r3, #12
 800fef8:	2b0c      	cmp	r3, #12
 800fefa:	d82d      	bhi.n	800ff58 <UART_SetConfig+0x164>
 800fefc:	a201      	add	r2, pc, #4	; (adr r2, 800ff04 <UART_SetConfig+0x110>)
 800fefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff02:	bf00      	nop
 800ff04:	0800ff39 	.word	0x0800ff39
 800ff08:	0800ff59 	.word	0x0800ff59
 800ff0c:	0800ff59 	.word	0x0800ff59
 800ff10:	0800ff59 	.word	0x0800ff59
 800ff14:	0800ff49 	.word	0x0800ff49
 800ff18:	0800ff59 	.word	0x0800ff59
 800ff1c:	0800ff59 	.word	0x0800ff59
 800ff20:	0800ff59 	.word	0x0800ff59
 800ff24:	0800ff41 	.word	0x0800ff41
 800ff28:	0800ff59 	.word	0x0800ff59
 800ff2c:	0800ff59 	.word	0x0800ff59
 800ff30:	0800ff59 	.word	0x0800ff59
 800ff34:	0800ff51 	.word	0x0800ff51
 800ff38:	2300      	movs	r3, #0
 800ff3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff3e:	e0d8      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ff40:	2302      	movs	r3, #2
 800ff42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff46:	e0d4      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ff48:	2304      	movs	r3, #4
 800ff4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff4e:	e0d0      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ff50:	2308      	movs	r3, #8
 800ff52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff56:	e0cc      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ff58:	2310      	movs	r3, #16
 800ff5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff5e:	e0c8      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a5e      	ldr	r2, [pc, #376]	; (80100e0 <UART_SetConfig+0x2ec>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d125      	bne.n	800ffb6 <UART_SetConfig+0x1c2>
 800ff6a:	4b5b      	ldr	r3, [pc, #364]	; (80100d8 <UART_SetConfig+0x2e4>)
 800ff6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ff74:	2b30      	cmp	r3, #48	; 0x30
 800ff76:	d016      	beq.n	800ffa6 <UART_SetConfig+0x1b2>
 800ff78:	2b30      	cmp	r3, #48	; 0x30
 800ff7a:	d818      	bhi.n	800ffae <UART_SetConfig+0x1ba>
 800ff7c:	2b20      	cmp	r3, #32
 800ff7e:	d00a      	beq.n	800ff96 <UART_SetConfig+0x1a2>
 800ff80:	2b20      	cmp	r3, #32
 800ff82:	d814      	bhi.n	800ffae <UART_SetConfig+0x1ba>
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <UART_SetConfig+0x19a>
 800ff88:	2b10      	cmp	r3, #16
 800ff8a:	d008      	beq.n	800ff9e <UART_SetConfig+0x1aa>
 800ff8c:	e00f      	b.n	800ffae <UART_SetConfig+0x1ba>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff94:	e0ad      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ff96:	2302      	movs	r3, #2
 800ff98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff9c:	e0a9      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ff9e:	2304      	movs	r3, #4
 800ffa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffa4:	e0a5      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ffa6:	2308      	movs	r3, #8
 800ffa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffac:	e0a1      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ffae:	2310      	movs	r3, #16
 800ffb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffb4:	e09d      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a4a      	ldr	r2, [pc, #296]	; (80100e4 <UART_SetConfig+0x2f0>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d125      	bne.n	801000c <UART_SetConfig+0x218>
 800ffc0:	4b45      	ldr	r3, [pc, #276]	; (80100d8 <UART_SetConfig+0x2e4>)
 800ffc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ffca:	2bc0      	cmp	r3, #192	; 0xc0
 800ffcc:	d016      	beq.n	800fffc <UART_SetConfig+0x208>
 800ffce:	2bc0      	cmp	r3, #192	; 0xc0
 800ffd0:	d818      	bhi.n	8010004 <UART_SetConfig+0x210>
 800ffd2:	2b80      	cmp	r3, #128	; 0x80
 800ffd4:	d00a      	beq.n	800ffec <UART_SetConfig+0x1f8>
 800ffd6:	2b80      	cmp	r3, #128	; 0x80
 800ffd8:	d814      	bhi.n	8010004 <UART_SetConfig+0x210>
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d002      	beq.n	800ffe4 <UART_SetConfig+0x1f0>
 800ffde:	2b40      	cmp	r3, #64	; 0x40
 800ffe0:	d008      	beq.n	800fff4 <UART_SetConfig+0x200>
 800ffe2:	e00f      	b.n	8010004 <UART_SetConfig+0x210>
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffea:	e082      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800ffec:	2302      	movs	r3, #2
 800ffee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fff2:	e07e      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800fff4:	2304      	movs	r3, #4
 800fff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fffa:	e07a      	b.n	80100f2 <UART_SetConfig+0x2fe>
 800fffc:	2308      	movs	r3, #8
 800fffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010002:	e076      	b.n	80100f2 <UART_SetConfig+0x2fe>
 8010004:	2310      	movs	r3, #16
 8010006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801000a:	e072      	b.n	80100f2 <UART_SetConfig+0x2fe>
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a35      	ldr	r2, [pc, #212]	; (80100e8 <UART_SetConfig+0x2f4>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d12a      	bne.n	801006c <UART_SetConfig+0x278>
 8010016:	4b30      	ldr	r3, [pc, #192]	; (80100d8 <UART_SetConfig+0x2e4>)
 8010018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801001c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010024:	d01a      	beq.n	801005c <UART_SetConfig+0x268>
 8010026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801002a:	d81b      	bhi.n	8010064 <UART_SetConfig+0x270>
 801002c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010030:	d00c      	beq.n	801004c <UART_SetConfig+0x258>
 8010032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010036:	d815      	bhi.n	8010064 <UART_SetConfig+0x270>
 8010038:	2b00      	cmp	r3, #0
 801003a:	d003      	beq.n	8010044 <UART_SetConfig+0x250>
 801003c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010040:	d008      	beq.n	8010054 <UART_SetConfig+0x260>
 8010042:	e00f      	b.n	8010064 <UART_SetConfig+0x270>
 8010044:	2300      	movs	r3, #0
 8010046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801004a:	e052      	b.n	80100f2 <UART_SetConfig+0x2fe>
 801004c:	2302      	movs	r3, #2
 801004e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010052:	e04e      	b.n	80100f2 <UART_SetConfig+0x2fe>
 8010054:	2304      	movs	r3, #4
 8010056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801005a:	e04a      	b.n	80100f2 <UART_SetConfig+0x2fe>
 801005c:	2308      	movs	r3, #8
 801005e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010062:	e046      	b.n	80100f2 <UART_SetConfig+0x2fe>
 8010064:	2310      	movs	r3, #16
 8010066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801006a:	e042      	b.n	80100f2 <UART_SetConfig+0x2fe>
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a17      	ldr	r2, [pc, #92]	; (80100d0 <UART_SetConfig+0x2dc>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d13a      	bne.n	80100ec <UART_SetConfig+0x2f8>
 8010076:	4b18      	ldr	r3, [pc, #96]	; (80100d8 <UART_SetConfig+0x2e4>)
 8010078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801007c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010084:	d01a      	beq.n	80100bc <UART_SetConfig+0x2c8>
 8010086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801008a:	d81b      	bhi.n	80100c4 <UART_SetConfig+0x2d0>
 801008c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010090:	d00c      	beq.n	80100ac <UART_SetConfig+0x2b8>
 8010092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010096:	d815      	bhi.n	80100c4 <UART_SetConfig+0x2d0>
 8010098:	2b00      	cmp	r3, #0
 801009a:	d003      	beq.n	80100a4 <UART_SetConfig+0x2b0>
 801009c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100a0:	d008      	beq.n	80100b4 <UART_SetConfig+0x2c0>
 80100a2:	e00f      	b.n	80100c4 <UART_SetConfig+0x2d0>
 80100a4:	2300      	movs	r3, #0
 80100a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80100aa:	e022      	b.n	80100f2 <UART_SetConfig+0x2fe>
 80100ac:	2302      	movs	r3, #2
 80100ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80100b2:	e01e      	b.n	80100f2 <UART_SetConfig+0x2fe>
 80100b4:	2304      	movs	r3, #4
 80100b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80100ba:	e01a      	b.n	80100f2 <UART_SetConfig+0x2fe>
 80100bc:	2308      	movs	r3, #8
 80100be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80100c2:	e016      	b.n	80100f2 <UART_SetConfig+0x2fe>
 80100c4:	2310      	movs	r3, #16
 80100c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80100ca:	e012      	b.n	80100f2 <UART_SetConfig+0x2fe>
 80100cc:	cfff69f3 	.word	0xcfff69f3
 80100d0:	40008000 	.word	0x40008000
 80100d4:	40013800 	.word	0x40013800
 80100d8:	40021000 	.word	0x40021000
 80100dc:	40004400 	.word	0x40004400
 80100e0:	40004800 	.word	0x40004800
 80100e4:	40004c00 	.word	0x40004c00
 80100e8:	40005000 	.word	0x40005000
 80100ec:	2310      	movs	r3, #16
 80100ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4aae      	ldr	r2, [pc, #696]	; (80103b0 <UART_SetConfig+0x5bc>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	f040 8097 	bne.w	801022c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80100fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010102:	2b08      	cmp	r3, #8
 8010104:	d823      	bhi.n	801014e <UART_SetConfig+0x35a>
 8010106:	a201      	add	r2, pc, #4	; (adr r2, 801010c <UART_SetConfig+0x318>)
 8010108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801010c:	08010131 	.word	0x08010131
 8010110:	0801014f 	.word	0x0801014f
 8010114:	08010139 	.word	0x08010139
 8010118:	0801014f 	.word	0x0801014f
 801011c:	0801013f 	.word	0x0801013f
 8010120:	0801014f 	.word	0x0801014f
 8010124:	0801014f 	.word	0x0801014f
 8010128:	0801014f 	.word	0x0801014f
 801012c:	08010147 	.word	0x08010147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010130:	f7fd fccc 	bl	800dacc <HAL_RCC_GetPCLK1Freq>
 8010134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010136:	e010      	b.n	801015a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010138:	4b9e      	ldr	r3, [pc, #632]	; (80103b4 <UART_SetConfig+0x5c0>)
 801013a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801013c:	e00d      	b.n	801015a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801013e:	f7fd fc57 	bl	800d9f0 <HAL_RCC_GetSysClockFreq>
 8010142:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010144:	e009      	b.n	801015a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801014a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801014c:	e005      	b.n	801015a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801014e:	2300      	movs	r3, #0
 8010150:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010152:	2301      	movs	r3, #1
 8010154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	2b00      	cmp	r3, #0
 801015e:	f000 8130 	beq.w	80103c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010166:	4a94      	ldr	r2, [pc, #592]	; (80103b8 <UART_SetConfig+0x5c4>)
 8010168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801016c:	461a      	mov	r2, r3
 801016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010170:	fbb3 f3f2 	udiv	r3, r3, r2
 8010174:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	4613      	mov	r3, r2
 801017c:	005b      	lsls	r3, r3, #1
 801017e:	4413      	add	r3, r2
 8010180:	69ba      	ldr	r2, [r7, #24]
 8010182:	429a      	cmp	r2, r3
 8010184:	d305      	bcc.n	8010192 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801018c:	69ba      	ldr	r2, [r7, #24]
 801018e:	429a      	cmp	r2, r3
 8010190:	d903      	bls.n	801019a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010192:	2301      	movs	r3, #1
 8010194:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010198:	e113      	b.n	80103c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	2200      	movs	r2, #0
 801019e:	60bb      	str	r3, [r7, #8]
 80101a0:	60fa      	str	r2, [r7, #12]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a6:	4a84      	ldr	r2, [pc, #528]	; (80103b8 <UART_SetConfig+0x5c4>)
 80101a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	2200      	movs	r2, #0
 80101b0:	603b      	str	r3, [r7, #0]
 80101b2:	607a      	str	r2, [r7, #4]
 80101b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80101bc:	f7f0 fd6c 	bl	8000c98 <__aeabi_uldivmod>
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	4610      	mov	r0, r2
 80101c6:	4619      	mov	r1, r3
 80101c8:	f04f 0200 	mov.w	r2, #0
 80101cc:	f04f 0300 	mov.w	r3, #0
 80101d0:	020b      	lsls	r3, r1, #8
 80101d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101d6:	0202      	lsls	r2, r0, #8
 80101d8:	6979      	ldr	r1, [r7, #20]
 80101da:	6849      	ldr	r1, [r1, #4]
 80101dc:	0849      	lsrs	r1, r1, #1
 80101de:	2000      	movs	r0, #0
 80101e0:	460c      	mov	r4, r1
 80101e2:	4605      	mov	r5, r0
 80101e4:	eb12 0804 	adds.w	r8, r2, r4
 80101e8:	eb43 0905 	adc.w	r9, r3, r5
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	469a      	mov	sl, r3
 80101f4:	4693      	mov	fp, r2
 80101f6:	4652      	mov	r2, sl
 80101f8:	465b      	mov	r3, fp
 80101fa:	4640      	mov	r0, r8
 80101fc:	4649      	mov	r1, r9
 80101fe:	f7f0 fd4b 	bl	8000c98 <__aeabi_uldivmod>
 8010202:	4602      	mov	r2, r0
 8010204:	460b      	mov	r3, r1
 8010206:	4613      	mov	r3, r2
 8010208:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010210:	d308      	bcc.n	8010224 <UART_SetConfig+0x430>
 8010212:	6a3b      	ldr	r3, [r7, #32]
 8010214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010218:	d204      	bcs.n	8010224 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	6a3a      	ldr	r2, [r7, #32]
 8010220:	60da      	str	r2, [r3, #12]
 8010222:	e0ce      	b.n	80103c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010224:	2301      	movs	r3, #1
 8010226:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801022a:	e0ca      	b.n	80103c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010234:	d166      	bne.n	8010304 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801023a:	2b08      	cmp	r3, #8
 801023c:	d827      	bhi.n	801028e <UART_SetConfig+0x49a>
 801023e:	a201      	add	r2, pc, #4	; (adr r2, 8010244 <UART_SetConfig+0x450>)
 8010240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010244:	08010269 	.word	0x08010269
 8010248:	08010271 	.word	0x08010271
 801024c:	08010279 	.word	0x08010279
 8010250:	0801028f 	.word	0x0801028f
 8010254:	0801027f 	.word	0x0801027f
 8010258:	0801028f 	.word	0x0801028f
 801025c:	0801028f 	.word	0x0801028f
 8010260:	0801028f 	.word	0x0801028f
 8010264:	08010287 	.word	0x08010287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010268:	f7fd fc30 	bl	800dacc <HAL_RCC_GetPCLK1Freq>
 801026c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801026e:	e014      	b.n	801029a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010270:	f7fd fc42 	bl	800daf8 <HAL_RCC_GetPCLK2Freq>
 8010274:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010276:	e010      	b.n	801029a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010278:	4b4e      	ldr	r3, [pc, #312]	; (80103b4 <UART_SetConfig+0x5c0>)
 801027a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801027c:	e00d      	b.n	801029a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801027e:	f7fd fbb7 	bl	800d9f0 <HAL_RCC_GetSysClockFreq>
 8010282:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010284:	e009      	b.n	801029a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801028a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801028c:	e005      	b.n	801029a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801028e:	2300      	movs	r3, #0
 8010290:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029c:	2b00      	cmp	r3, #0
 801029e:	f000 8090 	beq.w	80103c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a6:	4a44      	ldr	r2, [pc, #272]	; (80103b8 <UART_SetConfig+0x5c4>)
 80102a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102ac:	461a      	mov	r2, r3
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80102b4:	005a      	lsls	r2, r3, #1
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	085b      	lsrs	r3, r3, #1
 80102bc:	441a      	add	r2, r3
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102c8:	6a3b      	ldr	r3, [r7, #32]
 80102ca:	2b0f      	cmp	r3, #15
 80102cc:	d916      	bls.n	80102fc <UART_SetConfig+0x508>
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102d4:	d212      	bcs.n	80102fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	b29b      	uxth	r3, r3
 80102da:	f023 030f 	bic.w	r3, r3, #15
 80102de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80102e0:	6a3b      	ldr	r3, [r7, #32]
 80102e2:	085b      	lsrs	r3, r3, #1
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	f003 0307 	and.w	r3, r3, #7
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	8bfb      	ldrh	r3, [r7, #30]
 80102ee:	4313      	orrs	r3, r2
 80102f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	8bfa      	ldrh	r2, [r7, #30]
 80102f8:	60da      	str	r2, [r3, #12]
 80102fa:	e062      	b.n	80103c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80102fc:	2301      	movs	r3, #1
 80102fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010302:	e05e      	b.n	80103c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010304:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010308:	2b08      	cmp	r3, #8
 801030a:	d828      	bhi.n	801035e <UART_SetConfig+0x56a>
 801030c:	a201      	add	r2, pc, #4	; (adr r2, 8010314 <UART_SetConfig+0x520>)
 801030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010312:	bf00      	nop
 8010314:	08010339 	.word	0x08010339
 8010318:	08010341 	.word	0x08010341
 801031c:	08010349 	.word	0x08010349
 8010320:	0801035f 	.word	0x0801035f
 8010324:	0801034f 	.word	0x0801034f
 8010328:	0801035f 	.word	0x0801035f
 801032c:	0801035f 	.word	0x0801035f
 8010330:	0801035f 	.word	0x0801035f
 8010334:	08010357 	.word	0x08010357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010338:	f7fd fbc8 	bl	800dacc <HAL_RCC_GetPCLK1Freq>
 801033c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801033e:	e014      	b.n	801036a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010340:	f7fd fbda 	bl	800daf8 <HAL_RCC_GetPCLK2Freq>
 8010344:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010346:	e010      	b.n	801036a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010348:	4b1a      	ldr	r3, [pc, #104]	; (80103b4 <UART_SetConfig+0x5c0>)
 801034a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801034c:	e00d      	b.n	801036a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801034e:	f7fd fb4f 	bl	800d9f0 <HAL_RCC_GetSysClockFreq>
 8010352:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010354:	e009      	b.n	801036a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801035a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801035c:	e005      	b.n	801036a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801035e:	2300      	movs	r3, #0
 8010360:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010362:	2301      	movs	r3, #1
 8010364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010368:	bf00      	nop
    }

    if (pclk != 0U)
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	2b00      	cmp	r3, #0
 801036e:	d028      	beq.n	80103c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010374:	4a10      	ldr	r2, [pc, #64]	; (80103b8 <UART_SetConfig+0x5c4>)
 8010376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801037a:	461a      	mov	r2, r3
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	085b      	lsrs	r3, r3, #1
 8010388:	441a      	add	r2, r3
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010392:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	2b0f      	cmp	r3, #15
 8010398:	d910      	bls.n	80103bc <UART_SetConfig+0x5c8>
 801039a:	6a3b      	ldr	r3, [r7, #32]
 801039c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103a0:	d20c      	bcs.n	80103bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80103a2:	6a3b      	ldr	r3, [r7, #32]
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	60da      	str	r2, [r3, #12]
 80103ac:	e009      	b.n	80103c2 <UART_SetConfig+0x5ce>
 80103ae:	bf00      	nop
 80103b0:	40008000 	.word	0x40008000
 80103b4:	00f42400 	.word	0x00f42400
 80103b8:	08019690 	.word	0x08019690
      }
      else
      {
        ret = HAL_ERROR;
 80103bc:	2301      	movs	r3, #1
 80103be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	2201      	movs	r2, #1
 80103c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	2201      	movs	r2, #1
 80103ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2200      	movs	r2, #0
 80103d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2200      	movs	r2, #0
 80103dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80103de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3730      	adds	r7, #48	; 0x30
 80103e6:	46bd      	mov	sp, r7
 80103e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080103ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f8:	f003 0301 	and.w	r3, r3, #1
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00a      	beq.n	8010416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	430a      	orrs	r2, r1
 8010414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801041a:	f003 0302 	and.w	r3, r3, #2
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00a      	beq.n	8010438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	430a      	orrs	r2, r1
 8010436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043c:	f003 0304 	and.w	r3, r3, #4
 8010440:	2b00      	cmp	r3, #0
 8010442:	d00a      	beq.n	801045a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	430a      	orrs	r2, r1
 8010458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801045e:	f003 0308 	and.w	r3, r3, #8
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00a      	beq.n	801047c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	430a      	orrs	r2, r1
 801047a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010480:	f003 0310 	and.w	r3, r3, #16
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00a      	beq.n	801049e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	430a      	orrs	r2, r1
 801049c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104a2:	f003 0320 	and.w	r3, r3, #32
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d00a      	beq.n	80104c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	430a      	orrs	r2, r1
 80104be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d01a      	beq.n	8010502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	430a      	orrs	r2, r1
 80104e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104ea:	d10a      	bne.n	8010502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	430a      	orrs	r2, r1
 8010500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00a      	beq.n	8010524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	430a      	orrs	r2, r1
 8010522:	605a      	str	r2, [r3, #4]
  }
}
 8010524:	bf00      	nop
 8010526:	370c      	adds	r7, #12
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b086      	sub	sp, #24
 8010534:	af02      	add	r7, sp, #8
 8010536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010540:	f7f7 f8c8 	bl	80076d4 <HAL_GetTick>
 8010544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f003 0308 	and.w	r3, r3, #8
 8010550:	2b08      	cmp	r3, #8
 8010552:	d10e      	bne.n	8010572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010558:	9300      	str	r3, [sp, #0]
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f82f 	bl	80105c6 <UART_WaitOnFlagUntilTimeout>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d001      	beq.n	8010572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801056e:	2303      	movs	r3, #3
 8010570:	e025      	b.n	80105be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f003 0304 	and.w	r3, r3, #4
 801057c:	2b04      	cmp	r3, #4
 801057e:	d10e      	bne.n	801059e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2200      	movs	r2, #0
 801058a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 f819 	bl	80105c6 <UART_WaitOnFlagUntilTimeout>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d001      	beq.n	801059e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801059a:	2303      	movs	r3, #3
 801059c:	e00f      	b.n	80105be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2220      	movs	r2, #32
 80105a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2220      	movs	r2, #32
 80105aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2200      	movs	r2, #0
 80105b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b09c      	sub	sp, #112	; 0x70
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	60f8      	str	r0, [r7, #12]
 80105ce:	60b9      	str	r1, [r7, #8]
 80105d0:	603b      	str	r3, [r7, #0]
 80105d2:	4613      	mov	r3, r2
 80105d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105d6:	e0a9      	b.n	801072c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105de:	f000 80a5 	beq.w	801072c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105e2:	f7f7 f877 	bl	80076d4 <HAL_GetTick>
 80105e6:	4602      	mov	r2, r0
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d302      	bcc.n	80105f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80105f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d140      	bne.n	801067a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010600:	e853 3f00 	ldrex	r3, [r3]
 8010604:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801060c:	667b      	str	r3, [r7, #100]	; 0x64
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	461a      	mov	r2, r3
 8010614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010618:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801061c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e6      	bne.n	80105f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	3308      	adds	r3, #8
 8010630:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010634:	e853 3f00 	ldrex	r3, [r3]
 8010638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801063a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063c:	f023 0301 	bic.w	r3, r3, #1
 8010640:	663b      	str	r3, [r7, #96]	; 0x60
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	3308      	adds	r3, #8
 8010648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801064a:	64ba      	str	r2, [r7, #72]	; 0x48
 801064c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010652:	e841 2300 	strex	r3, r2, [r1]
 8010656:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1e5      	bne.n	801062a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2220      	movs	r2, #32
 8010662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2220      	movs	r2, #32
 801066a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2200      	movs	r2, #0
 8010672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010676:	2303      	movs	r3, #3
 8010678:	e069      	b.n	801074e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f003 0304 	and.w	r3, r3, #4
 8010684:	2b00      	cmp	r3, #0
 8010686:	d051      	beq.n	801072c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	69db      	ldr	r3, [r3, #28]
 801068e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010696:	d149      	bne.n	801072c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	e853 3f00 	ldrex	r3, [r3]
 80106ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80106b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	461a      	mov	r2, r3
 80106be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106c0:	637b      	str	r3, [r7, #52]	; 0x34
 80106c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106c8:	e841 2300 	strex	r3, r2, [r1]
 80106cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80106ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d1e6      	bne.n	80106a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	3308      	adds	r3, #8
 80106da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	e853 3f00 	ldrex	r3, [r3]
 80106e2:	613b      	str	r3, [r7, #16]
   return(result);
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	f023 0301 	bic.w	r3, r3, #1
 80106ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	3308      	adds	r3, #8
 80106f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106f4:	623a      	str	r2, [r7, #32]
 80106f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f8:	69f9      	ldr	r1, [r7, #28]
 80106fa:	6a3a      	ldr	r2, [r7, #32]
 80106fc:	e841 2300 	strex	r3, r2, [r1]
 8010700:	61bb      	str	r3, [r7, #24]
   return(result);
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d1e5      	bne.n	80106d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2220      	movs	r2, #32
 801070c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2220      	movs	r2, #32
 8010714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2220      	movs	r2, #32
 801071c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2200      	movs	r2, #0
 8010724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010728:	2303      	movs	r3, #3
 801072a:	e010      	b.n	801074e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	69da      	ldr	r2, [r3, #28]
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	4013      	ands	r3, r2
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	429a      	cmp	r2, r3
 801073a:	bf0c      	ite	eq
 801073c:	2301      	moveq	r3, #1
 801073e:	2300      	movne	r3, #0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	461a      	mov	r2, r3
 8010744:	79fb      	ldrb	r3, [r7, #7]
 8010746:	429a      	cmp	r2, r3
 8010748:	f43f af46 	beq.w	80105d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801074c:	2300      	movs	r3, #0
}
 801074e:	4618      	mov	r0, r3
 8010750:	3770      	adds	r7, #112	; 0x70
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
	...

08010758 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b096      	sub	sp, #88	; 0x58
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	4613      	mov	r3, r2
 8010764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	68ba      	ldr	r2, [r7, #8]
 801076a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	88fa      	ldrh	r2, [r7, #6]
 8010770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2200      	movs	r2, #0
 8010778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2222      	movs	r2, #34	; 0x22
 8010780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010788:	2b00      	cmp	r3, #0
 801078a:	d02c      	beq.n	80107e6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010790:	4a42      	ldr	r2, [pc, #264]	; (801089c <UART_Start_Receive_DMA+0x144>)
 8010792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010798:	4a41      	ldr	r2, [pc, #260]	; (80108a0 <UART_Start_Receive_DMA+0x148>)
 801079a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107a0:	4a40      	ldr	r2, [pc, #256]	; (80108a4 <UART_Start_Receive_DMA+0x14c>)
 80107a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107a8:	2200      	movs	r2, #0
 80107aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	3324      	adds	r3, #36	; 0x24
 80107b6:	4619      	mov	r1, r3
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107bc:	461a      	mov	r2, r3
 80107be:	88fb      	ldrh	r3, [r7, #6]
 80107c0:	f7f9 fa70 	bl	8009ca4 <HAL_DMA_Start_IT>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00d      	beq.n	80107e6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2210      	movs	r2, #16
 80107ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2200      	movs	r2, #0
 80107d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2220      	movs	r2, #32
 80107de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	e055      	b.n	8010892 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2200      	movs	r2, #0
 80107ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	691b      	ldr	r3, [r3, #16]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d018      	beq.n	8010828 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107fe:	e853 3f00 	ldrex	r3, [r3]
 8010802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801080a:	657b      	str	r3, [r7, #84]	; 0x54
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	461a      	mov	r2, r3
 8010812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010814:	64bb      	str	r3, [r7, #72]	; 0x48
 8010816:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010818:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801081a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801081c:	e841 2300 	strex	r3, r2, [r1]
 8010820:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1e6      	bne.n	80107f6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	3308      	adds	r3, #8
 801082e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	e853 3f00 	ldrex	r3, [r3]
 8010836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	f043 0301 	orr.w	r3, r3, #1
 801083e:	653b      	str	r3, [r7, #80]	; 0x50
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	3308      	adds	r3, #8
 8010846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010848:	637a      	str	r2, [r7, #52]	; 0x34
 801084a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801084e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010850:	e841 2300 	strex	r3, r2, [r1]
 8010854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010858:	2b00      	cmp	r3, #0
 801085a:	d1e5      	bne.n	8010828 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	3308      	adds	r3, #8
 8010862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	e853 3f00 	ldrex	r3, [r3]
 801086a:	613b      	str	r3, [r7, #16]
   return(result);
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	3308      	adds	r3, #8
 801087a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801087c:	623a      	str	r2, [r7, #32]
 801087e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010880:	69f9      	ldr	r1, [r7, #28]
 8010882:	6a3a      	ldr	r2, [r7, #32]
 8010884:	e841 2300 	strex	r3, r2, [r1]
 8010888:	61bb      	str	r3, [r7, #24]
   return(result);
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d1e5      	bne.n	801085c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010890:	2300      	movs	r3, #0
}
 8010892:	4618      	mov	r0, r3
 8010894:	3758      	adds	r7, #88	; 0x58
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	080109f7 	.word	0x080109f7
 80108a0:	08010b1d 	.word	0x08010b1d
 80108a4:	08010b55 	.word	0x08010b55

080108a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b08f      	sub	sp, #60	; 0x3c
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	e853 3f00 	ldrex	r3, [r3]
 80108bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80108c4:	637b      	str	r3, [r7, #52]	; 0x34
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	461a      	mov	r2, r3
 80108cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108d6:	e841 2300 	strex	r3, r2, [r1]
 80108da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1e6      	bne.n	80108b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	3308      	adds	r3, #8
 80108e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	e853 3f00 	ldrex	r3, [r3]
 80108f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80108f8:	633b      	str	r3, [r7, #48]	; 0x30
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	3308      	adds	r3, #8
 8010900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010902:	61ba      	str	r2, [r7, #24]
 8010904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010906:	6979      	ldr	r1, [r7, #20]
 8010908:	69ba      	ldr	r2, [r7, #24]
 801090a:	e841 2300 	strex	r3, r2, [r1]
 801090e:	613b      	str	r3, [r7, #16]
   return(result);
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d1e5      	bne.n	80108e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2220      	movs	r2, #32
 801091a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 801091e:	bf00      	nop
 8010920:	373c      	adds	r7, #60	; 0x3c
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801092a:	b480      	push	{r7}
 801092c:	b095      	sub	sp, #84	; 0x54
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093a:	e853 3f00 	ldrex	r3, [r3]
 801093e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	461a      	mov	r2, r3
 801094e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010950:	643b      	str	r3, [r7, #64]	; 0x40
 8010952:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010958:	e841 2300 	strex	r3, r2, [r1]
 801095c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801095e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010960:	2b00      	cmp	r3, #0
 8010962:	d1e6      	bne.n	8010932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	3308      	adds	r3, #8
 801096a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801096c:	6a3b      	ldr	r3, [r7, #32]
 801096e:	e853 3f00 	ldrex	r3, [r3]
 8010972:	61fb      	str	r3, [r7, #28]
   return(result);
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801097a:	f023 0301 	bic.w	r3, r3, #1
 801097e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3308      	adds	r3, #8
 8010986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010988:	62fa      	str	r2, [r7, #44]	; 0x2c
 801098a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801098c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801098e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010990:	e841 2300 	strex	r3, r2, [r1]
 8010994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1e3      	bne.n	8010964 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d118      	bne.n	80109d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	e853 3f00 	ldrex	r3, [r3]
 80109b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	f023 0310 	bic.w	r3, r3, #16
 80109b8:	647b      	str	r3, [r7, #68]	; 0x44
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	461a      	mov	r2, r3
 80109c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109c2:	61bb      	str	r3, [r7, #24]
 80109c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c6:	6979      	ldr	r1, [r7, #20]
 80109c8:	69ba      	ldr	r2, [r7, #24]
 80109ca:	e841 2300 	strex	r3, r2, [r1]
 80109ce:	613b      	str	r3, [r7, #16]
   return(result);
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1e6      	bne.n	80109a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2220      	movs	r2, #32
 80109da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80109ea:	bf00      	nop
 80109ec:	3754      	adds	r7, #84	; 0x54
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b09c      	sub	sp, #112	; 0x70
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a02:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f003 0320 	and.w	r3, r3, #32
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d171      	bne.n	8010af6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a14:	2200      	movs	r2, #0
 8010a16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a22:	e853 3f00 	ldrex	r3, [r3]
 8010a26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	461a      	mov	r2, r3
 8010a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a40:	e841 2300 	strex	r3, r2, [r1]
 8010a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1e6      	bne.n	8010a1a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	3308      	adds	r3, #8
 8010a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a56:	e853 3f00 	ldrex	r3, [r3]
 8010a5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a5e:	f023 0301 	bic.w	r3, r3, #1
 8010a62:	667b      	str	r3, [r7, #100]	; 0x64
 8010a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	3308      	adds	r3, #8
 8010a6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010a6c:	647a      	str	r2, [r7, #68]	; 0x44
 8010a6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a74:	e841 2300 	strex	r3, r2, [r1]
 8010a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d1e5      	bne.n	8010a4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	3308      	adds	r3, #8
 8010a86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8a:	e853 3f00 	ldrex	r3, [r3]
 8010a8e:	623b      	str	r3, [r7, #32]
   return(result);
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a96:	663b      	str	r3, [r7, #96]	; 0x60
 8010a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3308      	adds	r3, #8
 8010a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010aa0:	633a      	str	r2, [r7, #48]	; 0x30
 8010aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aa8:	e841 2300 	strex	r3, r2, [r1]
 8010aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1e5      	bne.n	8010a80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab6:	2220      	movs	r2, #32
 8010ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d118      	bne.n	8010af6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	e853 3f00 	ldrex	r3, [r3]
 8010ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f023 0310 	bic.w	r3, r3, #16
 8010ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	461a      	mov	r2, r3
 8010ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ae2:	61fb      	str	r3, [r7, #28]
 8010ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ae6:	69b9      	ldr	r1, [r7, #24]
 8010ae8:	69fa      	ldr	r2, [r7, #28]
 8010aea:	e841 2300 	strex	r3, r2, [r1]
 8010aee:	617b      	str	r3, [r7, #20]
   return(result);
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1e6      	bne.n	8010ac4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d107      	bne.n	8010b0e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b04:	4619      	mov	r1, r3
 8010b06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010b08:	f7f3 fc46 	bl	8004398 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b0c:	e002      	b.n	8010b14 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010b0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010b10:	f7ff f952 	bl	800fdb8 <HAL_UART_RxCpltCallback>
}
 8010b14:	bf00      	nop
 8010b16:	3770      	adds	r7, #112	; 0x70
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b28:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d109      	bne.n	8010b46 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b38:	085b      	lsrs	r3, r3, #1
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f7f3 fc2a 	bl	8004398 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b44:	e002      	b.n	8010b4c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f7ff f940 	bl	800fdcc <HAL_UART_RxHalfCpltCallback>
}
 8010b4c:	bf00      	nop
 8010b4e:	3710      	adds	r7, #16
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b086      	sub	sp, #24
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b7c:	2b80      	cmp	r3, #128	; 0x80
 8010b7e:	d109      	bne.n	8010b94 <UART_DMAError+0x40>
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	2b21      	cmp	r3, #33	; 0x21
 8010b84:	d106      	bne.n	8010b94 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010b8e:	6978      	ldr	r0, [r7, #20]
 8010b90:	f7ff fe8a 	bl	80108a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b9e:	2b40      	cmp	r3, #64	; 0x40
 8010ba0:	d109      	bne.n	8010bb6 <UART_DMAError+0x62>
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2b22      	cmp	r3, #34	; 0x22
 8010ba6:	d106      	bne.n	8010bb6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	2200      	movs	r2, #0
 8010bac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010bb0:	6978      	ldr	r0, [r7, #20]
 8010bb2:	f7ff feba 	bl	801092a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bbc:	f043 0210 	orr.w	r2, r3, #16
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bc6:	6978      	ldr	r0, [r7, #20]
 8010bc8:	f7ff f90a 	bl	800fde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bcc:	bf00      	nop
 8010bce:	3718      	adds	r7, #24
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010be0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2200      	movs	r2, #0
 8010be6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2200      	movs	r2, #0
 8010bee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7ff f8f4 	bl	800fde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bf8:	bf00      	nop
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	e853 3f00 	ldrex	r3, [r3]
 8010c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c1c:	61fb      	str	r3, [r7, #28]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	461a      	mov	r2, r3
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	61bb      	str	r3, [r7, #24]
 8010c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2a:	6979      	ldr	r1, [r7, #20]
 8010c2c:	69ba      	ldr	r2, [r7, #24]
 8010c2e:	e841 2300 	strex	r3, r2, [r1]
 8010c32:	613b      	str	r3, [r7, #16]
   return(result);
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1e6      	bne.n	8010c08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2220      	movs	r2, #32
 8010c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2200      	movs	r2, #0
 8010c46:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7ff f8ab 	bl	800fda4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c4e:	bf00      	nop
 8010c50:	3720      	adds	r7, #32
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010c56:	b480      	push	{r7}
 8010c58:	b083      	sub	sp, #12
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010c5e:	bf00      	nop
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b083      	sub	sp, #12
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010c72:	bf00      	nop
 8010c74:	370c      	adds	r7, #12
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr

08010c7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010c7e:	b480      	push	{r7}
 8010c80:	b083      	sub	sp, #12
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010c86:	bf00      	nop
 8010c88:	370c      	adds	r7, #12
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr

08010c92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010c92:	b480      	push	{r7}
 8010c94:	b085      	sub	sp, #20
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d101      	bne.n	8010ca8 <HAL_UARTEx_DisableFifoMode+0x16>
 8010ca4:	2302      	movs	r3, #2
 8010ca6:	e027      	b.n	8010cf8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2201      	movs	r2, #1
 8010cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2224      	movs	r2, #36	; 0x24
 8010cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f022 0201 	bic.w	r2, r2, #1
 8010cce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010cd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	68fa      	ldr	r2, [r7, #12]
 8010ce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2220      	movs	r2, #32
 8010cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010cf6:	2300      	movs	r3, #0
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3714      	adds	r7, #20
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d101      	bne.n	8010d1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010d18:	2302      	movs	r3, #2
 8010d1a:	e02d      	b.n	8010d78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2224      	movs	r2, #36	; 0x24
 8010d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f022 0201 	bic.w	r2, r2, #1
 8010d42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	689b      	ldr	r3, [r3, #8]
 8010d4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	430a      	orrs	r2, r1
 8010d56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 f8ab 	bl	8010eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2220      	movs	r2, #32
 8010d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d101      	bne.n	8010d98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010d94:	2302      	movs	r3, #2
 8010d96:	e02d      	b.n	8010df4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2224      	movs	r2, #36	; 0x24
 8010da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f022 0201 	bic.w	r2, r2, #1
 8010dbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	689b      	ldr	r3, [r3, #8]
 8010dc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	683a      	ldr	r2, [r7, #0]
 8010dd0:	430a      	orrs	r2, r1
 8010dd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 f86d 	bl	8010eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68fa      	ldr	r2, [r7, #12]
 8010de0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2220      	movs	r2, #32
 8010de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2200      	movs	r2, #0
 8010dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b08c      	sub	sp, #48	; 0x30
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	4613      	mov	r3, r2
 8010e08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e10:	2b20      	cmp	r3, #32
 8010e12:	d14a      	bne.n	8010eaa <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d002      	beq.n	8010e20 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010e1a:	88fb      	ldrh	r3, [r7, #6]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d101      	bne.n	8010e24 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	e043      	b.n	8010eac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d101      	bne.n	8010e32 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010e2e:	2302      	movs	r3, #2
 8010e30:	e03c      	b.n	8010eac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2201      	movs	r2, #1
 8010e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010e40:	88fb      	ldrh	r3, [r7, #6]
 8010e42:	461a      	mov	r2, r3
 8010e44:	68b9      	ldr	r1, [r7, #8]
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f7ff fc86 	bl	8010758 <UART_Start_Receive_DMA>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d124      	bne.n	8010ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d11d      	bne.n	8010e9e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2210      	movs	r2, #16
 8010e68:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	e853 3f00 	ldrex	r3, [r3]
 8010e76:	617b      	str	r3, [r7, #20]
   return(result);
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	f043 0310 	orr.w	r3, r3, #16
 8010e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	461a      	mov	r2, r3
 8010e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e88:	627b      	str	r3, [r7, #36]	; 0x24
 8010e8a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e8c:	6a39      	ldr	r1, [r7, #32]
 8010e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e90:	e841 2300 	strex	r3, r2, [r1]
 8010e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1e6      	bne.n	8010e6a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010e9c:	e002      	b.n	8010ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ea8:	e000      	b.n	8010eac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010eaa:	2302      	movs	r3, #2
  }
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3730      	adds	r7, #48	; 0x30
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d108      	bne.n	8010ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2201      	movs	r2, #1
 8010ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010ed4:	e031      	b.n	8010f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010ed6:	2308      	movs	r3, #8
 8010ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010eda:	2308      	movs	r3, #8
 8010edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	689b      	ldr	r3, [r3, #8]
 8010ee4:	0e5b      	lsrs	r3, r3, #25
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	f003 0307 	and.w	r3, r3, #7
 8010eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	0f5b      	lsrs	r3, r3, #29
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	f003 0307 	and.w	r3, r3, #7
 8010efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010efe:	7bbb      	ldrb	r3, [r7, #14]
 8010f00:	7b3a      	ldrb	r2, [r7, #12]
 8010f02:	4911      	ldr	r1, [pc, #68]	; (8010f48 <UARTEx_SetNbDataToProcess+0x94>)
 8010f04:	5c8a      	ldrb	r2, [r1, r2]
 8010f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010f0a:	7b3a      	ldrb	r2, [r7, #12]
 8010f0c:	490f      	ldr	r1, [pc, #60]	; (8010f4c <UARTEx_SetNbDataToProcess+0x98>)
 8010f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f1c:	7bfb      	ldrb	r3, [r7, #15]
 8010f1e:	7b7a      	ldrb	r2, [r7, #13]
 8010f20:	4909      	ldr	r1, [pc, #36]	; (8010f48 <UARTEx_SetNbDataToProcess+0x94>)
 8010f22:	5c8a      	ldrb	r2, [r1, r2]
 8010f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010f28:	7b7a      	ldrb	r2, [r7, #13]
 8010f2a:	4908      	ldr	r1, [pc, #32]	; (8010f4c <UARTEx_SetNbDataToProcess+0x98>)
 8010f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010f3a:	bf00      	nop
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	080196a8 	.word	0x080196a8
 8010f4c:	080196b0 	.word	0x080196b0

08010f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b085      	sub	sp, #20
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010f60:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010f64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010f70:	2300      	movs	r3, #0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3714      	adds	r7, #20
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr

08010f7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010f7e:	b480      	push	{r7}
 8010f80:	b085      	sub	sp, #20
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010f86:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010f8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	43db      	mvns	r3, r3
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	4013      	ands	r3, r2
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3714      	adds	r7, #20
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	b480      	push	{r7}
 8010fb8:	b083      	sub	sp, #12
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
 8010fbe:	f107 0014 	add.w	r0, r7, #20
 8010fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010fe6:	2300      	movs	r3, #0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	b004      	add	sp, #16
 8010ff4:	4770      	bx	lr
	...

08010ff8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b09d      	sub	sp, #116	; 0x74
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8011002:	2300      	movs	r3, #0
 8011004:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	4413      	add	r3, r2
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	b29b      	uxth	r3, r3
 8011016:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 801101a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801101e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	78db      	ldrb	r3, [r3, #3]
 8011026:	2b03      	cmp	r3, #3
 8011028:	d81f      	bhi.n	801106a <USB_ActivateEndpoint+0x72>
 801102a:	a201      	add	r2, pc, #4	; (adr r2, 8011030 <USB_ActivateEndpoint+0x38>)
 801102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011030:	08011041 	.word	0x08011041
 8011034:	0801105d 	.word	0x0801105d
 8011038:	08011073 	.word	0x08011073
 801103c:	0801104f 	.word	0x0801104f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011040:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011048:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 801104c:	e012      	b.n	8011074 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801104e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011052:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8011056:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 801105a:	e00b      	b.n	8011074 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801105c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8011068:	e004      	b.n	8011074 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801106a:	2301      	movs	r3, #1
 801106c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8011070:	e000      	b.n	8011074 <USB_ActivateEndpoint+0x7c>
      break;
 8011072:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011074:	687a      	ldr	r2, [r7, #4]
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	441a      	add	r2, r3
 801107e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801108a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801108e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011092:	b29b      	uxth	r3, r3
 8011094:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	4413      	add	r3, r2
 80110a0:	881b      	ldrh	r3, [r3, #0]
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	b21b      	sxth	r3, r3
 80110a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110ae:	b21a      	sxth	r2, r3
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	b21b      	sxth	r3, r3
 80110b6:	4313      	orrs	r3, r2
 80110b8:	b21b      	sxth	r3, r3
 80110ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	441a      	add	r2, r3
 80110c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80110cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110dc:	b29b      	uxth	r3, r3
 80110de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	7b1b      	ldrb	r3, [r3, #12]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f040 8149 	bne.w	801137c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	785b      	ldrb	r3, [r3, #1]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f000 8084 	beq.w	80111fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	61bb      	str	r3, [r7, #24]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80110fe:	b29b      	uxth	r3, r3
 8011100:	461a      	mov	r2, r3
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	4413      	add	r3, r2
 8011106:	61bb      	str	r3, [r7, #24]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	00da      	lsls	r2, r3, #3
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	4413      	add	r3, r2
 8011112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011116:	617b      	str	r3, [r7, #20]
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	88db      	ldrh	r3, [r3, #6]
 801111c:	085b      	lsrs	r3, r3, #1
 801111e:	b29b      	uxth	r3, r3
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	b29a      	uxth	r2, r3
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	4413      	add	r3, r2
 8011132:	881b      	ldrh	r3, [r3, #0]
 8011134:	827b      	strh	r3, [r7, #18]
 8011136:	8a7b      	ldrh	r3, [r7, #18]
 8011138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801113c:	2b00      	cmp	r3, #0
 801113e:	d01b      	beq.n	8011178 <USB_ActivateEndpoint+0x180>
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	881b      	ldrh	r3, [r3, #0]
 801114c:	b29b      	uxth	r3, r3
 801114e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011156:	823b      	strh	r3, [r7, #16]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	441a      	add	r2, r3
 8011162:	8a3b      	ldrh	r3, [r7, #16]
 8011164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801116c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011174:	b29b      	uxth	r3, r3
 8011176:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	78db      	ldrb	r3, [r3, #3]
 801117c:	2b01      	cmp	r3, #1
 801117e:	d020      	beq.n	80111c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	4413      	add	r3, r2
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	b29b      	uxth	r3, r3
 801118e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011196:	81bb      	strh	r3, [r7, #12]
 8011198:	89bb      	ldrh	r3, [r7, #12]
 801119a:	f083 0320 	eor.w	r3, r3, #32
 801119e:	81bb      	strh	r3, [r7, #12]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	441a      	add	r2, r3
 80111aa:	89bb      	ldrh	r3, [r7, #12]
 80111ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111bc:	b29b      	uxth	r3, r3
 80111be:	8013      	strh	r3, [r2, #0]
 80111c0:	e2a6      	b.n	8011710 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4413      	add	r3, r2
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111d8:	81fb      	strh	r3, [r7, #14]
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	441a      	add	r2, r3
 80111e4:	89fb      	ldrh	r3, [r7, #14]
 80111e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	8013      	strh	r3, [r2, #0]
 80111fa:	e289      	b.n	8011710 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	633b      	str	r3, [r7, #48]	; 0x30
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011206:	b29b      	uxth	r3, r3
 8011208:	461a      	mov	r2, r3
 801120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120c:	4413      	add	r3, r2
 801120e:	633b      	str	r3, [r7, #48]	; 0x30
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	00da      	lsls	r2, r3, #3
 8011216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011218:	4413      	add	r3, r2
 801121a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801121e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	88db      	ldrh	r3, [r3, #6]
 8011224:	085b      	lsrs	r3, r3, #1
 8011226:	b29b      	uxth	r3, r3
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	b29a      	uxth	r2, r3
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801123a:	b29b      	uxth	r3, r3
 801123c:	461a      	mov	r2, r3
 801123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011240:	4413      	add	r3, r2
 8011242:	62bb      	str	r3, [r7, #40]	; 0x28
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	00da      	lsls	r2, r3, #3
 801124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124c:	4413      	add	r3, r2
 801124e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011252:	627b      	str	r3, [r7, #36]	; 0x24
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	2b3e      	cmp	r3, #62	; 0x3e
 801125a:	d918      	bls.n	801128e <USB_ActivateEndpoint+0x296>
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	691b      	ldr	r3, [r3, #16]
 8011260:	095b      	lsrs	r3, r3, #5
 8011262:	66bb      	str	r3, [r7, #104]	; 0x68
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	691b      	ldr	r3, [r3, #16]
 8011268:	f003 031f 	and.w	r3, r3, #31
 801126c:	2b00      	cmp	r3, #0
 801126e:	d102      	bne.n	8011276 <USB_ActivateEndpoint+0x27e>
 8011270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011272:	3b01      	subs	r3, #1
 8011274:	66bb      	str	r3, [r7, #104]	; 0x68
 8011276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011278:	b29b      	uxth	r3, r3
 801127a:	029b      	lsls	r3, r3, #10
 801127c:	b29b      	uxth	r3, r3
 801127e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011286:	b29a      	uxth	r2, r3
 8011288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128a:	801a      	strh	r2, [r3, #0]
 801128c:	e029      	b.n	80112e2 <USB_ActivateEndpoint+0x2ea>
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	691b      	ldr	r3, [r3, #16]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d112      	bne.n	80112bc <USB_ActivateEndpoint+0x2c4>
 8011296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011298:	881b      	ldrh	r3, [r3, #0]
 801129a:	b29b      	uxth	r3, r3
 801129c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a4:	801a      	strh	r2, [r3, #0]
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	881b      	ldrh	r3, [r3, #0]
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b8:	801a      	strh	r2, [r3, #0]
 80112ba:	e012      	b.n	80112e2 <USB_ActivateEndpoint+0x2ea>
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	085b      	lsrs	r3, r3, #1
 80112c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	691b      	ldr	r3, [r3, #16]
 80112c8:	f003 0301 	and.w	r3, r3, #1
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d002      	beq.n	80112d6 <USB_ActivateEndpoint+0x2de>
 80112d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80112d2:	3301      	adds	r3, #1
 80112d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80112d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80112d8:	b29b      	uxth	r3, r3
 80112da:	029b      	lsls	r3, r3, #10
 80112dc:	b29a      	uxth	r2, r3
 80112de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	009b      	lsls	r3, r3, #2
 80112ea:	4413      	add	r3, r2
 80112ec:	881b      	ldrh	r3, [r3, #0]
 80112ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80112f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d01b      	beq.n	8011332 <USB_ActivateEndpoint+0x33a>
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	4413      	add	r3, r2
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	b29b      	uxth	r3, r3
 8011308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801130c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011310:	843b      	strh	r3, [r7, #32]
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	441a      	add	r2, r3
 801131c:	8c3b      	ldrh	r3, [r7, #32]
 801131e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801132a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801132e:	b29b      	uxth	r3, r3
 8011330:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	4413      	add	r3, r2
 801133c:	881b      	ldrh	r3, [r3, #0]
 801133e:	b29b      	uxth	r3, r3
 8011340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011348:	83fb      	strh	r3, [r7, #30]
 801134a:	8bfb      	ldrh	r3, [r7, #30]
 801134c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011350:	83fb      	strh	r3, [r7, #30]
 8011352:	8bfb      	ldrh	r3, [r7, #30]
 8011354:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011358:	83fb      	strh	r3, [r7, #30]
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	441a      	add	r2, r3
 8011364:	8bfb      	ldrh	r3, [r7, #30]
 8011366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801136a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801136e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011376:	b29b      	uxth	r3, r3
 8011378:	8013      	strh	r3, [r2, #0]
 801137a:	e1c9      	b.n	8011710 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	78db      	ldrb	r3, [r3, #3]
 8011380:	2b02      	cmp	r3, #2
 8011382:	d11e      	bne.n	80113c2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	4413      	add	r3, r2
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	b29b      	uxth	r3, r3
 8011392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801139a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	441a      	add	r2, r3
 80113a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80113ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80113b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113bc:	b29b      	uxth	r3, r3
 80113be:	8013      	strh	r3, [r2, #0]
 80113c0:	e01d      	b.n	80113fe <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	4413      	add	r3, r2
 80113cc:	881b      	ldrh	r3, [r3, #0]
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80113d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	441a      	add	r2, r3
 80113e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80113ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011408:	b29b      	uxth	r3, r3
 801140a:	461a      	mov	r2, r3
 801140c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801140e:	4413      	add	r3, r2
 8011410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	00da      	lsls	r2, r3, #3
 8011418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801141a:	4413      	add	r3, r2
 801141c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011420:	65bb      	str	r3, [r7, #88]	; 0x58
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	891b      	ldrh	r3, [r3, #8]
 8011426:	085b      	lsrs	r3, r3, #1
 8011428:	b29b      	uxth	r3, r3
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	b29a      	uxth	r2, r3
 801142e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011430:	801a      	strh	r2, [r3, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	657b      	str	r3, [r7, #84]	; 0x54
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801143c:	b29b      	uxth	r3, r3
 801143e:	461a      	mov	r2, r3
 8011440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011442:	4413      	add	r3, r2
 8011444:	657b      	str	r3, [r7, #84]	; 0x54
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	00da      	lsls	r2, r3, #3
 801144c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801144e:	4413      	add	r3, r2
 8011450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011454:	653b      	str	r3, [r7, #80]	; 0x50
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	895b      	ldrh	r3, [r3, #10]
 801145a:	085b      	lsrs	r3, r3, #1
 801145c:	b29b      	uxth	r3, r3
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	b29a      	uxth	r2, r3
 8011462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011464:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	785b      	ldrb	r3, [r3, #1]
 801146a:	2b00      	cmp	r3, #0
 801146c:	f040 8093 	bne.w	8011596 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	4413      	add	r3, r2
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011480:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011488:	2b00      	cmp	r3, #0
 801148a:	d01b      	beq.n	80114c4 <USB_ActivateEndpoint+0x4cc>
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4413      	add	r3, r2
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	b29b      	uxth	r3, r3
 801149a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801149e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	441a      	add	r2, r3
 80114ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80114b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80114bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	4413      	add	r3, r2
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80114d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d01b      	beq.n	8011514 <USB_ActivateEndpoint+0x51c>
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	881b      	ldrh	r3, [r3, #0]
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114f2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	441a      	add	r2, r3
 80114fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801150c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011510:	b29b      	uxth	r3, r3
 8011512:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	4413      	add	r3, r2
 801151e:	881b      	ldrh	r3, [r3, #0]
 8011520:	b29b      	uxth	r3, r3
 8011522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801152a:	873b      	strh	r3, [r7, #56]	; 0x38
 801152c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801152e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011532:	873b      	strh	r3, [r7, #56]	; 0x38
 8011534:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011536:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801153a:	873b      	strh	r3, [r7, #56]	; 0x38
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	441a      	add	r2, r3
 8011546:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801154c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011558:	b29b      	uxth	r3, r3
 801155a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4413      	add	r3, r2
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	b29b      	uxth	r3, r3
 801156a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801156e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011572:	86fb      	strh	r3, [r7, #54]	; 0x36
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	441a      	add	r2, r3
 801157e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011590:	b29b      	uxth	r3, r3
 8011592:	8013      	strh	r3, [r2, #0]
 8011594:	e0bc      	b.n	8011710 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	4413      	add	r3, r2
 80115a0:	881b      	ldrh	r3, [r3, #0]
 80115a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80115a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80115aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d01d      	beq.n	80115ee <USB_ActivateEndpoint+0x5f6>
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	4413      	add	r3, r2
 80115bc:	881b      	ldrh	r3, [r3, #0]
 80115be:	b29b      	uxth	r3, r3
 80115c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	441a      	add	r2, r3
 80115d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80115da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80115e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	4413      	add	r3, r2
 80115f8:	881b      	ldrh	r3, [r3, #0]
 80115fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80115fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011606:	2b00      	cmp	r3, #0
 8011608:	d01d      	beq.n	8011646 <USB_ActivateEndpoint+0x64e>
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	4413      	add	r3, r2
 8011614:	881b      	ldrh	r3, [r3, #0]
 8011616:	b29b      	uxth	r3, r3
 8011618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801161c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011620:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	441a      	add	r2, r3
 801162e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801163a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801163e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011642:	b29b      	uxth	r3, r3
 8011644:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	78db      	ldrb	r3, [r3, #3]
 801164a:	2b01      	cmp	r3, #1
 801164c:	d024      	beq.n	8011698 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	881b      	ldrh	r3, [r3, #0]
 801165a:	b29b      	uxth	r3, r3
 801165c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011664:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011668:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801166c:	f083 0320 	eor.w	r3, r3, #32
 8011670:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	441a      	add	r2, r3
 801167e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801168a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801168e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011692:	b29b      	uxth	r3, r3
 8011694:	8013      	strh	r3, [r2, #0]
 8011696:	e01d      	b.n	80116d4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4413      	add	r3, r2
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	441a      	add	r2, r3
 80116bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80116c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	4413      	add	r3, r2
 80116de:	881b      	ldrh	r3, [r3, #0]
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80116e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	009b      	lsls	r3, r3, #2
 80116f6:	441a      	add	r2, r3
 80116f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801170c:	b29b      	uxth	r3, r3
 801170e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011710:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011714:	4618      	mov	r0, r3
 8011716:	3774      	adds	r7, #116	; 0x74
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr

08011720 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011720:	b480      	push	{r7}
 8011722:	b08d      	sub	sp, #52	; 0x34
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	7b1b      	ldrb	r3, [r3, #12]
 801172e:	2b00      	cmp	r3, #0
 8011730:	f040 808e 	bne.w	8011850 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	785b      	ldrb	r3, [r3, #1]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d044      	beq.n	80117c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	4413      	add	r3, r2
 8011746:	881b      	ldrh	r3, [r3, #0]
 8011748:	81bb      	strh	r3, [r7, #12]
 801174a:	89bb      	ldrh	r3, [r7, #12]
 801174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011750:	2b00      	cmp	r3, #0
 8011752:	d01b      	beq.n	801178c <USB_DeactivateEndpoint+0x6c>
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	4413      	add	r3, r2
 801175e:	881b      	ldrh	r3, [r3, #0]
 8011760:	b29b      	uxth	r3, r3
 8011762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801176a:	817b      	strh	r3, [r7, #10]
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	441a      	add	r2, r3
 8011776:	897b      	ldrh	r3, [r7, #10]
 8011778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801177c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011788:	b29b      	uxth	r3, r3
 801178a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	009b      	lsls	r3, r3, #2
 8011794:	4413      	add	r3, r2
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	b29b      	uxth	r3, r3
 801179a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801179e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117a2:	813b      	strh	r3, [r7, #8]
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	009b      	lsls	r3, r3, #2
 80117ac:	441a      	add	r2, r3
 80117ae:	893b      	ldrh	r3, [r7, #8]
 80117b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	8013      	strh	r3, [r2, #0]
 80117c4:	e192      	b.n	8011aec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	4413      	add	r3, r2
 80117d0:	881b      	ldrh	r3, [r3, #0]
 80117d2:	827b      	strh	r3, [r7, #18]
 80117d4:	8a7b      	ldrh	r3, [r7, #18]
 80117d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d01b      	beq.n	8011816 <USB_DeactivateEndpoint+0xf6>
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	009b      	lsls	r3, r3, #2
 80117e6:	4413      	add	r3, r2
 80117e8:	881b      	ldrh	r3, [r3, #0]
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117f4:	823b      	strh	r3, [r7, #16]
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	441a      	add	r2, r3
 8011800:	8a3b      	ldrh	r3, [r7, #16]
 8011802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801180a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801180e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011812:	b29b      	uxth	r3, r3
 8011814:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	4413      	add	r3, r2
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	b29b      	uxth	r3, r3
 8011824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801182c:	81fb      	strh	r3, [r7, #14]
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	441a      	add	r2, r3
 8011838:	89fb      	ldrh	r3, [r7, #14]
 801183a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801183e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801184a:	b29b      	uxth	r3, r3
 801184c:	8013      	strh	r3, [r2, #0]
 801184e:	e14d      	b.n	8011aec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	785b      	ldrb	r3, [r3, #1]
 8011854:	2b00      	cmp	r3, #0
 8011856:	f040 80a5 	bne.w	80119a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801185a:	687a      	ldr	r2, [r7, #4]
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	4413      	add	r3, r2
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	843b      	strh	r3, [r7, #32]
 8011868:	8c3b      	ldrh	r3, [r7, #32]
 801186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801186e:	2b00      	cmp	r3, #0
 8011870:	d01b      	beq.n	80118aa <USB_DeactivateEndpoint+0x18a>
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	4413      	add	r3, r2
 801187c:	881b      	ldrh	r3, [r3, #0]
 801187e:	b29b      	uxth	r3, r3
 8011880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011888:	83fb      	strh	r3, [r7, #30]
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	009b      	lsls	r3, r3, #2
 8011892:	441a      	add	r2, r3
 8011894:	8bfb      	ldrh	r3, [r7, #30]
 8011896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801189a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801189e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80118a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	4413      	add	r3, r2
 80118b4:	881b      	ldrh	r3, [r3, #0]
 80118b6:	83bb      	strh	r3, [r7, #28]
 80118b8:	8bbb      	ldrh	r3, [r7, #28]
 80118ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d01b      	beq.n	80118fa <USB_DeactivateEndpoint+0x1da>
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4413      	add	r3, r2
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118d8:	837b      	strh	r3, [r7, #26]
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	441a      	add	r2, r3
 80118e4:	8b7b      	ldrh	r3, [r7, #26]
 80118e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4413      	add	r3, r2
 8011904:	881b      	ldrh	r3, [r3, #0]
 8011906:	b29b      	uxth	r3, r3
 8011908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801190c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011910:	833b      	strh	r3, [r7, #24]
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	441a      	add	r2, r3
 801191c:	8b3b      	ldrh	r3, [r7, #24]
 801191e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801192a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801192e:	b29b      	uxth	r3, r3
 8011930:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011932:	687a      	ldr	r2, [r7, #4]
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	4413      	add	r3, r2
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	b29b      	uxth	r3, r3
 8011940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011948:	82fb      	strh	r3, [r7, #22]
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	441a      	add	r2, r3
 8011954:	8afb      	ldrh	r3, [r7, #22]
 8011956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801195a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801195e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011966:	b29b      	uxth	r3, r3
 8011968:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4413      	add	r3, r2
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	b29b      	uxth	r3, r3
 8011978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801197c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011980:	82bb      	strh	r3, [r7, #20]
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	441a      	add	r2, r3
 801198c:	8abb      	ldrh	r3, [r7, #20]
 801198e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801199a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801199e:	b29b      	uxth	r3, r3
 80119a0:	8013      	strh	r3, [r2, #0]
 80119a2:	e0a3      	b.n	8011aec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4413      	add	r3, r2
 80119ae:	881b      	ldrh	r3, [r3, #0]
 80119b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80119b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80119b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d01b      	beq.n	80119f4 <USB_DeactivateEndpoint+0x2d4>
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	881b      	ldrh	r3, [r3, #0]
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	441a      	add	r2, r3
 80119de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80119e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80119ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	4413      	add	r3, r2
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d01b      	beq.n	8011a44 <USB_DeactivateEndpoint+0x324>
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	4413      	add	r3, r2
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a22:	853b      	strh	r3, [r7, #40]	; 0x28
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	441a      	add	r2, r3
 8011a2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011a5c:	687a      	ldr	r2, [r7, #4]
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	441a      	add	r2, r3
 8011a66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	009b      	lsls	r3, r3, #2
 8011a84:	4413      	add	r3, r2
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011a94:	687a      	ldr	r2, [r7, #4]
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	441a      	add	r2, r3
 8011a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	4413      	add	r3, r2
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011aca:	847b      	strh	r3, [r7, #34]	; 0x22
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	441a      	add	r2, r3
 8011ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3734      	adds	r7, #52	; 0x34
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr

08011afa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b0c2      	sub	sp, #264	; 0x108
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b08:	6018      	str	r0, [r3, #0]
 8011b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b12:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	785b      	ldrb	r3, [r3, #1]
 8011b20:	2b01      	cmp	r3, #1
 8011b22:	f040 867b 	bne.w	801281c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	699a      	ldr	r2, [r3, #24]
 8011b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	691b      	ldr	r3, [r3, #16]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d908      	bls.n	8011b54 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	691b      	ldr	r3, [r3, #16]
 8011b4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011b52:	e007      	b.n	8011b64 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	699b      	ldr	r3, [r3, #24]
 8011b60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	7b1b      	ldrb	r3, [r3, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d13a      	bne.n	8011bea <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	6959      	ldr	r1, [r3, #20]
 8011b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	88da      	ldrh	r2, [r3, #6]
 8011b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011b96:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b9a:	6800      	ldr	r0, [r0, #0]
 8011b9c:	f001 fc1d 	bl	80133da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	613b      	str	r3, [r7, #16]
 8011bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	613b      	str	r3, [r7, #16]
 8011bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	00da      	lsls	r2, r3, #3
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	801a      	strh	r2, [r3, #0]
 8011be6:	f000 bde3 	b.w	80127b0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	78db      	ldrb	r3, [r3, #3]
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	f040 843a 	bne.w	8012470 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	6a1a      	ldr	r2, [r3, #32]
 8011c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	691b      	ldr	r3, [r3, #16]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	f240 83b7 	bls.w	8012388 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	881b      	ldrh	r3, [r3, #0]
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	441a      	add	r2, r3
 8011c5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	6a1a      	ldr	r2, [r3, #32]
 8011c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c86:	1ad2      	subs	r2, r2, r3
 8011c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c9c:	681a      	ldr	r2, [r3, #0]
 8011c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	4413      	add	r3, r2
 8011cae:	881b      	ldrh	r3, [r3, #0]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 81b3 	beq.w	8012022 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8011cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	785b      	ldrb	r3, [r3, #1]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d16d      	bne.n	8011db4 <USB_EPStartXfer+0x2ba>
 8011cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	4413      	add	r3, r2
 8011cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	00da      	lsls	r2, r3, #3
 8011d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0c:	4413      	add	r3, r2
 8011d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011d12:	627b      	str	r3, [r7, #36]	; 0x24
 8011d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d18:	2b3e      	cmp	r3, #62	; 0x3e
 8011d1a:	d91c      	bls.n	8011d56 <USB_EPStartXfer+0x25c>
 8011d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d20:	095b      	lsrs	r3, r3, #5
 8011d22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d2a:	f003 031f 	and.w	r3, r3, #31
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d104      	bne.n	8011d3c <USB_EPStartXfer+0x242>
 8011d32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011d36:	3b01      	subs	r3, #1
 8011d38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011d3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	029b      	lsls	r3, r3, #10
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d52:	801a      	strh	r2, [r3, #0]
 8011d54:	e053      	b.n	8011dfe <USB_EPStartXfer+0x304>
 8011d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d112      	bne.n	8011d84 <USB_EPStartXfer+0x28a>
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	881b      	ldrh	r3, [r3, #0]
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011d68:	b29a      	uxth	r2, r3
 8011d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6c:	801a      	strh	r2, [r3, #0]
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	881b      	ldrh	r3, [r3, #0]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	801a      	strh	r2, [r3, #0]
 8011d82:	e03c      	b.n	8011dfe <USB_EPStartXfer+0x304>
 8011d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d88:	085b      	lsrs	r3, r3, #1
 8011d8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d92:	f003 0301 	and.w	r3, r3, #1
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d004      	beq.n	8011da4 <USB_EPStartXfer+0x2aa>
 8011d9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011d9e:	3301      	adds	r3, #1
 8011da0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011da4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	029b      	lsls	r3, r3, #10
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db0:	801a      	strh	r2, [r3, #0]
 8011db2:	e024      	b.n	8011dfe <USB_EPStartXfer+0x304>
 8011db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	785b      	ldrb	r3, [r3, #1]
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	d11c      	bne.n	8011dfe <USB_EPStartXfer+0x304>
 8011dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	4413      	add	r3, r2
 8011dda:	633b      	str	r3, [r7, #48]	; 0x30
 8011ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	00da      	lsls	r2, r3, #3
 8011dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dec:	4413      	add	r3, r2
 8011dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	895b      	ldrh	r3, [r3, #10]
 8011e0a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	6959      	ldr	r1, [r3, #20]
 8011e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011e24:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011e28:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011e2c:	6800      	ldr	r0, [r0, #0]
 8011e2e:	f001 fad4 	bl	80133da <USB_WritePMA>
            ep->xfer_buff += len;
 8011e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	695a      	ldr	r2, [r3, #20]
 8011e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e42:	441a      	add	r2, r3
 8011e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	6a1a      	ldr	r2, [r3, #32]
 8011e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	691b      	ldr	r3, [r3, #16]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d90f      	bls.n	8011e8c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	6a1a      	ldr	r2, [r3, #32]
 8011e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e7c:	1ad2      	subs	r2, r2, r3
 8011e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	621a      	str	r2, [r3, #32]
 8011e8a:	e00e      	b.n	8011eaa <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8011e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	6a1b      	ldr	r3, [r3, #32]
 8011e98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	785b      	ldrb	r3, [r3, #1]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d16d      	bne.n	8011f96 <USB_EPStartXfer+0x49c>
 8011eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	61bb      	str	r3, [r7, #24]
 8011ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	4413      	add	r3, r2
 8011edc:	61bb      	str	r3, [r7, #24]
 8011ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	00da      	lsls	r2, r3, #3
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	4413      	add	r3, r2
 8011ef0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011ef4:	617b      	str	r3, [r7, #20]
 8011ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011efa:	2b3e      	cmp	r3, #62	; 0x3e
 8011efc:	d91c      	bls.n	8011f38 <USB_EPStartXfer+0x43e>
 8011efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f02:	095b      	lsrs	r3, r3, #5
 8011f04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f0c:	f003 031f 	and.w	r3, r3, #31
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d104      	bne.n	8011f1e <USB_EPStartXfer+0x424>
 8011f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f18:	3b01      	subs	r3, #1
 8011f1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	029b      	lsls	r3, r3, #10
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	801a      	strh	r2, [r3, #0]
 8011f36:	e059      	b.n	8011fec <USB_EPStartXfer+0x4f2>
 8011f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d112      	bne.n	8011f66 <USB_EPStartXfer+0x46c>
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	881b      	ldrh	r3, [r3, #0]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	801a      	strh	r2, [r3, #0]
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f5e:	b29a      	uxth	r2, r3
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	801a      	strh	r2, [r3, #0]
 8011f64:	e042      	b.n	8011fec <USB_EPStartXfer+0x4f2>
 8011f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f6a:	085b      	lsrs	r3, r3, #1
 8011f6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f74:	f003 0301 	and.w	r3, r3, #1
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d004      	beq.n	8011f86 <USB_EPStartXfer+0x48c>
 8011f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f80:	3301      	adds	r3, #1
 8011f82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	029b      	lsls	r3, r3, #10
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	801a      	strh	r2, [r3, #0]
 8011f94:	e02a      	b.n	8011fec <USB_EPStartXfer+0x4f2>
 8011f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	785b      	ldrb	r3, [r3, #1]
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d122      	bne.n	8011fec <USB_EPStartXfer+0x4f2>
 8011fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	623b      	str	r3, [r7, #32]
 8011fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	6a3b      	ldr	r3, [r7, #32]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	623b      	str	r3, [r7, #32]
 8011fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	00da      	lsls	r2, r3, #3
 8011fd8:	6a3b      	ldr	r3, [r7, #32]
 8011fda:	4413      	add	r3, r2
 8011fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011fe0:	61fb      	str	r3, [r7, #28]
 8011fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	891b      	ldrh	r3, [r3, #8]
 8011ff8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	6959      	ldr	r1, [r3, #20]
 8012008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801200c:	b29b      	uxth	r3, r3
 801200e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012012:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012016:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801201a:	6800      	ldr	r0, [r0, #0]
 801201c:	f001 f9dd 	bl	80133da <USB_WritePMA>
 8012020:	e3c6      	b.n	80127b0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	785b      	ldrb	r3, [r3, #1]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d16d      	bne.n	801210e <USB_EPStartXfer+0x614>
 8012032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	64bb      	str	r3, [r7, #72]	; 0x48
 801203e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801204c:	b29b      	uxth	r3, r3
 801204e:	461a      	mov	r2, r3
 8012050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012052:	4413      	add	r3, r2
 8012054:	64bb      	str	r3, [r7, #72]	; 0x48
 8012056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801205a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	00da      	lsls	r2, r3, #3
 8012064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012066:	4413      	add	r3, r2
 8012068:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801206c:	647b      	str	r3, [r7, #68]	; 0x44
 801206e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012072:	2b3e      	cmp	r3, #62	; 0x3e
 8012074:	d91c      	bls.n	80120b0 <USB_EPStartXfer+0x5b6>
 8012076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801207a:	095b      	lsrs	r3, r3, #5
 801207c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012084:	f003 031f 	and.w	r3, r3, #31
 8012088:	2b00      	cmp	r3, #0
 801208a:	d104      	bne.n	8012096 <USB_EPStartXfer+0x59c>
 801208c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012090:	3b01      	subs	r3, #1
 8012092:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801209a:	b29b      	uxth	r3, r3
 801209c:	029b      	lsls	r3, r3, #10
 801209e:	b29b      	uxth	r3, r3
 80120a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ac:	801a      	strh	r2, [r3, #0]
 80120ae:	e059      	b.n	8012164 <USB_EPStartXfer+0x66a>
 80120b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d112      	bne.n	80120de <USB_EPStartXfer+0x5e4>
 80120b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ba:	881b      	ldrh	r3, [r3, #0]
 80120bc:	b29b      	uxth	r3, r3
 80120be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120c6:	801a      	strh	r2, [r3, #0]
 80120c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ca:	881b      	ldrh	r3, [r3, #0]
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120da:	801a      	strh	r2, [r3, #0]
 80120dc:	e042      	b.n	8012164 <USB_EPStartXfer+0x66a>
 80120de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120e2:	085b      	lsrs	r3, r3, #1
 80120e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80120e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ec:	f003 0301 	and.w	r3, r3, #1
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d004      	beq.n	80120fe <USB_EPStartXfer+0x604>
 80120f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80120f8:	3301      	adds	r3, #1
 80120fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80120fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012102:	b29b      	uxth	r3, r3
 8012104:	029b      	lsls	r3, r3, #10
 8012106:	b29a      	uxth	r2, r3
 8012108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801210a:	801a      	strh	r2, [r3, #0]
 801210c:	e02a      	b.n	8012164 <USB_EPStartXfer+0x66a>
 801210e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	785b      	ldrb	r3, [r3, #1]
 801211a:	2b01      	cmp	r3, #1
 801211c:	d122      	bne.n	8012164 <USB_EPStartXfer+0x66a>
 801211e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	653b      	str	r3, [r7, #80]	; 0x50
 801212a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801212e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012138:	b29b      	uxth	r3, r3
 801213a:	461a      	mov	r2, r3
 801213c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801213e:	4413      	add	r3, r2
 8012140:	653b      	str	r3, [r7, #80]	; 0x50
 8012142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	00da      	lsls	r2, r3, #3
 8012150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012152:	4413      	add	r3, r2
 8012154:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012158:	64fb      	str	r3, [r7, #76]	; 0x4c
 801215a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801215e:	b29a      	uxth	r2, r3
 8012160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012162:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	891b      	ldrh	r3, [r3, #8]
 8012170:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	6959      	ldr	r1, [r3, #20]
 8012180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012184:	b29b      	uxth	r3, r3
 8012186:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801218a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801218e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012192:	6800      	ldr	r0, [r0, #0]
 8012194:	f001 f921 	bl	80133da <USB_WritePMA>
            ep->xfer_buff += len;
 8012198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801219c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	695a      	ldr	r2, [r3, #20]
 80121a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121a8:	441a      	add	r2, r3
 80121aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80121b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	6a1a      	ldr	r2, [r3, #32]
 80121c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	691b      	ldr	r3, [r3, #16]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d90f      	bls.n	80121f2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80121d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	6a1a      	ldr	r2, [r3, #32]
 80121de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121e2:	1ad2      	subs	r2, r2, r3
 80121e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	621a      	str	r2, [r3, #32]
 80121f0:	e00e      	b.n	8012210 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80121f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	6a1b      	ldr	r3, [r3, #32]
 80121fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8012202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	2200      	movs	r2, #0
 801220e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	643b      	str	r3, [r7, #64]	; 0x40
 801221c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	785b      	ldrb	r3, [r3, #1]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d16d      	bne.n	8012308 <USB_EPStartXfer+0x80e>
 801222c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	63bb      	str	r3, [r7, #56]	; 0x38
 8012238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801223c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012246:	b29b      	uxth	r3, r3
 8012248:	461a      	mov	r2, r3
 801224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224c:	4413      	add	r3, r2
 801224e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	00da      	lsls	r2, r3, #3
 801225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012260:	4413      	add	r3, r2
 8012262:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012266:	637b      	str	r3, [r7, #52]	; 0x34
 8012268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801226c:	2b3e      	cmp	r3, #62	; 0x3e
 801226e:	d91c      	bls.n	80122aa <USB_EPStartXfer+0x7b0>
 8012270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012274:	095b      	lsrs	r3, r3, #5
 8012276:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801227a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801227e:	f003 031f 	and.w	r3, r3, #31
 8012282:	2b00      	cmp	r3, #0
 8012284:	d104      	bne.n	8012290 <USB_EPStartXfer+0x796>
 8012286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801228a:	3b01      	subs	r3, #1
 801228c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012294:	b29b      	uxth	r3, r3
 8012296:	029b      	lsls	r3, r3, #10
 8012298:	b29b      	uxth	r3, r3
 801229a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801229e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a6:	801a      	strh	r2, [r3, #0]
 80122a8:	e053      	b.n	8012352 <USB_EPStartXfer+0x858>
 80122aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d112      	bne.n	80122d8 <USB_EPStartXfer+0x7de>
 80122b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b4:	881b      	ldrh	r3, [r3, #0]
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80122bc:	b29a      	uxth	r2, r3
 80122be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122c0:	801a      	strh	r2, [r3, #0]
 80122c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122c4:	881b      	ldrh	r3, [r3, #0]
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80122cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d4:	801a      	strh	r2, [r3, #0]
 80122d6:	e03c      	b.n	8012352 <USB_EPStartXfer+0x858>
 80122d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122dc:	085b      	lsrs	r3, r3, #1
 80122de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80122e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122e6:	f003 0301 	and.w	r3, r3, #1
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d004      	beq.n	80122f8 <USB_EPStartXfer+0x7fe>
 80122ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80122f2:	3301      	adds	r3, #1
 80122f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80122f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	029b      	lsls	r3, r3, #10
 8012300:	b29a      	uxth	r2, r3
 8012302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012304:	801a      	strh	r2, [r3, #0]
 8012306:	e024      	b.n	8012352 <USB_EPStartXfer+0x858>
 8012308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801230c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	785b      	ldrb	r3, [r3, #1]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d11c      	bne.n	8012352 <USB_EPStartXfer+0x858>
 8012318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801231c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012326:	b29b      	uxth	r3, r3
 8012328:	461a      	mov	r2, r3
 801232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801232c:	4413      	add	r3, r2
 801232e:	643b      	str	r3, [r7, #64]	; 0x40
 8012330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	00da      	lsls	r2, r3, #3
 801233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012340:	4413      	add	r3, r2
 8012342:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801234c:	b29a      	uxth	r2, r3
 801234e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	895b      	ldrh	r3, [r3, #10]
 801235e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	6959      	ldr	r1, [r3, #20]
 801236e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012372:	b29b      	uxth	r3, r3
 8012374:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012378:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801237c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012380:	6800      	ldr	r0, [r0, #0]
 8012382:	f001 f82a 	bl	80133da <USB_WritePMA>
 8012386:	e213      	b.n	80127b0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801238c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	6a1b      	ldr	r3, [r3, #32]
 8012394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801239c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4413      	add	r3, r2
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80123ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123be:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80123c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	009b      	lsls	r3, r3, #2
 80123da:	441a      	add	r2, r3
 80123dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80123e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80123e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80123e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80123ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80123f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801240e:	b29b      	uxth	r3, r3
 8012410:	461a      	mov	r2, r3
 8012412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012414:	4413      	add	r3, r2
 8012416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801241c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	00da      	lsls	r2, r3, #3
 8012426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012428:	4413      	add	r3, r2
 801242a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801242e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012434:	b29a      	uxth	r2, r3
 8012436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012438:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801243a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801243e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	891b      	ldrh	r3, [r3, #8]
 8012446:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801244a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801244e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	6959      	ldr	r1, [r3, #20]
 8012456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801245a:	b29b      	uxth	r3, r3
 801245c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012460:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012464:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012468:	6800      	ldr	r0, [r0, #0]
 801246a:	f000 ffb6 	bl	80133da <USB_WritePMA>
 801246e:	e19f      	b.n	80127b0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	6a1a      	ldr	r2, [r3, #32]
 801247c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012480:	1ad2      	subs	r2, r2, r3
 8012482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801248e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801249c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	009b      	lsls	r3, r3, #2
 80124a6:	4413      	add	r3, r2
 80124a8:	881b      	ldrh	r3, [r3, #0]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	f000 80bc 	beq.w	801262e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80124b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	673b      	str	r3, [r7, #112]	; 0x70
 80124c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	785b      	ldrb	r3, [r3, #1]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d16d      	bne.n	80125ae <USB_EPStartXfer+0xab4>
 80124d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80124de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	461a      	mov	r2, r3
 80124f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124f2:	4413      	add	r3, r2
 80124f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80124f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	00da      	lsls	r2, r3, #3
 8012504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012506:	4413      	add	r3, r2
 8012508:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801250c:	667b      	str	r3, [r7, #100]	; 0x64
 801250e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012512:	2b3e      	cmp	r3, #62	; 0x3e
 8012514:	d91c      	bls.n	8012550 <USB_EPStartXfer+0xa56>
 8012516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801251a:	095b      	lsrs	r3, r3, #5
 801251c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012524:	f003 031f 	and.w	r3, r3, #31
 8012528:	2b00      	cmp	r3, #0
 801252a:	d104      	bne.n	8012536 <USB_EPStartXfer+0xa3c>
 801252c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012530:	3b01      	subs	r3, #1
 8012532:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012536:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801253a:	b29b      	uxth	r3, r3
 801253c:	029b      	lsls	r3, r3, #10
 801253e:	b29b      	uxth	r3, r3
 8012540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012548:	b29a      	uxth	r2, r3
 801254a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801254c:	801a      	strh	r2, [r3, #0]
 801254e:	e053      	b.n	80125f8 <USB_EPStartXfer+0xafe>
 8012550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012554:	2b00      	cmp	r3, #0
 8012556:	d112      	bne.n	801257e <USB_EPStartXfer+0xa84>
 8012558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801255a:	881b      	ldrh	r3, [r3, #0]
 801255c:	b29b      	uxth	r3, r3
 801255e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012562:	b29a      	uxth	r2, r3
 8012564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012566:	801a      	strh	r2, [r3, #0]
 8012568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801256a:	881b      	ldrh	r3, [r3, #0]
 801256c:	b29b      	uxth	r3, r3
 801256e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012576:	b29a      	uxth	r2, r3
 8012578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801257a:	801a      	strh	r2, [r3, #0]
 801257c:	e03c      	b.n	80125f8 <USB_EPStartXfer+0xafe>
 801257e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012582:	085b      	lsrs	r3, r3, #1
 8012584:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801258c:	f003 0301 	and.w	r3, r3, #1
 8012590:	2b00      	cmp	r3, #0
 8012592:	d004      	beq.n	801259e <USB_EPStartXfer+0xaa4>
 8012594:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012598:	3301      	adds	r3, #1
 801259a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801259e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	029b      	lsls	r3, r3, #10
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125aa:	801a      	strh	r2, [r3, #0]
 80125ac:	e024      	b.n	80125f8 <USB_EPStartXfer+0xafe>
 80125ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	785b      	ldrb	r3, [r3, #1]
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d11c      	bne.n	80125f8 <USB_EPStartXfer+0xafe>
 80125be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	461a      	mov	r2, r3
 80125d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80125d2:	4413      	add	r3, r2
 80125d4:	673b      	str	r3, [r7, #112]	; 0x70
 80125d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	00da      	lsls	r2, r3, #3
 80125e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80125e6:	4413      	add	r3, r2
 80125e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80125ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80125ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80125f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	895b      	ldrh	r3, [r3, #10]
 8012604:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801260c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	6959      	ldr	r1, [r3, #20]
 8012614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012618:	b29b      	uxth	r3, r3
 801261a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801261e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012622:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012626:	6800      	ldr	r0, [r0, #0]
 8012628:	f000 fed7 	bl	80133da <USB_WritePMA>
 801262c:	e0c0      	b.n	80127b0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801262e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	785b      	ldrb	r3, [r3, #1]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d16d      	bne.n	801271a <USB_EPStartXfer+0xc20>
 801263e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	67fb      	str	r3, [r7, #124]	; 0x7c
 801264a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801264e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012658:	b29b      	uxth	r3, r3
 801265a:	461a      	mov	r2, r3
 801265c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801265e:	4413      	add	r3, r2
 8012660:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	00da      	lsls	r2, r3, #3
 8012670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012672:	4413      	add	r3, r2
 8012674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012678:	67bb      	str	r3, [r7, #120]	; 0x78
 801267a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801267e:	2b3e      	cmp	r3, #62	; 0x3e
 8012680:	d91c      	bls.n	80126bc <USB_EPStartXfer+0xbc2>
 8012682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012686:	095b      	lsrs	r3, r3, #5
 8012688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801268c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012690:	f003 031f 	and.w	r3, r3, #31
 8012694:	2b00      	cmp	r3, #0
 8012696:	d104      	bne.n	80126a2 <USB_EPStartXfer+0xba8>
 8012698:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801269c:	3b01      	subs	r3, #1
 801269e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80126a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	029b      	lsls	r3, r3, #10
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126b8:	801a      	strh	r2, [r3, #0]
 80126ba:	e05f      	b.n	801277c <USB_EPStartXfer+0xc82>
 80126bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d112      	bne.n	80126ea <USB_EPStartXfer+0xbf0>
 80126c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126c6:	881b      	ldrh	r3, [r3, #0]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126d2:	801a      	strh	r2, [r3, #0]
 80126d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	b29b      	uxth	r3, r3
 80126da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126e6:	801a      	strh	r2, [r3, #0]
 80126e8:	e048      	b.n	801277c <USB_EPStartXfer+0xc82>
 80126ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126ee:	085b      	lsrs	r3, r3, #1
 80126f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80126f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126f8:	f003 0301 	and.w	r3, r3, #1
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d004      	beq.n	801270a <USB_EPStartXfer+0xc10>
 8012700:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012704:	3301      	adds	r3, #1
 8012706:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801270a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801270e:	b29b      	uxth	r3, r3
 8012710:	029b      	lsls	r3, r3, #10
 8012712:	b29a      	uxth	r2, r3
 8012714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012716:	801a      	strh	r2, [r3, #0]
 8012718:	e030      	b.n	801277c <USB_EPStartXfer+0xc82>
 801271a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801271e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	785b      	ldrb	r3, [r3, #1]
 8012726:	2b01      	cmp	r3, #1
 8012728:	d128      	bne.n	801277c <USB_EPStartXfer+0xc82>
 801272a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801272e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801273c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012746:	b29b      	uxth	r3, r3
 8012748:	461a      	mov	r2, r3
 801274a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801274e:	4413      	add	r3, r2
 8012750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	00da      	lsls	r2, r3, #3
 8012762:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012766:	4413      	add	r3, r2
 8012768:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801276c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012774:	b29a      	uxth	r2, r3
 8012776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801277a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801277c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	891b      	ldrh	r3, [r3, #8]
 8012788:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801278c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	6959      	ldr	r1, [r3, #20]
 8012798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801279c:	b29b      	uxth	r3, r3
 801279e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80127a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80127a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80127aa:	6800      	ldr	r0, [r0, #0]
 80127ac:	f000 fe15 	bl	80133da <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80127b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127b8:	681a      	ldr	r2, [r3, #0]
 80127ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	4413      	add	r3, r2
 80127ca:	881b      	ldrh	r3, [r3, #0]
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127d6:	817b      	strh	r3, [r7, #10]
 80127d8:	897b      	ldrh	r3, [r7, #10]
 80127da:	f083 0310 	eor.w	r3, r3, #16
 80127de:	817b      	strh	r3, [r7, #10]
 80127e0:	897b      	ldrh	r3, [r7, #10]
 80127e2:	f083 0320 	eor.w	r3, r3, #32
 80127e6:	817b      	strh	r3, [r7, #10]
 80127e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	009b      	lsls	r3, r3, #2
 8012800:	441a      	add	r2, r3
 8012802:	897b      	ldrh	r3, [r7, #10]
 8012804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801280c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012814:	b29b      	uxth	r3, r3
 8012816:	8013      	strh	r3, [r2, #0]
 8012818:	f000 bc9f 	b.w	801315a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801281c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	7b1b      	ldrb	r3, [r3, #12]
 8012828:	2b00      	cmp	r3, #0
 801282a:	f040 80ae 	bne.w	801298a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801282e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	699a      	ldr	r2, [r3, #24]
 801283a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801283e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	691b      	ldr	r3, [r3, #16]
 8012846:	429a      	cmp	r2, r3
 8012848:	d917      	bls.n	801287a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 801284a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801284e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	691b      	ldr	r3, [r3, #16]
 8012856:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801285a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801285e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	699a      	ldr	r2, [r3, #24]
 8012866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801286a:	1ad2      	subs	r2, r2, r3
 801286c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	619a      	str	r2, [r3, #24]
 8012878:	e00e      	b.n	8012898 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 801287a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801287e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	699b      	ldr	r3, [r3, #24]
 8012886:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801288a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801288e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2200      	movs	r2, #0
 8012896:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801289c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80128a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80128b4:	b29b      	uxth	r3, r3
 80128b6:	461a      	mov	r2, r3
 80128b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80128bc:	4413      	add	r3, r2
 80128be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80128c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	00da      	lsls	r2, r3, #3
 80128d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80128d4:	4413      	add	r3, r2
 80128d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80128da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80128de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128e2:	2b3e      	cmp	r3, #62	; 0x3e
 80128e4:	d91d      	bls.n	8012922 <USB_EPStartXfer+0xe28>
 80128e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128ea:	095b      	lsrs	r3, r3, #5
 80128ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80128f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128f4:	f003 031f 	and.w	r3, r3, #31
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d104      	bne.n	8012906 <USB_EPStartXfer+0xe0c>
 80128fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012900:	3b01      	subs	r3, #1
 8012902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012906:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801290a:	b29b      	uxth	r3, r3
 801290c:	029b      	lsls	r3, r3, #10
 801290e:	b29b      	uxth	r3, r3
 8012910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012918:	b29a      	uxth	r2, r3
 801291a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801291e:	801a      	strh	r2, [r3, #0]
 8012920:	e3e1      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
 8012922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012926:	2b00      	cmp	r3, #0
 8012928:	d116      	bne.n	8012958 <USB_EPStartXfer+0xe5e>
 801292a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	b29b      	uxth	r3, r3
 8012932:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012936:	b29a      	uxth	r2, r3
 8012938:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801293c:	801a      	strh	r2, [r3, #0]
 801293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012942:	881b      	ldrh	r3, [r3, #0]
 8012944:	b29b      	uxth	r3, r3
 8012946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801294a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801294e:	b29a      	uxth	r2, r3
 8012950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012954:	801a      	strh	r2, [r3, #0]
 8012956:	e3c6      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
 8012958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801295c:	085b      	lsrs	r3, r3, #1
 801295e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012966:	f003 0301 	and.w	r3, r3, #1
 801296a:	2b00      	cmp	r3, #0
 801296c:	d004      	beq.n	8012978 <USB_EPStartXfer+0xe7e>
 801296e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012972:	3301      	adds	r3, #1
 8012974:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012978:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801297c:	b29b      	uxth	r3, r3
 801297e:	029b      	lsls	r3, r3, #10
 8012980:	b29a      	uxth	r2, r3
 8012982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012986:	801a      	strh	r2, [r3, #0]
 8012988:	e3ad      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801298a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801298e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	78db      	ldrb	r3, [r3, #3]
 8012996:	2b02      	cmp	r3, #2
 8012998:	f040 8200 	bne.w	8012d9c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801299c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	785b      	ldrb	r3, [r3, #1]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f040 8091 	bne.w	8012ad0 <USB_EPStartXfer+0xfd6>
 80129ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80129bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	461a      	mov	r2, r3
 80129ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129d2:	4413      	add	r3, r2
 80129d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80129d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	00da      	lsls	r2, r3, #3
 80129e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129ea:	4413      	add	r3, r2
 80129ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80129f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80129f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	691b      	ldr	r3, [r3, #16]
 8012a00:	2b3e      	cmp	r3, #62	; 0x3e
 8012a02:	d925      	bls.n	8012a50 <USB_EPStartXfer+0xf56>
 8012a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	691b      	ldr	r3, [r3, #16]
 8012a10:	095b      	lsrs	r3, r3, #5
 8012a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	691b      	ldr	r3, [r3, #16]
 8012a22:	f003 031f 	and.w	r3, r3, #31
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d104      	bne.n	8012a34 <USB_EPStartXfer+0xf3a>
 8012a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	029b      	lsls	r3, r3, #10
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a4c:	801a      	strh	r2, [r3, #0]
 8012a4e:	e074      	b.n	8012b3a <USB_EPStartXfer+0x1040>
 8012a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	691b      	ldr	r3, [r3, #16]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d116      	bne.n	8012a8e <USB_EPStartXfer+0xf94>
 8012a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a64:	881b      	ldrh	r3, [r3, #0]
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012a6c:	b29a      	uxth	r2, r3
 8012a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a72:	801a      	strh	r2, [r3, #0]
 8012a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a8a:	801a      	strh	r2, [r3, #0]
 8012a8c:	e055      	b.n	8012b3a <USB_EPStartXfer+0x1040>
 8012a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	691b      	ldr	r3, [r3, #16]
 8012a9a:	085b      	lsrs	r3, r3, #1
 8012a9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	691b      	ldr	r3, [r3, #16]
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d004      	beq.n	8012abe <USB_EPStartXfer+0xfc4>
 8012ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ab8:	3301      	adds	r3, #1
 8012aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	029b      	lsls	r3, r3, #10
 8012ac6:	b29a      	uxth	r2, r3
 8012ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012acc:	801a      	strh	r2, [r3, #0]
 8012ace:	e034      	b.n	8012b3a <USB_EPStartXfer+0x1040>
 8012ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	785b      	ldrb	r3, [r3, #1]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d12c      	bne.n	8012b3a <USB_EPStartXfer+0x1040>
 8012ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	461a      	mov	r2, r3
 8012b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b04:	4413      	add	r3, r2
 8012b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	00da      	lsls	r2, r3, #3
 8012b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b1c:	4413      	add	r3, r2
 8012b1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	691b      	ldr	r3, [r3, #16]
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012b38:	801a      	strh	r2, [r3, #0]
 8012b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	785b      	ldrb	r3, [r3, #1]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	f040 8091 	bne.w	8012c7c <USB_EPStartXfer+0x1182>
 8012b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	461a      	mov	r2, r3
 8012b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b7e:	4413      	add	r3, r2
 8012b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	00da      	lsls	r2, r3, #3
 8012b92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b96:	4413      	add	r3, r2
 8012b98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	2b3e      	cmp	r3, #62	; 0x3e
 8012bae:	d925      	bls.n	8012bfc <USB_EPStartXfer+0x1102>
 8012bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	691b      	ldr	r3, [r3, #16]
 8012bbc:	095b      	lsrs	r3, r3, #5
 8012bbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	691b      	ldr	r3, [r3, #16]
 8012bce:	f003 031f 	and.w	r3, r3, #31
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d104      	bne.n	8012be0 <USB_EPStartXfer+0x10e6>
 8012bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bda:	3b01      	subs	r3, #1
 8012bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	029b      	lsls	r3, r3, #10
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012bf8:	801a      	strh	r2, [r3, #0]
 8012bfa:	e06d      	b.n	8012cd8 <USB_EPStartXfer+0x11de>
 8012bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	691b      	ldr	r3, [r3, #16]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d116      	bne.n	8012c3a <USB_EPStartXfer+0x1140>
 8012c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c10:	881b      	ldrh	r3, [r3, #0]
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c1e:	801a      	strh	r2, [r3, #0]
 8012c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c36:	801a      	strh	r2, [r3, #0]
 8012c38:	e04e      	b.n	8012cd8 <USB_EPStartXfer+0x11de>
 8012c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	691b      	ldr	r3, [r3, #16]
 8012c46:	085b      	lsrs	r3, r3, #1
 8012c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	691b      	ldr	r3, [r3, #16]
 8012c58:	f003 0301 	and.w	r3, r3, #1
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d004      	beq.n	8012c6a <USB_EPStartXfer+0x1170>
 8012c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c64:	3301      	adds	r3, #1
 8012c66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	029b      	lsls	r3, r3, #10
 8012c72:	b29a      	uxth	r2, r3
 8012c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c78:	801a      	strh	r2, [r3, #0]
 8012c7a:	e02d      	b.n	8012cd8 <USB_EPStartXfer+0x11de>
 8012c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	785b      	ldrb	r3, [r3, #1]
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	d125      	bne.n	8012cd8 <USB_EPStartXfer+0x11de>
 8012c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012ca2:	4413      	add	r3, r2
 8012ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	00da      	lsls	r2, r3, #3
 8012cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012cba:	4413      	add	r3, r2
 8012cbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	691b      	ldr	r3, [r3, #16]
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012cd6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	69db      	ldr	r3, [r3, #28]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	f000 81fe 	beq.w	80130e6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	4413      	add	r3, r2
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012d0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d005      	beq.n	8012d22 <USB_EPStartXfer+0x1228>
 8012d16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d10d      	bne.n	8012d3e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012d22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f040 81db 	bne.w	80130e6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012d30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	f040 81d4 	bne.w	80130e6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	4413      	add	r3, r2
 8012d58:	881b      	ldrh	r3, [r3, #0]
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d64:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	009b      	lsls	r3, r3, #2
 8012d80:	441a      	add	r2, r3
 8012d82:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	8013      	strh	r3, [r2, #0]
 8012d9a:	e1a4      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	78db      	ldrb	r3, [r3, #3]
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	f040 819a 	bne.w	80130e2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	699a      	ldr	r2, [r3, #24]
 8012dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	691b      	ldr	r3, [r3, #16]
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d917      	bls.n	8012dfa <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8012dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	691b      	ldr	r3, [r3, #16]
 8012dd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	699a      	ldr	r2, [r3, #24]
 8012de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012dea:	1ad2      	subs	r2, r2, r3
 8012dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	619a      	str	r2, [r3, #24]
 8012df8:	e00e      	b.n	8012e18 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8012dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	699b      	ldr	r3, [r3, #24]
 8012e06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8012e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2200      	movs	r2, #0
 8012e16:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	785b      	ldrb	r3, [r3, #1]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d178      	bne.n	8012f1a <USB_EPStartXfer+0x1420>
 8012e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	461a      	mov	r2, r3
 8012e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012e4c:	4413      	add	r3, r2
 8012e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	00da      	lsls	r2, r3, #3
 8012e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012e64:	4413      	add	r3, r2
 8012e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e72:	2b3e      	cmp	r3, #62	; 0x3e
 8012e74:	d91d      	bls.n	8012eb2 <USB_EPStartXfer+0x13b8>
 8012e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e7a:	095b      	lsrs	r3, r3, #5
 8012e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e84:	f003 031f 	and.w	r3, r3, #31
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d104      	bne.n	8012e96 <USB_EPStartXfer+0x139c>
 8012e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012e90:	3b01      	subs	r3, #1
 8012e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012e9a:	b29b      	uxth	r3, r3
 8012e9c:	029b      	lsls	r3, r3, #10
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012eae:	801a      	strh	r2, [r3, #0]
 8012eb0:	e064      	b.n	8012f7c <USB_EPStartXfer+0x1482>
 8012eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d116      	bne.n	8012ee8 <USB_EPStartXfer+0x13ee>
 8012eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012ecc:	801a      	strh	r2, [r3, #0]
 8012ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012ee4:	801a      	strh	r2, [r3, #0]
 8012ee6:	e049      	b.n	8012f7c <USB_EPStartXfer+0x1482>
 8012ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012eec:	085b      	lsrs	r3, r3, #1
 8012eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ef6:	f003 0301 	and.w	r3, r3, #1
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d004      	beq.n	8012f08 <USB_EPStartXfer+0x140e>
 8012efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f02:	3301      	adds	r3, #1
 8012f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	029b      	lsls	r3, r3, #10
 8012f10:	b29a      	uxth	r2, r3
 8012f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f16:	801a      	strh	r2, [r3, #0]
 8012f18:	e030      	b.n	8012f7c <USB_EPStartXfer+0x1482>
 8012f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	785b      	ldrb	r3, [r3, #1]
 8012f26:	2b01      	cmp	r3, #1
 8012f28:	d128      	bne.n	8012f7c <USB_EPStartXfer+0x1482>
 8012f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	461a      	mov	r2, r3
 8012f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012f4e:	4413      	add	r3, r2
 8012f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	00da      	lsls	r2, r3, #3
 8012f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012f66:	4413      	add	r3, r2
 8012f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f74:	b29a      	uxth	r2, r3
 8012f76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012f7a:	801a      	strh	r2, [r3, #0]
 8012f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	785b      	ldrb	r3, [r3, #1]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d178      	bne.n	801308c <USB_EPStartXfer+0x1592>
 8012f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	461a      	mov	r2, r3
 8012fba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012fbe:	4413      	add	r3, r2
 8012fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	00da      	lsls	r2, r3, #3
 8012fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012fd6:	4413      	add	r3, r2
 8012fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8012fe6:	d91d      	bls.n	8013024 <USB_EPStartXfer+0x152a>
 8012fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fec:	095b      	lsrs	r3, r3, #5
 8012fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ff6:	f003 031f 	and.w	r3, r3, #31
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d104      	bne.n	8013008 <USB_EPStartXfer+0x150e>
 8012ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013002:	3b01      	subs	r3, #1
 8013004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801300c:	b29b      	uxth	r3, r3
 801300e:	029b      	lsls	r3, r3, #10
 8013010:	b29b      	uxth	r3, r3
 8013012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801301a:	b29a      	uxth	r2, r3
 801301c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013020:	801a      	strh	r2, [r3, #0]
 8013022:	e060      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
 8013024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013028:	2b00      	cmp	r3, #0
 801302a:	d116      	bne.n	801305a <USB_EPStartXfer+0x1560>
 801302c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	b29b      	uxth	r3, r3
 8013034:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013038:	b29a      	uxth	r2, r3
 801303a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801303e:	801a      	strh	r2, [r3, #0]
 8013040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013044:	881b      	ldrh	r3, [r3, #0]
 8013046:	b29b      	uxth	r3, r3
 8013048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801304c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013050:	b29a      	uxth	r2, r3
 8013052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013056:	801a      	strh	r2, [r3, #0]
 8013058:	e045      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
 801305a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801305e:	085b      	lsrs	r3, r3, #1
 8013060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013068:	f003 0301 	and.w	r3, r3, #1
 801306c:	2b00      	cmp	r3, #0
 801306e:	d004      	beq.n	801307a <USB_EPStartXfer+0x1580>
 8013070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013074:	3301      	adds	r3, #1
 8013076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801307a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801307e:	b29b      	uxth	r3, r3
 8013080:	029b      	lsls	r3, r3, #10
 8013082:	b29a      	uxth	r2, r3
 8013084:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013088:	801a      	strh	r2, [r3, #0]
 801308a:	e02c      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
 801308c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	785b      	ldrb	r3, [r3, #1]
 8013098:	2b01      	cmp	r3, #1
 801309a:	d124      	bne.n	80130e6 <USB_EPStartXfer+0x15ec>
 801309c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	461a      	mov	r2, r3
 80130ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80130b2:	4413      	add	r3, r2
 80130b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80130b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	00da      	lsls	r2, r3, #3
 80130c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80130ca:	4413      	add	r3, r2
 80130cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80130d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80130d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130d8:	b29a      	uxth	r2, r3
 80130da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80130de:	801a      	strh	r2, [r3, #0]
 80130e0:	e001      	b.n	80130e6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80130e2:	2301      	movs	r3, #1
 80130e4:	e03a      	b.n	801315c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80130e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130ee:	681a      	ldr	r2, [r3, #0]
 80130f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4413      	add	r3, r2
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	b29b      	uxth	r3, r3
 8013104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801310c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013110:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013114:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013118:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801311c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013120:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013124:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801312c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013130:	681a      	ldr	r2, [r3, #0]
 8013132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	009b      	lsls	r3, r3, #2
 8013140:	441a      	add	r2, r3
 8013142:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801314a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013156:	b29b      	uxth	r3, r3
 8013158:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801315a:	2300      	movs	r3, #0
}
 801315c:	4618      	mov	r0, r3
 801315e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013166:	b480      	push	{r7}
 8013168:	b085      	sub	sp, #20
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	785b      	ldrb	r3, [r3, #1]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d020      	beq.n	80131ba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	4413      	add	r3, r2
 8013182:	881b      	ldrh	r3, [r3, #0]
 8013184:	b29b      	uxth	r3, r3
 8013186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801318a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801318e:	81bb      	strh	r3, [r7, #12]
 8013190:	89bb      	ldrh	r3, [r7, #12]
 8013192:	f083 0310 	eor.w	r3, r3, #16
 8013196:	81bb      	strh	r3, [r7, #12]
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	441a      	add	r2, r3
 80131a2:	89bb      	ldrh	r3, [r7, #12]
 80131a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	8013      	strh	r3, [r2, #0]
 80131b8:	e01f      	b.n	80131fa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	4413      	add	r3, r2
 80131c4:	881b      	ldrh	r3, [r3, #0]
 80131c6:	b29b      	uxth	r3, r3
 80131c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80131cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131d0:	81fb      	strh	r3, [r7, #14]
 80131d2:	89fb      	ldrh	r3, [r7, #14]
 80131d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80131d8:	81fb      	strh	r3, [r7, #14]
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	009b      	lsls	r3, r3, #2
 80131e2:	441a      	add	r2, r3
 80131e4:	89fb      	ldrh	r3, [r7, #14]
 80131e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80131fa:	2300      	movs	r3, #0
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	3714      	adds	r7, #20
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013208:	b480      	push	{r7}
 801320a:	b087      	sub	sp, #28
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
 8013210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	7b1b      	ldrb	r3, [r3, #12]
 8013216:	2b00      	cmp	r3, #0
 8013218:	f040 809d 	bne.w	8013356 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	785b      	ldrb	r3, [r3, #1]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d04c      	beq.n	80132be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	009b      	lsls	r3, r3, #2
 801322c:	4413      	add	r3, r2
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	823b      	strh	r3, [r7, #16]
 8013232:	8a3b      	ldrh	r3, [r7, #16]
 8013234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013238:	2b00      	cmp	r3, #0
 801323a:	d01b      	beq.n	8013274 <USB_EPClearStall+0x6c>
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	009b      	lsls	r3, r3, #2
 8013244:	4413      	add	r3, r2
 8013246:	881b      	ldrh	r3, [r3, #0]
 8013248:	b29b      	uxth	r3, r3
 801324a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013252:	81fb      	strh	r3, [r7, #14]
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	441a      	add	r2, r3
 801325e:	89fb      	ldrh	r3, [r7, #14]
 8013260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801326c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013270:	b29b      	uxth	r3, r3
 8013272:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	78db      	ldrb	r3, [r3, #3]
 8013278:	2b01      	cmp	r3, #1
 801327a:	d06c      	beq.n	8013356 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	009b      	lsls	r3, r3, #2
 8013284:	4413      	add	r3, r2
 8013286:	881b      	ldrh	r3, [r3, #0]
 8013288:	b29b      	uxth	r3, r3
 801328a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801328e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013292:	81bb      	strh	r3, [r7, #12]
 8013294:	89bb      	ldrh	r3, [r7, #12]
 8013296:	f083 0320 	eor.w	r3, r3, #32
 801329a:	81bb      	strh	r3, [r7, #12]
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	441a      	add	r2, r3
 80132a6:	89bb      	ldrh	r3, [r7, #12]
 80132a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	8013      	strh	r3, [r2, #0]
 80132bc:	e04b      	b.n	8013356 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	4413      	add	r3, r2
 80132c8:	881b      	ldrh	r3, [r3, #0]
 80132ca:	82fb      	strh	r3, [r7, #22]
 80132cc:	8afb      	ldrh	r3, [r7, #22]
 80132ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d01b      	beq.n	801330e <USB_EPClearStall+0x106>
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	4413      	add	r3, r2
 80132e0:	881b      	ldrh	r3, [r3, #0]
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132ec:	82bb      	strh	r3, [r7, #20]
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	009b      	lsls	r3, r3, #2
 80132f6:	441a      	add	r2, r3
 80132f8:	8abb      	ldrh	r3, [r7, #20]
 80132fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801330a:	b29b      	uxth	r3, r3
 801330c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	009b      	lsls	r3, r3, #2
 8013316:	4413      	add	r3, r2
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	b29b      	uxth	r3, r3
 801331c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013324:	827b      	strh	r3, [r7, #18]
 8013326:	8a7b      	ldrh	r3, [r7, #18]
 8013328:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801332c:	827b      	strh	r3, [r7, #18]
 801332e:	8a7b      	ldrh	r3, [r7, #18]
 8013330:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013334:	827b      	strh	r3, [r7, #18]
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	441a      	add	r2, r3
 8013340:	8a7b      	ldrh	r3, [r7, #18]
 8013342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801334a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801334e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013352:	b29b      	uxth	r3, r3
 8013354:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8013356:	2300      	movs	r3, #0
}
 8013358:	4618      	mov	r0, r3
 801335a:	371c      	adds	r7, #28
 801335c:	46bd      	mov	sp, r7
 801335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013362:	4770      	bx	lr

08013364 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8013364:	b480      	push	{r7}
 8013366:	b083      	sub	sp, #12
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	460b      	mov	r3, r1
 801336e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8013370:	78fb      	ldrb	r3, [r7, #3]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d103      	bne.n	801337e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2280      	movs	r2, #128	; 0x80
 801337a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801337e:	2300      	movs	r3, #0
}
 8013380:	4618      	mov	r0, r3
 8013382:	370c      	adds	r7, #12
 8013384:	46bd      	mov	sp, r7
 8013386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338a:	4770      	bx	lr

0801338c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801338c:	b480      	push	{r7}
 801338e:	b083      	sub	sp, #12
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801339a:	b29b      	uxth	r3, r3
 801339c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80133a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80133ac:	2300      	movs	r3, #0
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	370c      	adds	r7, #12
 80133b2:	46bd      	mov	sp, r7
 80133b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b8:	4770      	bx	lr

080133ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80133ba:	b480      	push	{r7}
 80133bc:	b085      	sub	sp, #20
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80133cc:	68fb      	ldr	r3, [r7, #12]
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3714      	adds	r7, #20
 80133d2:	46bd      	mov	sp, r7
 80133d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d8:	4770      	bx	lr

080133da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80133da:	b480      	push	{r7}
 80133dc:	b08d      	sub	sp, #52	; 0x34
 80133de:	af00      	add	r7, sp, #0
 80133e0:	60f8      	str	r0, [r7, #12]
 80133e2:	60b9      	str	r1, [r7, #8]
 80133e4:	4611      	mov	r1, r2
 80133e6:	461a      	mov	r2, r3
 80133e8:	460b      	mov	r3, r1
 80133ea:	80fb      	strh	r3, [r7, #6]
 80133ec:	4613      	mov	r3, r2
 80133ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80133f0:	88bb      	ldrh	r3, [r7, #4]
 80133f2:	3301      	adds	r3, #1
 80133f4:	085b      	lsrs	r3, r3, #1
 80133f6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013400:	88fa      	ldrh	r2, [r7, #6]
 8013402:	69fb      	ldr	r3, [r7, #28]
 8013404:	4413      	add	r3, r2
 8013406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801340a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 801340c:	6a3b      	ldr	r3, [r7, #32]
 801340e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013410:	e01b      	b.n	801344a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8013412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8013418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341a:	3301      	adds	r3, #1
 801341c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 801341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	b29b      	uxth	r3, r3
 8013424:	021b      	lsls	r3, r3, #8
 8013426:	b29b      	uxth	r3, r3
 8013428:	461a      	mov	r2, r3
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	4313      	orrs	r3, r2
 801342e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	b29a      	uxth	r2, r3
 8013434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013436:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	3302      	adds	r3, #2
 801343c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013440:	3301      	adds	r3, #1
 8013442:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8013444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013446:	3b01      	subs	r3, #1
 8013448:	62fb      	str	r3, [r7, #44]	; 0x2c
 801344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344c:	2b00      	cmp	r3, #0
 801344e:	d1e0      	bne.n	8013412 <USB_WritePMA+0x38>
  }
}
 8013450:	bf00      	nop
 8013452:	bf00      	nop
 8013454:	3734      	adds	r7, #52	; 0x34
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801345e:	b480      	push	{r7}
 8013460:	b08b      	sub	sp, #44	; 0x2c
 8013462:	af00      	add	r7, sp, #0
 8013464:	60f8      	str	r0, [r7, #12]
 8013466:	60b9      	str	r1, [r7, #8]
 8013468:	4611      	mov	r1, r2
 801346a:	461a      	mov	r2, r3
 801346c:	460b      	mov	r3, r1
 801346e:	80fb      	strh	r3, [r7, #6]
 8013470:	4613      	mov	r3, r2
 8013472:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8013474:	88bb      	ldrh	r3, [r7, #4]
 8013476:	085b      	lsrs	r3, r3, #1
 8013478:	b29b      	uxth	r3, r3
 801347a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013484:	88fa      	ldrh	r2, [r7, #6]
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	4413      	add	r3, r2
 801348a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801348e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	627b      	str	r3, [r7, #36]	; 0x24
 8013494:	e018      	b.n	80134c8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8013496:	6a3b      	ldr	r3, [r7, #32]
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	b29b      	uxth	r3, r3
 801349c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801349e:	6a3b      	ldr	r3, [r7, #32]
 80134a0:	3302      	adds	r3, #2
 80134a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	b2da      	uxtb	r2, r3
 80134a8:	69fb      	ldr	r3, [r7, #28]
 80134aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	3301      	adds	r3, #1
 80134b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	0a1b      	lsrs	r3, r3, #8
 80134b6:	b2da      	uxtb	r2, r3
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	3301      	adds	r3, #1
 80134c0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c4:	3b01      	subs	r3, #1
 80134c6:	627b      	str	r3, [r7, #36]	; 0x24
 80134c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d1e3      	bne.n	8013496 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80134ce:	88bb      	ldrh	r3, [r7, #4]
 80134d0:	f003 0301 	and.w	r3, r3, #1
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d007      	beq.n	80134ea <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80134da:	6a3b      	ldr	r3, [r7, #32]
 80134dc:	881b      	ldrh	r3, [r3, #0]
 80134de:	b29b      	uxth	r3, r3
 80134e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	701a      	strb	r2, [r3, #0]
  }
}
 80134ea:	bf00      	nop
 80134ec:	372c      	adds	r7, #44	; 0x2c
 80134ee:	46bd      	mov	sp, r7
 80134f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f4:	4770      	bx	lr

080134f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80134f6:	b580      	push	{r7, lr}
 80134f8:	b084      	sub	sp, #16
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]
 80134fe:	460b      	mov	r3, r1
 8013500:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013502:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013506:	f002 f931 	bl	801576c <USBD_static_malloc>
 801350a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d105      	bne.n	801351e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2200      	movs	r2, #0
 8013516:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801351a:	2302      	movs	r3, #2
 801351c:	e066      	b.n	80135ec <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	68fa      	ldr	r2, [r7, #12]
 8013522:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	7c1b      	ldrb	r3, [r3, #16]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d119      	bne.n	8013562 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801352e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013532:	2202      	movs	r2, #2
 8013534:	2181      	movs	r1, #129	; 0x81
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f001 ffbd 	bl	80154b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2201      	movs	r2, #1
 8013540:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013546:	2202      	movs	r2, #2
 8013548:	2101      	movs	r1, #1
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f001 ffb3 	bl	80154b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2201      	movs	r2, #1
 8013554:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2210      	movs	r2, #16
 801355c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013560:	e016      	b.n	8013590 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013562:	2340      	movs	r3, #64	; 0x40
 8013564:	2202      	movs	r2, #2
 8013566:	2181      	movs	r1, #129	; 0x81
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f001 ffa4 	bl	80154b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2201      	movs	r2, #1
 8013572:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013574:	2340      	movs	r3, #64	; 0x40
 8013576:	2202      	movs	r2, #2
 8013578:	2101      	movs	r1, #1
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f001 ff9b 	bl	80154b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2201      	movs	r2, #1
 8013584:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2210      	movs	r2, #16
 801358c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013590:	2308      	movs	r3, #8
 8013592:	2203      	movs	r2, #3
 8013594:	2182      	movs	r1, #130	; 0x82
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f001 ff8d 	bl	80154b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2201      	movs	r2, #1
 80135a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2200      	movs	r2, #0
 80135b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2200      	movs	r2, #0
 80135ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	7c1b      	ldrb	r3, [r3, #16]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d109      	bne.n	80135da <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80135cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135d0:	2101      	movs	r1, #1
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f002 f85f 	bl	8015696 <USBD_LL_PrepareReceive>
 80135d8:	e007      	b.n	80135ea <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80135e0:	2340      	movs	r3, #64	; 0x40
 80135e2:	2101      	movs	r1, #1
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f002 f856 	bl	8015696 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80135ea:	2300      	movs	r3, #0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3710      	adds	r7, #16
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	460b      	mov	r3, r1
 80135fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013600:	2181      	movs	r1, #129	; 0x81
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f001 ff7d 	bl	8015502 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801360e:	2101      	movs	r1, #1
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f001 ff76 	bl	8015502 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2200      	movs	r2, #0
 801361a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801361e:	2182      	movs	r1, #130	; 0x82
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f001 ff6e 	bl	8015502 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2200      	movs	r2, #0
 801362a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2200      	movs	r2, #0
 8013632:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801363c:	2b00      	cmp	r3, #0
 801363e:	d00e      	beq.n	801365e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013650:	4618      	mov	r0, r3
 8013652:	f002 f899 	bl	8015788 <USBD_static_free>
    pdev->pClassData = NULL;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2200      	movs	r2, #0
 801365a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801365e:	2300      	movs	r3, #0
}
 8013660:	4618      	mov	r0, r3
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013678:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801367a:	2300      	movs	r3, #0
 801367c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801367e:	2300      	movs	r3, #0
 8013680:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013682:	2300      	movs	r3, #0
 8013684:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d101      	bne.n	8013690 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801368c:	2303      	movs	r3, #3
 801368e:	e0af      	b.n	80137f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013698:	2b00      	cmp	r3, #0
 801369a:	d03f      	beq.n	801371c <USBD_CDC_Setup+0xb4>
 801369c:	2b20      	cmp	r3, #32
 801369e:	f040 809f 	bne.w	80137e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	88db      	ldrh	r3, [r3, #6]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d02e      	beq.n	8013708 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	b25b      	sxtb	r3, r3
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	da16      	bge.n	80136e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	683a      	ldr	r2, [r7, #0]
 80136be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80136c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80136c2:	683a      	ldr	r2, [r7, #0]
 80136c4:	88d2      	ldrh	r2, [r2, #6]
 80136c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	88db      	ldrh	r3, [r3, #6]
 80136cc:	2b07      	cmp	r3, #7
 80136ce:	bf28      	it	cs
 80136d0:	2307      	movcs	r3, #7
 80136d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	89fa      	ldrh	r2, [r7, #14]
 80136d8:	4619      	mov	r1, r3
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f001 facf 	bl	8014c7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80136e0:	e085      	b.n	80137ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	785a      	ldrb	r2, [r3, #1]
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	88db      	ldrh	r3, [r3, #6]
 80136f0:	b2da      	uxtb	r2, r3
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80136f8:	6939      	ldr	r1, [r7, #16]
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	88db      	ldrh	r3, [r3, #6]
 80136fe:	461a      	mov	r2, r3
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f001 fae8 	bl	8014cd6 <USBD_CtlPrepareRx>
      break;
 8013706:	e072      	b.n	80137ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801370e:	689b      	ldr	r3, [r3, #8]
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	7850      	ldrb	r0, [r2, #1]
 8013714:	2200      	movs	r2, #0
 8013716:	6839      	ldr	r1, [r7, #0]
 8013718:	4798      	blx	r3
      break;
 801371a:	e068      	b.n	80137ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	785b      	ldrb	r3, [r3, #1]
 8013720:	2b0b      	cmp	r3, #11
 8013722:	d852      	bhi.n	80137ca <USBD_CDC_Setup+0x162>
 8013724:	a201      	add	r2, pc, #4	; (adr r2, 801372c <USBD_CDC_Setup+0xc4>)
 8013726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801372a:	bf00      	nop
 801372c:	0801375d 	.word	0x0801375d
 8013730:	080137d9 	.word	0x080137d9
 8013734:	080137cb 	.word	0x080137cb
 8013738:	080137cb 	.word	0x080137cb
 801373c:	080137cb 	.word	0x080137cb
 8013740:	080137cb 	.word	0x080137cb
 8013744:	080137cb 	.word	0x080137cb
 8013748:	080137cb 	.word	0x080137cb
 801374c:	080137cb 	.word	0x080137cb
 8013750:	080137cb 	.word	0x080137cb
 8013754:	08013787 	.word	0x08013787
 8013758:	080137b1 	.word	0x080137b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013762:	b2db      	uxtb	r3, r3
 8013764:	2b03      	cmp	r3, #3
 8013766:	d107      	bne.n	8013778 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013768:	f107 030a 	add.w	r3, r7, #10
 801376c:	2202      	movs	r2, #2
 801376e:	4619      	mov	r1, r3
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f001 fa84 	bl	8014c7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013776:	e032      	b.n	80137de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013778:	6839      	ldr	r1, [r7, #0]
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f001 fa0e 	bl	8014b9c <USBD_CtlError>
            ret = USBD_FAIL;
 8013780:	2303      	movs	r3, #3
 8013782:	75fb      	strb	r3, [r7, #23]
          break;
 8013784:	e02b      	b.n	80137de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801378c:	b2db      	uxtb	r3, r3
 801378e:	2b03      	cmp	r3, #3
 8013790:	d107      	bne.n	80137a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013792:	f107 030d 	add.w	r3, r7, #13
 8013796:	2201      	movs	r2, #1
 8013798:	4619      	mov	r1, r3
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f001 fa6f 	bl	8014c7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80137a0:	e01d      	b.n	80137de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80137a2:	6839      	ldr	r1, [r7, #0]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f001 f9f9 	bl	8014b9c <USBD_CtlError>
            ret = USBD_FAIL;
 80137aa:	2303      	movs	r3, #3
 80137ac:	75fb      	strb	r3, [r7, #23]
          break;
 80137ae:	e016      	b.n	80137de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137b6:	b2db      	uxtb	r3, r3
 80137b8:	2b03      	cmp	r3, #3
 80137ba:	d00f      	beq.n	80137dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80137bc:	6839      	ldr	r1, [r7, #0]
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f001 f9ec 	bl	8014b9c <USBD_CtlError>
            ret = USBD_FAIL;
 80137c4:	2303      	movs	r3, #3
 80137c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80137c8:	e008      	b.n	80137dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80137ca:	6839      	ldr	r1, [r7, #0]
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f001 f9e5 	bl	8014b9c <USBD_CtlError>
          ret = USBD_FAIL;
 80137d2:	2303      	movs	r3, #3
 80137d4:	75fb      	strb	r3, [r7, #23]
          break;
 80137d6:	e002      	b.n	80137de <USBD_CDC_Setup+0x176>
          break;
 80137d8:	bf00      	nop
 80137da:	e008      	b.n	80137ee <USBD_CDC_Setup+0x186>
          break;
 80137dc:	bf00      	nop
      }
      break;
 80137de:	e006      	b.n	80137ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80137e0:	6839      	ldr	r1, [r7, #0]
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	f001 f9da 	bl	8014b9c <USBD_CtlError>
      ret = USBD_FAIL;
 80137e8:	2303      	movs	r3, #3
 80137ea:	75fb      	strb	r3, [r7, #23]
      break;
 80137ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80137ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3718      	adds	r7, #24
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}

080137f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b084      	sub	sp, #16
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	460b      	mov	r3, r1
 8013802:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801380a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013812:	2b00      	cmp	r3, #0
 8013814:	d101      	bne.n	801381a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013816:	2303      	movs	r3, #3
 8013818:	e04f      	b.n	80138ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013820:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013822:	78fa      	ldrb	r2, [r7, #3]
 8013824:	6879      	ldr	r1, [r7, #4]
 8013826:	4613      	mov	r3, r2
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	4413      	add	r3, r2
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	440b      	add	r3, r1
 8013830:	3318      	adds	r3, #24
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d029      	beq.n	801388c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013838:	78fa      	ldrb	r2, [r7, #3]
 801383a:	6879      	ldr	r1, [r7, #4]
 801383c:	4613      	mov	r3, r2
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	4413      	add	r3, r2
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	440b      	add	r3, r1
 8013846:	3318      	adds	r3, #24
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	78f9      	ldrb	r1, [r7, #3]
 801384c:	68f8      	ldr	r0, [r7, #12]
 801384e:	460b      	mov	r3, r1
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	440b      	add	r3, r1
 8013854:	00db      	lsls	r3, r3, #3
 8013856:	4403      	add	r3, r0
 8013858:	3338      	adds	r3, #56	; 0x38
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	fbb2 f1f3 	udiv	r1, r2, r3
 8013860:	fb01 f303 	mul.w	r3, r1, r3
 8013864:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013866:	2b00      	cmp	r3, #0
 8013868:	d110      	bne.n	801388c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801386a:	78fa      	ldrb	r2, [r7, #3]
 801386c:	6879      	ldr	r1, [r7, #4]
 801386e:	4613      	mov	r3, r2
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	4413      	add	r3, r2
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	440b      	add	r3, r1
 8013878:	3318      	adds	r3, #24
 801387a:	2200      	movs	r2, #0
 801387c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801387e:	78f9      	ldrb	r1, [r7, #3]
 8013880:	2300      	movs	r3, #0
 8013882:	2200      	movs	r2, #0
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f001 fee5 	bl	8015654 <USBD_LL_Transmit>
 801388a:	e015      	b.n	80138b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	2200      	movs	r2, #0
 8013890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801389a:	691b      	ldr	r3, [r3, #16]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d00b      	beq.n	80138b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138a6:	691b      	ldr	r3, [r3, #16]
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80138b4:	78fa      	ldrb	r2, [r7, #3]
 80138b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80138b8:	2300      	movs	r3, #0
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3710      	adds	r7, #16
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}

080138c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138c2:	b580      	push	{r7, lr}
 80138c4:	b084      	sub	sp, #16
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
 80138ca:	460b      	mov	r3, r1
 80138cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d101      	bne.n	80138e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80138e0:	2303      	movs	r3, #3
 80138e2:	e015      	b.n	8013910 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80138e4:	78fb      	ldrb	r3, [r7, #3]
 80138e6:	4619      	mov	r1, r3
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f001 fef5 	bl	80156d8 <USBD_LL_GetRxDataSize>
 80138ee:	4602      	mov	r2, r0
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138fc:	68db      	ldr	r3, [r3, #12]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013904:	68fa      	ldr	r2, [r7, #12]
 8013906:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801390a:	4611      	mov	r1, r2
 801390c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801390e:	2300      	movs	r3, #0
}
 8013910:	4618      	mov	r0, r3
 8013912:	3710      	adds	r7, #16
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b084      	sub	sp, #16
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013926:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d101      	bne.n	8013932 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801392e:	2303      	movs	r3, #3
 8013930:	e01b      	b.n	801396a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013938:	2b00      	cmp	r3, #0
 801393a:	d015      	beq.n	8013968 <USBD_CDC_EP0_RxReady+0x50>
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013942:	2bff      	cmp	r3, #255	; 0xff
 8013944:	d010      	beq.n	8013968 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801394c:	689b      	ldr	r3, [r3, #8]
 801394e:	68fa      	ldr	r2, [r7, #12]
 8013950:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013954:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013956:	68fa      	ldr	r2, [r7, #12]
 8013958:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801395c:	b292      	uxth	r2, r2
 801395e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	22ff      	movs	r2, #255	; 0xff
 8013964:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013968:	2300      	movs	r3, #0
}
 801396a:	4618      	mov	r0, r3
 801396c:	3710      	adds	r7, #16
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
	...

08013974 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013974:	b480      	push	{r7}
 8013976:	b083      	sub	sp, #12
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2243      	movs	r2, #67	; 0x43
 8013980:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013982:	4b03      	ldr	r3, [pc, #12]	; (8013990 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013984:	4618      	mov	r0, r3
 8013986:	370c      	adds	r7, #12
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr
 8013990:	20000094 	.word	0x20000094

08013994 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013994:	b480      	push	{r7}
 8013996:	b083      	sub	sp, #12
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2243      	movs	r2, #67	; 0x43
 80139a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80139a2:	4b03      	ldr	r3, [pc, #12]	; (80139b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	370c      	adds	r7, #12
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr
 80139b0:	20000050 	.word	0x20000050

080139b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139b4:	b480      	push	{r7}
 80139b6:	b083      	sub	sp, #12
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2243      	movs	r2, #67	; 0x43
 80139c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80139c2:	4b03      	ldr	r3, [pc, #12]	; (80139d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr
 80139d0:	200000d8 	.word	0x200000d8

080139d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	220a      	movs	r2, #10
 80139e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80139e2:	4b03      	ldr	r3, [pc, #12]	; (80139f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	370c      	adds	r7, #12
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr
 80139f0:	2000000c 	.word	0x2000000c

080139f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d101      	bne.n	8013a08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a04:	2303      	movs	r3, #3
 8013a06:	e004      	b.n	8013a12 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	683a      	ldr	r2, [r7, #0]
 8013a0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013a10:	2300      	movs	r3, #0
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	370c      	adds	r7, #12
 8013a16:	46bd      	mov	sp, r7
 8013a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1c:	4770      	bx	lr

08013a1e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013a1e:	b480      	push	{r7}
 8013a20:	b087      	sub	sp, #28
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	60f8      	str	r0, [r7, #12]
 8013a26:	60b9      	str	r1, [r7, #8]
 8013a28:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a30:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d101      	bne.n	8013a3c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013a38:	2303      	movs	r3, #3
 8013a3a:	e008      	b.n	8013a4e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	68ba      	ldr	r2, [r7, #8]
 8013a40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013a4c:	2300      	movs	r3, #0
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	371c      	adds	r7, #28
 8013a52:	46bd      	mov	sp, r7
 8013a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a58:	4770      	bx	lr

08013a5a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013a5a:	b480      	push	{r7}
 8013a5c:	b085      	sub	sp, #20
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	6078      	str	r0, [r7, #4]
 8013a62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a6a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013a72:	2303      	movs	r3, #3
 8013a74:	e004      	b.n	8013a80 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	683a      	ldr	r2, [r7, #0]
 8013a7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013a7e:	2300      	movs	r3, #0
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3714      	adds	r7, #20
 8013a84:	46bd      	mov	sp, r7
 8013a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8a:	4770      	bx	lr

08013a8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d101      	bne.n	8013aae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013aaa:	2303      	movs	r3, #3
 8013aac:	e01a      	b.n	8013ae4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d114      	bne.n	8013ae2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	2201      	movs	r2, #1
 8013abc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013ad6:	2181      	movs	r1, #129	; 0x81
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f001 fdbb 	bl	8015654 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3710      	adds	r7, #16
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}

08013aec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013afa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d101      	bne.n	8013b0a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013b06:	2303      	movs	r3, #3
 8013b08:	e016      	b.n	8013b38 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	7c1b      	ldrb	r3, [r3, #16]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d109      	bne.n	8013b26 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b1c:	2101      	movs	r1, #1
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f001 fdb9 	bl	8015696 <USBD_LL_PrepareReceive>
 8013b24:	e007      	b.n	8013b36 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013b2c:	2340      	movs	r3, #64	; 0x40
 8013b2e:	2101      	movs	r1, #1
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f001 fdb0 	bl	8015696 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013b36:	2300      	movs	r3, #0
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3710      	adds	r7, #16
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b086      	sub	sp, #24
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	60f8      	str	r0, [r7, #12]
 8013b48:	60b9      	str	r1, [r7, #8]
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013b54:	2303      	movs	r3, #3
 8013b56:	e01f      	b.n	8013b98 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	2200      	movs	r2, #0
 8013b64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d003      	beq.n	8013b7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	68ba      	ldr	r2, [r7, #8]
 8013b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2201      	movs	r2, #1
 8013b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	79fa      	ldrb	r2, [r7, #7]
 8013b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f001 fc17 	bl	80153c0 <USBD_LL_Init>
 8013b92:	4603      	mov	r3, r0
 8013b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}

08013ba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b084      	sub	sp, #16
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013baa:	2300      	movs	r3, #0
 8013bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d101      	bne.n	8013bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013bb4:	2303      	movs	r3, #3
 8013bb6:	e016      	b.n	8013be6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	683a      	ldr	r2, [r7, #0]
 8013bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00b      	beq.n	8013be4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd4:	f107 020e 	add.w	r2, r7, #14
 8013bd8:	4610      	mov	r0, r2
 8013bda:	4798      	blx	r3
 8013bdc:	4602      	mov	r2, r0
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013be4:	2300      	movs	r3, #0
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3710      	adds	r7, #16
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}

08013bee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013bee:	b580      	push	{r7, lr}
 8013bf0:	b082      	sub	sp, #8
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f001 fc42 	bl	8015480 <USBD_LL_Start>
 8013bfc:	4603      	mov	r3, r0
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3708      	adds	r7, #8
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013c06:	b480      	push	{r7}
 8013c08:	b083      	sub	sp, #12
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c0e:	2300      	movs	r3, #0
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	370c      	adds	r7, #12
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b084      	sub	sp, #16
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	460b      	mov	r3, r1
 8013c26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013c28:	2303      	movs	r3, #3
 8013c2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d009      	beq.n	8013c4a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	78fa      	ldrb	r2, [r7, #3]
 8013c40:	4611      	mov	r1, r2
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	4798      	blx	r3
 8013c46:	4603      	mov	r3, r0
 8013c48:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3710      	adds	r7, #16
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d007      	beq.n	8013c7a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	78fa      	ldrb	r2, [r7, #3]
 8013c74:	4611      	mov	r1, r2
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	4798      	blx	r3
  }

  return USBD_OK;
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b084      	sub	sp, #16
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c94:	6839      	ldr	r1, [r7, #0]
 8013c96:	4618      	mov	r0, r3
 8013c98:	f000 ff46 	bl	8014b28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013caa:	461a      	mov	r2, r3
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013cb8:	f003 031f 	and.w	r3, r3, #31
 8013cbc:	2b02      	cmp	r3, #2
 8013cbe:	d01a      	beq.n	8013cf6 <USBD_LL_SetupStage+0x72>
 8013cc0:	2b02      	cmp	r3, #2
 8013cc2:	d822      	bhi.n	8013d0a <USBD_LL_SetupStage+0x86>
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d002      	beq.n	8013cce <USBD_LL_SetupStage+0x4a>
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d00a      	beq.n	8013ce2 <USBD_LL_SetupStage+0x5e>
 8013ccc:	e01d      	b.n	8013d0a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f000 f9ee 	bl	80140b8 <USBD_StdDevReq>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	73fb      	strb	r3, [r7, #15]
      break;
 8013ce0:	e020      	b.n	8013d24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013ce8:	4619      	mov	r1, r3
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f000 fa52 	bl	8014194 <USBD_StdItfReq>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8013cf4:	e016      	b.n	8013d24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cfc:	4619      	mov	r1, r3
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f000 fa91 	bl	8014226 <USBD_StdEPReq>
 8013d04:	4603      	mov	r3, r0
 8013d06:	73fb      	strb	r3, [r7, #15]
      break;
 8013d08:	e00c      	b.n	8013d24 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	4619      	mov	r1, r3
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f001 fc11 	bl	8015540 <USBD_LL_StallEP>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	73fb      	strb	r3, [r7, #15]
      break;
 8013d22:	bf00      	nop
  }

  return ret;
 8013d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3710      	adds	r7, #16
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b086      	sub	sp, #24
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	60f8      	str	r0, [r7, #12]
 8013d36:	460b      	mov	r3, r1
 8013d38:	607a      	str	r2, [r7, #4]
 8013d3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013d3c:	7afb      	ldrb	r3, [r7, #11]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d138      	bne.n	8013db4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013d48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d50:	2b03      	cmp	r3, #3
 8013d52:	d14a      	bne.n	8013dea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	689a      	ldr	r2, [r3, #8]
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d913      	bls.n	8013d88 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	689a      	ldr	r2, [r3, #8]
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	1ad2      	subs	r2, r2, r3
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	68da      	ldr	r2, [r3, #12]
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	4293      	cmp	r3, r2
 8013d78:	bf28      	it	cs
 8013d7a:	4613      	movcs	r3, r2
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	6879      	ldr	r1, [r7, #4]
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f000 ffc5 	bl	8014d10 <USBD_CtlContinueRx>
 8013d86:	e030      	b.n	8013dea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b03      	cmp	r3, #3
 8013d92:	d10b      	bne.n	8013dac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d9a:	691b      	ldr	r3, [r3, #16]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d005      	beq.n	8013dac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013da6:	691b      	ldr	r3, [r3, #16]
 8013da8:	68f8      	ldr	r0, [r7, #12]
 8013daa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	f000 ffc0 	bl	8014d32 <USBD_CtlSendStatus>
 8013db2:	e01a      	b.n	8013dea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dba:	b2db      	uxtb	r3, r3
 8013dbc:	2b03      	cmp	r3, #3
 8013dbe:	d114      	bne.n	8013dea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d00e      	beq.n	8013dea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dd2:	699b      	ldr	r3, [r3, #24]
 8013dd4:	7afa      	ldrb	r2, [r7, #11]
 8013dd6:	4611      	mov	r1, r2
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	4798      	blx	r3
 8013ddc:	4603      	mov	r3, r0
 8013dde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013de0:	7dfb      	ldrb	r3, [r7, #23]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d001      	beq.n	8013dea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
 8013de8:	e000      	b.n	8013dec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013dea:	2300      	movs	r3, #0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3718      	adds	r7, #24
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	607a      	str	r2, [r7, #4]
 8013e00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013e02:	7afb      	ldrb	r3, [r7, #11]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d16b      	bne.n	8013ee0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	3314      	adds	r3, #20
 8013e0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d156      	bne.n	8013ec6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	689a      	ldr	r2, [r3, #8]
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d914      	bls.n	8013e4e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	689a      	ldr	r2, [r3, #8]
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	68db      	ldr	r3, [r3, #12]
 8013e2c:	1ad2      	subs	r2, r2, r3
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	461a      	mov	r2, r3
 8013e38:	6879      	ldr	r1, [r7, #4]
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f000 ff3a 	bl	8014cb4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e40:	2300      	movs	r3, #0
 8013e42:	2200      	movs	r2, #0
 8013e44:	2100      	movs	r1, #0
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f001 fc25 	bl	8015696 <USBD_LL_PrepareReceive>
 8013e4c:	e03b      	b.n	8013ec6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	68da      	ldr	r2, [r3, #12]
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	689b      	ldr	r3, [r3, #8]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d11c      	bne.n	8013e94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	685a      	ldr	r2, [r3, #4]
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d316      	bcc.n	8013e94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	685a      	ldr	r2, [r3, #4]
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d20f      	bcs.n	8013e94 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013e74:	2200      	movs	r2, #0
 8013e76:	2100      	movs	r1, #0
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f000 ff1b 	bl	8014cb4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2200      	movs	r2, #0
 8013e82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e86:	2300      	movs	r3, #0
 8013e88:	2200      	movs	r2, #0
 8013e8a:	2100      	movs	r1, #0
 8013e8c:	68f8      	ldr	r0, [r7, #12]
 8013e8e:	f001 fc02 	bl	8015696 <USBD_LL_PrepareReceive>
 8013e92:	e018      	b.n	8013ec6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	2b03      	cmp	r3, #3
 8013e9e:	d10b      	bne.n	8013eb8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ea6:	68db      	ldr	r3, [r3, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d005      	beq.n	8013eb8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	68f8      	ldr	r0, [r7, #12]
 8013eb6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013eb8:	2180      	movs	r1, #128	; 0x80
 8013eba:	68f8      	ldr	r0, [r7, #12]
 8013ebc:	f001 fb40 	bl	8015540 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013ec0:	68f8      	ldr	r0, [r7, #12]
 8013ec2:	f000 ff49 	bl	8014d58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d122      	bne.n	8013f16 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f7ff fe98 	bl	8013c06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013ede:	e01a      	b.n	8013f16 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	2b03      	cmp	r3, #3
 8013eea:	d114      	bne.n	8013f16 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ef2:	695b      	ldr	r3, [r3, #20]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d00e      	beq.n	8013f16 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013efe:	695b      	ldr	r3, [r3, #20]
 8013f00:	7afa      	ldrb	r2, [r7, #11]
 8013f02:	4611      	mov	r1, r2
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	4798      	blx	r3
 8013f08:	4603      	mov	r3, r0
 8013f0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013f0c:	7dfb      	ldrb	r3, [r7, #23]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d001      	beq.n	8013f16 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013f12:	7dfb      	ldrb	r3, [r7, #23]
 8013f14:	e000      	b.n	8013f18 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013f16:	2300      	movs	r3, #0
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3718      	adds	r7, #24
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2201      	movs	r2, #1
 8013f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2200      	movs	r2, #0
 8013f34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d101      	bne.n	8013f54 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013f50:	2303      	movs	r3, #3
 8013f52:	e02f      	b.n	8013fb4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d00f      	beq.n	8013f7e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f64:	685b      	ldr	r3, [r3, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d009      	beq.n	8013f7e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	6852      	ldr	r2, [r2, #4]
 8013f76:	b2d2      	uxtb	r2, r2
 8013f78:	4611      	mov	r1, r2
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f7e:	2340      	movs	r3, #64	; 0x40
 8013f80:	2200      	movs	r2, #0
 8013f82:	2100      	movs	r1, #0
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f001 fa96 	bl	80154b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2240      	movs	r2, #64	; 0x40
 8013f96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f9a:	2340      	movs	r3, #64	; 0x40
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	2180      	movs	r1, #128	; 0x80
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f001 fa88 	bl	80154b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	2201      	movs	r2, #1
 8013faa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2240      	movs	r2, #64	; 0x40
 8013fb0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013fb2:	2300      	movs	r3, #0
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3708      	adds	r7, #8
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b083      	sub	sp, #12
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	78fa      	ldrb	r2, [r7, #3]
 8013fcc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013fce:	2300      	movs	r3, #0
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	370c      	adds	r7, #12
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fda:	4770      	bx	lr

08013fdc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013fdc:	b480      	push	{r7}
 8013fde:	b083      	sub	sp, #12
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fea:	b2da      	uxtb	r2, r3
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2204      	movs	r2, #4
 8013ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013ffa:	2300      	movs	r3, #0
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr

08014008 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014016:	b2db      	uxtb	r3, r3
 8014018:	2b04      	cmp	r3, #4
 801401a:	d106      	bne.n	801402a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014022:	b2da      	uxtb	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801402a:	2300      	movs	r3, #0
}
 801402c:	4618      	mov	r0, r3
 801402e:	370c      	adds	r7, #12
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr

08014038 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014046:	2b00      	cmp	r3, #0
 8014048:	d101      	bne.n	801404e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801404a:	2303      	movs	r3, #3
 801404c:	e012      	b.n	8014074 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014054:	b2db      	uxtb	r3, r3
 8014056:	2b03      	cmp	r3, #3
 8014058:	d10b      	bne.n	8014072 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014060:	69db      	ldr	r3, [r3, #28]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d005      	beq.n	8014072 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801406c:	69db      	ldr	r3, [r3, #28]
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014072:	2300      	movs	r3, #0
}
 8014074:	4618      	mov	r0, r3
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801407c:	b480      	push	{r7}
 801407e:	b087      	sub	sp, #28
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	3301      	adds	r3, #1
 8014092:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801409a:	8a3b      	ldrh	r3, [r7, #16]
 801409c:	021b      	lsls	r3, r3, #8
 801409e:	b21a      	sxth	r2, r3
 80140a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140a4:	4313      	orrs	r3, r2
 80140a6:	b21b      	sxth	r3, r3
 80140a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80140aa:	89fb      	ldrh	r3, [r7, #14]
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	371c      	adds	r7, #28
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr

080140b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b084      	sub	sp, #16
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140c2:	2300      	movs	r3, #0
 80140c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140ce:	2b40      	cmp	r3, #64	; 0x40
 80140d0:	d005      	beq.n	80140de <USBD_StdDevReq+0x26>
 80140d2:	2b40      	cmp	r3, #64	; 0x40
 80140d4:	d853      	bhi.n	801417e <USBD_StdDevReq+0xc6>
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00b      	beq.n	80140f2 <USBD_StdDevReq+0x3a>
 80140da:	2b20      	cmp	r3, #32
 80140dc:	d14f      	bne.n	801417e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140e4:	689b      	ldr	r3, [r3, #8]
 80140e6:	6839      	ldr	r1, [r7, #0]
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	4798      	blx	r3
 80140ec:	4603      	mov	r3, r0
 80140ee:	73fb      	strb	r3, [r7, #15]
      break;
 80140f0:	e04a      	b.n	8014188 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	785b      	ldrb	r3, [r3, #1]
 80140f6:	2b09      	cmp	r3, #9
 80140f8:	d83b      	bhi.n	8014172 <USBD_StdDevReq+0xba>
 80140fa:	a201      	add	r2, pc, #4	; (adr r2, 8014100 <USBD_StdDevReq+0x48>)
 80140fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014100:	08014155 	.word	0x08014155
 8014104:	08014169 	.word	0x08014169
 8014108:	08014173 	.word	0x08014173
 801410c:	0801415f 	.word	0x0801415f
 8014110:	08014173 	.word	0x08014173
 8014114:	08014133 	.word	0x08014133
 8014118:	08014129 	.word	0x08014129
 801411c:	08014173 	.word	0x08014173
 8014120:	0801414b 	.word	0x0801414b
 8014124:	0801413d 	.word	0x0801413d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014128:	6839      	ldr	r1, [r7, #0]
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 f9de 	bl	80144ec <USBD_GetDescriptor>
          break;
 8014130:	e024      	b.n	801417c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014132:	6839      	ldr	r1, [r7, #0]
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 fb6d 	bl	8014814 <USBD_SetAddress>
          break;
 801413a:	e01f      	b.n	801417c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801413c:	6839      	ldr	r1, [r7, #0]
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f000 fbac 	bl	801489c <USBD_SetConfig>
 8014144:	4603      	mov	r3, r0
 8014146:	73fb      	strb	r3, [r7, #15]
          break;
 8014148:	e018      	b.n	801417c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fc4b 	bl	80149e8 <USBD_GetConfig>
          break;
 8014152:	e013      	b.n	801417c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014154:	6839      	ldr	r1, [r7, #0]
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 fc7c 	bl	8014a54 <USBD_GetStatus>
          break;
 801415c:	e00e      	b.n	801417c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801415e:	6839      	ldr	r1, [r7, #0]
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f000 fcab 	bl	8014abc <USBD_SetFeature>
          break;
 8014166:	e009      	b.n	801417c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014168:	6839      	ldr	r1, [r7, #0]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f000 fcba 	bl	8014ae4 <USBD_ClrFeature>
          break;
 8014170:	e004      	b.n	801417c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014172:	6839      	ldr	r1, [r7, #0]
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f000 fd11 	bl	8014b9c <USBD_CtlError>
          break;
 801417a:	bf00      	nop
      }
      break;
 801417c:	e004      	b.n	8014188 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f000 fd0b 	bl	8014b9c <USBD_CtlError>
      break;
 8014186:	bf00      	nop
  }

  return ret;
 8014188:	7bfb      	ldrb	r3, [r7, #15]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop

08014194 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b084      	sub	sp, #16
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141aa:	2b40      	cmp	r3, #64	; 0x40
 80141ac:	d005      	beq.n	80141ba <USBD_StdItfReq+0x26>
 80141ae:	2b40      	cmp	r3, #64	; 0x40
 80141b0:	d82f      	bhi.n	8014212 <USBD_StdItfReq+0x7e>
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d001      	beq.n	80141ba <USBD_StdItfReq+0x26>
 80141b6:	2b20      	cmp	r3, #32
 80141b8:	d12b      	bne.n	8014212 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141c0:	b2db      	uxtb	r3, r3
 80141c2:	3b01      	subs	r3, #1
 80141c4:	2b02      	cmp	r3, #2
 80141c6:	d81d      	bhi.n	8014204 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	889b      	ldrh	r3, [r3, #4]
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	2b01      	cmp	r3, #1
 80141d0:	d813      	bhi.n	80141fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141d8:	689b      	ldr	r3, [r3, #8]
 80141da:	6839      	ldr	r1, [r7, #0]
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	4798      	blx	r3
 80141e0:	4603      	mov	r3, r0
 80141e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	88db      	ldrh	r3, [r3, #6]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d110      	bne.n	801420e <USBD_StdItfReq+0x7a>
 80141ec:	7bfb      	ldrb	r3, [r7, #15]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d10d      	bne.n	801420e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f000 fd9d 	bl	8014d32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80141f8:	e009      	b.n	801420e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80141fa:	6839      	ldr	r1, [r7, #0]
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f000 fccd 	bl	8014b9c <USBD_CtlError>
          break;
 8014202:	e004      	b.n	801420e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014204:	6839      	ldr	r1, [r7, #0]
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f000 fcc8 	bl	8014b9c <USBD_CtlError>
          break;
 801420c:	e000      	b.n	8014210 <USBD_StdItfReq+0x7c>
          break;
 801420e:	bf00      	nop
      }
      break;
 8014210:	e004      	b.n	801421c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014212:	6839      	ldr	r1, [r7, #0]
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fcc1 	bl	8014b9c <USBD_CtlError>
      break;
 801421a:	bf00      	nop
  }

  return ret;
 801421c:	7bfb      	ldrb	r3, [r7, #15]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}

08014226 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b084      	sub	sp, #16
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
 801422e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014230:	2300      	movs	r3, #0
 8014232:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	889b      	ldrh	r3, [r3, #4]
 8014238:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014242:	2b40      	cmp	r3, #64	; 0x40
 8014244:	d007      	beq.n	8014256 <USBD_StdEPReq+0x30>
 8014246:	2b40      	cmp	r3, #64	; 0x40
 8014248:	f200 8145 	bhi.w	80144d6 <USBD_StdEPReq+0x2b0>
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00c      	beq.n	801426a <USBD_StdEPReq+0x44>
 8014250:	2b20      	cmp	r3, #32
 8014252:	f040 8140 	bne.w	80144d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	6839      	ldr	r1, [r7, #0]
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	4798      	blx	r3
 8014264:	4603      	mov	r3, r0
 8014266:	73fb      	strb	r3, [r7, #15]
      break;
 8014268:	e13a      	b.n	80144e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	785b      	ldrb	r3, [r3, #1]
 801426e:	2b03      	cmp	r3, #3
 8014270:	d007      	beq.n	8014282 <USBD_StdEPReq+0x5c>
 8014272:	2b03      	cmp	r3, #3
 8014274:	f300 8129 	bgt.w	80144ca <USBD_StdEPReq+0x2a4>
 8014278:	2b00      	cmp	r3, #0
 801427a:	d07f      	beq.n	801437c <USBD_StdEPReq+0x156>
 801427c:	2b01      	cmp	r3, #1
 801427e:	d03c      	beq.n	80142fa <USBD_StdEPReq+0xd4>
 8014280:	e123      	b.n	80144ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014288:	b2db      	uxtb	r3, r3
 801428a:	2b02      	cmp	r3, #2
 801428c:	d002      	beq.n	8014294 <USBD_StdEPReq+0x6e>
 801428e:	2b03      	cmp	r3, #3
 8014290:	d016      	beq.n	80142c0 <USBD_StdEPReq+0x9a>
 8014292:	e02c      	b.n	80142ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014294:	7bbb      	ldrb	r3, [r7, #14]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d00d      	beq.n	80142b6 <USBD_StdEPReq+0x90>
 801429a:	7bbb      	ldrb	r3, [r7, #14]
 801429c:	2b80      	cmp	r3, #128	; 0x80
 801429e:	d00a      	beq.n	80142b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80142a0:	7bbb      	ldrb	r3, [r7, #14]
 80142a2:	4619      	mov	r1, r3
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f001 f94b 	bl	8015540 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80142aa:	2180      	movs	r1, #128	; 0x80
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f001 f947 	bl	8015540 <USBD_LL_StallEP>
 80142b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80142b4:	e020      	b.n	80142f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80142b6:	6839      	ldr	r1, [r7, #0]
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f000 fc6f 	bl	8014b9c <USBD_CtlError>
              break;
 80142be:	e01b      	b.n	80142f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	885b      	ldrh	r3, [r3, #2]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d10e      	bne.n	80142e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80142c8:	7bbb      	ldrb	r3, [r7, #14]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d00b      	beq.n	80142e6 <USBD_StdEPReq+0xc0>
 80142ce:	7bbb      	ldrb	r3, [r7, #14]
 80142d0:	2b80      	cmp	r3, #128	; 0x80
 80142d2:	d008      	beq.n	80142e6 <USBD_StdEPReq+0xc0>
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	88db      	ldrh	r3, [r3, #6]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d104      	bne.n	80142e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80142dc:	7bbb      	ldrb	r3, [r7, #14]
 80142de:	4619      	mov	r1, r3
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f001 f92d 	bl	8015540 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f000 fd23 	bl	8014d32 <USBD_CtlSendStatus>

              break;
 80142ec:	e004      	b.n	80142f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80142ee:	6839      	ldr	r1, [r7, #0]
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f000 fc53 	bl	8014b9c <USBD_CtlError>
              break;
 80142f6:	bf00      	nop
          }
          break;
 80142f8:	e0ec      	b.n	80144d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014300:	b2db      	uxtb	r3, r3
 8014302:	2b02      	cmp	r3, #2
 8014304:	d002      	beq.n	801430c <USBD_StdEPReq+0xe6>
 8014306:	2b03      	cmp	r3, #3
 8014308:	d016      	beq.n	8014338 <USBD_StdEPReq+0x112>
 801430a:	e030      	b.n	801436e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801430c:	7bbb      	ldrb	r3, [r7, #14]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00d      	beq.n	801432e <USBD_StdEPReq+0x108>
 8014312:	7bbb      	ldrb	r3, [r7, #14]
 8014314:	2b80      	cmp	r3, #128	; 0x80
 8014316:	d00a      	beq.n	801432e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014318:	7bbb      	ldrb	r3, [r7, #14]
 801431a:	4619      	mov	r1, r3
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f001 f90f 	bl	8015540 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014322:	2180      	movs	r1, #128	; 0x80
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f001 f90b 	bl	8015540 <USBD_LL_StallEP>
 801432a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801432c:	e025      	b.n	801437a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801432e:	6839      	ldr	r1, [r7, #0]
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f000 fc33 	bl	8014b9c <USBD_CtlError>
              break;
 8014336:	e020      	b.n	801437a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	885b      	ldrh	r3, [r3, #2]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d11b      	bne.n	8014378 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014340:	7bbb      	ldrb	r3, [r7, #14]
 8014342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014346:	2b00      	cmp	r3, #0
 8014348:	d004      	beq.n	8014354 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801434a:	7bbb      	ldrb	r3, [r7, #14]
 801434c:	4619      	mov	r1, r3
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f001 f915 	bl	801557e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 fcec 	bl	8014d32 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014360:	689b      	ldr	r3, [r3, #8]
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	4798      	blx	r3
 8014368:	4603      	mov	r3, r0
 801436a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801436c:	e004      	b.n	8014378 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801436e:	6839      	ldr	r1, [r7, #0]
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f000 fc13 	bl	8014b9c <USBD_CtlError>
              break;
 8014376:	e000      	b.n	801437a <USBD_StdEPReq+0x154>
              break;
 8014378:	bf00      	nop
          }
          break;
 801437a:	e0ab      	b.n	80144d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014382:	b2db      	uxtb	r3, r3
 8014384:	2b02      	cmp	r3, #2
 8014386:	d002      	beq.n	801438e <USBD_StdEPReq+0x168>
 8014388:	2b03      	cmp	r3, #3
 801438a:	d032      	beq.n	80143f2 <USBD_StdEPReq+0x1cc>
 801438c:	e097      	b.n	80144be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801438e:	7bbb      	ldrb	r3, [r7, #14]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d007      	beq.n	80143a4 <USBD_StdEPReq+0x17e>
 8014394:	7bbb      	ldrb	r3, [r7, #14]
 8014396:	2b80      	cmp	r3, #128	; 0x80
 8014398:	d004      	beq.n	80143a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801439a:	6839      	ldr	r1, [r7, #0]
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f000 fbfd 	bl	8014b9c <USBD_CtlError>
                break;
 80143a2:	e091      	b.n	80144c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	da0b      	bge.n	80143c4 <USBD_StdEPReq+0x19e>
 80143ac:	7bbb      	ldrb	r3, [r7, #14]
 80143ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143b2:	4613      	mov	r3, r2
 80143b4:	009b      	lsls	r3, r3, #2
 80143b6:	4413      	add	r3, r2
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	3310      	adds	r3, #16
 80143bc:	687a      	ldr	r2, [r7, #4]
 80143be:	4413      	add	r3, r2
 80143c0:	3304      	adds	r3, #4
 80143c2:	e00b      	b.n	80143dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80143c4:	7bbb      	ldrb	r3, [r7, #14]
 80143c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143ca:	4613      	mov	r3, r2
 80143cc:	009b      	lsls	r3, r3, #2
 80143ce:	4413      	add	r3, r2
 80143d0:	009b      	lsls	r3, r3, #2
 80143d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80143d6:	687a      	ldr	r2, [r7, #4]
 80143d8:	4413      	add	r3, r2
 80143da:	3304      	adds	r3, #4
 80143dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	2202      	movs	r2, #2
 80143e8:	4619      	mov	r1, r3
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f000 fc47 	bl	8014c7e <USBD_CtlSendData>
              break;
 80143f0:	e06a      	b.n	80144c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80143f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	da11      	bge.n	801441e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80143fa:	7bbb      	ldrb	r3, [r7, #14]
 80143fc:	f003 020f 	and.w	r2, r3, #15
 8014400:	6879      	ldr	r1, [r7, #4]
 8014402:	4613      	mov	r3, r2
 8014404:	009b      	lsls	r3, r3, #2
 8014406:	4413      	add	r3, r2
 8014408:	009b      	lsls	r3, r3, #2
 801440a:	440b      	add	r3, r1
 801440c:	3324      	adds	r3, #36	; 0x24
 801440e:	881b      	ldrh	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d117      	bne.n	8014444 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014414:	6839      	ldr	r1, [r7, #0]
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f000 fbc0 	bl	8014b9c <USBD_CtlError>
                  break;
 801441c:	e054      	b.n	80144c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801441e:	7bbb      	ldrb	r3, [r7, #14]
 8014420:	f003 020f 	and.w	r2, r3, #15
 8014424:	6879      	ldr	r1, [r7, #4]
 8014426:	4613      	mov	r3, r2
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	4413      	add	r3, r2
 801442c:	009b      	lsls	r3, r3, #2
 801442e:	440b      	add	r3, r1
 8014430:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014434:	881b      	ldrh	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d104      	bne.n	8014444 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801443a:	6839      	ldr	r1, [r7, #0]
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f000 fbad 	bl	8014b9c <USBD_CtlError>
                  break;
 8014442:	e041      	b.n	80144c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014448:	2b00      	cmp	r3, #0
 801444a:	da0b      	bge.n	8014464 <USBD_StdEPReq+0x23e>
 801444c:	7bbb      	ldrb	r3, [r7, #14]
 801444e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014452:	4613      	mov	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	4413      	add	r3, r2
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	3310      	adds	r3, #16
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	4413      	add	r3, r2
 8014460:	3304      	adds	r3, #4
 8014462:	e00b      	b.n	801447c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014464:	7bbb      	ldrb	r3, [r7, #14]
 8014466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801446a:	4613      	mov	r3, r2
 801446c:	009b      	lsls	r3, r3, #2
 801446e:	4413      	add	r3, r2
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014476:	687a      	ldr	r2, [r7, #4]
 8014478:	4413      	add	r3, r2
 801447a:	3304      	adds	r3, #4
 801447c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801447e:	7bbb      	ldrb	r3, [r7, #14]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d002      	beq.n	801448a <USBD_StdEPReq+0x264>
 8014484:	7bbb      	ldrb	r3, [r7, #14]
 8014486:	2b80      	cmp	r3, #128	; 0x80
 8014488:	d103      	bne.n	8014492 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2200      	movs	r2, #0
 801448e:	601a      	str	r2, [r3, #0]
 8014490:	e00e      	b.n	80144b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014492:	7bbb      	ldrb	r3, [r7, #14]
 8014494:	4619      	mov	r1, r3
 8014496:	6878      	ldr	r0, [r7, #4]
 8014498:	f001 f890 	bl	80155bc <USBD_LL_IsStallEP>
 801449c:	4603      	mov	r3, r0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d003      	beq.n	80144aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	2201      	movs	r2, #1
 80144a6:	601a      	str	r2, [r3, #0]
 80144a8:	e002      	b.n	80144b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	2200      	movs	r2, #0
 80144ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	2202      	movs	r2, #2
 80144b4:	4619      	mov	r1, r3
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f000 fbe1 	bl	8014c7e <USBD_CtlSendData>
              break;
 80144bc:	e004      	b.n	80144c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80144be:	6839      	ldr	r1, [r7, #0]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 fb6b 	bl	8014b9c <USBD_CtlError>
              break;
 80144c6:	bf00      	nop
          }
          break;
 80144c8:	e004      	b.n	80144d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80144ca:	6839      	ldr	r1, [r7, #0]
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f000 fb65 	bl	8014b9c <USBD_CtlError>
          break;
 80144d2:	bf00      	nop
      }
      break;
 80144d4:	e004      	b.n	80144e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fb5f 	bl	8014b9c <USBD_CtlError>
      break;
 80144de:	bf00      	nop
  }

  return ret;
 80144e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3710      	adds	r7, #16
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
	...

080144ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80144f6:	2300      	movs	r3, #0
 80144f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80144fa:	2300      	movs	r3, #0
 80144fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80144fe:	2300      	movs	r3, #0
 8014500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	885b      	ldrh	r3, [r3, #2]
 8014506:	0a1b      	lsrs	r3, r3, #8
 8014508:	b29b      	uxth	r3, r3
 801450a:	3b01      	subs	r3, #1
 801450c:	2b0e      	cmp	r3, #14
 801450e:	f200 8152 	bhi.w	80147b6 <USBD_GetDescriptor+0x2ca>
 8014512:	a201      	add	r2, pc, #4	; (adr r2, 8014518 <USBD_GetDescriptor+0x2c>)
 8014514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014518:	08014589 	.word	0x08014589
 801451c:	080145a1 	.word	0x080145a1
 8014520:	080145e1 	.word	0x080145e1
 8014524:	080147b7 	.word	0x080147b7
 8014528:	080147b7 	.word	0x080147b7
 801452c:	08014757 	.word	0x08014757
 8014530:	08014783 	.word	0x08014783
 8014534:	080147b7 	.word	0x080147b7
 8014538:	080147b7 	.word	0x080147b7
 801453c:	080147b7 	.word	0x080147b7
 8014540:	080147b7 	.word	0x080147b7
 8014544:	080147b7 	.word	0x080147b7
 8014548:	080147b7 	.word	0x080147b7
 801454c:	080147b7 	.word	0x080147b7
 8014550:	08014555 	.word	0x08014555
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801455a:	69db      	ldr	r3, [r3, #28]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00b      	beq.n	8014578 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014566:	69db      	ldr	r3, [r3, #28]
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	7c12      	ldrb	r2, [r2, #16]
 801456c:	f107 0108 	add.w	r1, r7, #8
 8014570:	4610      	mov	r0, r2
 8014572:	4798      	blx	r3
 8014574:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014576:	e126      	b.n	80147c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014578:	6839      	ldr	r1, [r7, #0]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fb0e 	bl	8014b9c <USBD_CtlError>
        err++;
 8014580:	7afb      	ldrb	r3, [r7, #11]
 8014582:	3301      	adds	r3, #1
 8014584:	72fb      	strb	r3, [r7, #11]
      break;
 8014586:	e11e      	b.n	80147c6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	687a      	ldr	r2, [r7, #4]
 8014592:	7c12      	ldrb	r2, [r2, #16]
 8014594:	f107 0108 	add.w	r1, r7, #8
 8014598:	4610      	mov	r0, r2
 801459a:	4798      	blx	r3
 801459c:	60f8      	str	r0, [r7, #12]
      break;
 801459e:	e112      	b.n	80147c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	7c1b      	ldrb	r3, [r3, #16]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d10d      	bne.n	80145c4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b0:	f107 0208 	add.w	r2, r7, #8
 80145b4:	4610      	mov	r0, r2
 80145b6:	4798      	blx	r3
 80145b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	3301      	adds	r3, #1
 80145be:	2202      	movs	r2, #2
 80145c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80145c2:	e100      	b.n	80147c6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145cc:	f107 0208 	add.w	r2, r7, #8
 80145d0:	4610      	mov	r0, r2
 80145d2:	4798      	blx	r3
 80145d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	3301      	adds	r3, #1
 80145da:	2202      	movs	r2, #2
 80145dc:	701a      	strb	r2, [r3, #0]
      break;
 80145de:	e0f2      	b.n	80147c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	885b      	ldrh	r3, [r3, #2]
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	2b05      	cmp	r3, #5
 80145e8:	f200 80ac 	bhi.w	8014744 <USBD_GetDescriptor+0x258>
 80145ec:	a201      	add	r2, pc, #4	; (adr r2, 80145f4 <USBD_GetDescriptor+0x108>)
 80145ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f2:	bf00      	nop
 80145f4:	0801460d 	.word	0x0801460d
 80145f8:	08014641 	.word	0x08014641
 80145fc:	08014675 	.word	0x08014675
 8014600:	080146a9 	.word	0x080146a9
 8014604:	080146dd 	.word	0x080146dd
 8014608:	08014711 	.word	0x08014711
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d00b      	beq.n	8014630 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	7c12      	ldrb	r2, [r2, #16]
 8014624:	f107 0108 	add.w	r1, r7, #8
 8014628:	4610      	mov	r0, r2
 801462a:	4798      	blx	r3
 801462c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801462e:	e091      	b.n	8014754 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014630:	6839      	ldr	r1, [r7, #0]
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f000 fab2 	bl	8014b9c <USBD_CtlError>
            err++;
 8014638:	7afb      	ldrb	r3, [r7, #11]
 801463a:	3301      	adds	r3, #1
 801463c:	72fb      	strb	r3, [r7, #11]
          break;
 801463e:	e089      	b.n	8014754 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014646:	689b      	ldr	r3, [r3, #8]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d00b      	beq.n	8014664 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	7c12      	ldrb	r2, [r2, #16]
 8014658:	f107 0108 	add.w	r1, r7, #8
 801465c:	4610      	mov	r0, r2
 801465e:	4798      	blx	r3
 8014660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014662:	e077      	b.n	8014754 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014664:	6839      	ldr	r1, [r7, #0]
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f000 fa98 	bl	8014b9c <USBD_CtlError>
            err++;
 801466c:	7afb      	ldrb	r3, [r7, #11]
 801466e:	3301      	adds	r3, #1
 8014670:	72fb      	strb	r3, [r7, #11]
          break;
 8014672:	e06f      	b.n	8014754 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d00b      	beq.n	8014698 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014686:	68db      	ldr	r3, [r3, #12]
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	7c12      	ldrb	r2, [r2, #16]
 801468c:	f107 0108 	add.w	r1, r7, #8
 8014690:	4610      	mov	r0, r2
 8014692:	4798      	blx	r3
 8014694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014696:	e05d      	b.n	8014754 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014698:	6839      	ldr	r1, [r7, #0]
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 fa7e 	bl	8014b9c <USBD_CtlError>
            err++;
 80146a0:	7afb      	ldrb	r3, [r7, #11]
 80146a2:	3301      	adds	r3, #1
 80146a4:	72fb      	strb	r3, [r7, #11]
          break;
 80146a6:	e055      	b.n	8014754 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d00b      	beq.n	80146cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ba:	691b      	ldr	r3, [r3, #16]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	7c12      	ldrb	r2, [r2, #16]
 80146c0:	f107 0108 	add.w	r1, r7, #8
 80146c4:	4610      	mov	r0, r2
 80146c6:	4798      	blx	r3
 80146c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146ca:	e043      	b.n	8014754 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146cc:	6839      	ldr	r1, [r7, #0]
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 fa64 	bl	8014b9c <USBD_CtlError>
            err++;
 80146d4:	7afb      	ldrb	r3, [r7, #11]
 80146d6:	3301      	adds	r3, #1
 80146d8:	72fb      	strb	r3, [r7, #11]
          break;
 80146da:	e03b      	b.n	8014754 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146e2:	695b      	ldr	r3, [r3, #20]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00b      	beq.n	8014700 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ee:	695b      	ldr	r3, [r3, #20]
 80146f0:	687a      	ldr	r2, [r7, #4]
 80146f2:	7c12      	ldrb	r2, [r2, #16]
 80146f4:	f107 0108 	add.w	r1, r7, #8
 80146f8:	4610      	mov	r0, r2
 80146fa:	4798      	blx	r3
 80146fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146fe:	e029      	b.n	8014754 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014700:	6839      	ldr	r1, [r7, #0]
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f000 fa4a 	bl	8014b9c <USBD_CtlError>
            err++;
 8014708:	7afb      	ldrb	r3, [r7, #11]
 801470a:	3301      	adds	r3, #1
 801470c:	72fb      	strb	r3, [r7, #11]
          break;
 801470e:	e021      	b.n	8014754 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014716:	699b      	ldr	r3, [r3, #24]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d00b      	beq.n	8014734 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014722:	699b      	ldr	r3, [r3, #24]
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	7c12      	ldrb	r2, [r2, #16]
 8014728:	f107 0108 	add.w	r1, r7, #8
 801472c:	4610      	mov	r0, r2
 801472e:	4798      	blx	r3
 8014730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014732:	e00f      	b.n	8014754 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014734:	6839      	ldr	r1, [r7, #0]
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 fa30 	bl	8014b9c <USBD_CtlError>
            err++;
 801473c:	7afb      	ldrb	r3, [r7, #11]
 801473e:	3301      	adds	r3, #1
 8014740:	72fb      	strb	r3, [r7, #11]
          break;
 8014742:	e007      	b.n	8014754 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 fa28 	bl	8014b9c <USBD_CtlError>
          err++;
 801474c:	7afb      	ldrb	r3, [r7, #11]
 801474e:	3301      	adds	r3, #1
 8014750:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014752:	bf00      	nop
      }
      break;
 8014754:	e037      	b.n	80147c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	7c1b      	ldrb	r3, [r3, #16]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d109      	bne.n	8014772 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014766:	f107 0208 	add.w	r2, r7, #8
 801476a:	4610      	mov	r0, r2
 801476c:	4798      	blx	r3
 801476e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014770:	e029      	b.n	80147c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014772:	6839      	ldr	r1, [r7, #0]
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 fa11 	bl	8014b9c <USBD_CtlError>
        err++;
 801477a:	7afb      	ldrb	r3, [r7, #11]
 801477c:	3301      	adds	r3, #1
 801477e:	72fb      	strb	r3, [r7, #11]
      break;
 8014780:	e021      	b.n	80147c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	7c1b      	ldrb	r3, [r3, #16]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d10d      	bne.n	80147a6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014792:	f107 0208 	add.w	r2, r7, #8
 8014796:	4610      	mov	r0, r2
 8014798:	4798      	blx	r3
 801479a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	3301      	adds	r3, #1
 80147a0:	2207      	movs	r2, #7
 80147a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147a4:	e00f      	b.n	80147c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80147a6:	6839      	ldr	r1, [r7, #0]
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 f9f7 	bl	8014b9c <USBD_CtlError>
        err++;
 80147ae:	7afb      	ldrb	r3, [r7, #11]
 80147b0:	3301      	adds	r3, #1
 80147b2:	72fb      	strb	r3, [r7, #11]
      break;
 80147b4:	e007      	b.n	80147c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 f9ef 	bl	8014b9c <USBD_CtlError>
      err++;
 80147be:	7afb      	ldrb	r3, [r7, #11]
 80147c0:	3301      	adds	r3, #1
 80147c2:	72fb      	strb	r3, [r7, #11]
      break;
 80147c4:	bf00      	nop
  }

  if (err != 0U)
 80147c6:	7afb      	ldrb	r3, [r7, #11]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d11e      	bne.n	801480a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	88db      	ldrh	r3, [r3, #6]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d016      	beq.n	8014802 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80147d4:	893b      	ldrh	r3, [r7, #8]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d00e      	beq.n	80147f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	88da      	ldrh	r2, [r3, #6]
 80147de:	893b      	ldrh	r3, [r7, #8]
 80147e0:	4293      	cmp	r3, r2
 80147e2:	bf28      	it	cs
 80147e4:	4613      	movcs	r3, r2
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80147ea:	893b      	ldrh	r3, [r7, #8]
 80147ec:	461a      	mov	r2, r3
 80147ee:	68f9      	ldr	r1, [r7, #12]
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f000 fa44 	bl	8014c7e <USBD_CtlSendData>
 80147f6:	e009      	b.n	801480c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80147f8:	6839      	ldr	r1, [r7, #0]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 f9ce 	bl	8014b9c <USBD_CtlError>
 8014800:	e004      	b.n	801480c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 fa95 	bl	8014d32 <USBD_CtlSendStatus>
 8014808:	e000      	b.n	801480c <USBD_GetDescriptor+0x320>
    return;
 801480a:	bf00      	nop
  }
}
 801480c:	3710      	adds	r7, #16
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop

08014814 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	889b      	ldrh	r3, [r3, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d131      	bne.n	801488a <USBD_SetAddress+0x76>
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	88db      	ldrh	r3, [r3, #6]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d12d      	bne.n	801488a <USBD_SetAddress+0x76>
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	885b      	ldrh	r3, [r3, #2]
 8014832:	2b7f      	cmp	r3, #127	; 0x7f
 8014834:	d829      	bhi.n	801488a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	885b      	ldrh	r3, [r3, #2]
 801483a:	b2db      	uxtb	r3, r3
 801483c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014840:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014848:	b2db      	uxtb	r3, r3
 801484a:	2b03      	cmp	r3, #3
 801484c:	d104      	bne.n	8014858 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801484e:	6839      	ldr	r1, [r7, #0]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 f9a3 	bl	8014b9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014856:	e01d      	b.n	8014894 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	7bfa      	ldrb	r2, [r7, #15]
 801485c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014860:	7bfb      	ldrb	r3, [r7, #15]
 8014862:	4619      	mov	r1, r3
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f000 fed6 	bl	8015616 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 fa61 	bl	8014d32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014870:	7bfb      	ldrb	r3, [r7, #15]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d004      	beq.n	8014880 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2202      	movs	r2, #2
 801487a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801487e:	e009      	b.n	8014894 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2201      	movs	r2, #1
 8014884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014888:	e004      	b.n	8014894 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801488a:	6839      	ldr	r1, [r7, #0]
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 f985 	bl	8014b9c <USBD_CtlError>
  }
}
 8014892:	bf00      	nop
 8014894:	bf00      	nop
 8014896:	3710      	adds	r7, #16
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b084      	sub	sp, #16
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148a6:	2300      	movs	r3, #0
 80148a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	885b      	ldrh	r3, [r3, #2]
 80148ae:	b2da      	uxtb	r2, r3
 80148b0:	4b4c      	ldr	r3, [pc, #304]	; (80149e4 <USBD_SetConfig+0x148>)
 80148b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148b4:	4b4b      	ldr	r3, [pc, #300]	; (80149e4 <USBD_SetConfig+0x148>)
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	2b01      	cmp	r3, #1
 80148ba:	d905      	bls.n	80148c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80148bc:	6839      	ldr	r1, [r7, #0]
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 f96c 	bl	8014b9c <USBD_CtlError>
    return USBD_FAIL;
 80148c4:	2303      	movs	r3, #3
 80148c6:	e088      	b.n	80149da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	2b02      	cmp	r3, #2
 80148d2:	d002      	beq.n	80148da <USBD_SetConfig+0x3e>
 80148d4:	2b03      	cmp	r3, #3
 80148d6:	d025      	beq.n	8014924 <USBD_SetConfig+0x88>
 80148d8:	e071      	b.n	80149be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80148da:	4b42      	ldr	r3, [pc, #264]	; (80149e4 <USBD_SetConfig+0x148>)
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d01c      	beq.n	801491c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80148e2:	4b40      	ldr	r3, [pc, #256]	; (80149e4 <USBD_SetConfig+0x148>)
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	461a      	mov	r2, r3
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80148ec:	4b3d      	ldr	r3, [pc, #244]	; (80149e4 <USBD_SetConfig+0x148>)
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	4619      	mov	r1, r3
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f7ff f992 	bl	8013c1c <USBD_SetClassConfig>
 80148f8:	4603      	mov	r3, r0
 80148fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80148fc:	7bfb      	ldrb	r3, [r7, #15]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d004      	beq.n	801490c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8014902:	6839      	ldr	r1, [r7, #0]
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f000 f949 	bl	8014b9c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801490a:	e065      	b.n	80149d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 fa10 	bl	8014d32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2203      	movs	r2, #3
 8014916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801491a:	e05d      	b.n	80149d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 fa08 	bl	8014d32 <USBD_CtlSendStatus>
      break;
 8014922:	e059      	b.n	80149d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014924:	4b2f      	ldr	r3, [pc, #188]	; (80149e4 <USBD_SetConfig+0x148>)
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d112      	bne.n	8014952 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2202      	movs	r2, #2
 8014930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014934:	4b2b      	ldr	r3, [pc, #172]	; (80149e4 <USBD_SetConfig+0x148>)
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	461a      	mov	r2, r3
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801493e:	4b29      	ldr	r3, [pc, #164]	; (80149e4 <USBD_SetConfig+0x148>)
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	4619      	mov	r1, r3
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7ff f985 	bl	8013c54 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 f9f1 	bl	8014d32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014950:	e042      	b.n	80149d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014952:	4b24      	ldr	r3, [pc, #144]	; (80149e4 <USBD_SetConfig+0x148>)
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	461a      	mov	r2, r3
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	685b      	ldr	r3, [r3, #4]
 801495c:	429a      	cmp	r2, r3
 801495e:	d02a      	beq.n	80149b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	b2db      	uxtb	r3, r3
 8014966:	4619      	mov	r1, r3
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7ff f973 	bl	8013c54 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801496e:	4b1d      	ldr	r3, [pc, #116]	; (80149e4 <USBD_SetConfig+0x148>)
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	461a      	mov	r2, r3
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014978:	4b1a      	ldr	r3, [pc, #104]	; (80149e4 <USBD_SetConfig+0x148>)
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	4619      	mov	r1, r3
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f7ff f94c 	bl	8013c1c <USBD_SetClassConfig>
 8014984:	4603      	mov	r3, r0
 8014986:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014988:	7bfb      	ldrb	r3, [r7, #15]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d00f      	beq.n	80149ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801498e:	6839      	ldr	r1, [r7, #0]
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f000 f903 	bl	8014b9c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	b2db      	uxtb	r3, r3
 801499c:	4619      	mov	r1, r3
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f7ff f958 	bl	8013c54 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2202      	movs	r2, #2
 80149a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80149ac:	e014      	b.n	80149d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f000 f9bf 	bl	8014d32 <USBD_CtlSendStatus>
      break;
 80149b4:	e010      	b.n	80149d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f000 f9bb 	bl	8014d32 <USBD_CtlSendStatus>
      break;
 80149bc:	e00c      	b.n	80149d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80149be:	6839      	ldr	r1, [r7, #0]
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 f8eb 	bl	8014b9c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80149c6:	4b07      	ldr	r3, [pc, #28]	; (80149e4 <USBD_SetConfig+0x148>)
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	4619      	mov	r1, r3
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f7ff f941 	bl	8013c54 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80149d2:	2303      	movs	r3, #3
 80149d4:	73fb      	strb	r3, [r7, #15]
      break;
 80149d6:	bf00      	nop
  }

  return ret;
 80149d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3710      	adds	r7, #16
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	20000f3c 	.word	0x20000f3c

080149e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	88db      	ldrh	r3, [r3, #6]
 80149f6:	2b01      	cmp	r3, #1
 80149f8:	d004      	beq.n	8014a04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80149fa:	6839      	ldr	r1, [r7, #0]
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f000 f8cd 	bl	8014b9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a02:	e023      	b.n	8014a4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	2b02      	cmp	r3, #2
 8014a0e:	dc02      	bgt.n	8014a16 <USBD_GetConfig+0x2e>
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	dc03      	bgt.n	8014a1c <USBD_GetConfig+0x34>
 8014a14:	e015      	b.n	8014a42 <USBD_GetConfig+0x5a>
 8014a16:	2b03      	cmp	r3, #3
 8014a18:	d00b      	beq.n	8014a32 <USBD_GetConfig+0x4a>
 8014a1a:	e012      	b.n	8014a42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	3308      	adds	r3, #8
 8014a26:	2201      	movs	r2, #1
 8014a28:	4619      	mov	r1, r3
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f000 f927 	bl	8014c7e <USBD_CtlSendData>
        break;
 8014a30:	e00c      	b.n	8014a4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	3304      	adds	r3, #4
 8014a36:	2201      	movs	r2, #1
 8014a38:	4619      	mov	r1, r3
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 f91f 	bl	8014c7e <USBD_CtlSendData>
        break;
 8014a40:	e004      	b.n	8014a4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014a42:	6839      	ldr	r1, [r7, #0]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 f8a9 	bl	8014b9c <USBD_CtlError>
        break;
 8014a4a:	bf00      	nop
}
 8014a4c:	bf00      	nop
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a64:	b2db      	uxtb	r3, r3
 8014a66:	3b01      	subs	r3, #1
 8014a68:	2b02      	cmp	r3, #2
 8014a6a:	d81e      	bhi.n	8014aaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	88db      	ldrh	r3, [r3, #6]
 8014a70:	2b02      	cmp	r3, #2
 8014a72:	d004      	beq.n	8014a7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 f890 	bl	8014b9c <USBD_CtlError>
        break;
 8014a7c:	e01a      	b.n	8014ab4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	2201      	movs	r2, #1
 8014a82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d005      	beq.n	8014a9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	68db      	ldr	r3, [r3, #12]
 8014a92:	f043 0202 	orr.w	r2, r3, #2
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	330c      	adds	r3, #12
 8014a9e:	2202      	movs	r2, #2
 8014aa0:	4619      	mov	r1, r3
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f000 f8eb 	bl	8014c7e <USBD_CtlSendData>
      break;
 8014aa8:	e004      	b.n	8014ab4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014aaa:	6839      	ldr	r1, [r7, #0]
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f000 f875 	bl	8014b9c <USBD_CtlError>
      break;
 8014ab2:	bf00      	nop
  }
}
 8014ab4:	bf00      	nop
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	885b      	ldrh	r3, [r3, #2]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d106      	bne.n	8014adc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f000 f92b 	bl	8014d32 <USBD_CtlSendStatus>
  }
}
 8014adc:	bf00      	nop
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	3b01      	subs	r3, #1
 8014af8:	2b02      	cmp	r3, #2
 8014afa:	d80b      	bhi.n	8014b14 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	885b      	ldrh	r3, [r3, #2]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d10c      	bne.n	8014b1e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2200      	movs	r2, #0
 8014b08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 f910 	bl	8014d32 <USBD_CtlSendStatus>
      }
      break;
 8014b12:	e004      	b.n	8014b1e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014b14:	6839      	ldr	r1, [r7, #0]
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 f840 	bl	8014b9c <USBD_CtlError>
      break;
 8014b1c:	e000      	b.n	8014b20 <USBD_ClrFeature+0x3c>
      break;
 8014b1e:	bf00      	nop
  }
}
 8014b20:	bf00      	nop
 8014b22:	3708      	adds	r7, #8
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b084      	sub	sp, #16
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	781a      	ldrb	r2, [r3, #0]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	3301      	adds	r3, #1
 8014b42:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	781a      	ldrb	r2, [r3, #0]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014b52:	68f8      	ldr	r0, [r7, #12]
 8014b54:	f7ff fa92 	bl	801407c <SWAPBYTE>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	3301      	adds	r3, #1
 8014b64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014b6c:	68f8      	ldr	r0, [r7, #12]
 8014b6e:	f7ff fa85 	bl	801407c <SWAPBYTE>
 8014b72:	4603      	mov	r3, r0
 8014b74:	461a      	mov	r2, r3
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	3301      	adds	r3, #1
 8014b84:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f7ff fa78 	bl	801407c <SWAPBYTE>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	461a      	mov	r2, r3
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	80da      	strh	r2, [r3, #6]
}
 8014b94:	bf00      	nop
 8014b96:	3710      	adds	r7, #16
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ba6:	2180      	movs	r1, #128	; 0x80
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f000 fcc9 	bl	8015540 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014bae:	2100      	movs	r1, #0
 8014bb0:	6878      	ldr	r0, [r7, #4]
 8014bb2:	f000 fcc5 	bl	8015540 <USBD_LL_StallEP>
}
 8014bb6:	bf00      	nop
 8014bb8:	3708      	adds	r7, #8
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}

08014bbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014bbe:	b580      	push	{r7, lr}
 8014bc0:	b086      	sub	sp, #24
 8014bc2:	af00      	add	r7, sp, #0
 8014bc4:	60f8      	str	r0, [r7, #12]
 8014bc6:	60b9      	str	r1, [r7, #8]
 8014bc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d036      	beq.n	8014c42 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014bd8:	6938      	ldr	r0, [r7, #16]
 8014bda:	f000 f836 	bl	8014c4a <USBD_GetLen>
 8014bde:	4603      	mov	r3, r0
 8014be0:	3301      	adds	r3, #1
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	005b      	lsls	r3, r3, #1
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014bec:	7dfb      	ldrb	r3, [r7, #23]
 8014bee:	68ba      	ldr	r2, [r7, #8]
 8014bf0:	4413      	add	r3, r2
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	7812      	ldrb	r2, [r2, #0]
 8014bf6:	701a      	strb	r2, [r3, #0]
  idx++;
 8014bf8:	7dfb      	ldrb	r3, [r7, #23]
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014bfe:	7dfb      	ldrb	r3, [r7, #23]
 8014c00:	68ba      	ldr	r2, [r7, #8]
 8014c02:	4413      	add	r3, r2
 8014c04:	2203      	movs	r2, #3
 8014c06:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c08:	7dfb      	ldrb	r3, [r7, #23]
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014c0e:	e013      	b.n	8014c38 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014c10:	7dfb      	ldrb	r3, [r7, #23]
 8014c12:	68ba      	ldr	r2, [r7, #8]
 8014c14:	4413      	add	r3, r2
 8014c16:	693a      	ldr	r2, [r7, #16]
 8014c18:	7812      	ldrb	r2, [r2, #0]
 8014c1a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	3301      	adds	r3, #1
 8014c20:	613b      	str	r3, [r7, #16]
    idx++;
 8014c22:	7dfb      	ldrb	r3, [r7, #23]
 8014c24:	3301      	adds	r3, #1
 8014c26:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014c28:	7dfb      	ldrb	r3, [r7, #23]
 8014c2a:	68ba      	ldr	r2, [r7, #8]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	2200      	movs	r2, #0
 8014c30:	701a      	strb	r2, [r3, #0]
    idx++;
 8014c32:	7dfb      	ldrb	r3, [r7, #23]
 8014c34:	3301      	adds	r3, #1
 8014c36:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d1e7      	bne.n	8014c10 <USBD_GetString+0x52>
 8014c40:	e000      	b.n	8014c44 <USBD_GetString+0x86>
    return;
 8014c42:	bf00      	nop
  }
}
 8014c44:	3718      	adds	r7, #24
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}

08014c4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014c4a:	b480      	push	{r7}
 8014c4c:	b085      	sub	sp, #20
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014c52:	2300      	movs	r3, #0
 8014c54:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014c5a:	e005      	b.n	8014c68 <USBD_GetLen+0x1e>
  {
    len++;
 8014c5c:	7bfb      	ldrb	r3, [r7, #15]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	3301      	adds	r3, #1
 8014c66:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1f5      	bne.n	8014c5c <USBD_GetLen+0x12>
  }

  return len;
 8014c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b084      	sub	sp, #16
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	60f8      	str	r0, [r7, #12]
 8014c86:	60b9      	str	r1, [r7, #8]
 8014c88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2202      	movs	r2, #2
 8014c8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	2100      	movs	r1, #0
 8014ca4:	68f8      	ldr	r0, [r7, #12]
 8014ca6:	f000 fcd5 	bl	8015654 <USBD_LL_Transmit>

  return USBD_OK;
 8014caa:	2300      	movs	r3, #0
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b084      	sub	sp, #16
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	68ba      	ldr	r2, [r7, #8]
 8014cc4:	2100      	movs	r1, #0
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	f000 fcc4 	bl	8015654 <USBD_LL_Transmit>

  return USBD_OK;
 8014ccc:	2300      	movs	r3, #0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3710      	adds	r7, #16
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b084      	sub	sp, #16
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	60f8      	str	r0, [r7, #12]
 8014cde:	60b9      	str	r1, [r7, #8]
 8014ce0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	2203      	movs	r2, #3
 8014ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	687a      	ldr	r2, [r7, #4]
 8014cf6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	2100      	movs	r1, #0
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f000 fcc8 	bl	8015696 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d06:	2300      	movs	r3, #0
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b084      	sub	sp, #16
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	68ba      	ldr	r2, [r7, #8]
 8014d20:	2100      	movs	r1, #0
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f000 fcb7 	bl	8015696 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d28:	2300      	movs	r3, #0
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3710      	adds	r7, #16
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}

08014d32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014d32:	b580      	push	{r7, lr}
 8014d34:	b082      	sub	sp, #8
 8014d36:	af00      	add	r7, sp, #0
 8014d38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2204      	movs	r2, #4
 8014d3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014d42:	2300      	movs	r3, #0
 8014d44:	2200      	movs	r2, #0
 8014d46:	2100      	movs	r1, #0
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f000 fc83 	bl	8015654 <USBD_LL_Transmit>

  return USBD_OK;
 8014d4e:	2300      	movs	r3, #0
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	3708      	adds	r7, #8
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}

08014d58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b082      	sub	sp, #8
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2205      	movs	r2, #5
 8014d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d68:	2300      	movs	r3, #0
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	2100      	movs	r1, #0
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f000 fc91 	bl	8015696 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d74:	2300      	movs	r3, #0
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3708      	adds	r7, #8
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}
	...

08014d80 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014d84:	2200      	movs	r2, #0
 8014d86:	4912      	ldr	r1, [pc, #72]	; (8014dd0 <MX_USB_Device_Init+0x50>)
 8014d88:	4812      	ldr	r0, [pc, #72]	; (8014dd4 <MX_USB_Device_Init+0x54>)
 8014d8a:	f7fe fed9 	bl	8013b40 <USBD_Init>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d001      	beq.n	8014d98 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014d94:	f7f1 fc3e 	bl	8006614 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014d98:	490f      	ldr	r1, [pc, #60]	; (8014dd8 <MX_USB_Device_Init+0x58>)
 8014d9a:	480e      	ldr	r0, [pc, #56]	; (8014dd4 <MX_USB_Device_Init+0x54>)
 8014d9c:	f7fe ff00 	bl	8013ba0 <USBD_RegisterClass>
 8014da0:	4603      	mov	r3, r0
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d001      	beq.n	8014daa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014da6:	f7f1 fc35 	bl	8006614 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014daa:	490c      	ldr	r1, [pc, #48]	; (8014ddc <MX_USB_Device_Init+0x5c>)
 8014dac:	4809      	ldr	r0, [pc, #36]	; (8014dd4 <MX_USB_Device_Init+0x54>)
 8014dae:	f7fe fe21 	bl	80139f4 <USBD_CDC_RegisterInterface>
 8014db2:	4603      	mov	r3, r0
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d001      	beq.n	8014dbc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014db8:	f7f1 fc2c 	bl	8006614 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014dbc:	4805      	ldr	r0, [pc, #20]	; (8014dd4 <MX_USB_Device_Init+0x54>)
 8014dbe:	f7fe ff16 	bl	8013bee <USBD_Start>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d001      	beq.n	8014dcc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014dc8:	f7f1 fc24 	bl	8006614 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014dcc:	bf00      	nop
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	20000130 	.word	0x20000130
 8014dd4:	20000f40 	.word	0x20000f40
 8014dd8:	20000018 	.word	0x20000018
 8014ddc:	2000011c 	.word	0x2000011c

08014de0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014de4:	2200      	movs	r2, #0
 8014de6:	4905      	ldr	r1, [pc, #20]	; (8014dfc <CDC_Init_FS+0x1c>)
 8014de8:	4805      	ldr	r0, [pc, #20]	; (8014e00 <CDC_Init_FS+0x20>)
 8014dea:	f7fe fe18 	bl	8013a1e <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014dee:	4905      	ldr	r1, [pc, #20]	; (8014e04 <CDC_Init_FS+0x24>)
 8014df0:	4803      	ldr	r0, [pc, #12]	; (8014e00 <CDC_Init_FS+0x20>)
 8014df2:	f7fe fe32 	bl	8013a5a <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8014df6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	20001a50 	.word	0x20001a50
 8014e00:	20000f40 	.word	0x20000f40
 8014e04:	20001250 	.word	0x20001250

08014e08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8014e0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	46bd      	mov	sp, r7
 8014e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e16:	4770      	bx	lr

08014e18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b085      	sub	sp, #20
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	4603      	mov	r3, r0
 8014e20:	6039      	str	r1, [r7, #0]
 8014e22:	71fb      	strb	r3, [r7, #7]
 8014e24:	4613      	mov	r3, r2
 8014e26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8014e28:	79fb      	ldrb	r3, [r7, #7]
 8014e2a:	2b23      	cmp	r3, #35	; 0x23
 8014e2c:	d85a      	bhi.n	8014ee4 <CDC_Control_FS+0xcc>
 8014e2e:	a201      	add	r2, pc, #4	; (adr r2, 8014e34 <CDC_Control_FS+0x1c>)
 8014e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e34:	08014ee5 	.word	0x08014ee5
 8014e38:	08014ee5 	.word	0x08014ee5
 8014e3c:	08014ee5 	.word	0x08014ee5
 8014e40:	08014ee5 	.word	0x08014ee5
 8014e44:	08014ee5 	.word	0x08014ee5
 8014e48:	08014ee5 	.word	0x08014ee5
 8014e4c:	08014ee5 	.word	0x08014ee5
 8014e50:	08014ee5 	.word	0x08014ee5
 8014e54:	08014ee5 	.word	0x08014ee5
 8014e58:	08014ee5 	.word	0x08014ee5
 8014e5c:	08014ee5 	.word	0x08014ee5
 8014e60:	08014ee5 	.word	0x08014ee5
 8014e64:	08014ee5 	.word	0x08014ee5
 8014e68:	08014ee5 	.word	0x08014ee5
 8014e6c:	08014ee5 	.word	0x08014ee5
 8014e70:	08014ee5 	.word	0x08014ee5
 8014e74:	08014ee5 	.word	0x08014ee5
 8014e78:	08014ee5 	.word	0x08014ee5
 8014e7c:	08014ee5 	.word	0x08014ee5
 8014e80:	08014ee5 	.word	0x08014ee5
 8014e84:	08014ee5 	.word	0x08014ee5
 8014e88:	08014ee5 	.word	0x08014ee5
 8014e8c:	08014ee5 	.word	0x08014ee5
 8014e90:	08014ee5 	.word	0x08014ee5
 8014e94:	08014ee5 	.word	0x08014ee5
 8014e98:	08014ee5 	.word	0x08014ee5
 8014e9c:	08014ee5 	.word	0x08014ee5
 8014ea0:	08014ee5 	.word	0x08014ee5
 8014ea4:	08014ee5 	.word	0x08014ee5
 8014ea8:	08014ee5 	.word	0x08014ee5
 8014eac:	08014ee5 	.word	0x08014ee5
 8014eb0:	08014ee5 	.word	0x08014ee5
 8014eb4:	08014ee5 	.word	0x08014ee5
 8014eb8:	08014ee5 	.word	0x08014ee5
 8014ebc:	08014ec5 	.word	0x08014ec5
 8014ec0:	08014ee5 	.word	0x08014ee5

		break;

	case CDC_SET_CONTROL_LINE_STATE: {

		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	60fb      	str	r3, [r7, #12]

		if (req->wValue & 0x0001 != 0)
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	885b      	ldrh	r3, [r3, #2]
 8014ecc:	f003 0301 	and.w	r3, r3, #1
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d003      	beq.n	8014edc <CDC_Control_FS+0xc4>

		{

			// DTR is set...
			host_com_port_open = 1;
 8014ed4:	4b07      	ldr	r3, [pc, #28]	; (8014ef4 <CDC_Control_FS+0xdc>)
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	701a      	strb	r2, [r3, #0]
			host_com_port_open = 0;
		}

	}

		break;
 8014eda:	e004      	b.n	8014ee6 <CDC_Control_FS+0xce>
			host_com_port_open = 0;
 8014edc:	4b05      	ldr	r3, [pc, #20]	; (8014ef4 <CDC_Control_FS+0xdc>)
 8014ede:	2200      	movs	r2, #0
 8014ee0:	701a      	strb	r2, [r3, #0]
		break;
 8014ee2:	e000      	b.n	8014ee6 <CDC_Control_FS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8014ee4:	bf00      	nop
	}

	return (USBD_OK);
 8014ee6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3714      	adds	r7, #20
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr
 8014ef4:	20002250 	.word	0x20002250

08014ef8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014f02:	6879      	ldr	r1, [r7, #4]
 8014f04:	480f      	ldr	r0, [pc, #60]	; (8014f44 <CDC_Receive_FS+0x4c>)
 8014f06:	f7fe fda8 	bl	8013a5a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014f0a:	480e      	ldr	r0, [pc, #56]	; (8014f44 <CDC_Receive_FS+0x4c>)
 8014f0c:	f7fe fdee 	bl	8013aec <USBD_CDC_ReceivePacket>

	memset(bufferUsbReceive, '\0', 64);  // clear the buffer
 8014f10:	2240      	movs	r2, #64	; 0x40
 8014f12:	2100      	movs	r1, #0
 8014f14:	480c      	ldr	r0, [pc, #48]	; (8014f48 <CDC_Receive_FS+0x50>)
 8014f16:	f000 fd13 	bl	8015940 <memset>
	uint8_t len = (uint8_t) *Len;
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	73fb      	strb	r3, [r7, #15]
	memcpy(bufferUsbReceive, Buf, len);  // copy the data to the buffer
 8014f20:	7bfb      	ldrb	r3, [r7, #15]
 8014f22:	461a      	mov	r2, r3
 8014f24:	6879      	ldr	r1, [r7, #4]
 8014f26:	4808      	ldr	r0, [pc, #32]	; (8014f48 <CDC_Receive_FS+0x50>)
 8014f28:	f000 fcfc 	bl	8015924 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8014f2c:	7bfb      	ldrb	r3, [r7, #15]
 8014f2e:	461a      	mov	r2, r3
 8014f30:	2100      	movs	r1, #0
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 fd04 	bl	8015940 <memset>

	return (USBD_OK);
 8014f38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3710      	adds	r7, #16
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	20000f40 	.word	0x20000f40
 8014f48:	20001210 	.word	0x20001210

08014f4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	460b      	mov	r3, r1
 8014f56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	if (host_com_port_open && hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 8014f5c:	4b12      	ldr	r3, [pc, #72]	; (8014fa8 <CDC_Transmit_FS+0x5c>)
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d01b      	beq.n	8014f9c <CDC_Transmit_FS+0x50>
 8014f64:	4b11      	ldr	r3, [pc, #68]	; (8014fac <CDC_Transmit_FS+0x60>)
 8014f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	2b03      	cmp	r3, #3
 8014f6e:	d115      	bne.n	8014f9c <CDC_Transmit_FS+0x50>

		/* USER CODE BEGIN 7 */
		USBD_CDC_HandleTypeDef *hcdc =
 8014f70:	4b0e      	ldr	r3, [pc, #56]	; (8014fac <CDC_Transmit_FS+0x60>)
 8014f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f76:	60bb      	str	r3, [r7, #8]
				(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
		if (hcdc->TxState != 0) {
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d001      	beq.n	8014f86 <CDC_Transmit_FS+0x3a>
			return USBD_BUSY;
 8014f82:	2301      	movs	r3, #1
 8014f84:	e00b      	b.n	8014f9e <CDC_Transmit_FS+0x52>
		}
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014f86:	887b      	ldrh	r3, [r7, #2]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	6879      	ldr	r1, [r7, #4]
 8014f8c:	4807      	ldr	r0, [pc, #28]	; (8014fac <CDC_Transmit_FS+0x60>)
 8014f8e:	f7fe fd46 	bl	8013a1e <USBD_CDC_SetTxBuffer>
		result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014f92:	4806      	ldr	r0, [pc, #24]	; (8014fac <CDC_Transmit_FS+0x60>)
 8014f94:	f7fe fd7a 	bl	8013a8c <USBD_CDC_TransmitPacket>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	73fb      	strb	r3, [r7, #15]
	}
  /* USER CODE END 7 */
  return result;
 8014f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3710      	adds	r7, #16
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}
 8014fa6:	bf00      	nop
 8014fa8:	20002250 	.word	0x20002250
 8014fac:	20000f40 	.word	0x20000f40

08014fb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b087      	sub	sp, #28
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	60f8      	str	r0, [r7, #12]
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	4613      	mov	r3, r2
 8014fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	371c      	adds	r7, #28
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr
	...

08014fd4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	4603      	mov	r3, r0
 8014fdc:	6039      	str	r1, [r7, #0]
 8014fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	2212      	movs	r2, #18
 8014fe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014fe6:	4b03      	ldr	r3, [pc, #12]	; (8014ff4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	370c      	adds	r7, #12
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr
 8014ff4:	20000150 	.word	0x20000150

08014ff8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b083      	sub	sp, #12
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	4603      	mov	r3, r0
 8015000:	6039      	str	r1, [r7, #0]
 8015002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	2204      	movs	r2, #4
 8015008:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801500a:	4b03      	ldr	r3, [pc, #12]	; (8015018 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801500c:	4618      	mov	r0, r3
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr
 8015018:	20000164 	.word	0x20000164

0801501c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	4603      	mov	r3, r0
 8015024:	6039      	str	r1, [r7, #0]
 8015026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015028:	79fb      	ldrb	r3, [r7, #7]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d105      	bne.n	801503a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801502e:	683a      	ldr	r2, [r7, #0]
 8015030:	4907      	ldr	r1, [pc, #28]	; (8015050 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015032:	4808      	ldr	r0, [pc, #32]	; (8015054 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015034:	f7ff fdc3 	bl	8014bbe <USBD_GetString>
 8015038:	e004      	b.n	8015044 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801503a:	683a      	ldr	r2, [r7, #0]
 801503c:	4904      	ldr	r1, [pc, #16]	; (8015050 <USBD_CDC_ProductStrDescriptor+0x34>)
 801503e:	4805      	ldr	r0, [pc, #20]	; (8015054 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015040:	f7ff fdbd 	bl	8014bbe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015044:	4b02      	ldr	r3, [pc, #8]	; (8015050 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015046:	4618      	mov	r0, r3
 8015048:	3708      	adds	r7, #8
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	20002254 	.word	0x20002254
 8015054:	08018ad4 	.word	0x08018ad4

08015058 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	4603      	mov	r3, r0
 8015060:	6039      	str	r1, [r7, #0]
 8015062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015064:	683a      	ldr	r2, [r7, #0]
 8015066:	4904      	ldr	r1, [pc, #16]	; (8015078 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015068:	4804      	ldr	r0, [pc, #16]	; (801507c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801506a:	f7ff fda8 	bl	8014bbe <USBD_GetString>
  return USBD_StrDesc;
 801506e:	4b02      	ldr	r3, [pc, #8]	; (8015078 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}
 8015078:	20002254 	.word	0x20002254
 801507c:	08018aec 	.word	0x08018aec

08015080 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b082      	sub	sp, #8
 8015084:	af00      	add	r7, sp, #0
 8015086:	4603      	mov	r3, r0
 8015088:	6039      	str	r1, [r7, #0]
 801508a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	221a      	movs	r2, #26
 8015090:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015092:	f000 f843 	bl	801511c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015096:	4b02      	ldr	r3, [pc, #8]	; (80150a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8015098:	4618      	mov	r0, r3
 801509a:	3708      	adds	r7, #8
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	20000168 	.word	0x20000168

080150a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	4603      	mov	r3, r0
 80150ac:	6039      	str	r1, [r7, #0]
 80150ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80150b0:	79fb      	ldrb	r3, [r7, #7]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d105      	bne.n	80150c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80150b6:	683a      	ldr	r2, [r7, #0]
 80150b8:	4907      	ldr	r1, [pc, #28]	; (80150d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80150ba:	4808      	ldr	r0, [pc, #32]	; (80150dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80150bc:	f7ff fd7f 	bl	8014bbe <USBD_GetString>
 80150c0:	e004      	b.n	80150cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80150c2:	683a      	ldr	r2, [r7, #0]
 80150c4:	4904      	ldr	r1, [pc, #16]	; (80150d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80150c6:	4805      	ldr	r0, [pc, #20]	; (80150dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80150c8:	f7ff fd79 	bl	8014bbe <USBD_GetString>
  }
  return USBD_StrDesc;
 80150cc:	4b02      	ldr	r3, [pc, #8]	; (80150d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3708      	adds	r7, #8
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	20002254 	.word	0x20002254
 80150dc:	08018b00 	.word	0x08018b00

080150e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	4603      	mov	r3, r0
 80150e8:	6039      	str	r1, [r7, #0]
 80150ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150ec:	79fb      	ldrb	r3, [r7, #7]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d105      	bne.n	80150fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80150f2:	683a      	ldr	r2, [r7, #0]
 80150f4:	4907      	ldr	r1, [pc, #28]	; (8015114 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80150f6:	4808      	ldr	r0, [pc, #32]	; (8015118 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80150f8:	f7ff fd61 	bl	8014bbe <USBD_GetString>
 80150fc:	e004      	b.n	8015108 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80150fe:	683a      	ldr	r2, [r7, #0]
 8015100:	4904      	ldr	r1, [pc, #16]	; (8015114 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015102:	4805      	ldr	r0, [pc, #20]	; (8015118 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015104:	f7ff fd5b 	bl	8014bbe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015108:	4b02      	ldr	r3, [pc, #8]	; (8015114 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801510a:	4618      	mov	r0, r3
 801510c:	3708      	adds	r7, #8
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
 8015112:	bf00      	nop
 8015114:	20002254 	.word	0x20002254
 8015118:	08018b0c 	.word	0x08018b0c

0801511c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015122:	4b0f      	ldr	r3, [pc, #60]	; (8015160 <Get_SerialNum+0x44>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015128:	4b0e      	ldr	r3, [pc, #56]	; (8015164 <Get_SerialNum+0x48>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801512e:	4b0e      	ldr	r3, [pc, #56]	; (8015168 <Get_SerialNum+0x4c>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015134:	68fa      	ldr	r2, [r7, #12]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	4413      	add	r3, r2
 801513a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d009      	beq.n	8015156 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015142:	2208      	movs	r2, #8
 8015144:	4909      	ldr	r1, [pc, #36]	; (801516c <Get_SerialNum+0x50>)
 8015146:	68f8      	ldr	r0, [r7, #12]
 8015148:	f000 f814 	bl	8015174 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801514c:	2204      	movs	r2, #4
 801514e:	4908      	ldr	r1, [pc, #32]	; (8015170 <Get_SerialNum+0x54>)
 8015150:	68b8      	ldr	r0, [r7, #8]
 8015152:	f000 f80f 	bl	8015174 <IntToUnicode>
  }
}
 8015156:	bf00      	nop
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	1fff7590 	.word	0x1fff7590
 8015164:	1fff7594 	.word	0x1fff7594
 8015168:	1fff7598 	.word	0x1fff7598
 801516c:	2000016a 	.word	0x2000016a
 8015170:	2000017a 	.word	0x2000017a

08015174 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015174:	b480      	push	{r7}
 8015176:	b087      	sub	sp, #28
 8015178:	af00      	add	r7, sp, #0
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	4613      	mov	r3, r2
 8015180:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015182:	2300      	movs	r3, #0
 8015184:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015186:	2300      	movs	r3, #0
 8015188:	75fb      	strb	r3, [r7, #23]
 801518a:	e027      	b.n	80151dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	0f1b      	lsrs	r3, r3, #28
 8015190:	2b09      	cmp	r3, #9
 8015192:	d80b      	bhi.n	80151ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	0f1b      	lsrs	r3, r3, #28
 8015198:	b2da      	uxtb	r2, r3
 801519a:	7dfb      	ldrb	r3, [r7, #23]
 801519c:	005b      	lsls	r3, r3, #1
 801519e:	4619      	mov	r1, r3
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	440b      	add	r3, r1
 80151a4:	3230      	adds	r2, #48	; 0x30
 80151a6:	b2d2      	uxtb	r2, r2
 80151a8:	701a      	strb	r2, [r3, #0]
 80151aa:	e00a      	b.n	80151c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	0f1b      	lsrs	r3, r3, #28
 80151b0:	b2da      	uxtb	r2, r3
 80151b2:	7dfb      	ldrb	r3, [r7, #23]
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	4619      	mov	r1, r3
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	440b      	add	r3, r1
 80151bc:	3237      	adds	r2, #55	; 0x37
 80151be:	b2d2      	uxtb	r2, r2
 80151c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	011b      	lsls	r3, r3, #4
 80151c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80151c8:	7dfb      	ldrb	r3, [r7, #23]
 80151ca:	005b      	lsls	r3, r3, #1
 80151cc:	3301      	adds	r3, #1
 80151ce:	68ba      	ldr	r2, [r7, #8]
 80151d0:	4413      	add	r3, r2
 80151d2:	2200      	movs	r2, #0
 80151d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80151d6:	7dfb      	ldrb	r3, [r7, #23]
 80151d8:	3301      	adds	r3, #1
 80151da:	75fb      	strb	r3, [r7, #23]
 80151dc:	7dfa      	ldrb	r2, [r7, #23]
 80151de:	79fb      	ldrb	r3, [r7, #7]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d3d3      	bcc.n	801518c <IntToUnicode+0x18>
  }
}
 80151e4:	bf00      	nop
 80151e6:	bf00      	nop
 80151e8:	371c      	adds	r7, #28
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr
	...

080151f4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b098      	sub	sp, #96	; 0x60
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80151fc:	f107 030c 	add.w	r3, r7, #12
 8015200:	2254      	movs	r2, #84	; 0x54
 8015202:	2100      	movs	r1, #0
 8015204:	4618      	mov	r0, r3
 8015206:	f000 fb9b 	bl	8015940 <memset>
  if(pcdHandle->Instance==USB)
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	4a15      	ldr	r2, [pc, #84]	; (8015264 <HAL_PCD_MspInit+0x70>)
 8015210:	4293      	cmp	r3, r2
 8015212:	d122      	bne.n	801525a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015218:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801521a:	2300      	movs	r3, #0
 801521c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801521e:	f107 030c 	add.w	r3, r7, #12
 8015222:	4618      	mov	r0, r3
 8015224:	f7f8 fcc4 	bl	800dbb0 <HAL_RCCEx_PeriphCLKConfig>
 8015228:	4603      	mov	r3, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	d001      	beq.n	8015232 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801522e:	f7f1 f9f1 	bl	8006614 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015232:	4b0d      	ldr	r3, [pc, #52]	; (8015268 <HAL_PCD_MspInit+0x74>)
 8015234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015236:	4a0c      	ldr	r2, [pc, #48]	; (8015268 <HAL_PCD_MspInit+0x74>)
 8015238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801523c:	6593      	str	r3, [r2, #88]	; 0x58
 801523e:	4b0a      	ldr	r3, [pc, #40]	; (8015268 <HAL_PCD_MspInit+0x74>)
 8015240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015246:	60bb      	str	r3, [r7, #8]
 8015248:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801524a:	2200      	movs	r2, #0
 801524c:	2100      	movs	r1, #0
 801524e:	2014      	movs	r0, #20
 8015250:	f7f4 fa81 	bl	8009756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015254:	2014      	movs	r0, #20
 8015256:	f7f4 fa98 	bl	800978a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801525a:	bf00      	nop
 801525c:	3760      	adds	r7, #96	; 0x60
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
 8015262:	bf00      	nop
 8015264:	40005c00 	.word	0x40005c00
 8015268:	40021000 	.word	0x40021000

0801526c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8015280:	4619      	mov	r1, r3
 8015282:	4610      	mov	r0, r2
 8015284:	f7fe fcfe 	bl	8013c84 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015288:	bf00      	nop
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	460b      	mov	r3, r1
 801529a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80152a2:	78fa      	ldrb	r2, [r7, #3]
 80152a4:	6879      	ldr	r1, [r7, #4]
 80152a6:	4613      	mov	r3, r2
 80152a8:	009b      	lsls	r3, r3, #2
 80152aa:	4413      	add	r3, r2
 80152ac:	00db      	lsls	r3, r3, #3
 80152ae:	440b      	add	r3, r1
 80152b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	78fb      	ldrb	r3, [r7, #3]
 80152b8:	4619      	mov	r1, r3
 80152ba:	f7fe fd38 	bl	8013d2e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80152be:	bf00      	nop
 80152c0:	3708      	adds	r7, #8
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}

080152c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152c6:	b580      	push	{r7, lr}
 80152c8:	b082      	sub	sp, #8
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
 80152ce:	460b      	mov	r3, r1
 80152d0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80152d8:	78fa      	ldrb	r2, [r7, #3]
 80152da:	6879      	ldr	r1, [r7, #4]
 80152dc:	4613      	mov	r3, r2
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	4413      	add	r3, r2
 80152e2:	00db      	lsls	r3, r3, #3
 80152e4:	440b      	add	r3, r1
 80152e6:	333c      	adds	r3, #60	; 0x3c
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	78fb      	ldrb	r3, [r7, #3]
 80152ec:	4619      	mov	r1, r3
 80152ee:	f7fe fd81 	bl	8013df4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80152f2:	bf00      	nop
 80152f4:	3708      	adds	r7, #8
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b082      	sub	sp, #8
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015308:	4618      	mov	r0, r3
 801530a:	f7fe fe95 	bl	8014038 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801530e:	bf00      	nop
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b084      	sub	sp, #16
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801531e:	2301      	movs	r3, #1
 8015320:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	689b      	ldr	r3, [r3, #8]
 8015326:	2b02      	cmp	r3, #2
 8015328:	d001      	beq.n	801532e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801532a:	f7f1 f973 	bl	8006614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015334:	7bfa      	ldrb	r2, [r7, #15]
 8015336:	4611      	mov	r1, r2
 8015338:	4618      	mov	r0, r3
 801533a:	f7fe fe3f 	bl	8013fbc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015344:	4618      	mov	r0, r3
 8015346:	f7fe fdeb 	bl	8013f20 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801534a:	bf00      	nop
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
	...

08015354 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015362:	4618      	mov	r0, r3
 8015364:	f7fe fe3a 	bl	8013fdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	699b      	ldr	r3, [r3, #24]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d005      	beq.n	801537c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015370:	4b04      	ldr	r3, [pc, #16]	; (8015384 <HAL_PCD_SuspendCallback+0x30>)
 8015372:	691b      	ldr	r3, [r3, #16]
 8015374:	4a03      	ldr	r2, [pc, #12]	; (8015384 <HAL_PCD_SuspendCallback+0x30>)
 8015376:	f043 0306 	orr.w	r3, r3, #6
 801537a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	e000ed00 	.word	0xe000ed00

08015388 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	699b      	ldr	r3, [r3, #24]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d007      	beq.n	80153a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015398:	4b08      	ldr	r3, [pc, #32]	; (80153bc <HAL_PCD_ResumeCallback+0x34>)
 801539a:	691b      	ldr	r3, [r3, #16]
 801539c:	4a07      	ldr	r2, [pc, #28]	; (80153bc <HAL_PCD_ResumeCallback+0x34>)
 801539e:	f023 0306 	bic.w	r3, r3, #6
 80153a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80153a4:	f000 f9fa 	bl	801579c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7fe fe2a 	bl	8014008 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80153b4:	bf00      	nop
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	e000ed00 	.word	0xe000ed00

080153c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80153c8:	4a2b      	ldr	r2, [pc, #172]	; (8015478 <USBD_LL_Init+0xb8>)
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	4a29      	ldr	r2, [pc, #164]	; (8015478 <USBD_LL_Init+0xb8>)
 80153d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80153d8:	4b27      	ldr	r3, [pc, #156]	; (8015478 <USBD_LL_Init+0xb8>)
 80153da:	4a28      	ldr	r2, [pc, #160]	; (801547c <USBD_LL_Init+0xbc>)
 80153dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80153de:	4b26      	ldr	r3, [pc, #152]	; (8015478 <USBD_LL_Init+0xb8>)
 80153e0:	2208      	movs	r2, #8
 80153e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80153e4:	4b24      	ldr	r3, [pc, #144]	; (8015478 <USBD_LL_Init+0xb8>)
 80153e6:	2202      	movs	r2, #2
 80153e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80153ea:	4b23      	ldr	r3, [pc, #140]	; (8015478 <USBD_LL_Init+0xb8>)
 80153ec:	2202      	movs	r2, #2
 80153ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80153f0:	4b21      	ldr	r3, [pc, #132]	; (8015478 <USBD_LL_Init+0xb8>)
 80153f2:	2200      	movs	r2, #0
 80153f4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80153f6:	4b20      	ldr	r3, [pc, #128]	; (8015478 <USBD_LL_Init+0xb8>)
 80153f8:	2200      	movs	r2, #0
 80153fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80153fc:	4b1e      	ldr	r3, [pc, #120]	; (8015478 <USBD_LL_Init+0xb8>)
 80153fe:	2200      	movs	r2, #0
 8015400:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015402:	4b1d      	ldr	r3, [pc, #116]	; (8015478 <USBD_LL_Init+0xb8>)
 8015404:	2200      	movs	r2, #0
 8015406:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015408:	481b      	ldr	r0, [pc, #108]	; (8015478 <USBD_LL_Init+0xb8>)
 801540a:	f7f6 f8c5 	bl	800b598 <HAL_PCD_Init>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d001      	beq.n	8015418 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8015414:	f7f1 f8fe 	bl	8006614 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801541e:	2318      	movs	r3, #24
 8015420:	2200      	movs	r2, #0
 8015422:	2100      	movs	r1, #0
 8015424:	f7f7 fd7e 	bl	800cf24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801542e:	2358      	movs	r3, #88	; 0x58
 8015430:	2200      	movs	r2, #0
 8015432:	2180      	movs	r1, #128	; 0x80
 8015434:	f7f7 fd76 	bl	800cf24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801543e:	23c0      	movs	r3, #192	; 0xc0
 8015440:	2200      	movs	r2, #0
 8015442:	2181      	movs	r1, #129	; 0x81
 8015444:	f7f7 fd6e 	bl	800cf24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801544e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015452:	2200      	movs	r2, #0
 8015454:	2101      	movs	r1, #1
 8015456:	f7f7 fd65 	bl	800cf24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015464:	2200      	movs	r2, #0
 8015466:	2182      	movs	r1, #130	; 0x82
 8015468:	f7f7 fd5c 	bl	800cf24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801546c:	2300      	movs	r3, #0
}
 801546e:	4618      	mov	r0, r3
 8015470:	3708      	adds	r7, #8
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}
 8015476:	bf00      	nop
 8015478:	20002454 	.word	0x20002454
 801547c:	40005c00 	.word	0x40005c00

08015480 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b084      	sub	sp, #16
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015488:	2300      	movs	r3, #0
 801548a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801548c:	2300      	movs	r3, #0
 801548e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015496:	4618      	mov	r0, r3
 8015498:	f7f6 f963 	bl	800b762 <HAL_PCD_Start>
 801549c:	4603      	mov	r3, r0
 801549e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154a0:	7bfb      	ldrb	r3, [r7, #15]
 80154a2:	4618      	mov	r0, r3
 80154a4:	f000 f9c8 	bl	8015838 <USBD_Get_USB_Status>
 80154a8:	4603      	mov	r3, r0
 80154aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3710      	adds	r7, #16
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}

080154b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80154b6:	b580      	push	{r7, lr}
 80154b8:	b084      	sub	sp, #16
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	6078      	str	r0, [r7, #4]
 80154be:	4608      	mov	r0, r1
 80154c0:	4611      	mov	r1, r2
 80154c2:	461a      	mov	r2, r3
 80154c4:	4603      	mov	r3, r0
 80154c6:	70fb      	strb	r3, [r7, #3]
 80154c8:	460b      	mov	r3, r1
 80154ca:	70bb      	strb	r3, [r7, #2]
 80154cc:	4613      	mov	r3, r2
 80154ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154d0:	2300      	movs	r3, #0
 80154d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154d4:	2300      	movs	r3, #0
 80154d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80154de:	78bb      	ldrb	r3, [r7, #2]
 80154e0:	883a      	ldrh	r2, [r7, #0]
 80154e2:	78f9      	ldrb	r1, [r7, #3]
 80154e4:	f7f6 faab 	bl	800ba3e <HAL_PCD_EP_Open>
 80154e8:	4603      	mov	r3, r0
 80154ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154ec:	7bfb      	ldrb	r3, [r7, #15]
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 f9a2 	bl	8015838 <USBD_Get_USB_Status>
 80154f4:	4603      	mov	r3, r0
 80154f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3710      	adds	r7, #16
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}

08015502 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015502:	b580      	push	{r7, lr}
 8015504:	b084      	sub	sp, #16
 8015506:	af00      	add	r7, sp, #0
 8015508:	6078      	str	r0, [r7, #4]
 801550a:	460b      	mov	r3, r1
 801550c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801550e:	2300      	movs	r3, #0
 8015510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015512:	2300      	movs	r3, #0
 8015514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801551c:	78fa      	ldrb	r2, [r7, #3]
 801551e:	4611      	mov	r1, r2
 8015520:	4618      	mov	r0, r3
 8015522:	f7f6 faf2 	bl	800bb0a <HAL_PCD_EP_Close>
 8015526:	4603      	mov	r3, r0
 8015528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801552a:	7bfb      	ldrb	r3, [r7, #15]
 801552c:	4618      	mov	r0, r3
 801552e:	f000 f983 	bl	8015838 <USBD_Get_USB_Status>
 8015532:	4603      	mov	r3, r0
 8015534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015536:	7bbb      	ldrb	r3, [r7, #14]
}
 8015538:	4618      	mov	r0, r3
 801553a:	3710      	adds	r7, #16
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}

08015540 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	460b      	mov	r3, r1
 801554a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801554c:	2300      	movs	r3, #0
 801554e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015550:	2300      	movs	r3, #0
 8015552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801555a:	78fa      	ldrb	r2, [r7, #3]
 801555c:	4611      	mov	r1, r2
 801555e:	4618      	mov	r0, r3
 8015560:	f7f6 fbb3 	bl	800bcca <HAL_PCD_EP_SetStall>
 8015564:	4603      	mov	r3, r0
 8015566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015568:	7bfb      	ldrb	r3, [r7, #15]
 801556a:	4618      	mov	r0, r3
 801556c:	f000 f964 	bl	8015838 <USBD_Get_USB_Status>
 8015570:	4603      	mov	r3, r0
 8015572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015574:	7bbb      	ldrb	r3, [r7, #14]
}
 8015576:	4618      	mov	r0, r3
 8015578:	3710      	adds	r7, #16
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}

0801557e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801557e:	b580      	push	{r7, lr}
 8015580:	b084      	sub	sp, #16
 8015582:	af00      	add	r7, sp, #0
 8015584:	6078      	str	r0, [r7, #4]
 8015586:	460b      	mov	r3, r1
 8015588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801558a:	2300      	movs	r3, #0
 801558c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015598:	78fa      	ldrb	r2, [r7, #3]
 801559a:	4611      	mov	r1, r2
 801559c:	4618      	mov	r0, r3
 801559e:	f7f6 fbe6 	bl	800bd6e <HAL_PCD_EP_ClrStall>
 80155a2:	4603      	mov	r3, r0
 80155a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155a6:	7bfb      	ldrb	r3, [r7, #15]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f000 f945 	bl	8015838 <USBD_Get_USB_Status>
 80155ae:	4603      	mov	r3, r0
 80155b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3710      	adds	r7, #16
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155bc:	b480      	push	{r7}
 80155be:	b085      	sub	sp, #20
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	460b      	mov	r3, r1
 80155c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80155ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80155d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	da0c      	bge.n	80155f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80155d8:	78fb      	ldrb	r3, [r7, #3]
 80155da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155de:	68f9      	ldr	r1, [r7, #12]
 80155e0:	1c5a      	adds	r2, r3, #1
 80155e2:	4613      	mov	r3, r2
 80155e4:	009b      	lsls	r3, r3, #2
 80155e6:	4413      	add	r3, r2
 80155e8:	00db      	lsls	r3, r3, #3
 80155ea:	440b      	add	r3, r1
 80155ec:	3302      	adds	r3, #2
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	e00b      	b.n	801560a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80155f2:	78fb      	ldrb	r3, [r7, #3]
 80155f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80155f8:	68f9      	ldr	r1, [r7, #12]
 80155fa:	4613      	mov	r3, r2
 80155fc:	009b      	lsls	r3, r3, #2
 80155fe:	4413      	add	r3, r2
 8015600:	00db      	lsls	r3, r3, #3
 8015602:	440b      	add	r3, r1
 8015604:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015608:	781b      	ldrb	r3, [r3, #0]
  }
}
 801560a:	4618      	mov	r0, r3
 801560c:	3714      	adds	r7, #20
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr

08015616 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b084      	sub	sp, #16
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	460b      	mov	r3, r1
 8015620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015622:	2300      	movs	r3, #0
 8015624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015626:	2300      	movs	r3, #0
 8015628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015630:	78fa      	ldrb	r2, [r7, #3]
 8015632:	4611      	mov	r1, r2
 8015634:	4618      	mov	r0, r3
 8015636:	f7f6 f9dd 	bl	800b9f4 <HAL_PCD_SetAddress>
 801563a:	4603      	mov	r3, r0
 801563c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801563e:	7bfb      	ldrb	r3, [r7, #15]
 8015640:	4618      	mov	r0, r3
 8015642:	f000 f8f9 	bl	8015838 <USBD_Get_USB_Status>
 8015646:	4603      	mov	r3, r0
 8015648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801564a:	7bbb      	ldrb	r3, [r7, #14]
}
 801564c:	4618      	mov	r0, r3
 801564e:	3710      	adds	r7, #16
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b086      	sub	sp, #24
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	607a      	str	r2, [r7, #4]
 801565e:	603b      	str	r3, [r7, #0]
 8015660:	460b      	mov	r3, r1
 8015662:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015664:	2300      	movs	r3, #0
 8015666:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015668:	2300      	movs	r3, #0
 801566a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015672:	7af9      	ldrb	r1, [r7, #11]
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	f7f6 fae4 	bl	800bc44 <HAL_PCD_EP_Transmit>
 801567c:	4603      	mov	r3, r0
 801567e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015680:	7dfb      	ldrb	r3, [r7, #23]
 8015682:	4618      	mov	r0, r3
 8015684:	f000 f8d8 	bl	8015838 <USBD_Get_USB_Status>
 8015688:	4603      	mov	r3, r0
 801568a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801568c:	7dbb      	ldrb	r3, [r7, #22]
}
 801568e:	4618      	mov	r0, r3
 8015690:	3718      	adds	r7, #24
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}

08015696 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015696:	b580      	push	{r7, lr}
 8015698:	b086      	sub	sp, #24
 801569a:	af00      	add	r7, sp, #0
 801569c:	60f8      	str	r0, [r7, #12]
 801569e:	607a      	str	r2, [r7, #4]
 80156a0:	603b      	str	r3, [r7, #0]
 80156a2:	460b      	mov	r3, r1
 80156a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156a6:	2300      	movs	r3, #0
 80156a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156aa:	2300      	movs	r3, #0
 80156ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80156b4:	7af9      	ldrb	r1, [r7, #11]
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	687a      	ldr	r2, [r7, #4]
 80156ba:	f7f6 fa6e 	bl	800bb9a <HAL_PCD_EP_Receive>
 80156be:	4603      	mov	r3, r0
 80156c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156c2:	7dfb      	ldrb	r3, [r7, #23]
 80156c4:	4618      	mov	r0, r3
 80156c6:	f000 f8b7 	bl	8015838 <USBD_Get_USB_Status>
 80156ca:	4603      	mov	r3, r0
 80156cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80156ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3718      	adds	r7, #24
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	460b      	mov	r3, r1
 80156e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80156ea:	78fa      	ldrb	r2, [r7, #3]
 80156ec:	4611      	mov	r1, r2
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7f6 fa90 	bl	800bc14 <HAL_PCD_EP_GetRxCount>
 80156f4:	4603      	mov	r3, r0
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3708      	adds	r7, #8
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
	...

08015700 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	460b      	mov	r3, r1
 801570a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801570c:	78fb      	ldrb	r3, [r7, #3]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d002      	beq.n	8015718 <HAL_PCDEx_LPM_Callback+0x18>
 8015712:	2b01      	cmp	r3, #1
 8015714:	d013      	beq.n	801573e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015716:	e023      	b.n	8015760 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	699b      	ldr	r3, [r3, #24]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d007      	beq.n	8015730 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015720:	f000 f83c 	bl	801579c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015724:	4b10      	ldr	r3, [pc, #64]	; (8015768 <HAL_PCDEx_LPM_Callback+0x68>)
 8015726:	691b      	ldr	r3, [r3, #16]
 8015728:	4a0f      	ldr	r2, [pc, #60]	; (8015768 <HAL_PCDEx_LPM_Callback+0x68>)
 801572a:	f023 0306 	bic.w	r3, r3, #6
 801572e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015736:	4618      	mov	r0, r3
 8015738:	f7fe fc66 	bl	8014008 <USBD_LL_Resume>
    break;
 801573c:	e010      	b.n	8015760 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8015744:	4618      	mov	r0, r3
 8015746:	f7fe fc49 	bl	8013fdc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	699b      	ldr	r3, [r3, #24]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d005      	beq.n	801575e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015752:	4b05      	ldr	r3, [pc, #20]	; (8015768 <HAL_PCDEx_LPM_Callback+0x68>)
 8015754:	691b      	ldr	r3, [r3, #16]
 8015756:	4a04      	ldr	r2, [pc, #16]	; (8015768 <HAL_PCDEx_LPM_Callback+0x68>)
 8015758:	f043 0306 	orr.w	r3, r3, #6
 801575c:	6113      	str	r3, [r2, #16]
    break;
 801575e:	bf00      	nop
}
 8015760:	bf00      	nop
 8015762:	3708      	adds	r7, #8
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}
 8015768:	e000ed00 	.word	0xe000ed00

0801576c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015774:	4b03      	ldr	r3, [pc, #12]	; (8015784 <USBD_static_malloc+0x18>)
}
 8015776:	4618      	mov	r0, r3
 8015778:	370c      	adds	r7, #12
 801577a:	46bd      	mov	sp, r7
 801577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	20002748 	.word	0x20002748

08015788 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]

}
 8015790:	bf00      	nop
 8015792:	370c      	adds	r7, #12
 8015794:	46bd      	mov	sp, r7
 8015796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579a:	4770      	bx	lr

0801579c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b094      	sub	sp, #80	; 0x50
 80157a0:	af00      	add	r7, sp, #0
	      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80157a2:	f107 0318 	add.w	r3, r7, #24
 80157a6:	2238      	movs	r2, #56	; 0x38
 80157a8:	2100      	movs	r1, #0
 80157aa:	4618      	mov	r0, r3
 80157ac:	f000 f8c8 	bl	8015940 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80157b0:	1d3b      	adds	r3, r7, #4
 80157b2:	2200      	movs	r2, #0
 80157b4:	601a      	str	r2, [r3, #0]
 80157b6:	605a      	str	r2, [r3, #4]
 80157b8:	609a      	str	r2, [r3, #8]
 80157ba:	60da      	str	r2, [r3, #12]
 80157bc:	611a      	str	r2, [r3, #16]

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80157be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80157c2:	f7f7 fc1d 	bl	800d000 <HAL_PWREx_ControlVoltageScaling>

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80157c6:	2322      	movs	r3, #34	; 0x22
 80157c8:	61bb      	str	r3, [r7, #24]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80157ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80157ce:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80157d0:	2340      	movs	r3, #64	; 0x40
 80157d2:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80157d4:	2301      	movs	r3, #1
 80157d6:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80157d8:	2302      	movs	r3, #2
 80157da:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80157dc:	2302      	movs	r3, #2
 80157de:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80157e0:	2301      	movs	r3, #1
 80157e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLN = 16;
 80157e4:	2310      	movs	r3, #16
 80157e6:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80157e8:	2302      	movs	r3, #2
 80157ea:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80157ec:	2302      	movs	r3, #2
 80157ee:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80157f0:	2302      	movs	r3, #2
 80157f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80157f4:	f107 0318 	add.w	r3, r7, #24
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7f7 fca5 	bl	800d148 <HAL_RCC_OscConfig>
 80157fe:	4603      	mov	r3, r0
 8015800:	2b00      	cmp	r3, #0
 8015802:	d001      	beq.n	8015808 <SystemClockConfig_Resume+0x6c>
		  {
		    Error_Handler();
 8015804:	f7f0 ff06 	bl	8006614 <Error_Handler>
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015808:	230f      	movs	r3, #15
 801580a:	607b      	str	r3, [r7, #4]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801580c:	2303      	movs	r3, #3
 801580e:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015810:	2300      	movs	r3, #0
 8015812:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8015814:	2300      	movs	r3, #0
 8015816:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8015818:	2300      	movs	r3, #0
 801581a:	617b      	str	r3, [r7, #20]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801581c:	1d3b      	adds	r3, r7, #4
 801581e:	2103      	movs	r1, #3
 8015820:	4618      	mov	r0, r3
 8015822:	f7f7 ffa9 	bl	800d778 <HAL_RCC_ClockConfig>
 8015826:	4603      	mov	r3, r0
 8015828:	2b00      	cmp	r3, #0
 801582a:	d001      	beq.n	8015830 <SystemClockConfig_Resume+0x94>
		  {
		    Error_Handler();
 801582c:	f7f0 fef2 	bl	8006614 <Error_Handler>
		  }

}
 8015830:	bf00      	nop
 8015832:	3750      	adds	r7, #80	; 0x50
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}

08015838 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015838:	b480      	push	{r7}
 801583a:	b085      	sub	sp, #20
 801583c:	af00      	add	r7, sp, #0
 801583e:	4603      	mov	r3, r0
 8015840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015842:	2300      	movs	r3, #0
 8015844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015846:	79fb      	ldrb	r3, [r7, #7]
 8015848:	2b03      	cmp	r3, #3
 801584a:	d817      	bhi.n	801587c <USBD_Get_USB_Status+0x44>
 801584c:	a201      	add	r2, pc, #4	; (adr r2, 8015854 <USBD_Get_USB_Status+0x1c>)
 801584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015852:	bf00      	nop
 8015854:	08015865 	.word	0x08015865
 8015858:	0801586b 	.word	0x0801586b
 801585c:	08015871 	.word	0x08015871
 8015860:	08015877 	.word	0x08015877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015864:	2300      	movs	r3, #0
 8015866:	73fb      	strb	r3, [r7, #15]
    break;
 8015868:	e00b      	b.n	8015882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801586a:	2303      	movs	r3, #3
 801586c:	73fb      	strb	r3, [r7, #15]
    break;
 801586e:	e008      	b.n	8015882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015870:	2301      	movs	r3, #1
 8015872:	73fb      	strb	r3, [r7, #15]
    break;
 8015874:	e005      	b.n	8015882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015876:	2303      	movs	r3, #3
 8015878:	73fb      	strb	r3, [r7, #15]
    break;
 801587a:	e002      	b.n	8015882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801587c:	2303      	movs	r3, #3
 801587e:	73fb      	strb	r3, [r7, #15]
    break;
 8015880:	bf00      	nop
  }
  return usb_status;
 8015882:	7bfb      	ldrb	r3, [r7, #15]
}
 8015884:	4618      	mov	r0, r3
 8015886:	3714      	adds	r7, #20
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr

08015890 <abort>:
 8015890:	b508      	push	{r3, lr}
 8015892:	2006      	movs	r0, #6
 8015894:	f000 fe6c 	bl	8016570 <raise>
 8015898:	2001      	movs	r0, #1
 801589a:	f7f1 fdbd 	bl	8007418 <_exit>
	...

080158a0 <__errno>:
 80158a0:	4b01      	ldr	r3, [pc, #4]	; (80158a8 <__errno+0x8>)
 80158a2:	6818      	ldr	r0, [r3, #0]
 80158a4:	4770      	bx	lr
 80158a6:	bf00      	nop
 80158a8:	20000184 	.word	0x20000184

080158ac <__libc_init_array>:
 80158ac:	b570      	push	{r4, r5, r6, lr}
 80158ae:	4d0d      	ldr	r5, [pc, #52]	; (80158e4 <__libc_init_array+0x38>)
 80158b0:	4c0d      	ldr	r4, [pc, #52]	; (80158e8 <__libc_init_array+0x3c>)
 80158b2:	1b64      	subs	r4, r4, r5
 80158b4:	10a4      	asrs	r4, r4, #2
 80158b6:	2600      	movs	r6, #0
 80158b8:	42a6      	cmp	r6, r4
 80158ba:	d109      	bne.n	80158d0 <__libc_init_array+0x24>
 80158bc:	4d0b      	ldr	r5, [pc, #44]	; (80158ec <__libc_init_array+0x40>)
 80158be:	4c0c      	ldr	r4, [pc, #48]	; (80158f0 <__libc_init_array+0x44>)
 80158c0:	f002 fdcc 	bl	801845c <_init>
 80158c4:	1b64      	subs	r4, r4, r5
 80158c6:	10a4      	asrs	r4, r4, #2
 80158c8:	2600      	movs	r6, #0
 80158ca:	42a6      	cmp	r6, r4
 80158cc:	d105      	bne.n	80158da <__libc_init_array+0x2e>
 80158ce:	bd70      	pop	{r4, r5, r6, pc}
 80158d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80158d4:	4798      	blx	r3
 80158d6:	3601      	adds	r6, #1
 80158d8:	e7ee      	b.n	80158b8 <__libc_init_array+0xc>
 80158da:	f855 3b04 	ldr.w	r3, [r5], #4
 80158de:	4798      	blx	r3
 80158e0:	3601      	adds	r6, #1
 80158e2:	e7f2      	b.n	80158ca <__libc_init_array+0x1e>
 80158e4:	08019a9c 	.word	0x08019a9c
 80158e8:	08019a9c 	.word	0x08019a9c
 80158ec:	08019a9c 	.word	0x08019a9c
 80158f0:	08019aa0 	.word	0x08019aa0

080158f4 <malloc>:
 80158f4:	4b02      	ldr	r3, [pc, #8]	; (8015900 <malloc+0xc>)
 80158f6:	4601      	mov	r1, r0
 80158f8:	6818      	ldr	r0, [r3, #0]
 80158fa:	f000 b895 	b.w	8015a28 <_malloc_r>
 80158fe:	bf00      	nop
 8015900:	20000184 	.word	0x20000184

08015904 <memcmp>:
 8015904:	b510      	push	{r4, lr}
 8015906:	3901      	subs	r1, #1
 8015908:	4402      	add	r2, r0
 801590a:	4290      	cmp	r0, r2
 801590c:	d101      	bne.n	8015912 <memcmp+0xe>
 801590e:	2000      	movs	r0, #0
 8015910:	e005      	b.n	801591e <memcmp+0x1a>
 8015912:	7803      	ldrb	r3, [r0, #0]
 8015914:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015918:	42a3      	cmp	r3, r4
 801591a:	d001      	beq.n	8015920 <memcmp+0x1c>
 801591c:	1b18      	subs	r0, r3, r4
 801591e:	bd10      	pop	{r4, pc}
 8015920:	3001      	adds	r0, #1
 8015922:	e7f2      	b.n	801590a <memcmp+0x6>

08015924 <memcpy>:
 8015924:	440a      	add	r2, r1
 8015926:	4291      	cmp	r1, r2
 8015928:	f100 33ff 	add.w	r3, r0, #4294967295
 801592c:	d100      	bne.n	8015930 <memcpy+0xc>
 801592e:	4770      	bx	lr
 8015930:	b510      	push	{r4, lr}
 8015932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015936:	f803 4f01 	strb.w	r4, [r3, #1]!
 801593a:	4291      	cmp	r1, r2
 801593c:	d1f9      	bne.n	8015932 <memcpy+0xe>
 801593e:	bd10      	pop	{r4, pc}

08015940 <memset>:
 8015940:	4402      	add	r2, r0
 8015942:	4603      	mov	r3, r0
 8015944:	4293      	cmp	r3, r2
 8015946:	d100      	bne.n	801594a <memset+0xa>
 8015948:	4770      	bx	lr
 801594a:	f803 1b01 	strb.w	r1, [r3], #1
 801594e:	e7f9      	b.n	8015944 <memset+0x4>

08015950 <_free_r>:
 8015950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015952:	2900      	cmp	r1, #0
 8015954:	d044      	beq.n	80159e0 <_free_r+0x90>
 8015956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801595a:	9001      	str	r0, [sp, #4]
 801595c:	2b00      	cmp	r3, #0
 801595e:	f1a1 0404 	sub.w	r4, r1, #4
 8015962:	bfb8      	it	lt
 8015964:	18e4      	addlt	r4, r4, r3
 8015966:	f001 ff7d 	bl	8017864 <__malloc_lock>
 801596a:	4a1e      	ldr	r2, [pc, #120]	; (80159e4 <_free_r+0x94>)
 801596c:	9801      	ldr	r0, [sp, #4]
 801596e:	6813      	ldr	r3, [r2, #0]
 8015970:	b933      	cbnz	r3, 8015980 <_free_r+0x30>
 8015972:	6063      	str	r3, [r4, #4]
 8015974:	6014      	str	r4, [r2, #0]
 8015976:	b003      	add	sp, #12
 8015978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801597c:	f001 bf78 	b.w	8017870 <__malloc_unlock>
 8015980:	42a3      	cmp	r3, r4
 8015982:	d908      	bls.n	8015996 <_free_r+0x46>
 8015984:	6825      	ldr	r5, [r4, #0]
 8015986:	1961      	adds	r1, r4, r5
 8015988:	428b      	cmp	r3, r1
 801598a:	bf01      	itttt	eq
 801598c:	6819      	ldreq	r1, [r3, #0]
 801598e:	685b      	ldreq	r3, [r3, #4]
 8015990:	1949      	addeq	r1, r1, r5
 8015992:	6021      	streq	r1, [r4, #0]
 8015994:	e7ed      	b.n	8015972 <_free_r+0x22>
 8015996:	461a      	mov	r2, r3
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	b10b      	cbz	r3, 80159a0 <_free_r+0x50>
 801599c:	42a3      	cmp	r3, r4
 801599e:	d9fa      	bls.n	8015996 <_free_r+0x46>
 80159a0:	6811      	ldr	r1, [r2, #0]
 80159a2:	1855      	adds	r5, r2, r1
 80159a4:	42a5      	cmp	r5, r4
 80159a6:	d10b      	bne.n	80159c0 <_free_r+0x70>
 80159a8:	6824      	ldr	r4, [r4, #0]
 80159aa:	4421      	add	r1, r4
 80159ac:	1854      	adds	r4, r2, r1
 80159ae:	42a3      	cmp	r3, r4
 80159b0:	6011      	str	r1, [r2, #0]
 80159b2:	d1e0      	bne.n	8015976 <_free_r+0x26>
 80159b4:	681c      	ldr	r4, [r3, #0]
 80159b6:	685b      	ldr	r3, [r3, #4]
 80159b8:	6053      	str	r3, [r2, #4]
 80159ba:	4421      	add	r1, r4
 80159bc:	6011      	str	r1, [r2, #0]
 80159be:	e7da      	b.n	8015976 <_free_r+0x26>
 80159c0:	d902      	bls.n	80159c8 <_free_r+0x78>
 80159c2:	230c      	movs	r3, #12
 80159c4:	6003      	str	r3, [r0, #0]
 80159c6:	e7d6      	b.n	8015976 <_free_r+0x26>
 80159c8:	6825      	ldr	r5, [r4, #0]
 80159ca:	1961      	adds	r1, r4, r5
 80159cc:	428b      	cmp	r3, r1
 80159ce:	bf04      	itt	eq
 80159d0:	6819      	ldreq	r1, [r3, #0]
 80159d2:	685b      	ldreq	r3, [r3, #4]
 80159d4:	6063      	str	r3, [r4, #4]
 80159d6:	bf04      	itt	eq
 80159d8:	1949      	addeq	r1, r1, r5
 80159da:	6021      	streq	r1, [r4, #0]
 80159dc:	6054      	str	r4, [r2, #4]
 80159de:	e7ca      	b.n	8015976 <_free_r+0x26>
 80159e0:	b003      	add	sp, #12
 80159e2:	bd30      	pop	{r4, r5, pc}
 80159e4:	20002968 	.word	0x20002968

080159e8 <sbrk_aligned>:
 80159e8:	b570      	push	{r4, r5, r6, lr}
 80159ea:	4e0e      	ldr	r6, [pc, #56]	; (8015a24 <sbrk_aligned+0x3c>)
 80159ec:	460c      	mov	r4, r1
 80159ee:	6831      	ldr	r1, [r6, #0]
 80159f0:	4605      	mov	r5, r0
 80159f2:	b911      	cbnz	r1, 80159fa <sbrk_aligned+0x12>
 80159f4:	f000 fd84 	bl	8016500 <_sbrk_r>
 80159f8:	6030      	str	r0, [r6, #0]
 80159fa:	4621      	mov	r1, r4
 80159fc:	4628      	mov	r0, r5
 80159fe:	f000 fd7f 	bl	8016500 <_sbrk_r>
 8015a02:	1c43      	adds	r3, r0, #1
 8015a04:	d00a      	beq.n	8015a1c <sbrk_aligned+0x34>
 8015a06:	1cc4      	adds	r4, r0, #3
 8015a08:	f024 0403 	bic.w	r4, r4, #3
 8015a0c:	42a0      	cmp	r0, r4
 8015a0e:	d007      	beq.n	8015a20 <sbrk_aligned+0x38>
 8015a10:	1a21      	subs	r1, r4, r0
 8015a12:	4628      	mov	r0, r5
 8015a14:	f000 fd74 	bl	8016500 <_sbrk_r>
 8015a18:	3001      	adds	r0, #1
 8015a1a:	d101      	bne.n	8015a20 <sbrk_aligned+0x38>
 8015a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8015a20:	4620      	mov	r0, r4
 8015a22:	bd70      	pop	{r4, r5, r6, pc}
 8015a24:	2000296c 	.word	0x2000296c

08015a28 <_malloc_r>:
 8015a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	1ccd      	adds	r5, r1, #3
 8015a2e:	f025 0503 	bic.w	r5, r5, #3
 8015a32:	3508      	adds	r5, #8
 8015a34:	2d0c      	cmp	r5, #12
 8015a36:	bf38      	it	cc
 8015a38:	250c      	movcc	r5, #12
 8015a3a:	2d00      	cmp	r5, #0
 8015a3c:	4607      	mov	r7, r0
 8015a3e:	db01      	blt.n	8015a44 <_malloc_r+0x1c>
 8015a40:	42a9      	cmp	r1, r5
 8015a42:	d905      	bls.n	8015a50 <_malloc_r+0x28>
 8015a44:	230c      	movs	r3, #12
 8015a46:	603b      	str	r3, [r7, #0]
 8015a48:	2600      	movs	r6, #0
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a50:	4e2e      	ldr	r6, [pc, #184]	; (8015b0c <_malloc_r+0xe4>)
 8015a52:	f001 ff07 	bl	8017864 <__malloc_lock>
 8015a56:	6833      	ldr	r3, [r6, #0]
 8015a58:	461c      	mov	r4, r3
 8015a5a:	bb34      	cbnz	r4, 8015aaa <_malloc_r+0x82>
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	4638      	mov	r0, r7
 8015a60:	f7ff ffc2 	bl	80159e8 <sbrk_aligned>
 8015a64:	1c43      	adds	r3, r0, #1
 8015a66:	4604      	mov	r4, r0
 8015a68:	d14d      	bne.n	8015b06 <_malloc_r+0xde>
 8015a6a:	6834      	ldr	r4, [r6, #0]
 8015a6c:	4626      	mov	r6, r4
 8015a6e:	2e00      	cmp	r6, #0
 8015a70:	d140      	bne.n	8015af4 <_malloc_r+0xcc>
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	4631      	mov	r1, r6
 8015a76:	4638      	mov	r0, r7
 8015a78:	eb04 0803 	add.w	r8, r4, r3
 8015a7c:	f000 fd40 	bl	8016500 <_sbrk_r>
 8015a80:	4580      	cmp	r8, r0
 8015a82:	d13a      	bne.n	8015afa <_malloc_r+0xd2>
 8015a84:	6821      	ldr	r1, [r4, #0]
 8015a86:	3503      	adds	r5, #3
 8015a88:	1a6d      	subs	r5, r5, r1
 8015a8a:	f025 0503 	bic.w	r5, r5, #3
 8015a8e:	3508      	adds	r5, #8
 8015a90:	2d0c      	cmp	r5, #12
 8015a92:	bf38      	it	cc
 8015a94:	250c      	movcc	r5, #12
 8015a96:	4629      	mov	r1, r5
 8015a98:	4638      	mov	r0, r7
 8015a9a:	f7ff ffa5 	bl	80159e8 <sbrk_aligned>
 8015a9e:	3001      	adds	r0, #1
 8015aa0:	d02b      	beq.n	8015afa <_malloc_r+0xd2>
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	442b      	add	r3, r5
 8015aa6:	6023      	str	r3, [r4, #0]
 8015aa8:	e00e      	b.n	8015ac8 <_malloc_r+0xa0>
 8015aaa:	6822      	ldr	r2, [r4, #0]
 8015aac:	1b52      	subs	r2, r2, r5
 8015aae:	d41e      	bmi.n	8015aee <_malloc_r+0xc6>
 8015ab0:	2a0b      	cmp	r2, #11
 8015ab2:	d916      	bls.n	8015ae2 <_malloc_r+0xba>
 8015ab4:	1961      	adds	r1, r4, r5
 8015ab6:	42a3      	cmp	r3, r4
 8015ab8:	6025      	str	r5, [r4, #0]
 8015aba:	bf18      	it	ne
 8015abc:	6059      	strne	r1, [r3, #4]
 8015abe:	6863      	ldr	r3, [r4, #4]
 8015ac0:	bf08      	it	eq
 8015ac2:	6031      	streq	r1, [r6, #0]
 8015ac4:	5162      	str	r2, [r4, r5]
 8015ac6:	604b      	str	r3, [r1, #4]
 8015ac8:	4638      	mov	r0, r7
 8015aca:	f104 060b 	add.w	r6, r4, #11
 8015ace:	f001 fecf 	bl	8017870 <__malloc_unlock>
 8015ad2:	f026 0607 	bic.w	r6, r6, #7
 8015ad6:	1d23      	adds	r3, r4, #4
 8015ad8:	1af2      	subs	r2, r6, r3
 8015ada:	d0b6      	beq.n	8015a4a <_malloc_r+0x22>
 8015adc:	1b9b      	subs	r3, r3, r6
 8015ade:	50a3      	str	r3, [r4, r2]
 8015ae0:	e7b3      	b.n	8015a4a <_malloc_r+0x22>
 8015ae2:	6862      	ldr	r2, [r4, #4]
 8015ae4:	42a3      	cmp	r3, r4
 8015ae6:	bf0c      	ite	eq
 8015ae8:	6032      	streq	r2, [r6, #0]
 8015aea:	605a      	strne	r2, [r3, #4]
 8015aec:	e7ec      	b.n	8015ac8 <_malloc_r+0xa0>
 8015aee:	4623      	mov	r3, r4
 8015af0:	6864      	ldr	r4, [r4, #4]
 8015af2:	e7b2      	b.n	8015a5a <_malloc_r+0x32>
 8015af4:	4634      	mov	r4, r6
 8015af6:	6876      	ldr	r6, [r6, #4]
 8015af8:	e7b9      	b.n	8015a6e <_malloc_r+0x46>
 8015afa:	230c      	movs	r3, #12
 8015afc:	603b      	str	r3, [r7, #0]
 8015afe:	4638      	mov	r0, r7
 8015b00:	f001 feb6 	bl	8017870 <__malloc_unlock>
 8015b04:	e7a1      	b.n	8015a4a <_malloc_r+0x22>
 8015b06:	6025      	str	r5, [r4, #0]
 8015b08:	e7de      	b.n	8015ac8 <_malloc_r+0xa0>
 8015b0a:	bf00      	nop
 8015b0c:	20002968 	.word	0x20002968

08015b10 <__cvt>:
 8015b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b14:	ec55 4b10 	vmov	r4, r5, d0
 8015b18:	2d00      	cmp	r5, #0
 8015b1a:	460e      	mov	r6, r1
 8015b1c:	4619      	mov	r1, r3
 8015b1e:	462b      	mov	r3, r5
 8015b20:	bfbb      	ittet	lt
 8015b22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015b26:	461d      	movlt	r5, r3
 8015b28:	2300      	movge	r3, #0
 8015b2a:	232d      	movlt	r3, #45	; 0x2d
 8015b2c:	700b      	strb	r3, [r1, #0]
 8015b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015b34:	4691      	mov	r9, r2
 8015b36:	f023 0820 	bic.w	r8, r3, #32
 8015b3a:	bfbc      	itt	lt
 8015b3c:	4622      	movlt	r2, r4
 8015b3e:	4614      	movlt	r4, r2
 8015b40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015b44:	d005      	beq.n	8015b52 <__cvt+0x42>
 8015b46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015b4a:	d100      	bne.n	8015b4e <__cvt+0x3e>
 8015b4c:	3601      	adds	r6, #1
 8015b4e:	2102      	movs	r1, #2
 8015b50:	e000      	b.n	8015b54 <__cvt+0x44>
 8015b52:	2103      	movs	r1, #3
 8015b54:	ab03      	add	r3, sp, #12
 8015b56:	9301      	str	r3, [sp, #4]
 8015b58:	ab02      	add	r3, sp, #8
 8015b5a:	9300      	str	r3, [sp, #0]
 8015b5c:	ec45 4b10 	vmov	d0, r4, r5
 8015b60:	4653      	mov	r3, sl
 8015b62:	4632      	mov	r2, r6
 8015b64:	f000 fe6c 	bl	8016840 <_dtoa_r>
 8015b68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015b6c:	4607      	mov	r7, r0
 8015b6e:	d102      	bne.n	8015b76 <__cvt+0x66>
 8015b70:	f019 0f01 	tst.w	r9, #1
 8015b74:	d022      	beq.n	8015bbc <__cvt+0xac>
 8015b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015b7a:	eb07 0906 	add.w	r9, r7, r6
 8015b7e:	d110      	bne.n	8015ba2 <__cvt+0x92>
 8015b80:	783b      	ldrb	r3, [r7, #0]
 8015b82:	2b30      	cmp	r3, #48	; 0x30
 8015b84:	d10a      	bne.n	8015b9c <__cvt+0x8c>
 8015b86:	2200      	movs	r2, #0
 8015b88:	2300      	movs	r3, #0
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	4629      	mov	r1, r5
 8015b8e:	f7ea ffc3 	bl	8000b18 <__aeabi_dcmpeq>
 8015b92:	b918      	cbnz	r0, 8015b9c <__cvt+0x8c>
 8015b94:	f1c6 0601 	rsb	r6, r6, #1
 8015b98:	f8ca 6000 	str.w	r6, [sl]
 8015b9c:	f8da 3000 	ldr.w	r3, [sl]
 8015ba0:	4499      	add	r9, r3
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	4629      	mov	r1, r5
 8015baa:	f7ea ffb5 	bl	8000b18 <__aeabi_dcmpeq>
 8015bae:	b108      	cbz	r0, 8015bb4 <__cvt+0xa4>
 8015bb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8015bb4:	2230      	movs	r2, #48	; 0x30
 8015bb6:	9b03      	ldr	r3, [sp, #12]
 8015bb8:	454b      	cmp	r3, r9
 8015bba:	d307      	bcc.n	8015bcc <__cvt+0xbc>
 8015bbc:	9b03      	ldr	r3, [sp, #12]
 8015bbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bc0:	1bdb      	subs	r3, r3, r7
 8015bc2:	4638      	mov	r0, r7
 8015bc4:	6013      	str	r3, [r2, #0]
 8015bc6:	b004      	add	sp, #16
 8015bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bcc:	1c59      	adds	r1, r3, #1
 8015bce:	9103      	str	r1, [sp, #12]
 8015bd0:	701a      	strb	r2, [r3, #0]
 8015bd2:	e7f0      	b.n	8015bb6 <__cvt+0xa6>

08015bd4 <__exponent>:
 8015bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2900      	cmp	r1, #0
 8015bda:	bfb8      	it	lt
 8015bdc:	4249      	neglt	r1, r1
 8015bde:	f803 2b02 	strb.w	r2, [r3], #2
 8015be2:	bfb4      	ite	lt
 8015be4:	222d      	movlt	r2, #45	; 0x2d
 8015be6:	222b      	movge	r2, #43	; 0x2b
 8015be8:	2909      	cmp	r1, #9
 8015bea:	7042      	strb	r2, [r0, #1]
 8015bec:	dd2a      	ble.n	8015c44 <__exponent+0x70>
 8015bee:	f10d 0407 	add.w	r4, sp, #7
 8015bf2:	46a4      	mov	ip, r4
 8015bf4:	270a      	movs	r7, #10
 8015bf6:	46a6      	mov	lr, r4
 8015bf8:	460a      	mov	r2, r1
 8015bfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8015bfe:	fb07 1516 	mls	r5, r7, r6, r1
 8015c02:	3530      	adds	r5, #48	; 0x30
 8015c04:	2a63      	cmp	r2, #99	; 0x63
 8015c06:	f104 34ff 	add.w	r4, r4, #4294967295
 8015c0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015c0e:	4631      	mov	r1, r6
 8015c10:	dcf1      	bgt.n	8015bf6 <__exponent+0x22>
 8015c12:	3130      	adds	r1, #48	; 0x30
 8015c14:	f1ae 0502 	sub.w	r5, lr, #2
 8015c18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015c1c:	1c44      	adds	r4, r0, #1
 8015c1e:	4629      	mov	r1, r5
 8015c20:	4561      	cmp	r1, ip
 8015c22:	d30a      	bcc.n	8015c3a <__exponent+0x66>
 8015c24:	f10d 0209 	add.w	r2, sp, #9
 8015c28:	eba2 020e 	sub.w	r2, r2, lr
 8015c2c:	4565      	cmp	r5, ip
 8015c2e:	bf88      	it	hi
 8015c30:	2200      	movhi	r2, #0
 8015c32:	4413      	add	r3, r2
 8015c34:	1a18      	subs	r0, r3, r0
 8015c36:	b003      	add	sp, #12
 8015c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015c42:	e7ed      	b.n	8015c20 <__exponent+0x4c>
 8015c44:	2330      	movs	r3, #48	; 0x30
 8015c46:	3130      	adds	r1, #48	; 0x30
 8015c48:	7083      	strb	r3, [r0, #2]
 8015c4a:	70c1      	strb	r1, [r0, #3]
 8015c4c:	1d03      	adds	r3, r0, #4
 8015c4e:	e7f1      	b.n	8015c34 <__exponent+0x60>

08015c50 <_printf_float>:
 8015c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c54:	ed2d 8b02 	vpush	{d8}
 8015c58:	b08d      	sub	sp, #52	; 0x34
 8015c5a:	460c      	mov	r4, r1
 8015c5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015c60:	4616      	mov	r6, r2
 8015c62:	461f      	mov	r7, r3
 8015c64:	4605      	mov	r5, r0
 8015c66:	f001 fd91 	bl	801778c <_localeconv_r>
 8015c6a:	f8d0 a000 	ldr.w	sl, [r0]
 8015c6e:	4650      	mov	r0, sl
 8015c70:	f7ea fb26 	bl	80002c0 <strlen>
 8015c74:	2300      	movs	r3, #0
 8015c76:	930a      	str	r3, [sp, #40]	; 0x28
 8015c78:	6823      	ldr	r3, [r4, #0]
 8015c7a:	9305      	str	r3, [sp, #20]
 8015c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015c84:	3307      	adds	r3, #7
 8015c86:	f023 0307 	bic.w	r3, r3, #7
 8015c8a:	f103 0208 	add.w	r2, r3, #8
 8015c8e:	f8c8 2000 	str.w	r2, [r8]
 8015c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015c9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015c9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015ca2:	9307      	str	r3, [sp, #28]
 8015ca4:	f8cd 8018 	str.w	r8, [sp, #24]
 8015ca8:	ee08 0a10 	vmov	s16, r0
 8015cac:	4b9f      	ldr	r3, [pc, #636]	; (8015f2c <_printf_float+0x2dc>)
 8015cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8015cb6:	f7ea ff61 	bl	8000b7c <__aeabi_dcmpun>
 8015cba:	bb88      	cbnz	r0, 8015d20 <_printf_float+0xd0>
 8015cbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015cc0:	4b9a      	ldr	r3, [pc, #616]	; (8015f2c <_printf_float+0x2dc>)
 8015cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8015cc6:	f7ea ff3b 	bl	8000b40 <__aeabi_dcmple>
 8015cca:	bb48      	cbnz	r0, 8015d20 <_printf_float+0xd0>
 8015ccc:	2200      	movs	r2, #0
 8015cce:	2300      	movs	r3, #0
 8015cd0:	4640      	mov	r0, r8
 8015cd2:	4649      	mov	r1, r9
 8015cd4:	f7ea ff2a 	bl	8000b2c <__aeabi_dcmplt>
 8015cd8:	b110      	cbz	r0, 8015ce0 <_printf_float+0x90>
 8015cda:	232d      	movs	r3, #45	; 0x2d
 8015cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ce0:	4b93      	ldr	r3, [pc, #588]	; (8015f30 <_printf_float+0x2e0>)
 8015ce2:	4894      	ldr	r0, [pc, #592]	; (8015f34 <_printf_float+0x2e4>)
 8015ce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015ce8:	bf94      	ite	ls
 8015cea:	4698      	movls	r8, r3
 8015cec:	4680      	movhi	r8, r0
 8015cee:	2303      	movs	r3, #3
 8015cf0:	6123      	str	r3, [r4, #16]
 8015cf2:	9b05      	ldr	r3, [sp, #20]
 8015cf4:	f023 0204 	bic.w	r2, r3, #4
 8015cf8:	6022      	str	r2, [r4, #0]
 8015cfa:	f04f 0900 	mov.w	r9, #0
 8015cfe:	9700      	str	r7, [sp, #0]
 8015d00:	4633      	mov	r3, r6
 8015d02:	aa0b      	add	r2, sp, #44	; 0x2c
 8015d04:	4621      	mov	r1, r4
 8015d06:	4628      	mov	r0, r5
 8015d08:	f000 f9d8 	bl	80160bc <_printf_common>
 8015d0c:	3001      	adds	r0, #1
 8015d0e:	f040 8090 	bne.w	8015e32 <_printf_float+0x1e2>
 8015d12:	f04f 30ff 	mov.w	r0, #4294967295
 8015d16:	b00d      	add	sp, #52	; 0x34
 8015d18:	ecbd 8b02 	vpop	{d8}
 8015d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d20:	4642      	mov	r2, r8
 8015d22:	464b      	mov	r3, r9
 8015d24:	4640      	mov	r0, r8
 8015d26:	4649      	mov	r1, r9
 8015d28:	f7ea ff28 	bl	8000b7c <__aeabi_dcmpun>
 8015d2c:	b140      	cbz	r0, 8015d40 <_printf_float+0xf0>
 8015d2e:	464b      	mov	r3, r9
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	bfbc      	itt	lt
 8015d34:	232d      	movlt	r3, #45	; 0x2d
 8015d36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015d3a:	487f      	ldr	r0, [pc, #508]	; (8015f38 <_printf_float+0x2e8>)
 8015d3c:	4b7f      	ldr	r3, [pc, #508]	; (8015f3c <_printf_float+0x2ec>)
 8015d3e:	e7d1      	b.n	8015ce4 <_printf_float+0x94>
 8015d40:	6863      	ldr	r3, [r4, #4]
 8015d42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015d46:	9206      	str	r2, [sp, #24]
 8015d48:	1c5a      	adds	r2, r3, #1
 8015d4a:	d13f      	bne.n	8015dcc <_printf_float+0x17c>
 8015d4c:	2306      	movs	r3, #6
 8015d4e:	6063      	str	r3, [r4, #4]
 8015d50:	9b05      	ldr	r3, [sp, #20]
 8015d52:	6861      	ldr	r1, [r4, #4]
 8015d54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015d58:	2300      	movs	r3, #0
 8015d5a:	9303      	str	r3, [sp, #12]
 8015d5c:	ab0a      	add	r3, sp, #40	; 0x28
 8015d5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015d62:	ab09      	add	r3, sp, #36	; 0x24
 8015d64:	ec49 8b10 	vmov	d0, r8, r9
 8015d68:	9300      	str	r3, [sp, #0]
 8015d6a:	6022      	str	r2, [r4, #0]
 8015d6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015d70:	4628      	mov	r0, r5
 8015d72:	f7ff fecd 	bl	8015b10 <__cvt>
 8015d76:	9b06      	ldr	r3, [sp, #24]
 8015d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d7a:	2b47      	cmp	r3, #71	; 0x47
 8015d7c:	4680      	mov	r8, r0
 8015d7e:	d108      	bne.n	8015d92 <_printf_float+0x142>
 8015d80:	1cc8      	adds	r0, r1, #3
 8015d82:	db02      	blt.n	8015d8a <_printf_float+0x13a>
 8015d84:	6863      	ldr	r3, [r4, #4]
 8015d86:	4299      	cmp	r1, r3
 8015d88:	dd41      	ble.n	8015e0e <_printf_float+0x1be>
 8015d8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8015d8e:	fa5f fb8b 	uxtb.w	fp, fp
 8015d92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015d96:	d820      	bhi.n	8015dda <_printf_float+0x18a>
 8015d98:	3901      	subs	r1, #1
 8015d9a:	465a      	mov	r2, fp
 8015d9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015da0:	9109      	str	r1, [sp, #36]	; 0x24
 8015da2:	f7ff ff17 	bl	8015bd4 <__exponent>
 8015da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015da8:	1813      	adds	r3, r2, r0
 8015daa:	2a01      	cmp	r2, #1
 8015dac:	4681      	mov	r9, r0
 8015dae:	6123      	str	r3, [r4, #16]
 8015db0:	dc02      	bgt.n	8015db8 <_printf_float+0x168>
 8015db2:	6822      	ldr	r2, [r4, #0]
 8015db4:	07d2      	lsls	r2, r2, #31
 8015db6:	d501      	bpl.n	8015dbc <_printf_float+0x16c>
 8015db8:	3301      	adds	r3, #1
 8015dba:	6123      	str	r3, [r4, #16]
 8015dbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d09c      	beq.n	8015cfe <_printf_float+0xae>
 8015dc4:	232d      	movs	r3, #45	; 0x2d
 8015dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015dca:	e798      	b.n	8015cfe <_printf_float+0xae>
 8015dcc:	9a06      	ldr	r2, [sp, #24]
 8015dce:	2a47      	cmp	r2, #71	; 0x47
 8015dd0:	d1be      	bne.n	8015d50 <_printf_float+0x100>
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1bc      	bne.n	8015d50 <_printf_float+0x100>
 8015dd6:	2301      	movs	r3, #1
 8015dd8:	e7b9      	b.n	8015d4e <_printf_float+0xfe>
 8015dda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015dde:	d118      	bne.n	8015e12 <_printf_float+0x1c2>
 8015de0:	2900      	cmp	r1, #0
 8015de2:	6863      	ldr	r3, [r4, #4]
 8015de4:	dd0b      	ble.n	8015dfe <_printf_float+0x1ae>
 8015de6:	6121      	str	r1, [r4, #16]
 8015de8:	b913      	cbnz	r3, 8015df0 <_printf_float+0x1a0>
 8015dea:	6822      	ldr	r2, [r4, #0]
 8015dec:	07d0      	lsls	r0, r2, #31
 8015dee:	d502      	bpl.n	8015df6 <_printf_float+0x1a6>
 8015df0:	3301      	adds	r3, #1
 8015df2:	440b      	add	r3, r1
 8015df4:	6123      	str	r3, [r4, #16]
 8015df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8015df8:	f04f 0900 	mov.w	r9, #0
 8015dfc:	e7de      	b.n	8015dbc <_printf_float+0x16c>
 8015dfe:	b913      	cbnz	r3, 8015e06 <_printf_float+0x1b6>
 8015e00:	6822      	ldr	r2, [r4, #0]
 8015e02:	07d2      	lsls	r2, r2, #31
 8015e04:	d501      	bpl.n	8015e0a <_printf_float+0x1ba>
 8015e06:	3302      	adds	r3, #2
 8015e08:	e7f4      	b.n	8015df4 <_printf_float+0x1a4>
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	e7f2      	b.n	8015df4 <_printf_float+0x1a4>
 8015e0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e14:	4299      	cmp	r1, r3
 8015e16:	db05      	blt.n	8015e24 <_printf_float+0x1d4>
 8015e18:	6823      	ldr	r3, [r4, #0]
 8015e1a:	6121      	str	r1, [r4, #16]
 8015e1c:	07d8      	lsls	r0, r3, #31
 8015e1e:	d5ea      	bpl.n	8015df6 <_printf_float+0x1a6>
 8015e20:	1c4b      	adds	r3, r1, #1
 8015e22:	e7e7      	b.n	8015df4 <_printf_float+0x1a4>
 8015e24:	2900      	cmp	r1, #0
 8015e26:	bfd4      	ite	le
 8015e28:	f1c1 0202 	rsble	r2, r1, #2
 8015e2c:	2201      	movgt	r2, #1
 8015e2e:	4413      	add	r3, r2
 8015e30:	e7e0      	b.n	8015df4 <_printf_float+0x1a4>
 8015e32:	6823      	ldr	r3, [r4, #0]
 8015e34:	055a      	lsls	r2, r3, #21
 8015e36:	d407      	bmi.n	8015e48 <_printf_float+0x1f8>
 8015e38:	6923      	ldr	r3, [r4, #16]
 8015e3a:	4642      	mov	r2, r8
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	4628      	mov	r0, r5
 8015e40:	47b8      	blx	r7
 8015e42:	3001      	adds	r0, #1
 8015e44:	d12c      	bne.n	8015ea0 <_printf_float+0x250>
 8015e46:	e764      	b.n	8015d12 <_printf_float+0xc2>
 8015e48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015e4c:	f240 80e0 	bls.w	8016010 <_printf_float+0x3c0>
 8015e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015e54:	2200      	movs	r2, #0
 8015e56:	2300      	movs	r3, #0
 8015e58:	f7ea fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 8015e5c:	2800      	cmp	r0, #0
 8015e5e:	d034      	beq.n	8015eca <_printf_float+0x27a>
 8015e60:	4a37      	ldr	r2, [pc, #220]	; (8015f40 <_printf_float+0x2f0>)
 8015e62:	2301      	movs	r3, #1
 8015e64:	4631      	mov	r1, r6
 8015e66:	4628      	mov	r0, r5
 8015e68:	47b8      	blx	r7
 8015e6a:	3001      	adds	r0, #1
 8015e6c:	f43f af51 	beq.w	8015d12 <_printf_float+0xc2>
 8015e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e74:	429a      	cmp	r2, r3
 8015e76:	db02      	blt.n	8015e7e <_printf_float+0x22e>
 8015e78:	6823      	ldr	r3, [r4, #0]
 8015e7a:	07d8      	lsls	r0, r3, #31
 8015e7c:	d510      	bpl.n	8015ea0 <_printf_float+0x250>
 8015e7e:	ee18 3a10 	vmov	r3, s16
 8015e82:	4652      	mov	r2, sl
 8015e84:	4631      	mov	r1, r6
 8015e86:	4628      	mov	r0, r5
 8015e88:	47b8      	blx	r7
 8015e8a:	3001      	adds	r0, #1
 8015e8c:	f43f af41 	beq.w	8015d12 <_printf_float+0xc2>
 8015e90:	f04f 0800 	mov.w	r8, #0
 8015e94:	f104 091a 	add.w	r9, r4, #26
 8015e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e9a:	3b01      	subs	r3, #1
 8015e9c:	4543      	cmp	r3, r8
 8015e9e:	dc09      	bgt.n	8015eb4 <_printf_float+0x264>
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	079b      	lsls	r3, r3, #30
 8015ea4:	f100 8105 	bmi.w	80160b2 <_printf_float+0x462>
 8015ea8:	68e0      	ldr	r0, [r4, #12]
 8015eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015eac:	4298      	cmp	r0, r3
 8015eae:	bfb8      	it	lt
 8015eb0:	4618      	movlt	r0, r3
 8015eb2:	e730      	b.n	8015d16 <_printf_float+0xc6>
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	464a      	mov	r2, r9
 8015eb8:	4631      	mov	r1, r6
 8015eba:	4628      	mov	r0, r5
 8015ebc:	47b8      	blx	r7
 8015ebe:	3001      	adds	r0, #1
 8015ec0:	f43f af27 	beq.w	8015d12 <_printf_float+0xc2>
 8015ec4:	f108 0801 	add.w	r8, r8, #1
 8015ec8:	e7e6      	b.n	8015e98 <_printf_float+0x248>
 8015eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	dc39      	bgt.n	8015f44 <_printf_float+0x2f4>
 8015ed0:	4a1b      	ldr	r2, [pc, #108]	; (8015f40 <_printf_float+0x2f0>)
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	4631      	mov	r1, r6
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	47b8      	blx	r7
 8015eda:	3001      	adds	r0, #1
 8015edc:	f43f af19 	beq.w	8015d12 <_printf_float+0xc2>
 8015ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	d102      	bne.n	8015eee <_printf_float+0x29e>
 8015ee8:	6823      	ldr	r3, [r4, #0]
 8015eea:	07d9      	lsls	r1, r3, #31
 8015eec:	d5d8      	bpl.n	8015ea0 <_printf_float+0x250>
 8015eee:	ee18 3a10 	vmov	r3, s16
 8015ef2:	4652      	mov	r2, sl
 8015ef4:	4631      	mov	r1, r6
 8015ef6:	4628      	mov	r0, r5
 8015ef8:	47b8      	blx	r7
 8015efa:	3001      	adds	r0, #1
 8015efc:	f43f af09 	beq.w	8015d12 <_printf_float+0xc2>
 8015f00:	f04f 0900 	mov.w	r9, #0
 8015f04:	f104 0a1a 	add.w	sl, r4, #26
 8015f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f0a:	425b      	negs	r3, r3
 8015f0c:	454b      	cmp	r3, r9
 8015f0e:	dc01      	bgt.n	8015f14 <_printf_float+0x2c4>
 8015f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f12:	e792      	b.n	8015e3a <_printf_float+0x1ea>
 8015f14:	2301      	movs	r3, #1
 8015f16:	4652      	mov	r2, sl
 8015f18:	4631      	mov	r1, r6
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	47b8      	blx	r7
 8015f1e:	3001      	adds	r0, #1
 8015f20:	f43f aef7 	beq.w	8015d12 <_printf_float+0xc2>
 8015f24:	f109 0901 	add.w	r9, r9, #1
 8015f28:	e7ee      	b.n	8015f08 <_printf_float+0x2b8>
 8015f2a:	bf00      	nop
 8015f2c:	7fefffff 	.word	0x7fefffff
 8015f30:	080196bc 	.word	0x080196bc
 8015f34:	080196c0 	.word	0x080196c0
 8015f38:	080196c8 	.word	0x080196c8
 8015f3c:	080196c4 	.word	0x080196c4
 8015f40:	080196cc 	.word	0x080196cc
 8015f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	bfa8      	it	ge
 8015f4c:	461a      	movge	r2, r3
 8015f4e:	2a00      	cmp	r2, #0
 8015f50:	4691      	mov	r9, r2
 8015f52:	dc37      	bgt.n	8015fc4 <_printf_float+0x374>
 8015f54:	f04f 0b00 	mov.w	fp, #0
 8015f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015f5c:	f104 021a 	add.w	r2, r4, #26
 8015f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015f62:	9305      	str	r3, [sp, #20]
 8015f64:	eba3 0309 	sub.w	r3, r3, r9
 8015f68:	455b      	cmp	r3, fp
 8015f6a:	dc33      	bgt.n	8015fd4 <_printf_float+0x384>
 8015f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f70:	429a      	cmp	r2, r3
 8015f72:	db3b      	blt.n	8015fec <_printf_float+0x39c>
 8015f74:	6823      	ldr	r3, [r4, #0]
 8015f76:	07da      	lsls	r2, r3, #31
 8015f78:	d438      	bmi.n	8015fec <_printf_float+0x39c>
 8015f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f7c:	9a05      	ldr	r2, [sp, #20]
 8015f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f80:	1a9a      	subs	r2, r3, r2
 8015f82:	eba3 0901 	sub.w	r9, r3, r1
 8015f86:	4591      	cmp	r9, r2
 8015f88:	bfa8      	it	ge
 8015f8a:	4691      	movge	r9, r2
 8015f8c:	f1b9 0f00 	cmp.w	r9, #0
 8015f90:	dc35      	bgt.n	8015ffe <_printf_float+0x3ae>
 8015f92:	f04f 0800 	mov.w	r8, #0
 8015f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015f9a:	f104 0a1a 	add.w	sl, r4, #26
 8015f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015fa2:	1a9b      	subs	r3, r3, r2
 8015fa4:	eba3 0309 	sub.w	r3, r3, r9
 8015fa8:	4543      	cmp	r3, r8
 8015faa:	f77f af79 	ble.w	8015ea0 <_printf_float+0x250>
 8015fae:	2301      	movs	r3, #1
 8015fb0:	4652      	mov	r2, sl
 8015fb2:	4631      	mov	r1, r6
 8015fb4:	4628      	mov	r0, r5
 8015fb6:	47b8      	blx	r7
 8015fb8:	3001      	adds	r0, #1
 8015fba:	f43f aeaa 	beq.w	8015d12 <_printf_float+0xc2>
 8015fbe:	f108 0801 	add.w	r8, r8, #1
 8015fc2:	e7ec      	b.n	8015f9e <_printf_float+0x34e>
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	4642      	mov	r2, r8
 8015fca:	4628      	mov	r0, r5
 8015fcc:	47b8      	blx	r7
 8015fce:	3001      	adds	r0, #1
 8015fd0:	d1c0      	bne.n	8015f54 <_printf_float+0x304>
 8015fd2:	e69e      	b.n	8015d12 <_printf_float+0xc2>
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	4631      	mov	r1, r6
 8015fd8:	4628      	mov	r0, r5
 8015fda:	9205      	str	r2, [sp, #20]
 8015fdc:	47b8      	blx	r7
 8015fde:	3001      	adds	r0, #1
 8015fe0:	f43f ae97 	beq.w	8015d12 <_printf_float+0xc2>
 8015fe4:	9a05      	ldr	r2, [sp, #20]
 8015fe6:	f10b 0b01 	add.w	fp, fp, #1
 8015fea:	e7b9      	b.n	8015f60 <_printf_float+0x310>
 8015fec:	ee18 3a10 	vmov	r3, s16
 8015ff0:	4652      	mov	r2, sl
 8015ff2:	4631      	mov	r1, r6
 8015ff4:	4628      	mov	r0, r5
 8015ff6:	47b8      	blx	r7
 8015ff8:	3001      	adds	r0, #1
 8015ffa:	d1be      	bne.n	8015f7a <_printf_float+0x32a>
 8015ffc:	e689      	b.n	8015d12 <_printf_float+0xc2>
 8015ffe:	9a05      	ldr	r2, [sp, #20]
 8016000:	464b      	mov	r3, r9
 8016002:	4442      	add	r2, r8
 8016004:	4631      	mov	r1, r6
 8016006:	4628      	mov	r0, r5
 8016008:	47b8      	blx	r7
 801600a:	3001      	adds	r0, #1
 801600c:	d1c1      	bne.n	8015f92 <_printf_float+0x342>
 801600e:	e680      	b.n	8015d12 <_printf_float+0xc2>
 8016010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016012:	2a01      	cmp	r2, #1
 8016014:	dc01      	bgt.n	801601a <_printf_float+0x3ca>
 8016016:	07db      	lsls	r3, r3, #31
 8016018:	d538      	bpl.n	801608c <_printf_float+0x43c>
 801601a:	2301      	movs	r3, #1
 801601c:	4642      	mov	r2, r8
 801601e:	4631      	mov	r1, r6
 8016020:	4628      	mov	r0, r5
 8016022:	47b8      	blx	r7
 8016024:	3001      	adds	r0, #1
 8016026:	f43f ae74 	beq.w	8015d12 <_printf_float+0xc2>
 801602a:	ee18 3a10 	vmov	r3, s16
 801602e:	4652      	mov	r2, sl
 8016030:	4631      	mov	r1, r6
 8016032:	4628      	mov	r0, r5
 8016034:	47b8      	blx	r7
 8016036:	3001      	adds	r0, #1
 8016038:	f43f ae6b 	beq.w	8015d12 <_printf_float+0xc2>
 801603c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016040:	2200      	movs	r2, #0
 8016042:	2300      	movs	r3, #0
 8016044:	f7ea fd68 	bl	8000b18 <__aeabi_dcmpeq>
 8016048:	b9d8      	cbnz	r0, 8016082 <_printf_float+0x432>
 801604a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801604c:	f108 0201 	add.w	r2, r8, #1
 8016050:	3b01      	subs	r3, #1
 8016052:	4631      	mov	r1, r6
 8016054:	4628      	mov	r0, r5
 8016056:	47b8      	blx	r7
 8016058:	3001      	adds	r0, #1
 801605a:	d10e      	bne.n	801607a <_printf_float+0x42a>
 801605c:	e659      	b.n	8015d12 <_printf_float+0xc2>
 801605e:	2301      	movs	r3, #1
 8016060:	4652      	mov	r2, sl
 8016062:	4631      	mov	r1, r6
 8016064:	4628      	mov	r0, r5
 8016066:	47b8      	blx	r7
 8016068:	3001      	adds	r0, #1
 801606a:	f43f ae52 	beq.w	8015d12 <_printf_float+0xc2>
 801606e:	f108 0801 	add.w	r8, r8, #1
 8016072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016074:	3b01      	subs	r3, #1
 8016076:	4543      	cmp	r3, r8
 8016078:	dcf1      	bgt.n	801605e <_printf_float+0x40e>
 801607a:	464b      	mov	r3, r9
 801607c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016080:	e6dc      	b.n	8015e3c <_printf_float+0x1ec>
 8016082:	f04f 0800 	mov.w	r8, #0
 8016086:	f104 0a1a 	add.w	sl, r4, #26
 801608a:	e7f2      	b.n	8016072 <_printf_float+0x422>
 801608c:	2301      	movs	r3, #1
 801608e:	4642      	mov	r2, r8
 8016090:	e7df      	b.n	8016052 <_printf_float+0x402>
 8016092:	2301      	movs	r3, #1
 8016094:	464a      	mov	r2, r9
 8016096:	4631      	mov	r1, r6
 8016098:	4628      	mov	r0, r5
 801609a:	47b8      	blx	r7
 801609c:	3001      	adds	r0, #1
 801609e:	f43f ae38 	beq.w	8015d12 <_printf_float+0xc2>
 80160a2:	f108 0801 	add.w	r8, r8, #1
 80160a6:	68e3      	ldr	r3, [r4, #12]
 80160a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160aa:	1a5b      	subs	r3, r3, r1
 80160ac:	4543      	cmp	r3, r8
 80160ae:	dcf0      	bgt.n	8016092 <_printf_float+0x442>
 80160b0:	e6fa      	b.n	8015ea8 <_printf_float+0x258>
 80160b2:	f04f 0800 	mov.w	r8, #0
 80160b6:	f104 0919 	add.w	r9, r4, #25
 80160ba:	e7f4      	b.n	80160a6 <_printf_float+0x456>

080160bc <_printf_common>:
 80160bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160c0:	4616      	mov	r6, r2
 80160c2:	4699      	mov	r9, r3
 80160c4:	688a      	ldr	r2, [r1, #8]
 80160c6:	690b      	ldr	r3, [r1, #16]
 80160c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80160cc:	4293      	cmp	r3, r2
 80160ce:	bfb8      	it	lt
 80160d0:	4613      	movlt	r3, r2
 80160d2:	6033      	str	r3, [r6, #0]
 80160d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80160d8:	4607      	mov	r7, r0
 80160da:	460c      	mov	r4, r1
 80160dc:	b10a      	cbz	r2, 80160e2 <_printf_common+0x26>
 80160de:	3301      	adds	r3, #1
 80160e0:	6033      	str	r3, [r6, #0]
 80160e2:	6823      	ldr	r3, [r4, #0]
 80160e4:	0699      	lsls	r1, r3, #26
 80160e6:	bf42      	ittt	mi
 80160e8:	6833      	ldrmi	r3, [r6, #0]
 80160ea:	3302      	addmi	r3, #2
 80160ec:	6033      	strmi	r3, [r6, #0]
 80160ee:	6825      	ldr	r5, [r4, #0]
 80160f0:	f015 0506 	ands.w	r5, r5, #6
 80160f4:	d106      	bne.n	8016104 <_printf_common+0x48>
 80160f6:	f104 0a19 	add.w	sl, r4, #25
 80160fa:	68e3      	ldr	r3, [r4, #12]
 80160fc:	6832      	ldr	r2, [r6, #0]
 80160fe:	1a9b      	subs	r3, r3, r2
 8016100:	42ab      	cmp	r3, r5
 8016102:	dc26      	bgt.n	8016152 <_printf_common+0x96>
 8016104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016108:	1e13      	subs	r3, r2, #0
 801610a:	6822      	ldr	r2, [r4, #0]
 801610c:	bf18      	it	ne
 801610e:	2301      	movne	r3, #1
 8016110:	0692      	lsls	r2, r2, #26
 8016112:	d42b      	bmi.n	801616c <_printf_common+0xb0>
 8016114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016118:	4649      	mov	r1, r9
 801611a:	4638      	mov	r0, r7
 801611c:	47c0      	blx	r8
 801611e:	3001      	adds	r0, #1
 8016120:	d01e      	beq.n	8016160 <_printf_common+0xa4>
 8016122:	6823      	ldr	r3, [r4, #0]
 8016124:	68e5      	ldr	r5, [r4, #12]
 8016126:	6832      	ldr	r2, [r6, #0]
 8016128:	f003 0306 	and.w	r3, r3, #6
 801612c:	2b04      	cmp	r3, #4
 801612e:	bf08      	it	eq
 8016130:	1aad      	subeq	r5, r5, r2
 8016132:	68a3      	ldr	r3, [r4, #8]
 8016134:	6922      	ldr	r2, [r4, #16]
 8016136:	bf0c      	ite	eq
 8016138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801613c:	2500      	movne	r5, #0
 801613e:	4293      	cmp	r3, r2
 8016140:	bfc4      	itt	gt
 8016142:	1a9b      	subgt	r3, r3, r2
 8016144:	18ed      	addgt	r5, r5, r3
 8016146:	2600      	movs	r6, #0
 8016148:	341a      	adds	r4, #26
 801614a:	42b5      	cmp	r5, r6
 801614c:	d11a      	bne.n	8016184 <_printf_common+0xc8>
 801614e:	2000      	movs	r0, #0
 8016150:	e008      	b.n	8016164 <_printf_common+0xa8>
 8016152:	2301      	movs	r3, #1
 8016154:	4652      	mov	r2, sl
 8016156:	4649      	mov	r1, r9
 8016158:	4638      	mov	r0, r7
 801615a:	47c0      	blx	r8
 801615c:	3001      	adds	r0, #1
 801615e:	d103      	bne.n	8016168 <_printf_common+0xac>
 8016160:	f04f 30ff 	mov.w	r0, #4294967295
 8016164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016168:	3501      	adds	r5, #1
 801616a:	e7c6      	b.n	80160fa <_printf_common+0x3e>
 801616c:	18e1      	adds	r1, r4, r3
 801616e:	1c5a      	adds	r2, r3, #1
 8016170:	2030      	movs	r0, #48	; 0x30
 8016172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016176:	4422      	add	r2, r4
 8016178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801617c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016180:	3302      	adds	r3, #2
 8016182:	e7c7      	b.n	8016114 <_printf_common+0x58>
 8016184:	2301      	movs	r3, #1
 8016186:	4622      	mov	r2, r4
 8016188:	4649      	mov	r1, r9
 801618a:	4638      	mov	r0, r7
 801618c:	47c0      	blx	r8
 801618e:	3001      	adds	r0, #1
 8016190:	d0e6      	beq.n	8016160 <_printf_common+0xa4>
 8016192:	3601      	adds	r6, #1
 8016194:	e7d9      	b.n	801614a <_printf_common+0x8e>
	...

08016198 <_printf_i>:
 8016198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801619c:	7e0f      	ldrb	r7, [r1, #24]
 801619e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161a0:	2f78      	cmp	r7, #120	; 0x78
 80161a2:	4691      	mov	r9, r2
 80161a4:	4680      	mov	r8, r0
 80161a6:	460c      	mov	r4, r1
 80161a8:	469a      	mov	sl, r3
 80161aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80161ae:	d807      	bhi.n	80161c0 <_printf_i+0x28>
 80161b0:	2f62      	cmp	r7, #98	; 0x62
 80161b2:	d80a      	bhi.n	80161ca <_printf_i+0x32>
 80161b4:	2f00      	cmp	r7, #0
 80161b6:	f000 80d8 	beq.w	801636a <_printf_i+0x1d2>
 80161ba:	2f58      	cmp	r7, #88	; 0x58
 80161bc:	f000 80a3 	beq.w	8016306 <_printf_i+0x16e>
 80161c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80161c8:	e03a      	b.n	8016240 <_printf_i+0xa8>
 80161ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80161ce:	2b15      	cmp	r3, #21
 80161d0:	d8f6      	bhi.n	80161c0 <_printf_i+0x28>
 80161d2:	a101      	add	r1, pc, #4	; (adr r1, 80161d8 <_printf_i+0x40>)
 80161d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80161d8:	08016231 	.word	0x08016231
 80161dc:	08016245 	.word	0x08016245
 80161e0:	080161c1 	.word	0x080161c1
 80161e4:	080161c1 	.word	0x080161c1
 80161e8:	080161c1 	.word	0x080161c1
 80161ec:	080161c1 	.word	0x080161c1
 80161f0:	08016245 	.word	0x08016245
 80161f4:	080161c1 	.word	0x080161c1
 80161f8:	080161c1 	.word	0x080161c1
 80161fc:	080161c1 	.word	0x080161c1
 8016200:	080161c1 	.word	0x080161c1
 8016204:	08016351 	.word	0x08016351
 8016208:	08016275 	.word	0x08016275
 801620c:	08016333 	.word	0x08016333
 8016210:	080161c1 	.word	0x080161c1
 8016214:	080161c1 	.word	0x080161c1
 8016218:	08016373 	.word	0x08016373
 801621c:	080161c1 	.word	0x080161c1
 8016220:	08016275 	.word	0x08016275
 8016224:	080161c1 	.word	0x080161c1
 8016228:	080161c1 	.word	0x080161c1
 801622c:	0801633b 	.word	0x0801633b
 8016230:	682b      	ldr	r3, [r5, #0]
 8016232:	1d1a      	adds	r2, r3, #4
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	602a      	str	r2, [r5, #0]
 8016238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801623c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016240:	2301      	movs	r3, #1
 8016242:	e0a3      	b.n	801638c <_printf_i+0x1f4>
 8016244:	6820      	ldr	r0, [r4, #0]
 8016246:	6829      	ldr	r1, [r5, #0]
 8016248:	0606      	lsls	r6, r0, #24
 801624a:	f101 0304 	add.w	r3, r1, #4
 801624e:	d50a      	bpl.n	8016266 <_printf_i+0xce>
 8016250:	680e      	ldr	r6, [r1, #0]
 8016252:	602b      	str	r3, [r5, #0]
 8016254:	2e00      	cmp	r6, #0
 8016256:	da03      	bge.n	8016260 <_printf_i+0xc8>
 8016258:	232d      	movs	r3, #45	; 0x2d
 801625a:	4276      	negs	r6, r6
 801625c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016260:	485e      	ldr	r0, [pc, #376]	; (80163dc <_printf_i+0x244>)
 8016262:	230a      	movs	r3, #10
 8016264:	e019      	b.n	801629a <_printf_i+0x102>
 8016266:	680e      	ldr	r6, [r1, #0]
 8016268:	602b      	str	r3, [r5, #0]
 801626a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801626e:	bf18      	it	ne
 8016270:	b236      	sxthne	r6, r6
 8016272:	e7ef      	b.n	8016254 <_printf_i+0xbc>
 8016274:	682b      	ldr	r3, [r5, #0]
 8016276:	6820      	ldr	r0, [r4, #0]
 8016278:	1d19      	adds	r1, r3, #4
 801627a:	6029      	str	r1, [r5, #0]
 801627c:	0601      	lsls	r1, r0, #24
 801627e:	d501      	bpl.n	8016284 <_printf_i+0xec>
 8016280:	681e      	ldr	r6, [r3, #0]
 8016282:	e002      	b.n	801628a <_printf_i+0xf2>
 8016284:	0646      	lsls	r6, r0, #25
 8016286:	d5fb      	bpl.n	8016280 <_printf_i+0xe8>
 8016288:	881e      	ldrh	r6, [r3, #0]
 801628a:	4854      	ldr	r0, [pc, #336]	; (80163dc <_printf_i+0x244>)
 801628c:	2f6f      	cmp	r7, #111	; 0x6f
 801628e:	bf0c      	ite	eq
 8016290:	2308      	moveq	r3, #8
 8016292:	230a      	movne	r3, #10
 8016294:	2100      	movs	r1, #0
 8016296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801629a:	6865      	ldr	r5, [r4, #4]
 801629c:	60a5      	str	r5, [r4, #8]
 801629e:	2d00      	cmp	r5, #0
 80162a0:	bfa2      	ittt	ge
 80162a2:	6821      	ldrge	r1, [r4, #0]
 80162a4:	f021 0104 	bicge.w	r1, r1, #4
 80162a8:	6021      	strge	r1, [r4, #0]
 80162aa:	b90e      	cbnz	r6, 80162b0 <_printf_i+0x118>
 80162ac:	2d00      	cmp	r5, #0
 80162ae:	d04d      	beq.n	801634c <_printf_i+0x1b4>
 80162b0:	4615      	mov	r5, r2
 80162b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80162b6:	fb03 6711 	mls	r7, r3, r1, r6
 80162ba:	5dc7      	ldrb	r7, [r0, r7]
 80162bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80162c0:	4637      	mov	r7, r6
 80162c2:	42bb      	cmp	r3, r7
 80162c4:	460e      	mov	r6, r1
 80162c6:	d9f4      	bls.n	80162b2 <_printf_i+0x11a>
 80162c8:	2b08      	cmp	r3, #8
 80162ca:	d10b      	bne.n	80162e4 <_printf_i+0x14c>
 80162cc:	6823      	ldr	r3, [r4, #0]
 80162ce:	07de      	lsls	r6, r3, #31
 80162d0:	d508      	bpl.n	80162e4 <_printf_i+0x14c>
 80162d2:	6923      	ldr	r3, [r4, #16]
 80162d4:	6861      	ldr	r1, [r4, #4]
 80162d6:	4299      	cmp	r1, r3
 80162d8:	bfde      	ittt	le
 80162da:	2330      	movle	r3, #48	; 0x30
 80162dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80162e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80162e4:	1b52      	subs	r2, r2, r5
 80162e6:	6122      	str	r2, [r4, #16]
 80162e8:	f8cd a000 	str.w	sl, [sp]
 80162ec:	464b      	mov	r3, r9
 80162ee:	aa03      	add	r2, sp, #12
 80162f0:	4621      	mov	r1, r4
 80162f2:	4640      	mov	r0, r8
 80162f4:	f7ff fee2 	bl	80160bc <_printf_common>
 80162f8:	3001      	adds	r0, #1
 80162fa:	d14c      	bne.n	8016396 <_printf_i+0x1fe>
 80162fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016300:	b004      	add	sp, #16
 8016302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016306:	4835      	ldr	r0, [pc, #212]	; (80163dc <_printf_i+0x244>)
 8016308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801630c:	6829      	ldr	r1, [r5, #0]
 801630e:	6823      	ldr	r3, [r4, #0]
 8016310:	f851 6b04 	ldr.w	r6, [r1], #4
 8016314:	6029      	str	r1, [r5, #0]
 8016316:	061d      	lsls	r5, r3, #24
 8016318:	d514      	bpl.n	8016344 <_printf_i+0x1ac>
 801631a:	07df      	lsls	r7, r3, #31
 801631c:	bf44      	itt	mi
 801631e:	f043 0320 	orrmi.w	r3, r3, #32
 8016322:	6023      	strmi	r3, [r4, #0]
 8016324:	b91e      	cbnz	r6, 801632e <_printf_i+0x196>
 8016326:	6823      	ldr	r3, [r4, #0]
 8016328:	f023 0320 	bic.w	r3, r3, #32
 801632c:	6023      	str	r3, [r4, #0]
 801632e:	2310      	movs	r3, #16
 8016330:	e7b0      	b.n	8016294 <_printf_i+0xfc>
 8016332:	6823      	ldr	r3, [r4, #0]
 8016334:	f043 0320 	orr.w	r3, r3, #32
 8016338:	6023      	str	r3, [r4, #0]
 801633a:	2378      	movs	r3, #120	; 0x78
 801633c:	4828      	ldr	r0, [pc, #160]	; (80163e0 <_printf_i+0x248>)
 801633e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016342:	e7e3      	b.n	801630c <_printf_i+0x174>
 8016344:	0659      	lsls	r1, r3, #25
 8016346:	bf48      	it	mi
 8016348:	b2b6      	uxthmi	r6, r6
 801634a:	e7e6      	b.n	801631a <_printf_i+0x182>
 801634c:	4615      	mov	r5, r2
 801634e:	e7bb      	b.n	80162c8 <_printf_i+0x130>
 8016350:	682b      	ldr	r3, [r5, #0]
 8016352:	6826      	ldr	r6, [r4, #0]
 8016354:	6961      	ldr	r1, [r4, #20]
 8016356:	1d18      	adds	r0, r3, #4
 8016358:	6028      	str	r0, [r5, #0]
 801635a:	0635      	lsls	r5, r6, #24
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	d501      	bpl.n	8016364 <_printf_i+0x1cc>
 8016360:	6019      	str	r1, [r3, #0]
 8016362:	e002      	b.n	801636a <_printf_i+0x1d2>
 8016364:	0670      	lsls	r0, r6, #25
 8016366:	d5fb      	bpl.n	8016360 <_printf_i+0x1c8>
 8016368:	8019      	strh	r1, [r3, #0]
 801636a:	2300      	movs	r3, #0
 801636c:	6123      	str	r3, [r4, #16]
 801636e:	4615      	mov	r5, r2
 8016370:	e7ba      	b.n	80162e8 <_printf_i+0x150>
 8016372:	682b      	ldr	r3, [r5, #0]
 8016374:	1d1a      	adds	r2, r3, #4
 8016376:	602a      	str	r2, [r5, #0]
 8016378:	681d      	ldr	r5, [r3, #0]
 801637a:	6862      	ldr	r2, [r4, #4]
 801637c:	2100      	movs	r1, #0
 801637e:	4628      	mov	r0, r5
 8016380:	f7e9 ff4e 	bl	8000220 <memchr>
 8016384:	b108      	cbz	r0, 801638a <_printf_i+0x1f2>
 8016386:	1b40      	subs	r0, r0, r5
 8016388:	6060      	str	r0, [r4, #4]
 801638a:	6863      	ldr	r3, [r4, #4]
 801638c:	6123      	str	r3, [r4, #16]
 801638e:	2300      	movs	r3, #0
 8016390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016394:	e7a8      	b.n	80162e8 <_printf_i+0x150>
 8016396:	6923      	ldr	r3, [r4, #16]
 8016398:	462a      	mov	r2, r5
 801639a:	4649      	mov	r1, r9
 801639c:	4640      	mov	r0, r8
 801639e:	47d0      	blx	sl
 80163a0:	3001      	adds	r0, #1
 80163a2:	d0ab      	beq.n	80162fc <_printf_i+0x164>
 80163a4:	6823      	ldr	r3, [r4, #0]
 80163a6:	079b      	lsls	r3, r3, #30
 80163a8:	d413      	bmi.n	80163d2 <_printf_i+0x23a>
 80163aa:	68e0      	ldr	r0, [r4, #12]
 80163ac:	9b03      	ldr	r3, [sp, #12]
 80163ae:	4298      	cmp	r0, r3
 80163b0:	bfb8      	it	lt
 80163b2:	4618      	movlt	r0, r3
 80163b4:	e7a4      	b.n	8016300 <_printf_i+0x168>
 80163b6:	2301      	movs	r3, #1
 80163b8:	4632      	mov	r2, r6
 80163ba:	4649      	mov	r1, r9
 80163bc:	4640      	mov	r0, r8
 80163be:	47d0      	blx	sl
 80163c0:	3001      	adds	r0, #1
 80163c2:	d09b      	beq.n	80162fc <_printf_i+0x164>
 80163c4:	3501      	adds	r5, #1
 80163c6:	68e3      	ldr	r3, [r4, #12]
 80163c8:	9903      	ldr	r1, [sp, #12]
 80163ca:	1a5b      	subs	r3, r3, r1
 80163cc:	42ab      	cmp	r3, r5
 80163ce:	dcf2      	bgt.n	80163b6 <_printf_i+0x21e>
 80163d0:	e7eb      	b.n	80163aa <_printf_i+0x212>
 80163d2:	2500      	movs	r5, #0
 80163d4:	f104 0619 	add.w	r6, r4, #25
 80163d8:	e7f5      	b.n	80163c6 <_printf_i+0x22e>
 80163da:	bf00      	nop
 80163dc:	080196ce 	.word	0x080196ce
 80163e0:	080196df 	.word	0x080196df

080163e4 <iprintf>:
 80163e4:	b40f      	push	{r0, r1, r2, r3}
 80163e6:	4b0a      	ldr	r3, [pc, #40]	; (8016410 <iprintf+0x2c>)
 80163e8:	b513      	push	{r0, r1, r4, lr}
 80163ea:	681c      	ldr	r4, [r3, #0]
 80163ec:	b124      	cbz	r4, 80163f8 <iprintf+0x14>
 80163ee:	69a3      	ldr	r3, [r4, #24]
 80163f0:	b913      	cbnz	r3, 80163f8 <iprintf+0x14>
 80163f2:	4620      	mov	r0, r4
 80163f4:	f001 f92c 	bl	8017650 <__sinit>
 80163f8:	ab05      	add	r3, sp, #20
 80163fa:	9a04      	ldr	r2, [sp, #16]
 80163fc:	68a1      	ldr	r1, [r4, #8]
 80163fe:	9301      	str	r3, [sp, #4]
 8016400:	4620      	mov	r0, r4
 8016402:	f001 fdff 	bl	8018004 <_vfiprintf_r>
 8016406:	b002      	add	sp, #8
 8016408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801640c:	b004      	add	sp, #16
 801640e:	4770      	bx	lr
 8016410:	20000184 	.word	0x20000184

08016414 <_puts_r>:
 8016414:	b570      	push	{r4, r5, r6, lr}
 8016416:	460e      	mov	r6, r1
 8016418:	4605      	mov	r5, r0
 801641a:	b118      	cbz	r0, 8016424 <_puts_r+0x10>
 801641c:	6983      	ldr	r3, [r0, #24]
 801641e:	b90b      	cbnz	r3, 8016424 <_puts_r+0x10>
 8016420:	f001 f916 	bl	8017650 <__sinit>
 8016424:	69ab      	ldr	r3, [r5, #24]
 8016426:	68ac      	ldr	r4, [r5, #8]
 8016428:	b913      	cbnz	r3, 8016430 <_puts_r+0x1c>
 801642a:	4628      	mov	r0, r5
 801642c:	f001 f910 	bl	8017650 <__sinit>
 8016430:	4b2c      	ldr	r3, [pc, #176]	; (80164e4 <_puts_r+0xd0>)
 8016432:	429c      	cmp	r4, r3
 8016434:	d120      	bne.n	8016478 <_puts_r+0x64>
 8016436:	686c      	ldr	r4, [r5, #4]
 8016438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801643a:	07db      	lsls	r3, r3, #31
 801643c:	d405      	bmi.n	801644a <_puts_r+0x36>
 801643e:	89a3      	ldrh	r3, [r4, #12]
 8016440:	0598      	lsls	r0, r3, #22
 8016442:	d402      	bmi.n	801644a <_puts_r+0x36>
 8016444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016446:	f001 f9a6 	bl	8017796 <__retarget_lock_acquire_recursive>
 801644a:	89a3      	ldrh	r3, [r4, #12]
 801644c:	0719      	lsls	r1, r3, #28
 801644e:	d51d      	bpl.n	801648c <_puts_r+0x78>
 8016450:	6923      	ldr	r3, [r4, #16]
 8016452:	b1db      	cbz	r3, 801648c <_puts_r+0x78>
 8016454:	3e01      	subs	r6, #1
 8016456:	68a3      	ldr	r3, [r4, #8]
 8016458:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801645c:	3b01      	subs	r3, #1
 801645e:	60a3      	str	r3, [r4, #8]
 8016460:	bb39      	cbnz	r1, 80164b2 <_puts_r+0x9e>
 8016462:	2b00      	cmp	r3, #0
 8016464:	da38      	bge.n	80164d8 <_puts_r+0xc4>
 8016466:	4622      	mov	r2, r4
 8016468:	210a      	movs	r1, #10
 801646a:	4628      	mov	r0, r5
 801646c:	f000 f89c 	bl	80165a8 <__swbuf_r>
 8016470:	3001      	adds	r0, #1
 8016472:	d011      	beq.n	8016498 <_puts_r+0x84>
 8016474:	250a      	movs	r5, #10
 8016476:	e011      	b.n	801649c <_puts_r+0x88>
 8016478:	4b1b      	ldr	r3, [pc, #108]	; (80164e8 <_puts_r+0xd4>)
 801647a:	429c      	cmp	r4, r3
 801647c:	d101      	bne.n	8016482 <_puts_r+0x6e>
 801647e:	68ac      	ldr	r4, [r5, #8]
 8016480:	e7da      	b.n	8016438 <_puts_r+0x24>
 8016482:	4b1a      	ldr	r3, [pc, #104]	; (80164ec <_puts_r+0xd8>)
 8016484:	429c      	cmp	r4, r3
 8016486:	bf08      	it	eq
 8016488:	68ec      	ldreq	r4, [r5, #12]
 801648a:	e7d5      	b.n	8016438 <_puts_r+0x24>
 801648c:	4621      	mov	r1, r4
 801648e:	4628      	mov	r0, r5
 8016490:	f000 f8dc 	bl	801664c <__swsetup_r>
 8016494:	2800      	cmp	r0, #0
 8016496:	d0dd      	beq.n	8016454 <_puts_r+0x40>
 8016498:	f04f 35ff 	mov.w	r5, #4294967295
 801649c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801649e:	07da      	lsls	r2, r3, #31
 80164a0:	d405      	bmi.n	80164ae <_puts_r+0x9a>
 80164a2:	89a3      	ldrh	r3, [r4, #12]
 80164a4:	059b      	lsls	r3, r3, #22
 80164a6:	d402      	bmi.n	80164ae <_puts_r+0x9a>
 80164a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80164aa:	f001 f975 	bl	8017798 <__retarget_lock_release_recursive>
 80164ae:	4628      	mov	r0, r5
 80164b0:	bd70      	pop	{r4, r5, r6, pc}
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	da04      	bge.n	80164c0 <_puts_r+0xac>
 80164b6:	69a2      	ldr	r2, [r4, #24]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	dc06      	bgt.n	80164ca <_puts_r+0xb6>
 80164bc:	290a      	cmp	r1, #10
 80164be:	d004      	beq.n	80164ca <_puts_r+0xb6>
 80164c0:	6823      	ldr	r3, [r4, #0]
 80164c2:	1c5a      	adds	r2, r3, #1
 80164c4:	6022      	str	r2, [r4, #0]
 80164c6:	7019      	strb	r1, [r3, #0]
 80164c8:	e7c5      	b.n	8016456 <_puts_r+0x42>
 80164ca:	4622      	mov	r2, r4
 80164cc:	4628      	mov	r0, r5
 80164ce:	f000 f86b 	bl	80165a8 <__swbuf_r>
 80164d2:	3001      	adds	r0, #1
 80164d4:	d1bf      	bne.n	8016456 <_puts_r+0x42>
 80164d6:	e7df      	b.n	8016498 <_puts_r+0x84>
 80164d8:	6823      	ldr	r3, [r4, #0]
 80164da:	250a      	movs	r5, #10
 80164dc:	1c5a      	adds	r2, r3, #1
 80164de:	6022      	str	r2, [r4, #0]
 80164e0:	701d      	strb	r5, [r3, #0]
 80164e2:	e7db      	b.n	801649c <_puts_r+0x88>
 80164e4:	080197a0 	.word	0x080197a0
 80164e8:	080197c0 	.word	0x080197c0
 80164ec:	08019780 	.word	0x08019780

080164f0 <puts>:
 80164f0:	4b02      	ldr	r3, [pc, #8]	; (80164fc <puts+0xc>)
 80164f2:	4601      	mov	r1, r0
 80164f4:	6818      	ldr	r0, [r3, #0]
 80164f6:	f7ff bf8d 	b.w	8016414 <_puts_r>
 80164fa:	bf00      	nop
 80164fc:	20000184 	.word	0x20000184

08016500 <_sbrk_r>:
 8016500:	b538      	push	{r3, r4, r5, lr}
 8016502:	4d06      	ldr	r5, [pc, #24]	; (801651c <_sbrk_r+0x1c>)
 8016504:	2300      	movs	r3, #0
 8016506:	4604      	mov	r4, r0
 8016508:	4608      	mov	r0, r1
 801650a:	602b      	str	r3, [r5, #0]
 801650c:	f7f1 f80c 	bl	8007528 <_sbrk>
 8016510:	1c43      	adds	r3, r0, #1
 8016512:	d102      	bne.n	801651a <_sbrk_r+0x1a>
 8016514:	682b      	ldr	r3, [r5, #0]
 8016516:	b103      	cbz	r3, 801651a <_sbrk_r+0x1a>
 8016518:	6023      	str	r3, [r4, #0]
 801651a:	bd38      	pop	{r3, r4, r5, pc}
 801651c:	20002974 	.word	0x20002974

08016520 <_raise_r>:
 8016520:	291f      	cmp	r1, #31
 8016522:	b538      	push	{r3, r4, r5, lr}
 8016524:	4604      	mov	r4, r0
 8016526:	460d      	mov	r5, r1
 8016528:	d904      	bls.n	8016534 <_raise_r+0x14>
 801652a:	2316      	movs	r3, #22
 801652c:	6003      	str	r3, [r0, #0]
 801652e:	f04f 30ff 	mov.w	r0, #4294967295
 8016532:	bd38      	pop	{r3, r4, r5, pc}
 8016534:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016536:	b112      	cbz	r2, 801653e <_raise_r+0x1e>
 8016538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801653c:	b94b      	cbnz	r3, 8016552 <_raise_r+0x32>
 801653e:	4620      	mov	r0, r4
 8016540:	f000 f830 	bl	80165a4 <_getpid_r>
 8016544:	462a      	mov	r2, r5
 8016546:	4601      	mov	r1, r0
 8016548:	4620      	mov	r0, r4
 801654a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801654e:	f000 b817 	b.w	8016580 <_kill_r>
 8016552:	2b01      	cmp	r3, #1
 8016554:	d00a      	beq.n	801656c <_raise_r+0x4c>
 8016556:	1c59      	adds	r1, r3, #1
 8016558:	d103      	bne.n	8016562 <_raise_r+0x42>
 801655a:	2316      	movs	r3, #22
 801655c:	6003      	str	r3, [r0, #0]
 801655e:	2001      	movs	r0, #1
 8016560:	e7e7      	b.n	8016532 <_raise_r+0x12>
 8016562:	2400      	movs	r4, #0
 8016564:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016568:	4628      	mov	r0, r5
 801656a:	4798      	blx	r3
 801656c:	2000      	movs	r0, #0
 801656e:	e7e0      	b.n	8016532 <_raise_r+0x12>

08016570 <raise>:
 8016570:	4b02      	ldr	r3, [pc, #8]	; (801657c <raise+0xc>)
 8016572:	4601      	mov	r1, r0
 8016574:	6818      	ldr	r0, [r3, #0]
 8016576:	f7ff bfd3 	b.w	8016520 <_raise_r>
 801657a:	bf00      	nop
 801657c:	20000184 	.word	0x20000184

08016580 <_kill_r>:
 8016580:	b538      	push	{r3, r4, r5, lr}
 8016582:	4d07      	ldr	r5, [pc, #28]	; (80165a0 <_kill_r+0x20>)
 8016584:	2300      	movs	r3, #0
 8016586:	4604      	mov	r4, r0
 8016588:	4608      	mov	r0, r1
 801658a:	4611      	mov	r1, r2
 801658c:	602b      	str	r3, [r5, #0]
 801658e:	f7f0 ff33 	bl	80073f8 <_kill>
 8016592:	1c43      	adds	r3, r0, #1
 8016594:	d102      	bne.n	801659c <_kill_r+0x1c>
 8016596:	682b      	ldr	r3, [r5, #0]
 8016598:	b103      	cbz	r3, 801659c <_kill_r+0x1c>
 801659a:	6023      	str	r3, [r4, #0]
 801659c:	bd38      	pop	{r3, r4, r5, pc}
 801659e:	bf00      	nop
 80165a0:	20002974 	.word	0x20002974

080165a4 <_getpid_r>:
 80165a4:	f7f0 bf20 	b.w	80073e8 <_getpid>

080165a8 <__swbuf_r>:
 80165a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165aa:	460e      	mov	r6, r1
 80165ac:	4614      	mov	r4, r2
 80165ae:	4605      	mov	r5, r0
 80165b0:	b118      	cbz	r0, 80165ba <__swbuf_r+0x12>
 80165b2:	6983      	ldr	r3, [r0, #24]
 80165b4:	b90b      	cbnz	r3, 80165ba <__swbuf_r+0x12>
 80165b6:	f001 f84b 	bl	8017650 <__sinit>
 80165ba:	4b21      	ldr	r3, [pc, #132]	; (8016640 <__swbuf_r+0x98>)
 80165bc:	429c      	cmp	r4, r3
 80165be:	d12b      	bne.n	8016618 <__swbuf_r+0x70>
 80165c0:	686c      	ldr	r4, [r5, #4]
 80165c2:	69a3      	ldr	r3, [r4, #24]
 80165c4:	60a3      	str	r3, [r4, #8]
 80165c6:	89a3      	ldrh	r3, [r4, #12]
 80165c8:	071a      	lsls	r2, r3, #28
 80165ca:	d52f      	bpl.n	801662c <__swbuf_r+0x84>
 80165cc:	6923      	ldr	r3, [r4, #16]
 80165ce:	b36b      	cbz	r3, 801662c <__swbuf_r+0x84>
 80165d0:	6923      	ldr	r3, [r4, #16]
 80165d2:	6820      	ldr	r0, [r4, #0]
 80165d4:	1ac0      	subs	r0, r0, r3
 80165d6:	6963      	ldr	r3, [r4, #20]
 80165d8:	b2f6      	uxtb	r6, r6
 80165da:	4283      	cmp	r3, r0
 80165dc:	4637      	mov	r7, r6
 80165de:	dc04      	bgt.n	80165ea <__swbuf_r+0x42>
 80165e0:	4621      	mov	r1, r4
 80165e2:	4628      	mov	r0, r5
 80165e4:	f000 ffa0 	bl	8017528 <_fflush_r>
 80165e8:	bb30      	cbnz	r0, 8016638 <__swbuf_r+0x90>
 80165ea:	68a3      	ldr	r3, [r4, #8]
 80165ec:	3b01      	subs	r3, #1
 80165ee:	60a3      	str	r3, [r4, #8]
 80165f0:	6823      	ldr	r3, [r4, #0]
 80165f2:	1c5a      	adds	r2, r3, #1
 80165f4:	6022      	str	r2, [r4, #0]
 80165f6:	701e      	strb	r6, [r3, #0]
 80165f8:	6963      	ldr	r3, [r4, #20]
 80165fa:	3001      	adds	r0, #1
 80165fc:	4283      	cmp	r3, r0
 80165fe:	d004      	beq.n	801660a <__swbuf_r+0x62>
 8016600:	89a3      	ldrh	r3, [r4, #12]
 8016602:	07db      	lsls	r3, r3, #31
 8016604:	d506      	bpl.n	8016614 <__swbuf_r+0x6c>
 8016606:	2e0a      	cmp	r6, #10
 8016608:	d104      	bne.n	8016614 <__swbuf_r+0x6c>
 801660a:	4621      	mov	r1, r4
 801660c:	4628      	mov	r0, r5
 801660e:	f000 ff8b 	bl	8017528 <_fflush_r>
 8016612:	b988      	cbnz	r0, 8016638 <__swbuf_r+0x90>
 8016614:	4638      	mov	r0, r7
 8016616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016618:	4b0a      	ldr	r3, [pc, #40]	; (8016644 <__swbuf_r+0x9c>)
 801661a:	429c      	cmp	r4, r3
 801661c:	d101      	bne.n	8016622 <__swbuf_r+0x7a>
 801661e:	68ac      	ldr	r4, [r5, #8]
 8016620:	e7cf      	b.n	80165c2 <__swbuf_r+0x1a>
 8016622:	4b09      	ldr	r3, [pc, #36]	; (8016648 <__swbuf_r+0xa0>)
 8016624:	429c      	cmp	r4, r3
 8016626:	bf08      	it	eq
 8016628:	68ec      	ldreq	r4, [r5, #12]
 801662a:	e7ca      	b.n	80165c2 <__swbuf_r+0x1a>
 801662c:	4621      	mov	r1, r4
 801662e:	4628      	mov	r0, r5
 8016630:	f000 f80c 	bl	801664c <__swsetup_r>
 8016634:	2800      	cmp	r0, #0
 8016636:	d0cb      	beq.n	80165d0 <__swbuf_r+0x28>
 8016638:	f04f 37ff 	mov.w	r7, #4294967295
 801663c:	e7ea      	b.n	8016614 <__swbuf_r+0x6c>
 801663e:	bf00      	nop
 8016640:	080197a0 	.word	0x080197a0
 8016644:	080197c0 	.word	0x080197c0
 8016648:	08019780 	.word	0x08019780

0801664c <__swsetup_r>:
 801664c:	4b32      	ldr	r3, [pc, #200]	; (8016718 <__swsetup_r+0xcc>)
 801664e:	b570      	push	{r4, r5, r6, lr}
 8016650:	681d      	ldr	r5, [r3, #0]
 8016652:	4606      	mov	r6, r0
 8016654:	460c      	mov	r4, r1
 8016656:	b125      	cbz	r5, 8016662 <__swsetup_r+0x16>
 8016658:	69ab      	ldr	r3, [r5, #24]
 801665a:	b913      	cbnz	r3, 8016662 <__swsetup_r+0x16>
 801665c:	4628      	mov	r0, r5
 801665e:	f000 fff7 	bl	8017650 <__sinit>
 8016662:	4b2e      	ldr	r3, [pc, #184]	; (801671c <__swsetup_r+0xd0>)
 8016664:	429c      	cmp	r4, r3
 8016666:	d10f      	bne.n	8016688 <__swsetup_r+0x3c>
 8016668:	686c      	ldr	r4, [r5, #4]
 801666a:	89a3      	ldrh	r3, [r4, #12]
 801666c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016670:	0719      	lsls	r1, r3, #28
 8016672:	d42c      	bmi.n	80166ce <__swsetup_r+0x82>
 8016674:	06dd      	lsls	r5, r3, #27
 8016676:	d411      	bmi.n	801669c <__swsetup_r+0x50>
 8016678:	2309      	movs	r3, #9
 801667a:	6033      	str	r3, [r6, #0]
 801667c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016680:	81a3      	strh	r3, [r4, #12]
 8016682:	f04f 30ff 	mov.w	r0, #4294967295
 8016686:	e03e      	b.n	8016706 <__swsetup_r+0xba>
 8016688:	4b25      	ldr	r3, [pc, #148]	; (8016720 <__swsetup_r+0xd4>)
 801668a:	429c      	cmp	r4, r3
 801668c:	d101      	bne.n	8016692 <__swsetup_r+0x46>
 801668e:	68ac      	ldr	r4, [r5, #8]
 8016690:	e7eb      	b.n	801666a <__swsetup_r+0x1e>
 8016692:	4b24      	ldr	r3, [pc, #144]	; (8016724 <__swsetup_r+0xd8>)
 8016694:	429c      	cmp	r4, r3
 8016696:	bf08      	it	eq
 8016698:	68ec      	ldreq	r4, [r5, #12]
 801669a:	e7e6      	b.n	801666a <__swsetup_r+0x1e>
 801669c:	0758      	lsls	r0, r3, #29
 801669e:	d512      	bpl.n	80166c6 <__swsetup_r+0x7a>
 80166a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166a2:	b141      	cbz	r1, 80166b6 <__swsetup_r+0x6a>
 80166a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166a8:	4299      	cmp	r1, r3
 80166aa:	d002      	beq.n	80166b2 <__swsetup_r+0x66>
 80166ac:	4630      	mov	r0, r6
 80166ae:	f7ff f94f 	bl	8015950 <_free_r>
 80166b2:	2300      	movs	r3, #0
 80166b4:	6363      	str	r3, [r4, #52]	; 0x34
 80166b6:	89a3      	ldrh	r3, [r4, #12]
 80166b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80166bc:	81a3      	strh	r3, [r4, #12]
 80166be:	2300      	movs	r3, #0
 80166c0:	6063      	str	r3, [r4, #4]
 80166c2:	6923      	ldr	r3, [r4, #16]
 80166c4:	6023      	str	r3, [r4, #0]
 80166c6:	89a3      	ldrh	r3, [r4, #12]
 80166c8:	f043 0308 	orr.w	r3, r3, #8
 80166cc:	81a3      	strh	r3, [r4, #12]
 80166ce:	6923      	ldr	r3, [r4, #16]
 80166d0:	b94b      	cbnz	r3, 80166e6 <__swsetup_r+0x9a>
 80166d2:	89a3      	ldrh	r3, [r4, #12]
 80166d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80166d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166dc:	d003      	beq.n	80166e6 <__swsetup_r+0x9a>
 80166de:	4621      	mov	r1, r4
 80166e0:	4630      	mov	r0, r6
 80166e2:	f001 f87f 	bl	80177e4 <__smakebuf_r>
 80166e6:	89a0      	ldrh	r0, [r4, #12]
 80166e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166ec:	f010 0301 	ands.w	r3, r0, #1
 80166f0:	d00a      	beq.n	8016708 <__swsetup_r+0xbc>
 80166f2:	2300      	movs	r3, #0
 80166f4:	60a3      	str	r3, [r4, #8]
 80166f6:	6963      	ldr	r3, [r4, #20]
 80166f8:	425b      	negs	r3, r3
 80166fa:	61a3      	str	r3, [r4, #24]
 80166fc:	6923      	ldr	r3, [r4, #16]
 80166fe:	b943      	cbnz	r3, 8016712 <__swsetup_r+0xc6>
 8016700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016704:	d1ba      	bne.n	801667c <__swsetup_r+0x30>
 8016706:	bd70      	pop	{r4, r5, r6, pc}
 8016708:	0781      	lsls	r1, r0, #30
 801670a:	bf58      	it	pl
 801670c:	6963      	ldrpl	r3, [r4, #20]
 801670e:	60a3      	str	r3, [r4, #8]
 8016710:	e7f4      	b.n	80166fc <__swsetup_r+0xb0>
 8016712:	2000      	movs	r0, #0
 8016714:	e7f7      	b.n	8016706 <__swsetup_r+0xba>
 8016716:	bf00      	nop
 8016718:	20000184 	.word	0x20000184
 801671c:	080197a0 	.word	0x080197a0
 8016720:	080197c0 	.word	0x080197c0
 8016724:	08019780 	.word	0x08019780

08016728 <quorem>:
 8016728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801672c:	6903      	ldr	r3, [r0, #16]
 801672e:	690c      	ldr	r4, [r1, #16]
 8016730:	42a3      	cmp	r3, r4
 8016732:	4607      	mov	r7, r0
 8016734:	f2c0 8081 	blt.w	801683a <quorem+0x112>
 8016738:	3c01      	subs	r4, #1
 801673a:	f101 0814 	add.w	r8, r1, #20
 801673e:	f100 0514 	add.w	r5, r0, #20
 8016742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016746:	9301      	str	r3, [sp, #4]
 8016748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801674c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016750:	3301      	adds	r3, #1
 8016752:	429a      	cmp	r2, r3
 8016754:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801675c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016760:	d331      	bcc.n	80167c6 <quorem+0x9e>
 8016762:	f04f 0e00 	mov.w	lr, #0
 8016766:	4640      	mov	r0, r8
 8016768:	46ac      	mov	ip, r5
 801676a:	46f2      	mov	sl, lr
 801676c:	f850 2b04 	ldr.w	r2, [r0], #4
 8016770:	b293      	uxth	r3, r2
 8016772:	fb06 e303 	mla	r3, r6, r3, lr
 8016776:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801677a:	b29b      	uxth	r3, r3
 801677c:	ebaa 0303 	sub.w	r3, sl, r3
 8016780:	f8dc a000 	ldr.w	sl, [ip]
 8016784:	0c12      	lsrs	r2, r2, #16
 8016786:	fa13 f38a 	uxtah	r3, r3, sl
 801678a:	fb06 e202 	mla	r2, r6, r2, lr
 801678e:	9300      	str	r3, [sp, #0]
 8016790:	9b00      	ldr	r3, [sp, #0]
 8016792:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016796:	b292      	uxth	r2, r2
 8016798:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801679c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80167a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80167a4:	4581      	cmp	r9, r0
 80167a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167aa:	f84c 3b04 	str.w	r3, [ip], #4
 80167ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80167b2:	d2db      	bcs.n	801676c <quorem+0x44>
 80167b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80167b8:	b92b      	cbnz	r3, 80167c6 <quorem+0x9e>
 80167ba:	9b01      	ldr	r3, [sp, #4]
 80167bc:	3b04      	subs	r3, #4
 80167be:	429d      	cmp	r5, r3
 80167c0:	461a      	mov	r2, r3
 80167c2:	d32e      	bcc.n	8016822 <quorem+0xfa>
 80167c4:	613c      	str	r4, [r7, #16]
 80167c6:	4638      	mov	r0, r7
 80167c8:	f001 fada 	bl	8017d80 <__mcmp>
 80167cc:	2800      	cmp	r0, #0
 80167ce:	db24      	blt.n	801681a <quorem+0xf2>
 80167d0:	3601      	adds	r6, #1
 80167d2:	4628      	mov	r0, r5
 80167d4:	f04f 0c00 	mov.w	ip, #0
 80167d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80167dc:	f8d0 e000 	ldr.w	lr, [r0]
 80167e0:	b293      	uxth	r3, r2
 80167e2:	ebac 0303 	sub.w	r3, ip, r3
 80167e6:	0c12      	lsrs	r2, r2, #16
 80167e8:	fa13 f38e 	uxtah	r3, r3, lr
 80167ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80167f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80167f4:	b29b      	uxth	r3, r3
 80167f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167fa:	45c1      	cmp	r9, r8
 80167fc:	f840 3b04 	str.w	r3, [r0], #4
 8016800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016804:	d2e8      	bcs.n	80167d8 <quorem+0xb0>
 8016806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801680a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801680e:	b922      	cbnz	r2, 801681a <quorem+0xf2>
 8016810:	3b04      	subs	r3, #4
 8016812:	429d      	cmp	r5, r3
 8016814:	461a      	mov	r2, r3
 8016816:	d30a      	bcc.n	801682e <quorem+0x106>
 8016818:	613c      	str	r4, [r7, #16]
 801681a:	4630      	mov	r0, r6
 801681c:	b003      	add	sp, #12
 801681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016822:	6812      	ldr	r2, [r2, #0]
 8016824:	3b04      	subs	r3, #4
 8016826:	2a00      	cmp	r2, #0
 8016828:	d1cc      	bne.n	80167c4 <quorem+0x9c>
 801682a:	3c01      	subs	r4, #1
 801682c:	e7c7      	b.n	80167be <quorem+0x96>
 801682e:	6812      	ldr	r2, [r2, #0]
 8016830:	3b04      	subs	r3, #4
 8016832:	2a00      	cmp	r2, #0
 8016834:	d1f0      	bne.n	8016818 <quorem+0xf0>
 8016836:	3c01      	subs	r4, #1
 8016838:	e7eb      	b.n	8016812 <quorem+0xea>
 801683a:	2000      	movs	r0, #0
 801683c:	e7ee      	b.n	801681c <quorem+0xf4>
	...

08016840 <_dtoa_r>:
 8016840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016844:	ed2d 8b04 	vpush	{d8-d9}
 8016848:	ec57 6b10 	vmov	r6, r7, d0
 801684c:	b093      	sub	sp, #76	; 0x4c
 801684e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016854:	9106      	str	r1, [sp, #24]
 8016856:	ee10 aa10 	vmov	sl, s0
 801685a:	4604      	mov	r4, r0
 801685c:	9209      	str	r2, [sp, #36]	; 0x24
 801685e:	930c      	str	r3, [sp, #48]	; 0x30
 8016860:	46bb      	mov	fp, r7
 8016862:	b975      	cbnz	r5, 8016882 <_dtoa_r+0x42>
 8016864:	2010      	movs	r0, #16
 8016866:	f7ff f845 	bl	80158f4 <malloc>
 801686a:	4602      	mov	r2, r0
 801686c:	6260      	str	r0, [r4, #36]	; 0x24
 801686e:	b920      	cbnz	r0, 801687a <_dtoa_r+0x3a>
 8016870:	4ba7      	ldr	r3, [pc, #668]	; (8016b10 <_dtoa_r+0x2d0>)
 8016872:	21ea      	movs	r1, #234	; 0xea
 8016874:	48a7      	ldr	r0, [pc, #668]	; (8016b14 <_dtoa_r+0x2d4>)
 8016876:	f001 fd4b 	bl	8018310 <__assert_func>
 801687a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801687e:	6005      	str	r5, [r0, #0]
 8016880:	60c5      	str	r5, [r0, #12]
 8016882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016884:	6819      	ldr	r1, [r3, #0]
 8016886:	b151      	cbz	r1, 801689e <_dtoa_r+0x5e>
 8016888:	685a      	ldr	r2, [r3, #4]
 801688a:	604a      	str	r2, [r1, #4]
 801688c:	2301      	movs	r3, #1
 801688e:	4093      	lsls	r3, r2
 8016890:	608b      	str	r3, [r1, #8]
 8016892:	4620      	mov	r0, r4
 8016894:	f001 f832 	bl	80178fc <_Bfree>
 8016898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801689a:	2200      	movs	r2, #0
 801689c:	601a      	str	r2, [r3, #0]
 801689e:	1e3b      	subs	r3, r7, #0
 80168a0:	bfaa      	itet	ge
 80168a2:	2300      	movge	r3, #0
 80168a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80168a8:	f8c8 3000 	strge.w	r3, [r8]
 80168ac:	4b9a      	ldr	r3, [pc, #616]	; (8016b18 <_dtoa_r+0x2d8>)
 80168ae:	bfbc      	itt	lt
 80168b0:	2201      	movlt	r2, #1
 80168b2:	f8c8 2000 	strlt.w	r2, [r8]
 80168b6:	ea33 030b 	bics.w	r3, r3, fp
 80168ba:	d11b      	bne.n	80168f4 <_dtoa_r+0xb4>
 80168bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168be:	f242 730f 	movw	r3, #9999	; 0x270f
 80168c2:	6013      	str	r3, [r2, #0]
 80168c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168c8:	4333      	orrs	r3, r6
 80168ca:	f000 8592 	beq.w	80173f2 <_dtoa_r+0xbb2>
 80168ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80168d0:	b963      	cbnz	r3, 80168ec <_dtoa_r+0xac>
 80168d2:	4b92      	ldr	r3, [pc, #584]	; (8016b1c <_dtoa_r+0x2dc>)
 80168d4:	e022      	b.n	801691c <_dtoa_r+0xdc>
 80168d6:	4b92      	ldr	r3, [pc, #584]	; (8016b20 <_dtoa_r+0x2e0>)
 80168d8:	9301      	str	r3, [sp, #4]
 80168da:	3308      	adds	r3, #8
 80168dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80168de:	6013      	str	r3, [r2, #0]
 80168e0:	9801      	ldr	r0, [sp, #4]
 80168e2:	b013      	add	sp, #76	; 0x4c
 80168e4:	ecbd 8b04 	vpop	{d8-d9}
 80168e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ec:	4b8b      	ldr	r3, [pc, #556]	; (8016b1c <_dtoa_r+0x2dc>)
 80168ee:	9301      	str	r3, [sp, #4]
 80168f0:	3303      	adds	r3, #3
 80168f2:	e7f3      	b.n	80168dc <_dtoa_r+0x9c>
 80168f4:	2200      	movs	r2, #0
 80168f6:	2300      	movs	r3, #0
 80168f8:	4650      	mov	r0, sl
 80168fa:	4659      	mov	r1, fp
 80168fc:	f7ea f90c 	bl	8000b18 <__aeabi_dcmpeq>
 8016900:	ec4b ab19 	vmov	d9, sl, fp
 8016904:	4680      	mov	r8, r0
 8016906:	b158      	cbz	r0, 8016920 <_dtoa_r+0xe0>
 8016908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801690a:	2301      	movs	r3, #1
 801690c:	6013      	str	r3, [r2, #0]
 801690e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016910:	2b00      	cmp	r3, #0
 8016912:	f000 856b 	beq.w	80173ec <_dtoa_r+0xbac>
 8016916:	4883      	ldr	r0, [pc, #524]	; (8016b24 <_dtoa_r+0x2e4>)
 8016918:	6018      	str	r0, [r3, #0]
 801691a:	1e43      	subs	r3, r0, #1
 801691c:	9301      	str	r3, [sp, #4]
 801691e:	e7df      	b.n	80168e0 <_dtoa_r+0xa0>
 8016920:	ec4b ab10 	vmov	d0, sl, fp
 8016924:	aa10      	add	r2, sp, #64	; 0x40
 8016926:	a911      	add	r1, sp, #68	; 0x44
 8016928:	4620      	mov	r0, r4
 801692a:	f001 facf 	bl	8017ecc <__d2b>
 801692e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8016932:	ee08 0a10 	vmov	s16, r0
 8016936:	2d00      	cmp	r5, #0
 8016938:	f000 8084 	beq.w	8016a44 <_dtoa_r+0x204>
 801693c:	ee19 3a90 	vmov	r3, s19
 8016940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016944:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016948:	4656      	mov	r6, sl
 801694a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801694e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016952:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016956:	4b74      	ldr	r3, [pc, #464]	; (8016b28 <_dtoa_r+0x2e8>)
 8016958:	2200      	movs	r2, #0
 801695a:	4630      	mov	r0, r6
 801695c:	4639      	mov	r1, r7
 801695e:	f7e9 fcbb 	bl	80002d8 <__aeabi_dsub>
 8016962:	a365      	add	r3, pc, #404	; (adr r3, 8016af8 <_dtoa_r+0x2b8>)
 8016964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016968:	f7e9 fe6e 	bl	8000648 <__aeabi_dmul>
 801696c:	a364      	add	r3, pc, #400	; (adr r3, 8016b00 <_dtoa_r+0x2c0>)
 801696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016972:	f7e9 fcb3 	bl	80002dc <__adddf3>
 8016976:	4606      	mov	r6, r0
 8016978:	4628      	mov	r0, r5
 801697a:	460f      	mov	r7, r1
 801697c:	f7e9 fdfa 	bl	8000574 <__aeabi_i2d>
 8016980:	a361      	add	r3, pc, #388	; (adr r3, 8016b08 <_dtoa_r+0x2c8>)
 8016982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016986:	f7e9 fe5f 	bl	8000648 <__aeabi_dmul>
 801698a:	4602      	mov	r2, r0
 801698c:	460b      	mov	r3, r1
 801698e:	4630      	mov	r0, r6
 8016990:	4639      	mov	r1, r7
 8016992:	f7e9 fca3 	bl	80002dc <__adddf3>
 8016996:	4606      	mov	r6, r0
 8016998:	460f      	mov	r7, r1
 801699a:	f7ea f905 	bl	8000ba8 <__aeabi_d2iz>
 801699e:	2200      	movs	r2, #0
 80169a0:	9000      	str	r0, [sp, #0]
 80169a2:	2300      	movs	r3, #0
 80169a4:	4630      	mov	r0, r6
 80169a6:	4639      	mov	r1, r7
 80169a8:	f7ea f8c0 	bl	8000b2c <__aeabi_dcmplt>
 80169ac:	b150      	cbz	r0, 80169c4 <_dtoa_r+0x184>
 80169ae:	9800      	ldr	r0, [sp, #0]
 80169b0:	f7e9 fde0 	bl	8000574 <__aeabi_i2d>
 80169b4:	4632      	mov	r2, r6
 80169b6:	463b      	mov	r3, r7
 80169b8:	f7ea f8ae 	bl	8000b18 <__aeabi_dcmpeq>
 80169bc:	b910      	cbnz	r0, 80169c4 <_dtoa_r+0x184>
 80169be:	9b00      	ldr	r3, [sp, #0]
 80169c0:	3b01      	subs	r3, #1
 80169c2:	9300      	str	r3, [sp, #0]
 80169c4:	9b00      	ldr	r3, [sp, #0]
 80169c6:	2b16      	cmp	r3, #22
 80169c8:	d85a      	bhi.n	8016a80 <_dtoa_r+0x240>
 80169ca:	9a00      	ldr	r2, [sp, #0]
 80169cc:	4b57      	ldr	r3, [pc, #348]	; (8016b2c <_dtoa_r+0x2ec>)
 80169ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80169d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d6:	ec51 0b19 	vmov	r0, r1, d9
 80169da:	f7ea f8a7 	bl	8000b2c <__aeabi_dcmplt>
 80169de:	2800      	cmp	r0, #0
 80169e0:	d050      	beq.n	8016a84 <_dtoa_r+0x244>
 80169e2:	9b00      	ldr	r3, [sp, #0]
 80169e4:	3b01      	subs	r3, #1
 80169e6:	9300      	str	r3, [sp, #0]
 80169e8:	2300      	movs	r3, #0
 80169ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80169ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169ee:	1b5d      	subs	r5, r3, r5
 80169f0:	1e6b      	subs	r3, r5, #1
 80169f2:	9305      	str	r3, [sp, #20]
 80169f4:	bf45      	ittet	mi
 80169f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80169fa:	9304      	strmi	r3, [sp, #16]
 80169fc:	2300      	movpl	r3, #0
 80169fe:	2300      	movmi	r3, #0
 8016a00:	bf4c      	ite	mi
 8016a02:	9305      	strmi	r3, [sp, #20]
 8016a04:	9304      	strpl	r3, [sp, #16]
 8016a06:	9b00      	ldr	r3, [sp, #0]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	db3d      	blt.n	8016a88 <_dtoa_r+0x248>
 8016a0c:	9b05      	ldr	r3, [sp, #20]
 8016a0e:	9a00      	ldr	r2, [sp, #0]
 8016a10:	920a      	str	r2, [sp, #40]	; 0x28
 8016a12:	4413      	add	r3, r2
 8016a14:	9305      	str	r3, [sp, #20]
 8016a16:	2300      	movs	r3, #0
 8016a18:	9307      	str	r3, [sp, #28]
 8016a1a:	9b06      	ldr	r3, [sp, #24]
 8016a1c:	2b09      	cmp	r3, #9
 8016a1e:	f200 8089 	bhi.w	8016b34 <_dtoa_r+0x2f4>
 8016a22:	2b05      	cmp	r3, #5
 8016a24:	bfc4      	itt	gt
 8016a26:	3b04      	subgt	r3, #4
 8016a28:	9306      	strgt	r3, [sp, #24]
 8016a2a:	9b06      	ldr	r3, [sp, #24]
 8016a2c:	f1a3 0302 	sub.w	r3, r3, #2
 8016a30:	bfcc      	ite	gt
 8016a32:	2500      	movgt	r5, #0
 8016a34:	2501      	movle	r5, #1
 8016a36:	2b03      	cmp	r3, #3
 8016a38:	f200 8087 	bhi.w	8016b4a <_dtoa_r+0x30a>
 8016a3c:	e8df f003 	tbb	[pc, r3]
 8016a40:	59383a2d 	.word	0x59383a2d
 8016a44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016a48:	441d      	add	r5, r3
 8016a4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016a4e:	2b20      	cmp	r3, #32
 8016a50:	bfc1      	itttt	gt
 8016a52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016a56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016a5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8016a5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016a62:	bfda      	itte	le
 8016a64:	f1c3 0320 	rsble	r3, r3, #32
 8016a68:	fa06 f003 	lslle.w	r0, r6, r3
 8016a6c:	4318      	orrgt	r0, r3
 8016a6e:	f7e9 fd71 	bl	8000554 <__aeabi_ui2d>
 8016a72:	2301      	movs	r3, #1
 8016a74:	4606      	mov	r6, r0
 8016a76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016a7a:	3d01      	subs	r5, #1
 8016a7c:	930e      	str	r3, [sp, #56]	; 0x38
 8016a7e:	e76a      	b.n	8016956 <_dtoa_r+0x116>
 8016a80:	2301      	movs	r3, #1
 8016a82:	e7b2      	b.n	80169ea <_dtoa_r+0x1aa>
 8016a84:	900b      	str	r0, [sp, #44]	; 0x2c
 8016a86:	e7b1      	b.n	80169ec <_dtoa_r+0x1ac>
 8016a88:	9b04      	ldr	r3, [sp, #16]
 8016a8a:	9a00      	ldr	r2, [sp, #0]
 8016a8c:	1a9b      	subs	r3, r3, r2
 8016a8e:	9304      	str	r3, [sp, #16]
 8016a90:	4253      	negs	r3, r2
 8016a92:	9307      	str	r3, [sp, #28]
 8016a94:	2300      	movs	r3, #0
 8016a96:	930a      	str	r3, [sp, #40]	; 0x28
 8016a98:	e7bf      	b.n	8016a1a <_dtoa_r+0x1da>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	9308      	str	r3, [sp, #32]
 8016a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	dc55      	bgt.n	8016b50 <_dtoa_r+0x310>
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016aaa:	461a      	mov	r2, r3
 8016aac:	9209      	str	r2, [sp, #36]	; 0x24
 8016aae:	e00c      	b.n	8016aca <_dtoa_r+0x28a>
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	e7f3      	b.n	8016a9c <_dtoa_r+0x25c>
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ab8:	9308      	str	r3, [sp, #32]
 8016aba:	9b00      	ldr	r3, [sp, #0]
 8016abc:	4413      	add	r3, r2
 8016abe:	9302      	str	r3, [sp, #8]
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	9303      	str	r3, [sp, #12]
 8016ac6:	bfb8      	it	lt
 8016ac8:	2301      	movlt	r3, #1
 8016aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016acc:	2200      	movs	r2, #0
 8016ace:	6042      	str	r2, [r0, #4]
 8016ad0:	2204      	movs	r2, #4
 8016ad2:	f102 0614 	add.w	r6, r2, #20
 8016ad6:	429e      	cmp	r6, r3
 8016ad8:	6841      	ldr	r1, [r0, #4]
 8016ada:	d93d      	bls.n	8016b58 <_dtoa_r+0x318>
 8016adc:	4620      	mov	r0, r4
 8016ade:	f000 fecd 	bl	801787c <_Balloc>
 8016ae2:	9001      	str	r0, [sp, #4]
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	d13b      	bne.n	8016b60 <_dtoa_r+0x320>
 8016ae8:	4b11      	ldr	r3, [pc, #68]	; (8016b30 <_dtoa_r+0x2f0>)
 8016aea:	4602      	mov	r2, r0
 8016aec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016af0:	e6c0      	b.n	8016874 <_dtoa_r+0x34>
 8016af2:	2301      	movs	r3, #1
 8016af4:	e7df      	b.n	8016ab6 <_dtoa_r+0x276>
 8016af6:	bf00      	nop
 8016af8:	636f4361 	.word	0x636f4361
 8016afc:	3fd287a7 	.word	0x3fd287a7
 8016b00:	8b60c8b3 	.word	0x8b60c8b3
 8016b04:	3fc68a28 	.word	0x3fc68a28
 8016b08:	509f79fb 	.word	0x509f79fb
 8016b0c:	3fd34413 	.word	0x3fd34413
 8016b10:	080196fd 	.word	0x080196fd
 8016b14:	08019714 	.word	0x08019714
 8016b18:	7ff00000 	.word	0x7ff00000
 8016b1c:	080196f9 	.word	0x080196f9
 8016b20:	080196f0 	.word	0x080196f0
 8016b24:	080196cd 	.word	0x080196cd
 8016b28:	3ff80000 	.word	0x3ff80000
 8016b2c:	08019868 	.word	0x08019868
 8016b30:	0801976f 	.word	0x0801976f
 8016b34:	2501      	movs	r5, #1
 8016b36:	2300      	movs	r3, #0
 8016b38:	9306      	str	r3, [sp, #24]
 8016b3a:	9508      	str	r5, [sp, #32]
 8016b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8016b40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016b44:	2200      	movs	r2, #0
 8016b46:	2312      	movs	r3, #18
 8016b48:	e7b0      	b.n	8016aac <_dtoa_r+0x26c>
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	9308      	str	r3, [sp, #32]
 8016b4e:	e7f5      	b.n	8016b3c <_dtoa_r+0x2fc>
 8016b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016b56:	e7b8      	b.n	8016aca <_dtoa_r+0x28a>
 8016b58:	3101      	adds	r1, #1
 8016b5a:	6041      	str	r1, [r0, #4]
 8016b5c:	0052      	lsls	r2, r2, #1
 8016b5e:	e7b8      	b.n	8016ad2 <_dtoa_r+0x292>
 8016b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b62:	9a01      	ldr	r2, [sp, #4]
 8016b64:	601a      	str	r2, [r3, #0]
 8016b66:	9b03      	ldr	r3, [sp, #12]
 8016b68:	2b0e      	cmp	r3, #14
 8016b6a:	f200 809d 	bhi.w	8016ca8 <_dtoa_r+0x468>
 8016b6e:	2d00      	cmp	r5, #0
 8016b70:	f000 809a 	beq.w	8016ca8 <_dtoa_r+0x468>
 8016b74:	9b00      	ldr	r3, [sp, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	dd32      	ble.n	8016be0 <_dtoa_r+0x3a0>
 8016b7a:	4ab7      	ldr	r2, [pc, #732]	; (8016e58 <_dtoa_r+0x618>)
 8016b7c:	f003 030f 	and.w	r3, r3, #15
 8016b80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016b88:	9b00      	ldr	r3, [sp, #0]
 8016b8a:	05d8      	lsls	r0, r3, #23
 8016b8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016b90:	d516      	bpl.n	8016bc0 <_dtoa_r+0x380>
 8016b92:	4bb2      	ldr	r3, [pc, #712]	; (8016e5c <_dtoa_r+0x61c>)
 8016b94:	ec51 0b19 	vmov	r0, r1, d9
 8016b98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016b9c:	f7e9 fe7e 	bl	800089c <__aeabi_ddiv>
 8016ba0:	f007 070f 	and.w	r7, r7, #15
 8016ba4:	4682      	mov	sl, r0
 8016ba6:	468b      	mov	fp, r1
 8016ba8:	2503      	movs	r5, #3
 8016baa:	4eac      	ldr	r6, [pc, #688]	; (8016e5c <_dtoa_r+0x61c>)
 8016bac:	b957      	cbnz	r7, 8016bc4 <_dtoa_r+0x384>
 8016bae:	4642      	mov	r2, r8
 8016bb0:	464b      	mov	r3, r9
 8016bb2:	4650      	mov	r0, sl
 8016bb4:	4659      	mov	r1, fp
 8016bb6:	f7e9 fe71 	bl	800089c <__aeabi_ddiv>
 8016bba:	4682      	mov	sl, r0
 8016bbc:	468b      	mov	fp, r1
 8016bbe:	e028      	b.n	8016c12 <_dtoa_r+0x3d2>
 8016bc0:	2502      	movs	r5, #2
 8016bc2:	e7f2      	b.n	8016baa <_dtoa_r+0x36a>
 8016bc4:	07f9      	lsls	r1, r7, #31
 8016bc6:	d508      	bpl.n	8016bda <_dtoa_r+0x39a>
 8016bc8:	4640      	mov	r0, r8
 8016bca:	4649      	mov	r1, r9
 8016bcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016bd0:	f7e9 fd3a 	bl	8000648 <__aeabi_dmul>
 8016bd4:	3501      	adds	r5, #1
 8016bd6:	4680      	mov	r8, r0
 8016bd8:	4689      	mov	r9, r1
 8016bda:	107f      	asrs	r7, r7, #1
 8016bdc:	3608      	adds	r6, #8
 8016bde:	e7e5      	b.n	8016bac <_dtoa_r+0x36c>
 8016be0:	f000 809b 	beq.w	8016d1a <_dtoa_r+0x4da>
 8016be4:	9b00      	ldr	r3, [sp, #0]
 8016be6:	4f9d      	ldr	r7, [pc, #628]	; (8016e5c <_dtoa_r+0x61c>)
 8016be8:	425e      	negs	r6, r3
 8016bea:	4b9b      	ldr	r3, [pc, #620]	; (8016e58 <_dtoa_r+0x618>)
 8016bec:	f006 020f 	and.w	r2, r6, #15
 8016bf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf8:	ec51 0b19 	vmov	r0, r1, d9
 8016bfc:	f7e9 fd24 	bl	8000648 <__aeabi_dmul>
 8016c00:	1136      	asrs	r6, r6, #4
 8016c02:	4682      	mov	sl, r0
 8016c04:	468b      	mov	fp, r1
 8016c06:	2300      	movs	r3, #0
 8016c08:	2502      	movs	r5, #2
 8016c0a:	2e00      	cmp	r6, #0
 8016c0c:	d17a      	bne.n	8016d04 <_dtoa_r+0x4c4>
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d1d3      	bne.n	8016bba <_dtoa_r+0x37a>
 8016c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	f000 8082 	beq.w	8016d1e <_dtoa_r+0x4de>
 8016c1a:	4b91      	ldr	r3, [pc, #580]	; (8016e60 <_dtoa_r+0x620>)
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	4650      	mov	r0, sl
 8016c20:	4659      	mov	r1, fp
 8016c22:	f7e9 ff83 	bl	8000b2c <__aeabi_dcmplt>
 8016c26:	2800      	cmp	r0, #0
 8016c28:	d079      	beq.n	8016d1e <_dtoa_r+0x4de>
 8016c2a:	9b03      	ldr	r3, [sp, #12]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d076      	beq.n	8016d1e <_dtoa_r+0x4de>
 8016c30:	9b02      	ldr	r3, [sp, #8]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	dd36      	ble.n	8016ca4 <_dtoa_r+0x464>
 8016c36:	9b00      	ldr	r3, [sp, #0]
 8016c38:	4650      	mov	r0, sl
 8016c3a:	4659      	mov	r1, fp
 8016c3c:	1e5f      	subs	r7, r3, #1
 8016c3e:	2200      	movs	r2, #0
 8016c40:	4b88      	ldr	r3, [pc, #544]	; (8016e64 <_dtoa_r+0x624>)
 8016c42:	f7e9 fd01 	bl	8000648 <__aeabi_dmul>
 8016c46:	9e02      	ldr	r6, [sp, #8]
 8016c48:	4682      	mov	sl, r0
 8016c4a:	468b      	mov	fp, r1
 8016c4c:	3501      	adds	r5, #1
 8016c4e:	4628      	mov	r0, r5
 8016c50:	f7e9 fc90 	bl	8000574 <__aeabi_i2d>
 8016c54:	4652      	mov	r2, sl
 8016c56:	465b      	mov	r3, fp
 8016c58:	f7e9 fcf6 	bl	8000648 <__aeabi_dmul>
 8016c5c:	4b82      	ldr	r3, [pc, #520]	; (8016e68 <_dtoa_r+0x628>)
 8016c5e:	2200      	movs	r2, #0
 8016c60:	f7e9 fb3c 	bl	80002dc <__adddf3>
 8016c64:	46d0      	mov	r8, sl
 8016c66:	46d9      	mov	r9, fp
 8016c68:	4682      	mov	sl, r0
 8016c6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016c6e:	2e00      	cmp	r6, #0
 8016c70:	d158      	bne.n	8016d24 <_dtoa_r+0x4e4>
 8016c72:	4b7e      	ldr	r3, [pc, #504]	; (8016e6c <_dtoa_r+0x62c>)
 8016c74:	2200      	movs	r2, #0
 8016c76:	4640      	mov	r0, r8
 8016c78:	4649      	mov	r1, r9
 8016c7a:	f7e9 fb2d 	bl	80002d8 <__aeabi_dsub>
 8016c7e:	4652      	mov	r2, sl
 8016c80:	465b      	mov	r3, fp
 8016c82:	4680      	mov	r8, r0
 8016c84:	4689      	mov	r9, r1
 8016c86:	f7e9 ff6f 	bl	8000b68 <__aeabi_dcmpgt>
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	f040 8295 	bne.w	80171ba <_dtoa_r+0x97a>
 8016c90:	4652      	mov	r2, sl
 8016c92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016c96:	4640      	mov	r0, r8
 8016c98:	4649      	mov	r1, r9
 8016c9a:	f7e9 ff47 	bl	8000b2c <__aeabi_dcmplt>
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	f040 8289 	bne.w	80171b6 <_dtoa_r+0x976>
 8016ca4:	ec5b ab19 	vmov	sl, fp, d9
 8016ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	f2c0 8148 	blt.w	8016f40 <_dtoa_r+0x700>
 8016cb0:	9a00      	ldr	r2, [sp, #0]
 8016cb2:	2a0e      	cmp	r2, #14
 8016cb4:	f300 8144 	bgt.w	8016f40 <_dtoa_r+0x700>
 8016cb8:	4b67      	ldr	r3, [pc, #412]	; (8016e58 <_dtoa_r+0x618>)
 8016cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016cbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	f280 80d5 	bge.w	8016e74 <_dtoa_r+0x634>
 8016cca:	9b03      	ldr	r3, [sp, #12]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	f300 80d1 	bgt.w	8016e74 <_dtoa_r+0x634>
 8016cd2:	f040 826f 	bne.w	80171b4 <_dtoa_r+0x974>
 8016cd6:	4b65      	ldr	r3, [pc, #404]	; (8016e6c <_dtoa_r+0x62c>)
 8016cd8:	2200      	movs	r2, #0
 8016cda:	4640      	mov	r0, r8
 8016cdc:	4649      	mov	r1, r9
 8016cde:	f7e9 fcb3 	bl	8000648 <__aeabi_dmul>
 8016ce2:	4652      	mov	r2, sl
 8016ce4:	465b      	mov	r3, fp
 8016ce6:	f7e9 ff35 	bl	8000b54 <__aeabi_dcmpge>
 8016cea:	9e03      	ldr	r6, [sp, #12]
 8016cec:	4637      	mov	r7, r6
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	f040 8245 	bne.w	801717e <_dtoa_r+0x93e>
 8016cf4:	9d01      	ldr	r5, [sp, #4]
 8016cf6:	2331      	movs	r3, #49	; 0x31
 8016cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8016cfc:	9b00      	ldr	r3, [sp, #0]
 8016cfe:	3301      	adds	r3, #1
 8016d00:	9300      	str	r3, [sp, #0]
 8016d02:	e240      	b.n	8017186 <_dtoa_r+0x946>
 8016d04:	07f2      	lsls	r2, r6, #31
 8016d06:	d505      	bpl.n	8016d14 <_dtoa_r+0x4d4>
 8016d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d0c:	f7e9 fc9c 	bl	8000648 <__aeabi_dmul>
 8016d10:	3501      	adds	r5, #1
 8016d12:	2301      	movs	r3, #1
 8016d14:	1076      	asrs	r6, r6, #1
 8016d16:	3708      	adds	r7, #8
 8016d18:	e777      	b.n	8016c0a <_dtoa_r+0x3ca>
 8016d1a:	2502      	movs	r5, #2
 8016d1c:	e779      	b.n	8016c12 <_dtoa_r+0x3d2>
 8016d1e:	9f00      	ldr	r7, [sp, #0]
 8016d20:	9e03      	ldr	r6, [sp, #12]
 8016d22:	e794      	b.n	8016c4e <_dtoa_r+0x40e>
 8016d24:	9901      	ldr	r1, [sp, #4]
 8016d26:	4b4c      	ldr	r3, [pc, #304]	; (8016e58 <_dtoa_r+0x618>)
 8016d28:	4431      	add	r1, r6
 8016d2a:	910d      	str	r1, [sp, #52]	; 0x34
 8016d2c:	9908      	ldr	r1, [sp, #32]
 8016d2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016d32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016d36:	2900      	cmp	r1, #0
 8016d38:	d043      	beq.n	8016dc2 <_dtoa_r+0x582>
 8016d3a:	494d      	ldr	r1, [pc, #308]	; (8016e70 <_dtoa_r+0x630>)
 8016d3c:	2000      	movs	r0, #0
 8016d3e:	f7e9 fdad 	bl	800089c <__aeabi_ddiv>
 8016d42:	4652      	mov	r2, sl
 8016d44:	465b      	mov	r3, fp
 8016d46:	f7e9 fac7 	bl	80002d8 <__aeabi_dsub>
 8016d4a:	9d01      	ldr	r5, [sp, #4]
 8016d4c:	4682      	mov	sl, r0
 8016d4e:	468b      	mov	fp, r1
 8016d50:	4649      	mov	r1, r9
 8016d52:	4640      	mov	r0, r8
 8016d54:	f7e9 ff28 	bl	8000ba8 <__aeabi_d2iz>
 8016d58:	4606      	mov	r6, r0
 8016d5a:	f7e9 fc0b 	bl	8000574 <__aeabi_i2d>
 8016d5e:	4602      	mov	r2, r0
 8016d60:	460b      	mov	r3, r1
 8016d62:	4640      	mov	r0, r8
 8016d64:	4649      	mov	r1, r9
 8016d66:	f7e9 fab7 	bl	80002d8 <__aeabi_dsub>
 8016d6a:	3630      	adds	r6, #48	; 0x30
 8016d6c:	f805 6b01 	strb.w	r6, [r5], #1
 8016d70:	4652      	mov	r2, sl
 8016d72:	465b      	mov	r3, fp
 8016d74:	4680      	mov	r8, r0
 8016d76:	4689      	mov	r9, r1
 8016d78:	f7e9 fed8 	bl	8000b2c <__aeabi_dcmplt>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	d163      	bne.n	8016e48 <_dtoa_r+0x608>
 8016d80:	4642      	mov	r2, r8
 8016d82:	464b      	mov	r3, r9
 8016d84:	4936      	ldr	r1, [pc, #216]	; (8016e60 <_dtoa_r+0x620>)
 8016d86:	2000      	movs	r0, #0
 8016d88:	f7e9 faa6 	bl	80002d8 <__aeabi_dsub>
 8016d8c:	4652      	mov	r2, sl
 8016d8e:	465b      	mov	r3, fp
 8016d90:	f7e9 fecc 	bl	8000b2c <__aeabi_dcmplt>
 8016d94:	2800      	cmp	r0, #0
 8016d96:	f040 80b5 	bne.w	8016f04 <_dtoa_r+0x6c4>
 8016d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d9c:	429d      	cmp	r5, r3
 8016d9e:	d081      	beq.n	8016ca4 <_dtoa_r+0x464>
 8016da0:	4b30      	ldr	r3, [pc, #192]	; (8016e64 <_dtoa_r+0x624>)
 8016da2:	2200      	movs	r2, #0
 8016da4:	4650      	mov	r0, sl
 8016da6:	4659      	mov	r1, fp
 8016da8:	f7e9 fc4e 	bl	8000648 <__aeabi_dmul>
 8016dac:	4b2d      	ldr	r3, [pc, #180]	; (8016e64 <_dtoa_r+0x624>)
 8016dae:	4682      	mov	sl, r0
 8016db0:	468b      	mov	fp, r1
 8016db2:	4640      	mov	r0, r8
 8016db4:	4649      	mov	r1, r9
 8016db6:	2200      	movs	r2, #0
 8016db8:	f7e9 fc46 	bl	8000648 <__aeabi_dmul>
 8016dbc:	4680      	mov	r8, r0
 8016dbe:	4689      	mov	r9, r1
 8016dc0:	e7c6      	b.n	8016d50 <_dtoa_r+0x510>
 8016dc2:	4650      	mov	r0, sl
 8016dc4:	4659      	mov	r1, fp
 8016dc6:	f7e9 fc3f 	bl	8000648 <__aeabi_dmul>
 8016dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dcc:	9d01      	ldr	r5, [sp, #4]
 8016dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8016dd0:	4682      	mov	sl, r0
 8016dd2:	468b      	mov	fp, r1
 8016dd4:	4649      	mov	r1, r9
 8016dd6:	4640      	mov	r0, r8
 8016dd8:	f7e9 fee6 	bl	8000ba8 <__aeabi_d2iz>
 8016ddc:	4606      	mov	r6, r0
 8016dde:	f7e9 fbc9 	bl	8000574 <__aeabi_i2d>
 8016de2:	3630      	adds	r6, #48	; 0x30
 8016de4:	4602      	mov	r2, r0
 8016de6:	460b      	mov	r3, r1
 8016de8:	4640      	mov	r0, r8
 8016dea:	4649      	mov	r1, r9
 8016dec:	f7e9 fa74 	bl	80002d8 <__aeabi_dsub>
 8016df0:	f805 6b01 	strb.w	r6, [r5], #1
 8016df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016df6:	429d      	cmp	r5, r3
 8016df8:	4680      	mov	r8, r0
 8016dfa:	4689      	mov	r9, r1
 8016dfc:	f04f 0200 	mov.w	r2, #0
 8016e00:	d124      	bne.n	8016e4c <_dtoa_r+0x60c>
 8016e02:	4b1b      	ldr	r3, [pc, #108]	; (8016e70 <_dtoa_r+0x630>)
 8016e04:	4650      	mov	r0, sl
 8016e06:	4659      	mov	r1, fp
 8016e08:	f7e9 fa68 	bl	80002dc <__adddf3>
 8016e0c:	4602      	mov	r2, r0
 8016e0e:	460b      	mov	r3, r1
 8016e10:	4640      	mov	r0, r8
 8016e12:	4649      	mov	r1, r9
 8016e14:	f7e9 fea8 	bl	8000b68 <__aeabi_dcmpgt>
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	d173      	bne.n	8016f04 <_dtoa_r+0x6c4>
 8016e1c:	4652      	mov	r2, sl
 8016e1e:	465b      	mov	r3, fp
 8016e20:	4913      	ldr	r1, [pc, #76]	; (8016e70 <_dtoa_r+0x630>)
 8016e22:	2000      	movs	r0, #0
 8016e24:	f7e9 fa58 	bl	80002d8 <__aeabi_dsub>
 8016e28:	4602      	mov	r2, r0
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	4640      	mov	r0, r8
 8016e2e:	4649      	mov	r1, r9
 8016e30:	f7e9 fe7c 	bl	8000b2c <__aeabi_dcmplt>
 8016e34:	2800      	cmp	r0, #0
 8016e36:	f43f af35 	beq.w	8016ca4 <_dtoa_r+0x464>
 8016e3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016e3c:	1e6b      	subs	r3, r5, #1
 8016e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016e44:	2b30      	cmp	r3, #48	; 0x30
 8016e46:	d0f8      	beq.n	8016e3a <_dtoa_r+0x5fa>
 8016e48:	9700      	str	r7, [sp, #0]
 8016e4a:	e049      	b.n	8016ee0 <_dtoa_r+0x6a0>
 8016e4c:	4b05      	ldr	r3, [pc, #20]	; (8016e64 <_dtoa_r+0x624>)
 8016e4e:	f7e9 fbfb 	bl	8000648 <__aeabi_dmul>
 8016e52:	4680      	mov	r8, r0
 8016e54:	4689      	mov	r9, r1
 8016e56:	e7bd      	b.n	8016dd4 <_dtoa_r+0x594>
 8016e58:	08019868 	.word	0x08019868
 8016e5c:	08019840 	.word	0x08019840
 8016e60:	3ff00000 	.word	0x3ff00000
 8016e64:	40240000 	.word	0x40240000
 8016e68:	401c0000 	.word	0x401c0000
 8016e6c:	40140000 	.word	0x40140000
 8016e70:	3fe00000 	.word	0x3fe00000
 8016e74:	9d01      	ldr	r5, [sp, #4]
 8016e76:	4656      	mov	r6, sl
 8016e78:	465f      	mov	r7, fp
 8016e7a:	4642      	mov	r2, r8
 8016e7c:	464b      	mov	r3, r9
 8016e7e:	4630      	mov	r0, r6
 8016e80:	4639      	mov	r1, r7
 8016e82:	f7e9 fd0b 	bl	800089c <__aeabi_ddiv>
 8016e86:	f7e9 fe8f 	bl	8000ba8 <__aeabi_d2iz>
 8016e8a:	4682      	mov	sl, r0
 8016e8c:	f7e9 fb72 	bl	8000574 <__aeabi_i2d>
 8016e90:	4642      	mov	r2, r8
 8016e92:	464b      	mov	r3, r9
 8016e94:	f7e9 fbd8 	bl	8000648 <__aeabi_dmul>
 8016e98:	4602      	mov	r2, r0
 8016e9a:	460b      	mov	r3, r1
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	4639      	mov	r1, r7
 8016ea0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8016ea4:	f7e9 fa18 	bl	80002d8 <__aeabi_dsub>
 8016ea8:	f805 6b01 	strb.w	r6, [r5], #1
 8016eac:	9e01      	ldr	r6, [sp, #4]
 8016eae:	9f03      	ldr	r7, [sp, #12]
 8016eb0:	1bae      	subs	r6, r5, r6
 8016eb2:	42b7      	cmp	r7, r6
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	460b      	mov	r3, r1
 8016eb8:	d135      	bne.n	8016f26 <_dtoa_r+0x6e6>
 8016eba:	f7e9 fa0f 	bl	80002dc <__adddf3>
 8016ebe:	4642      	mov	r2, r8
 8016ec0:	464b      	mov	r3, r9
 8016ec2:	4606      	mov	r6, r0
 8016ec4:	460f      	mov	r7, r1
 8016ec6:	f7e9 fe4f 	bl	8000b68 <__aeabi_dcmpgt>
 8016eca:	b9d0      	cbnz	r0, 8016f02 <_dtoa_r+0x6c2>
 8016ecc:	4642      	mov	r2, r8
 8016ece:	464b      	mov	r3, r9
 8016ed0:	4630      	mov	r0, r6
 8016ed2:	4639      	mov	r1, r7
 8016ed4:	f7e9 fe20 	bl	8000b18 <__aeabi_dcmpeq>
 8016ed8:	b110      	cbz	r0, 8016ee0 <_dtoa_r+0x6a0>
 8016eda:	f01a 0f01 	tst.w	sl, #1
 8016ede:	d110      	bne.n	8016f02 <_dtoa_r+0x6c2>
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	ee18 1a10 	vmov	r1, s16
 8016ee6:	f000 fd09 	bl	80178fc <_Bfree>
 8016eea:	2300      	movs	r3, #0
 8016eec:	9800      	ldr	r0, [sp, #0]
 8016eee:	702b      	strb	r3, [r5, #0]
 8016ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ef2:	3001      	adds	r0, #1
 8016ef4:	6018      	str	r0, [r3, #0]
 8016ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	f43f acf1 	beq.w	80168e0 <_dtoa_r+0xa0>
 8016efe:	601d      	str	r5, [r3, #0]
 8016f00:	e4ee      	b.n	80168e0 <_dtoa_r+0xa0>
 8016f02:	9f00      	ldr	r7, [sp, #0]
 8016f04:	462b      	mov	r3, r5
 8016f06:	461d      	mov	r5, r3
 8016f08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016f0c:	2a39      	cmp	r2, #57	; 0x39
 8016f0e:	d106      	bne.n	8016f1e <_dtoa_r+0x6de>
 8016f10:	9a01      	ldr	r2, [sp, #4]
 8016f12:	429a      	cmp	r2, r3
 8016f14:	d1f7      	bne.n	8016f06 <_dtoa_r+0x6c6>
 8016f16:	9901      	ldr	r1, [sp, #4]
 8016f18:	2230      	movs	r2, #48	; 0x30
 8016f1a:	3701      	adds	r7, #1
 8016f1c:	700a      	strb	r2, [r1, #0]
 8016f1e:	781a      	ldrb	r2, [r3, #0]
 8016f20:	3201      	adds	r2, #1
 8016f22:	701a      	strb	r2, [r3, #0]
 8016f24:	e790      	b.n	8016e48 <_dtoa_r+0x608>
 8016f26:	4ba6      	ldr	r3, [pc, #664]	; (80171c0 <_dtoa_r+0x980>)
 8016f28:	2200      	movs	r2, #0
 8016f2a:	f7e9 fb8d 	bl	8000648 <__aeabi_dmul>
 8016f2e:	2200      	movs	r2, #0
 8016f30:	2300      	movs	r3, #0
 8016f32:	4606      	mov	r6, r0
 8016f34:	460f      	mov	r7, r1
 8016f36:	f7e9 fdef 	bl	8000b18 <__aeabi_dcmpeq>
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	d09d      	beq.n	8016e7a <_dtoa_r+0x63a>
 8016f3e:	e7cf      	b.n	8016ee0 <_dtoa_r+0x6a0>
 8016f40:	9a08      	ldr	r2, [sp, #32]
 8016f42:	2a00      	cmp	r2, #0
 8016f44:	f000 80d7 	beq.w	80170f6 <_dtoa_r+0x8b6>
 8016f48:	9a06      	ldr	r2, [sp, #24]
 8016f4a:	2a01      	cmp	r2, #1
 8016f4c:	f300 80ba 	bgt.w	80170c4 <_dtoa_r+0x884>
 8016f50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f52:	2a00      	cmp	r2, #0
 8016f54:	f000 80b2 	beq.w	80170bc <_dtoa_r+0x87c>
 8016f58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016f5c:	9e07      	ldr	r6, [sp, #28]
 8016f5e:	9d04      	ldr	r5, [sp, #16]
 8016f60:	9a04      	ldr	r2, [sp, #16]
 8016f62:	441a      	add	r2, r3
 8016f64:	9204      	str	r2, [sp, #16]
 8016f66:	9a05      	ldr	r2, [sp, #20]
 8016f68:	2101      	movs	r1, #1
 8016f6a:	441a      	add	r2, r3
 8016f6c:	4620      	mov	r0, r4
 8016f6e:	9205      	str	r2, [sp, #20]
 8016f70:	f000 fd7c 	bl	8017a6c <__i2b>
 8016f74:	4607      	mov	r7, r0
 8016f76:	2d00      	cmp	r5, #0
 8016f78:	dd0c      	ble.n	8016f94 <_dtoa_r+0x754>
 8016f7a:	9b05      	ldr	r3, [sp, #20]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	dd09      	ble.n	8016f94 <_dtoa_r+0x754>
 8016f80:	42ab      	cmp	r3, r5
 8016f82:	9a04      	ldr	r2, [sp, #16]
 8016f84:	bfa8      	it	ge
 8016f86:	462b      	movge	r3, r5
 8016f88:	1ad2      	subs	r2, r2, r3
 8016f8a:	9204      	str	r2, [sp, #16]
 8016f8c:	9a05      	ldr	r2, [sp, #20]
 8016f8e:	1aed      	subs	r5, r5, r3
 8016f90:	1ad3      	subs	r3, r2, r3
 8016f92:	9305      	str	r3, [sp, #20]
 8016f94:	9b07      	ldr	r3, [sp, #28]
 8016f96:	b31b      	cbz	r3, 8016fe0 <_dtoa_r+0x7a0>
 8016f98:	9b08      	ldr	r3, [sp, #32]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	f000 80af 	beq.w	80170fe <_dtoa_r+0x8be>
 8016fa0:	2e00      	cmp	r6, #0
 8016fa2:	dd13      	ble.n	8016fcc <_dtoa_r+0x78c>
 8016fa4:	4639      	mov	r1, r7
 8016fa6:	4632      	mov	r2, r6
 8016fa8:	4620      	mov	r0, r4
 8016faa:	f000 fe1f 	bl	8017bec <__pow5mult>
 8016fae:	ee18 2a10 	vmov	r2, s16
 8016fb2:	4601      	mov	r1, r0
 8016fb4:	4607      	mov	r7, r0
 8016fb6:	4620      	mov	r0, r4
 8016fb8:	f000 fd6e 	bl	8017a98 <__multiply>
 8016fbc:	ee18 1a10 	vmov	r1, s16
 8016fc0:	4680      	mov	r8, r0
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	f000 fc9a 	bl	80178fc <_Bfree>
 8016fc8:	ee08 8a10 	vmov	s16, r8
 8016fcc:	9b07      	ldr	r3, [sp, #28]
 8016fce:	1b9a      	subs	r2, r3, r6
 8016fd0:	d006      	beq.n	8016fe0 <_dtoa_r+0x7a0>
 8016fd2:	ee18 1a10 	vmov	r1, s16
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	f000 fe08 	bl	8017bec <__pow5mult>
 8016fdc:	ee08 0a10 	vmov	s16, r0
 8016fe0:	2101      	movs	r1, #1
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	f000 fd42 	bl	8017a6c <__i2b>
 8016fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	4606      	mov	r6, r0
 8016fee:	f340 8088 	ble.w	8017102 <_dtoa_r+0x8c2>
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	4601      	mov	r1, r0
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	f000 fdf8 	bl	8017bec <__pow5mult>
 8016ffc:	9b06      	ldr	r3, [sp, #24]
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	4606      	mov	r6, r0
 8017002:	f340 8081 	ble.w	8017108 <_dtoa_r+0x8c8>
 8017006:	f04f 0800 	mov.w	r8, #0
 801700a:	6933      	ldr	r3, [r6, #16]
 801700c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017010:	6918      	ldr	r0, [r3, #16]
 8017012:	f000 fcdb 	bl	80179cc <__hi0bits>
 8017016:	f1c0 0020 	rsb	r0, r0, #32
 801701a:	9b05      	ldr	r3, [sp, #20]
 801701c:	4418      	add	r0, r3
 801701e:	f010 001f 	ands.w	r0, r0, #31
 8017022:	f000 8092 	beq.w	801714a <_dtoa_r+0x90a>
 8017026:	f1c0 0320 	rsb	r3, r0, #32
 801702a:	2b04      	cmp	r3, #4
 801702c:	f340 808a 	ble.w	8017144 <_dtoa_r+0x904>
 8017030:	f1c0 001c 	rsb	r0, r0, #28
 8017034:	9b04      	ldr	r3, [sp, #16]
 8017036:	4403      	add	r3, r0
 8017038:	9304      	str	r3, [sp, #16]
 801703a:	9b05      	ldr	r3, [sp, #20]
 801703c:	4403      	add	r3, r0
 801703e:	4405      	add	r5, r0
 8017040:	9305      	str	r3, [sp, #20]
 8017042:	9b04      	ldr	r3, [sp, #16]
 8017044:	2b00      	cmp	r3, #0
 8017046:	dd07      	ble.n	8017058 <_dtoa_r+0x818>
 8017048:	ee18 1a10 	vmov	r1, s16
 801704c:	461a      	mov	r2, r3
 801704e:	4620      	mov	r0, r4
 8017050:	f000 fe26 	bl	8017ca0 <__lshift>
 8017054:	ee08 0a10 	vmov	s16, r0
 8017058:	9b05      	ldr	r3, [sp, #20]
 801705a:	2b00      	cmp	r3, #0
 801705c:	dd05      	ble.n	801706a <_dtoa_r+0x82a>
 801705e:	4631      	mov	r1, r6
 8017060:	461a      	mov	r2, r3
 8017062:	4620      	mov	r0, r4
 8017064:	f000 fe1c 	bl	8017ca0 <__lshift>
 8017068:	4606      	mov	r6, r0
 801706a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801706c:	2b00      	cmp	r3, #0
 801706e:	d06e      	beq.n	801714e <_dtoa_r+0x90e>
 8017070:	ee18 0a10 	vmov	r0, s16
 8017074:	4631      	mov	r1, r6
 8017076:	f000 fe83 	bl	8017d80 <__mcmp>
 801707a:	2800      	cmp	r0, #0
 801707c:	da67      	bge.n	801714e <_dtoa_r+0x90e>
 801707e:	9b00      	ldr	r3, [sp, #0]
 8017080:	3b01      	subs	r3, #1
 8017082:	ee18 1a10 	vmov	r1, s16
 8017086:	9300      	str	r3, [sp, #0]
 8017088:	220a      	movs	r2, #10
 801708a:	2300      	movs	r3, #0
 801708c:	4620      	mov	r0, r4
 801708e:	f000 fc57 	bl	8017940 <__multadd>
 8017092:	9b08      	ldr	r3, [sp, #32]
 8017094:	ee08 0a10 	vmov	s16, r0
 8017098:	2b00      	cmp	r3, #0
 801709a:	f000 81b1 	beq.w	8017400 <_dtoa_r+0xbc0>
 801709e:	2300      	movs	r3, #0
 80170a0:	4639      	mov	r1, r7
 80170a2:	220a      	movs	r2, #10
 80170a4:	4620      	mov	r0, r4
 80170a6:	f000 fc4b 	bl	8017940 <__multadd>
 80170aa:	9b02      	ldr	r3, [sp, #8]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	4607      	mov	r7, r0
 80170b0:	f300 808e 	bgt.w	80171d0 <_dtoa_r+0x990>
 80170b4:	9b06      	ldr	r3, [sp, #24]
 80170b6:	2b02      	cmp	r3, #2
 80170b8:	dc51      	bgt.n	801715e <_dtoa_r+0x91e>
 80170ba:	e089      	b.n	80171d0 <_dtoa_r+0x990>
 80170bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80170c2:	e74b      	b.n	8016f5c <_dtoa_r+0x71c>
 80170c4:	9b03      	ldr	r3, [sp, #12]
 80170c6:	1e5e      	subs	r6, r3, #1
 80170c8:	9b07      	ldr	r3, [sp, #28]
 80170ca:	42b3      	cmp	r3, r6
 80170cc:	bfbf      	itttt	lt
 80170ce:	9b07      	ldrlt	r3, [sp, #28]
 80170d0:	9607      	strlt	r6, [sp, #28]
 80170d2:	1af2      	sublt	r2, r6, r3
 80170d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80170d6:	bfb6      	itet	lt
 80170d8:	189b      	addlt	r3, r3, r2
 80170da:	1b9e      	subge	r6, r3, r6
 80170dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80170de:	9b03      	ldr	r3, [sp, #12]
 80170e0:	bfb8      	it	lt
 80170e2:	2600      	movlt	r6, #0
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	bfb7      	itett	lt
 80170e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80170ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80170f0:	1a9d      	sublt	r5, r3, r2
 80170f2:	2300      	movlt	r3, #0
 80170f4:	e734      	b.n	8016f60 <_dtoa_r+0x720>
 80170f6:	9e07      	ldr	r6, [sp, #28]
 80170f8:	9d04      	ldr	r5, [sp, #16]
 80170fa:	9f08      	ldr	r7, [sp, #32]
 80170fc:	e73b      	b.n	8016f76 <_dtoa_r+0x736>
 80170fe:	9a07      	ldr	r2, [sp, #28]
 8017100:	e767      	b.n	8016fd2 <_dtoa_r+0x792>
 8017102:	9b06      	ldr	r3, [sp, #24]
 8017104:	2b01      	cmp	r3, #1
 8017106:	dc18      	bgt.n	801713a <_dtoa_r+0x8fa>
 8017108:	f1ba 0f00 	cmp.w	sl, #0
 801710c:	d115      	bne.n	801713a <_dtoa_r+0x8fa>
 801710e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017112:	b993      	cbnz	r3, 801713a <_dtoa_r+0x8fa>
 8017114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017118:	0d1b      	lsrs	r3, r3, #20
 801711a:	051b      	lsls	r3, r3, #20
 801711c:	b183      	cbz	r3, 8017140 <_dtoa_r+0x900>
 801711e:	9b04      	ldr	r3, [sp, #16]
 8017120:	3301      	adds	r3, #1
 8017122:	9304      	str	r3, [sp, #16]
 8017124:	9b05      	ldr	r3, [sp, #20]
 8017126:	3301      	adds	r3, #1
 8017128:	9305      	str	r3, [sp, #20]
 801712a:	f04f 0801 	mov.w	r8, #1
 801712e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017130:	2b00      	cmp	r3, #0
 8017132:	f47f af6a 	bne.w	801700a <_dtoa_r+0x7ca>
 8017136:	2001      	movs	r0, #1
 8017138:	e76f      	b.n	801701a <_dtoa_r+0x7da>
 801713a:	f04f 0800 	mov.w	r8, #0
 801713e:	e7f6      	b.n	801712e <_dtoa_r+0x8ee>
 8017140:	4698      	mov	r8, r3
 8017142:	e7f4      	b.n	801712e <_dtoa_r+0x8ee>
 8017144:	f43f af7d 	beq.w	8017042 <_dtoa_r+0x802>
 8017148:	4618      	mov	r0, r3
 801714a:	301c      	adds	r0, #28
 801714c:	e772      	b.n	8017034 <_dtoa_r+0x7f4>
 801714e:	9b03      	ldr	r3, [sp, #12]
 8017150:	2b00      	cmp	r3, #0
 8017152:	dc37      	bgt.n	80171c4 <_dtoa_r+0x984>
 8017154:	9b06      	ldr	r3, [sp, #24]
 8017156:	2b02      	cmp	r3, #2
 8017158:	dd34      	ble.n	80171c4 <_dtoa_r+0x984>
 801715a:	9b03      	ldr	r3, [sp, #12]
 801715c:	9302      	str	r3, [sp, #8]
 801715e:	9b02      	ldr	r3, [sp, #8]
 8017160:	b96b      	cbnz	r3, 801717e <_dtoa_r+0x93e>
 8017162:	4631      	mov	r1, r6
 8017164:	2205      	movs	r2, #5
 8017166:	4620      	mov	r0, r4
 8017168:	f000 fbea 	bl	8017940 <__multadd>
 801716c:	4601      	mov	r1, r0
 801716e:	4606      	mov	r6, r0
 8017170:	ee18 0a10 	vmov	r0, s16
 8017174:	f000 fe04 	bl	8017d80 <__mcmp>
 8017178:	2800      	cmp	r0, #0
 801717a:	f73f adbb 	bgt.w	8016cf4 <_dtoa_r+0x4b4>
 801717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017180:	9d01      	ldr	r5, [sp, #4]
 8017182:	43db      	mvns	r3, r3
 8017184:	9300      	str	r3, [sp, #0]
 8017186:	f04f 0800 	mov.w	r8, #0
 801718a:	4631      	mov	r1, r6
 801718c:	4620      	mov	r0, r4
 801718e:	f000 fbb5 	bl	80178fc <_Bfree>
 8017192:	2f00      	cmp	r7, #0
 8017194:	f43f aea4 	beq.w	8016ee0 <_dtoa_r+0x6a0>
 8017198:	f1b8 0f00 	cmp.w	r8, #0
 801719c:	d005      	beq.n	80171aa <_dtoa_r+0x96a>
 801719e:	45b8      	cmp	r8, r7
 80171a0:	d003      	beq.n	80171aa <_dtoa_r+0x96a>
 80171a2:	4641      	mov	r1, r8
 80171a4:	4620      	mov	r0, r4
 80171a6:	f000 fba9 	bl	80178fc <_Bfree>
 80171aa:	4639      	mov	r1, r7
 80171ac:	4620      	mov	r0, r4
 80171ae:	f000 fba5 	bl	80178fc <_Bfree>
 80171b2:	e695      	b.n	8016ee0 <_dtoa_r+0x6a0>
 80171b4:	2600      	movs	r6, #0
 80171b6:	4637      	mov	r7, r6
 80171b8:	e7e1      	b.n	801717e <_dtoa_r+0x93e>
 80171ba:	9700      	str	r7, [sp, #0]
 80171bc:	4637      	mov	r7, r6
 80171be:	e599      	b.n	8016cf4 <_dtoa_r+0x4b4>
 80171c0:	40240000 	.word	0x40240000
 80171c4:	9b08      	ldr	r3, [sp, #32]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f000 80ca 	beq.w	8017360 <_dtoa_r+0xb20>
 80171cc:	9b03      	ldr	r3, [sp, #12]
 80171ce:	9302      	str	r3, [sp, #8]
 80171d0:	2d00      	cmp	r5, #0
 80171d2:	dd05      	ble.n	80171e0 <_dtoa_r+0x9a0>
 80171d4:	4639      	mov	r1, r7
 80171d6:	462a      	mov	r2, r5
 80171d8:	4620      	mov	r0, r4
 80171da:	f000 fd61 	bl	8017ca0 <__lshift>
 80171de:	4607      	mov	r7, r0
 80171e0:	f1b8 0f00 	cmp.w	r8, #0
 80171e4:	d05b      	beq.n	801729e <_dtoa_r+0xa5e>
 80171e6:	6879      	ldr	r1, [r7, #4]
 80171e8:	4620      	mov	r0, r4
 80171ea:	f000 fb47 	bl	801787c <_Balloc>
 80171ee:	4605      	mov	r5, r0
 80171f0:	b928      	cbnz	r0, 80171fe <_dtoa_r+0x9be>
 80171f2:	4b87      	ldr	r3, [pc, #540]	; (8017410 <_dtoa_r+0xbd0>)
 80171f4:	4602      	mov	r2, r0
 80171f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80171fa:	f7ff bb3b 	b.w	8016874 <_dtoa_r+0x34>
 80171fe:	693a      	ldr	r2, [r7, #16]
 8017200:	3202      	adds	r2, #2
 8017202:	0092      	lsls	r2, r2, #2
 8017204:	f107 010c 	add.w	r1, r7, #12
 8017208:	300c      	adds	r0, #12
 801720a:	f7fe fb8b 	bl	8015924 <memcpy>
 801720e:	2201      	movs	r2, #1
 8017210:	4629      	mov	r1, r5
 8017212:	4620      	mov	r0, r4
 8017214:	f000 fd44 	bl	8017ca0 <__lshift>
 8017218:	9b01      	ldr	r3, [sp, #4]
 801721a:	f103 0901 	add.w	r9, r3, #1
 801721e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017222:	4413      	add	r3, r2
 8017224:	9305      	str	r3, [sp, #20]
 8017226:	f00a 0301 	and.w	r3, sl, #1
 801722a:	46b8      	mov	r8, r7
 801722c:	9304      	str	r3, [sp, #16]
 801722e:	4607      	mov	r7, r0
 8017230:	4631      	mov	r1, r6
 8017232:	ee18 0a10 	vmov	r0, s16
 8017236:	f7ff fa77 	bl	8016728 <quorem>
 801723a:	4641      	mov	r1, r8
 801723c:	9002      	str	r0, [sp, #8]
 801723e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017242:	ee18 0a10 	vmov	r0, s16
 8017246:	f000 fd9b 	bl	8017d80 <__mcmp>
 801724a:	463a      	mov	r2, r7
 801724c:	9003      	str	r0, [sp, #12]
 801724e:	4631      	mov	r1, r6
 8017250:	4620      	mov	r0, r4
 8017252:	f000 fdb1 	bl	8017db8 <__mdiff>
 8017256:	68c2      	ldr	r2, [r0, #12]
 8017258:	f109 3bff 	add.w	fp, r9, #4294967295
 801725c:	4605      	mov	r5, r0
 801725e:	bb02      	cbnz	r2, 80172a2 <_dtoa_r+0xa62>
 8017260:	4601      	mov	r1, r0
 8017262:	ee18 0a10 	vmov	r0, s16
 8017266:	f000 fd8b 	bl	8017d80 <__mcmp>
 801726a:	4602      	mov	r2, r0
 801726c:	4629      	mov	r1, r5
 801726e:	4620      	mov	r0, r4
 8017270:	9207      	str	r2, [sp, #28]
 8017272:	f000 fb43 	bl	80178fc <_Bfree>
 8017276:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801727a:	ea43 0102 	orr.w	r1, r3, r2
 801727e:	9b04      	ldr	r3, [sp, #16]
 8017280:	430b      	orrs	r3, r1
 8017282:	464d      	mov	r5, r9
 8017284:	d10f      	bne.n	80172a6 <_dtoa_r+0xa66>
 8017286:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801728a:	d02a      	beq.n	80172e2 <_dtoa_r+0xaa2>
 801728c:	9b03      	ldr	r3, [sp, #12]
 801728e:	2b00      	cmp	r3, #0
 8017290:	dd02      	ble.n	8017298 <_dtoa_r+0xa58>
 8017292:	9b02      	ldr	r3, [sp, #8]
 8017294:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017298:	f88b a000 	strb.w	sl, [fp]
 801729c:	e775      	b.n	801718a <_dtoa_r+0x94a>
 801729e:	4638      	mov	r0, r7
 80172a0:	e7ba      	b.n	8017218 <_dtoa_r+0x9d8>
 80172a2:	2201      	movs	r2, #1
 80172a4:	e7e2      	b.n	801726c <_dtoa_r+0xa2c>
 80172a6:	9b03      	ldr	r3, [sp, #12]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	db04      	blt.n	80172b6 <_dtoa_r+0xa76>
 80172ac:	9906      	ldr	r1, [sp, #24]
 80172ae:	430b      	orrs	r3, r1
 80172b0:	9904      	ldr	r1, [sp, #16]
 80172b2:	430b      	orrs	r3, r1
 80172b4:	d122      	bne.n	80172fc <_dtoa_r+0xabc>
 80172b6:	2a00      	cmp	r2, #0
 80172b8:	ddee      	ble.n	8017298 <_dtoa_r+0xa58>
 80172ba:	ee18 1a10 	vmov	r1, s16
 80172be:	2201      	movs	r2, #1
 80172c0:	4620      	mov	r0, r4
 80172c2:	f000 fced 	bl	8017ca0 <__lshift>
 80172c6:	4631      	mov	r1, r6
 80172c8:	ee08 0a10 	vmov	s16, r0
 80172cc:	f000 fd58 	bl	8017d80 <__mcmp>
 80172d0:	2800      	cmp	r0, #0
 80172d2:	dc03      	bgt.n	80172dc <_dtoa_r+0xa9c>
 80172d4:	d1e0      	bne.n	8017298 <_dtoa_r+0xa58>
 80172d6:	f01a 0f01 	tst.w	sl, #1
 80172da:	d0dd      	beq.n	8017298 <_dtoa_r+0xa58>
 80172dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80172e0:	d1d7      	bne.n	8017292 <_dtoa_r+0xa52>
 80172e2:	2339      	movs	r3, #57	; 0x39
 80172e4:	f88b 3000 	strb.w	r3, [fp]
 80172e8:	462b      	mov	r3, r5
 80172ea:	461d      	mov	r5, r3
 80172ec:	3b01      	subs	r3, #1
 80172ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80172f2:	2a39      	cmp	r2, #57	; 0x39
 80172f4:	d071      	beq.n	80173da <_dtoa_r+0xb9a>
 80172f6:	3201      	adds	r2, #1
 80172f8:	701a      	strb	r2, [r3, #0]
 80172fa:	e746      	b.n	801718a <_dtoa_r+0x94a>
 80172fc:	2a00      	cmp	r2, #0
 80172fe:	dd07      	ble.n	8017310 <_dtoa_r+0xad0>
 8017300:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017304:	d0ed      	beq.n	80172e2 <_dtoa_r+0xaa2>
 8017306:	f10a 0301 	add.w	r3, sl, #1
 801730a:	f88b 3000 	strb.w	r3, [fp]
 801730e:	e73c      	b.n	801718a <_dtoa_r+0x94a>
 8017310:	9b05      	ldr	r3, [sp, #20]
 8017312:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017316:	4599      	cmp	r9, r3
 8017318:	d047      	beq.n	80173aa <_dtoa_r+0xb6a>
 801731a:	ee18 1a10 	vmov	r1, s16
 801731e:	2300      	movs	r3, #0
 8017320:	220a      	movs	r2, #10
 8017322:	4620      	mov	r0, r4
 8017324:	f000 fb0c 	bl	8017940 <__multadd>
 8017328:	45b8      	cmp	r8, r7
 801732a:	ee08 0a10 	vmov	s16, r0
 801732e:	f04f 0300 	mov.w	r3, #0
 8017332:	f04f 020a 	mov.w	r2, #10
 8017336:	4641      	mov	r1, r8
 8017338:	4620      	mov	r0, r4
 801733a:	d106      	bne.n	801734a <_dtoa_r+0xb0a>
 801733c:	f000 fb00 	bl	8017940 <__multadd>
 8017340:	4680      	mov	r8, r0
 8017342:	4607      	mov	r7, r0
 8017344:	f109 0901 	add.w	r9, r9, #1
 8017348:	e772      	b.n	8017230 <_dtoa_r+0x9f0>
 801734a:	f000 faf9 	bl	8017940 <__multadd>
 801734e:	4639      	mov	r1, r7
 8017350:	4680      	mov	r8, r0
 8017352:	2300      	movs	r3, #0
 8017354:	220a      	movs	r2, #10
 8017356:	4620      	mov	r0, r4
 8017358:	f000 faf2 	bl	8017940 <__multadd>
 801735c:	4607      	mov	r7, r0
 801735e:	e7f1      	b.n	8017344 <_dtoa_r+0xb04>
 8017360:	9b03      	ldr	r3, [sp, #12]
 8017362:	9302      	str	r3, [sp, #8]
 8017364:	9d01      	ldr	r5, [sp, #4]
 8017366:	ee18 0a10 	vmov	r0, s16
 801736a:	4631      	mov	r1, r6
 801736c:	f7ff f9dc 	bl	8016728 <quorem>
 8017370:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017374:	9b01      	ldr	r3, [sp, #4]
 8017376:	f805 ab01 	strb.w	sl, [r5], #1
 801737a:	1aea      	subs	r2, r5, r3
 801737c:	9b02      	ldr	r3, [sp, #8]
 801737e:	4293      	cmp	r3, r2
 8017380:	dd09      	ble.n	8017396 <_dtoa_r+0xb56>
 8017382:	ee18 1a10 	vmov	r1, s16
 8017386:	2300      	movs	r3, #0
 8017388:	220a      	movs	r2, #10
 801738a:	4620      	mov	r0, r4
 801738c:	f000 fad8 	bl	8017940 <__multadd>
 8017390:	ee08 0a10 	vmov	s16, r0
 8017394:	e7e7      	b.n	8017366 <_dtoa_r+0xb26>
 8017396:	9b02      	ldr	r3, [sp, #8]
 8017398:	2b00      	cmp	r3, #0
 801739a:	bfc8      	it	gt
 801739c:	461d      	movgt	r5, r3
 801739e:	9b01      	ldr	r3, [sp, #4]
 80173a0:	bfd8      	it	le
 80173a2:	2501      	movle	r5, #1
 80173a4:	441d      	add	r5, r3
 80173a6:	f04f 0800 	mov.w	r8, #0
 80173aa:	ee18 1a10 	vmov	r1, s16
 80173ae:	2201      	movs	r2, #1
 80173b0:	4620      	mov	r0, r4
 80173b2:	f000 fc75 	bl	8017ca0 <__lshift>
 80173b6:	4631      	mov	r1, r6
 80173b8:	ee08 0a10 	vmov	s16, r0
 80173bc:	f000 fce0 	bl	8017d80 <__mcmp>
 80173c0:	2800      	cmp	r0, #0
 80173c2:	dc91      	bgt.n	80172e8 <_dtoa_r+0xaa8>
 80173c4:	d102      	bne.n	80173cc <_dtoa_r+0xb8c>
 80173c6:	f01a 0f01 	tst.w	sl, #1
 80173ca:	d18d      	bne.n	80172e8 <_dtoa_r+0xaa8>
 80173cc:	462b      	mov	r3, r5
 80173ce:	461d      	mov	r5, r3
 80173d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80173d4:	2a30      	cmp	r2, #48	; 0x30
 80173d6:	d0fa      	beq.n	80173ce <_dtoa_r+0xb8e>
 80173d8:	e6d7      	b.n	801718a <_dtoa_r+0x94a>
 80173da:	9a01      	ldr	r2, [sp, #4]
 80173dc:	429a      	cmp	r2, r3
 80173de:	d184      	bne.n	80172ea <_dtoa_r+0xaaa>
 80173e0:	9b00      	ldr	r3, [sp, #0]
 80173e2:	3301      	adds	r3, #1
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	2331      	movs	r3, #49	; 0x31
 80173e8:	7013      	strb	r3, [r2, #0]
 80173ea:	e6ce      	b.n	801718a <_dtoa_r+0x94a>
 80173ec:	4b09      	ldr	r3, [pc, #36]	; (8017414 <_dtoa_r+0xbd4>)
 80173ee:	f7ff ba95 	b.w	801691c <_dtoa_r+0xdc>
 80173f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f47f aa6e 	bne.w	80168d6 <_dtoa_r+0x96>
 80173fa:	4b07      	ldr	r3, [pc, #28]	; (8017418 <_dtoa_r+0xbd8>)
 80173fc:	f7ff ba8e 	b.w	801691c <_dtoa_r+0xdc>
 8017400:	9b02      	ldr	r3, [sp, #8]
 8017402:	2b00      	cmp	r3, #0
 8017404:	dcae      	bgt.n	8017364 <_dtoa_r+0xb24>
 8017406:	9b06      	ldr	r3, [sp, #24]
 8017408:	2b02      	cmp	r3, #2
 801740a:	f73f aea8 	bgt.w	801715e <_dtoa_r+0x91e>
 801740e:	e7a9      	b.n	8017364 <_dtoa_r+0xb24>
 8017410:	0801976f 	.word	0x0801976f
 8017414:	080196cc 	.word	0x080196cc
 8017418:	080196f0 	.word	0x080196f0

0801741c <__sflush_r>:
 801741c:	898a      	ldrh	r2, [r1, #12]
 801741e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017422:	4605      	mov	r5, r0
 8017424:	0710      	lsls	r0, r2, #28
 8017426:	460c      	mov	r4, r1
 8017428:	d458      	bmi.n	80174dc <__sflush_r+0xc0>
 801742a:	684b      	ldr	r3, [r1, #4]
 801742c:	2b00      	cmp	r3, #0
 801742e:	dc05      	bgt.n	801743c <__sflush_r+0x20>
 8017430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017432:	2b00      	cmp	r3, #0
 8017434:	dc02      	bgt.n	801743c <__sflush_r+0x20>
 8017436:	2000      	movs	r0, #0
 8017438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801743c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801743e:	2e00      	cmp	r6, #0
 8017440:	d0f9      	beq.n	8017436 <__sflush_r+0x1a>
 8017442:	2300      	movs	r3, #0
 8017444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017448:	682f      	ldr	r7, [r5, #0]
 801744a:	602b      	str	r3, [r5, #0]
 801744c:	d032      	beq.n	80174b4 <__sflush_r+0x98>
 801744e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017450:	89a3      	ldrh	r3, [r4, #12]
 8017452:	075a      	lsls	r2, r3, #29
 8017454:	d505      	bpl.n	8017462 <__sflush_r+0x46>
 8017456:	6863      	ldr	r3, [r4, #4]
 8017458:	1ac0      	subs	r0, r0, r3
 801745a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801745c:	b10b      	cbz	r3, 8017462 <__sflush_r+0x46>
 801745e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017460:	1ac0      	subs	r0, r0, r3
 8017462:	2300      	movs	r3, #0
 8017464:	4602      	mov	r2, r0
 8017466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017468:	6a21      	ldr	r1, [r4, #32]
 801746a:	4628      	mov	r0, r5
 801746c:	47b0      	blx	r6
 801746e:	1c43      	adds	r3, r0, #1
 8017470:	89a3      	ldrh	r3, [r4, #12]
 8017472:	d106      	bne.n	8017482 <__sflush_r+0x66>
 8017474:	6829      	ldr	r1, [r5, #0]
 8017476:	291d      	cmp	r1, #29
 8017478:	d82c      	bhi.n	80174d4 <__sflush_r+0xb8>
 801747a:	4a2a      	ldr	r2, [pc, #168]	; (8017524 <__sflush_r+0x108>)
 801747c:	40ca      	lsrs	r2, r1
 801747e:	07d6      	lsls	r6, r2, #31
 8017480:	d528      	bpl.n	80174d4 <__sflush_r+0xb8>
 8017482:	2200      	movs	r2, #0
 8017484:	6062      	str	r2, [r4, #4]
 8017486:	04d9      	lsls	r1, r3, #19
 8017488:	6922      	ldr	r2, [r4, #16]
 801748a:	6022      	str	r2, [r4, #0]
 801748c:	d504      	bpl.n	8017498 <__sflush_r+0x7c>
 801748e:	1c42      	adds	r2, r0, #1
 8017490:	d101      	bne.n	8017496 <__sflush_r+0x7a>
 8017492:	682b      	ldr	r3, [r5, #0]
 8017494:	b903      	cbnz	r3, 8017498 <__sflush_r+0x7c>
 8017496:	6560      	str	r0, [r4, #84]	; 0x54
 8017498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801749a:	602f      	str	r7, [r5, #0]
 801749c:	2900      	cmp	r1, #0
 801749e:	d0ca      	beq.n	8017436 <__sflush_r+0x1a>
 80174a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174a4:	4299      	cmp	r1, r3
 80174a6:	d002      	beq.n	80174ae <__sflush_r+0x92>
 80174a8:	4628      	mov	r0, r5
 80174aa:	f7fe fa51 	bl	8015950 <_free_r>
 80174ae:	2000      	movs	r0, #0
 80174b0:	6360      	str	r0, [r4, #52]	; 0x34
 80174b2:	e7c1      	b.n	8017438 <__sflush_r+0x1c>
 80174b4:	6a21      	ldr	r1, [r4, #32]
 80174b6:	2301      	movs	r3, #1
 80174b8:	4628      	mov	r0, r5
 80174ba:	47b0      	blx	r6
 80174bc:	1c41      	adds	r1, r0, #1
 80174be:	d1c7      	bne.n	8017450 <__sflush_r+0x34>
 80174c0:	682b      	ldr	r3, [r5, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d0c4      	beq.n	8017450 <__sflush_r+0x34>
 80174c6:	2b1d      	cmp	r3, #29
 80174c8:	d001      	beq.n	80174ce <__sflush_r+0xb2>
 80174ca:	2b16      	cmp	r3, #22
 80174cc:	d101      	bne.n	80174d2 <__sflush_r+0xb6>
 80174ce:	602f      	str	r7, [r5, #0]
 80174d0:	e7b1      	b.n	8017436 <__sflush_r+0x1a>
 80174d2:	89a3      	ldrh	r3, [r4, #12]
 80174d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174d8:	81a3      	strh	r3, [r4, #12]
 80174da:	e7ad      	b.n	8017438 <__sflush_r+0x1c>
 80174dc:	690f      	ldr	r7, [r1, #16]
 80174de:	2f00      	cmp	r7, #0
 80174e0:	d0a9      	beq.n	8017436 <__sflush_r+0x1a>
 80174e2:	0793      	lsls	r3, r2, #30
 80174e4:	680e      	ldr	r6, [r1, #0]
 80174e6:	bf08      	it	eq
 80174e8:	694b      	ldreq	r3, [r1, #20]
 80174ea:	600f      	str	r7, [r1, #0]
 80174ec:	bf18      	it	ne
 80174ee:	2300      	movne	r3, #0
 80174f0:	eba6 0807 	sub.w	r8, r6, r7
 80174f4:	608b      	str	r3, [r1, #8]
 80174f6:	f1b8 0f00 	cmp.w	r8, #0
 80174fa:	dd9c      	ble.n	8017436 <__sflush_r+0x1a>
 80174fc:	6a21      	ldr	r1, [r4, #32]
 80174fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017500:	4643      	mov	r3, r8
 8017502:	463a      	mov	r2, r7
 8017504:	4628      	mov	r0, r5
 8017506:	47b0      	blx	r6
 8017508:	2800      	cmp	r0, #0
 801750a:	dc06      	bgt.n	801751a <__sflush_r+0xfe>
 801750c:	89a3      	ldrh	r3, [r4, #12]
 801750e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017512:	81a3      	strh	r3, [r4, #12]
 8017514:	f04f 30ff 	mov.w	r0, #4294967295
 8017518:	e78e      	b.n	8017438 <__sflush_r+0x1c>
 801751a:	4407      	add	r7, r0
 801751c:	eba8 0800 	sub.w	r8, r8, r0
 8017520:	e7e9      	b.n	80174f6 <__sflush_r+0xda>
 8017522:	bf00      	nop
 8017524:	20400001 	.word	0x20400001

08017528 <_fflush_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	690b      	ldr	r3, [r1, #16]
 801752c:	4605      	mov	r5, r0
 801752e:	460c      	mov	r4, r1
 8017530:	b913      	cbnz	r3, 8017538 <_fflush_r+0x10>
 8017532:	2500      	movs	r5, #0
 8017534:	4628      	mov	r0, r5
 8017536:	bd38      	pop	{r3, r4, r5, pc}
 8017538:	b118      	cbz	r0, 8017542 <_fflush_r+0x1a>
 801753a:	6983      	ldr	r3, [r0, #24]
 801753c:	b90b      	cbnz	r3, 8017542 <_fflush_r+0x1a>
 801753e:	f000 f887 	bl	8017650 <__sinit>
 8017542:	4b14      	ldr	r3, [pc, #80]	; (8017594 <_fflush_r+0x6c>)
 8017544:	429c      	cmp	r4, r3
 8017546:	d11b      	bne.n	8017580 <_fflush_r+0x58>
 8017548:	686c      	ldr	r4, [r5, #4]
 801754a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d0ef      	beq.n	8017532 <_fflush_r+0xa>
 8017552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017554:	07d0      	lsls	r0, r2, #31
 8017556:	d404      	bmi.n	8017562 <_fflush_r+0x3a>
 8017558:	0599      	lsls	r1, r3, #22
 801755a:	d402      	bmi.n	8017562 <_fflush_r+0x3a>
 801755c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801755e:	f000 f91a 	bl	8017796 <__retarget_lock_acquire_recursive>
 8017562:	4628      	mov	r0, r5
 8017564:	4621      	mov	r1, r4
 8017566:	f7ff ff59 	bl	801741c <__sflush_r>
 801756a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801756c:	07da      	lsls	r2, r3, #31
 801756e:	4605      	mov	r5, r0
 8017570:	d4e0      	bmi.n	8017534 <_fflush_r+0xc>
 8017572:	89a3      	ldrh	r3, [r4, #12]
 8017574:	059b      	lsls	r3, r3, #22
 8017576:	d4dd      	bmi.n	8017534 <_fflush_r+0xc>
 8017578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801757a:	f000 f90d 	bl	8017798 <__retarget_lock_release_recursive>
 801757e:	e7d9      	b.n	8017534 <_fflush_r+0xc>
 8017580:	4b05      	ldr	r3, [pc, #20]	; (8017598 <_fflush_r+0x70>)
 8017582:	429c      	cmp	r4, r3
 8017584:	d101      	bne.n	801758a <_fflush_r+0x62>
 8017586:	68ac      	ldr	r4, [r5, #8]
 8017588:	e7df      	b.n	801754a <_fflush_r+0x22>
 801758a:	4b04      	ldr	r3, [pc, #16]	; (801759c <_fflush_r+0x74>)
 801758c:	429c      	cmp	r4, r3
 801758e:	bf08      	it	eq
 8017590:	68ec      	ldreq	r4, [r5, #12]
 8017592:	e7da      	b.n	801754a <_fflush_r+0x22>
 8017594:	080197a0 	.word	0x080197a0
 8017598:	080197c0 	.word	0x080197c0
 801759c:	08019780 	.word	0x08019780

080175a0 <std>:
 80175a0:	2300      	movs	r3, #0
 80175a2:	b510      	push	{r4, lr}
 80175a4:	4604      	mov	r4, r0
 80175a6:	e9c0 3300 	strd	r3, r3, [r0]
 80175aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80175ae:	6083      	str	r3, [r0, #8]
 80175b0:	8181      	strh	r1, [r0, #12]
 80175b2:	6643      	str	r3, [r0, #100]	; 0x64
 80175b4:	81c2      	strh	r2, [r0, #14]
 80175b6:	6183      	str	r3, [r0, #24]
 80175b8:	4619      	mov	r1, r3
 80175ba:	2208      	movs	r2, #8
 80175bc:	305c      	adds	r0, #92	; 0x5c
 80175be:	f7fe f9bf 	bl	8015940 <memset>
 80175c2:	4b05      	ldr	r3, [pc, #20]	; (80175d8 <std+0x38>)
 80175c4:	6263      	str	r3, [r4, #36]	; 0x24
 80175c6:	4b05      	ldr	r3, [pc, #20]	; (80175dc <std+0x3c>)
 80175c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80175ca:	4b05      	ldr	r3, [pc, #20]	; (80175e0 <std+0x40>)
 80175cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80175ce:	4b05      	ldr	r3, [pc, #20]	; (80175e4 <std+0x44>)
 80175d0:	6224      	str	r4, [r4, #32]
 80175d2:	6323      	str	r3, [r4, #48]	; 0x30
 80175d4:	bd10      	pop	{r4, pc}
 80175d6:	bf00      	nop
 80175d8:	08018265 	.word	0x08018265
 80175dc:	08018287 	.word	0x08018287
 80175e0:	080182bf 	.word	0x080182bf
 80175e4:	080182e3 	.word	0x080182e3

080175e8 <_cleanup_r>:
 80175e8:	4901      	ldr	r1, [pc, #4]	; (80175f0 <_cleanup_r+0x8>)
 80175ea:	f000 b8af 	b.w	801774c <_fwalk_reent>
 80175ee:	bf00      	nop
 80175f0:	08017529 	.word	0x08017529

080175f4 <__sfmoreglue>:
 80175f4:	b570      	push	{r4, r5, r6, lr}
 80175f6:	2268      	movs	r2, #104	; 0x68
 80175f8:	1e4d      	subs	r5, r1, #1
 80175fa:	4355      	muls	r5, r2
 80175fc:	460e      	mov	r6, r1
 80175fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017602:	f7fe fa11 	bl	8015a28 <_malloc_r>
 8017606:	4604      	mov	r4, r0
 8017608:	b140      	cbz	r0, 801761c <__sfmoreglue+0x28>
 801760a:	2100      	movs	r1, #0
 801760c:	e9c0 1600 	strd	r1, r6, [r0]
 8017610:	300c      	adds	r0, #12
 8017612:	60a0      	str	r0, [r4, #8]
 8017614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017618:	f7fe f992 	bl	8015940 <memset>
 801761c:	4620      	mov	r0, r4
 801761e:	bd70      	pop	{r4, r5, r6, pc}

08017620 <__sfp_lock_acquire>:
 8017620:	4801      	ldr	r0, [pc, #4]	; (8017628 <__sfp_lock_acquire+0x8>)
 8017622:	f000 b8b8 	b.w	8017796 <__retarget_lock_acquire_recursive>
 8017626:	bf00      	nop
 8017628:	20002971 	.word	0x20002971

0801762c <__sfp_lock_release>:
 801762c:	4801      	ldr	r0, [pc, #4]	; (8017634 <__sfp_lock_release+0x8>)
 801762e:	f000 b8b3 	b.w	8017798 <__retarget_lock_release_recursive>
 8017632:	bf00      	nop
 8017634:	20002971 	.word	0x20002971

08017638 <__sinit_lock_acquire>:
 8017638:	4801      	ldr	r0, [pc, #4]	; (8017640 <__sinit_lock_acquire+0x8>)
 801763a:	f000 b8ac 	b.w	8017796 <__retarget_lock_acquire_recursive>
 801763e:	bf00      	nop
 8017640:	20002972 	.word	0x20002972

08017644 <__sinit_lock_release>:
 8017644:	4801      	ldr	r0, [pc, #4]	; (801764c <__sinit_lock_release+0x8>)
 8017646:	f000 b8a7 	b.w	8017798 <__retarget_lock_release_recursive>
 801764a:	bf00      	nop
 801764c:	20002972 	.word	0x20002972

08017650 <__sinit>:
 8017650:	b510      	push	{r4, lr}
 8017652:	4604      	mov	r4, r0
 8017654:	f7ff fff0 	bl	8017638 <__sinit_lock_acquire>
 8017658:	69a3      	ldr	r3, [r4, #24]
 801765a:	b11b      	cbz	r3, 8017664 <__sinit+0x14>
 801765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017660:	f7ff bff0 	b.w	8017644 <__sinit_lock_release>
 8017664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017668:	6523      	str	r3, [r4, #80]	; 0x50
 801766a:	4b13      	ldr	r3, [pc, #76]	; (80176b8 <__sinit+0x68>)
 801766c:	4a13      	ldr	r2, [pc, #76]	; (80176bc <__sinit+0x6c>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	62a2      	str	r2, [r4, #40]	; 0x28
 8017672:	42a3      	cmp	r3, r4
 8017674:	bf04      	itt	eq
 8017676:	2301      	moveq	r3, #1
 8017678:	61a3      	streq	r3, [r4, #24]
 801767a:	4620      	mov	r0, r4
 801767c:	f000 f820 	bl	80176c0 <__sfp>
 8017680:	6060      	str	r0, [r4, #4]
 8017682:	4620      	mov	r0, r4
 8017684:	f000 f81c 	bl	80176c0 <__sfp>
 8017688:	60a0      	str	r0, [r4, #8]
 801768a:	4620      	mov	r0, r4
 801768c:	f000 f818 	bl	80176c0 <__sfp>
 8017690:	2200      	movs	r2, #0
 8017692:	60e0      	str	r0, [r4, #12]
 8017694:	2104      	movs	r1, #4
 8017696:	6860      	ldr	r0, [r4, #4]
 8017698:	f7ff ff82 	bl	80175a0 <std>
 801769c:	68a0      	ldr	r0, [r4, #8]
 801769e:	2201      	movs	r2, #1
 80176a0:	2109      	movs	r1, #9
 80176a2:	f7ff ff7d 	bl	80175a0 <std>
 80176a6:	68e0      	ldr	r0, [r4, #12]
 80176a8:	2202      	movs	r2, #2
 80176aa:	2112      	movs	r1, #18
 80176ac:	f7ff ff78 	bl	80175a0 <std>
 80176b0:	2301      	movs	r3, #1
 80176b2:	61a3      	str	r3, [r4, #24]
 80176b4:	e7d2      	b.n	801765c <__sinit+0xc>
 80176b6:	bf00      	nop
 80176b8:	080196b8 	.word	0x080196b8
 80176bc:	080175e9 	.word	0x080175e9

080176c0 <__sfp>:
 80176c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176c2:	4607      	mov	r7, r0
 80176c4:	f7ff ffac 	bl	8017620 <__sfp_lock_acquire>
 80176c8:	4b1e      	ldr	r3, [pc, #120]	; (8017744 <__sfp+0x84>)
 80176ca:	681e      	ldr	r6, [r3, #0]
 80176cc:	69b3      	ldr	r3, [r6, #24]
 80176ce:	b913      	cbnz	r3, 80176d6 <__sfp+0x16>
 80176d0:	4630      	mov	r0, r6
 80176d2:	f7ff ffbd 	bl	8017650 <__sinit>
 80176d6:	3648      	adds	r6, #72	; 0x48
 80176d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80176dc:	3b01      	subs	r3, #1
 80176de:	d503      	bpl.n	80176e8 <__sfp+0x28>
 80176e0:	6833      	ldr	r3, [r6, #0]
 80176e2:	b30b      	cbz	r3, 8017728 <__sfp+0x68>
 80176e4:	6836      	ldr	r6, [r6, #0]
 80176e6:	e7f7      	b.n	80176d8 <__sfp+0x18>
 80176e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80176ec:	b9d5      	cbnz	r5, 8017724 <__sfp+0x64>
 80176ee:	4b16      	ldr	r3, [pc, #88]	; (8017748 <__sfp+0x88>)
 80176f0:	60e3      	str	r3, [r4, #12]
 80176f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80176f6:	6665      	str	r5, [r4, #100]	; 0x64
 80176f8:	f000 f84c 	bl	8017794 <__retarget_lock_init_recursive>
 80176fc:	f7ff ff96 	bl	801762c <__sfp_lock_release>
 8017700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017708:	6025      	str	r5, [r4, #0]
 801770a:	61a5      	str	r5, [r4, #24]
 801770c:	2208      	movs	r2, #8
 801770e:	4629      	mov	r1, r5
 8017710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017714:	f7fe f914 	bl	8015940 <memset>
 8017718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801771c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017720:	4620      	mov	r0, r4
 8017722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017724:	3468      	adds	r4, #104	; 0x68
 8017726:	e7d9      	b.n	80176dc <__sfp+0x1c>
 8017728:	2104      	movs	r1, #4
 801772a:	4638      	mov	r0, r7
 801772c:	f7ff ff62 	bl	80175f4 <__sfmoreglue>
 8017730:	4604      	mov	r4, r0
 8017732:	6030      	str	r0, [r6, #0]
 8017734:	2800      	cmp	r0, #0
 8017736:	d1d5      	bne.n	80176e4 <__sfp+0x24>
 8017738:	f7ff ff78 	bl	801762c <__sfp_lock_release>
 801773c:	230c      	movs	r3, #12
 801773e:	603b      	str	r3, [r7, #0]
 8017740:	e7ee      	b.n	8017720 <__sfp+0x60>
 8017742:	bf00      	nop
 8017744:	080196b8 	.word	0x080196b8
 8017748:	ffff0001 	.word	0xffff0001

0801774c <_fwalk_reent>:
 801774c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017750:	4606      	mov	r6, r0
 8017752:	4688      	mov	r8, r1
 8017754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017758:	2700      	movs	r7, #0
 801775a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801775e:	f1b9 0901 	subs.w	r9, r9, #1
 8017762:	d505      	bpl.n	8017770 <_fwalk_reent+0x24>
 8017764:	6824      	ldr	r4, [r4, #0]
 8017766:	2c00      	cmp	r4, #0
 8017768:	d1f7      	bne.n	801775a <_fwalk_reent+0xe>
 801776a:	4638      	mov	r0, r7
 801776c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017770:	89ab      	ldrh	r3, [r5, #12]
 8017772:	2b01      	cmp	r3, #1
 8017774:	d907      	bls.n	8017786 <_fwalk_reent+0x3a>
 8017776:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801777a:	3301      	adds	r3, #1
 801777c:	d003      	beq.n	8017786 <_fwalk_reent+0x3a>
 801777e:	4629      	mov	r1, r5
 8017780:	4630      	mov	r0, r6
 8017782:	47c0      	blx	r8
 8017784:	4307      	orrs	r7, r0
 8017786:	3568      	adds	r5, #104	; 0x68
 8017788:	e7e9      	b.n	801775e <_fwalk_reent+0x12>
	...

0801778c <_localeconv_r>:
 801778c:	4800      	ldr	r0, [pc, #0]	; (8017790 <_localeconv_r+0x4>)
 801778e:	4770      	bx	lr
 8017790:	200002d8 	.word	0x200002d8

08017794 <__retarget_lock_init_recursive>:
 8017794:	4770      	bx	lr

08017796 <__retarget_lock_acquire_recursive>:
 8017796:	4770      	bx	lr

08017798 <__retarget_lock_release_recursive>:
 8017798:	4770      	bx	lr

0801779a <__swhatbuf_r>:
 801779a:	b570      	push	{r4, r5, r6, lr}
 801779c:	460e      	mov	r6, r1
 801779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177a2:	2900      	cmp	r1, #0
 80177a4:	b096      	sub	sp, #88	; 0x58
 80177a6:	4614      	mov	r4, r2
 80177a8:	461d      	mov	r5, r3
 80177aa:	da08      	bge.n	80177be <__swhatbuf_r+0x24>
 80177ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80177b0:	2200      	movs	r2, #0
 80177b2:	602a      	str	r2, [r5, #0]
 80177b4:	061a      	lsls	r2, r3, #24
 80177b6:	d410      	bmi.n	80177da <__swhatbuf_r+0x40>
 80177b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177bc:	e00e      	b.n	80177dc <__swhatbuf_r+0x42>
 80177be:	466a      	mov	r2, sp
 80177c0:	f000 fde6 	bl	8018390 <_fstat_r>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	dbf1      	blt.n	80177ac <__swhatbuf_r+0x12>
 80177c8:	9a01      	ldr	r2, [sp, #4]
 80177ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80177ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80177d2:	425a      	negs	r2, r3
 80177d4:	415a      	adcs	r2, r3
 80177d6:	602a      	str	r2, [r5, #0]
 80177d8:	e7ee      	b.n	80177b8 <__swhatbuf_r+0x1e>
 80177da:	2340      	movs	r3, #64	; 0x40
 80177dc:	2000      	movs	r0, #0
 80177de:	6023      	str	r3, [r4, #0]
 80177e0:	b016      	add	sp, #88	; 0x58
 80177e2:	bd70      	pop	{r4, r5, r6, pc}

080177e4 <__smakebuf_r>:
 80177e4:	898b      	ldrh	r3, [r1, #12]
 80177e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80177e8:	079d      	lsls	r5, r3, #30
 80177ea:	4606      	mov	r6, r0
 80177ec:	460c      	mov	r4, r1
 80177ee:	d507      	bpl.n	8017800 <__smakebuf_r+0x1c>
 80177f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80177f4:	6023      	str	r3, [r4, #0]
 80177f6:	6123      	str	r3, [r4, #16]
 80177f8:	2301      	movs	r3, #1
 80177fa:	6163      	str	r3, [r4, #20]
 80177fc:	b002      	add	sp, #8
 80177fe:	bd70      	pop	{r4, r5, r6, pc}
 8017800:	ab01      	add	r3, sp, #4
 8017802:	466a      	mov	r2, sp
 8017804:	f7ff ffc9 	bl	801779a <__swhatbuf_r>
 8017808:	9900      	ldr	r1, [sp, #0]
 801780a:	4605      	mov	r5, r0
 801780c:	4630      	mov	r0, r6
 801780e:	f7fe f90b 	bl	8015a28 <_malloc_r>
 8017812:	b948      	cbnz	r0, 8017828 <__smakebuf_r+0x44>
 8017814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017818:	059a      	lsls	r2, r3, #22
 801781a:	d4ef      	bmi.n	80177fc <__smakebuf_r+0x18>
 801781c:	f023 0303 	bic.w	r3, r3, #3
 8017820:	f043 0302 	orr.w	r3, r3, #2
 8017824:	81a3      	strh	r3, [r4, #12]
 8017826:	e7e3      	b.n	80177f0 <__smakebuf_r+0xc>
 8017828:	4b0d      	ldr	r3, [pc, #52]	; (8017860 <__smakebuf_r+0x7c>)
 801782a:	62b3      	str	r3, [r6, #40]	; 0x28
 801782c:	89a3      	ldrh	r3, [r4, #12]
 801782e:	6020      	str	r0, [r4, #0]
 8017830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017834:	81a3      	strh	r3, [r4, #12]
 8017836:	9b00      	ldr	r3, [sp, #0]
 8017838:	6163      	str	r3, [r4, #20]
 801783a:	9b01      	ldr	r3, [sp, #4]
 801783c:	6120      	str	r0, [r4, #16]
 801783e:	b15b      	cbz	r3, 8017858 <__smakebuf_r+0x74>
 8017840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017844:	4630      	mov	r0, r6
 8017846:	f000 fdb5 	bl	80183b4 <_isatty_r>
 801784a:	b128      	cbz	r0, 8017858 <__smakebuf_r+0x74>
 801784c:	89a3      	ldrh	r3, [r4, #12]
 801784e:	f023 0303 	bic.w	r3, r3, #3
 8017852:	f043 0301 	orr.w	r3, r3, #1
 8017856:	81a3      	strh	r3, [r4, #12]
 8017858:	89a0      	ldrh	r0, [r4, #12]
 801785a:	4305      	orrs	r5, r0
 801785c:	81a5      	strh	r5, [r4, #12]
 801785e:	e7cd      	b.n	80177fc <__smakebuf_r+0x18>
 8017860:	080175e9 	.word	0x080175e9

08017864 <__malloc_lock>:
 8017864:	4801      	ldr	r0, [pc, #4]	; (801786c <__malloc_lock+0x8>)
 8017866:	f7ff bf96 	b.w	8017796 <__retarget_lock_acquire_recursive>
 801786a:	bf00      	nop
 801786c:	20002970 	.word	0x20002970

08017870 <__malloc_unlock>:
 8017870:	4801      	ldr	r0, [pc, #4]	; (8017878 <__malloc_unlock+0x8>)
 8017872:	f7ff bf91 	b.w	8017798 <__retarget_lock_release_recursive>
 8017876:	bf00      	nop
 8017878:	20002970 	.word	0x20002970

0801787c <_Balloc>:
 801787c:	b570      	push	{r4, r5, r6, lr}
 801787e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017880:	4604      	mov	r4, r0
 8017882:	460d      	mov	r5, r1
 8017884:	b976      	cbnz	r6, 80178a4 <_Balloc+0x28>
 8017886:	2010      	movs	r0, #16
 8017888:	f7fe f834 	bl	80158f4 <malloc>
 801788c:	4602      	mov	r2, r0
 801788e:	6260      	str	r0, [r4, #36]	; 0x24
 8017890:	b920      	cbnz	r0, 801789c <_Balloc+0x20>
 8017892:	4b18      	ldr	r3, [pc, #96]	; (80178f4 <_Balloc+0x78>)
 8017894:	4818      	ldr	r0, [pc, #96]	; (80178f8 <_Balloc+0x7c>)
 8017896:	2166      	movs	r1, #102	; 0x66
 8017898:	f000 fd3a 	bl	8018310 <__assert_func>
 801789c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80178a0:	6006      	str	r6, [r0, #0]
 80178a2:	60c6      	str	r6, [r0, #12]
 80178a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80178a6:	68f3      	ldr	r3, [r6, #12]
 80178a8:	b183      	cbz	r3, 80178cc <_Balloc+0x50>
 80178aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178ac:	68db      	ldr	r3, [r3, #12]
 80178ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80178b2:	b9b8      	cbnz	r0, 80178e4 <_Balloc+0x68>
 80178b4:	2101      	movs	r1, #1
 80178b6:	fa01 f605 	lsl.w	r6, r1, r5
 80178ba:	1d72      	adds	r2, r6, #5
 80178bc:	0092      	lsls	r2, r2, #2
 80178be:	4620      	mov	r0, r4
 80178c0:	f000 fb60 	bl	8017f84 <_calloc_r>
 80178c4:	b160      	cbz	r0, 80178e0 <_Balloc+0x64>
 80178c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80178ca:	e00e      	b.n	80178ea <_Balloc+0x6e>
 80178cc:	2221      	movs	r2, #33	; 0x21
 80178ce:	2104      	movs	r1, #4
 80178d0:	4620      	mov	r0, r4
 80178d2:	f000 fb57 	bl	8017f84 <_calloc_r>
 80178d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178d8:	60f0      	str	r0, [r6, #12]
 80178da:	68db      	ldr	r3, [r3, #12]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d1e4      	bne.n	80178aa <_Balloc+0x2e>
 80178e0:	2000      	movs	r0, #0
 80178e2:	bd70      	pop	{r4, r5, r6, pc}
 80178e4:	6802      	ldr	r2, [r0, #0]
 80178e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80178ea:	2300      	movs	r3, #0
 80178ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80178f0:	e7f7      	b.n	80178e2 <_Balloc+0x66>
 80178f2:	bf00      	nop
 80178f4:	080196fd 	.word	0x080196fd
 80178f8:	080197e0 	.word	0x080197e0

080178fc <_Bfree>:
 80178fc:	b570      	push	{r4, r5, r6, lr}
 80178fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017900:	4605      	mov	r5, r0
 8017902:	460c      	mov	r4, r1
 8017904:	b976      	cbnz	r6, 8017924 <_Bfree+0x28>
 8017906:	2010      	movs	r0, #16
 8017908:	f7fd fff4 	bl	80158f4 <malloc>
 801790c:	4602      	mov	r2, r0
 801790e:	6268      	str	r0, [r5, #36]	; 0x24
 8017910:	b920      	cbnz	r0, 801791c <_Bfree+0x20>
 8017912:	4b09      	ldr	r3, [pc, #36]	; (8017938 <_Bfree+0x3c>)
 8017914:	4809      	ldr	r0, [pc, #36]	; (801793c <_Bfree+0x40>)
 8017916:	218a      	movs	r1, #138	; 0x8a
 8017918:	f000 fcfa 	bl	8018310 <__assert_func>
 801791c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017920:	6006      	str	r6, [r0, #0]
 8017922:	60c6      	str	r6, [r0, #12]
 8017924:	b13c      	cbz	r4, 8017936 <_Bfree+0x3a>
 8017926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017928:	6862      	ldr	r2, [r4, #4]
 801792a:	68db      	ldr	r3, [r3, #12]
 801792c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017930:	6021      	str	r1, [r4, #0]
 8017932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017936:	bd70      	pop	{r4, r5, r6, pc}
 8017938:	080196fd 	.word	0x080196fd
 801793c:	080197e0 	.word	0x080197e0

08017940 <__multadd>:
 8017940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017944:	690d      	ldr	r5, [r1, #16]
 8017946:	4607      	mov	r7, r0
 8017948:	460c      	mov	r4, r1
 801794a:	461e      	mov	r6, r3
 801794c:	f101 0c14 	add.w	ip, r1, #20
 8017950:	2000      	movs	r0, #0
 8017952:	f8dc 3000 	ldr.w	r3, [ip]
 8017956:	b299      	uxth	r1, r3
 8017958:	fb02 6101 	mla	r1, r2, r1, r6
 801795c:	0c1e      	lsrs	r6, r3, #16
 801795e:	0c0b      	lsrs	r3, r1, #16
 8017960:	fb02 3306 	mla	r3, r2, r6, r3
 8017964:	b289      	uxth	r1, r1
 8017966:	3001      	adds	r0, #1
 8017968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801796c:	4285      	cmp	r5, r0
 801796e:	f84c 1b04 	str.w	r1, [ip], #4
 8017972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017976:	dcec      	bgt.n	8017952 <__multadd+0x12>
 8017978:	b30e      	cbz	r6, 80179be <__multadd+0x7e>
 801797a:	68a3      	ldr	r3, [r4, #8]
 801797c:	42ab      	cmp	r3, r5
 801797e:	dc19      	bgt.n	80179b4 <__multadd+0x74>
 8017980:	6861      	ldr	r1, [r4, #4]
 8017982:	4638      	mov	r0, r7
 8017984:	3101      	adds	r1, #1
 8017986:	f7ff ff79 	bl	801787c <_Balloc>
 801798a:	4680      	mov	r8, r0
 801798c:	b928      	cbnz	r0, 801799a <__multadd+0x5a>
 801798e:	4602      	mov	r2, r0
 8017990:	4b0c      	ldr	r3, [pc, #48]	; (80179c4 <__multadd+0x84>)
 8017992:	480d      	ldr	r0, [pc, #52]	; (80179c8 <__multadd+0x88>)
 8017994:	21b5      	movs	r1, #181	; 0xb5
 8017996:	f000 fcbb 	bl	8018310 <__assert_func>
 801799a:	6922      	ldr	r2, [r4, #16]
 801799c:	3202      	adds	r2, #2
 801799e:	f104 010c 	add.w	r1, r4, #12
 80179a2:	0092      	lsls	r2, r2, #2
 80179a4:	300c      	adds	r0, #12
 80179a6:	f7fd ffbd 	bl	8015924 <memcpy>
 80179aa:	4621      	mov	r1, r4
 80179ac:	4638      	mov	r0, r7
 80179ae:	f7ff ffa5 	bl	80178fc <_Bfree>
 80179b2:	4644      	mov	r4, r8
 80179b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80179b8:	3501      	adds	r5, #1
 80179ba:	615e      	str	r6, [r3, #20]
 80179bc:	6125      	str	r5, [r4, #16]
 80179be:	4620      	mov	r0, r4
 80179c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c4:	0801976f 	.word	0x0801976f
 80179c8:	080197e0 	.word	0x080197e0

080179cc <__hi0bits>:
 80179cc:	0c03      	lsrs	r3, r0, #16
 80179ce:	041b      	lsls	r3, r3, #16
 80179d0:	b9d3      	cbnz	r3, 8017a08 <__hi0bits+0x3c>
 80179d2:	0400      	lsls	r0, r0, #16
 80179d4:	2310      	movs	r3, #16
 80179d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80179da:	bf04      	itt	eq
 80179dc:	0200      	lsleq	r0, r0, #8
 80179de:	3308      	addeq	r3, #8
 80179e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80179e4:	bf04      	itt	eq
 80179e6:	0100      	lsleq	r0, r0, #4
 80179e8:	3304      	addeq	r3, #4
 80179ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80179ee:	bf04      	itt	eq
 80179f0:	0080      	lsleq	r0, r0, #2
 80179f2:	3302      	addeq	r3, #2
 80179f4:	2800      	cmp	r0, #0
 80179f6:	db05      	blt.n	8017a04 <__hi0bits+0x38>
 80179f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80179fc:	f103 0301 	add.w	r3, r3, #1
 8017a00:	bf08      	it	eq
 8017a02:	2320      	moveq	r3, #32
 8017a04:	4618      	mov	r0, r3
 8017a06:	4770      	bx	lr
 8017a08:	2300      	movs	r3, #0
 8017a0a:	e7e4      	b.n	80179d6 <__hi0bits+0xa>

08017a0c <__lo0bits>:
 8017a0c:	6803      	ldr	r3, [r0, #0]
 8017a0e:	f013 0207 	ands.w	r2, r3, #7
 8017a12:	4601      	mov	r1, r0
 8017a14:	d00b      	beq.n	8017a2e <__lo0bits+0x22>
 8017a16:	07da      	lsls	r2, r3, #31
 8017a18:	d423      	bmi.n	8017a62 <__lo0bits+0x56>
 8017a1a:	0798      	lsls	r0, r3, #30
 8017a1c:	bf49      	itett	mi
 8017a1e:	085b      	lsrmi	r3, r3, #1
 8017a20:	089b      	lsrpl	r3, r3, #2
 8017a22:	2001      	movmi	r0, #1
 8017a24:	600b      	strmi	r3, [r1, #0]
 8017a26:	bf5c      	itt	pl
 8017a28:	600b      	strpl	r3, [r1, #0]
 8017a2a:	2002      	movpl	r0, #2
 8017a2c:	4770      	bx	lr
 8017a2e:	b298      	uxth	r0, r3
 8017a30:	b9a8      	cbnz	r0, 8017a5e <__lo0bits+0x52>
 8017a32:	0c1b      	lsrs	r3, r3, #16
 8017a34:	2010      	movs	r0, #16
 8017a36:	b2da      	uxtb	r2, r3
 8017a38:	b90a      	cbnz	r2, 8017a3e <__lo0bits+0x32>
 8017a3a:	3008      	adds	r0, #8
 8017a3c:	0a1b      	lsrs	r3, r3, #8
 8017a3e:	071a      	lsls	r2, r3, #28
 8017a40:	bf04      	itt	eq
 8017a42:	091b      	lsreq	r3, r3, #4
 8017a44:	3004      	addeq	r0, #4
 8017a46:	079a      	lsls	r2, r3, #30
 8017a48:	bf04      	itt	eq
 8017a4a:	089b      	lsreq	r3, r3, #2
 8017a4c:	3002      	addeq	r0, #2
 8017a4e:	07da      	lsls	r2, r3, #31
 8017a50:	d403      	bmi.n	8017a5a <__lo0bits+0x4e>
 8017a52:	085b      	lsrs	r3, r3, #1
 8017a54:	f100 0001 	add.w	r0, r0, #1
 8017a58:	d005      	beq.n	8017a66 <__lo0bits+0x5a>
 8017a5a:	600b      	str	r3, [r1, #0]
 8017a5c:	4770      	bx	lr
 8017a5e:	4610      	mov	r0, r2
 8017a60:	e7e9      	b.n	8017a36 <__lo0bits+0x2a>
 8017a62:	2000      	movs	r0, #0
 8017a64:	4770      	bx	lr
 8017a66:	2020      	movs	r0, #32
 8017a68:	4770      	bx	lr
	...

08017a6c <__i2b>:
 8017a6c:	b510      	push	{r4, lr}
 8017a6e:	460c      	mov	r4, r1
 8017a70:	2101      	movs	r1, #1
 8017a72:	f7ff ff03 	bl	801787c <_Balloc>
 8017a76:	4602      	mov	r2, r0
 8017a78:	b928      	cbnz	r0, 8017a86 <__i2b+0x1a>
 8017a7a:	4b05      	ldr	r3, [pc, #20]	; (8017a90 <__i2b+0x24>)
 8017a7c:	4805      	ldr	r0, [pc, #20]	; (8017a94 <__i2b+0x28>)
 8017a7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017a82:	f000 fc45 	bl	8018310 <__assert_func>
 8017a86:	2301      	movs	r3, #1
 8017a88:	6144      	str	r4, [r0, #20]
 8017a8a:	6103      	str	r3, [r0, #16]
 8017a8c:	bd10      	pop	{r4, pc}
 8017a8e:	bf00      	nop
 8017a90:	0801976f 	.word	0x0801976f
 8017a94:	080197e0 	.word	0x080197e0

08017a98 <__multiply>:
 8017a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a9c:	4691      	mov	r9, r2
 8017a9e:	690a      	ldr	r2, [r1, #16]
 8017aa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	bfb8      	it	lt
 8017aa8:	460b      	movlt	r3, r1
 8017aaa:	460c      	mov	r4, r1
 8017aac:	bfbc      	itt	lt
 8017aae:	464c      	movlt	r4, r9
 8017ab0:	4699      	movlt	r9, r3
 8017ab2:	6927      	ldr	r7, [r4, #16]
 8017ab4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017ab8:	68a3      	ldr	r3, [r4, #8]
 8017aba:	6861      	ldr	r1, [r4, #4]
 8017abc:	eb07 060a 	add.w	r6, r7, sl
 8017ac0:	42b3      	cmp	r3, r6
 8017ac2:	b085      	sub	sp, #20
 8017ac4:	bfb8      	it	lt
 8017ac6:	3101      	addlt	r1, #1
 8017ac8:	f7ff fed8 	bl	801787c <_Balloc>
 8017acc:	b930      	cbnz	r0, 8017adc <__multiply+0x44>
 8017ace:	4602      	mov	r2, r0
 8017ad0:	4b44      	ldr	r3, [pc, #272]	; (8017be4 <__multiply+0x14c>)
 8017ad2:	4845      	ldr	r0, [pc, #276]	; (8017be8 <__multiply+0x150>)
 8017ad4:	f240 115d 	movw	r1, #349	; 0x15d
 8017ad8:	f000 fc1a 	bl	8018310 <__assert_func>
 8017adc:	f100 0514 	add.w	r5, r0, #20
 8017ae0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017ae4:	462b      	mov	r3, r5
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	4543      	cmp	r3, r8
 8017aea:	d321      	bcc.n	8017b30 <__multiply+0x98>
 8017aec:	f104 0314 	add.w	r3, r4, #20
 8017af0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017af4:	f109 0314 	add.w	r3, r9, #20
 8017af8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017afc:	9202      	str	r2, [sp, #8]
 8017afe:	1b3a      	subs	r2, r7, r4
 8017b00:	3a15      	subs	r2, #21
 8017b02:	f022 0203 	bic.w	r2, r2, #3
 8017b06:	3204      	adds	r2, #4
 8017b08:	f104 0115 	add.w	r1, r4, #21
 8017b0c:	428f      	cmp	r7, r1
 8017b0e:	bf38      	it	cc
 8017b10:	2204      	movcc	r2, #4
 8017b12:	9201      	str	r2, [sp, #4]
 8017b14:	9a02      	ldr	r2, [sp, #8]
 8017b16:	9303      	str	r3, [sp, #12]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d80c      	bhi.n	8017b36 <__multiply+0x9e>
 8017b1c:	2e00      	cmp	r6, #0
 8017b1e:	dd03      	ble.n	8017b28 <__multiply+0x90>
 8017b20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d05a      	beq.n	8017bde <__multiply+0x146>
 8017b28:	6106      	str	r6, [r0, #16]
 8017b2a:	b005      	add	sp, #20
 8017b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b30:	f843 2b04 	str.w	r2, [r3], #4
 8017b34:	e7d8      	b.n	8017ae8 <__multiply+0x50>
 8017b36:	f8b3 a000 	ldrh.w	sl, [r3]
 8017b3a:	f1ba 0f00 	cmp.w	sl, #0
 8017b3e:	d024      	beq.n	8017b8a <__multiply+0xf2>
 8017b40:	f104 0e14 	add.w	lr, r4, #20
 8017b44:	46a9      	mov	r9, r5
 8017b46:	f04f 0c00 	mov.w	ip, #0
 8017b4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017b4e:	f8d9 1000 	ldr.w	r1, [r9]
 8017b52:	fa1f fb82 	uxth.w	fp, r2
 8017b56:	b289      	uxth	r1, r1
 8017b58:	fb0a 110b 	mla	r1, sl, fp, r1
 8017b5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017b60:	f8d9 2000 	ldr.w	r2, [r9]
 8017b64:	4461      	add	r1, ip
 8017b66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017b6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8017b6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017b72:	b289      	uxth	r1, r1
 8017b74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017b78:	4577      	cmp	r7, lr
 8017b7a:	f849 1b04 	str.w	r1, [r9], #4
 8017b7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017b82:	d8e2      	bhi.n	8017b4a <__multiply+0xb2>
 8017b84:	9a01      	ldr	r2, [sp, #4]
 8017b86:	f845 c002 	str.w	ip, [r5, r2]
 8017b8a:	9a03      	ldr	r2, [sp, #12]
 8017b8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017b90:	3304      	adds	r3, #4
 8017b92:	f1b9 0f00 	cmp.w	r9, #0
 8017b96:	d020      	beq.n	8017bda <__multiply+0x142>
 8017b98:	6829      	ldr	r1, [r5, #0]
 8017b9a:	f104 0c14 	add.w	ip, r4, #20
 8017b9e:	46ae      	mov	lr, r5
 8017ba0:	f04f 0a00 	mov.w	sl, #0
 8017ba4:	f8bc b000 	ldrh.w	fp, [ip]
 8017ba8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017bac:	fb09 220b 	mla	r2, r9, fp, r2
 8017bb0:	4492      	add	sl, r2
 8017bb2:	b289      	uxth	r1, r1
 8017bb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017bb8:	f84e 1b04 	str.w	r1, [lr], #4
 8017bbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017bc0:	f8be 1000 	ldrh.w	r1, [lr]
 8017bc4:	0c12      	lsrs	r2, r2, #16
 8017bc6:	fb09 1102 	mla	r1, r9, r2, r1
 8017bca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017bce:	4567      	cmp	r7, ip
 8017bd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017bd4:	d8e6      	bhi.n	8017ba4 <__multiply+0x10c>
 8017bd6:	9a01      	ldr	r2, [sp, #4]
 8017bd8:	50a9      	str	r1, [r5, r2]
 8017bda:	3504      	adds	r5, #4
 8017bdc:	e79a      	b.n	8017b14 <__multiply+0x7c>
 8017bde:	3e01      	subs	r6, #1
 8017be0:	e79c      	b.n	8017b1c <__multiply+0x84>
 8017be2:	bf00      	nop
 8017be4:	0801976f 	.word	0x0801976f
 8017be8:	080197e0 	.word	0x080197e0

08017bec <__pow5mult>:
 8017bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bf0:	4615      	mov	r5, r2
 8017bf2:	f012 0203 	ands.w	r2, r2, #3
 8017bf6:	4606      	mov	r6, r0
 8017bf8:	460f      	mov	r7, r1
 8017bfa:	d007      	beq.n	8017c0c <__pow5mult+0x20>
 8017bfc:	4c25      	ldr	r4, [pc, #148]	; (8017c94 <__pow5mult+0xa8>)
 8017bfe:	3a01      	subs	r2, #1
 8017c00:	2300      	movs	r3, #0
 8017c02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017c06:	f7ff fe9b 	bl	8017940 <__multadd>
 8017c0a:	4607      	mov	r7, r0
 8017c0c:	10ad      	asrs	r5, r5, #2
 8017c0e:	d03d      	beq.n	8017c8c <__pow5mult+0xa0>
 8017c10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017c12:	b97c      	cbnz	r4, 8017c34 <__pow5mult+0x48>
 8017c14:	2010      	movs	r0, #16
 8017c16:	f7fd fe6d 	bl	80158f4 <malloc>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	6270      	str	r0, [r6, #36]	; 0x24
 8017c1e:	b928      	cbnz	r0, 8017c2c <__pow5mult+0x40>
 8017c20:	4b1d      	ldr	r3, [pc, #116]	; (8017c98 <__pow5mult+0xac>)
 8017c22:	481e      	ldr	r0, [pc, #120]	; (8017c9c <__pow5mult+0xb0>)
 8017c24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017c28:	f000 fb72 	bl	8018310 <__assert_func>
 8017c2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c30:	6004      	str	r4, [r0, #0]
 8017c32:	60c4      	str	r4, [r0, #12]
 8017c34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017c38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017c3c:	b94c      	cbnz	r4, 8017c52 <__pow5mult+0x66>
 8017c3e:	f240 2171 	movw	r1, #625	; 0x271
 8017c42:	4630      	mov	r0, r6
 8017c44:	f7ff ff12 	bl	8017a6c <__i2b>
 8017c48:	2300      	movs	r3, #0
 8017c4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c4e:	4604      	mov	r4, r0
 8017c50:	6003      	str	r3, [r0, #0]
 8017c52:	f04f 0900 	mov.w	r9, #0
 8017c56:	07eb      	lsls	r3, r5, #31
 8017c58:	d50a      	bpl.n	8017c70 <__pow5mult+0x84>
 8017c5a:	4639      	mov	r1, r7
 8017c5c:	4622      	mov	r2, r4
 8017c5e:	4630      	mov	r0, r6
 8017c60:	f7ff ff1a 	bl	8017a98 <__multiply>
 8017c64:	4639      	mov	r1, r7
 8017c66:	4680      	mov	r8, r0
 8017c68:	4630      	mov	r0, r6
 8017c6a:	f7ff fe47 	bl	80178fc <_Bfree>
 8017c6e:	4647      	mov	r7, r8
 8017c70:	106d      	asrs	r5, r5, #1
 8017c72:	d00b      	beq.n	8017c8c <__pow5mult+0xa0>
 8017c74:	6820      	ldr	r0, [r4, #0]
 8017c76:	b938      	cbnz	r0, 8017c88 <__pow5mult+0x9c>
 8017c78:	4622      	mov	r2, r4
 8017c7a:	4621      	mov	r1, r4
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	f7ff ff0b 	bl	8017a98 <__multiply>
 8017c82:	6020      	str	r0, [r4, #0]
 8017c84:	f8c0 9000 	str.w	r9, [r0]
 8017c88:	4604      	mov	r4, r0
 8017c8a:	e7e4      	b.n	8017c56 <__pow5mult+0x6a>
 8017c8c:	4638      	mov	r0, r7
 8017c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c92:	bf00      	nop
 8017c94:	08019930 	.word	0x08019930
 8017c98:	080196fd 	.word	0x080196fd
 8017c9c:	080197e0 	.word	0x080197e0

08017ca0 <__lshift>:
 8017ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca4:	460c      	mov	r4, r1
 8017ca6:	6849      	ldr	r1, [r1, #4]
 8017ca8:	6923      	ldr	r3, [r4, #16]
 8017caa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017cae:	68a3      	ldr	r3, [r4, #8]
 8017cb0:	4607      	mov	r7, r0
 8017cb2:	4691      	mov	r9, r2
 8017cb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017cb8:	f108 0601 	add.w	r6, r8, #1
 8017cbc:	42b3      	cmp	r3, r6
 8017cbe:	db0b      	blt.n	8017cd8 <__lshift+0x38>
 8017cc0:	4638      	mov	r0, r7
 8017cc2:	f7ff fddb 	bl	801787c <_Balloc>
 8017cc6:	4605      	mov	r5, r0
 8017cc8:	b948      	cbnz	r0, 8017cde <__lshift+0x3e>
 8017cca:	4602      	mov	r2, r0
 8017ccc:	4b2a      	ldr	r3, [pc, #168]	; (8017d78 <__lshift+0xd8>)
 8017cce:	482b      	ldr	r0, [pc, #172]	; (8017d7c <__lshift+0xdc>)
 8017cd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017cd4:	f000 fb1c 	bl	8018310 <__assert_func>
 8017cd8:	3101      	adds	r1, #1
 8017cda:	005b      	lsls	r3, r3, #1
 8017cdc:	e7ee      	b.n	8017cbc <__lshift+0x1c>
 8017cde:	2300      	movs	r3, #0
 8017ce0:	f100 0114 	add.w	r1, r0, #20
 8017ce4:	f100 0210 	add.w	r2, r0, #16
 8017ce8:	4618      	mov	r0, r3
 8017cea:	4553      	cmp	r3, sl
 8017cec:	db37      	blt.n	8017d5e <__lshift+0xbe>
 8017cee:	6920      	ldr	r0, [r4, #16]
 8017cf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017cf4:	f104 0314 	add.w	r3, r4, #20
 8017cf8:	f019 091f 	ands.w	r9, r9, #31
 8017cfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017d00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017d04:	d02f      	beq.n	8017d66 <__lshift+0xc6>
 8017d06:	f1c9 0e20 	rsb	lr, r9, #32
 8017d0a:	468a      	mov	sl, r1
 8017d0c:	f04f 0c00 	mov.w	ip, #0
 8017d10:	681a      	ldr	r2, [r3, #0]
 8017d12:	fa02 f209 	lsl.w	r2, r2, r9
 8017d16:	ea42 020c 	orr.w	r2, r2, ip
 8017d1a:	f84a 2b04 	str.w	r2, [sl], #4
 8017d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d22:	4298      	cmp	r0, r3
 8017d24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017d28:	d8f2      	bhi.n	8017d10 <__lshift+0x70>
 8017d2a:	1b03      	subs	r3, r0, r4
 8017d2c:	3b15      	subs	r3, #21
 8017d2e:	f023 0303 	bic.w	r3, r3, #3
 8017d32:	3304      	adds	r3, #4
 8017d34:	f104 0215 	add.w	r2, r4, #21
 8017d38:	4290      	cmp	r0, r2
 8017d3a:	bf38      	it	cc
 8017d3c:	2304      	movcc	r3, #4
 8017d3e:	f841 c003 	str.w	ip, [r1, r3]
 8017d42:	f1bc 0f00 	cmp.w	ip, #0
 8017d46:	d001      	beq.n	8017d4c <__lshift+0xac>
 8017d48:	f108 0602 	add.w	r6, r8, #2
 8017d4c:	3e01      	subs	r6, #1
 8017d4e:	4638      	mov	r0, r7
 8017d50:	612e      	str	r6, [r5, #16]
 8017d52:	4621      	mov	r1, r4
 8017d54:	f7ff fdd2 	bl	80178fc <_Bfree>
 8017d58:	4628      	mov	r0, r5
 8017d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017d62:	3301      	adds	r3, #1
 8017d64:	e7c1      	b.n	8017cea <__lshift+0x4a>
 8017d66:	3904      	subs	r1, #4
 8017d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017d70:	4298      	cmp	r0, r3
 8017d72:	d8f9      	bhi.n	8017d68 <__lshift+0xc8>
 8017d74:	e7ea      	b.n	8017d4c <__lshift+0xac>
 8017d76:	bf00      	nop
 8017d78:	0801976f 	.word	0x0801976f
 8017d7c:	080197e0 	.word	0x080197e0

08017d80 <__mcmp>:
 8017d80:	b530      	push	{r4, r5, lr}
 8017d82:	6902      	ldr	r2, [r0, #16]
 8017d84:	690c      	ldr	r4, [r1, #16]
 8017d86:	1b12      	subs	r2, r2, r4
 8017d88:	d10e      	bne.n	8017da8 <__mcmp+0x28>
 8017d8a:	f100 0314 	add.w	r3, r0, #20
 8017d8e:	3114      	adds	r1, #20
 8017d90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017d94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017d98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017d9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017da0:	42a5      	cmp	r5, r4
 8017da2:	d003      	beq.n	8017dac <__mcmp+0x2c>
 8017da4:	d305      	bcc.n	8017db2 <__mcmp+0x32>
 8017da6:	2201      	movs	r2, #1
 8017da8:	4610      	mov	r0, r2
 8017daa:	bd30      	pop	{r4, r5, pc}
 8017dac:	4283      	cmp	r3, r0
 8017dae:	d3f3      	bcc.n	8017d98 <__mcmp+0x18>
 8017db0:	e7fa      	b.n	8017da8 <__mcmp+0x28>
 8017db2:	f04f 32ff 	mov.w	r2, #4294967295
 8017db6:	e7f7      	b.n	8017da8 <__mcmp+0x28>

08017db8 <__mdiff>:
 8017db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dbc:	460c      	mov	r4, r1
 8017dbe:	4606      	mov	r6, r0
 8017dc0:	4611      	mov	r1, r2
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	4690      	mov	r8, r2
 8017dc6:	f7ff ffdb 	bl	8017d80 <__mcmp>
 8017dca:	1e05      	subs	r5, r0, #0
 8017dcc:	d110      	bne.n	8017df0 <__mdiff+0x38>
 8017dce:	4629      	mov	r1, r5
 8017dd0:	4630      	mov	r0, r6
 8017dd2:	f7ff fd53 	bl	801787c <_Balloc>
 8017dd6:	b930      	cbnz	r0, 8017de6 <__mdiff+0x2e>
 8017dd8:	4b3a      	ldr	r3, [pc, #232]	; (8017ec4 <__mdiff+0x10c>)
 8017dda:	4602      	mov	r2, r0
 8017ddc:	f240 2132 	movw	r1, #562	; 0x232
 8017de0:	4839      	ldr	r0, [pc, #228]	; (8017ec8 <__mdiff+0x110>)
 8017de2:	f000 fa95 	bl	8018310 <__assert_func>
 8017de6:	2301      	movs	r3, #1
 8017de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df0:	bfa4      	itt	ge
 8017df2:	4643      	movge	r3, r8
 8017df4:	46a0      	movge	r8, r4
 8017df6:	4630      	mov	r0, r6
 8017df8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017dfc:	bfa6      	itte	ge
 8017dfe:	461c      	movge	r4, r3
 8017e00:	2500      	movge	r5, #0
 8017e02:	2501      	movlt	r5, #1
 8017e04:	f7ff fd3a 	bl	801787c <_Balloc>
 8017e08:	b920      	cbnz	r0, 8017e14 <__mdiff+0x5c>
 8017e0a:	4b2e      	ldr	r3, [pc, #184]	; (8017ec4 <__mdiff+0x10c>)
 8017e0c:	4602      	mov	r2, r0
 8017e0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017e12:	e7e5      	b.n	8017de0 <__mdiff+0x28>
 8017e14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017e18:	6926      	ldr	r6, [r4, #16]
 8017e1a:	60c5      	str	r5, [r0, #12]
 8017e1c:	f104 0914 	add.w	r9, r4, #20
 8017e20:	f108 0514 	add.w	r5, r8, #20
 8017e24:	f100 0e14 	add.w	lr, r0, #20
 8017e28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017e2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017e30:	f108 0210 	add.w	r2, r8, #16
 8017e34:	46f2      	mov	sl, lr
 8017e36:	2100      	movs	r1, #0
 8017e38:	f859 3b04 	ldr.w	r3, [r9], #4
 8017e3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017e40:	fa1f f883 	uxth.w	r8, r3
 8017e44:	fa11 f18b 	uxtah	r1, r1, fp
 8017e48:	0c1b      	lsrs	r3, r3, #16
 8017e4a:	eba1 0808 	sub.w	r8, r1, r8
 8017e4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017e52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017e56:	fa1f f888 	uxth.w	r8, r8
 8017e5a:	1419      	asrs	r1, r3, #16
 8017e5c:	454e      	cmp	r6, r9
 8017e5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017e62:	f84a 3b04 	str.w	r3, [sl], #4
 8017e66:	d8e7      	bhi.n	8017e38 <__mdiff+0x80>
 8017e68:	1b33      	subs	r3, r6, r4
 8017e6a:	3b15      	subs	r3, #21
 8017e6c:	f023 0303 	bic.w	r3, r3, #3
 8017e70:	3304      	adds	r3, #4
 8017e72:	3415      	adds	r4, #21
 8017e74:	42a6      	cmp	r6, r4
 8017e76:	bf38      	it	cc
 8017e78:	2304      	movcc	r3, #4
 8017e7a:	441d      	add	r5, r3
 8017e7c:	4473      	add	r3, lr
 8017e7e:	469e      	mov	lr, r3
 8017e80:	462e      	mov	r6, r5
 8017e82:	4566      	cmp	r6, ip
 8017e84:	d30e      	bcc.n	8017ea4 <__mdiff+0xec>
 8017e86:	f10c 0203 	add.w	r2, ip, #3
 8017e8a:	1b52      	subs	r2, r2, r5
 8017e8c:	f022 0203 	bic.w	r2, r2, #3
 8017e90:	3d03      	subs	r5, #3
 8017e92:	45ac      	cmp	ip, r5
 8017e94:	bf38      	it	cc
 8017e96:	2200      	movcc	r2, #0
 8017e98:	441a      	add	r2, r3
 8017e9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017e9e:	b17b      	cbz	r3, 8017ec0 <__mdiff+0x108>
 8017ea0:	6107      	str	r7, [r0, #16]
 8017ea2:	e7a3      	b.n	8017dec <__mdiff+0x34>
 8017ea4:	f856 8b04 	ldr.w	r8, [r6], #4
 8017ea8:	fa11 f288 	uxtah	r2, r1, r8
 8017eac:	1414      	asrs	r4, r2, #16
 8017eae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017eb2:	b292      	uxth	r2, r2
 8017eb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017eb8:	f84e 2b04 	str.w	r2, [lr], #4
 8017ebc:	1421      	asrs	r1, r4, #16
 8017ebe:	e7e0      	b.n	8017e82 <__mdiff+0xca>
 8017ec0:	3f01      	subs	r7, #1
 8017ec2:	e7ea      	b.n	8017e9a <__mdiff+0xe2>
 8017ec4:	0801976f 	.word	0x0801976f
 8017ec8:	080197e0 	.word	0x080197e0

08017ecc <__d2b>:
 8017ecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ed0:	4689      	mov	r9, r1
 8017ed2:	2101      	movs	r1, #1
 8017ed4:	ec57 6b10 	vmov	r6, r7, d0
 8017ed8:	4690      	mov	r8, r2
 8017eda:	f7ff fccf 	bl	801787c <_Balloc>
 8017ede:	4604      	mov	r4, r0
 8017ee0:	b930      	cbnz	r0, 8017ef0 <__d2b+0x24>
 8017ee2:	4602      	mov	r2, r0
 8017ee4:	4b25      	ldr	r3, [pc, #148]	; (8017f7c <__d2b+0xb0>)
 8017ee6:	4826      	ldr	r0, [pc, #152]	; (8017f80 <__d2b+0xb4>)
 8017ee8:	f240 310a 	movw	r1, #778	; 0x30a
 8017eec:	f000 fa10 	bl	8018310 <__assert_func>
 8017ef0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017ef4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017ef8:	bb35      	cbnz	r5, 8017f48 <__d2b+0x7c>
 8017efa:	2e00      	cmp	r6, #0
 8017efc:	9301      	str	r3, [sp, #4]
 8017efe:	d028      	beq.n	8017f52 <__d2b+0x86>
 8017f00:	4668      	mov	r0, sp
 8017f02:	9600      	str	r6, [sp, #0]
 8017f04:	f7ff fd82 	bl	8017a0c <__lo0bits>
 8017f08:	9900      	ldr	r1, [sp, #0]
 8017f0a:	b300      	cbz	r0, 8017f4e <__d2b+0x82>
 8017f0c:	9a01      	ldr	r2, [sp, #4]
 8017f0e:	f1c0 0320 	rsb	r3, r0, #32
 8017f12:	fa02 f303 	lsl.w	r3, r2, r3
 8017f16:	430b      	orrs	r3, r1
 8017f18:	40c2      	lsrs	r2, r0
 8017f1a:	6163      	str	r3, [r4, #20]
 8017f1c:	9201      	str	r2, [sp, #4]
 8017f1e:	9b01      	ldr	r3, [sp, #4]
 8017f20:	61a3      	str	r3, [r4, #24]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	bf14      	ite	ne
 8017f26:	2202      	movne	r2, #2
 8017f28:	2201      	moveq	r2, #1
 8017f2a:	6122      	str	r2, [r4, #16]
 8017f2c:	b1d5      	cbz	r5, 8017f64 <__d2b+0x98>
 8017f2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017f32:	4405      	add	r5, r0
 8017f34:	f8c9 5000 	str.w	r5, [r9]
 8017f38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017f3c:	f8c8 0000 	str.w	r0, [r8]
 8017f40:	4620      	mov	r0, r4
 8017f42:	b003      	add	sp, #12
 8017f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f4c:	e7d5      	b.n	8017efa <__d2b+0x2e>
 8017f4e:	6161      	str	r1, [r4, #20]
 8017f50:	e7e5      	b.n	8017f1e <__d2b+0x52>
 8017f52:	a801      	add	r0, sp, #4
 8017f54:	f7ff fd5a 	bl	8017a0c <__lo0bits>
 8017f58:	9b01      	ldr	r3, [sp, #4]
 8017f5a:	6163      	str	r3, [r4, #20]
 8017f5c:	2201      	movs	r2, #1
 8017f5e:	6122      	str	r2, [r4, #16]
 8017f60:	3020      	adds	r0, #32
 8017f62:	e7e3      	b.n	8017f2c <__d2b+0x60>
 8017f64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017f68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017f6c:	f8c9 0000 	str.w	r0, [r9]
 8017f70:	6918      	ldr	r0, [r3, #16]
 8017f72:	f7ff fd2b 	bl	80179cc <__hi0bits>
 8017f76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017f7a:	e7df      	b.n	8017f3c <__d2b+0x70>
 8017f7c:	0801976f 	.word	0x0801976f
 8017f80:	080197e0 	.word	0x080197e0

08017f84 <_calloc_r>:
 8017f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f86:	fba1 2402 	umull	r2, r4, r1, r2
 8017f8a:	b94c      	cbnz	r4, 8017fa0 <_calloc_r+0x1c>
 8017f8c:	4611      	mov	r1, r2
 8017f8e:	9201      	str	r2, [sp, #4]
 8017f90:	f7fd fd4a 	bl	8015a28 <_malloc_r>
 8017f94:	9a01      	ldr	r2, [sp, #4]
 8017f96:	4605      	mov	r5, r0
 8017f98:	b930      	cbnz	r0, 8017fa8 <_calloc_r+0x24>
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	b003      	add	sp, #12
 8017f9e:	bd30      	pop	{r4, r5, pc}
 8017fa0:	220c      	movs	r2, #12
 8017fa2:	6002      	str	r2, [r0, #0]
 8017fa4:	2500      	movs	r5, #0
 8017fa6:	e7f8      	b.n	8017f9a <_calloc_r+0x16>
 8017fa8:	4621      	mov	r1, r4
 8017faa:	f7fd fcc9 	bl	8015940 <memset>
 8017fae:	e7f4      	b.n	8017f9a <_calloc_r+0x16>

08017fb0 <__sfputc_r>:
 8017fb0:	6893      	ldr	r3, [r2, #8]
 8017fb2:	3b01      	subs	r3, #1
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	b410      	push	{r4}
 8017fb8:	6093      	str	r3, [r2, #8]
 8017fba:	da08      	bge.n	8017fce <__sfputc_r+0x1e>
 8017fbc:	6994      	ldr	r4, [r2, #24]
 8017fbe:	42a3      	cmp	r3, r4
 8017fc0:	db01      	blt.n	8017fc6 <__sfputc_r+0x16>
 8017fc2:	290a      	cmp	r1, #10
 8017fc4:	d103      	bne.n	8017fce <__sfputc_r+0x1e>
 8017fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fca:	f7fe baed 	b.w	80165a8 <__swbuf_r>
 8017fce:	6813      	ldr	r3, [r2, #0]
 8017fd0:	1c58      	adds	r0, r3, #1
 8017fd2:	6010      	str	r0, [r2, #0]
 8017fd4:	7019      	strb	r1, [r3, #0]
 8017fd6:	4608      	mov	r0, r1
 8017fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fdc:	4770      	bx	lr

08017fde <__sfputs_r>:
 8017fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fe0:	4606      	mov	r6, r0
 8017fe2:	460f      	mov	r7, r1
 8017fe4:	4614      	mov	r4, r2
 8017fe6:	18d5      	adds	r5, r2, r3
 8017fe8:	42ac      	cmp	r4, r5
 8017fea:	d101      	bne.n	8017ff0 <__sfputs_r+0x12>
 8017fec:	2000      	movs	r0, #0
 8017fee:	e007      	b.n	8018000 <__sfputs_r+0x22>
 8017ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ff4:	463a      	mov	r2, r7
 8017ff6:	4630      	mov	r0, r6
 8017ff8:	f7ff ffda 	bl	8017fb0 <__sfputc_r>
 8017ffc:	1c43      	adds	r3, r0, #1
 8017ffe:	d1f3      	bne.n	8017fe8 <__sfputs_r+0xa>
 8018000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018004 <_vfiprintf_r>:
 8018004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018008:	460d      	mov	r5, r1
 801800a:	b09d      	sub	sp, #116	; 0x74
 801800c:	4614      	mov	r4, r2
 801800e:	4698      	mov	r8, r3
 8018010:	4606      	mov	r6, r0
 8018012:	b118      	cbz	r0, 801801c <_vfiprintf_r+0x18>
 8018014:	6983      	ldr	r3, [r0, #24]
 8018016:	b90b      	cbnz	r3, 801801c <_vfiprintf_r+0x18>
 8018018:	f7ff fb1a 	bl	8017650 <__sinit>
 801801c:	4b89      	ldr	r3, [pc, #548]	; (8018244 <_vfiprintf_r+0x240>)
 801801e:	429d      	cmp	r5, r3
 8018020:	d11b      	bne.n	801805a <_vfiprintf_r+0x56>
 8018022:	6875      	ldr	r5, [r6, #4]
 8018024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018026:	07d9      	lsls	r1, r3, #31
 8018028:	d405      	bmi.n	8018036 <_vfiprintf_r+0x32>
 801802a:	89ab      	ldrh	r3, [r5, #12]
 801802c:	059a      	lsls	r2, r3, #22
 801802e:	d402      	bmi.n	8018036 <_vfiprintf_r+0x32>
 8018030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018032:	f7ff fbb0 	bl	8017796 <__retarget_lock_acquire_recursive>
 8018036:	89ab      	ldrh	r3, [r5, #12]
 8018038:	071b      	lsls	r3, r3, #28
 801803a:	d501      	bpl.n	8018040 <_vfiprintf_r+0x3c>
 801803c:	692b      	ldr	r3, [r5, #16]
 801803e:	b9eb      	cbnz	r3, 801807c <_vfiprintf_r+0x78>
 8018040:	4629      	mov	r1, r5
 8018042:	4630      	mov	r0, r6
 8018044:	f7fe fb02 	bl	801664c <__swsetup_r>
 8018048:	b1c0      	cbz	r0, 801807c <_vfiprintf_r+0x78>
 801804a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801804c:	07dc      	lsls	r4, r3, #31
 801804e:	d50e      	bpl.n	801806e <_vfiprintf_r+0x6a>
 8018050:	f04f 30ff 	mov.w	r0, #4294967295
 8018054:	b01d      	add	sp, #116	; 0x74
 8018056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801805a:	4b7b      	ldr	r3, [pc, #492]	; (8018248 <_vfiprintf_r+0x244>)
 801805c:	429d      	cmp	r5, r3
 801805e:	d101      	bne.n	8018064 <_vfiprintf_r+0x60>
 8018060:	68b5      	ldr	r5, [r6, #8]
 8018062:	e7df      	b.n	8018024 <_vfiprintf_r+0x20>
 8018064:	4b79      	ldr	r3, [pc, #484]	; (801824c <_vfiprintf_r+0x248>)
 8018066:	429d      	cmp	r5, r3
 8018068:	bf08      	it	eq
 801806a:	68f5      	ldreq	r5, [r6, #12]
 801806c:	e7da      	b.n	8018024 <_vfiprintf_r+0x20>
 801806e:	89ab      	ldrh	r3, [r5, #12]
 8018070:	0598      	lsls	r0, r3, #22
 8018072:	d4ed      	bmi.n	8018050 <_vfiprintf_r+0x4c>
 8018074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018076:	f7ff fb8f 	bl	8017798 <__retarget_lock_release_recursive>
 801807a:	e7e9      	b.n	8018050 <_vfiprintf_r+0x4c>
 801807c:	2300      	movs	r3, #0
 801807e:	9309      	str	r3, [sp, #36]	; 0x24
 8018080:	2320      	movs	r3, #32
 8018082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018086:	f8cd 800c 	str.w	r8, [sp, #12]
 801808a:	2330      	movs	r3, #48	; 0x30
 801808c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018250 <_vfiprintf_r+0x24c>
 8018090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018094:	f04f 0901 	mov.w	r9, #1
 8018098:	4623      	mov	r3, r4
 801809a:	469a      	mov	sl, r3
 801809c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180a0:	b10a      	cbz	r2, 80180a6 <_vfiprintf_r+0xa2>
 80180a2:	2a25      	cmp	r2, #37	; 0x25
 80180a4:	d1f9      	bne.n	801809a <_vfiprintf_r+0x96>
 80180a6:	ebba 0b04 	subs.w	fp, sl, r4
 80180aa:	d00b      	beq.n	80180c4 <_vfiprintf_r+0xc0>
 80180ac:	465b      	mov	r3, fp
 80180ae:	4622      	mov	r2, r4
 80180b0:	4629      	mov	r1, r5
 80180b2:	4630      	mov	r0, r6
 80180b4:	f7ff ff93 	bl	8017fde <__sfputs_r>
 80180b8:	3001      	adds	r0, #1
 80180ba:	f000 80aa 	beq.w	8018212 <_vfiprintf_r+0x20e>
 80180be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180c0:	445a      	add	r2, fp
 80180c2:	9209      	str	r2, [sp, #36]	; 0x24
 80180c4:	f89a 3000 	ldrb.w	r3, [sl]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	f000 80a2 	beq.w	8018212 <_vfiprintf_r+0x20e>
 80180ce:	2300      	movs	r3, #0
 80180d0:	f04f 32ff 	mov.w	r2, #4294967295
 80180d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180d8:	f10a 0a01 	add.w	sl, sl, #1
 80180dc:	9304      	str	r3, [sp, #16]
 80180de:	9307      	str	r3, [sp, #28]
 80180e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180e4:	931a      	str	r3, [sp, #104]	; 0x68
 80180e6:	4654      	mov	r4, sl
 80180e8:	2205      	movs	r2, #5
 80180ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180ee:	4858      	ldr	r0, [pc, #352]	; (8018250 <_vfiprintf_r+0x24c>)
 80180f0:	f7e8 f896 	bl	8000220 <memchr>
 80180f4:	9a04      	ldr	r2, [sp, #16]
 80180f6:	b9d8      	cbnz	r0, 8018130 <_vfiprintf_r+0x12c>
 80180f8:	06d1      	lsls	r1, r2, #27
 80180fa:	bf44      	itt	mi
 80180fc:	2320      	movmi	r3, #32
 80180fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018102:	0713      	lsls	r3, r2, #28
 8018104:	bf44      	itt	mi
 8018106:	232b      	movmi	r3, #43	; 0x2b
 8018108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801810c:	f89a 3000 	ldrb.w	r3, [sl]
 8018110:	2b2a      	cmp	r3, #42	; 0x2a
 8018112:	d015      	beq.n	8018140 <_vfiprintf_r+0x13c>
 8018114:	9a07      	ldr	r2, [sp, #28]
 8018116:	4654      	mov	r4, sl
 8018118:	2000      	movs	r0, #0
 801811a:	f04f 0c0a 	mov.w	ip, #10
 801811e:	4621      	mov	r1, r4
 8018120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018124:	3b30      	subs	r3, #48	; 0x30
 8018126:	2b09      	cmp	r3, #9
 8018128:	d94e      	bls.n	80181c8 <_vfiprintf_r+0x1c4>
 801812a:	b1b0      	cbz	r0, 801815a <_vfiprintf_r+0x156>
 801812c:	9207      	str	r2, [sp, #28]
 801812e:	e014      	b.n	801815a <_vfiprintf_r+0x156>
 8018130:	eba0 0308 	sub.w	r3, r0, r8
 8018134:	fa09 f303 	lsl.w	r3, r9, r3
 8018138:	4313      	orrs	r3, r2
 801813a:	9304      	str	r3, [sp, #16]
 801813c:	46a2      	mov	sl, r4
 801813e:	e7d2      	b.n	80180e6 <_vfiprintf_r+0xe2>
 8018140:	9b03      	ldr	r3, [sp, #12]
 8018142:	1d19      	adds	r1, r3, #4
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	9103      	str	r1, [sp, #12]
 8018148:	2b00      	cmp	r3, #0
 801814a:	bfbb      	ittet	lt
 801814c:	425b      	neglt	r3, r3
 801814e:	f042 0202 	orrlt.w	r2, r2, #2
 8018152:	9307      	strge	r3, [sp, #28]
 8018154:	9307      	strlt	r3, [sp, #28]
 8018156:	bfb8      	it	lt
 8018158:	9204      	strlt	r2, [sp, #16]
 801815a:	7823      	ldrb	r3, [r4, #0]
 801815c:	2b2e      	cmp	r3, #46	; 0x2e
 801815e:	d10c      	bne.n	801817a <_vfiprintf_r+0x176>
 8018160:	7863      	ldrb	r3, [r4, #1]
 8018162:	2b2a      	cmp	r3, #42	; 0x2a
 8018164:	d135      	bne.n	80181d2 <_vfiprintf_r+0x1ce>
 8018166:	9b03      	ldr	r3, [sp, #12]
 8018168:	1d1a      	adds	r2, r3, #4
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	9203      	str	r2, [sp, #12]
 801816e:	2b00      	cmp	r3, #0
 8018170:	bfb8      	it	lt
 8018172:	f04f 33ff 	movlt.w	r3, #4294967295
 8018176:	3402      	adds	r4, #2
 8018178:	9305      	str	r3, [sp, #20]
 801817a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018260 <_vfiprintf_r+0x25c>
 801817e:	7821      	ldrb	r1, [r4, #0]
 8018180:	2203      	movs	r2, #3
 8018182:	4650      	mov	r0, sl
 8018184:	f7e8 f84c 	bl	8000220 <memchr>
 8018188:	b140      	cbz	r0, 801819c <_vfiprintf_r+0x198>
 801818a:	2340      	movs	r3, #64	; 0x40
 801818c:	eba0 000a 	sub.w	r0, r0, sl
 8018190:	fa03 f000 	lsl.w	r0, r3, r0
 8018194:	9b04      	ldr	r3, [sp, #16]
 8018196:	4303      	orrs	r3, r0
 8018198:	3401      	adds	r4, #1
 801819a:	9304      	str	r3, [sp, #16]
 801819c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181a0:	482c      	ldr	r0, [pc, #176]	; (8018254 <_vfiprintf_r+0x250>)
 80181a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181a6:	2206      	movs	r2, #6
 80181a8:	f7e8 f83a 	bl	8000220 <memchr>
 80181ac:	2800      	cmp	r0, #0
 80181ae:	d03f      	beq.n	8018230 <_vfiprintf_r+0x22c>
 80181b0:	4b29      	ldr	r3, [pc, #164]	; (8018258 <_vfiprintf_r+0x254>)
 80181b2:	bb1b      	cbnz	r3, 80181fc <_vfiprintf_r+0x1f8>
 80181b4:	9b03      	ldr	r3, [sp, #12]
 80181b6:	3307      	adds	r3, #7
 80181b8:	f023 0307 	bic.w	r3, r3, #7
 80181bc:	3308      	adds	r3, #8
 80181be:	9303      	str	r3, [sp, #12]
 80181c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181c2:	443b      	add	r3, r7
 80181c4:	9309      	str	r3, [sp, #36]	; 0x24
 80181c6:	e767      	b.n	8018098 <_vfiprintf_r+0x94>
 80181c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80181cc:	460c      	mov	r4, r1
 80181ce:	2001      	movs	r0, #1
 80181d0:	e7a5      	b.n	801811e <_vfiprintf_r+0x11a>
 80181d2:	2300      	movs	r3, #0
 80181d4:	3401      	adds	r4, #1
 80181d6:	9305      	str	r3, [sp, #20]
 80181d8:	4619      	mov	r1, r3
 80181da:	f04f 0c0a 	mov.w	ip, #10
 80181de:	4620      	mov	r0, r4
 80181e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181e4:	3a30      	subs	r2, #48	; 0x30
 80181e6:	2a09      	cmp	r2, #9
 80181e8:	d903      	bls.n	80181f2 <_vfiprintf_r+0x1ee>
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d0c5      	beq.n	801817a <_vfiprintf_r+0x176>
 80181ee:	9105      	str	r1, [sp, #20]
 80181f0:	e7c3      	b.n	801817a <_vfiprintf_r+0x176>
 80181f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80181f6:	4604      	mov	r4, r0
 80181f8:	2301      	movs	r3, #1
 80181fa:	e7f0      	b.n	80181de <_vfiprintf_r+0x1da>
 80181fc:	ab03      	add	r3, sp, #12
 80181fe:	9300      	str	r3, [sp, #0]
 8018200:	462a      	mov	r2, r5
 8018202:	4b16      	ldr	r3, [pc, #88]	; (801825c <_vfiprintf_r+0x258>)
 8018204:	a904      	add	r1, sp, #16
 8018206:	4630      	mov	r0, r6
 8018208:	f7fd fd22 	bl	8015c50 <_printf_float>
 801820c:	4607      	mov	r7, r0
 801820e:	1c78      	adds	r0, r7, #1
 8018210:	d1d6      	bne.n	80181c0 <_vfiprintf_r+0x1bc>
 8018212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018214:	07d9      	lsls	r1, r3, #31
 8018216:	d405      	bmi.n	8018224 <_vfiprintf_r+0x220>
 8018218:	89ab      	ldrh	r3, [r5, #12]
 801821a:	059a      	lsls	r2, r3, #22
 801821c:	d402      	bmi.n	8018224 <_vfiprintf_r+0x220>
 801821e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018220:	f7ff faba 	bl	8017798 <__retarget_lock_release_recursive>
 8018224:	89ab      	ldrh	r3, [r5, #12]
 8018226:	065b      	lsls	r3, r3, #25
 8018228:	f53f af12 	bmi.w	8018050 <_vfiprintf_r+0x4c>
 801822c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801822e:	e711      	b.n	8018054 <_vfiprintf_r+0x50>
 8018230:	ab03      	add	r3, sp, #12
 8018232:	9300      	str	r3, [sp, #0]
 8018234:	462a      	mov	r2, r5
 8018236:	4b09      	ldr	r3, [pc, #36]	; (801825c <_vfiprintf_r+0x258>)
 8018238:	a904      	add	r1, sp, #16
 801823a:	4630      	mov	r0, r6
 801823c:	f7fd ffac 	bl	8016198 <_printf_i>
 8018240:	e7e4      	b.n	801820c <_vfiprintf_r+0x208>
 8018242:	bf00      	nop
 8018244:	080197a0 	.word	0x080197a0
 8018248:	080197c0 	.word	0x080197c0
 801824c:	08019780 	.word	0x08019780
 8018250:	0801993c 	.word	0x0801993c
 8018254:	08019946 	.word	0x08019946
 8018258:	08015c51 	.word	0x08015c51
 801825c:	08017fdf 	.word	0x08017fdf
 8018260:	08019942 	.word	0x08019942

08018264 <__sread>:
 8018264:	b510      	push	{r4, lr}
 8018266:	460c      	mov	r4, r1
 8018268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801826c:	f000 f8d6 	bl	801841c <_read_r>
 8018270:	2800      	cmp	r0, #0
 8018272:	bfab      	itete	ge
 8018274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018276:	89a3      	ldrhlt	r3, [r4, #12]
 8018278:	181b      	addge	r3, r3, r0
 801827a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801827e:	bfac      	ite	ge
 8018280:	6563      	strge	r3, [r4, #84]	; 0x54
 8018282:	81a3      	strhlt	r3, [r4, #12]
 8018284:	bd10      	pop	{r4, pc}

08018286 <__swrite>:
 8018286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801828a:	461f      	mov	r7, r3
 801828c:	898b      	ldrh	r3, [r1, #12]
 801828e:	05db      	lsls	r3, r3, #23
 8018290:	4605      	mov	r5, r0
 8018292:	460c      	mov	r4, r1
 8018294:	4616      	mov	r6, r2
 8018296:	d505      	bpl.n	80182a4 <__swrite+0x1e>
 8018298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801829c:	2302      	movs	r3, #2
 801829e:	2200      	movs	r2, #0
 80182a0:	f000 f898 	bl	80183d4 <_lseek_r>
 80182a4:	89a3      	ldrh	r3, [r4, #12]
 80182a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80182ae:	81a3      	strh	r3, [r4, #12]
 80182b0:	4632      	mov	r2, r6
 80182b2:	463b      	mov	r3, r7
 80182b4:	4628      	mov	r0, r5
 80182b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182ba:	f000 b817 	b.w	80182ec <_write_r>

080182be <__sseek>:
 80182be:	b510      	push	{r4, lr}
 80182c0:	460c      	mov	r4, r1
 80182c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182c6:	f000 f885 	bl	80183d4 <_lseek_r>
 80182ca:	1c43      	adds	r3, r0, #1
 80182cc:	89a3      	ldrh	r3, [r4, #12]
 80182ce:	bf15      	itete	ne
 80182d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80182d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80182d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80182da:	81a3      	strheq	r3, [r4, #12]
 80182dc:	bf18      	it	ne
 80182de:	81a3      	strhne	r3, [r4, #12]
 80182e0:	bd10      	pop	{r4, pc}

080182e2 <__sclose>:
 80182e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182e6:	f000 b831 	b.w	801834c <_close_r>
	...

080182ec <_write_r>:
 80182ec:	b538      	push	{r3, r4, r5, lr}
 80182ee:	4d07      	ldr	r5, [pc, #28]	; (801830c <_write_r+0x20>)
 80182f0:	4604      	mov	r4, r0
 80182f2:	4608      	mov	r0, r1
 80182f4:	4611      	mov	r1, r2
 80182f6:	2200      	movs	r2, #0
 80182f8:	602a      	str	r2, [r5, #0]
 80182fa:	461a      	mov	r2, r3
 80182fc:	f7ef f8b3 	bl	8007466 <_write>
 8018300:	1c43      	adds	r3, r0, #1
 8018302:	d102      	bne.n	801830a <_write_r+0x1e>
 8018304:	682b      	ldr	r3, [r5, #0]
 8018306:	b103      	cbz	r3, 801830a <_write_r+0x1e>
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	bd38      	pop	{r3, r4, r5, pc}
 801830c:	20002974 	.word	0x20002974

08018310 <__assert_func>:
 8018310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018312:	4614      	mov	r4, r2
 8018314:	461a      	mov	r2, r3
 8018316:	4b09      	ldr	r3, [pc, #36]	; (801833c <__assert_func+0x2c>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	4605      	mov	r5, r0
 801831c:	68d8      	ldr	r0, [r3, #12]
 801831e:	b14c      	cbz	r4, 8018334 <__assert_func+0x24>
 8018320:	4b07      	ldr	r3, [pc, #28]	; (8018340 <__assert_func+0x30>)
 8018322:	9100      	str	r1, [sp, #0]
 8018324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018328:	4906      	ldr	r1, [pc, #24]	; (8018344 <__assert_func+0x34>)
 801832a:	462b      	mov	r3, r5
 801832c:	f000 f81e 	bl	801836c <fiprintf>
 8018330:	f7fd faae 	bl	8015890 <abort>
 8018334:	4b04      	ldr	r3, [pc, #16]	; (8018348 <__assert_func+0x38>)
 8018336:	461c      	mov	r4, r3
 8018338:	e7f3      	b.n	8018322 <__assert_func+0x12>
 801833a:	bf00      	nop
 801833c:	20000184 	.word	0x20000184
 8018340:	0801994d 	.word	0x0801994d
 8018344:	0801995a 	.word	0x0801995a
 8018348:	08019988 	.word	0x08019988

0801834c <_close_r>:
 801834c:	b538      	push	{r3, r4, r5, lr}
 801834e:	4d06      	ldr	r5, [pc, #24]	; (8018368 <_close_r+0x1c>)
 8018350:	2300      	movs	r3, #0
 8018352:	4604      	mov	r4, r0
 8018354:	4608      	mov	r0, r1
 8018356:	602b      	str	r3, [r5, #0]
 8018358:	f7ef f8b2 	bl	80074c0 <_close>
 801835c:	1c43      	adds	r3, r0, #1
 801835e:	d102      	bne.n	8018366 <_close_r+0x1a>
 8018360:	682b      	ldr	r3, [r5, #0]
 8018362:	b103      	cbz	r3, 8018366 <_close_r+0x1a>
 8018364:	6023      	str	r3, [r4, #0]
 8018366:	bd38      	pop	{r3, r4, r5, pc}
 8018368:	20002974 	.word	0x20002974

0801836c <fiprintf>:
 801836c:	b40e      	push	{r1, r2, r3}
 801836e:	b503      	push	{r0, r1, lr}
 8018370:	4601      	mov	r1, r0
 8018372:	ab03      	add	r3, sp, #12
 8018374:	4805      	ldr	r0, [pc, #20]	; (801838c <fiprintf+0x20>)
 8018376:	f853 2b04 	ldr.w	r2, [r3], #4
 801837a:	6800      	ldr	r0, [r0, #0]
 801837c:	9301      	str	r3, [sp, #4]
 801837e:	f7ff fe41 	bl	8018004 <_vfiprintf_r>
 8018382:	b002      	add	sp, #8
 8018384:	f85d eb04 	ldr.w	lr, [sp], #4
 8018388:	b003      	add	sp, #12
 801838a:	4770      	bx	lr
 801838c:	20000184 	.word	0x20000184

08018390 <_fstat_r>:
 8018390:	b538      	push	{r3, r4, r5, lr}
 8018392:	4d07      	ldr	r5, [pc, #28]	; (80183b0 <_fstat_r+0x20>)
 8018394:	2300      	movs	r3, #0
 8018396:	4604      	mov	r4, r0
 8018398:	4608      	mov	r0, r1
 801839a:	4611      	mov	r1, r2
 801839c:	602b      	str	r3, [r5, #0]
 801839e:	f7ef f89b 	bl	80074d8 <_fstat>
 80183a2:	1c43      	adds	r3, r0, #1
 80183a4:	d102      	bne.n	80183ac <_fstat_r+0x1c>
 80183a6:	682b      	ldr	r3, [r5, #0]
 80183a8:	b103      	cbz	r3, 80183ac <_fstat_r+0x1c>
 80183aa:	6023      	str	r3, [r4, #0]
 80183ac:	bd38      	pop	{r3, r4, r5, pc}
 80183ae:	bf00      	nop
 80183b0:	20002974 	.word	0x20002974

080183b4 <_isatty_r>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	4d06      	ldr	r5, [pc, #24]	; (80183d0 <_isatty_r+0x1c>)
 80183b8:	2300      	movs	r3, #0
 80183ba:	4604      	mov	r4, r0
 80183bc:	4608      	mov	r0, r1
 80183be:	602b      	str	r3, [r5, #0]
 80183c0:	f7ef f89a 	bl	80074f8 <_isatty>
 80183c4:	1c43      	adds	r3, r0, #1
 80183c6:	d102      	bne.n	80183ce <_isatty_r+0x1a>
 80183c8:	682b      	ldr	r3, [r5, #0]
 80183ca:	b103      	cbz	r3, 80183ce <_isatty_r+0x1a>
 80183cc:	6023      	str	r3, [r4, #0]
 80183ce:	bd38      	pop	{r3, r4, r5, pc}
 80183d0:	20002974 	.word	0x20002974

080183d4 <_lseek_r>:
 80183d4:	b538      	push	{r3, r4, r5, lr}
 80183d6:	4d07      	ldr	r5, [pc, #28]	; (80183f4 <_lseek_r+0x20>)
 80183d8:	4604      	mov	r4, r0
 80183da:	4608      	mov	r0, r1
 80183dc:	4611      	mov	r1, r2
 80183de:	2200      	movs	r2, #0
 80183e0:	602a      	str	r2, [r5, #0]
 80183e2:	461a      	mov	r2, r3
 80183e4:	f7ef f893 	bl	800750e <_lseek>
 80183e8:	1c43      	adds	r3, r0, #1
 80183ea:	d102      	bne.n	80183f2 <_lseek_r+0x1e>
 80183ec:	682b      	ldr	r3, [r5, #0]
 80183ee:	b103      	cbz	r3, 80183f2 <_lseek_r+0x1e>
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	bd38      	pop	{r3, r4, r5, pc}
 80183f4:	20002974 	.word	0x20002974

080183f8 <__ascii_mbtowc>:
 80183f8:	b082      	sub	sp, #8
 80183fa:	b901      	cbnz	r1, 80183fe <__ascii_mbtowc+0x6>
 80183fc:	a901      	add	r1, sp, #4
 80183fe:	b142      	cbz	r2, 8018412 <__ascii_mbtowc+0x1a>
 8018400:	b14b      	cbz	r3, 8018416 <__ascii_mbtowc+0x1e>
 8018402:	7813      	ldrb	r3, [r2, #0]
 8018404:	600b      	str	r3, [r1, #0]
 8018406:	7812      	ldrb	r2, [r2, #0]
 8018408:	1e10      	subs	r0, r2, #0
 801840a:	bf18      	it	ne
 801840c:	2001      	movne	r0, #1
 801840e:	b002      	add	sp, #8
 8018410:	4770      	bx	lr
 8018412:	4610      	mov	r0, r2
 8018414:	e7fb      	b.n	801840e <__ascii_mbtowc+0x16>
 8018416:	f06f 0001 	mvn.w	r0, #1
 801841a:	e7f8      	b.n	801840e <__ascii_mbtowc+0x16>

0801841c <_read_r>:
 801841c:	b538      	push	{r3, r4, r5, lr}
 801841e:	4d07      	ldr	r5, [pc, #28]	; (801843c <_read_r+0x20>)
 8018420:	4604      	mov	r4, r0
 8018422:	4608      	mov	r0, r1
 8018424:	4611      	mov	r1, r2
 8018426:	2200      	movs	r2, #0
 8018428:	602a      	str	r2, [r5, #0]
 801842a:	461a      	mov	r2, r3
 801842c:	f7ee fffe 	bl	800742c <_read>
 8018430:	1c43      	adds	r3, r0, #1
 8018432:	d102      	bne.n	801843a <_read_r+0x1e>
 8018434:	682b      	ldr	r3, [r5, #0]
 8018436:	b103      	cbz	r3, 801843a <_read_r+0x1e>
 8018438:	6023      	str	r3, [r4, #0]
 801843a:	bd38      	pop	{r3, r4, r5, pc}
 801843c:	20002974 	.word	0x20002974

08018440 <__ascii_wctomb>:
 8018440:	b149      	cbz	r1, 8018456 <__ascii_wctomb+0x16>
 8018442:	2aff      	cmp	r2, #255	; 0xff
 8018444:	bf85      	ittet	hi
 8018446:	238a      	movhi	r3, #138	; 0x8a
 8018448:	6003      	strhi	r3, [r0, #0]
 801844a:	700a      	strbls	r2, [r1, #0]
 801844c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018450:	bf98      	it	ls
 8018452:	2001      	movls	r0, #1
 8018454:	4770      	bx	lr
 8018456:	4608      	mov	r0, r1
 8018458:	4770      	bx	lr
	...

0801845c <_init>:
 801845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801845e:	bf00      	nop
 8018460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018462:	bc08      	pop	{r3}
 8018464:	469e      	mov	lr, r3
 8018466:	4770      	bx	lr

08018468 <_fini>:
 8018468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801846a:	bf00      	nop
 801846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801846e:	bc08      	pop	{r3}
 8018470:	469e      	mov	lr, r3
 8018472:	4770      	bx	lr
